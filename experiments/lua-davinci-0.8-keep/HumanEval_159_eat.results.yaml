name: HumanEval_159_eat
language: lua
results:
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {\n    number + math.min(need, remaining),\n\
    \    math.max(remaining - need, 0)\n  }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code goes here\n  local r\n  if remaining\
    \ > need - number then r = {need, remaining - (need - number)} else r = {remaining\
    \ + number, 0} end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwigdhag9.lua:33:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpwigdhag9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need <= remaining then\n    return\
    \ { number + need, remaining - number - need }\n  else\n    return { number +\
    \ remaining, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppejrx4bo.lua:34:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmppejrx4bo.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if number >= need then\n        return need\n\
    \    elseif remaining >= need then\n        return number + need\n    else\n \
    \       return number + remaining\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c7jnv1j.lua:36:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmp6c7jnv1j.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local result = {0, 0}\n    if number + need\
    \ <= remaining then\n        result[1] = number + need\n        result[2] = remaining\
    \ - (number + need)\n    else\n        result[1] = number + remaining\n      \
    \  result[2] = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wieidha.lua:38:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmp8wieidha.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total <= remaining\
    \ then\n    return { total, remaining - total }\n  else\n    return { remaining\
    \ + number, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fz5_jiq.lua:35:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmp6fz5_jiq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code goes here\n  local totalCarrots=\
    \ number + need\n  local carrotsLeft = remaining - totalCarrots\n  if carrotsLeft\
    \ > 0 then\n    return {totalCarrots, carrotsLeft}\n  else\n    if carrotsLeft\
    \ < 0 then\n      return {totalCarrots, 0}\n    else\n      return {totalCarrots,\
    \ remaining}\n    end\n  end\nend\nprint(eat(5, 6, 10))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "table: 0xa301f0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxi47w_k.lua:42:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmpvxi47w_k.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local e = number + need\n  local r = (remaining\
    \ >= e) and (remaining - e) or 0\n  return {e, r}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1agp3nr.lua:32:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmpt1agp3nr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {number + (need <= remaining and need\
    \ or remaining), remaining - (need <= remaining and need or remaining)}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local need = need - number\n    local hasCarrots\
    \ = remaining - need\n    if hasCarrots < 0 then\n        hasCarrots = 0\n   \
    \ end\n    return {number + need, hasCarrots}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4ys04dv.lua:35:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpn4ys04dv.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local meals = math.ceil(need - number)\n \
    \   local left = remaining - meals\n    if left >= 0 then\n        return {number\
    \ + meals, left}\n    else\n        return {number + remaining, 0}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucx0httz.lua:36:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpucx0httz.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if (number + need) > remaining then\n    return\
    \ {number = number + remaining, remaining = 0}\n  else\n    return {number = number\
    \ + need, remaining = remaining - (number + need)}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1j_yoqx.lua:34:\
    \ expected: {11, 4}\nactual: {number=15, remaining=0}\nstack traceback:\n\t/tmp/tmpc1j_yoqx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if need > remaining then\n        return number\
    \ + remaining, 0\n    else\n        return number + need, remaining - need\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3erndy0.lua:34:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmpl3erndy0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return (number + need <= remaining) and {number\
    \ + need, remaining - need} or {remaining + number, 0}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplne_wamc.lua:30:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmplne_wamc.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  local left\
    \ = total - need\n  return {\n    need > total and total or need,\n    need <=\
    \ total and left or 0\n  }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp730z6jgi.lua:35:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmp730z6jgi.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- YOUR CODE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp526sb8.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpxp526sb8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Good luck!\n  if number >= need then\n  \
    \  return {need, remaining}\n  else\n    if remaining + number < need then\n \
    \     return {remaining + number, 0}\n    else\n      return {need, remaining\
    \ + number - need}\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58xcmhpd.lua:39:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmp58xcmhpd.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local to_eat = need - number\n  if to_eat <=\
    \ remaining then\n    return { need, remaining - to_eat }\n  else\n    return\
    \ { number + remaining, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg_y2zs4.lua:35:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmphg_y2zs4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + need\n    local result\
    \ = {}\n    if remaining >= need then\n        result[1] = total\n        result[2]\
    \ = remaining - need\n    else\n        result[1] = total + remaining\n      \
    \  result[2] = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05fi35il.lua:42:\
    \ expected: {7, 0}\nactual: {18, 0}\nstack traceback:\n\t/tmp/tmp05fi35il.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + need, remaining - need < 0\
    \ and 0 or remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9epjk6g2.lua:33:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp9epjk6g2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- TODO: Your code here\n  -- Return an array\
    \ of carrot count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomrz138c.lua:31:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpomrz138c.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbyd3e9h.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpvbyd3e9h.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local carrots = remaining - number\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2ann7xex.lua:37: 'end' expected (to close 'function' at line\
    \ 23) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfp36sid6.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpfp36sid6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Input your code here!\n    return {number+need,\
    \ remaining-need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskqm81oq.lua:34:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmpskqm81oq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number + remaining\n    return\
    \ carrots >= need and {need, carrots - need} or {carrots, 0}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3gbfprn.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpe3gbfprn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total <= remaining\
    \ then\n    return { total, remaining - total }\n  else\n    return { total -\
    \ remaining, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpviftxqad.lua:35:\
    \ expected: {11, 4}\nactual: {1, 0}\nstack traceback:\n\t/tmp/tmpviftxqad.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number > remaining then\n    return {number\
    \ - remaining, 0}\n  elseif need > remaining then\n    return {number + remaining,\
    \ 0}\n  else\n    return {number + need, remaining - need}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7r5meqs.lua:41:\
    \ expected: {5, 0}\nactual: {3, 0}\nstack traceback:\n\t/tmp/tmpi7r5meqs.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return need - number >\
    \ remaining and {number + remaining, 0} or {number + need, remaining - need}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38e0wcdo.lua:36:\
    \ expected: {5, 0}\nactual: {9, -4}\nstack traceback:\n\t/tmp/tmp38e0wcdo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    if remaining < number\
    \ + need then\n        return {remaining, 0}\n    else\n        return {number\
    \ + need, remaining - number - need}\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmo_z3il.lua:35:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpdmo_z3il.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number + need\n    local left\n\
    \    if eaten > remaining then\n        left = 0\n    else\n        left = remaining\
    \ - eaten\n    end\n    return {eaten, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplzegwe3.lua:37:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmpplzegwe3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code here\n  -- return the calculated\
    \ result with two integers in an array.\n  local eaten = 0\n  if number >= need\
    \ then\n    eaten = number\n  else\n    if need - number <= remaining then\n \
    \     eaten = number + need - number\n    else\n      eaten = number + remaining\n\
    \    end\n  end\n  return {eaten, remaining - (eaten - number)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde_q782x.lua:42:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpde_q782x.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number + math.min(need, remaining)\n\
    \    local left = math.max(remaining - need, 0)\n    return {eaten, left}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- #TODO\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihhssc60.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpihhssc60.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number + need\n    local remaining_carrots\
    \ = remaining - need\n    if eaten > remaining then\n        eaten = remaining\n\
    \        remaining_carrots = 0\n    end\n    return {eaten, remaining_carrots}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgj6g9_7.lua:36:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmprgj6g9_7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = 0\n    for i = 1, need do\n\
    \        if remaining > 0 then\n            eaten = eaten + 1\n            remaining\
    \ = remaining - 1\n        end\n    end\n    return { eaten + number, remaining\
    \ }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if need >= remaining then\n        return\
    \ {number + remaining, 0}\n    else\n        return {number + need, remaining\
    \ - need}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\nend\nreturn eat\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf72prli1.lua:26: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local carrot_left = remaining - (number + need)\n\
    \  if carrot_left < 0 then\n    return {number + remaining, math.abs(carrot_left)}\n\
    \  else\n    return {number + need, carrot_left}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j5n6nn7.lua:35:\
    \ expected: {11, 4}\nactual: {15, 1}\nstack traceback:\n\t/tmp/tmp7j5n6nn7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgup21p6w.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpgup21p6w.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Your code here\n    local carrots = 0\n\
    \    if remaining >= need then\n        carrots = number + need\n        remaining\
    \ = remaining - need\n    else\n        carrots = number + remaining\n       \
    \ remaining = 0\n    end\n    return {carrots, remaining}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + need\n    local carrots\
    \ = remaining - total\n    if carrots < 0 then\n        return {total, 0}\n  \
    \  else\n        return {total, carrots}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef1ktt1y.lua:36:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmpef1ktt1y.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {number + need, remaining\
    \ - (number + need)}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk83y9e8n.lua:35:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpk83y9e8n.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local result = {}\n  local carrotsEaten = need\
    \ + number\n  if carrotsEaten > remaining then\n    result[1] = remaining\n  \
    \  result[2] = 0\n  else\n    result[1] = carrotsEaten\n    result[2] = remaining\
    \ - carrotsEaten\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7nxipn8.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpi7nxipn8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here :)\n  -- You need to eat \"\
    need\" carrots. If you don't have enough, you'll eat\n  -- all the remaining carrots.\n\
    \  if remaining > need then\n    return number + need, remaining - need\n  else\n\
    \    return number + remaining, 0\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_b9n_lo.lua:37:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmpv_b9n_lo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\treturn {math.min(number + remaining, number\
    \ + need), math.max(remaining - (need - number), 0)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdyrukdo.lua:30:\
    \ expected: {11, 4}\nactual: {11, 9}\nstack traceback:\n\t/tmp/tmpbdyrukdo.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number == nil or need == nil or remaining\
    \ == nil then\n    return nil\n  end\n  if type(number) ~= \"number\" or type(need)\
    \ ~= \"number\" or type(remaining) ~= \"number\" then\n    return nil\n  end\n\
    \  if number < 0 or number > 1000 or need < 0 or need > 1000 or remaining < 0\
    \ or remaining > 1000 then\n    return nil\n  end\n  local total = 0\n  if number\
    \ + remaining >= need then\n    total = need\n  else\n    total = number + remaining\n\
    \  end\n  local result = { total, remaining - total + number }\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjabt2hgu.lua:46:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpjabt2hgu.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local num = number\n    local need = need\n\
    \    local rem = remaining\n    if rem < (need - num) then\n        num = num\
    \ + rem\n        rem = 0\n    else\n        num = num + need\n        rem = rem\
    \ - (need - num)\n    end\n    return {num, rem}\nend\nreturn eat\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplqw5wh85.lua:37: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if remaining < need - number then\n      \
    \  return remaining + number, 0\n    else\n        return need, remaining - (need\
    \ - number)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37dqckg3.lua:34:\
    \ expected: {11, 4}\nactual: 6\nstack traceback:\n\t/tmp/tmp37dqckg3.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  local left\
    \ = total - need\n  return total < need and { total, 0 } or { need, left }\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3iclnpi.lua:32:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmps3iclnpi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Write your code here\n  return {number +\
    \ need, math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe72a9ten.lua:34:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpe72a9ten.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number + remaining\n  if eaten\
    \ >= need then\n    return {need, eaten - need}\n  else\n    return {eaten, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfikas1mx.lua:35:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpfikas1mx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return { math.min(number + remaining, number\
    \ + need), math.max(0, number + remaining - (number + need)) }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return { number + math.min(need, remaining),\
    \ math.max(remaining - need, 0) }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return { math.min(number + remaining, number\
    \ + need), math.max(remaining - (need - number), 0) }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxd7m5d1.lua:30:\
    \ expected: {11, 4}\nactual: {11, 9}\nstack traceback:\n\t/tmp/tmpdxd7m5d1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number + remaining\n    return\
    \ carrots >= need and {need, carrots - need} or {carrots, 0}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78omlvnp.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmp78omlvnp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local res = {}\n  if (number + need) > remaining\
    \ then\n    res[1] = remaining\n    res[2] = 0\n  else\n    res[1] = number +\
    \ need\n    res[2] = remaining - (number + need)\n  end\n  return res\nend\nreturn\
    \ eat\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplsbh_abg.lua:35: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number + need\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa1dgcipd.lua:37: 'end' expected (to close 'function' at line\
    \ 23) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local totalCarrotsEaten = number + need\n\
    \    local remainingCarrots = 0\n    if remaining < need then\n        totalCarrotsEaten\
    \ = totalCarrotsEaten + remaining\n        remainingCarrots = 0\n    else\n  \
    \      remainingCarrots = remaining - need\n    end\n    return {totalCarrotsEaten,\
    \ remainingCarrots}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94k1wptf.lua:41:\
    \ expected: {7, 0}\nactual: {18, 0}\nstack traceback:\n\t/tmp/tmp94k1wptf.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    --your code here\n    if (number + need) >\
    \ remaining then\n        return {remaining, 0}\n    else\n        return {number\
    \ + need, remaining - (number + need)}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8inl2z4e.lua:35:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp8inl2z4e.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnz55ju58.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpnz55ju58.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if remaining >= need then\n    return {number\
    \ + need, remaining - need}\n  else\n    return {number + remaining, 0}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local all = number + remaining\n    if all\
    \ < need then\n        return {all, 0}\n    else\n        return {need, all -\
    \ need}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82mpoecl.lua:35:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmp82mpoecl.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6cz1btm.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpa6cz1btm.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number + math.min(need, remaining)\n\
    \    return {eaten, math.max(0, remaining - need)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local sum = number + need\n  if remaining >\
    \ need then\n    return {sum, remaining - need}\n  else\n    return {sum, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9h_vcjm.lua:38:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpv9h_vcjm.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if number + need > remaining then\n      \
    \  return { number + remaining, 0 }\n    else\n        return { number + need,\
    \ remaining - (number + need) }\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98au1sa7.lua:34:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmp98au1sa7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\nend\nreturn eat\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp27kqw2xz.lua:26: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jz9i4ef.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jz9i4ef.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number\n    if need < remaining\
    \ then\n        eaten = number + need\n        remaining = remaining - need\n\
    \    else\n        eaten = number + remaining\n        remaining = 0\n    end\n\
    \    return {eaten, remaining}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local result = {number + need, remaining -\
    \ need}\n    if result[2] < 0 then\n        result[1] = result[1] + result[2]\n\
    \        result[2] = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    return {}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n \
    \   lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgdjex6l.lua:31:\
    \ expected: {11, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpmgdjex6l.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return { number + math.min(need, remaining),\
    \ math.max(remaining - need, 0) }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local result = {}\n  if need >= remaining then\n\
    \    result[1] = number + remaining\n    result[2] = 0\n  else\n    result[1]\
    \ = number + need\n    result[2] = remaining - need\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local meals = number + need\n  local result\
    \ = {}\n  result[1] = meals\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt6r0vweq.lua:39: 'end' expected (to close 'function' at line\
    \ 23) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- TODO: You need to implement this function!\n\
    \  -- Hint: you need to add some code here :)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd012wrm.lua:31:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpwd012wrm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbcd0bxd.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpkbcd0bxd.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if remaining + number >= need then\n    return\
    \ {need, remaining + number - need}\n  else\n    return {remaining + number, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzq02emb.lua:34:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpbzq02emb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdquj6moe.lua:29:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpdquj6moe.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return remaining >= need and {number + need,\
    \ remaining - need} or {number + remaining, 0}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\tlocal allCarrots= number + remaining\n\tif allCarrots\
    \ < need then\n\t\treturn {allCarrots, 0}\n\telse\n\t\treturn {need + number,\
    \ allCarrots - need}\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsjwbfsc.lua:35:\
    \ expected: {11, 4}\nactual: {11, 9}\nstack traceback:\n\t/tmp/tmpvsjwbfsc.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if number < 0 or need < 0 or remaining < 0\
    \ then\n        return nil\n    end\n    local n = number + need\n    local result\
    \ = n - remaining\n    if n >= remaining then\n        return { n, 0 }\n    else\n\
    \        return { n, remaining - n }\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavh9w8a9.lua:39:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmpavh9w8a9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + need > remaining and remaining\
    \ or number + need, remaining - need < 0 and 0 or remaining - need}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4pdp9l6.lua:30:\
    \ expected: {11, 4}\nactual: {10, 4}\nstack traceback:\n\t/tmp/tmpu4pdp9l6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local totalNumber = number + need\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjgg_0b4g.lua:37: 'end' expected (to close 'function' at line\
    \ 23) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if remaining >= need then\n        return\
    \ number + need, remaining - need\n    else\n        return number + remaining,\
    \ 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxx2qv7yx.lua:34:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmpxx2qv7yx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    --your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivwq4xi0.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpivwq4xi0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ysnnpac.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp3ysnnpac.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Write your code here\n  --[[\n  if remaining\
    \ < need then\n    return number + remaining, 0\n  else\n    return number + need,\
    \ remaining - need\n  end\n  --]]\n  return number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kw4mqpn.lua:38:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmp8kw4mqpn.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local a = number + need\n  local b = a - remaining\n\
    \  if b < 0 then\n    return {a, 0}\n  else\n    return {a, b}\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n \
    \   lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetgomvto.lua:36:\
    \ expected: {11, 4}\nactual: {11, 1}\nstack traceback:\n\t/tmp/tmpetgomvto.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code here\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuca58390.lua:31:\
    \ expected: {11, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpuca58390.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if need\
    \ >= total then\n    return {total, 0}\n  else\n    return {need, total - need}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalac53jx.lua:35:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpalac53jx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local totalEaten = need\
    \ + number;\n  local left = remaining - need;\n  if (left < 0) then\n    totalEaten\
    \ = remaining + number;\n    left = 0;\n  end\n  return {totalEaten, left};\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code is here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpco6u0sl9.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpco6u0sl9.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbloasg2b.lua:31:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpbloasg2b.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total_carrots = number + remaining\n \
    \ if total_carrots >= need then\n    return {number + need, total_carrots - need}\n\
    \  else\n    return {total_carrots, 0}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3_axd2n.lua:35:\
    \ expected: {11, 4}\nactual: {11, 9}\nstack traceback:\n\t/tmp/tmps3_axd2n.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local e = number + need\n  if e > remaining\
    \ then\n    e = remaining\n  end\n  return {e, remaining - e}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz4e_u6i.lua:34:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmptz4e_u6i.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {number + need, remaining - number - need}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4gxs2hx.lua:34:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpa4gxs2hx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code here\n  local sum = number + need\n\
    \  if sum < remaining then\n    return { sum, remaining - sum }\n  else\n    return\
    \ { sum, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ltw1qc7.lua:36:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmp3ltw1qc7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- local total = number\n    -- if remaining\
    \ > 0 then\n    --     if remaining >= need then\n    --         total = total\
    \ + need\n    --     else\n    --         total = total + remaining\n    --  \
    \   end\n    -- end\n    -- return {total, total - need}\n    return {number +\
    \ math.min(need, remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjx38ifb.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpcjx38ifb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local need_amount = need - number\n  if need_amount\
    \ <= remaining then\n    return number + need_amount, remaining - need_amount\n\
    \  else\n    return number + remaining, 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5619s1v.lua:35:\
    \ expected: {11, 4}\nactual: 6\nstack traceback:\n\t/tmp/tmpy5619s1v.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if number+need <= remaining then\n       \
    \ return {number+need, remaining-number-need}\n    else\n        return {number+remaining,\
    \ 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdx973e7y.lua:34:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpdx973e7y.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code goes here...\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgfzt034.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpvgfzt034.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Your code here!\n    local have = number\
    \ + remaining\n    if have >= need then\n        return {number+need, have-need}\n\
    \    else\n        return {have, 0}\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx089dmzf.lua:36:\
    \ expected: {11, 4}\nactual: {11, 9}\nstack traceback:\n\t/tmp/tmpx089dmzf.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90w7ggxp.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp90w7ggxp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend\nreturn eat\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6dq8dkvt.lua:28: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1r59m2p.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpa1r59m2p.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number\n  local left = remaining\
    \ - (need - number)\n  if left < 0 then\n    eaten = remaining + number\n    left\
    \ = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7puuysy6.lua:36:\
    \ expected: {11, 4}\nactual: {5, 9}\nstack traceback:\n\t/tmp/tmp7puuysy6.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if remaining < (number\
    \ + need) then\n    return {number + remaining, 0}\n  else\n    return {number\
    \ + need, remaining - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9loz79ov.lua:35:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmp9loz79ov.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur1b5bjg.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpur1b5bjg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local current_meal = number + need\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq2vqinr8.lua:37: 'end' expected (to close 'function' at line\
    \ 23) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32jwdphg.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp32jwdphg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3qfx34q.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3qfx34q.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if remaining < need then\n        return number\
    \ + remaining, 0\n    else\n        return number + need, remaining - need\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4cr6ruel.lua:34:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmp4cr6ruel.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  local meal\
    \ = math.min(total, number + need)\n  return {meal, math.max(total - meal, 0)}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local have = number\n  local diff = remaining\
    \ - have\n  if diff < need then\n    need = need - diff\n    have = have + diff\n\
    \  else\n    have = have + need\n    need = 0\n  end\n  return {have, need}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmkhpoh6.lua:39:\
    \ expected: {11, 4}\nactual: {10, 1}\nstack traceback:\n\t/tmp/tmpvmkhpoh6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local answer = {}\n    local eaten = number\
    \ + need\n    local carrots = 0\n    if remaining >= eaten then\n        carrots\
    \ = remaining - eaten\n    end\n    answer[1] = eaten\n    answer[2] = carrots\n\
    \    return answer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nwq8um7.lua:38:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmp5nwq8um7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\tlocal meal, remain = number + need, remaining\
    \ - need\n\treturn remain > 0 and [meal, remain] or [meal, 0]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6lqs7vi2.lua:25: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code goes here\n  return [number+need,remaining-need]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpktnq1h94.lua:25: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need <= remaining then\n    return\
    \ { number + need, remaining - number - need }\n  else\n    return { number +\
    \ remaining, 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzosrrex.lua:34:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpxzosrrex.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return { number + need, math.max(remaining -\
    \ need, 0) }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn6e8zjm.lua:33:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpxn6e8zjm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number + need\n    if eaten\
    \ > remaining then\n        return {remaining, 0}\n    else\n        return {eaten,\
    \ remaining - eaten}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfruf1u1.lua:35:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpdfruf1u1.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    number, need, remaining = tonumber(number),\
    \ tonumber(need), tonumber(remaining)\n    if number <= 0 or need <= 0 or remaining\
    \ <= 0 then\n        return nil\n    end\n    if remaining < need then\n     \
    \   return { number + remaining, 0 }\n    end\n    return { number + need, remaining\
    \ - need }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local totalCarrots = remaining - number + need\n\
    \  local left = 0\n  if totalCarrots > remaining then\n    left = totalCarrots\
    \ - remaining\n  end\n  return { totalCarrots, left }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpq4eoxe.lua:35:\
    \ expected: {11, 4}\nactual: {11, 1}\nstack traceback:\n\t/tmp/tmpfpq4eoxe.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if remaining >= need - number then\n     \
    \   return number + need, remaining - (need - number)\n    else\n        return\
    \ number + remaining, 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmtr62ht.lua:34:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmpgmtr62ht.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code\n  return {math.min(number+remaining,\
    \ number+need), math.max(0, remaining-need+number)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgb2bgke.lua:31:\
    \ expected: {11, 4}\nactual: {11, 9}\nstack traceback:\n\t/tmp/tmpcgb2bgke.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {number + need, remaining - need}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg818eg71.lua:33:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmpg818eg71.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + need, remaining - need}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr1iuuob.lua:33:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmpbr1iuuob.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number < 0 or need < 0 or remaining < 0 then\n\
    \    return nil\n  end\n  if number + need > remaining then\n    return { remaining\
    \ + number, 0 }\n  end\n  return { number + need, remaining - number - need }\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibok8_wp.lua:36:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpibok8_wp.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- TODO: implement your code here\n    --\
    \ return an array of [ total number of eaten carrots after your meals,\n    --\
    \ the number of carrots left after your meals ]\n    if number+need <= remaining\
    \ then\n        return {number+need, remaining-number-need}\n    else\n      \
    \  return {number+remaining, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_mxssec.lua:37:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmp4_mxssec.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if remaining < number + need then\n    return\
    \ {remaining, 0}\n  else\n    return {number + need, remaining - number - need}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7vf5r2u.lua:34:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpr7vf5r2u.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Fill your code here\n    if number <= remaining\
    \ then\n        if need <= remaining then\n            return number + need, remaining\
    \ - need\n        else\n            return number + remaining, 0\n        end\n\
    \    else\n        return number + remaining, 0\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpvnw32v.lua:39:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmpgpvnw32v.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if remaining < need then\n    return number\
    \ + remaining, 0\n  else\n    return number + need, remaining - need\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa725vonj.lua:34:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmpa725vonj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code here\n  local eaten = number +\
    \ need\n  if (eaten > remaining) then\n    return { remaining, 0 }\n  else\n \
    \   return { eaten, remaining - eaten }\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirytxrub.lua:36:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpirytxrub.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + need, remaining - need}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyb7wtyb3.lua:33:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmpyb7wtyb3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\t\n\t--if remaining < need then return (remaining\
    \ + number), 0 end\n\treturn remaining < need and {remaining + number, 0} or {number\
    \ + need, remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number + math.min(need, remaining)\n\
    \    local remainingCarrots = math.max(remaining - need, 0)\n    return {eaten,\
    \ remainingCarrots}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local carrotsLeft = remaining\
    \ - (number + need)\n  local howManyCarrotsDidYouEat = number + need\n  if carrotsLeft\
    \ < 0 then\n    carrotsLeft = 0\n  end\n  return {howManyCarrotsDidYouEat, carrotsLeft}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d1ph0yi.lua:36:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmp9d1ph0yi.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  local carrots\
    \ = remaining - need\n  if carrots < 0 then\n    return {total - (carrots * -1),\
    \ 0}\n  else\n    return {total, carrots}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left >= 0 then\n    return {total,\
    \ left}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmx0wy46.lua:40:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpzmx0wy46.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47m4ohgb.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp47m4ohgb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    return\
    \ { total >= need and need or total, total < need and 0 or total - need }\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw3kw_9w.lua:31:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpuw3kw_9w.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local result = {}\n  result[1] = number + need\n\
    \  result[2] = remaining - need\n  if result[2] < 0 then\n    result[2] = 0\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedy2tnlt.lua:39:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpedy2tnlt.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return number + need <= remaining and {number\
    \ + need, remaining - (number + need)} or {remaining + number, 0}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprii00qtv.lua:30:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmprii00qtv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if remaining\
    \ < need then\n    return {total, 0}\n  else\n    return {total, remaining - need}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ycfofvf.lua:38:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp3ycfofvf.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    --Code here\n    return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0una4bns.lua:31:\
    \ expected: {11, 4}\nactual: 0\nstack traceback:\n\t/tmp/tmp0una4bns.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7w7ihfk.lua:30:\
    \ expected: {11, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp_7w7ihfk.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Write your code here, enjoy!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquvecv_6.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpquvecv_6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if remaining < need then\n    return {number\
    \ + remaining, 0}\n  else\n    return {number + need, remaining - need}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local carrots_eaten, carrots_left = number,\
    \ remaining\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3gtmwf6y.lua:37: 'end' expected (to close 'function' at line\
    \ 23) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  local ret\
    \ = {total, remaining}\n  if total <= need then\n    ret[2] = 0\n  else\n    ret[2]\
    \ = total - need\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x79son0.lua:37:\
    \ expected: {11, 4}\nactual: {15, 9}\nstack traceback:\n\t/tmp/tmp_x79son0.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if number == nil or need == nil or remaining\
    \ == nil then\n        return nil\n    end\n    local newNumber = number + need\n\
    \    if newNumber >= remaining then\n        return {remaining, 0}\n    else\n\
    \        return {newNumber, remaining - newNumber}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwsc1cjt.lua:38:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpcwsc1cjt.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- TODO\n  if (number + need) <= remaining then\n\
    \    return number + need, remaining - (number + need)\n  elseif (number + need)\
    \ > remaining then\n    return number + remaining, 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewxmaroq.lua:35:\
    \ expected: {11, 4}\nactual: 15\nstack traceback:\n\t/tmp/tmpewxmaroq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpelexmplv.lua:37: 'end' expected (to close 'function' at line\
    \ 23) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Write your code here\n  if need + number\
    \ <= remaining then\n    return { number + need, remaining - (need + number) }\n\
    \  else\n    return { number + remaining, 0 }\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll3c90oo.lua:35:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpll3c90oo.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {number + need, remaining - (number + need)}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzzexqii.lua:34:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmprzzexqii.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number >= remaining\
    \ then\n    return number + need, remaining\n  else\n    return number + need,\
    \ remaining - need\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgefptyx.lua:35:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmpmgefptyx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ < need then\n    return {total, 0}\n  else\n    return {need, total - need}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyuvpw8wb.lua:35:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpyuvpw8wb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    total = number + need\n\
    \    if total <= remaining then\n        return {total, remaining - total}\n \
    \   else\n        return {remaining + number, 0}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp57jpqh.lua:36:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpcp57jpqh.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local have = number + remaining\n\
    \  local need_new = have - need\n  if need_new < 0 then\n    return {have, 0}\n\
    \  else\n    return {need, need_new}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrmvk0_j.lua:37:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmpzrmvk0_j.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Your code here\n    local carrots_available\
    \ = remaining + number\n    local carrots_eaten = carrots_available - need\n \
    \   local carrots_left = remaining - carrots_eaten\n    if carrots_eaten > 0 then\n\
    \        return {carrots_eaten, carrots_left}\n    else\n        return {need,\
    \ 0}\n    end\nend\nreturn eat\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkqz9d98b.lua:35: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv38kpab.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpqv38kpab.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0ptpihx.lua:30:\
    \ expected: {11, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpq0ptpihx.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {remaining+number < need and remaining+number\
    \ or need, remaining+number-need < 0 and 0 or remaining+number-need}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n \
    \   lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp201aamat.lua:30:\
    \ expected: {11, 4}\nactual: {6, 9}\nstack traceback:\n\t/tmp/tmp201aamat.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\tlocal n = number + need\n\tif n <= remaining\
    \ then\n\t\treturn {n, remaining - n}\n\telse\n\t\treturn {n, 0}\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp618dxeri.lua:35:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmp618dxeri.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Your code here\n    return { number + math.min(need,\
    \ remaining), remaining - math.min(need, remaining) }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkc3omwk.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpgkc3omwk.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuljp67q.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpiuljp67q.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3o3l41a.lua:29:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpy3o3l41a.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptnab0n1s.lua:37: 'end' expected (to close 'function' at line\
    \ 23) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\nend\n```\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppafymo5l.lua:26: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if remaining >= need then\n        return\
    \ number + need, remaining - need\n    else\n        return number + remaining,\
    \ 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8whf8nt.lua:34:\
    \ expected: {11, 4}\nactual: 11\nstack traceback:\n\t/tmp/tmpw8whf8nt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8h9lz5a.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpm8h9lz5a.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\treturn {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nreturn eat\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5z7qli1z.lua:27: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + need, remaining - need}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaya0mom2.lua:33:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmpaya0mom2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  --  your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpni9ymxs1.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpni9ymxs1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if number + need < remaining then\n      \
    \  return {number + need, remaining - number - need}\n    else\n        return\
    \ {number + remaining, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v5axx3y.lua:34:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmp5v5axx3y.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return { number + need, remaining - need }\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6uw2ccc.lua:33:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmp_6uw2ccc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + need\n    if total\
    \ >= remaining then\n        return {remaining, 0}\n    else\n        return {total,\
    \ remaining - total}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjja4pd76.lua:35:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpjja4pd76.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- return { number = 0, remaining = 0 }\n  --\
    \ Good luck!\n  -- number = total number of eaten carrots\n  -- need = the number\
    \ of carrots that you need to eat\n  -- remaining = the number of remaining carrots\
    \ thet exist in stock\n  local total = number + need\n  if total > remaining then\n\
    \    return { total, 0 }\n  else\n    return { total, remaining - total }\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznmsb1ru.lua:40:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmpznmsb1ru.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local result = {}\n    local carrots = number\
    \ + remaining\n    if carrots >= need then\n        result[1] = number + need\n\
    \        result[2] = carrots - need\n    else\n        result[1] = number + carrots\n\
    \        result[2] = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprli3_zj9.lua:39:\
    \ expected: {11, 4}\nactual: {11, 9}\nstack traceback:\n\t/tmp/tmprli3_zj9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code is here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgrpiotw.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpjgrpiotw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\nend\nreturn eat\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps9ui9535.lua:27: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ecda4de.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp8ecda4de.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n\tlocal value = remaining - need\n\treturn value\
    \ > 0 and { number + need, value } or { remaining + number, 0 }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91z3v8rw.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp91z3v8rw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4ppbe7j.lua:30:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpq4ppbe7j.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v8lchxt.lua:29:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp7v8lchxt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return { (number + math.min(need, remaining)),\
    \ math.max(0, remaining - need) }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local sum = number + need\n\
    \  local temp = sum - remaining\n  local count = 0\n  local eat = {}\n  if remaining\
    \ >= need then\n    count = sum\n    table.insert(eat, count)\n    table.insert(eat,\
    \ remaining - need)\n  elseif remaining < need then\n    table.insert(eat, sum)\n\
    \    table.insert(eat, 0)\n  end\n  return eat\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp554fko1k.lua:46:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp554fko1k.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return { number + math.min(need, remaining),\
    \ math.max(remaining - need, 0) }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
