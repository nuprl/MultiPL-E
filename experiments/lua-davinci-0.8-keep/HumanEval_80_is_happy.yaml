name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is happy\
  \ or not.\n-- A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- is_happy(a) => False\n-- is_happy(aa)\
  \ => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n-- is_happy(adb)\
  \ => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local size = #s\n  if size < 3 then\n    return false\n  end\n  for\
    \ i = 1, size - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    if #s < 3 then\n        return\
    \ false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.).%1')\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  return #s > 2 and not s:match(\"%1%1%1\")\nend", "    return #s >= 3 and #s:match(s:sub(1,\
    \ 1):rep(3)) < 3\nend", "  -- your code here\nend", "    if #s < 3 then\n    \
    \    return false\n    end\n    local s_len = #s\n    for i = 1, s_len - 2 do\n\
    \        if s:sub(i, i + 2):match('(.)%1%1') then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if s:len() < 3 then\n    return\
    \ false\n  end\n  for i = 1, s:len() - 2 do\n    if s:sub(i, i) == s:sub(i + 1,\
    \ i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i\
    \ + 2, i + 2) then\n      return false\n    end\n  end\n  return true\nend", " \
    \ return #s >= 3 and not s:find(\"([a-z])%1%1\")\nend", "    if #s < 3 then\n\
    \        return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend", "    return string.len(s) >= 3 and string.match(s,\
    \ '(.).%1') == nil\nend", "    local i = 1\n    while i < #s do\n        if s:sub(i,\
    \ i + 2) == s:sub(i + 1, i + 3) then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend", "  if #s < 3 then\n    return\
    \ false\n  end\n  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):find(s:sub(i, i),\
    \ 1, true) then\n      return false\n    end\n  end\n  return true\nend", "\t\
    local c = {}\n\tfor i = 1,#s do\n\t\tif i > 3 then\n\t\t\tfor k = 1,3 do\n\t\t\
    \t\tc[k] = c[k+1]\n\t\t\tend\n\t\tend\n\t\tc[4] = s:sub(i,i)\n\t\tif i >= 3 then\n\
    \t\t\tfor j = 1,3 do\n\t\t\t\tfor k = j+1,3 do\n\t\t\t\t\tif c[j] == c[k] then\n\
    \t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn true\nend", "  return s:len() >= 3 and\n          not (s:find('(.)%1%1'))\n\
    end", "    if #s < 3 then\n        return false\n    end\n    local t = {}\n \
    \   for i = 1, #s - 2 do\n        if t[s:sub(i, i + 2)] then\n            return\
    \ false\n        end\n        t[s:sub(i, i + 2)] = true\n    end\n    return true\n\
    end", "    -- return true if the string is happy and false otherwise\n    local\
    \ n = #s\n    if n < 3 then\n        return false\n    end\n    for i = 1, n -\
    \ 2 do\n        if s:sub(i, i + 2):match('(.)%1%1') then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local result = false\n  for i\
    \ = 1, #s - 2 do\n    local m, n, o = s:sub(i, i), s:sub(i + 1, i + 1), s:sub(i\
    \ + 2, i + 2)\n    if m ~= n and m ~= o and n ~= o then\n      result = true\n\
    \      break\n    end\n  end\n  return result\nend", "    if not s or string.len(s)\
    \ < 3 then\n        return false\n    end\n    local s1 = string.sub(s, 1, 3)\n\
    \    local char_map = {}\n    for _, c in ipairs(s1) do\n        if char_map[c]\
    \ then\n            return false\n        end\n        char_map[c] = true\n  \
    \  end\n    for i = 4, string.len(s) do\n        char_map[string.sub(s, i - 3,\
    \ i - 3)] = nil\n        if char_map[string.sub(s, i, i)] then\n            return\
    \ false\n        end\n        char_map[string.sub(s, i, i)] = true\n    end\n\
    \    return true\nend", "  return #s >= 3 and (not s:find(\"(%a)%1%1\"))\nend",
  "    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n \
    \       if s:sub(i, i + 2):byte(1) == s:sub(i, i + 2):byte(2) and s:sub(i, i +\
    \ 2):byte(2) == s:sub(i, i + 2):byte(3) then\n            return false\n     \
    \   end\n    end\n    return true\nend", "  if #s < 3 then\n    return false\n\
    \  end\n  for i = 1, #s-2 do\n    if s:sub(i, i+2):match(s:sub(i, i)) then\n \
    \     return false\n    end\n  end\n  return true\nend", "    local c1, c2, c3\
    \ = s:sub(1, 1), s:sub(2, 2), s:sub(3, 3)\n    if #s < 3 then\n        return\
    \ false\n    elseif c1 == c2 or c2 == c3 or c1 == c3 then\n        return false\n\
    \    else\n        return true\n    end\nend", "  -- your code here\n  -- use\
    \ string.sub(s, i, i) to get the i-th letter\nend\nprint(is_happy('abcd')) -->\
    \ True\nprint(is_happy('aabb')) --> False\nprint(is_happy('adb')) --> True\nprint(is_happy('xyy'))\
    \ --> False\nprint(is_happy('abcdxyy')) --> False", "  -- your code here\n  local\
    \ sLen = #s\n  if (sLen < 3) then\n    return false\n  end\n  for i = 3, sLen\
    \ do\n    if s:sub(i - 2, i) == s:sub(i - 1, i) .. s:sub(i, i) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    if s:len() < 3 then\n     \
    \   return false\n    end\n    for i = 1, s:len() - 2 do\n        if s:sub(i,\
    \ i + 2):sub(1, 1) == s:sub(i, i + 2):sub(2, 2) then\n            return false\n\
    \        end\n    end\n    return true\nend", "  -- return s:match(\"^(%a)%1*(%a)%2*(%a)%3*$\"\
    ) and true or false\n  return s:match(\"^(%a)%1*(%a)%2*(%a)%3*$\") and true or\
    \ false\nend", "  if #s < 3 then\n    return false\n  end\n  for i = 1, #s - 2\
    \ do\n    if s:sub(i, i + 2):match('(.)%1%1') then\n      return false\n    end\n\
    \  end\n  return true\nend", "  -- your code here\nend", "    local len = #s\n\
    \    if len < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end", "  if #s < 3 then\n    return false\n  end\n  for i = 3, #s do\n    if s:sub(i\
    \ - 2, i) == s:sub(i - 1, i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    if #s < 3 then\n        return false\n    end\n    for i =\
    \ 1, #s - 2 do\n        if s:sub(i, i + 2):find(s:sub(i, i)) then\n          \
    \  return false\n        end\n    end\n    return true\nend", "    if #s < 3 then\n\
    \        return false\n    end\n    local dict = {}\n    for i = 1, #s - 2 do\n\
    \        local str = s:sub(i, i + 2)\n        if dict[str] then\n            return\
    \ false\n        end\n        dict[str] = true\n    end\n    return true\nend",
  "  return s:len() >= 3 and not s:find(\"([^%w])%1%1\")\nend", "  if s == nil or\
    \ #s < 3 then\n    return false\n  end\n  for i = 1, #s - 2 do\n    if s:sub(i,\
    \ i + 2):find(s:sub(i, i)) ~= nil then\n      return false\n    end\n  end\n \
    \ return true\nend", "  if #s >= 3 then\n    for i = 1, #s - 2 do\n      if s:sub(i,\
    \ i + 2):match('(.)%1%1') then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  return false\nend", "    -- TODO: implement this function\n\
    end", end, "    -- Happy string: length >= 3 and all 3 consecutive chars are different.\n\
    \    -- Not happy string: otherwise.\n    local len = #s\n    local i = 1\n  \
    \  if len < 3 then\n        return false\n    end\n    while i <= len - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend", "  --\
    \ your code here\nend", "    if string.len(s) >= 3 then\n        for i = 1, string.len(s)\
    \ - 2 do\n            if string.sub(s, i, i + 2) == string.sub(s, i + 1, i + 3)\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend", "    -- your code here\nend", "  local\
    \ l = s:len()\n  if l < 3 then\n    return false\n  end\n  local happy = true\n\
    \  for i = 0, l - 3 do\n    if s:sub(i + 1, i + 3) == s:sub(i + 2, i + 4) then\n\
    \      happy = false\n      break\n    end\n  end\n  return happy\nend", "  if\
    \ s:len() < 3 then\n    return false\n  end\n  for i = 1, s:len() - 2 do\n   \
    \ if s:sub(i, i + 2):match('([^%w])%1%1') then\n      return false\n    end\n\
    \  end\n  return true\nend", "  if #s < 3 then\n    return false\n  end\n  local\
    \ last1, last2 = string.sub(s, -1), string.sub(s, -2, -2)\n  for i = 3, #s do\n\
    \    local c = string.sub(s, i, i)\n    if c == last1 or c == last2 then\n   \
    \   return false\n    end\n    last1, last2 = last2, c\n  end\n  return true\n\
    end", "    return #s >= 3 and s:match(\"(.)%1%1\") == nil\nend", "    if s:len()\
    \ < 3 then\n        return false\n    end\n    local first_char = s:sub(1, 1)\n\
    \    local second_char = s:sub(2, 2)\n    local third_char = s:sub(3, 3)\n   \
    \ if first_char == second_char or first_char == third_char or second_char == third_char\
    \ then\n        return false\n    end\n    return true\nend", "  -- your code\
    \ here\n  if #s < 3 then\n    return false\n  end\n  for i = 1, #s - 2 do\n  \
    \  if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2)\
    \ or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return false\n   \
    \ end\n  end\n  return true\nend", "    if type(s) ~= \"string\" then\n      \
    \  return false\n    end\n    if s:len() < 3 then\n        return false\n    end\n\
    \    for i = 1, s:len() - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\")\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  if #s < 3 then\n    return false\n  end\n  local prev, curr, next\n  for i=1,\
    \ #s-2 do\n    prev = s:sub(i, i)\n    curr = s:sub(i+1, i+1)\n    next = s:sub(i+2,\
    \ i+2)\n    if prev == curr or curr == next or prev == next then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  -- your code here\n  return false\n\
    end", "  -- your code goes here\nend", "    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end", "  -- your code here\nend", "  -- your code here\n  if s:len()<3 then\n\
    \    return false\n  end\n  for i=1,s:len()-2 do\n    if s:sub(i,i)==s:sub(i+1,i+1)\
    \ and s:sub(i,i)==s:sub(i+2,i+2) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  -- your code here\nend", "    return #s >= 3 and not string.match(s,\
    \ \"(%w)%1%1\")\nend", "  local res = true\n  local size = string.len(s)\n  if\
    \ (size < 3) then\n    res = false\n  else\n    for i = 1, size - 2 do\n     \
    \ if (s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2)\
    \ or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2)) then\n        res = false\n \
    \       break\n      end\n    end\n  end\n  return res\nend", "  -- your code\
    \ here\nend", "    if #s < 3 then\n        return false\n    end\n    for i =\
    \ 3, #s do\n        if s:sub(i-2, i) == s:sub(i-1, i) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  return #s >= 3 and not\
    \ s:find(\"%w%w%w%1\")\nend", "  if #s < 3 then\n    return false\n  end\n  local\
    \ letters = {}\n  for i = 1, #s - 2 do\n    if letters[s:sub(i, i)] or letters[s:sub(i\
    \ + 1, i + 1)] or letters[s:sub(i + 2, i + 2)] then\n      return false\n    end\n\
    \    letters[s:sub(i, i)] = true\n    letters[s:sub(i + 1, i + 1)] = true\n  \
    \  letters[s:sub(i + 2, i + 2)] = true\n  end\n  return true\nend", "    -- your\
    \ code here\nend", "  if #s < 3 then\n    return false\n  end\n  for i = 3, #s\
    \ do\n    if s:sub(i - 2, i) == s:sub(i - 1, i + 1) then\n      return false\n\
    \    end\n  end\n  return true\nend", end, "\t--# Write your code here\n\treturn\
    \ true\nend", "  if string.len(s) < 3 then\n    return false\n  end\n  local s_\
    \ = {}\n  for i = 1, string.len(s) do\n    if s_[string.sub(s, i, i)] then\n \
    \     return false\n    end\n    s_[string.sub(s, i, i)] = true\n  end\n  return\
    \ true\nend", "    -- your code goes here\nend", "  local seen = {}\n  for i =\
    \ 1, #s do\n    local triplet = string.sub(s, i, i + 2)\n    if seen[triplet]\
    \ then\n      return false\n    end\n    seen[triplet] = true\n  end\n  return\
    \ true\nend", "\nend", "    if string.len(s) < 3 then\n        return false\n\
    \    end\n    local split_string = {}\n    for i in string.gmatch(s, \".\") do\n\
    \        table.insert(split_string, i)\n    end\n    for i = 1, #split_string\
    \ - 2 do\n        if split_string[i] == split_string[i + 1] or split_string[i]\
    \ == split_string[i + 2] or split_string[i + 1] == split_string[i + 2] then\n\
    \            return false\n        end\n    end\n    return true\nend", "  --\
    \ your code here\nend", "    if #s < 3 then\n        return false\n    end\n \
    \   for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.).%1') then\n  \
    \          return false\n        end\n    end\n    return true\nend", "    return\
    \ string.len(s) > 2 and not string.find(s, '(.)%1%1')\nend", "    -- your code\
    \ here\nend", "    -- Your code here\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) and s:sub(i, i) == s:sub(i + 2, i + 2) then\n            return false\n \
    \       end\n    end\n    return true\nend", "  return string.len(s) >= 3 and\
    \ string.match(s, '[a-z]*') and not string.match(s, '(.)%1%1')\nend", "    return\
    \ not s:match('[abc]{3}')\nend", "    return #s > 2 and s:match('^(.).(.).(.+)')\
    \ ~= s:match('^(.).(.).(.+)')\nend", "    --your code here\n    local three_consecutive_letters\
    \ = nil\n    local number_of_consecutive_letters = 0\n    local flag = false\n\
    \    for i = 1, string.len(s) do\n        if i <= string.len(s) - 3 then\n   \
    \         three_consecutive_letters = string.sub(s, i, i + 2)\n            for\
    \ j = 1, string.len(three_consecutive_letters) do\n                if string.sub(three_consecutive_letters,\
    \ j, j) == string.sub(three_consecutive_letters, j + 1, j + 1) then\n        \
    \            number_of_consecutive_letters = number_of_consecutive_letters + 1\n\
    \                end\n            end\n            if number_of_consecutive_letters\
    \ >= 2 then\n                flag = false\n                break\n           \
    \ else\n                flag = true\n            end\n        end\n    end\n \
    \   if flag == true and string.len(s) >= 3 then\n        return true\n    else\n\
    \        return false\n    end\nend", "    if string.len(s) < 3 then\n       \
    \ return false\n    end\n    for i = 1, string.len(s) - 2 do\n        local string\
    \ = string.sub(s, i, i + 2)\n        if #string ~= 3 then\n            return\
    \ false\n        end\n        local letters = {}\n        local count = 0\n  \
    \      for i = 1, #string do\n            local c = string.sub(string, i, i)\n\
    \            if letters[c] == nil then\n                letters[c] = true\n  \
    \              count = count + 1\n            end\n        end\n        if count\
    \ ~= 3 then\n            return false\n        end\n    end\n    return true\n\
    end", "  -- your code here\n  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return true\n\
    end", "    -- checking if length is at least 3\n    if #s < 3 then\n        return\
    \ false\n    end\n    -- checking if every 3 consecutive letters are distinct\n\
    \    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\") then\n\
    \            return false\n        end\n    end\n    return true\nend", "    return\
    \ #s >= 3 and string.match(s, \"(.)%1%1\") == nil\nend", "  --your code here\n\
    \  if #s < 3 then return false end\n  for i = 1, #s-2 do\n    if s:sub(i,i+2):find(s:sub(i,i))\
    \ then return false end\n  end\n  return true\nend", "  if #s < 3 then\n    return\
    \ false\n  end\n  for i = 3, #s do\n    if s:sub(i - 2, i) == s:sub(i - 1, i +\
    \ 1) then\n      return false\n    end\n  end\n  return true\nend", "    -- your\
    \ code here\nend", "  -- your code here\nend", "  return (string.len(s) >= 3)\
    \ and (not string.find(s, '(.)%1%1'))\nend", end, "  return #s >= 3 and string.find(s,\
    \ \"(.)%1%1\") == nil\nend", "    -- your code here\n    local len = #s\n    local\
    \ a = s:sub(1, 3)\n    local b = s:sub(2, 4)\n    local c = s:sub(3, 5)\n    if\
    \ len < 3 then\n        return false\n    elseif len >= 3 and a == b and b ==\
    \ c then\n        return false\n    else\n        return true\n    end\nend",
  "    -- your code here\n    for i = 3, #s do\n        if s:sub(i - 2, i) == s:sub(i\
    \ - 1, i + 1) then\n            return false\n        end\n    end\n    return\
    \ #s >= 3\nend", "    if #s < 3 then\n        return false\n    end\n    for i\
    \ = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i)\
    \ == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ ln = #s\n    if ln < 3 then\n        return false\n    end\n    local a = string.sub(s,1,1)\n\
    \    local b = string.sub(s,2,2)\n    local c = string.sub(s,3,3)\n    for i =\
    \ 4, ln do\n        if a == b or b == c or a == c then\n            return false\n\
    \        end\n        a = b\n        b = c\n        c = string.sub(s,i,i)\n  \
    \  end\n    return true\nend", "  -- body\nend", "  -- your code here\n  return\
    \ nil\nend", "  if type(s) ~= 'string' then return false end\n  if s:len() < 3\
    \ then return false end\n  for i = 1, s:len() - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return true\n\
    end", "    if string.len(s) < 3 then\n        return false\n    end\n    for i\
    \ = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i)\
    \ == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n     \
    \   if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2)\
    \ or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n\
    \        end\n    end\n    return true\nend", "    -- your code here\n    return\
    \ s:len() >= 3 and s:match('%a%a%a') == nil\nend", "  -- your code here\n  if\
    \ s:len()<3 then\n    return false\n  end\n  for i=1,s:len()-2 do\n    if s:sub(i,i)==s:sub(i+1,i+1)\
    \ or s:sub(i,i)==s:sub(i+2,i+2) or s:sub(i+1,i+1)==s:sub(i+2,i+2) then\n     \
    \ return false\n    end\n  end\n  return true\nend", "  local n = #s\n  if n <\
    \ 3 then\n    return false\n  end\n  local c, d, e = string.byte(s, 1, 3)\n  for\
    \ i = 4, n, 3 do\n    if c == d or d == e or c == e then\n      return false\n\
    \    end\n    c, d, e = d, e, string.byte(s, i)\n  end\n  return true\nend", " \
    \ local i = 1\n  while i < #s do\n    if s:sub(i, i + 2):match(\"(.)%1%1\") then\n\
    \      return false\n    end\n    i = i + 1\n  end\n  return true\nend", "   \
    \ return false\nend", "  if #s < 3 then\n    return false\n  end\n  local t =\
    \ {}\n  for i = 1, #s - 2 do\n    if t[s:sub(i, i + 2)] then\n      return false\n\
    \    end\n    t[s:sub(i, i + 2)] = true\n  end\n  return true\nend", "    if #s\
    \ < 3 then\n        return false\n    end\n    for i = 1, #s-2 do\n        if\
    \ s:sub(i, i+2):match(\"(.)%1\") then\n            return false\n        end\n\
    \    end\n    return true\nend", "    -- your code here\n    if #s >= 3 then\n\
    \        for i = 1, #s-2 do\n            if s:sub(i, i+2):find(s:sub(i, i)) then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend", "    if #s < 3 then\n        return false\n\
    \    end\n    local set = {}\n    for i = 1, #s - 2 do\n        set[s:sub(i, i\
    \ + 2)] = true\n    end\n    return #set == #s - 2\nend", "  local prev = s:sub(1,\
    \ 3)\n  for i = 4, #s, 3 do\n    local curr = s:sub(i, i + 2)\n    if curr ==\
    \ prev then\n      return false\n    end\n    prev = curr\n  end\n  return true\n\
    end", "  if not s or s:len() < 3 then\n    return false\n  end\n  for i = 1, s:len()\
    \ - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):byte(1) == s:sub(i,\
    \ i + 2):byte(2) and s:sub(i, i + 2):byte(2) == s:sub(i, i + 2):byte(3) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  return\
    \ (s:len() >= 3) and s:match(\"(%a)(%a)(%a)\") == nil\nend", "    if #s < 3 then\n\
    \        return false\n    end\n    for i = 3, #s do\n        if s:sub(i - 2,\
    \ i) == s:sub(i - 1, i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local n = #s\n    if n < 3 then\n        return false\n\
    \    end\n    local i = 0\n    local j = 1\n    local k = 2\n    while k < n do\n\
    \        if s:sub(i, i) == s:sub(j, j) or s:sub(i, i) == s:sub(k, k) or s:sub(j,\
    \ j) == s:sub(k, k) then\n            return false\n        end\n        i = i\
    \ + 1\n        j = j + 1\n        k = k + 1\n    end\n    return true\nend", " \
    \   -- your code here\nend", "    local length = string.len(s)\n    local result\
    \ = false\n    if length >= 3 then\n        local lastChar = nil\n        local\
    \ lastLastChar = nil\n        for i = 1, length do\n            local currentChar\
    \ = string.sub(s, i, i)\n            if currentChar ~= lastChar and currentChar\
    \ ~= lastLastChar then\n                result = true\n            else\n    \
    \            result = false\n                break\n            end\n        \
    \    lastLastChar = lastChar\n            lastChar = currentChar\n        end\n\
    \    end\n    return result\nend", "  if s:len() < 3 then\n    return false\n\
    \  end\n  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):find(s:sub(i, i)) then\n\
    \      return false\n    end\n  end\n  return true\nend", "    if s:len() < 3\
    \ then\n        return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) and s:sub(i, i) == s:sub(i + 2, i + 2) then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  if #s<3\
    \ then return false end\n  for i=1,#s-2 do\n    if s:sub(i,i+2):match('(.)%1')\
    \ then return false end\n  end\n  return true\nend", "\nend", "  local t = {}\n\
    \  local pos\n  for i = 1, #s - 2 do\n    pos = s:sub(i, i + 2)\n    if t[pos]\
    \ then\n      return false\n    end\n    t[pos] = true\n  end\n  return true\n\
    end", "  -- your code here\nend", "  if #s < 3 then\n    return false\n  end\n\
    \  local s1 = string.sub(s,1,1)\n  local s2 = string.sub(s,2,2)\n  local s3 =\
    \ string.sub(s,3,3)\n  if s1 == s2 or s2 == s3 or s1 == s3 then\n    return false\n\
    \  end\n  return true\nend", "    -- TODO\nend", "  -- your code here\nend", end,
  "  return false\nend", "  local n = s:len()\n  local m = 3\n  if n < m then\n  \
    \  return false\n  end\n  if n == m then\n    return true\n  end\n  for i = 1,\
    \ n - m + 1 do\n    local a = s:sub(i, i + m - 1)\n    local t = {}\n    for j\
    \ = 1, m do\n      local x = a:sub(j, j)\n      if t[x] then\n        return false\n\
    \      end\n      t[x] = true\n    end\n  end\n  return true\nend", "  -- Write\
    \ your code here\n  -- Don't change the function signature\n  local len = #s\n\
    \  if len < 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n\
    \  return true\nend", "    if #s < 3 then\n        return false\n    end\n   \
    \ for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"([%z\\1-\\127-])%1%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend",
  "  return #s > 2 and s:match('^(.)(.)(.)') ~= s:match('^(.).%1%2')\nend", "    return\
    \ string.len(s) > 2 and s:match('(%a)(%1%1)') == nil\nend", "    local len = #s\n\
    \    if len < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n\
    \        if s:sub(i, i + 2):match('(.)%1') then\n            return false\n  \
    \      end\n    end\n    return true\nend", end, "    -- Write your code here\n\
    \    local s = s:gsub(\"%s+\", \"\")\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i + 2) == s:sub(i + 1, i + 3) then\n            return false\n        end\n\
    \    end\n    return true\nend", "  -- your code goes here\nend", "  -- your code\
    \ here\nend", "    local str = s\n    local count = 1\n    local diff = 0\n  \
    \  local len = #str\n    if len < 3 then\n        return false\n    end\n    while\
    \ count <= len - 2 do\n        local char = string.sub(str, count, count)\n  \
    \      local char2 = string.sub(str, count + 1, count + 1)\n        local char3\
    \ = string.sub(str, count + 2, count + 2)\n        if char ~= char2 then\n   \
    \         diff = diff + 1\n        end\n        if char2 ~= char3 then\n     \
    \       diff = diff + 1\n        end\n        if char ~= char3 then\n        \
    \    diff = diff + 1\n        end\n        count = count + 1\n    end\n    if\
    \ diff == len - 2 then\n        return true\n    else\n        return false\n\
    \    end\nend", "    local length = #s\n    if length < 3 then\n        return\
    \ false\n    end\n    local curr = 1\n    local next = curr + 1\n    while next\
    \ <= length do\n        if s:sub(curr, next) == s:sub(next, next + 1) then\n \
    \           return false\n        end\n        curr = next\n        next = curr\
    \ + 1\n    end\n    return true\nend", "\treturn (#s >= 3 and s:find(s:sub(1,\
    \ 3), 2, true) == nil)\nend", "    local result = false\n    if #s > 2 then\n\
    \        for i = 1, #s - 2 do\n            if s:sub(i, i) ~= s:sub(i + 1, i +\
    \ 1) and s:sub(i, i) ~= s:sub(i + 2, i + 2)\n                    and s:sub(i +\
    \ 1, i + 1) ~= s:sub(i + 2, i + 2) then\n                result = true\n     \
    \       else\n                result = false\n                break\n        \
    \    end\n        end\n    end\n    return result\nend", "\tif s:len() < 3 then\n\
    \t\treturn false\n\tend\n\tlocal i = 1\n\twhile i < s:len() do\n\t\tif s:sub(i,\
    \ i + 2):match(\"(.)%1\") then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\treturn true\nend", "    return false\nend", "  -- your code here\nend",
  "    if s:len() < 3 then\n        return false\n    end\n    local previous, current\
    \ = '', ''\n    for i = 1, s:len() do\n        local char = s:sub(i, i)\n    \
    \    if previous == '' then\n            previous = char\n        elseif current\
    \ == '' then\n            current = char\n        else\n            if previous\
    \ == current and current == char then\n                return false\n        \
    \    end\n            previous = current\n            current = char\n       \
    \ end\n    end\n    return true\nend", "  local slen = #s\n  if slen < 3 then\n\
    \    return false\n  end\n  local i = 1\n  while i <= slen - 2 do\n    if s:sub(i,\
    \ i + 2):find(s:sub(i, i)) or s:sub(i, i + 2):find(s:sub(i + 1, i + 1)) or s:sub(i,\
    \ i + 2):find(s:sub(i + 2, i + 2)) then\n      return false\n    end\n    i =\
    \ i + 1\n  end\n  return true\nend", "  return not s:match(\"..%1\") and s:len()\
    \ > 2\nend", "    if #s < 3 then\n        return false\n    end\n    for i = 1,\
    \ #s - 2 do\n        if s:sub(i, i + 2):match(\"^(.)%1%1$\") then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  -- your code\
    \ here\n  local s_len = #s\n  if s_len < 3 then\n    return false\n  end\n  for\
    \ i = 1, s_len - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) and s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if #s < 3 then\n    return false\n  end\n  return s:gsub('(.)%1',''):len()\
    \ + 2 == #s\nend", "  if #s < 3 then\n    return false\n  end\n  for i = 3, #s\
    \ do\n    if s:sub(i-2, i) == s:sub(i-1, i)..s:sub(i, i) then\n      return false\n\
    \    end\n  end\n  return true\nend", "    return string.len(s) > 2 and string.sub(s,\
    \ 1, 3) ~= string.sub(s, 2, 4)\nend", "  if string.len(s) < 3 then\n    return\
    \ false\n  end\n  local has_dup = false\n  for i = 1, #s - 2 do\n    if string.sub(s,\
    \ i, i + 2) == string.sub(s, i + 1, i + 3) then\n      has_dup = true\n      break\n\
    \    end\n  end\n  return not has_dup\nend", "\tif #s < 3 then\n\t\treturn false\n\
    \tend\n\t\n\tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2):match(\"(.)%1\") then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\t\n\treturn true\nend", "  -- your code here\n\
    end", "    if s:len() < 3 then\n        return false\n    end\n    for i = 1,\
    \ s:len() - 2 do\n        if s:sub(i, i + 2):match('(.)%1%1') then\n         \
    \   return false\n        end\n    end\n    return true\nend", "  if #s < 3 then\n\
    \    return false\n  end\n  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"\
    (.)%1%1\") then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  if #s < 3 then\n        return false\n    end\n    local t = {}\n    for i\
    \ = 1, #s - 2 do\n        t[s:sub(i, i + 2)] = true\n    end\n    return table.getn(t)\
    \ == #s - 2\nend", "  -- body\nend", "  -- your code here\nend", "    -- your\
    \ code here\n    local t = {}\n    for i=1,#s do\n        table.insert(t, s:sub(i,i))\n\
    \    end\n    for i=1,#t-2 do\n        if t[i] == t[i+1] and t[i+1] == t[i+2]\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    print(is_happy(\"aa\"))", "\tlocal n = #s\n\tif n < 3 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, n - 2 do\n\t\tif s:sub(i, i + 2):match('(.)%1%1') then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    -- your code here\n\
    end", "    -- Write your code here\n    -- The first thing to do is to check the\
    \ length of the input\n    -- I need at least 3 letters\n    if s:len() < 3 then\n\
    \        return false\n    end\n    -- Then I need to check if all 3 letters are\
    \ different\n    -- To do this, I can simply compare the letter in position 1\n\
    \    -- with the letters in position 2 and 3\n    local first = s:sub(1, 1)\n\
    \    local second = s:sub(2, 2)\n    local third = s:sub(3, 3)\n    if first ==\
    \ second or first == third or second == third then\n        return false\n   \
    \ end\n    -- If I pass here, this means the string is happy\n    return true\n\
    end", "  if #s >= 3 then\n    local char = s:sub(1, 1)\n    if char ~= s:sub(2,\
    \ 2) and char ~= s:sub(3, 3) then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  return false\nend", "    -- Good luck!\n    return s:len() >=\
    \ 3 and s:match(\"(.)%1%1\") == nil\nend", "\t-- TODO: Implement is_happy\n\t\
    return false\nend", "    -- Insert you code here\n    if string.len(s) < 3 then\n\
    \        return false\n    end\n    for i = 1, string.len(s) - 2 do\n        local\
    \ a = string.sub(s, i, i)\n        local b = string.sub(s, i + 1, i + 1)\n   \
    \     local c = string.sub(s, i + 2, i + 2)\n        if a == b or a == c or b\
    \ == c then\n            return false\n        end\n    end\n    return true\n\
    end", "    -- your code here\n    if #s >= 3 then\n        for i = 1, #s-2 do\n\
    \            if s:sub(i, i+2):match(\"(.)%1%1\") then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    return\
    \ false\nend", "    return #s >= 3 and not (s:find(\"(.)%1%1\"))\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
