name: HumanEval_143_words_in_sentence
language: lua
results:
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"[^%s]+\") do\n    words[#words + 1] = word\n\
    \  end\n  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    local length = #word\n    for _, prime in ipairs(primes)\
    \ do\n      if length == prime then\n        result[#result + 1] = word\n    \
    \    break\n      end\n    end\n  end\n  return table.concat(result, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local is_prime =\
    \ {}\n  for i = 2, 20 do\n    for j = 2, i - 1 do\n      if i % j == 0 then\n\
    \        is_prime[i] = false\n        break\n      end\n    end\n    if not is_prime[i]\
    \ then\n      is_prime[i] = true\n    end\n  end\n  local res = {}\n  for i =\
    \ 1, #sentence do\n    if sentence:sub(i, i) == \" \" then\n      local len =\
    \ #res\n      if is_prime[len] then\n        res[len] = res[len] .. \" \"\n  \
    \    else\n        table.remove(res)\n      end\n    else\n      res[#res + 1]\
    \ = sentence:sub(i, i)\n    end\n  end\n  local len = #res\n  if is_prime[len]\
    \ then\n    res[len] = res[len] .. \" \"\n  else\n    table.remove(res)\n  end\n\
    \  return table.concat(res):sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7fzwg0u.lua:53:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmph7fzwg0u.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {\n\
    \    [2] = true,\n    [3] = true,\n    [5] = true,\n    [7] = true,\n    [11]\
    \ = true,\n    [13] = true,\n    [17] = true,\n    [19] = true,\n    [23] = true,\n\
    \    [29] = true,\n    [31] = true,\n    [37] = true,\n    [41] = true,\n    [43]\
    \ = true,\n    [47] = true,\n    [53] = true,\n    [59] = true,\n    [61] = true,\n\
    \    [67] = true,\n    [71] = true,\n    [73] = true,\n    [79] = true,\n    [83]\
    \ = true,\n    [89] = true,\n    [97] = true,\n  }\n  local words = {}\n  for\
    \ word in sentence:gmatch(\"%S+\") do\n    local len = #word\n    if primes[len]\
    \ then\n      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    -- prime numbers\
    \ from 1 to 100\n    local primes = {}\n    for i = 2, 100 do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            primes[#primes + 1] = i\n        end\n\
    \    end\n    local res = {}\n    for _, word in ipairs(sentence:split(\" \"))\
    \ do\n        if primes[#word] then\n            res[#res + 1] = word\n      \
    \  end\n    end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjwjteaqm.lua:31:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpjwjteaqm.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpjwjteaqm.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for w in sentence:gmatch(\"%w+\"\
    ) do\n        if primes[#w] then\n            table.insert(words, w)\n       \
    \ end\n    end\n    return table.concat(words, \" \")\nend\nreturn words_in_sentence\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3stndzcj.lua:26: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local is_prime =\
    \ require(\"algorithms.utils.is_prime\").is_prime\n  local r = {}\n  for i = 1,\
    \ #sentence do\n    local word_start = sentence:find(\"%S+\", i)\n    if word_start\
    \ then\n      local word_end = sentence:find(\"%s+\", word_start)\n      if word_end\
    \ then\n        local word = sentence:sub(word_start, word_end - 1)\n        if\
    \ is_prime(#word) then\n          table.insert(r, word)\n        end\n       \
    \ i = word_end\n      else\n        break\n      end\n    else\n      break\n\
    \    end\n  end\n  return table.concat(r, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvv0xsj1.lua:24:\
    \ attempt to call a nil value (local 'is_prime')\nstack traceback:\n\t/tmp/tmpyvv0xsj1.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpyvv0xsj1.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local is_prime\
    \ = function(n)\n        if n == 1 then\n            return false\n        end\n\
    \        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n        \
    \        return false\n            end\n        end\n        return true\n   \
    \ end\n    local result = {}\n    for _, word in ipairs(sentence:split(\" \"))\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5tac84y8.lua:28:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp5tac84y8.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp5tac84y8.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local r = {}\n    for _, w in ipairs(sentence:split(\"\
    \ \")) do\n        local n = #w\n        if primes[n] then\n            table.insert(r,\
    \ w)\n        end\n    end\n    return table.concat(r, \" \")\nend\nreturn words_in_sentence\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_danbk7y.lua:27: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {\n        [2] = true,\n        [3] = true,\n        [5] = true,\n        [7]\
    \ = true,\n        [11] = true,\n        [13] = true,\n        [17] = true,\n\
    \        [19] = true,\n        [23] = true,\n        [29] = true,\n        [31]\
    \ = true,\n        [37] = true,\n        [41] = true,\n        [43] = true,\n\
    \        [47] = true,\n        [53] = true,\n        [59] = true,\n        [61]\
    \ = true,\n        [67] = true,\n        [71] = true,\n        [73] = true,\n\
    \        [79] = true,\n        [83] = true,\n        [89] = true,\n        [97]\
    \ = true,\n    }\n    local words = {}\n    for w in sentence:gmatch(\"%S+\")\
    \ do\n        if primes[#w] then\n            table.insert(words, w)\n       \
    \ end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local s = {}\n\
    \    for i in sentence:gmatch(\"%S+\") do\n        table.insert(s, i)\n    end\n\
    \    local r = {}\n    for _, v in ipairs(s) do\n        if v:len() > 1 then\n\
    \            local i = 0\n            for j = 2, v:len() do\n                if\
    \ v:len() % j == 0 then\n                    i = i + 1\n                end\n\
    \            end\n            if i == 0 then\n                table.insert(r,\
    \ v)\n            end\n        end\n    end\n    local t = {}\n    for _, v in\
    \ ipairs(r) do\n        table.insert(t, v)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo_9v2ux.lua:44:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmppo_9v2ux.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for i, v in ipairs(sentence:split(' ')) do\n        if v:len() == 2 or v:len()\
    \ == 3 or v:len() == 5 or v:len() == 7 then\n            table.insert(res, v)\n\
    \        end\n    end\n    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph3k9pujj.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmph3k9pujj.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmph3k9pujj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  local n = sentence:len()\n  local words = {}\n  for i = 2, n do\n    primes[i]\
    \ = true\n  end\n  for i = 2, n do\n    if primes[i] then\n      for j = i + i,\
    \ n, i do\n        primes[j] = false\n      end\n    end\n  end\n  for i = 1,\
    \ n do\n    local w = tonumber(sentence:sub(i, i))\n    if w and primes[w] then\n\
    \      table.insert(words, w)\n    end\n  end\n  return table.concat(words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m9mjnem.lua:41:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6m9mjnem.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for w in sentence:gmatch(\"%S+\") do\n        if is_prime(#w) then\n    \
    \        table.insert(res, w)\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfja3n0j7.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpfja3n0j7.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpfja3n0j7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local ans = {}\n\
    \    for word in sentence:gmatch(\"%w+\") do\n        if fp.is_prime(#word) then\n\
    \            table.insert(ans, word)\n        end\n    end\n    return table.concat(ans,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0mkk5g8.lua:18:\
    \ attempt to index a nil value (global 'fp')\nstack traceback:\n\t/tmp/tmpe0mkk5g8.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpe0mkk5g8.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local s = string.format(\"\
    1 %s 1\", sentence)\n  local prime_word_len = {}\n  for i = 2, #s - 1 do\n   \
    \ if s:sub(i, i) == \" \" then\n      local w = s:sub(i - 1, i)\n      local is_prime\
    \ = true\n      for j = 2, w - 1 do\n        if w % j == 0 then\n          is_prime\
    \ = false\n          break\n        end\n      end\n      if is_prime then\n \
    \       prime_word_len[#prime_word_len + 1] = #w\n      end\n    end\n  end\n\
    \  local result = {}\n  for i = 1, #prime_word_len do\n    result[#result + 1]\
    \ = sentence:sub(i, i + prime_word_len[i] - 1)\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq19c8jz6.lua:22:\
    \ attempt to perform arithmetic on a string value (local 'w')\nstack traceback:\n\
    \t/tmp/tmpq19c8jz6.lua:22: in local 'candidate'\n\t/tmp/tmpq19c8jz6.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local result =\
    \ {}\n    for s in sentence:gmatch(\"%S+\") do\n        if is_prime(#s) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c5m0nww.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0c5m0nww.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp0c5m0nww.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(num)\n\
    \    if num <= 1 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(num))\
    \ do\n      if num % i == 0 then\n        return false\n      end\n    end\n \
    \   return true\n  end\n  local w = {}\n  for word in sentence:gmatch(\"%w+\"\
    ) do\n    if is_prime(#word) then\n      w[#w + 1] = word\n    end\n  end\n  return\
    \ table.concat(w, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(sentence:split(\" \"\
    )) do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoknecw3s.lua:25:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpoknecw3s.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpoknecw3s.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for word in sentence:gmatch(\"%w+\") do\n    if is_prime(#word) then\n\
    \      table.insert(prime_words, word)\n    end\n  end\n  return table.concat(prime_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsru8au4.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsru8au4.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmptsru8au4.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local s = {}\n \
    \ for w in sentence:gmatch(\"%S+\") do\n    table.insert(s, w)\n  end\n  local\
    \ function length(w)\n    return #w\n  end\n  local function is_prime(n)\n   \
    \ if n == 2 then\n      return true\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local function helper(d, i)\n    if i > #d then\n    \
    \  return true\n    end\n    if not is_prime(length(d[i])) then\n      table.remove(d,\
    \ i)\n      return helper(d, i)\n    end\n    return helper(d, i + 1)\n  end\n\
    \  helper(s, 1)\n  return table.concat(s, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjsp9oss.lua:51:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpmjsp9oss.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local result =\
    \ {}\n    for i = 1, #sentence do\n        if is_prime(i) then\n            table.insert(result,\
    \ sentence[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprn_0vwzt.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmprn_0vwzt.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmprn_0vwzt.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local word_table\
    \ = {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(word_table,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(word_table)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprayhwxtb.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmprayhwxtb.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmprayhwxtb.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local s = {}\n \
    \ for word in sentence:gmatch(\"%S+\") do\n    if is_prime(#word) then\n     \
    \ s[#s + 1] = word\n    end\n  end\n  return table.concat(s, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx44waswe.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpx44waswe.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpx44waswe.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        if n == 2 then\n            return true\n        end\n        if n %\
    \ 2 == 0 then\n            return false\n        end\n        for i = 3, math.sqrt(n),\
    \ 2 do\n            if n % i == 0 then\n                return false\n       \
    \     end\n        end\n        return true\n    end\n    local res = {}\n   \
    \ for w in sentence:gmatch(\"%S+\") do\n        if is_prime(#w) then\n       \
    \     table.insert(res, w)\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(num)\n        for i = 2, num - 1 do\n            if num % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for w in sentence:gmatch(\"%S+\") do\n   \
    \     table.insert(words, w)\n    end\n    local res = {}\n    for _, w in ipairs(words)\
    \ do\n        if is_prime(#w) then\n            table.insert(res, w)\n       \
    \ end\n    end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcshocwp5.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpcshocwp5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for p = 2, 100 do\n    local isprime = true\n    for i = 2, p - 1 do\n    \
    \  if p % i == 0 then\n        isprime = false\n        break\n      end\n   \
    \ end\n    if isprime then\n      primes[#primes + 1] = p\n    end\n  end\n  local\
    \ t = {}\n  for w in sentence:gmatch(\"%w+\") do\n    if primes[#w] then\n   \
    \   t[#t + 1] = w\n    end\n  end\n  return table.concat(t, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5437fnu7.lua:41:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmp5437fnu7.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for word in sentence:gmatch(\"%S+\") do\n        if is_prime(#word) then\n\
    \            table.insert(res, word)\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00kj35oh.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00kj35oh.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp00kj35oh.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local p = {}\n \
    \ for i = 2, 100 do\n    if not p[i] then\n      for j = i * i, 100, i do\n  \
    \      p[j] = true\n      end\n    end\n  end\n  local result = {}\n  for word\
    \ in sentence:gmatch(\"%S+\") do\n    if not p[#word] then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfyy8f0b.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmplfyy8f0b.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local isPrime =\
    \ function(n)\n    if n < 2 then\n      return false\n    end\n    for i = 2,\
    \ math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local words = {}\n  for w in sentence:gmatch(\"\
    [^%s]+\") do\n    words[#words + 1] = w\n  end\n  local res = {}\n  for _, w in\
    \ ipairs(words) do\n    if isPrime(#w) then\n      res[#res + 1] = w\n    end\n\
    \  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, w in\
    \ ipairs(sentence:split(\" \")) do\n    if is_prime(#w) then\n      table.insert(result,\
    \ w)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpof47lhrg.lua:25:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpof47lhrg.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpof47lhrg.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for s in sentence:gmatch(\"%w+\"\
    ) do\n        if not words[#s] then\n            words[#s] = {}\n        end\n\
    \        table.insert(words[#s], s)\n    end\n    local res = {}\n    for _, v\
    \ in ipairs(primes) do\n        if words[v] then\n            for _, w in ipairs(words[v])\
    \ do\n                table.insert(res, w)\n            end\n        end\n   \
    \ end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3oip8tv.lua:40:\
    \ expected: \"there is no place\"\nactual: \"is no there place\"\nstack traceback:\n\
    \t/tmp/tmpt3oip8tv.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"[^%s]+\") do\n    words[#words + 1] = word\n\
    \  end\n  local is_prime = {}\n  for i = 2, 100 do\n    local j = 2\n    while\
    \ i % j ~= 0 do\n      j = j + 1\n    end\n    is_prime[i] = j == i\n  end\n \
    \ local res = {}\n  for _, word in ipairs(words) do\n    if is_prime[#word] then\n\
    \      res[#res + 1] = word\n    end\n  end\n  return table.concat(res, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local is_prime =\
    \ {}\n  local prime_numbers = {}\n  local is_alpha = {}\n  local words = {}\n\
    \  local t = {}\n  local i = 0\n  for c in sentence:gmatch(\".\") do\n    if not\
    \ is_alpha[c] then\n      is_alpha[c] = true\n      t[#t + 1] = c\n    end\n \
    \ end\n  local alpha = table.concat(t)\n  local prime_set = {}\n  for w in sentence:gmatch(\"\
    %S+\") do\n    i = i + 1\n    words[i] = w\n    if #w >= 2 then\n      local prime\
    \ = false\n      if not is_prime[#w] then\n        for _, p in ipairs(prime_numbers)\
    \ do\n          if #w % p == 0 then\n            prime = false\n            break\n\
    \          end\n          prime = true\n        end\n        if prime then\n \
    \         is_prime[#w] = true\n          prime_numbers[#prime_numbers + 1] = #w\n\
    \        end\n      else\n        prime = true\n      end\n      if prime then\n\
    \        local pw = {}\n        for c in w:gmatch(\".\") do\n          pw[#pw\
    \ + 1] = c\n        end\n        table.sort(pw)\n        local key = table.concat(pw)\n\
    \        prime_set[key] = w\n      end\n    end\n  end\n  local t = {}\n  for\
    \ _, w in ipairs(words) do\n    local pw = {}\n    for c in w:gmatch(\".\") do\n\
    \      pw[#pw + 1] = c\n    end\n    table.sort(pw)\n    local key = table.concat(pw)\n\
    \    if prime_set[key] then\n      t[#t + 1] = w\n    end\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qqsr1_j.lua:79:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7qqsr1_j.lua:79:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local res = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    local len = #word\n    local x\
    \ = math.sqrt(len)\n    if x == math.floor(x) then\n      table.insert(res, word)\n\
    \    end\n  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy390xwfl.lua:30:\
    \ expected: \"is\"\nactual: \"This a test\"\nstack traceback:\n\t/tmp/tmpy390xwfl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    table.insert(words, w)\n  end\n \
    \ local primes = {}\n  for _, w in ipairs(words) do\n    if is_prime(#w) then\n\
    \      table.insert(primes, w)\n    end\n  end\n  return table.concat(primes,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r5y0s94.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp4r5y0s94.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp4r5y0s94.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for _, v in ipairs(string.split(sentence, ' ')) do\n        local n = #v\n\
    \        local is_prime = true\n        for i = 2, math.floor(math.sqrt(n)) do\n\
    \            if n % i == 0 then\n                is_prime = false\n          \
    \      break\n            end\n        end\n        if is_prime then\n       \
    \     table.insert(res, v)\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwfg1qa_.lua:17:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmphwfg1qa_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmphwfg1qa_.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, 100 do\n        local j = 2\n        while j < i do\n   \
    \         if i % j == 0 then\n                break\n            end\n       \
    \     j = j + 1\n        end\n        if j == i then\n            primes[i] =\
    \ true\n        end\n    end\n    local words = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        if primes[#word] then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlrgey9g.lua:22:\
    \ expected: \"is\"\nactual: {}\nstack traceback:\n\t/tmp/tmprlrgey9g.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t = {}\n\
    \    for w in sentence:gmatch(\"%S+\") do\n        if is_prime(#w) then\n    \
    \        table.insert(t, w)\n        end\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvdsvg6t1.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvdsvg6t1.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpvdsvg6t1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local t = {}\n    for _, w in ipairs(sentence:split(\"\
    \ \")) do\n        for _, p in ipairs(primes) do\n            if #w == p then\n\
    \                table.insert(t, w)\n                break\n            end\n\
    \        end\n    end\n    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupjs83t1.lua:18:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpupjs83t1.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpupjs83t1.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        table.insert(words, word)\n    end\n    local res = {}\n  \
    \  for _, word in ipairs(words) do\n        local l = #word\n        for _, prime\
    \ in ipairs(primes) do\n            if l == prime then\n                table.insert(res,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(res, \" \")\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprylw80gm.lua:34: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = sentence:split('\
    \ ')\n  local primes = {}\n  for i = 1, #words do\n    local len = words[i]:len()\n\
    \    if len ~= 1 and not primes[len] then\n      local is_prime = true\n     \
    \ for j = 2, len - 1 do\n        if len % j == 0 then\n          is_prime = false\n\
    \          break\n        end\n      end\n      if is_prime then\n        primes[len]\
    \ = true\n      end\n    end\n  end\n  local result = {}\n  for i = 1, #words\
    \ do\n    if primes[words[i]:len()] then\n      table.insert(result, words[i])\n\
    \    end\n  end\n  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkevdgc1_.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpkevdgc1_.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpkevdgc1_.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local res = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    if is_prime(#word) then\n    \
    \  table.insert(res, word)\n    end\n  end\n  return table.concat(res, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvw5p62d.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpbvw5p62d.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpbvw5p62d.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n == 1 then\n            return false\n        end\n\
    \        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n        \
    \        return false\n            end\n        end\n        return true\n   \
    \ end\n    local ret = {}\n    for _, v in ipairs(sentence:split(\" \")) do\n\
    \        if is_prime(#v) then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return table.concat(ret, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2t6nkgj.lua:28:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpw2t6nkgj.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpw2t6nkgj.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(number)\n\
    \    if number < 2 then\n      return false\n    end\n    for i = 2, number -\
    \ 1 do\n      if number % i == 0 then\n        return false\n      end\n    end\n\
    \    return true\n  end\n  local result = {}\n  for word in sentence:gmatch(\"\
    %w+\") do\n    if is_prime(#word) then\n      table.insert(result, word)\n   \
    \ end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local result =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy8o_omt2.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpy8o_omt2.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpy8o_omt2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for _, word in ipairs(string_split(sentence, \" \")) do\n        if is_prime(#word)\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, \" \")\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd8un4ep6.lua:25: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local is_prime =\
    \ function(n)\n    if n == 1 then\n      return false\n    end\n    local i =\
    \ 2\n    while i * i <= n do\n      if n % i == 0 then\n        return false\n\
    \      end\n      i = i + 1\n    end\n    return true\n  end\n  local words =\
    \ {}\n  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n\
    \  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local t = {}\n    for i in sentence:gmatch(\"%w+\") do\n       \
    \ if is_prime(#i) then\n            table.insert(t, i)\n        end\n    end\n\
    \    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    table.insert(words, w)\n  end\n \
    \ local function is_prime(n)\n    if n <= 1 then\n      return false\n    end\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  local function\
    \ word_len_is_prime(w)\n    return is_prime(#w)\n  end\n  local result = {}\n\
    \  for i, w in ipairs(words) do\n    if word_len_is_prime(w) then\n      table.insert(result,\
    \ w)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local word_start\
    \ = 1\n  local space_pos\n  local word\n  local answer = {}\n  local pn = {1,\
    \ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n  while true do\n    space_pos = string.find(sentence,\
    \ \" \", word_start)\n    if space_pos then\n      word = string.sub(sentence,\
    \ word_start, space_pos - 1)\n      word_start = space_pos + 1\n    else\n   \
    \   word = string.sub(sentence, word_start)\n      word_start = nil\n    end\n\
    \    local length = string.len(word)\n    if pn[length] then\n      table.insert(answer,\
    \ word)\n    end\n    if not word_start then\n      break\n    end\n  end\n  return\
    \ table.concat(answer, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3av96l3.lua:44:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmpv3av96l3.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 1 then\n      return false\n    end\n    local i = 2\n    while i\
    \ * i <= n do\n      if n % i == 0 then\n        return false\n      end\n   \
    \   i = i + 1\n    end\n    return true\n  end\n  local i = 1\n  local words =\
    \ {}\n  for w in sentence:gmatch(\"%S+\") do\n    words[i] = w\n    i = i + 1\n\
    \  end\n  local len = #words\n  local j = 1\n  for i = 1, len do\n    if is_prime(#words[i])\
    \ then\n      words[j] = words[i]\n      j = j + 1\n    end\n  end\n  for i =\
    \ j, len do\n    words[i] = nil\n  end\n  return table.concat(words, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local sieve = {}\n  for i = 2, #words do\n    if not sieve[i] then\n      local\
    \ j = i * 2\n      while j <= #words do\n        sieve[j] = true\n        j =\
    \ j + i\n      end\n    end\n  end\n  local result = {}\n  for i, word in ipairs(words)\
    \ do\n    if not sieve[i] then\n      table.insert(result, word)\n    end\n  end\n\
    \  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkfxfod1.lua:42:\
    \ expected: \"is\"\nactual: \"This is a\"\nstack traceback:\n\t/tmp/tmprkfxfod1.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, 100 do\n    local flag = true\n    for j = 2, i - 1 do\n      if\
    \ i % j == 0 then\n        flag = false\n        break\n      end\n    end\n \
    \   if flag then\n      primes[#primes + 1] = i\n    end\n  end\n  local ans =\
    \ {}\n  for _, v in ipairs(sentence:split(\" \")) do\n    if primes[#v] then\n\
    \      ans[#ans + 1] = v\n    end\n  end\n  return table.concat(ans, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1e_inmqf.lua:30:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp1e_inmqf.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp1e_inmqf.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local r, primes\
    \ = {}, {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97}\n  for _, w in ipairs(sentence:split(' ')) do\n    local\
    \ l = #w\n    if primes[l] then\n      table.insert(r, w)\n    end\n  end\n  return\
    \ table.concat(r, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcl07pflp.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpcl07pflp.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpcl07pflp.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, 7 do\n    primes[i] = true\n  end\n  for i = 2, 7 do\n    if primes[i]\
    \ then\n      for j = i + i, 7, i do\n        primes[j] = false\n      end\n \
    \   end\n  end\n  local words = {}\n  for w in sentence:gmatch(\"%S+\") do\n \
    \   if primes[#w] then\n      table.insert(words, w)\n    end\n  end\n  return\
    \ table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t = {}\n\
    \    for word in sentence:gmatch(\"%w+\") do\n        local l = #word\n      \
    \  local ok = true\n        for i = 2, l - 1 do\n            if l % i == 0 then\n\
    \                ok = false\n                break\n            end\n        end\n\
    \        if ok then\n            table.insert(t, word)\n        end\n    end\n\
    \    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60gbc4dd.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp60gbc4dd.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local m = { a\
    \ = 1, e = 1, i = 1, o = 1, u = 1 }\n    local is_prime = function(n)\n      \
    \  if n <= 1 then\n            return false\n        end\n        if n <= 3 then\n\
    \            return true\n        end\n        if (n % 2 == 0) or (n % 3 == 0)\
    \ then\n            return false\n        end\n        local x = 5\n        while\
    \ x * x <= n do\n            if (n % x == 0) or (n % (x + 2) == 0) then\n    \
    \            return false\n            end\n            x = x + 6\n        end\n\
    \        return true\n    end\n    local get_word_length = function(word)\n  \
    \      local r = {}\n        for i = 1, #word do\n            local c = word:sub(i,\
    \ i)\n            if not m[c] then\n                r[#r + 1] = c\n          \
    \  end\n        end\n        return #r\n    end\n    local words = {}\n    for\
    \ word in sentence:gmatch(\"%S+\") do\n        local l = get_word_length(word)\n\
    \        if is_prime(l) then\n            words[#words + 1] = word\n        end\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5jdlf19.lua:59:\
    \ expected: \"is\"\nactual: \"This test\"\nstack traceback:\n\t/tmp/tmpf5jdlf19.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t = {}\n\
    \    for w in sentence:gmatch('[%a]+') do\n        table.insert(t, w)\n    end\n\
    \    local function is_prime(i)\n        if i <= 1 then\n            return false\n\
    \        end\n        for j = 2, math.sqrt(i) do\n            if i % j == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local res = {}\n    for i, w in ipairs(t) do\n        if is_prime(#w)\
    \ then\n            table.insert(res, w)\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local res = {}\n\
    \  for i = 1, #sentence do\n    if i == 1 or sentence:sub(i - 1, i - 1) == \"\
    \ \" then\n      local j = i\n      while j <= #sentence and sentence:sub(j, j)\
    \ ~= \" \" do\n        j = j + 1\n      end\n      local word = sentence:sub(i,\
    \ j - 1)\n      local len = #word\n      local prime = true\n      for k = 2,\
    \ len - 1 do\n        if len % k == 0 then\n          prime = false\n        \
    \  break\n        end\n      end\n      if prime then\n        table.insert(res,\
    \ word)\n      end\n    end\n  end\n  return table.concat(res, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uluxhcp.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp8uluxhcp.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_index\
    \ = {}\n  local prime_index_has = setmetatable({}, {__index = function() return\
    \ false end})\n  local function is_prime(n)\n    if n <= 1 then\n      return\
    \ false\n    elseif n <= 3 then\n      return true\n    elseif n % 2 == 0 or n\
    \ % 3 == 0 then\n      return false\n    end\n    local i = 5\n    while i * i\
    \ <= n do\n      if n % i == 0 or n % (i + 2) == 0 then\n        return false\n\
    \      end\n      i = i + 6\n    end\n    return true\n  end\n  local function\
    \ generate_prime_index()\n    local m = #sentence\n    for i = 1, m do\n     \
    \ if is_prime(i) then\n        table.insert(prime_index, i)\n        prime_index_has[i]\
    \ = true\n      end\n    end\n  end\n  local function get_prime_index_str()\n\
    \    local res = {}\n    for _, v in ipairs(prime_index) do\n      table.insert(res,\
    \ tostring(v))\n    end\n    return table.concat(res, \" \")\n  end\n  local function\
    \ get_words_in_sentence()\n    local res = {}\n    local words = string.split(sentence,\
    \ \"%s+\")\n    for i, v in ipairs(words) do\n      if prime_index_has[i] then\n\
    \        table.insert(res, v)\n      end\n    end\n    return table.concat(res,\
    \ \" \")\n  end\n  generate_prime_index()\n  -- print(get_prime_index_str())\n\
    \  return get_words_in_sentence()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22etxyzc.lua:53:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp22etxyzc.lua:53:\
    \ in function </tmp/tmp22etxyzc.lua:51>\n\t(...tail calls...)\n\t/tmp/tmp22etxyzc.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local t = {}\n \
    \ for word in sentence:gmatch(\"%w+\") do\n    local n = word:len()\n    if n\
    \ == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 or n == 17 or n ==\
    \ 19 then\n      table.insert(t, word)\n    end\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local result = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    if w:len() > 1 then\n      local\
    \ is_prime = true\n      for n = 2, math.sqrt(w:len()) do\n        if w:len()\
    \ % n == 0 then\n          is_prime = false\n          break\n        end\n  \
    \    end\n      if is_prime then\n        table.insert(result, w)\n      end\n\
    \    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 1 then\n      return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local r = {}\n  for w in sentence:gmatch(\"%w+\") do\n\
    \    if is_prime(#w) then\n      table.insert(r, w)\n    end\n  end\n  return\
    \ table.concat(r, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ isprime(n)\n        if n < 2 then\n            return false\n        end\n \
    \       for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local s = {}\n    for w in sentence:gmatch(\"%w+\") do\n        local l =\
    \ #w\n        if isprime(l) then\n            s[#s + 1] = w\n        end\n   \
    \ end\n    return table.concat(s, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local res = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    if is_prime(#w) then\n      table.insert(res,\
    \ w)\n    end\n  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphiearas_.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmphiearas_.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmphiearas_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  local max = #sentence\n  for i = 2, max do\n    local flag = false\n    for\
    \ j = 2, i - 1 do\n      if i % j == 0 then\n        flag = true\n        break\n\
    \      end\n    end\n    if not flag then\n      primes[i] = true\n    end\n \
    \ end\n  local res = {}\n  for i = 1, #sentence do\n    if primes[i] then\n  \
    \    table.insert(res, sentence:sub(i, i))\n    end\n  end\n  return table.concat(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4oiv_wg.lua:42:\
    \ expected: \"is\"\nactual: \"hi sts\"\nstack traceback:\n\t/tmp/tmpa4oiv_wg.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    if n == 1 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      result[#result + 1]\
    \ = word\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local s, p = {},\
    \ {}\n    for w in sentence:gmatch(\"%w+\") do\n        if w:len() > 1 then\n\
    \            local d = p[w:len()]\n            if d then\n                table.insert(s,\
    \ w)\n            else\n                d = 2\n                local flag = true\n\
    \                while d < w:len() do\n                    if w:len() % d == 0\
    \ then\n                        flag = false\n                        break\n\
    \                    end\n                    d = d + 1\n                end\n\
    \                if flag then\n                    table.insert(s, w)\n      \
    \              p[w:len()] = true\n                end\n            end\n     \
    \   end\n    end\n    return table.concat(s, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for _, s in ipairs(string.split(sentence,\
    \ \" \")) do\n        local length = string.len(s)\n        for _, p in ipairs(primes)\
    \ do\n            if p == length then\n                table.insert(words, s)\n\
    \                break\n            end\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6t559yr.lua:18:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt6t559yr.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpt6t559yr.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local\
    \ primes = {}\n  for i = 1, 100 do\n    if i > 1 then\n      local flag = true\n\
    \      for j = 2, i - 1 do\n        if i % j == 0 then\n          flag = false\n\
    \          break\n        end\n      end\n      if flag then\n        primes[#primes\
    \ + 1] = i\n      end\n    end\n  end\n  local t = {}\n  for _, w in ipairs(words)\
    \ do\n    local flag = false\n    for _, p in ipairs(primes) do\n      if #w ==\
    \ p then\n        flag = true\n        break\n      end\n    end\n    if flag\
    \ then\n      t[#t + 1] = w\n    end\n  end\n  return table.concat(t, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    table.insert(words, w)\n  end\n \
    \ local prime_words = {}\n  for _, w in ipairs(words) do\n    if is_prime(#w)\
    \ then\n      table.insert(prime_words, w)\n    end\n  end\n  return table.concat(prime_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruu9ljx9.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpruu9ljx9.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpruu9ljx9.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  if sentence == nil\
    \ then\n    return nil\n  end\n  local r = {}\n  for w in sentence:gmatch(\"%w+\"\
    ) do\n    if is_prime(#w) then\n      r[#r + 1] = w\n    end\n  end\n  return\
    \ table.concat(r, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2kmmopur.lua:21:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp2kmmopur.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp2kmmopur.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 1, #words do\n    local l = #words[i]\n    if\
    \ l == 1 or l == 2 then\n      primes[#primes + 1] = words[i]\n    else\n    \
    \  local is_prime = true\n      for j = 2, l - 1 do\n        if l % j == 0 then\n\
    \          is_prime = false\n          break\n        end\n      end\n      if\
    \ is_prime then\n        primes[#primes + 1] = words[i]\n      end\n    end\n\
    \  end\n  return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq184ydfp.lua:44:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpq184ydfp.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local m = {}\n \
    \ for i = 1, 26 do\n    m[string.byte('a') + i - 1] = true\n  end\n  local function\
    \ primes(n)\n    local is_prime = {}\n    local primes = {}\n    for i = 2, n\
    \ do\n      is_prime[i] = true\n    end\n    for i = 2, n do\n      if is_prime[i]\
    \ then\n        table.insert(primes, i)\n        for j = i * i, n, i do\n    \
    \      is_prime[j] = false\n        end\n      end\n    end\n    return primes\n\
    \  end\n  local primes = primes(100)\n  local t = {}\n  for w in sentence:gmatch(\"\
    %w+\") do\n    local s = string.lower(w)\n    local is_prime = true\n    for i\
    \ = 1, #s do\n      if not m[string.byte(s, i)] then\n        is_prime = false\n\
    \        break\n      end\n    end\n    if is_prime then\n      local len = #s\n\
    \      for i = 1, #primes do\n        if primes[i] == len then\n          table.insert(t,\
    \ w)\n          break\n        end\n      end\n    end\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    for i = 2, math.floor(math.sqrt(n)) do\n  \
    \    if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function get_length(s)\n    return #s\n  end\n  local res\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(get_length(word)) then\n\
    \      res[#res + 1] = word\n    end\n  end\n  return table.concat(res, \" \"\
    )\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpye1x168l.lua:40: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        if n == 2 then\n            return true\n        end\n\
    \        if n % 2 == 0 then\n            return false\n        end\n        for\
    \ i = 3, math.sqrt(n), 2 do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ res = {}\n    for w in sentence:gmatch(\"%S+\") do\n        if is_prime(#w)\
    \ then\n            table.insert(res, w)\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcidpkuit.lua:42:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpcidpkuit.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for i = 1, #sentence do\n    local j = i\n    while j <= #sentence and sentence:sub(j,\
    \ j) ~= \" \" do\n      j = j + 1\n    end\n    words[#words + 1] = sentence:sub(i,\
    \ j - 1)\n    i = j\n  end\n  local len = #words\n  local primes = {}\n  for i\
    \ = 1, len do\n    local n = 0\n    for j = 1, len do\n      if words[j]:len()\
    \ == i then\n        n = n + 1\n      end\n    end\n    primes[#primes + 1] =\
    \ n\n  end\n  local primes_len = #primes\n  local ans = {}\n  for i = 1, primes_len\
    \ do\n    if primes[i] == 1 then\n      for j = 1, len do\n        if words[j]:len()\
    \ == i then\n          ans[#ans + 1] = words[j]\n        end\n      end\n    end\n\
    \  end\n  return table.concat(ans, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx75iap6.lua:53:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpnx75iap6.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local res = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    if\n      w:len() ~= 1 and w:len()\
    \ ~= 2 and w:len() ~= 3 and w:len() ~= 5 and w:len() ~= 7\n     then\n      goto\
    \ continue\n    end\n    if w:len() == 1 then\n      res[#res + 1] = w\n     \
    \ goto continue\n    end\n    local num = tonumber(w)\n    if num and num % 2\
    \ == 0 then\n      goto continue\n    end\n    if num and num % 3 == 0 then\n\
    \      goto continue\n    end\n    if num and num % 5 == 0 then\n      goto continue\n\
    \    end\n    if num and num % 7 == 0 then\n      goto continue\n    end\n   \
    \ res[#res + 1] = w\n    ::continue::\n  end\n  return table.concat(res, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_4dwmr1.lua:49:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj_4dwmr1.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  local result =\
    \ {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n      result[#result\
    \ + 1] = word\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for i, word in ipairs(sentence:split(\" \")) do\n        if word:len()\
    \ > 1 then\n            local prime = true\n            for j = 2, word:len()\
    \ - 1 do\n                if word:len() % j == 0 then\n                    prime\
    \ = false\n                    break\n                end\n            end\n \
    \           if prime then\n                table.insert(words, word)\n       \
    \     end\n        end\n    end\n    return table.concat(words, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9rhcp_0.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp_9rhcp_0.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp_9rhcp_0.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = w\n  end\n  local\
    \ primes = {}\n  for p = 2, #words do\n    local is_prime = true\n    for d =\
    \ 2, p - 1 do\n      if p % d == 0 then\n        is_prime = false\n        break\n\
    \      end\n    end\n    if is_prime then\n      primes[#primes + 1] = p\n   \
    \ end\n  end\n  local result = {}\n  for _, p in ipairs(primes) do\n    result[#result\
    \ + 1] = words[p]\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis8z_uqe.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpis8z_uqe.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t = {}\n\
    \    for word in sentence:gmatch(\"%w+\") do\n        local wordlen = #word\n\
    \        if wordlen > 1 then\n            local divisor_found = false\n      \
    \      for i = 2, wordlen - 1 do\n                if wordlen % i == 0 then\n \
    \                   divisor_found = true\n                    break\n        \
    \        end\n            end\n            if not divisor_found then\n       \
    \         table.insert(t, word)\n            end\n        end\n    end\n    return\
    \ table.concat(t, \" \")\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_pb_jw69.lua:35: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local res = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    local n = #word\n    local is_prime\
    \ = true\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime then\n      table.insert(res,\
    \ word)\n    end\n  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w6q9nxo.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp2w6q9nxo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local s = sentence:sub(i, i)\n    \
    \    local p = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                p = false\n                break\n            end\n        end\n\
    \        if p then\n            primes[s] = true\n        end\n    end\n    local\
    \ words = {}\n    for i = 1, #sentence do\n        local j = sentence:find(\"\
    \ \", i)\n        if j then\n            local word = sentence:sub(i, j - 1)\n\
    \            local p = true\n            for k = 1, #word do\n               \
    \ if not primes[word:sub(k, k)] then\n                    p = false\n        \
    \            break\n                end\n            end\n            if p then\n\
    \                table.insert(words, word)\n            end\n            i = j\n\
    \        else\n            local word = sentence:sub(i)\n            local p =\
    \ true\n            for k = 1, #word do\n                if not primes[word:sub(k,\
    \ k)] then\n                    p = false\n                    break\n       \
    \         end\n            end\n            if p then\n                table.insert(words,\
    \ word)\n            end\n            break\n        end\n    end\n    return\
    \ table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsxc3fqz.lua:67:\
    \ expected: \"is\"\nactual: \"his is s  is s  \"\nstack traceback:\n\t/tmp/tmpqsxc3fqz.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local ans = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    if w:len() > 1 then\n      local\
    \ is_prime = true\n      for i = 2, math.sqrt(w:len()) do\n        if w:len()\
    \ % i == 0 then\n          is_prime = false\n          break\n        end\n  \
    \    end\n      if is_prime then\n        table.insert(ans, w)\n      end\n  \
    \  end\n  end\n  return table.concat(ans, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  local new_sentence\
    \ = {}\n  for _, word in ipairs(sentence:split(\" \")) do\n    if is_prime(#word)\
    \ then\n      table.insert(new_sentence, word)\n    end\n  end\n  return table.concat(new_sentence,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpksdzbeff.lua:25:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpksdzbeff.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpksdzbeff.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local t = {}\n  for w in sentence:gmatch(\"%S+\") do\n    local\
    \ len = #w\n    if is_prime(len) then\n      t[#t + 1] = w\n    end\n  end\n \
    \ return table.concat(t, \" \")\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi7i8cpxe.lua:37: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local dict = {}\n  for _, word in ipairs(words) do\n    dict[word] = true\n\
    \  end\n  for i = #words, 1, -1 do\n    local word = words[i]\n    local len =\
    \ #word\n    if dict[len] then\n      dict[word] = nil\n      words[i] = nil\n\
    \    end\n  end\n  local res = {}\n  for word in pairs(dict) do\n    table.insert(res,\
    \ word)\n  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uvij765.lua:42:\
    \ expected: \"is\"\nactual: \"test This is a\"\nstack traceback:\n\t/tmp/tmp0uvij765.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        local m = math.floor(math.sqrt(n))\n        for i = 2,\
    \ m do\n            if n % i == 0 then\n                return false\n       \
    \     end\n        end\n        return true\n    end\n    local t = {}\n    for\
    \ w in sentence:gmatch(\"%S+\") do\n        local l = #w\n        if is_prime(l)\
    \ then\n            t[#t + 1] = w\n        end\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wzozrms.lua:38:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp4wzozrms.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local res = {}\n  for _, word in ipairs(words)\
    \ do\n    local word_len = #word\n    for _, p in ipairs(primes) do\n      if\
    \ p == word_len then\n        res[#res + 1] = word\n        break\n      end\n\
    \    end\n  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n <= 1 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for s in sentence:gmatch(\"%w+\")\
    \ do\n    if is_prime(#s) then\n      table.insert(words, s)\n    end\n  end\n\
    \  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t = {}\n\
    \    for w in sentence:gmatch(\"%S+\") do\n        if is_prime(#w) then\n    \
    \        table.insert(t, w)\n        end\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzq6kht16.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpzq6kht16.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpzq6kht16.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local res = {}\n    for w in sentence:gmatch(\"%w+\"\
    ) do\n        local len = #w\n        if primes[len] then\n            res[#res\
    \ + 1] = w\n        end\n    end\n    return table.concat(res, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81t3ykiq.lua:30:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmp81t3ykiq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        if i == 2 or i == 3 or i == 5 or i\
    \ == 7 then\n            primes[i] = true\n        elseif i % 2 ~= 0 and i % 3\
    \ ~= 0 and i % 5 ~= 0 and i % 7 ~= 0 then\n            primes[i] = true\n    \
    \    end\n    end\n    local words = {}\n    for word in sentence:gmatch(\"%S+\"\
    ) do\n        table.insert(words, word)\n    end\n    local result = {}\n    for\
    \ _, word in ipairs(words) do\n        if primes[#word] then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"[^%s]+\") do\n    words[#words + 1] = word\n\
    \  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if word:len()\
    \ > 1 then\n      local n = tonumber(word:sub(1, 1))\n      if n and n > 1 then\n\
    \        local is_prime = true\n        for k = 2, n - 1 do\n          if n %\
    \ k == 0 then\n            is_prime = false\n            break\n          end\n\
    \        end\n        if is_prime then\n          result[#result + 1] = word\n\
    \        end\n      end\n    end\n  end\n  return table.concat(result, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7najxgu6.lua:44:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7najxgu6.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    local is_prime = {}\n    for i = 2, 100 do\n        is_prime[i]\
    \ = true\n    end\n    for i = 2, math.sqrt(100) do\n        if is_prime[i] then\n\
    \            for j = i * i, 100, i do\n                is_prime[j] = false\n \
    \           end\n        end\n    end\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if is_prime[#word] then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local words = {}\n    local is_prime = {}\n    local min_prime = 3\n\
    \    local max_prime = 9999\n    for i = 2, max_prime do\n        if not is_prime[i]\
    \ then\n            primes[#primes + 1] = i\n            if i >= min_prime then\n\
    \                words[#words + 1] = i\n            end\n            for j = i\
    \ * 2, max_prime, i do\n                is_prime[j] = true\n            end\n\
    \        end\n    end\n    local result = {}\n    for w in sentence:gmatch(\"\
    %S+\") do\n        if words[#w] then\n            result[#result + 1] = w\n  \
    \      end\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnz4h0k4.lua:44:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmpfnz4h0k4.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for word in sentence:gmatch(\"[^%s]+\") do\n        local n = #word\n   \
    \     if n > 1 then\n            local is_prime = true\n            for i = 2,\
    \ math.floor(math.sqrt(n)) do\n                if n % i == 0 then\n          \
    \          is_prime = false\n                    break\n                end\n\
    \            end\n            if is_prime then\n                table.insert(res,\
    \ word)\n            end\n        end\n    end\n    return table.concat(res, \"\
    \ \")\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1490l36g.lua:35: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local is_prime = {}\n  for i = 2, 100 do\n    is_prime[i] = true\n  end\n \
    \ for i = 2, 100 do\n    if is_prime[i] then\n      for j = i * i, 100, i do\n\
    \        is_prime[j] = false\n      end\n    end\n  end\n  local result = {}\n\
    \  for _, word in ipairs(words) do\n    if is_prime[#word] then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    table.insert(words, w)\n  end\n \
    \ local primes = {}\n  for i = 2, sentence:len() do\n    local is_prime = true\n\
    \    for j = 2, i do\n      if i % j == 0 then\n        is_prime = false\n   \
    \     break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for _, w in ipairs(words) do\n  \
    \  for _, p in ipairs(primes) do\n      if w:len() == p then\n        table.insert(result,\
    \ w)\n        break\n      end\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphchmdp8d.lua:48:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphchmdp8d.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        local n = #word\n \
    \       if n == 2 or (n ~= 1 and n % 2 ~= 0 and n % 3 ~= 0 and n % 5 ~= 0 and\
    \ n % 7 ~= 0) then\n            table.insert(words, word)\n        end\n    end\n\
    \    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovl04_da.lua:30:\
    \ expected: \"go for\"\nactual: \"go\"\nstack traceback:\n\t/tmp/tmpovl04_da.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local function is_prime(n)\n        for _, p in ipairs(primes)\
    \ do\n            if p == n then\n                return true\n            end\n\
    \        end\n        return false\n    end\n    local result = {}\n    for _,\
    \ word in ipairs(string_split(sentence, ' ')) do\n        if is_prime(#word) then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ujktgq2.lua:26:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmp7ujktgq2.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp7ujktgq2.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  local min_prime = 2\n  for i = 2, 100 do\n    if i % min_prime == 0 then\n\
    \      min_prime = min_prime + 1\n    else\n      primes[#primes + 1] = i\n  \
    \  end\n  end\n  local function is_prime(n)\n    for _, p in ipairs(primes) do\n\
    \      if n == p then\n        return true\n      end\n    end\n    return false\n\
    \  end\n  local words = {}\n  for word in sentence:gmatch(\"%w+\") do\n    if\
    \ is_prime(#word) then\n      words[#words + 1] = word\n    end\n  end\n  return\
    \ table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatf0z49_.lua:45:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpatf0z49_.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ check_prime(n)\n        for i = 2, math.floor(math.sqrt(n)) do\n           \
    \ if n % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local words = {}\n    for word in sentence:gmatch(\"\
    [^%s]+\") do\n        if check_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr977bwes.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpr977bwes.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local p\n  local is_prime = {}\n  local primes = {}\n  for n = 2, #words do\n\
    \    if not is_prime[n] then\n      table.insert(primes, n)\n      if #words[n]\
    \ < #primes then\n        p = primes[#words[n]]\n      end\n    end\n    for i\
    \ = 1, #primes do\n      if primes[i] * n > #words then\n        break\n     \
    \ end\n      is_prime[primes[i] * n] = true\n      if n % primes[i] == 0 then\n\
    \        break\n      end\n    end\n  end\n  local res = {}\n  for i = 1, #words\
    \ do\n    if #words[i] == p then\n      table.insert(res, words[i])\n    end\n\
    \  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwyg8oz7k.lua:53:\
    \ expected: \"go for\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwyg8oz7k.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        words[#words + 1] =\
    \ word\n    end\n    local function is_prime(n)\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local result = {}\n  \
    \  for _, word in ipairs(words) do\n        if is_prime(#word) then\n        \
    \    result[#result + 1] = word\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6tu19f3.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpw6tu19f3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n    \
    \  return false\n    end\n    for i = 3, math.sqrt(n), 2 do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n    end\n    return true\n  end\n \
    \ local out = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n\
    \      table.insert(out, word)\n    end\n  end\n  return table.concat(out, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local t = {}\n \
    \ for word in sentence:gmatch(\"%w+\") do\n    if not t[#word] then\n      local\
    \ is_prime = true\n      for i = 2, #word - 1 do\n        if #word % i == 0 then\n\
    \          is_prime = false\n          break\n        end\n      end\n      if\
    \ is_prime then\n        t[#t + 1] = word\n      end\n    end\n  end\n  return\
    \ table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaocd305j.lua:39:\
    \ expected: \"there is no place\"\nactual: \"there is place\"\nstack traceback:\n\
    \t/tmp/tmpaocd305j.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function isprime(n)\n    if n <= 1 then\n      return false\n    elseif\
    \ n <= 3 then\n      return true\n    elseif n % 2 == 0 or n % 3 == 0 then\n \
    \     return false\n    end\n    local i = 5\n    while i * i <= n do\n      if\
    \ n % i == 0 or n % (i + 2) == 0 then\n        return false\n      end\n     \
    \ i = i + 6\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if isprime(#word) then\n      result[#result + 1] =\
    \ word\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local T = {}\n\
    \    for w in sentence:gmatch(\"%S+\") do\n        table.insert(T, w)\n    end\n\
    \    local P = {}\n    for i = 2, #T do\n        P[i] = true\n    end\n    for\
    \ i = 2, #T - 1 do\n        if P[i] then\n            for j = i + i, #T, i do\n\
    \                P[j] = false\n            end\n        end\n    end\n    local\
    \ result = {}\n    for i = 1, #T do\n        if P[#T[i]] then\n            table.insert(result,\
    \ T[i])\n        end\n    end\n    return table.concat(result, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponm83y8w.lua:46:\
    \ expected: \"Hi am Hussein\"\nactual: \"Hi am\"\nstack traceback:\n\t/tmp/tmponm83y8w.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local is_prime =\
    \ {}\n  local sieve = {true, true}\n  for i = 2, #sentence do\n    if not sieve[i]\
    \ then\n      for j = i + i, #sentence, i do\n        sieve[j] = true\n      end\n\
    \    end\n  end\n  for i = 2, #sentence do\n    if not sieve[i] then\n      is_prime[i]\
    \ = true\n    end\n  end\n  local result = {}\n  for _, word in ipairs(sentence:split(\"\
    \ \")) do\n    if is_prime[#word] then\n      table.insert(result, word)\n   \
    \ end\n  end\n  return table.concat(result, \" \")\nend\nreturn words_in_sentence\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy5e5pkl3.lua:39: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  -- TODO: make isPrime\
    \ a bit faster\n  local function isPrime(n)\n    if n < 2 then\n      return false\n\
    \    end\n    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local result\
    \ = {}\n  for w in sentence:gmatch(\"%S+\") do\n    if isPrime(#w) then\n    \
    \  table.insert(result, w)\n    end\n  end\n  return table.concat(result, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local function is_prime(n)\n        if n == 1 then\n   \
    \         return false\n        end\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local res = {}\n    for\
    \ _, word in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(res,\
    \ word)\n        end\n    end\n    return table.concat(res, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t = {}\n\
    \    for v in sentence:gmatch(\"%S+\") do\n        if is_prime(#v) then\n    \
    \        table.insert(t, v)\n        end\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpropxvqzj.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpropxvqzj.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpropxvqzj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  --[[\n    [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97]\n    sentence:\n      1. split on space\n      2. filter out the\
    \ prime length words\n      3. join the filtered words\n    --]]\n  local words\
    \ = {}\n  for word in sentence:gmatch(\"%S+\") do\n    if is_prime(#word) then\n\
    \      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9p1yqlc.lua:25:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpy9p1yqlc.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpy9p1yqlc.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        local l = #word\n        if l == primes[l] then\n         \
    \   table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy33vfbim.lua:30:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpy33vfbim.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local n = sentence:find(\"\
    \ \", 1, true)\n    if n == nil then\n        return is_prime(#sentence) and sentence\
    \ or \"\"\n    end\n    local result = {}\n    local start = 1\n    while n do\n\
    \        local word = sentence:sub(start, n - 1)\n        if is_prime(#word) then\n\
    \            table.insert(result, word)\n        end\n        start = n + 1\n\
    \        n = sentence:find(\" \", start, true)\n    end\n    local word = sentence:sub(start)\n\
    \    if is_prime(#word) then\n        table.insert(result, word)\n    end\n  \
    \  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiuo17qom.lua:24:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpiuo17qom.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpiuo17qom.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    local len = #w\n    local is_prime\
    \ = true\n    for i = 2, len do\n      if len % i == 0 then\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime then\n      table.insert(words,\
    \ w)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugszq94g.lua:36:\
    \ expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpugszq94g.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    if math.floor(math.sqrt(i)) == math.sqrt(i) then\n\
    \      primes[#primes + 1] = i\n    end\n  end\n  local res = {}\n  for w in sentence:gmatch(\"\
    %S+\") do\n    if primes[#w] then\n      res[#res + 1] = w\n    end\n  end\n \
    \ return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4tf_yck.lua:34:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpi4tf_yck.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        if sentence:sub(i):match('^(.)%1+$')\
    \ then\n            -- composite\n        else\n            primes[#primes + 1]\
    \ = i\n        end\n    end\n    local words = {}\n    for i = 1, #sentence do\n\
    \        if sentence:sub(i, i) == ' ' then\n            words[#words + 1] = sentence:sub(i\
    \ + 1, i + primes[#words + 1] - 1)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t9722wn.lua:36:\
    \ expected: \"is\"\nactual: \"i a  tes\"\nstack traceback:\n\t/tmp/tmp5t9722wn.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    if sentence:sub(i, i) ~= \" \" then\n      local\
    \ is_prime = true\n      for j = 2, i - 1 do\n        if i % j == 0 then\n   \
    \       is_prime = false\n          break\n        end\n      end\n      if is_prime\
    \ then\n        primes[#primes + 1] = i\n      end\n    end\n  end\n  local t\
    \ = {}\n  local s = 1\n  for i = 1, #sentence do\n    if sentence:sub(i, i) ==\
    \ \" \" then\n      t[#t + 1] = sentence:sub(s, i - 1)\n      s = i + 1\n    end\n\
    \  end\n  t[#t + 1] = sentence:sub(s)\n  local res = {}\n  for i = 1, #t do\n\
    \    if #t[i] == primes[#res + 1] then\n      res[#res + 1] = t[i]\n    end\n\
    \  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxalixot.lua:54:\
    \ expected: \"there is no place\"\nactual: \"is\"\nstack traceback:\n\t/tmp/tmpfxalixot.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  return table.concat(\n\
    \    table.map(\n      table.filter(table.split(sentence, \" \"), is_prime),\n\
    \      function(word)\n        return word .. \" \"\n      end\n    ),\n    \"\
    \"\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqa3jdhz.lua:18:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmppqa3jdhz.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmppqa3jdhz.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for i = 1, #sentence do\n        if sentence:sub(i, i) == \" \" then\n\
    \            words[#words + 1] = sentence:sub(i + 1, #sentence)\n            sentence\
    \ = sentence:sub(1, i - 1)\n        end\n    end\n    words[#words + 1] = sentence\n\
    \    local res = {}\n    for _, w in ipairs(words) do\n        local prime = true\n\
    \        for i = 2, #w - 1 do\n            if w:sub(i, i) == w:sub(1, 1) then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            res[#res + 1] = w\n        end\n \
    \   end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9v2o_3n.lua:43:\
    \ expected: \"is\"\nactual: \"is a test This\"\nstack traceback:\n\t/tmp/tmpj9v2o_3n.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local p = {2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97}\n  local is_prime = function(n)\n    for _, v in ipairs(p) do\n\
    \      if v == n then\n        return true\n      end\n    end\n    return false\n\
    \  end\n  local m = {}\n  for w in sentence:gmatch(\"%S+\") do\n    if is_prime(#w)\
    \ then\n      m[#m + 1] = w\n    end\n  end\n  return table.concat(m, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {[2]\
    \ = true, [3] = true, [5] = true, [7] = true, [11] = true, [13] = true, [17] =\
    \ true, [19] = true, [23] = true, [29] = true, [31] = true, [37] = true, [41]\
    \ = true, [43] = true, [47] = true, [53] = true, [59] = true, [61] = true, [67]\
    \ = true, [71] = true, [73] = true, [79] = true, [83] = true, [89] = true, [97]\
    \ = true}\n  local result = {}\n  for word in sentence:gmatch(\"%S+\") do\n  \
    \  if primes[#word] then\n      table.insert(result, word)\n    end\n  end\n \
    \ return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local is_prime =\
    \ {}\n  local primes = {}\n  for i = 2, #sentence do\n    is_prime[i] = true\n\
    \  end\n  for i = 2, #sentence do\n    if is_prime[i] then\n      table.insert(primes,\
    \ i)\n      for j = i + i, #sentence, i do\n        is_prime[j] = false\n    \
    \  end\n    end\n  end\n  local result = {}\n  for _, v in ipairs(sentence:split(\"\
    \ \")) do\n    if is_prime[#v] then\n      table.insert(result, v)\n    end\n\
    \  end\n  return table.concat(result, \" \")\nend\nreturn words_in_sentence\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpacpnbbpq.lua:38: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local pmap = {}\n\
    \    for i = 2, #sentence do\n        pmap[i] = true\n    end\n    for i = 2,\
    \ #sentence do\n        if pmap[i] then\n            for j = i * 2, #sentence,\
    \ i do\n                pmap[j] = false\n            end\n        end\n    end\n\
    \    local res = {}\n    for word in sentence:gmatch('%S+') do\n        if pmap[#word]\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzq428aos.lua:36: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for w in sentence:gmatch('[^%s]+') do\n        table.insert(words, w)\n\
    \    end\n    local function is_prime(n)\n        if n == 2 then\n           \
    \ return true\n        end\n        for i = 2, math.floor(math.sqrt(n)) do\n \
    \           if n % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local result = {}\n    for _,\
    \ w in ipairs(words) do\n        if is_prime(#w) then\n            table.insert(result,\
    \ w)\n        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3bpdg2t.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpa3bpdg2t.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local max_prime_number = 0\n    local prime_indicator = {}\n    for\
    \ i = 2, 100 do\n        if not prime_indicator[i] then\n            table.insert(prime_numbers,\
    \ i)\n            for j = i * i, 100, i do\n                prime_indicator[j]\
    \ = true\n            end\n        end\n    end\n    local res = {}\n    for word\
    \ in sentence:gmatch(\"%S+\") do\n        if prime_indicator[#word] == nil then\n\
    \            table.insert(res, word)\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0crohry.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpd0crohry.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t, words\
    \ = {}, {}\n    for v in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ v)\n        t[#t + 1] = v:len()\n    end\n    local sieve = {}\n    for i =\
    \ 2, 100 do\n        if sieve[i] == nil then\n            for j = i + i, 100,\
    \ i do\n                sieve[j] = true\n            end\n        end\n    end\n\
    \    local res = {}\n    for i = 1, #t do\n        if sieve[t[i]] == nil then\n\
    \            table.insert(res, words[i])\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bbkof3b.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp5bbkof3b.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n  \
    \      return false\n      end\n    end\n    return true\n  end\n  local result\
    \ = {}\n  for w in sentence:gmatch(\"%S+\") do\n    if prime(#w) then\n      table.insert(result,\
    \ w)\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n <= 1 then\n      return false\n    end\n    local r = math.sqrt(n)\n\
    \    for i = 2, r do\n      if n % i == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local res = {}\n  for w in sentence:gmatch(\"\
    %S+\") do\n    if is_prime(#w) then\n      table.insert(res, w)\n    end\n  end\n\
    \  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch('[^%s]+') do\n    table.insert(words, w)\n  end\n\
    \  local primes = {}\n  for i = 1, #words do\n    if words[i]:len() % 2 == 1 then\n\
    \      table.insert(primes, words[i])\n    end\n  end\n  return table.concat(primes,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmjmwo3e.lua:32:\
    \ expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmplmjmwo3e.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 1, #words do\n    local word = words[i]\n    if\
    \ is_prime(#word) then\n      primes[#primes + 1] = word\n    end\n  end\n  return\
    \ table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_enn8717.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_enn8717.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp_enn8717.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for i in sentence:gmatch(\"[%w]+\") do\n    local l = i:len()\n    local is_prime\
    \ = true\n    for j = 2, l - 1 do\n      if l % j == 0 then\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime then\n      table.insert(words,\
    \ i)\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_nrmt1c.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmps_nrmt1c.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local function is_prime(n)\n    for _, p in ipairs(primes)\
    \ do\n      if p == n then\n        return true\n      end\n    end\n    return\
    \ false\n  end\n  local t = {}\n  for word in sentence:gmatch(\"%w+\") do\n  \
    \  if is_prime(#word) then\n      t[#t + 1] = word\n    end\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for i = 1, #sentence do\n        if sentence:sub(i, i) == \" \" then\n  \
    \          table.insert(res, \" \")\n        else\n            local j = i\n \
    \           while sentence:sub(j, j) ~= \" \" and j <= #sentence do\n        \
    \        j = j + 1\n            end\n            local word = sentence:sub(i,\
    \ j - 1)\n            if is_prime(#word) then\n                table.insert(res,\
    \ word)\n            end\n            i = j\n        end\n    end\n    return\
    \ table.concat(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4h0lyev8.lua:26:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp4h0lyev8.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp4h0lyev8.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local ret = {}\n\
    \    for _, w in ipairs(utils.split(sentence, \" \")) do\n        local l = utils.length(w)\n\
    \        if utils.is_prime(l) then\n            table.insert(ret, w)\n       \
    \ end\n    end\n    return table.concat(ret, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ut3o376.lua:17:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmp4ut3o376.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp4ut3o376.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local T = {}\n \
    \ for word in sentence:gmatch(\"%S+\") do\n    local l = #word\n    local is_prime\
    \ = true\n    for i = 2, l-1 do\n      if l % i == 0 then\n        is_prime =\
    \ false\n        break\n      end\n    end\n    if is_prime then\n      T[#T+1]\
    \ = word\n    end\n  end\n  return table.concat(T, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpps8fmqhb.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpps8fmqhb.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for prime in ipairs(primes) do\n    if prime <= 26 then\n      primes[prime]\
    \ = true\n    end\n  end\n  local words = {}\n  for word in sentence:gmatch(\"\
    %w+\") do\n    local len = #word\n    if primes[len] then\n      words[#words\
    \ + 1] = word\n    end\n  end\n  return table.concat(words, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g82qiyk.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2g82qiyk.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local is_prime\
    \ = {}\n    for i = 2, 100 do\n        is_prime[i] = true\n    end\n    for i\
    \ = 2, 100 do\n        if is_prime[i] then\n            for j = i * i, 100, i\
    \ do\n                is_prime[j] = false\n            end\n        end\n    end\n\
    \    local t = {}\n    for word in sentence:gmatch(\"%S+\") do\n        if is_prime[#word]\
    \ then\n            t[#t + 1] = word\n        end\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local primes = {}\n  for i = 1, #words do\n    if not primes[#words[i]] then\n\
    \      local is_prime = true\n      for j = 2, #words[i] - 1 do\n        if #words[i]\
    \ % j == 0 then\n          is_prime = false\n          break\n        end\n  \
    \    end\n      if is_prime then\n        primes[#words[i]] = true\n      end\n\
    \    end\n  end\n  local result = {}\n  for i = 1, #words do\n    if primes[#words[i]]\
    \ then\n      result[#result + 1] = words[i]\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenhp0q_f.lua:47:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpenhp0q_f.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97}\n    local t = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        if primes[#word] then\n            table.insert(t, word)\n\
    \        end\n    end\n    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwregx126.lua:29:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmpwregx126.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    -- table.concat(arr,\
    \ \"\", f, i)\n    -- concatenates all elements from the table,\n    -- using\
    \ the f-th value as separator (or an empty string if f is nil),\n    -- starting\
    \ from index i, or from index 1 if i is nil.\n    -- If i is greater than the\
    \ number of values in the table,\n    -- table.concat simply returns the empty\
    \ string.\n    -- The default value for f is \"\".\n    -- If the table has only\
    \ one value, the result is just that value.\n    local function is_prime(n)\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch(\"%w+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_v_kut1.lua:44:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpy_v_kut1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}\n\
    \  local ws = {}\n  for s in sentence:gmatch(\"%S+\") do\n    local l = #s\n \
    \   if primes[l] then\n      ws[#ws+1] = s\n    end\n  end\n  return table.concat(ws,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3yobwzt.lua:30:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmps3yobwzt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local t = {}\n \
    \ for word in sentence:gmatch(\"%S+\") do\n    if is_prime(#word) then\n     \
    \ t[#t + 1] = word\n    end\n  end\n  return table.concat(t, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6s018irb.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6s018irb.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp6s018irb.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"[^%s]+\") do\n        local word_len =\
    \ word:len()\n        if word_len == 2 or word_len == 3 or word_len == 5 or word_len\
    \ == 7 or word_len == 11 or word_len == 13 or word_len == 17 or word_len == 19\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local is_prime =\
    \ {}\n  for i = 2, 100 do\n    is_prime[i] = true\n  end\n  for i = 2, #is_prime\
    \ do\n    if is_prime[i] then\n      for j = i * i, #is_prime, i do\n        is_prime[j]\
    \ = false\n      end\n    end\n  end\n  local words = {}\n  for word in sentence:gmatch(\"\
    %S+\") do\n    if is_prime[#word] then\n      words[#words + 1] = word\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n \
    \ local primes = {}\n  for i = 2, math.floor(math.sqrt(#words)) do\n    if #words\
    \ % i == 0 then\n      table.insert(primes, i)\n    end\n  end\n  local result\
    \ = {}\n  for _, i in ipairs(primes) do\n    table.insert(result, words[i])\n\
    \  end\n  return table.concat(result, \" \")\nend\nprint(words_in_sentence(\"\
    This is a test\")) -- \"is\"\nprint(words_in_sentence(\"lets go for swimming\"\
    )) -- \"go for\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "is\ngo\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ufu1vlh.lua:39:\
    \ expected: \"go for\"\nactual: \"go\"\nstack traceback:\n\t/tmp/tmp6ufu1vlh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local is_prime =\
    \ {\n    [1] = false,\n    [2] = true,\n    [3] = true,\n    [4] = false,\n  \
    \  [5] = true,\n    [6] = false,\n    [7] = true,\n    [8] = false,\n    [9] =\
    \ false,\n    [10] = false,\n    [11] = true,\n    [12] = false,\n    [13] = true,\n\
    \    [14] = false,\n    [15] = false,\n    [16] = false,\n    [17] = true,\n \
    \   [18] = false,\n    [19] = true,\n    [20] = false,\n    [21] = false,\n  \
    \  [22] = false,\n    [23] = true,\n    [24] = false,\n    [25] = false,\n   \
    \ [26] = false,\n    [27] = false,\n    [28] = false,\n    [29] = true,\n    [30]\
    \ = false,\n    [31] = true,\n    [32] = false,\n    [33] = false,\n    [34] =\
    \ false,\n    [35] = false,\n    [36] = false,\n    [37] = true,\n    [38] = false,\n\
    \    [39] = false,\n    [40] = false,\n    [41] = true,\n    [42] = false,\n \
    \   [43] = true,\n    [44] = false,\n    [45] = false,\n    [46] = false,\n  \
    \  [47] = true,\n    [48] = false,\n    [49] = false,\n    [50] = false,\n   \
    \ [51] = false,\n    [52] = false,\n    [53] = true,\n    [54] = false,\n    [55]\
    \ = false,\n    [56] = false,\n    [57] = false,\n    [58] = false,\n    [59]\
    \ = true,\n    [60] = false,\n    [61] = true,\n    [62] = false,\n    [63] =\
    \ false,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzcdhffbq.lua:82: '}' expected (to close '{' at line 16) near\
    \ 'function'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local words = {}\n  for _, word in ipairs(sentence:split(\" \"\
    )) do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6t01qq1v.lua:28:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp6t01qq1v.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp6t01qq1v.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local result = {}\n    local i = 1\n    for _, word in ipairs(sentence:split(\"\
    \ \")) do\n        if not primes[#word] then\n            for p = 2, #word - 1\
    \ do\n                if #word % p == 0 then\n                    primes[#word]\
    \ = false\n                    break\n                end\n            end\n \
    \           if not primes[#word] then\n                primes[#word] = true\n\
    \            end\n        end\n        if primes[#word] then\n            result[i]\
    \ = word\n            i = i + 1\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaziuit1p.lua:19:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpaziuit1p.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpaziuit1p.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local t = {}\n  for word in sentence:gmatch(\"%S+\") do\n   \
    \ if is_prime(#word) then\n      t[#t + 1] = word\n    end\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_number\
    \ = {}\n    for i = 2, 100 do\n        local is_prime = true\n        for j =\
    \ 2, i-1 do\n            if i % j == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            prime_number[#prime_number+1] = i\n        end\n    end\n    local\
    \ s = \"\"\n    for w in sentence:gmatch(\"%S+\") do\n        for _, l in ipairs(prime_number)\
    \ do\n            if #w == l then\n                s = s .. w .. \" \"\n     \
    \           break\n            end\n        end\n    end\n    return s:sub(1,\
    \ #s-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n    end\n    return true\n  end\n \
    \ local result = {}\n  for s in sentence:gmatch(\"[^%s]+\") do\n    if prime(#s)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  local function is_prime(n)\n    local function is_not_prime(p)\n      if p\
    \ * p > n then\n        return true\n      end\n      if n % p == 0 then\n   \
    \     return false\n      end\n      return is_not_prime(p + 1)\n    end\n   \
    \ if n < 2 then\n      return false\n    end\n    return is_not_prime(2)\n  end\n\
    \  for i = 1, #sentence do\n    if is_prime(i) then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  local res = {}\n  for i = 1, #sentence do\n    res[i]\
    \ = -1\n  end\n  local function update(i, s)\n    for j = 0, #s - 1 do\n     \
    \ if i + j < #sentence then\n        res[i + j] = s:sub(j + 1, j + 1)\n      end\n\
    \    end\n  end\n  local beg = 1\n  local i = 1\n  while i <= #sentence do\n \
    \   local j = i\n    while j <= #sentence and sentence:sub(j, j) ~= \" \" do\n\
    \      j = j + 1\n    end\n    local s = sentence:sub(i, j - 1)\n    local l =\
    \ #s\n    if primes[l] then\n      update(beg, s)\n      beg = beg + l + 1\n \
    \   end\n    i = j + 1\n  end\n  local j = 1\n  while j <= #res do\n    if res[j]\
    \ == -1 then\n      table.remove(res, j)\n    else\n      j = j + 1\n    end\n\
    \  end\n  return table.concat(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxonk41dy.lua:77:\
    \ expected: \"is\"\nactual: \"Thisisates\"\nstack traceback:\n\t/tmp/tmpxonk41dy.lua:77:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for w in sentence:gmatch(\"%w+\") do\n        words[#words + 1] = w\n\
    \    end\n    local primes = {}\n    for i = 1, 100 do\n        local prime =\
    \ true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n        \
    \        prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            primes[#primes + 1] = i\n        end\n   \
    \ end\n    local res = {}\n    for _, w in ipairs(words) do\n        for _, p\
    \ in ipairs(primes) do\n            if #w == p then\n                res[#res\
    \ + 1] = w\n                break\n            end\n        end\n    end\n   \
    \ return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iqappol.lua:48:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp5iqappol.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%w+\") do\n    table.insert(words, w)\n  end\n \
    \ local function is_prime(n)\n    if n < 2 then\n      return false\n    end\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  local res = {}\n\
    \  for _, w in ipairs(words) do\n    if is_prime(#w) then\n      table.insert(res,\
    \ w)\n    end\n  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for w in sentence:gmatch(\"%S+\") do\n        words[#words + 1] = w\n\
    \    end\n    local primes = {}\n    for i = 1, #words do\n        if (words[i]:len()\
    \ % 2 ~= 0) and (words[i]:len() % 3 ~= 0) and (words[i]:len() % 5 ~= 0) and (words[i]:len()\
    \ % 7 ~= 0) then\n            primes[#primes + 1] = words[i]\n        end\n  \
    \  end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0czp_l0h.lua:32:\
    \ expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp0czp_l0h.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local t, r = {},\
    \ {}\n  for w in sentence:gmatch(\"%S+\") do\n    t[#t + 1] = #w\n  end\n  local\
    \ function is_prime(n)\n    if n == 1 then\n      return false\n    end\n    for\
    \ i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n   \
    \   end\n    end\n    return true\n  end\n  for i = 1, #t do\n    if is_prime(t[i])\
    \ then\n      r[#r + 1] = t[i]\n    end\n  end\n  return table.concat(r, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprn0_x_7s.lua:42:\
    \ expected: \"is\"\nactual: \"2\"\nstack traceback:\n\t/tmp/tmprn0_x_7s.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local result =\
    \ {}\n    for _, word in ipairs(string.split(sentence, ' ')) do\n        if is_prime(word:len())\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7z3ndi27.lua:25: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for _, word in ipairs(sentence:split(\" \")) do\n        if is_prime(#word)\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2spwgxid.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2spwgxid.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp2spwgxid.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    -- firstly, let's\
    \ find all the primes from 1 to 101\n    local primes = {}\n    for i = 2, 101\
    \ do\n        local isPrime = true\n        for j = 2, i - 1 do\n            if\
    \ i % j == 0 then\n                isPrime = false\n                break\n  \
    \          end\n        end\n        if isPrime then\n            primes[#primes\
    \ + 1] = i\n        end\n    end\n    -- now that we have all the primes, we need\
    \ to find all the words in the sentence\n    -- we can split them using spaces\n\
    \    local words = {}\n    for i = 1, #sentence do\n        if sentence:sub(i,\
    \ i) == \" \" then\n            -- we found a space, we need to check if the word\
    \ before the space is\n            -- in the list of primes\n            local\
    \ word = sentence:sub(1, i - 1)\n            -- now we need to check if the length\
    \ of the word is in the list of primes\n            for j = 1, #primes do\n  \
    \              if #word == primes[j] then\n                    words[#words +\
    \ 1] = word\n                    break\n                end\n            end\n\
    \            -- now that we have added the word to the list if it is a prime,\n\
    \            -- let's remove the word from the sentence\n            sentence\
    \ = sentence:sub(i + 1)\n            -- and reset the loop\n            i = 0\n\
    \        end\n    end\n    -- now that we have removed all the non-prime words,\n\
    \    -- we need to check the last word if it is prime\n    local word = sentence\n\
    \    for j = 1, #primes do\n        if #word == primes[j] then\n            words[#words\
    \ + 1] = word\n            break\n        end\n    end\n    -- finally, let's\
    \ join all the words into a sentence\n    return table.concat(words, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp812tgwrc.lua:68:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp812tgwrc.lua:68:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t, is_prime\
    \ = {}, {}\n    local max_prime = 1\n    for i = 2, #sentence do\n        if not\
    \ is_prime[i] then\n            is_prime[i] = true\n            table.insert(t,\
    \ i)\n            max_prime = i\n        end\n        for j = i + i, #sentence,\
    \ i do\n            is_prime[j] = false\n        end\n    end\n    local res =\
    \ {}\n    for word in sentence:gmatch(\"[^ ]+\") do\n        if is_prime[#word]\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_usaketq.lua:40:\
    \ expected: \"is\"\nactual: \"This is test\"\nstack traceback:\n\t/tmp/tmp_usaketq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_word_counts\
    \ = {}\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n  \
    \      local lw = #word\n        if not prime_word_counts[lw] then\n         \
    \   prime_word_counts[lw] = true\n            for i = 2, lw - 1 do\n         \
    \       if lw % i == 0 then\n                    prime_word_counts[lw] = false\n\
    \                    break\n                end\n            end\n        end\n\
    \        if prime_word_counts[lw] then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k47pc5y.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp_k47pc5y.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local res = {}\n\
    \    for word in sentence:gmatch(\"%w+\") do\n        local len = #word\n    \
    \    if len > 1 then\n            local l = 2\n            while l * l <= len\
    \ do\n                if len % l == 0 then\n                    break\n      \
    \          end\n                l = l + 1\n            end\n            if l *\
    \ l > len then\n                table.insert(res, word)\n            end\n   \
    \     end\n    end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local s = {}\n    for i = 1, #sentence do\n       \
    \ if not s[#s] then\n            s[#s + 1] = ''\n        end\n        s[#s] =\
    \ s[#s] .. sentence:sub(i, i)\n        if sentence:sub(i, i) == ' ' then\n   \
    \         s[#s + 1] = ''\n        end\n    end\n    for i = #s, 1, -1 do\n   \
    \     if s[i] == '' then\n            table.remove(s, i)\n        end\n    end\n\
    \    local n = {}\n    for i = 1, #s do\n        for j = 1, #primes do\n     \
    \       if #s[i] == primes[j] then\n                n[#n + 1] = s[i]\n       \
    \         break\n            end\n        end\n    end\n    return table.concat(n,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp066qhxmg.lua:47:\
    \ expected: \"is\"\nactual: \"This  is  a \"\nstack traceback:\n\t/tmp/tmp066qhxmg.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"[^%s]+\") do\n    words[#words + 1] = word\n\
    \  end\n  local res = {}\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local is_prime = true\n    for j = 2, word:len() - 1 do\n      if word:len()\
    \ % j == 0 then\n        is_prime = false\n        break\n      end\n    end\n\
    \    if is_prime then\n      res[#res + 1] = word\n    end\n  end\n  return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprt0nl4xv.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmprt0nl4xv.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n \
    \ local ret = {}\n  for i, w in ipairs(words) do\n    if is_prime(#w) then\n \
    \     table.insert(ret, w)\n    end\n  end\n  return table.concat(ret, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jpsn57y.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp2jpsn57y.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp2jpsn57y.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for _, v in ipairs(sentence:split(\" \")) do\n        if is_prime(#v)\
    \ then\n            table.insert(primes, v)\n        end\n    end\n    return\
    \ table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2d18zjw5.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2d18zjw5.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp2d18zjw5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(x)\n\
    \    if x == 2 then\n      return true\n    end\n    for i = 2, math.floor(math.sqrt(x))\
    \ do\n      if x % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local res = {}\n  for w in sentence:gmatch(\"%S+\") do\n\
    \    if is_prime(#w) then\n      table.insert(res, w)\n    end\n  end\n  return\
    \ table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp50kpdj.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpcp50kpdj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n\
    \  local result = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfsisar_d.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpfsisar_d.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpfsisar_d.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local dict = {}\n    for _, num in ipairs(prime_numbers)\
    \ do\n        dict[num] = true\n    end\n    local words = {}\n    for word in\
    \ sentence:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n  \
    \  local ans = {}\n    for _, word in ipairs(words) do\n        if dict[#word]\
    \ then\n            table.insert(ans, word)\n        end\n    end\n    return\
    \ table.concat(ans, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    --[[\n    print('sentence='\
    \ .. sentence)\n    local t = {}\n    for i = 1, #sentence do\n        t[i] =\
    \ sentence:sub(i, i)\n    end\n    print('t=' .. table.concat(t, ', '))\n    --]]\n\
    \    local words = {}\n    local p, i = 1, 1\n    while true do\n        p = sentence:find('\
    \ ', p, true)\n        if p == nil then\n            break\n        end\n    \
    \    words[i] = sentence:sub(i, p - 1)\n        i = p + 1\n        p = p + 1\n\
    \    end\n    words[i] = sentence:sub(i)\n    -- print('words=' .. table.concat(words,\
    \ ', '))\n    local prime_numbers = {}\n    for _, v in ipairs(words) do\n   \
    \     if is_prime(#v) then\n            prime_numbers[#prime_numbers + 1] = v\n\
    \        end\n    end\n    return table.concat(prime_numbers, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0nz9pwz.lua:39:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpk0nz9pwz.lua:39:\
    \ in local 'candidate'\n\t/tmp/tmpk0nz9pwz.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for n = 2, 26 do\n        if n > 2 then\n            for m = 2, n -\
    \ 1 do\n                if n % m == 0 then\n                    goto continue\n\
    \                end\n            end\n        end\n        table.insert(primes,\
    \ n)\n        ::continue::\n    end\n    local res = {}\n    for _, v in ipairs(sentence:split('\
    \ ')) do\n        for _, p in ipairs(primes) do\n            if #v == p then\n\
    \                table.insert(res, v)\n                break\n            end\n\
    \        end\n    end\n    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppra8dlzl.lua:29:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmppra8dlzl.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmppra8dlzl.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for _, w in ipairs(sentence:split(' ')) do\n        if is_prime(#w)\
    \ then\n            table.insert(words, w)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpobd7ol0l.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpobd7ol0l.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpobd7ol0l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local t = {}\n\
    \    for word in sentence:gmatch(\"[%w]+\") do\n        table.insert(t, word)\n\
    \    end\n    local primes = {}\n    for i = 2, #t do\n        local prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ prime = false\n                break\n            end\n        end\n       \
    \ if prime then\n            table.insert(primes, t[i])\n        end\n    end\n\
    \    return table.concat(primes, \" \")\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzvusu0f8.lua:36: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local p = {}\n\
    \    local res = {}\n    for i = 2, 100 do\n        local is_prime = true\n  \
    \      for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            p[i] = true\n        end\n    end\n    for word in sentence:gmatch(\"\
    %w+\") do\n        if p[#word] then\n            table.insert(res, word)\n   \
    \     end\n    end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local function\
    \ is_prime(n)\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local words = {}\n    for _, w in ipairs(sentence:split(\" \"))\
    \ do\n        if is_prime(#w) then\n            table.insert(words, w)\n     \
    \   end\n    end\n    return table.concat(words, \" \")\nend\nfor _, v in ipairs({\n\
    \    {\n        \"This is a test\",\n        \"is\"\n    },\n    {\n        \"\
    lets go for swimming\",\n        \"go for\"\n    }\n}) do\n    local s, r = table.unpack(v)\n\
    \    assert(words_in_sentence(s) == r)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8w597rvy.lua:25: attempt to call a nil value (method 'split')\n\
    stack traceback:\n\t/tmp/tmp8w597rvy.lua:25: in local 'words_in_sentence'\n\t\
    /tmp/tmp8w597rvy.lua:43: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for w in sentence:gmatch('%w+') do\n    table.insert(words, w)\n  end\n  local\
    \ function is_prime(number)\n    if number < 2 then\n      return false\n    end\n\
    \    local sq = math.floor(math.sqrt(number))\n    for i = 2, sq do\n      if\
    \ number % i == 0 then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  local primes = {}\n  for i = 1, #words do\n    if is_prime(#words[i])\
    \ then\n      table.insert(primes, words[i])\n    end\n  end\n  return table.concat(primes,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local is_prime\
    \ = {}\n    for i = 2, #sentence do\n        is_prime[i] = true\n    end\n   \
    \ for i = 2, #sentence do\n        if is_prime[i] then\n            for j = i\
    \ * i, #sentence, i do\n                is_prime[j] = false\n            end\n\
    \        end\n    end\n    local result = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        if is_prime[#word] then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    local result = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        local len = #word\n        for _, prime in ipairs(primes) do\n\
    \            if len == prime then\n                table.insert(result, word)\n\
    \                break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local words =\
    \ {}\n    for w in sentence:gmatch('%w+') do\n        words[#words + 1] = w\n\
    \    end\n    local function is_prime(n)\n        if n <= 1 then\n           \
    \ return false\n        end\n        local i = 2\n        while i * i <= n do\n\
    \            if n % i == 0 then\n                return false\n            end\n\
    \            i = i + 1\n        end\n        return true\n    end\n    local res\
    \ = {}\n    for _, w in ipairs(words) do\n        if is_prime(#w) then\n     \
    \       res[#res + 1] = w\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%S+\")\
    \ do\n    table.insert(words, word)\n  end\n  local res = {}\n  for _, word in\
    \ ipairs(words) do\n    local sum = 0\n    for i = 1, #word do\n      sum = sum\
    \ + word:byte(i)\n    end\n    for _, prime in ipairs(primes) do\n      if prime\
    \ == sum then\n        table.insert(res, word)\n        break\n      end\n   \
    \ end\n  end\n  return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5523v5p5.lua:40:\
    \ expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp5523v5p5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local result =\
    \ {}\n    for w in sentence:gmatch(\"%S+\") do\n        if is_prime(#w) then\n\
    \            table.insert(result, w)\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdj6tleb9.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpdj6tleb9.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpdj6tleb9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    -- TODO: return\
    \ the words from the original sentence whose length are prime numbers\n    --\
    \ write your code here...\n    return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhke39rf.lua:24:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpuhke39rf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local S = sentence:split('\
    \ ')\n  local primes = {\n    [1] = false,\n    [2] = true,\n    [3] = true,\n\
    \    [4] = false,\n    [5] = true,\n    [6] = false,\n    [7] = true,\n    [8]\
    \ = false,\n    [9] = false,\n    [10] = false,\n    [11] = true,\n    [12] =\
    \ false,\n    [13] = true,\n    [14] = false,\n    [15] = false,\n    [16] = false,\n\
    \    [17] = true,\n    [18] = false,\n    [19] = true,\n    [20] = false,\n  \
    \  [21] = false,\n    [22] = false,\n    [23] = true,\n    [24] = false,\n   \
    \ [25] = false,\n    [26] = false,\n    [27] = false,\n    [28] = false,\n   \
    \ [29] = true,\n    [30] = false,\n    [31] = true,\n    [32] = false,\n    [33]\
    \ = false,\n    [34] = false,\n    [35] = false,\n    [36] = false,\n    [37]\
    \ = true,\n    [38] = false,\n    [39] = false,\n    [40] = false,\n    [41] =\
    \ true,\n    [42] = false,\n    [43] = true,\n    [44] = false,\n    [45] = false,\n\
    \    [46] = false,\n    [47] = true,\n    [48] = false,\n    [49] = false,\n \
    \   [50] = false,\n    [51] = false,\n    [52] = false,\n    [53] = true,\n  \
    \  [54] = false,\n    [55] = false,\n    [56] = false,\n    [57] = false,\n  \
    \  [58] = false,\n    [59] = true,\n    [60] = false,\n    [61] = true,\n    [62]\
    \ =\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfmvw0992.lua:80: '}' expected (to close '{' at line 17) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local t = {}\n \
    \ for w in sentence:gmatch(\"%w+\") do\n    if t[#t] then\n      table.insert(t,\
    \ t[#t] .. \" \" .. w)\n    else\n      table.insert(t, w)\n    end\n  end\n \
    \ local primes = {}\n  for i = 1, #t do\n    if t[i]:len() > 1 then\n      local\
    \ prime = true\n      for j = 2, t[i]:len() - 1 do\n        if t[i]:len() % j\
    \ == 0 then\n          prime = false\n          break\n        end\n      end\n\
    \      if prime then\n        table.insert(primes, t[i])\n      end\n    end\n\
    \  end\n  return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_glc96zl.lua:45:\
    \ expected: \"is\"\nactual: \"This is\"\nstack traceback:\n\t/tmp/tmp_glc96zl.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local is_prime = true\n    for j = 2, i - 1 do\n\
    \      if i % j == 0 then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      primes[#primes + 1] = i\n    end\n  end\n\
    \  local words = {}\n  for word in sentence:gmatch(\"%S+\") do\n    words[#words\
    \ + 1] = word\n  end\n  local result = {}\n  for i = 1, #words do\n    for j =\
    \ 1, #primes do\n      if #words[i] == primes[j] then\n        result[#result\
    \ + 1] = words[i]\n        break\n      end\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplutvv7ym.lua:45: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local result =\
    \ {}\n    for _, word in ipairs(string.split(sentence, \" \")) do\n        if\
    \ math.is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq92ngy23.lua:17:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpq92ngy23.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpq92ngy23.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local s = \"\"\
    \n    for word in sentence:gmatch(\"%S+\") do\n        if #word > 1 then\n   \
    \         local is_prime = true\n            for i = 2, #word - 1 do\n       \
    \         if #word % i == 0 then\n                    is_prime = false\n     \
    \               break\n                end\n            end\n            if is_prime\
    \ then\n                s = s .. word .. \" \"\n            end\n        end\n\
    \    end\n    return s:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local s = {}\n \
    \ for word in sentence:gmatch(\"%w+\") do\n    local l = #word\n    if l == 2\
    \ or l % 2 == 1 then\n      local ok = true\n      for i = 3, math.sqrt(l) do\n\
    \        if l % i == 0 then\n          ok = false\n          break\n        end\n\
    \      end\n      if ok then\n        table.insert(s, word)\n      end\n    end\n\
    \  end\n  return table.concat(s, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vk6nwx2.lua:38:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp3vk6nwx2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local count = 0\n    for i = 2, 10 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            count = count + 1\n            primes[count]\
    \ = i\n        end\n    end\n    local tokens = {}\n    local count = 0\n    for\
    \ token in sentence:gmatch(\"[^%s]+\") do\n        count = count + 1\n       \
    \ tokens[count] = token\n    end\n    local result = {}\n    local count = 0\n\
    \    for i = 1, #tokens do\n        local token = tokens[i]\n        for j = 1,\
    \ #primes do\n            local prime = primes[j]\n            if #token == prime\
    \ then\n                count = count + 1\n                result[count] = token\n\
    \                break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function is_prime(n)\n\
    \    if n == 2 then\n      return true\n    end\n    if n < 2 or n % 2 == 0 then\n\
    \      return false\n    end\n    for i = 3, math.sqrt(n), 2 do\n      if n %\
    \ i == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  local t = {}\n  for word in sentence:gmatch(\"%S+\") do\n    if is_prime(#word)\
    \ then\n      t[#t + 1] = word\n    end\n  end\n  return table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local function isprime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for word in sentence:gmatch(\"%w+\"\
    ) do\n    if isprime(#word) then\n      table.insert(words, word)\n    end\n \
    \ end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local function is_prime(n)\n    if n <= 97 then\n      for\
    \ _, p in ipairs(primes) do\n        if p == n then\n          return true\n \
    \       end\n      end\n      return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for w in sentence:gmatch(\"%S+\")\
    \ do\n    if is_prime(#w) then\n      table.insert(words, w)\n    end\n  end\n\
    \  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local function is_prime(n)\n    if n == 1 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local is_prime_by_length = {}\n\
    \  for i = 1, #words do\n    is_prime_by_length[i] = is_prime(#words[i])\n  end\n\
    \  local result = {}\n  for i = 1, #words do\n    if is_prime_by_length[i] then\n\
    \      result[#result + 1] = words[i]\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local w = {}\n\
    \    for word in sentence:gmatch(\"%w+\") do\n        table.insert(w, word)\n\
    \    end\n    local primes = {}\n    for word in sentence:gmatch(\"%w+\") do\n\
    \        local prime = true\n        for i = 2, word:len() - 1 do\n          \
    \  if word:len() % i == 0 then\n                prime = false\n              \
    \  break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ word)\n        end\n    end\n    return table.concat(primes, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptk8di4tg.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmptk8di4tg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
