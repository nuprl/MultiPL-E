name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tassert(x)\n\tassert(base)\n\tlocal y = ''\n\trepeat\n\t\tlocal d\
    \ = math.mod(x, base)\n\t\ty = string.format('%s%d', y, d)\n\t\tx = math.floor(x\
    \ / base)\n\tuntil x == 0\n\treturn y\nend", "    local out = \"\"\n    repeat\n\
    \        local d = x % base\n        out = tostring(d) .. out\n        x = (x\
    \ - d) / base\n    until x == 0\n    return out\nend", "    local res = {}\n \
    \   while x > 0 do\n        local r = x % base\n        table.insert(res, r)\n\
    \        x = (x - r) / base\n    end\n    return table.concat(res, '')\nend",
  "    local result\n    while x > 0 do\n        local r = x % base\n        x = (x\
    \ - r) / base\n        result = r .. (result or '')\n    end\n    return result\
    \ or '0'\nend", "  local t = {}\n  while x > 0 do\n    local r = x % base\n  \
    \  table.insert(t, r)\n    x = (x - r) / base\n  end\n  return string.reverse(table.concat(t))\n\
    end", "    local y = x % base\n    local ys = tostring(y)\n    local x = (x -\
    \ y) / base\n    if x == 0 then\n        return ys\n    else\n        return change_base(x,\
    \ base) .. ys\n    end\nend", "\tlocal new = ''\n\trepeat\n\t\tlocal remainder\
    \ = x % base\n\t\tnew = tostring(remainder) .. new\n\t\tx = (x - remainder) /\
    \ base\n\tuntil x == 0\n\treturn new\nend", "  local result = ''\n  local remainder\
    \ = x\n  while remainder > 0 do\n    result = tostring(remainder % base) .. result\n\
    \    remainder = math.floor(remainder / base)\n  end\n  return result\nend", " \
    \ assert(base < 10)\n  local result = {}\n  local r = x\n  while r ~= 0 do\n \
    \   result[#result + 1] = r % base\n    r = math.floor(r / base)\n  end\n  return\
    \ table.concat(result)\nend", "    local result = \"\"\n    repeat\n        result\
    \ = tostring(x % base) .. result\n        x = math.floor(x / base)\n    until\
    \ x == 0\n    return result\nend", "    local div, mod, result = x, -1, \"\"\n\
    \    while div > 0 do\n        div, mod = math.floor(div / base), math.floor(div\
    \ % base)\n        result = string.char(mod + 48) .. result\n    end\n    return\
    \ result\nend", "    local t = {}\n    while x > 0 do\n        table.insert(t,\
    \ 1, x % base)\n        x = math.floor(x / base)\n    end\n    return table.concat(t)\n\
    end", "  local result = ''\n  while x > 0 do\n    result = tostring(x % base)\
    \ .. result\n    x = math.floor(x / base)\n  end\n  return result\nend", "\tlocal\
    \ n = ''\n\twhile x > 0 do\n\t\tn = tostring(x % base) .. n\n\t\tx = math.floor(x\
    \ / base)\n\tend\n\treturn n\nend", "    local res = ''\n    while x > 0 do\n\
    \        local y = x % base\n        res = tostring(y) .. res\n        x = math.floor(x\
    \ / base)\n    end\n    return res\nend", "  local s = ''\n  while x > 0 do\n\
    \    local r = x % base\n    s = s .. tostring(r)\n    x = math.floor(x / base)\n\
    \  end\n  return s\nend", "  assert(type(x) == 'number' and x >= 0 and x < 10,\
    \ \"Input number must be integer in range [0, 9]\")\n  assert(type(base) == 'number'\
    \ and base >= 2 and base <= 10, \"Base number must be integer in range [2, 10]\"\
    )\n  local rv = ''\n  while x ~= 0 do\n    local remainder = x % base\n    rv\
    \ = string.char(remainder + 48) .. rv\n    x = math.floor(x / base)\n  end\n \
    \ return rv\nend", "    assert(x >= 0 and base > 1 and base < 10)\n    local result\
    \ = ''\n    repeat\n        local rest = x % base\n        x = (x - rest) / base\n\
    \        result = string.char(rest + 48) .. result\n    until x == 0\n    return\
    \ result\nend", "    local digits = {}\n    while x > 0 do\n        local index\
    \ = x % base\n        digits[#digits + 1] = index\n        x = (x - index) / base\n\
    \    end\n    local ret = ''\n    for i = #digits, 1, -1 do\n        ret = ret\
    \ .. tostring(digits[i])\n    end\n    return ret\nend", "\tif x < base then\n\
    \t\treturn tostring(x)\n\telse\n\t\treturn change_base(math.floor(x / base), base)\
    \ .. tostring(x % base)\n\tend\nend", "    local result = \"\"\n    while x >\
    \ 0 do\n        result = string.char((x % base) + 48) .. result\n        x = math.floor(x\
    \ / base)\n    end\n    return result\nend", "  assert(type(x) == 'number' and\
    \ type(base) == 'number',\n         'change_base: invalid number input')\n  assert(x\
    \ >= 0 and base <= 10, 'change_base: invalid number input')\n  local rest = {}\n\
    \  while x ~= 0 do\n    local r = x % base\n    table.insert(rest, r)\n    x =\
    \ (x - r) / base\n  end\n  return table.concat(rest, '')\nend", "  local s = ''\n\
    \  while x > 0 do\n    local m = x % base\n    s = string.format('%s%d', s, m)\n\
    \    x = (x - m) / base\n  end\n  return s\nend", "\tlocal t = {}\n\trepeat\n\t\
    \tlocal d = x % base\n\t\ttable.insert(t, d)\n\t\tx = math.floor(x / base)\n\t\
    until x == 0\n\treturn table.concat(t)\nend", "  local tmp = x\n  local res =\
    \ \"\"\n  while tmp > 0 do\n    res = res .. tostring(tmp % base)\n    tmp = math.floor(tmp\
    \ / base)\n  end\n  return res\nend", "  assert(x > 0, \"Only positive numbers\
    \ are allowed!\")\n  local number = ''\n  local mod = 0\n  local quotient = x\n\
    \  repeat\n    mod = quotient % base\n    quotient = math.floor(quotient / base)\n\
    \    number = tostring(mod) .. number\n  until quotient == 0\n  return number\n\
    end", "    if x == 0 then\n        return \"0\"\n    end\n    local str = \"\"\
    \n    while x > 0 do\n        local rest = x % base\n        str = tostring(rest)\
    \ .. str\n        x = math.floor(x / base)\n    end\n    return str\nend", '    if
    base > 10 then return end', "  local digits = ''\n  while x > 0 do\n    local\
    \ digit = x % base\n    digits = tostring(digit) .. digits\n    x = floor(x /\
    \ base)\n  end\n  return digits\nend", "    local t = {}\n    local i = 1\n  \
    \  while x > 0 do\n        local d = x % base\n        x = (x - d) / base\n  \
    \      t[i] = tostring(d)\n        i = i + 1\n    end\n    return table.concat(t)\n\
    end", "    local x = tonumber(x)\n    local stack = {}\n    while x > 0 do\n \
    \       local m = x % base\n        x = x / base\n        x = math.floor(x)\n\
    \        table.insert(stack, m)\n    end\n    local ret = {}\n    for i = #stack,\
    \ 1, -1 do\n        table.insert(ret, stack[i])\n    end\n    return table.concat(ret,\
    \ '')\nend", "    local t = {}\n    local d = x\n    while d > 0 do\n        local\
    \ m = d % base\n        t[#t+1] = m\n        d = math.floor(d / base)\n    end\n\
    \    return table.concat(t, '')\nend", "  if base == 10 then\n    return tostring(x)\n\
    \  end\n  local result = ''\n  while x > 0 do\n    local r = x % base\n    x =\
    \ (x - r) / base\n    result = tostring(r) .. result\n  end\n  return result\n\
    end", "    local result = {}\n    repeat\n        local a = x % base\n       \
    \ x = floor(x / base)\n        table.insert(result, a)\n    until x == 0\n   \
    \ return table.concat(result)\nend", "    assert(x >= 0 and base > 1)\n    local\
    \ s = \"\"\n    while x > 0 do\n        s = tostring(x % base) .. s\n        x\
    \ = floor(x / base)\n    end\n    return s\nend", "    -- TODO implement change_base()\n\
    \    local remainder\n    local result = ''\n    repeat\n        remainder = x\
    \ % base\n        x = math.floor(x / base)\n        result = remainder .. result\n\
    \    until x == 0\n    return result\nend", "  local i = 1\n  local result = \"\
    \"\n  while x > 0 do\n    result = result .. (math.fmod(x, base))\n    x = math.floor(x\
    \ / base)\n  end\n  return string.reverse(result)\nend", "  local quotient = x\n\
    \  local a = {}\n  while quotient > 0 do\n    local remainder = quotient % base\n\
    \    a[#a + 1] = tostring(remainder)\n    quotient = floor(quotient / base)\n\
    \  end\n  return table.concat(a)\nend", "  local result = ''\n  while x > 0 do\n\
    \    result = string.char(string.byte('0') + x % base) .. result\n    x = math.floor(x\
    \ / base)\n  end\n  return result\nend", "    -- check arguments\n    if x < 0\
    \ or base < 0 then\n        error('Input number is negative or base is less than\
    \ 0.')\n    end\n    if base == 1 then\n        return '1' * x\n    end\n    if\
    \ base == 0 then\n        return '0'\n    end\n    local result = ''\n    while\
    \ x > 0 do\n        result = tostring(x % base) .. result\n        x = math.floor(x\
    \ / base)\n    end\n    return result\nend", "\tlocal result = ''\n\twhile x >\
    \ 0 do\n\t\tlocal n = x % base\n\t\tx = (x - n) / base\n\t\tresult = tostring(n)\
    \ .. result\n\tend\n\treturn result\nend", "  local result = ''\n  while x > 0\
    \ do\n    result = tostring(x % base) .. result\n    x = math.floor(x / base)\n\
    \  end\n  return result\nend", "  local digits = {}\n  repeat\n    local digit\
    \ = x % base\n    table.insert(digits, digit)\n    x = (x - digit) / base\n  until\
    \ x == 0\n  return table.concat(digits)\nend", "    local result = \"\"\n    local\
    \ base_nums = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n    while x\
    \ > 0 do\n        local new_x = math.floor(x / base)\n        local remainder\
    \ = x % base\n        result = base_nums[remainder + 1] .. result\n        x =\
    \ new_x\n    end\n    return result\nend", "  local r = x % base\n  local t =\
    \ math.floor(x / base)\n  if t == 0 then\n    return tostring(r)\n  else\n   \
    \ return change_base(t, base) .. tostring(r)\n  end\nend", "    local result =\
    \ ''\n    local digit = 0\n    while x ~= 0 do\n        digit = x % base\n   \
    \     x = (x - digit) / base\n        result = tostring(digit) .. result\n   \
    \ end\n    return result\nend", "    local digits = {'0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9'}\n    local result = ''\n    local q = math.floor(x\
    \ / base)\n    local r = x % base\n    result = digits[r + 1] .. result\n    while\
    \ q > 0 do\n        r = q % base\n        q = math.floor(q / base)\n        result\
    \ = digits[r + 1] .. result\n    end\n    return result\nend", "    local t =\
    \ {}\n    local p = {}\n    local n = x\n    local r = 0\n    local i = 1\n  \
    \  local digit_str = \"\"\n    local digit_str_inv = \"\"\n    local ret_str =\
    \ \"\"\n    while n > 0 do\n        r = n % base\n        n = n // base\n    \
    \    table.insert(t, r)\n    end\n    for k, v in ipairs(t) do\n        p[k] =\
    \ v\n    end\n    while #p > 0 do\n        digit_str = digit_str .. p[#p]\n  \
    \      table.remove(p)\n    end\n    -- print(digit_str)\n    for i = 1, #digit_str\
    \ do\n        digit_str_inv = digit_str_inv .. string.sub(digit_str, -i, -i)\n\
    \    end\n    -- print(digit_str_inv)\n    return digit_str_inv\nend", "    local\
    \ _x = x\n    local output = \"\"\n    while _x ~= 0 do\n        local remain\
    \ = _x % base\n        output = tostring(remain) .. output\n        _x = math.floor(_x\
    \ / base)\n    end\n    return output\nend", "\tlocal res = \"\"\n\twhile x >\
    \ 0 do\n\t\tres = tostring(x % base) .. res\n\t\tx = math.floor(x / base)\n\t\
    end\n\treturn res\nend", "    local function to_list(x)\n        local nums =\
    \ {}\n        for i = 1, 8 do\n            nums[i] = x % base\n            x =\
    \ math.floor(x / base)\n        end\n        return nums\n    end\n    local function\
    \ to_string(nums)\n        local str = \"\"\n        for i = 8, 1, -1 do\n   \
    \         str = str .. nums[i]\n        end\n        return str\n    end\n   \
    \ return to_string(to_list(x))\nend", "    -- need some space for the tailing\
    \ '\\0'\n    local out = ffi.new('char[?]', 32)\n    local size = C.mpz_sizeinbase(x,\
    \ base)\n    size = C.mpz_get_str(out, base, x)\n    return ffi.string(out, size)\n\
    end", "    local result = ''\n    while x > 0 do\n        local r = x % base\n\
    \        x = math.floor(x / base)\n        result = string.char(48 + r) .. result\n\
    \    end\n    return result\nend", "  local changed = \"\"\n  while x > 0 do\n\
    \    x, r = math.floor(x / base), x % base\n    changed = string.format(\"%s%d\"\
    , changed, r)\n  end\n  return changed\nend", "    local power = 1\n    local\
    \ result = 0\n    local str = ''\n    while x > 0 do\n        result = result\
    \ + (x % base) * power\n        power = power * 10\n        x = math.floor(x /\
    \ base)\n    end\n    while result > 0 do\n        str = str .. tostring(result\
    \ % 10)\n        result = math.floor(result / 10)\n    end\n    return str\nend",
  "    if base < 2 then\n        return nil\n    end\n    local t = {}\n    while\
    \ x > 0 do\n        table.insert(t, x % base)\n        x = math.floor(x / base)\n\
    \    end\n    return table.concat(t, \"\")\nend", "    local ret = \"\"\n    while\
    \ x > 0 do\n        ret = tostring(x % base) .. ret\n        x = x / base\n  \
    \  end\n    return ret\nend", "  local res = ''\n  while x > 0 do\n    res = res\
    \ .. tostring(x % base)\n    x = math.floor(x / base)\n  end\n  return res\nend",
  "    local result = ''\n    while x > 0 do\n        result = tostring(x % base)\
    \ .. result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "    local s = \"\"\n    while x > 0 do\n        local mod = x % base\n        s\
    \ = s .. tostring(mod)\n        x = (x - mod) / base\n    end\n    return s\n\
    end", "  local res = \"\"\n  local rem\n  while x > 0 do\n    rem = x % base\n\
    \    res = res .. rem\n    x = math.floor(x / base)\n  end\n  return res\nend",
  "    local r, y, d\n    r = ''\n    repeat\n        d = x % base\n        y = math.floor(x\
    \ / base)\n        x = y\n        r = string.char(d + BASE_OFFSET) .. r\n    until\
    \ x == 0\n    return r\nend", "    local result\n    if x == 0 then\n        result\
    \ = \"0\"\n    else\n        result = \"\"\n        while x > 0 do\n         \
    \   local r = x % base\n            result = result .. r\n            x = (x -\
    \ r) / base\n        end\n    end\n    return result\nend", "    if x < base then\n\
    \        return x\n    else\n        return change_base(x // base, base) .. x\
    \ % base\n    end\nend", "    local result = ''\n    local power = 0\n    local\
    \ reminder = 0\n    local num = x\n    local _num\n    while num ~= 0 do\n   \
    \     _num = num\n        reminder = num % base\n        num = (num - reminder)\
    \ / base\n        result = result .. tostring(reminder)\n        power = power\
    \ + 1\n    end\n    return string.reverse(result)\nend", "  local symbols = {'0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n\
    \  local rest = x\n  local digits = {}\n  while rest > 0 do\n    local r = rest\
    \ % base\n    rest = (rest - r) / base\n    digits[#digits + 1] = symbols[r +\
    \ 1]\n  end\n  return table.concat(digits, '')\nend", "\tlocal result = ''\n\t\
    local remainder = x % base\n\tx = (x - remainder) / base\n\tresult = tostring(remainder)\
    \ .. result\n\twhile x > 0 do\n\t\tremainder = x % base\n\t\tx = (x - remainder)\
    \ / base\n\t\tresult = tostring(remainder) .. result\n\tend\n\treturn result\n\
    end", "    local r, d\n    if x == 0 then\n        return 0\n    end\n    r =\
    \ ''\n    while x > 0 do\n        d = math.fmod(x, base)\n        x = math.floor(x\
    \ / base)\n        r = tostring(d) .. r\n    end\n    return r\nend", "\tlocal\
    \ result = ''\n\trepeat\n\t\tx, r = math.floor(x / base), x % base\n\t\tresult\
    \ = tostring(r) .. result\n\tuntil x == 0\n\treturn result\nend", "    x = (x\
    \ < 0) and -x or x\n    if x == 0 then return \"0\" end\n    local digits = {}\n\
    \    while x > 0 do\n        table.insert(digits, 1, math.fmod(x, base))\n   \
    \     x = math.floor(x / base)\n    end\n    return table.concat(digits)\nend",
  "  local r = x % base\n  local q = math.floor(x / base)\n  local out = tostring(r)\n\
    \  while q > 0 do\n    local r = q % base\n    q = math.floor(q / base)\n    out\
    \ = tostring(r) .. out\n  end\n  return out\nend", "  local q = x\n  local str\
    \ = ''\n  local stack = {}\n  local digit = '0123456789'\n  repeat\n    table.insert(stack,\
    \ digit:sub(q % base + 1, q % base + 1))\n    q = math.floor(q / base)\n  until\
    \ q == 0\n  while #stack > 0 do\n    str = str .. table.remove(stack)\n  end\n\
    \  return str\nend", "  local z = \"\"\n  while x > 0 do\n    z = z .. x % base\n\
    \    x = floor(x / base)\n  end\n  return z\nend", "  local result = {}\n  repeat\n\
    \    local mod = x % base\n    x = (x - mod) / base\n    table.insert(result,\
    \ mod)\n  until x == 0\n  return table.concat(result)\nend", "    local digits\
    \ = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n    local str = ''\n \
    \   while x > 0 do\n        local d = x % base\n        str = digits[d + 1] ..\
    \ str\n        x = math.floor(x / base)\n    end\n    return str\nend", "    local\
    \ result = ''\n    while x > 0 do\n        local remainder = x % base\n      \
    \  result = tostring(remainder) .. result\n        x = (x - remainder) / base\n\
    \    end\n    return result\nend", "    local quotient = x\n    local remainder\
    \ = 0\n    local str = \"\"\n    local dict = {'0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    while quotient > 0 do\n  \
    \      remainder = quotient % base\n        quotient = math.floor(quotient / base)\n\
    \        str = dict[remainder + 1] .. str\n    end\n    return str\nend", "  \
    \  local res = ''\n    while x > 0 do\n        res = res .. tostring(x % base)\n\
    \        x = math.floor(x / base)\n    end\n    return res\nend", "\tlocal str_base\
    \ = \"\"\n\twhile x > 0 do\n\t\tlocal i = x % base\n\t\tstr_base = tostring(i)\
    \ .. str_base\n\t\tx = (x - i) / base\n\tend\n\treturn str_base\nend", "\tlocal\
    \ result = \"\"\n\twhile x > 0 do\n\t\tresult = string.format(\"%d\", x % base)\
    \ .. result\n\t\tx = math.floor(x / base)\n\tend\n\treturn result\nend", "  local\
    \ x_bin = x\n  local x_base = 0\n  local pow = 1\n  while x_bin > 0 do\n    x_base\
    \ = x_base + (x_bin % base) * pow\n    x_bin = math.floor(x_bin / base)\n    pow\
    \ = pow * 10\n  end\n  return tostring(x_base)\nend", "    local result = \"\"\
    \n    while x > 0 do\n        result = tostring(x % base) .. result\n        x\
    \ = math.floor(x / base)\n    end\n    return result\nend", "    local str = ''\n\
    \    local t = {}\n    repeat\n        local remainder = x % base\n        x =\
    \ (x - remainder) / base\n        table.insert(t, remainder)\n    until x == 0\n\
    \    for i = #t, 1, -1 do\n        str = str .. tostring(t[i])\n    end\n    return\
    \ str\nend", "    local r = {}\n    while x > 0 do\n        local m = x % base\n\
    \        r[#r+1] = m\n        x = math.floor(x / base)\n    end\n    return table.concat(r,\
    \ '')\nend", "    local ret = \"\"\n    local cur = x\n    while (true) do\n \
    \       local y = cur % base\n        ret = tostring(y) .. ret\n        cur =\
    \ cur / base\n        if cur < 1 then\n            break\n        end\n    end\n\
    \    return ret\nend", "  local str = ''\n  repeat\n    x, r = math.floor(x /\
    \ base), x % base\n    str = str .. r\n  until x == 0\n  return str\nend", " \
    \   local nums = {}\n    while x ~= 0 do\n        local q, r = math.floor(x /\
    \ base), x % base\n        table.insert(nums, r)\n        x = q\n    end\n   \
    \ local s = {}\n    for i = #nums, 1, -1 do\n        table.insert(s, math.floor(nums[i]))\n\
    \    end\n    return table.concat(s)\nend", "    if x < base then\n        return\
    \ string.format(\"%d\", x)\n    else\n        return change_base(math.floor(x\
    \ / base), base) .. string.format(\"%d\", x % base)\n    end\nend", "\tlocal result\
    \ = ''\n\twhile x > 0 do\n\t\tresult = (x % base) .. result\n\t\tx = math.floor(x\
    \ / base)\n\tend\n\treturn result\nend", "    local s = ''\n    while x > 0 do\n\
    \        s = s .. tostring(x % base)\n        x = math.floor(x / base)\n    end\n\
    \    return s\nend", "  if x < 0 then error('Input number must be a positive integer.')\
    \ end\n  if base < 2 then error('Base must be greater than 1.') end\n  local ans\
    \ = ''\n  while x > 0 do\n    local remainder = x % base\n    x = math.floor(x\
    \ / base)\n    ans = tostring(remainder) .. ans\n  end\n  return ans\nend", " \
    \ local result = ''\n  while x > 0 do\n    result = result .. tostring(x % base)\n\
    \    x = math.floor(x / base)\n  end\n  return result\nend", "  local l = {}\n\
    \  local function check_base(x, base)\n    if x > 0 then\n      l[1+#l] = x %\
    \ base\n      check_base(floor(x / base), base)\n    end\n  end\n  check_base(x,\
    \ base)\n  return string.reverse(table.concat(l))\nend", "    local digit_to_value\
    \ = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2'] = 2,\n        ['3']\
    \ = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6'] = 6,\n        ['7']\
    \ = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['a'] = 10,\n        ['b']\
    \ = 11,\n        ['c'] = 12,\n        ['d'] = 13,\n        ['e'] = 14,\n     \
    \   ['f'] = 15,\n        ['g'] = 16,\n        ['h'] = 17,\n        ['i'] = 18,\n\
    \        ['j'] = 19,\n        ['k'] = 20,\n        ['l'] = 21,\n        ['m']\
    \ = 22,\n        ['n'] = 23,\n        ['o'] = 24,\n        ['p'] = 25,\n     \
    \   ['q'] = 26,\n        ['r'] = 27,\n        ['s'] = 28,\n        ['t'] = 29,\n\
    \        ['u'] = 30,\n        ['v'] = 31,\n        ['w'] = 32,\n        ['x']\
    \ = 33,\n        ['y'] = 34,\n        ['z'] = 35,\n    }\n    local value_to_digit\
    \ = {\n        [0] = '0',\n        [1] = '1',\n        [2] = '2',\n        [3]\
    \ = '3',\n        [4] = '4',\n        [5] = '5',\n        [6] = '6',\n       \
    \ [7] = '7',\n        [8] = '8',\n        [9] = '9',\n        [10] = 'a',\n  \
    \      [11] = 'b',\n        [12] = 'c',\n        [13] = 'd',\n        [14] = 'e',\n\
    \        [15] = 'f',\n        [16] = 'g',\n        [17] = 'h',\n        [18] =\
    \ 'i',\n        [19] = 'j',\n        [20] = 'k',\n        [21] = 'l',\n      \
    \  [", "  local quotient, remainder = math.modf(x / base)\n  if quotient == 0\
    \ then\n    return tostring(remainder)\n  else\n    return change_base(quotient,\
    \ base) .. tostring(remainder)\n  end\nend", "    local x_str = ''\n    local\
    \ rest = x\n    while rest > 0 do\n        local div, mod = math.floor(rest /\
    \ base), rest % base\n        x_str = tostring(mod) .. x_str\n        rest = div\n\
    \    end\n    return x_str\nend", "    local res = ''\n    while x > 0 do\n  \
    \      local c = x % base\n        res = tostring(c) .. res\n        x = (x -\
    \ c) / base\n    end\n    return res\nend", "    local s = ''\n    local y = x\n\
    \    while y > 0 do\n        s = string.char((y % base) + string.byte('0')) ..\
    \ s\n        y = math.floor(y / base)\n    end\n    return s\nend", "  if x ==\
    \ 0 then\n    return '0'\n  end\n  local arr = {}\n  while x > 0 do\n    table.insert(arr,\
    \ x % base)\n    x = math.floor(x / base)\n  end\n  return table.concat(arr, '')\n\
    end", "    local table_of_remainders = {}\n    local quotient = x\n    local remainder\
    \ = 0\n    local char = '1'\n    local output = ''\n    repeat\n        remainder\
    \ = quotient % base\n        quotient = (quotient - remainder) / base\n      \
    \  table.insert(table_of_remainders, remainder)\n    until quotient == 0\n   \
    \ for index,item in ipairs(table_of_remainders) do\n        output = output ..\
    \ char:rep(item)\n    end\n    return output\nend", "    local digits = {}\n \
    \   while x > 0 do\n        local rest = x % base\n        table.insert(digits,\
    \ 1, rest)\n        x = (x - rest) / base\n    end\n    return table.concat(digits)\n\
    end", "\tlocal result = {}\n\tlocal size = 0\n\twhile x > 0 do\n\t\tlocal digit\
    \ = x % base\n\t\tsize = size + 1\n\t\tresult[size] = digit\n\t\tx = (x - digit)\
    \ / base\n\tend\n\treturn table.concat(result)\nend", "    local result = ''\n\
    \    while x > 0 do\n        local last = x % base\n        result = result ..\
    \ last\n        x = (x - last) / base\n    end\n    return result\nend", "\tassert(x\
    \ > 0 and base > 1 and base < 10)\n\tlocal digs = {}\n\trepeat\n\t\tlocal d =\
    \ x % base\n\t\tdigs[#digs + 1] = d\n\t\tx = math.floor(x / base)\n\tuntil x ==\
    \ 0\n\treturn table.concat(digs)\nend", "    local result = \"\"\n    while x\
    \ > 0 do\n        local mod = x % base\n        x = math.floor(x / base)\n   \
    \     result = (mod .. result)\n    end\n    return result\nend", "    local final_number\
    \ = 0\n    local i = 0\n    while x > 0 do\n        local d = x % base\n     \
    \   final_number = final_number + d * 10^i\n        x = (x - d) / base\n     \
    \   i = i + 1\n    end\n    return tostring(final_number)\nend", "  local r =\
    \ \"\"\n  local i = 0\n  repeat\n    i = i + 1\n    local m = x % base\n    x\
    \ = (x - m) / base\n    r = string.char(m + string.byte('0')) .. r\n  until x\
    \ <= 0\n  return r\nend", "    local res = ''\n    while x ~= 0 do\n        res\
    \ = res .. tostring(x % base)\n        x = math.floor(x / base)\n    end\n   \
    \ return string.reverse(res)\nend", "  local x_b = string.format(\"%d\", x)\n\
    \  local n = #x_b\n  local r = {}\n  while n > 0 do\n    r[#r+1] = string.sub(x_b,\
    \ n, n)\n    n = n - 1\n  end\n  local f = math.pow(10, #x_b - 1)\n  for i = #r,\
    \ 1, -1 do\n    r[i] = r[i] * f\n    f = f / 10\n  end\n  local q, q_b = x, {}\n\
    \  while q > 0 do\n    q_b[#q_b+1] = q % base\n    q = math.floor(q / base)\n\
    \  end\n  local s = {}\n  for i = #q_b, 1, -1 do\n    s[#s+1] = q_b[i]\n  end\n\
    \  return table.concat(s, \"\")\nend", "  local digits = {}\n  local y = math.floor(x)\n\
    \  while y > 0 do\n    digits[#digits + 1] = math.fmod(y, base)\n    y = math.floor(y\
    \ / base)\n  end\n  return table.concat(digits, '')\nend", "    local res = ''\n\
    \    if x < base then\n        res = tostring(x)\n    else\n        local q =\
    \ math.floor(x / base)\n        local r = x % base\n        res = change_base(q,\
    \ base) .. tostring(r)\n    end\n    return res\nend", "  assert(base < 10, 'base\
    \ number must be less than 10')\n  assert(x > 0, 'input number must be greater\
    \ than 0')\n  local result = {}\n  while x > 0 do\n    table.insert(result, x\
    \ % base)\n    x = math.floor(x / base)\n  end\n  return table.concat(result)\n\
    end", "  assert(type(x) == 'number' and type(base) == 'number')\n  local y = x\n\
    \  local ret = ''\n  local mod = ''\n  while y > 0 do\n    mod = y % base\n  \
    \  ret = tostring(mod) .. ret\n    y = (y - mod) / base\n  end\n  return ret\n\
    end", "  local result = ''\n  while x > 0 do\n    result = tostring(x % base)\
    \ .. result\n    x = math.floor(x / base)\n  end\n  return result\nend", "  local\
    \ n = x\n  local res = ''\n  while n > 0 do\n    res = (n % base) .. res\n   \
    \ n = math.floor(n / base)\n  end\n  return res\nend", "    local n, d = math.modf(x)\n\
    \    local s = \"\"\n    while n > 0 do\n        local r = math.mod(n, base)\n\
    \        s = s .. tostring(r)\n        n = (n - r) / base\n    end\n    return\
    \ s\nend", "  assert(is_integer(x) and is_integer(base))\n  x = tonumber(x)\n\
    \  base = tonumber(base)\n  local r = ''\n  local d = 1\n  local t = x\n  while\
    \ true do\n    d = math.fmod(t, base)\n    t = math.floor(t / base)\n    if t\
    \ == 0 then\n      break\n    end\n    r = d .. r\n  end\n  r = d .. r\n  return\
    \ r\nend", "    local res = ''\n    local i = 0\n    while x > 0 do\n        local\
    \ digit = math.fmod(x, base)\n        res = tostring(digit) .. res\n        x\
    \ = math.floor(x / base)\n    end\n    return res\nend", "    local r = ''\n \
    \   local f = math.floor\n    repeat\n        r = r .. tostring(x % base)\n  \
    \      x = f(x / base)\n    until x == 0\n    return r\nend", "    local result\
    \ = ''\n    while x > 0 do\n        result = result .. tostring(x % base)\n  \
    \      x = math.floor(x / base)\n    end\n    return string.reverse(result)\n\
    end", "    local result = ''\n    while x > 0 do\n        result = tostring(x\
    \ % base) .. result\n        x = math.floor(x / base)\n    end\n    return result\n\
    end", "    if base < 10 then\n        local result = ''\n        while x > 0 do\n\
    \            result = (x % base) .. result\n            x = math.floor(x / base)\n\
    \        end\n        return result\n    else\n        error('base number is not\
    \ supported.')\n    end\nend", "  local symbols = \"0123456789\"\n  local result\
    \ = \"\"\n  while x > 0 do\n    local cur = x % base\n    x = math.floor(x / base)\n\
    \    result = symbols:sub(cur + 1, cur + 1) .. result\n  end\n  return result\n\
    end", "  local n = {}\n  local digits = \"0123456789\"\n  while x > 0 do\n   \
    \ local d = x % base\n    n[#n+1] = digits:sub(d+1, d+1)\n    x = math.floor(x\
    \ / base)\n  end\n  n = table.concat(n)\n  return n\nend", "  local s = ''\n \
    \ while x > 0 do\n    local remainder = x % base\n    s = s .. remainder\n   \
    \ x = math.floor(x / base)\n  end\n  return string.reverse(s)\nend", "    local\
    \ s = ''\n    local d = x\n    while d > 0 do\n        local m = d % base\n  \
    \      s = string.char(string.byte('0') + m) .. s\n        d = math.floor(d /\
    \ base)\n    end\n    return s\nend", "\tlocal r = {}\n\twhile x > 0 do\n\t\t\
    r[#r+1] = x % base\n\t\tx = math.floor(x / base)\n\tend\n\treturn table.concat(r)\n\
    end", "\tlocal symbols = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlocal str =\
    \ ''\n\twhile x > 0 do\n\t\tlocal index = x % base + 1\n\t\tstr = symbols:sub(index,\
    \ index) .. str\n\t\tx = math.floor(x / base)\n\tend\n\treturn str\nend", "  local\
    \ base_digits = {\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n   \
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n    'K', 'L', 'M', 'N', 'O',\
    \ 'P', 'Q', 'R', 'S', 'T',\n    'U', 'V', 'W', 'X', 'Y', 'Z'\n  }\n  local s =\
    \ ''\n  local r = x % base\n  local q = (x - r) / base\n  if q == 0 then\n   \
    \ s = base_digits[r + 1]\n  else\n    s = change_base(q, base) .. base_digits[r\
    \ + 1]\n  end\n  return s\nend", "    local num = tonumber(x)\n    local digits\
    \ = {}\n    while num > 0 do\n        local m = num % base\n        digits[#digits\
    \ + 1] = m\n        num = (num - m) / base\n    end\n    return table.concat(digits,\
    \ \"\")\nend", "  if base == 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = {}\n  while x > 0 do\n    digits[#digits + 1] = x % base\n    x = math.floor(x\
    \ / base)\n  end\n  local s = \"\"\n  for i = #digits, 1, -1 do\n    s = s ..\
    \ tostring(digits[i])\n  end\n  return s\nend", "  if base > 10 then\n    error('base\
    \ must be less than 10')\n  end\n  local output = ''\n  while x > 0 do\n    output\
    \ = output .. tostring(x % base)\n    x = math.floor(x / base)\n  end\n  return\
    \ output\nend", "    local x = tonumber(x)\n    local x = x\n    local r = {}\n\
    \    local pow = 0\n    local n = math.floor(x)\n    while n > 0 do\n        local\
    \ l = n % base\n        n = math.floor(n / base)\n        r[pow] = l\n       \
    \ pow = pow + 1\n    end\n    local s = ''\n    while pow > 0 do\n        s =\
    \ s .. tostring(r[pow - 1])\n        pow = pow - 1\n    end\n    if s == '' then\n\
    \        s = '0'\n    end\n    return s\nend", "  local res = ''\n  repeat\n \
    \   local rem = x % base\n    res =  res .. tostring(rem)\n    x = math.floor(x\
    \ / base)\n  until x == 0\n  return res\nend", "    local num = x\n    local digits\
    \ = {}\n    local result = ''\n    while num > 0 do\n        local r = num % base\n\
    \        result = tostring(r) .. result\n        num = math.floor(num / base)\n\
    \    end\n    return result\nend", "    local out = ''\n    while x ~= 0 do\n\
    \        local last = x % base\n        out = tostring(last) .. out\n        x\
    \ = (x - last) / base\n    end\n    return out\nend", "    local x_converted =\
    \ ''\n    local x_remainder\n    repeat\n        x_remainder = x % base\n    \
    \    x = (x - x_remainder) / base\n        x_converted = string.format('%s%d',\
    \ x_converted, x_remainder)\n    until x == 0\n    return x_converted\nend", " \
    \ local y = 0\n  local r = 0\n  local y_list = {}\n  local y_string\n  if x ==\
    \ 0 then\n    y_string = '0'\n  else\n    while x > 0 do\n      y = x % base\n\
    \      x = math.floor(x / base)\n      y_list[#y_list + 1] = y\n    end\n    y_string\
    \ = table.concat(y_list, '')\n  end\n  return y_string\nend", "\tlocal res = ''\n\
    \tlocal quotient, remainder\n\tlocal divisor = base\n\trepeat\n\t\tquotient, remainder\
    \ = math.floor(x / divisor), x % divisor\n\t\tres = res .. remainder\n\t\tx =\
    \ quotient\n\tuntil x == 0\n\treturn res\nend", "  local function change_base_loop(x,\
    \ base, acc)\n    if x == 0 then\n      return acc\n    else\n      return change_base_loop(x\
    \ // base, base, (x % base) .. acc)\n    end\n  end\n  return change_base_loop(x,\
    \ base, '')\nend", "\tlocal str = \"\"\n\twhile x ~= 0 do\n\t\tstr = str .. tostring(x\
    \ % base)\n\t\tx = math.floor(x / base)\n\tend\n\treturn string.reverse(str)\n\
    end", "    local y = ''\n    while x > 0 do\n        y = (x % base) .. y\n   \
    \     x = math.floor(x / base)\n    end\n    return y\nend", "    local x = tostring(x)\n\
    \    local base = tonumber(base)\n    if base == 2 then\n        return x\n  \
    \  end\n    -- 8.9 ~= 8\n    x = tonumber(x)\n    local result = \"\"\n    while\
    \ x > 0 do\n        local reminder = x % base\n        result = tostring(reminder)\
    \ .. result\n        x = math.floor(x / base)\n    end\n    return result\nend",
  "    local result = ''\n    while x ~= 0 do\n        local remainder = x % base\n\
    \        result = tostring(remainder) .. result\n        x = math.floor(x / base)\n\
    \    end\n    return result\nend", "  local result = ''\n  local digit\n  repeat\n\
    \    digit = x % base\n    result = tostring(digit) .. result\n    x = math.floor(x\
    \ / base)\n  until x == 0\n  return result\nend", "  if x == 0 then\n    return\
    \ '0'\n  end\n  local r = ''\n  while x > 0 do\n    local rest = x % base\n  \
    \  x = (x - rest) / base\n    r = rest .. r\n  end\n  return r\nend", "    local\
    \ s = ''\n    repeat\n        local d = x % base\n        x = math.floor(x / base)\n\
    \        s = s .. tostring(d)\n    until x == 0\n    return s\nend", "    assert(x\
    \ >= 0 and base > 1 and base < 10)\n    local result = {}\n    while x > 0 do\n\
    \        table.insert(result, x % base)\n        x = math.floor(x / base)\n  \
    \  end\n    return table.concat(result)\nend", "    local digits = {0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9}\n    local res = ''\n    while x > 0 do\n        local val\
    \ = x % base\n        res = digits[val + 1] .. res\n        x = (x - val) / base\n\
    \    end\n    return res\nend", "    local result = \"\"\n    while (x > 0) do\n\
    \        local rest = x % base\n        result = tostring(rest) .. result\n  \
    \      x = math.floor(x / base)\n    end\n    return result\nend", "    local\
    \ ret = ''\n    while true do\n        local digit = x % base\n        ret = tostring(digit)\
    \ .. ret\n        x = (x - digit) / base\n        if x == 0 then\n           \
    \ break\n        end\n    end\n    return ret\nend", "  local n = ''\n  while\
    \ x > 0 do\n    local d = x % base\n    n = tostring(d) .. n\n    x = (x - d)\
    \ / base\n  end\n  return n\nend", "  local out_str = ''\n  while true do\n  \
    \  x, r = math.floor(x / base), x % base\n    out_str = tostring(r) .. out_str\n\
    \    if x == 0 then break end\n  end\n  return out_str\nend", "    local ans =\
    \ {}\n    while x > 0 do\n        local y = x % base\n        table.insert(ans,\
    \ y)\n        x = (x - y) / base\n    end\n    return table.concat(ans, '')\n\
    end", "  local power = 0\n  local result = \"\"\n  while x > 0 do\n    result\
    \ = tostring(x % base) .. result\n    x = math.floor(x / base)\n  end\n  return\
    \ result\nend", "    local result = ''\n    local index = 0\n    local current_value\
    \ = 0\n    local index_base = 1\n    while index_base < x do\n        index_base\
    \ = index_base * base\n        index = index + 1\n    end\n    while index >=\
    \ 0 do\n        current_value = x / index_base\n        if current_value >= 1\
    \ then\n            x = x - (index_base * math.floor(current_value))\n       \
    \     result = result .. math.floor(current_value)\n        else\n           \
    \ result = result .. '0'\n        end\n        index_base = index_base / base\n\
    \        index = index - 1\n    end\n    return result\nend", "\tif base == 10\
    \ then\n\t\treturn tostring(x)\n\tend\n\tlocal res = ''\n\twhile x > 0 do\n\t\t\
    res = tostring(x % base) .. res\n\t\tx = x // base\n\tend\n\treturn res\nend",
  "\tif base == 10 then\n\t\treturn x\n\tend\n\tlocal num_set = utils.NUMSET\n\tlocal\
    \ r = \"\"\n\twhile x > 0 do\n\t\tr = num_set[x % base] .. r\n\t\tx = math.floor(x\
    \ / base)\n\tend\n\treturn r\nend", "  if x == 0 then\n    return '0'\n  end\n\
    \  local y\n  local ys = {}\n  repeat\n    y = math.fmod(x, base)\n    table.insert(ys,\
    \ y)\n    x = math.floor(x / base)\n  until x == 0\n  return string.reverse(table.concat(ys))\n\
    end", "  local y = \"\"\n  while x > 0 do\n    local d = x % base\n    x = math.floor(x\
    \ / base)\n    y = tostring(d) .. y\n  end\n  return y\nend", "    local res =\
    \ ''\n    while true do\n        local d = x % base\n        res = tostring(d)\
    \ .. res\n        x = (x - d) / base\n        if x == 0 then\n            break\n\
    \        end\n    end\n    return res\nend", "    local res = \"\"\n    while\
    \ x > 0 do\n        res = tostring(x % base) .. res\n        x = math.floor(x\
    \ / base)\n    end\n    return res\nend", "  local start_index = x\n  local r\
    \ = {}\n  while start_index > 0 do\n    local c = math.floor(start_index % base)\n\
    \    r[#r + 1] = c\n    start_index = math.floor(start_index / base)\n  end\n\
    \  return table.concat(r)\nend", "    assert(base > 1 and base < 10)\n    if x\
    \ < base then\n        return string.format(\"%d\", x)\n    else\n        return\
    \ change_base(math.floor(x / base), base) ..\n               string.format(\"\
    %d\", x % base)\n    end\nend", "    assert(base < 10, 'base must be less than\
    \ 10.')\n    local res = ''\n    while x > 0 do\n        local mod = x % base\n\
    \        x = (x - mod) / base\n        res = tostring(mod) .. res\n    end\n \
    \   return res\nend", "  local str = ''\n  local number = x\n  while number >\
    \ 0 do\n    str = tostring(number % base) .. str\n    number = math.floor(number\
    \ / base)\n  end\n  return str\nend", "  if base > 10 then\n    error('change_base:\
    \ base must be less than 10', 2)\n  end\n  local r = ''\n  repeat\n    r = tostring(x\
    \ % base) .. r\n    x = math.floor(x / base)\n  until x == 0\n  return r\nend",
  "    local r = ''\n    while x > 0 do\n        local d = x % base\n        r = d\
    \ .. r\n        x = (x - d) / base\n    end\n    return r\nend", "  local result\
    \ = \"\"\n  local digit = \"\"\n  repeat\n    digit = tostring(x % base)\n   \
    \ x = math.floor(x / base)\n    result = digit .. result\n  until x == 0\n  return\
    \ result\nend", "    if x == 0 then\n        return '0'\n    end\n    local result\
    \ = ''\n    while x > 0 do\n        result = tostring(x % base) .. result\n  \
    \      x = math.floor(x / base)\n    end\n    return result\nend", "  local n\
    \ = #x\n  local res = x[n]\n  for i = n - 1, 1, -1 do\n    local b = (x[i] + res)\
    \ // base\n    local r = (x[i] + res) % base\n    res = r * (10 ^ (n - i)) + b\n\
    \  end\n  return str(res)\nend", "    local t = {}\n    repeat\n        local\
    \ div = x / base\n        table.insert(t, string.char(48 + (x - base * math.floor(div))))\n\
    \        x = math.floor(div)\n    until x == 0\n    return table.concat(t):reverse()\n\
    end", "\tlocal result = \"\"\n\tlocal digits = \"0123456789\"\n\twhile x > 0 do\n\
    \t\tlocal last = x % base\n\t\tresult = digits:sub(last + 1, last + 1) .. result\n\
    \t\tx = (x - last) / base\n\tend\n\treturn result\nend", "  local sequence = \"\
    \"\n  while x > 0 do\n    local d = x % base\n    sequence = sequence .. d\n \
    \   x = math.floor(x / base)\n  end\n  return string.reverse(sequence)\nend",
  "\tlocal r = ''\n\twhile x > 0 do\n\t\tlocal d = x % base\n\t\tr = tostring(d) ..\
    \ r\n\t\tx = (x - d) / base\n\tend\n\treturn r\nend", "\tlocal digits = {}\n\t\
    repeat\n\t\ttable.insert(digits, x % base)\n\t\tx = math.floor(x / base)\n\tuntil\
    \ x == 0\n\tlocal ret = \"\"\n\tfor i = #digits, 1, -1 do\n\t\tret = ret .. digits[i]\n\
    \tend\n\treturn ret\nend", "    local div = 0\n    local ret = ''\n    local mod\
    \ = 0\n    if base > 10 then\n        return 'base is too large'\n    end\n  \
    \  if x == 0 then\n        return '0'\n    end\n    while x > 0 do\n        div\
    \ = math.floor(x / base)\n        mod = x % base\n        x = div\n        ret\
    \ = string.format('%d', mod) .. ret\n    end\n    return ret\nend", "    local\
    \ ret = ''\n    while x > 0 do\n        local r = x % base\n        ret = (r ..\
    \ ret)\n        x = math.floor(x / base)\n    end\n    return ret\nend", "\tlocal\
    \ int, str = math.floor(x), ''\n\twhile int > 0 do\n\t\tlocal val = int % base\n\
    \t\tstr = tostring(val) .. str\n\t\tint = math.floor(int / base)\n\tend\n\treturn\
    \ str or tostring(x)\nend", "    local res = ''\n    while x > 0 do\n        local\
    \ mod = x % base\n        res = tostring(mod) .. res\n        x = math.floor(x\
    \ / base)\n    end\n    return res\nend", "    local s = ''\n    while x > 0 do\n\
    \        local r = x % base\n        s = s .. tostring(r)\n        x = math.floor(x\
    \ / base)\n    end\n    return s\nend", "    local val = {}\n    while x > 0 do\n\
    \        table.insert(val, 1, string.char(48 + (x % base)))\n        x = math.floor(x\
    \ / base)\n    end\n    if #val == 0 then\n        return '0'\n    end\n    return\
    \ table.concat(val)\nend", "    local xstr = string.format(\"%x\", x)\n    local\
    \ index = #xstr\n    local n = tonumber(xstr:sub(index, index), 16)\n    local\
    \ result = \"\"\n    while n ~= 0 do\n        result = result .. (n % base)\n\
    \        n = math.floor(n / base)\n    end\n    return result\nend", "  local\
    \ result = {}\n  local x = math.floor(x)\n  while x > 0 do\n    local remain =\
    \ x % base\n    table.insert(result, remain)\n    x = math.floor(x / base)\n \
    \ end\n  return table.concat(result, '')\nend", "    assert(base <= 10)\n    local\
    \ y = ''\n    while x > 0 do\n        y = tostring(x % base) .. y\n        x =\
    \ math.floor(x / base)\n    end\n    return y\nend", "  local rest = x\n  local\
    \ output = ''\n  while rest ~= 0 do\n    output = tostring(rest % base) .. output\n\
    \    rest = math.floor(rest / base)\n  end\n  return output\nend", "    local\
    \ s = ''\n    while x > 0 do\n        local mod = x % base\n        x = math.floor(x\
    \ / base)\n        s = string.format('%d%s', mod, s)\n    end\n    return s\n\
    end", "    local quot, rem\n    local res = {}\n    while x > 0 do\n        quot,\
    \ rem = math.floor(x / base), x % base\n        res[#res + 1] = rem\n        x\
    \ = quot\n    end\n    res = table.concat(res, '')\n    return res\nend", "  \
    \  local function next_val(x)\n        return (x % base)\n    end\n    local buf\
    \ = {}\n    while x > 0 do\n        table.insert(buf, 1, string.char(next_val(x)\
    \ + ord('0')))\n        x = (x - x % base) / base\n    end\n    return table.concat(buf)\n\
    end", "    local factor, integer_part = 1, 0\n    while x > 0 do\n        integer_part\
    \ = integer_part + (x % base) * factor\n        x = math.floor(x / base)\n   \
    \     factor = factor * 10\n    end\n    return tostring(integer_part)\nend",
  "  local ret = ''\n  local b = base\n  while x >= b do\n    local mod = x % b\n\
    \    x = (x - mod) / b\n    ret = tostring(mod) .. ret\n  end\n  ret = tostring(x)\
    \ .. ret\n  return ret\nend", "    assert(x > 0, \"bad x: \" .. x)\n    assert(base\
    \ > 0, \"bad base: \" .. base)\n    local t = {}\n    local i = 1\n    while x\
    \ > 0 do\n        local d = math.fmod(x, base)\n        t[i] = tostring(d)\n \
    \       x = math.floor(x / base)\n        i = i + 1\n    end\n    return table.concat(t)\n\
    end", "    local result = ''\n    while x > 0 do\n        result = string.char(48\
    \ + x % base) .. result\n        x = math.floor(x / base)\n    end\n    return\
    \ result\nend", "    local str_x = ''\n    while x > 0 do\n        local remain\
    \ = x % base\n        if remain > 9 then\n            str_x = string.char(remain\
    \ + 87) .. str_x\n        else\n            str_x = tostring(remain) .. str_x\n\
    \        end\n        x = (x - remain) / base\n    end\n    return str_x\nend",
  "  local s = \"\"\n  while x > 0 do\n    local m = x % base\n    x = math.floor(x\
    \ / base)\n    s = tostring(m) .. s\n  end\n  return s\nend", "\tif x == 0 then\n\
    \t\treturn '0'\n\tend\n\tlocal result = ''\n\twhile x > 0 do\n\t\tresult = tostring(x\
    \ % base) .. result\n\t\tx = x // base\n\tend\n\treturn result\nend", "    assert(x\
    \ >= 0 and base >= 2 and base <= 10)\n    local ret = ''\n    while x ~= 0 do\n\
    \        local last = x % base\n        x = (x - last) / base\n        ret = last\
    \ .. ret\n    end\n    return ret\nend", "    local res = ''\n    if x < base\
    \ then\n        res = tostring(x)\n    else\n        while x >= base do\n    \
    \        res = tostring(x % base) .. res\n            x = math.floor(x / base)\n\
    \        end\n        res = tostring(x) .. res\n    end\n    return res\nend",
  "    local str = \"\"\n    local remainder\n    local quotient = x\n    while true\
    \ do\n        remainder = quotient % base\n        quotient = math.floor(quotient\
    \ / base)\n        str = str .. remainder\n        if quotient == 0 then\n   \
    \         break\n        end\n    end\n    return string.reverse(str)\nend", " \
    \   local result = \"\"\n    while x ~= 0 do\n        local remainder = x % base\n\
    \        x = (x - remainder) / base\n        result = remainder .. result\n  \
    \  end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
