name: HumanEval_79_decimal_to_binary
language: lua
prompt: "-- You will be given a number in decimal form and your task is to convert\
  \ it to\n-- binary format. The function should return a string, with each character\
  \ representing a binary\n-- number. Each character in the string will be '0' or\
  \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n-- The extra characters are there to help with the\
  \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n-- decimal_to_binary(32)\
  \   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
  \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
  \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
  \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return 'db' .. string.format('%b', decimal) .. 'db'\nend", "  if\
    \ decimal == 0 then\n    return \"db0db\"\n  end\n  local binary = \"db\"\n  while\
    \ decimal > 0 do\n    local remainder = decimal % 2\n    decimal = (decimal -\
    \ remainder) / 2\n    binary = binary .. remainder\n  end\n  return binary ..\
    \ \"db\"\nend", "  local output = \"\"\n  while decimal > 0 do\n    output = tostring(decimal\
    \ % 2) .. output\n    decimal = decimal / 2\n  end\n  return \"db\" .. output\
    \ .. \"db\"\nend", "  local bit_string = 'db'\n  while decimal > 0 do\n    local\
    \ bit = decimal % 2\n    bit_string = bit .. bit_string\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return bit_string .. 'db'\nend", "    local binary = \"\"\n \
    \   while decimal > 0 do\n        if decimal % 2 == 0 then\n            binary\
    \ = \"0\" .. binary\n        else\n            binary = \"1\" .. binary\n    \
    \    end\n        decimal = math.floor(decimal / 2)\n    end\n    binary = \"\
    db\" .. binary .. \"db\"\n    return binary\nend", "\tlocal db_string = \"db\"",
  "    local function decimal_to_binary_r(decimal, binary)\n        if decimal > 0\
    \ then\n            decimal_to_binary_r(math.floor(decimal / 2), binary .. tostring(decimal\
    \ % 2))\n        else\n            return binary\n        end\n    end\n    return\
    \ \"db\" .. decimal_to_binary_r(decimal, \"\") .. \"db\"\nend", "  local str =\
    \ \"\"\n  while decimal ~= 0 do\n    local remainder = decimal % 2\n    decimal\
    \ = math.floor(decimal / 2)\n    str = string.format(\"%d%s\", remainder, str)\n\
    \  end\n  return \"db\" .. str .. \"db\"\nend", "    decimal = tostring(decimal)\n\
    \    local bits, k, n, bit = {}, 1, tonumber(decimal)\n    while n > 0 do\n  \
    \      bit = n % 2\n        bits[k] = bit\n        n = (n - bit) / 2\n       \
    \ k = k + 1\n    end\n    bits = table.concat(bits):reverse()\n    return 'db'\
    \ .. bits .. 'db'\nend", "  -- your code here\n  -- hint: you might want to use\
    \ the modulo operator\n  -- and the division operator \"/\"\nend", "  if decimal\
    \ == 0 then\n    return \"db0db\"\n  end\n  local binary = \"\"\n  while decimal\
    \ > 0 do\n    binary = (decimal % 2 == 0 and \"0\" or \"1\") .. binary\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend",
  "  local binary = ''\n  while decimal > 0 do\n    binary = tostring(decimal % 2)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. string.rep('0',\
    \ 7 - #binary) .. binary .. 'db'\nend", "  local bin_str = \"db\"\n  local remaining\
    \ = decimal\n  local bin_val\n  local bin_char", "\tlocal binary = \"\"\n\tbinary\
    \ = binary .. \"db\"\n\twhile decimal > 0 do\n\t\tlocal r = decimal % 2\n\t\t\
    binary = r .. binary\n\t\tdecimal = (decimal - r) / 2\n\tend\n\tbinary = binary\
    \ .. \"db\"\n\treturn binary\nend", "  local binary = dec2bin(decimal)\n  return\
    \ string.format(\"db%sdb\", binary)\nend", "    return \"db\" .. string.format(\"\
    %b\", decimal) .. \"db\"\nend", "    -- turn into binary\n    -- add db characters\n\
    \    -- return it as a string\n    return 'db' .. string.format('%08d', string.sub(string.format('%b',\
    \ decimal), 1, -3)) .. 'db'\nend", "   local d = decimal\n   local binary = ''\n\
    \   local last_digit = 0\n   while true do\n      last_digit = d % 2\n      d\
    \ = (d - last_digit) / 2\n      binary = last_digit .. binary\n      if d == 0\
    \ then\n         break\n      end\n   end\n   binary = binary .. 'db'\n   binary\
    \ = 'db' .. binary\n   return binary\nend", "    local binary = ''\n    if decimal\
    \ == 0 then\n        return 'db0db'\n    end\n    while decimal > 0 do\n     \
    \   binary = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend", "    local binary =\
    \ \"db\"\n    local power = 0\n    repeat\n        local quo = math.floor(decimal\
    \ / 2)\n        local rem = decimal % 2\n        if rem == 1 then\n          \
    \  power = power + 1\n        end\n        binary = binary .. rem\n        decimal\
    \ = quo\n    until decimal == 0\n    while power < 7 do\n        binary = binary\
    \ .. \"0\"\n        power = power + 1\n    end\n    return binary .. \"db\"\n\
    end", "    local binary = ''\n    while decimal > 0 do\n        binary = string.char(decimal\
    \ % 2 + string.byte('0')) .. binary\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return string.format('db%sdb', binary)\nend", "  local function\
    \ binary_digits(n)\n    if n == 0 then return \"\" end\n    local remainder =\
    \ n % 2\n    return tostring(remainder) .. binary_digits(math.floor(n / 2))\n\
    \  end\n  local result = \"db\" .. binary_digits(decimal) .. \"db\"\n  return\
    \ result\nend", "    local result = \"db\"\n    while decimal > 0 do\n       \
    \ local bit = math.floor(decimal % 2)\n        result = bit .. result\n      \
    \  decimal = (decimal - bit) / 2\n    end\n    return result .. \"db\"\nend",
  "    return \"db\" .. base2_to_baseN(decimal, 2) .. \"db\"\nend", "    local result\
    \ = \"\"\n    local decimal = decimal\n    local rest = 0\n    local index = 0\n\
    \    repeat\n        rest = decimal % 2\n        result = rest .. result\n   \
    \     decimal = math.floor(decimal / 2)\n        index = index + 1\n    until\
    \ decimal == 0\n    return \"db\" .. result .. \"db\"\nend", "  local binary =\
    \ \"\"\n  local i = 0\n  local power = 1\n  while power <= decimal do\n    power\
    \ = power * 2\n    i = i + 1\n  end\n  power = power / 2\n  while i > 0 do\n \
    \   if decimal >= power then\n      binary = binary .. \"1\"\n      decimal =\
    \ decimal - power\n    else\n      binary = binary .. \"0\"\n    end\n    power\
    \ = power / 2\n    i = i - 1\n  end\n  return \"db\" .. binary .. \"db\"\nend",
  "    local bin = ''\n    while decimal > 0 do\n        if decimal % 2 == 0 then\n\
    \            bin = '0' .. bin\n        else\n            bin = '1' .. bin\n  \
    \      end\n        decimal = math.floor(decimal / 2)\n    end\n    return 'db'\
    \ .. bin .. 'db'\nend", "    local function dec2bin(dec)\n        return dec >\
    \ 0 and (dec % 2) .. dec2bin(math.floor(dec / 2)) or \"\"\n    end\n    return\
    \ \"db\" .. dec2bin(decimal) .. \"db\"\nend", "    local result = ''\n    local\
    \ modulo = nil\n    repeat\n        modulo = math.fmod(decimal, 2)\n        decimal\
    \ = math.floor(decimal / 2)\n        result = tostring(modulo) .. result\n   \
    \ until (decimal == 0)\n    return 'db' .. result .. 'db'\nend", "    local function\
    \ hex(decimal)\n        local remainder = decimal % 16\n        local hex_char\
    \ = string.format(\"%x\", remainder)\n        local hex_string = \"\"\n      \
    \  if decimal - remainder == 0 then\n            hex_string = hex_char .. hex_string\n\
    \        else\n            hex_string = hex(math.floor(decimal / 16)) .. hex_char\n\
    \        end\n        return hex_string\n    end\n    local function hex_to_binary(hex_string)\n\
    \        local bin_string = \"\"\n        for char in hex_string:gmatch(\".\"\
    ) do\n            local binary = string.format(\"%b\", tonumber(char, 16))\n \
    \           bin_string = bin_string .. string.rep(\"0\", 4 - binary:len()) ..\
    \ binary\n        end\n        return bin_string\n    end\n    local hex_str =\
    \ hex(decimal)\n    local bin_str = hex_to_binary(hex_str)\n    return \"db\"\
    \ .. bin_str .. \"db\"\nend", "  -- your code here\nend", "\tlocal binary = \"\
    \"\n\trepeat\n\t\tbinary = tostring(decimal % 2) .. binary\n\t\tdecimal = math.floor(decimal\
    \ / 2)\n\tuntil decimal == 0\n\treturn \"db\" .. binary .. \"db\"\nend", "   \
    \ local binary = ''\n    repeat\n        local remainder = decimal % 2\n     \
    \   binary = tostring(remainder) .. binary\n        decimal = (decimal - remainder)\
    \ / 2\n    until decimal == 0\n    return 'db' .. binary .. 'db'\nend", "  if\
    \ decimal == 0 then\n    return \"db0db\"\n  end\n  local binary = \"\"\n  while\
    \ decimal > 0 do\n    binary = string.char(decimal % 2 + 48) .. binary\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return string.format(\"db%sdb\", binary)\n\
    end", "\tif not decimal then\n\t\treturn nil\n\tend\n\tif decimal < 0 then\n\t\
    \treturn nil\n\tend\n\tif decimal > 2147483647 then\n\t\treturn nil\n\tend\n\t\
    local function decimal_to_binary_internal(decimal, binary_string)\n\t\tif decimal\
    \ < 1 then\n\t\t\tbinary_string = string.format(\"%sdb\", binary_string)\n\t\t\
    \treturn binary_string\n\t\tend\n\t\tlocal binary_string = string.format(\"%s%s\"\
    , binary_string, decimal % 2)\n\t\tdecimal = math.floor(decimal / 2)\n\t\treturn\
    \ decimal_to_binary_internal(decimal, binary_string)\n\tend\n\treturn decimal_to_binary_internal(decimal,\
    \ \"\")\nend", "    local binary = \"\"\n    while decimal > 0 do\n        binary\
    \ = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return \"db\" .. string.rep(\"0\", 8 - #binary) .. binary .. \"\
    db\"\nend", "   local binary = {}\n   while decimal > 0 do\n      local bit =\
    \ decimal % 2\n      binary[#binary + 1] = bit\n      decimal = (decimal - bit)\
    \ / 2\n   end\n   binary[#binary + 1] = 'db'\n   return table.concat(binary):reverse()\n\
    end", "    decimal = decimal .. \"\"\n    local str = \"\"\n    local remainder\
    \ = 0\n    local n = 0\n    while n < tonumber(decimal) do\n        remainder\
    \ = n % 2\n        n = n / 2\n        if remainder == 0 then\n            str\
    \ = str .. \"0\"\n        else\n            str = str .. \"1\"\n        end\n\
    \    end\n    str = str .. \"db\"\n    str = string.reverse(str)\n    return str\n\
    end", "  local str = ''\n  while decimal > 0 do\n    local m = decimal % 2\n \
    \   str = (m == 0 and '0' or '1') .. str\n    decimal = floor(decimal / 2)\n \
    \ end\n  return 'db' .. str .. 'db'\nend", "    -- Placeholder for the binary\
    \ string\n    local binary_string = ''\n    -- Placeholder for the converted decimal\
    \ number\n    local converted_decimal = decimal\n    -- Convert the decimal number\
    \ to binary.\n    while (converted_decimal > 0) do\n        local remainder =\
    \ converted_decimal % 2\n        -- Generate the binary string\n        binary_string\
    \ = string.format('%s%s', remainder, binary_string)\n        -- Calculate the\
    \ next converted decimal\n        converted_decimal = math.floor(converted_decimal\
    \ / 2)\n    end\n    -- Prepend 'db' to the binary string\n    binary_string =\
    \ string.format('db%s', binary_string)\n    -- Append 'db' to the binary string\n\
    \    binary_string = string.format('%sdb', binary_string)\n    -- Return the binary\
    \ string\n    return binary_string\nend", "  local result = ''\n  while decimal\
    \ > 0 do\n    local rest = decimal % 2\n    decimal = math.floor(decimal / 2)\n\
    \    result = tostring(rest) .. result\n  end\n  return 'db' .. result .. 'db'\n\
    end", "    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. tostring(remainder)\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return binary .. \"db\"\nend", "  local\
    \ result = {}\n  while decimal > 0 do\n    local rest = decimal % 2\n    table.insert(result,\
    \ rest)\n    decimal = (decimal - rest) / 2\n  end\n  table.insert(result, \"\
    db\")\n  for i=#result-1, 1, -1 do\n    table.insert(result, result[i])\n  end\n\
    \  return table.concat(result)\nend", "  local binary = \"\"\n  if decimal ==\
    \ 0 then\n    return \"db0db\"\n  end\n  while decimal > 0 do\n    local bit =\
    \ math.fmod(decimal, 2)\n    binary = bit .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend", "  -- Your code here\n\
    \  local str = \"\"\n  local tmp = \"\"\n  repeat\n    tmp = tmp .. (decimal %\
    \ 2)\n    decimal = math.floor(decimal / 2)\n  until decimal == 0\n  for i = 1,\
    \ string.len(tmp) do\n    str = str .. string.sub(tmp, i, i)\n  end\n  return\
    \ \"db\" .. str .. \"db\"\nend", "  local result = ''\n  local remainder = 0\n\
    \  local quotient = decimal\n  local exponent = 0\n  local bin_digit = 0\n  local\
    \ next_decimal = decimal\n  local i = 1\n  local j = 0\n  local bin_numbers =\
    \ {}\n  -- find the highest exponent 2 that is smaller than the decimal,\n  --\
    \ and calculate the number of bits needed to represent the decimal\n  while next_decimal\
    \ > 1 do\n    next_decimal = math.floor(decimal / 2^i)\n    i = i + 1\n  end\n\
    \  exponent = i - 1\n  -- Create an array with all the binary values of the exponent\
    \ needed\n  for i = exponent, 0, -1 do\n    bin_numbers[i] = 2^j\n    j = j +\
    \ 1\n  end\n  -- Starting from the highest exponent, subtract the highest value\n\
    \  -- that fits into the decimal, and calculate the remainder. Repeat\n  -- with\
    \ the next highest value in the array.\n  for i = exponent, 0, -1 do\n    local\
    \ fit = math.floor(quotient / bin_numbers[i])\n    if fit >= 1 then\n      bin_digit\
    \ = 1\n      quotient = quotient - bin_numbers[i]\n    else\n      bin_digit =\
    \ 0\n    end\n    result = result .. bin_digit\n  end\n  return \"db\" .. result\
    \ .. \"db\"\nend", "\tlocal binary = 'db'\n\twhile decimal > 0 do\n\t\tbinary\
    \ = binary .. tostring(decimal % 2)\n\t\tdecimal = math.floor(decimal / 2)\n\t\
    end\n\treturn binary .. 'db'\nend", "  local binary = \"db\"\n  while decimal\
    \ > 0 do\n    local mod = decimal % 2\n    binary = binary .. mod\n    decimal\
    \ = (decimal - mod) / 2\n  end\n  return binary .. \"db\"\nend", "\tlocal sign,fraction\
    \ = string.match(decimal,\"^([%+%-]?)([0-9]+).?([0-9]*)\")\n\tlocal binary = \"\
    \"\n\tlocal part = tonumber(fraction)\n\twhile(part ~= 0) do\n\t\tbinary = (part\
    \ % 2) .. binary\n\t\tpart = math.floor(part / 2)\n\tend\n\treturn \"db\" .. (sign\
    \ == \"-\" and \"1\" or \"0\") .. binary .. \"db\"\nend", "    local r = \"\"\n\
    \    while decimal > 0 do\n        r = (decimal % 2 == 0 and \"0\" or \"1\") ..\
    \ r\n        decimal = math.floor(decimal / 2)\n    end\n    return \"db\" ..\
    \ r .. \"db\"\nend", "    local binary_string = \"\"\n    while decimal > 0 do\n\
    \        local remainder = decimal % 2\n        binary_string = tostring(remainder)\
    \ .. binary_string\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary_string .. \"db\"\nend", "\tlocal bin = 'db'", "  local res\
    \ = \"\"\n  while decimal > 0 do\n    if decimal % 2 == 0 then\n      res = '0'\
    \ .. res\n    else\n      res = '1' .. res\n    end\n    decimal = decimal //\
    \ 2\n  end\n  return 'db' .. res .. 'db'\nend", "    local result = \"db\"\n \
    \   while decimal > 0 do\n        result = result .. tostring(decimal % 2)\n \
    \       decimal = math.floor(decimal / 2)\n    end\n    return result .. \"db\"\
    \nend", "    local bin = 0\n    local binary = \"\"\n    while decimal > 0 do\n\
    \        bin = math.floor(decimal % 2)\n        binary = tostring(bin) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    binary = \"db\" .. binary\
    \ .. \"db\"\n    return binary\nend", "    local bin\n    repeat\n        local\
    \ mod = decimal % 2\n        decimal = math.floor(decimal / 2)\n        bin =\
    \ (bin or \"\") .. tostring(mod)\n    until decimal == 0\n    return \"db\" ..\
    \ bin .. \"db\"\nend", "    local binary = {}\n    repeat\n        binary[#binary\
    \ + 1] = decimal % 2\n        decimal = math.floor(decimal / 2)\n    until decimal\
    \ == 0\n    return 'db' .. table.concat(binary):reverse() .. 'db'\nend", "   \
    \ if decimal == 0 then\n        return \"db0db\"\n    end\n    local result =\
    \ \"db\"\n    while decimal > 0 do\n        result = result .. (decimal % 2)\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return result .. \"db\"\
    \nend", "    local result = \"db\"\n    local maxvalue = 1", "    local r = \"\
    \"\n    while decimal ~= 0 do\n        r = tostring(decimal % 2) .. r\n      \
    \  decimal = math.floor(decimal / 2)\n    end\n    return \"db\" .. r .. \"db\"\
    \nend", "  -- Your code goes here.\n  return \"db\" .. string.format(\"%x\", decimal)\
    \ .. \"db\"\nend", "  local binary = \"\"\n  while (decimal > 0) do\n    local\
    \ rest = decimal % 2\n    binary = tostring(rest) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend", "  local bits = {}\n\
    \  local result = \"db\"\n  repeat\n    rest = math.fmod(decimal,2)\n    table.insert(bits,1,rest)\n\
    \    decimal = (decimal-rest)/2\n  until decimal==0\n  for _,bit in ipairs(bits)\
    \ do\n    result = result .. tostring(bit)\n  end\n  return result .. \"db\"\n\
    end", "    local result = ''\n    while (decimal > 0) do\n        local next_bit\
    \ = decimal % 2\n        decimal = math.floor(decimal / 2)\n        result = result\
    \ .. next_bit\n    end\n    return 'db' .. result .. 'db'\nend", "    local binary\
    \ = \"\"\n    while decimal ~= 0 do\n        local remainder = decimal % 2\n \
    \       decimal = (decimal - remainder) / 2\n        binary = tostring(remainder)\
    \ .. binary\n    end\n    binary = \"db\" .. binary .. \"db\"\n    return binary\n\
    end", "    --binary: 0000 1111\n    --decimal: 0 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15", "  local binary = \"\"\n  local p = math.ceil(math.log(decimal) / math.log(2))\
    \ + 1\n  for i = p, 1, -1 do\n    if decimal >= 2^(i-1) then\n      binary = binary\
    \ .. \"1\"\n      decimal = decimal - 2^(i-1)\n    else\n      binary = binary\
    \ .. \"0\"\n    end\n  end\n  return \"db\" .. binary .. \"db\"\nend", "    local\
    \ binary_characters = {\"0\", \"1\"}\n    local binary_number = \"\"\n    local\
    \ decimal_number = 0\n    while decimal_number ~= decimal do\n        local binary_digit\
    \ = decimal % 2\n        decimal = math.floor(decimal / 2)\n        binary_number\
    \ = binary_characters[binary_digit + 1] .. binary_number\n        decimal_number\
    \ = decimal_number + binary_digit * 2 ^ #binary_number\n    end\n    return \"\
    db\" .. binary_number .. \"db\"\nend", "\tlocal count, result, check = 0, \"\"\
    , 1\n\twhile check <= decimal do\n\t\tcheck = check * 2\n\t\tcount = count + 1\n\
    \tend\n\tfor i = 1, count do\n\t\tif decimal % 2 == 0 then\n\t\t\tresult = result\
    \ .. \"0\"\n\t\telse\n\t\t\tresult = result .. \"1\"\n\t\tend\n\t\tdecimal = decimal\
    \ / 2\n\tend\n\tresult = \"db\" .. result .. \"db\"\n\treturn result\nend", " \
    \ return \"db\" .. string.format(\"%b\", decimal) .. \"db\"\nend", "   if decimal\
    \ == 0 then\n      return \"db0db\"\n   end\n   local binary = \"db\"\n   while\
    \ decimal > 0 do\n      if decimal % 2 == 0 then\n         binary = \"0\" .. binary\n\
    \      else\n         binary = \"1\" .. binary\n      end\n      decimal = math.floor(decimal\
    \ / 2)\n   end\n   return binary .. \"db\"\nend", "  local binary = \"\"\n  local\
    \ remainder\n  while decimal > 0 do\n    remainder = decimal % 2\n    binary =\
    \ string.char(string.byte(\"0\") + remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend", "    local str_binary\
    \ = 'db'\n    while (decimal > 0) do\n        local mod = decimal % 2\n      \
    \  str_binary = string.format('%s%d', str_binary, mod)\n        decimal = (decimal\
    \ - mod) / 2\n    end\n    return string.format('%sdb', str_binary)\nend", " \
    \   local result = 'db'\n    while decimal > 0 do\n        result = result ..\
    \ (decimal % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ result .. 'db'\nend", "\tlocal bin = ''\n\twhile decimal > 0 do\n\t\tlocal digit\
    \ = decimal % 2\n\t\tbin = digit .. bin\n\t\tdecimal = math.floor(decimal / 2)\n\
    \tend\n\treturn 'db' .. bin .. 'db'\nend", "  local binary = ''\n  while (decimal\
    \ > 0) do\n    local remainder = decimal % 2\n    binary = binary .. remainder\n\
    \    decimal = math.floor(decimal / 2)\n  end\n  binary = 'db' .. binary .. 'db'\n\
    \  return binary\nend", "  local binary = \"\"\n  local remaining = decimal\n\
    \  while remaining ~= 0 do\n    local remainder = remaining % 2\n    binary =\
    \ (remainder == 0 and \"0\" or \"1\") .. binary\n    remaining = math.floor(remaining\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend", "  local b = \"\"\n\
    \  repeat\n    b = b .. tostring(decimal % 2)\n    decimal = math.floor(decimal\
    \ / 2)\n  until decimal == 0\n  return \"db\" .. string.reverse(b) .. \"db\"\n\
    end", "    local left = decimal\n    local binary = 'db'\n    while left > 0 do\n\
    \        local r = left % 2\n        binary = binary .. tostring(r)\n        left\
    \ = math.floor(left / 2)\n    end\n    binary = binary .. 'db'\n    return binary\n\
    end", "    local binary = \"db\"\n    while decimal > 0 do\n        local x =\
    \ math.fmod(decimal, 2)\n        if x == 0 then\n            binary = \"0\" ..\
    \ binary\n        else\n            binary = \"1\" .. binary\n        end\n  \
    \      decimal = math.floor(decimal / 2)\n    end\n    return binary .. \"db\"\
    \nend", "\tlocal function _decimal_to_binary(decimal, result)\n\t\tif decimal\
    \ <= 0 then\n\t\t\treturn result\n\t\tend\n\t\treturn _decimal_to_binary(math.floor(decimal\
    \ / 2), tostring(decimal % 2) .. result)\n\tend\n\treturn _decimal_to_binary(decimal,\
    \ \"\")\nend", "   local bits = \"\";\n   local bit_num = 0;\n   for decimal in\
    \ decimal:gmatch(\"%d\") do\n      decimal = tonumber(decimal);\n      if decimal\
    \ > 0 then\n         bits = bits .. \"1\";\n         decimal = decimal - 2^bit_num;\n\
    \      else\n         bits = bits .. \"0\";\n      end\n      bit_num = bit_num\
    \ + 1;\n   end\n   bits = \"db\" .. bits .. \"db\";\n   return bits;\nend", " \
    \ local binary = ''\n  repeat\n    local new_bin = decimal % 2\n    if new_bin\
    \ == 0 then\n      binary = '0' .. binary\n    else\n      binary = '1' .. binary\n\
    \    end\n    decimal = math.floor(decimal / 2)\n  until decimal == 0\n  return\
    \ 'db' .. binary .. 'db'\nend", "  local bin = \"\"\n  repeat\n    local remainder\
    \ = decimal % 2\n    if remainder == 0 then\n      bin = \"0\" .. bin\n    else\n\
    \      bin = \"1\" .. bin\n    end\n    decimal = math.floor(decimal / 2)\n  until\
    \ decimal == 0\n  return \"db\" .. bin .. \"db\"\nend", "  return \"db\" .. gsub(format(\"\
    %0.8b\", decimal), \"%d\", function(binary)\n    return \"db\" .. binary\n  end)\
    \ .. \"db\"\nend", "    local decimal_to_binary_tbl = {}\n    local bit = require('bit')\n\
    \    for i = 1, 32 do\n        local value = bit.band(decimal, 1)\n        table.insert(decimal_to_binary_tbl,\
    \ value)\n        decimal = bit.rshift(decimal, 1)\n    end\n    local decimal_to_binary_str\
    \ = 'db'\n    for i = #decimal_to_binary_tbl, 1, -1 do\n        decimal_to_binary_str\
    \ = decimal_to_binary_str .. tostring(decimal_to_binary_tbl[i])\n    end\n   \
    \ decimal_to_binary_str = decimal_to_binary_str .. 'db'\n    return decimal_to_binary_str\n\
    end", "  local binary = \"\"\n  local is_finished = false\n  local quotient =\
    \ decimal\n  while not is_finished do\n    local reminder = quotient % 2\n   \
    \ binary = string.format(\"%d%s\", reminder, binary)\n    quotient = math.floor(quotient\
    \ / 2)\n    if quotient == 0 then\n      is_finished = true\n    end\n  end\n\
    \  return \"db\" .. binary .. \"db\"\nend", "    local reverse = \"\"\n    local\
    \ binary = \"\"\n    local dec = decimal\n    local power = 0\n    local flag\
    \ = 0\n    if decimal ~= 0 then\n        while true do\n            power = power\
    \ + 1\n            if 2^power > decimal then\n                break\n        \
    \    end\n        end\n        power = power - 1\n        while true do\n    \
    \        if power < 0 then\n                break\n            end\n         \
    \   if dec - 2^power >= 0 then\n                dec = dec - 2^power\n        \
    \        reverse = reverse .. \"1\"\n            else\n                reverse\
    \ = reverse .. \"0\"\n            end\n            power = power - 1\n       \
    \ end\n        power = 0\n        while true do\n            if #reverse > power\
    \ then\n                binary = binary .. reverse:sub(#reverse - power, #reverse\
    \ - power)\n            else\n                binary = binary .. \"0\"\n     \
    \       end\n            power = power + 1\n            if power > 4 then\n  \
    \              break\n            end\n        end\n    else\n        binary =\
    \ \"0000\"\n    end\n    return \"db\" .. binary .. \"db\"\nend", "   local binary\
    \ = ''\n   local mid = {}\n   local top = {}\n   local base = 2\n   local i =\
    \ 1\n   local r = decimal\n   local v = 0\n   local b = 0\n   local l = 0\n  \
    \ local m = 0\n   local n = 0\n   --\n   if r == 0 then\n      mid[1] = '0'\n\
    \   else\n      while r ~= 0 do\n         v = r % base\n         r = math.floor(r\
    \ / base)\n         mid[i] = v\n         i = i + 1\n      end\n   end\n   -- flip\
    \ mid array\n   n = table.getn(mid)\n   i = 1\n   while i <= n do\n      top[i]\
    \ = mid[n-i+1]\n      i = i + 1\n   end\n   -- pad\n   l = table.getn(top)\n \
    \  if l < 8 then\n      m = 8 - l\n      i = 1\n      while i <= m do\n      \
    \   table.insert(top, 1, 0)\n         i = i + 1\n      end\n   end\n   --\n  \
    \ for i,v in ipairs(top) do\n      binary = binary .. v\n   end\n   return 'db'\
    \ .. binary .. 'db'\nend", "  local result = \"db\"\n  if decimal < 0 then\n \
    \   result = result .. \"1\"\n    decimal = -decimal\n  else\n    result = result\
    \ .. \"0\"\n  end\n  result = result .. to_binary(decimal)\n  return result ..\
    \ \"db\"\nend", "    -- convert a decimal to binary\n    local remaining = decimal\
    \ % 2\n    local next_decimal = math.floor(decimal / 2)\n    if next_decimal ==\
    \ 0 then\n        return \"db\" .. remaining .. \"db\"\n    else\n        return\
    \ decimal_to_binary(next_decimal) .. remaining\n    end\nend", "\tlocal binary\
    \ = ''\n\trepeat\n\t\tlocal remainder = decimal % 2\n\t\tdecimal = (decimal -\
    \ remainder) / 2\n\t\tbinary = remainder .. binary\n\tuntil decimal == 0\n\treturn\
    \ 'db' .. binary .. 'db'\nend", "  -- TODO\nend", "    if decimal < 0 then return\
    \ 'db0db' end\n    local binary = ''\n    while decimal > 0 do\n        local\
    \ remainder = decimal % 2\n        decimal = (decimal - remainder) / 2\n     \
    \   binary = tostring(remainder) .. binary\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend", "    local result = \"\"\n    while decimal > 0 do\n        local\
    \ mod = decimal % 2\n        decimal = math.floor(decimal / 2)\n        result\
    \ = mod .. result\n    end\n    return \"db\" .. result .. \"db\"\nend", "  local\
    \ res = { 'db' }\n  for i = 8, 1, -1 do\n    local pow = 2 ^ (i - 1)\n    if decimal\
    \ >= pow then\n      res[#res + 1] = '1'\n      decimal = decimal - pow\n    else\n\
    \      res[#res + 1] = '0'\n    end\n  end\n  res[#res + 1] = 'db'\n  return table.concat(res)\n\
    end", "  local integer, fractional = tostring(decimal):match(\"(%d+).(%d+)\")\n\
    \  integer = tonumber(integer)\n  fractional = tonumber(fractional)\n  local binary_string\
    \ = \"db\"\n  while integer > 0 do\n    binary_string = binary_string .. tostring(integer\
    \ % 2)\n    integer = math.floor(integer / 2)\n  end\n  while fractional > 0 do\n\
    \    local binary_digit = fractional * 2\n    if binary_digit >= 1 then\n    \
    \  binary_string = binary_string .. \"1\"\n      fractional = binary_digit - 1\n\
    \    else\n      binary_string = binary_string .. \"0\"\n      fractional = binary_digit\n\
    \    end\n  end\n  return binary_string .. \"db\"\nend", "    local binary_string\
    \ = 'db'\n    local quotient = decimal\n    local remainders = {}\n    local n\
    \ = 0\n    while quotient > 0 do\n        remainders[n] = quotient % 2\n     \
    \   quotient = math.floor(quotient / 2)\n        n = n + 1\n    end\n    for i\
    \ = n - 1, 0, -1 do\n        binary_string = binary_string .. tostring(remainders[i])\n\
    \    end\n    binary_string = binary_string .. 'db'\n    return binary_string\n\
    end", "    local m = 32\n    local r = {}\n    while m > 0 do\n        if (decimal\
    \ >= m) then\n            table.insert(r, '1')\n            decimal = decimal\
    \ - m\n        else\n            table.insert(r, '0')\n        end\n        m\
    \ = m / 2\n    end\n    return table.concat(r)\nend", "\tlocal out\n\tif decimal\
    \ == 0 then\n\t\tout = \"db0db\"\n\telse\n\t\tout = \"db\"\n\t\twhile decimal\
    \ > 0 do\n\t\t\tif decimal % 2 == 0 then\n\t\t\t\tout = out .. \"0\"\n\t\t\telse\n\
    \t\t\t\tout = out .. \"1\"\n\t\t\tend\n\t\t\tdecimal = math.floor(decimal / 2)\n\
    \t\tend\n\t\tout = out .. \"db\"\n\tend\n\treturn out\nend", "\treturn 0\nend",
  "    local binary = \"\"\n    repeat\n        local remainder = decimal % 2\n  \
    \      decimal = (decimal - remainder) / 2\n        binary = remainder .. binary\n\
    \    until decimal == 0\n    return \"db\" .. binary .. \"db\"\nend", "\tlocal\
    \ is_neg = false\n\tif decimal < 0 then\n\t\tis_neg = true\n\t\tdecimal = -decimal\n\
    \tend\n\tlocal remainders = {}\n\twhile decimal > 0 do\n\t\tlocal remainder =\
    \ decimal % 2\n\t\ttable.insert(remainders, remainder)\n\t\tdecimal = (decimal\
    \ - remainder) / 2\n\tend\n\tif is_neg then\n\t\tlocal bits = #remainders\n\t\t\
    for i = 1, bits do\n\t\t\tif remainders[i] == 0 then\n\t\t\t\tremainders[i] =\
    \ 1\n\t\t\telse\n\t\t\t\tremainders[i] = 0\n\t\t\tend\n\t\tend\n\t\tremainders[bits]\
    \ = remainders[bits] + 1\n\t\tlocal i = bits\n\t\twhile i > 0 and remainders[i]\
    \ == 2 do\n\t\t\tremainders[i] = 0\n\t\t\tremainders[i - 1] = remainders[i - 1]\
    \ + 1\n\t\t\ti = i - 1\n\t\tend\n\tend\n\tlocal chars = {}\n\tfor i = #remainders,\
    \ 1, -1 do\n\t\ttable.insert(chars, remainders[i])\n\tend\n\ttable.insert(chars,\
    \ 1, 'd')\n\ttable.insert(chars, 1, 'b')\n\ttable.insert(chars, 'd')\n\ttable.insert(chars,\
    \ 'b')\n\treturn table.concat(chars)\nend", "  -- your code here\nend", "  local\
    \ b = \"\"\n  while (decimal ~= 0) do\n    local a = decimal % 2\n    b = (a ==\
    \ 0 and \"0\" or \"1\") .. b\n    decimal = math.floor(decimal / 2)\n  end\n \
    \ return \"db\" .. b .. \"db\"\nend", "  local binary = ''\n  while decimal ~=\
    \ 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder) ..\
    \ binary\n    decimal = math.floor(decimal / 2)\n  end\n  return string.format('db%sdb',\
    \ binary)\nend", "  local b = ''\n  while (decimal > 0) do\n    local r = math.fmod(decimal,\
    \ 2)\n    b = r .. b\n    decimal = math.floor(decimal / 2)\n  end\n  return \"\
    db\" .. b .. \"db\"\nend", "  local t = {}\n  while decimal > 0 do\n    local\
    \ mod = decimal % 2\n    table.insert(t, mod)\n    decimal = (decimal - mod) /\
    \ 2\n  end\n  local str = ''\n  for i = #t, 1, -1 do\n    str = str .. t[i]\n\
    \  end\n  return 'db' .. str .. 'db'\nend", "  local binary = 'db'\n  local power\
    \ = 1\n  local base = 2\n  local remainder\n  if decimal == 0 then return 'db0db'\
    \ end\n  while decimal > 0 do\n    remainder = decimal % base\n    decimal = math.floor(decimal\
    \ / base)\n    if remainder == 1 then\n      binary = '1' .. binary\n    else\n\
    \      binary = '0' .. binary\n    end\n  end\n  return binary .. 'db'\nend",
  "    local t = {}\n    local k = 1\n    while decimal > 0 do\n        local b =\
    \ decimal % 2\n        t[k] = b\n        k = k + 1\n        decimal = (decimal\
    \ - b) / 2\n    end\n    local s = 'db'\n    for i = #t, 1, -1 do\n        s =\
    \ s .. tostring(t[i])\n    end\n    return s .. 'db'\nend", "\tlocal n = 0\n\t\
    local num = decimal\n\twhile num ~= 0 do\n\t\tnum = math.floor(num / 2)\n\t\t\
    n = n + 1\n\tend\n\tlocal bin = \"\"\n\tfor i = n, 0, -1 do\n\t\tlocal b = math.floor(decimal\
    \ / (2 ^ i))\n\t\tif b == 1 then\n\t\t\tdecimal = decimal - (2 ^ i)\n\t\tend\n\
    \t\tbin = bin .. b\n\tend\n\treturn \"db\" .. bin .. \"db\"\nend", "    local\
    \ binary = ''\n    local db = \"db\"\n    local bdb = \"\"\n    local remainder",
  "    return \"db\" .. dec2bin(decimal) .. \"db\"\nend", "  local binary = \"db\"\
    \n  while decimal > 0 do\n    remainder = decimal % 2\n    decimal = math.floor(decimal\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return binary ..\
    \ \"db\"\nend", "    local result = \"\"\n    local rest = decimal\n    while\
    \ (rest ~= 0) do\n        if (rest % 2 == 0) then\n            result = \"0\"\
    \ .. result\n        else\n            result = \"1\" .. result\n        end\n\
    \        rest = math.floor(rest / 2)\n    end\n    return \"db\" .. result ..\
    \ \"db\"\nend", "  local r = \"\"\n  while decimal > 0 do\n    r = (decimal %\
    \ 2 == 0 and \"0\" or \"1\") .. r\n    decimal = math.floor(decimal / 2)\n  end\n\
    \  return \"db\" .. r .. \"db\"\nend", "  local binary = ''\n  while decimal >\
    \ 0 do\n    local rem = math.fmod(decimal, 2)\n    binary = tostring(rem) .. binary\n\
    \    decimal = math.floor(decimal / 2)\n  end\n  binary = \"db\" .. binary ..\
    \ \"db\"\n  return binary\nend", "    local function floor(value)\n        return\
    \ (value == math.floor(value)) and value or (value - value % 1)\n    end\n   \
    \ local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = floor(decimal / 2)\n    end\n    return \"\
    db\" .. string.rep(\"0\", 8 - #binary) .. binary .. \"db\"\nend", "    local binary_number\
    \ = {}\n    local remaining = decimal\n    while remaining > 0 do\n        binary_number[#binary_number\
    \ + 1] = remaining % 2\n        remaining = math.floor(remaining / 2)\n    end\n\
    \    binary_number = string.format(\"db%0\" .. decimal_to_binary.max_bits .. \"\
    d\", table.concat(binary_number):reverse())\n    return binary_number\nend\ndecimal_to_binary.max_bits\
    \ = 8", "    local result = 'db'\n    repeat\n        local b = decimal % 2\n\
    \        decimal = math.floor(decimal / 2)\n        result = result .. b\n   \
    \ until decimal == 0\n    return result .. 'db'\nend", "  local binary = \"\"\n\
    \  local binary_digit = 1\n  local remainder = decimal\n  while remainder > 0\
    \ do\n    if remainder % 2 == 1 then\n      binary = \"1\" .. binary\n    else\n\
    \      binary = \"0\" .. binary\n    end\n    remainder = math.floor(remainder\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend", "  local div = 2\n \
    \ local binary = \"\"\n  local rem = 0\n  local new_decimal = decimal\n  local\
    \ db = \"db\"\n  local first_loop = true\n  while new_decimal ~= 0 do\n    rem\
    \ = new_decimal % div\n    if first_loop == true then\n      binary = binary ..\
    \ tostring(rem)\n      first_loop = false\n    else\n      binary = tostring(rem)\
    \ .. binary\n    end\n    new_decimal = math.floor(new_decimal / div)\n  end\n\
    \  if binary == \"\" then\n    binary = \"0\"\n  end\n  binary = db .. binary\
    \ .. db\n  return binary\nend", "  local result, num = \"db\", \"\"\n  local function\
    \ process(d)\n    for i = 7, 1, -1 do\n      if d >= 2^i then\n        num = num\
    \ .. \"1\"\n        d = d - 2^i\n      else\n        num = num .. \"0\"\n    \
    \  end\n    end\n  end\n  if decimal < 256 then\n    process(decimal)\n    result\
    \ = result .. num .. \"db\"\n  else\n    local first = floor(decimal / 256)\n\
    \    local second = decimal % 256\n    process(first)\n    result = result ..\
    \ num\n    num = \"\"\n    process(second)\n    result = result .. num .. \"db\"\
    \n  end\n  return result\nend", "  if decimal == 0 then\n    return 'db0db'\n\
    \  end\n  local binary = 'db'\n  while decimal > 0 do\n    binary = binary ..\
    \ tostring(decimal % 2)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binary .. 'db'\nend", "    local power = 0\n    local results = {}\n    local\
    \ binary = \"\"\n    while decimal > 0 do\n        if decimal % 2 == 0 then\n\
    \            results[power] = 0\n        else\n            results[power] = 1\n\
    \        end\n        decimal = decimal / 2\n        power = power + 1\n    end\n\
    \    for i = power - 1, 0, -1 do\n        binary = binary .. results[i]\n    end\n\
    \    return \"db\" .. binary .. \"db\"\nend", "  local binary\n  if decimal ==\
    \ 0 then\n    binary = \"db0db\"\n  else\n    binary = \"db\"\n    while decimal\
    \ > 0 do\n      binary = binary .. (decimal % 2)\n      decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. \"db\"\n  end\n  return binary\nend",
  "    local binary = \"\"\n    local q = decimal\n    local r = 0\n    repeat\n \
    \       r = q % 2\n        q = math.floor(q / 2)\n        binary = binary .. r\n\
    \    until q == 0\n    return \"db\" .. string.reverse(binary) .. \"db\"\nend",
  "    local binary = string.format(\"%o\", decimal)\n    local zeros = #binary -\
    \ 1\n    local ret = \"db\"\n    for i = 1, zeros do\n        ret = ret .. \"\
    0\"\n    end\n    ret = ret .. binary\n    ret = ret .. \"db\"\n    return ret\n\
    end", "    local binary = \"db\"\n    while decimal > 0 do\n        local r =\
    \ decimal % 2\n        binary = r .. binary\n        decimal = (decimal - r) /\
    \ 2\n    end\n    return binary .. \"db\"\nend", "  local function _decimal_to_binary(decimal,\
    \ binary)\n    local quotient, remainder = math.modf(decimal / 2)\n    local binary\
    \ = tostring(remainder) .. binary\n    if quotient == 0 then\n      return binary\n\
    \    else\n      return _decimal_to_binary(quotient, binary)\n    end\n  end\n\
    \  local binary = _decimal_to_binary(decimal, \"\")\n  local padding = 7 - #binary\
    \ % 7\n  if padding ~= 7 then\n    binary = string.rep(\"0\", padding) .. binary\n\
    \  end\n  return string.format(\"db%sdb\", binary)\nend", "    local binary_table\
    \ = {}\n    local binary_string = \"\"\n    local new_char = \"\"\n    local remainder\
    \ = 0\n    local quotient = 0\n    -- iterate through the value until it is 0\n\
    \    while decimal > 0 do\n        -- get the remainder of the division\n    \
    \    remainder = decimal % 2\n        -- get the quotient of the division\n  \
    \      quotient = decimal / 2\n        -- store the remainder as a table value\n\
    \        table.insert(binary_table, remainder)\n        -- set decimal to the\
    \ quotient\n        decimal = quotient\n    end\n    -- iterate through the table\
    \ in reverse order\n    for index = #binary_table, 1, -1 do\n        -- set new_char\
    \ to the value stored at the index\n        new_char = binary_table[index]\n \
    \       -- add the new_char to the string\n        binary_string = binary_string\
    \ .. new_char\n    end\n    -- print out the final string\n    print(\"db\" ..\
    \ binary_string .. \"db\")\nend", "\tdecimal = math.floor(decimal)\n\tif decimal\
    \ == 0 then\n\t\treturn \"db0db\"\n\tend\n\tlocal binary = \"db\"\n\twhile decimal\
    \ > 0 do\n\t\tbinary = binary .. tostring(decimal % 2)\n\t\tdecimal = math.floor(decimal\
    \ / 2)\n\tend\n\treturn binary .. \"db\"\nend", '  local binary = "db"', "  --\
    \ TODO\nend", "    -- YOUR CODE HERE\n    return ''\nend", "  local bin_num_array\
    \ = {}\n  repeat\n    local int_binary = decimal % 2\n    decimal = math.floor(decimal\
    \ / 2)\n    table.insert(bin_num_array, int_binary)\n  until decimal == 0\n  return\
    \ \"db\" .. string.reverse(table.concat(bin_num_array)) .. \"db\"\nend", "   \
    \ local output = \"db\"\n    local char = \"\"\n    local value = \"\"\n    while\
    \ decimal > 0 do\n        value = tostring(decimal % 2)\n        output = output\
    \ .. value\n        decimal = decimal / 2\n    end\n    output = output .. \"\
    db\"\n    output = string.reverse(output)\n    return output\nend", "\treturn\
    \ \"db\" .. string.format(\"%08x\",decimal) .. \"db\"\nend", "  local base = 2\n\
    \  local result = \"\"\n  repeat\n    local dividend = decimal / base\n    local\
    \ quotient = math.floor(dividend)\n    local remainder = decimal % base\n    result\
    \ = string.format(\"%x\", remainder) .. result\n    decimal = quotient\n  until\
    \ decimal == 0\n  return \"db\" .. result .. \"db\"\nend", "    local result =\
    \ ''\n    while decimal ~= 0 do\n        local remainder = decimal % 2\n     \
    \   result = tostring(remainder) .. result\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. result .. \"db\"\nend", "  assert(type(decimal)\
    \ == \"number\", \"decimal_to_binary - input must be a number\")\n  local binary\
    \ = \"\"\n  local negative = false\n  if decimal < 0 then\n    negative = true\n\
    \    decimal = -decimal\n  end\n  while decimal > 0 do\n    local r = decimal\
    \ % 2\n    decimal = (decimal - r) / 2\n    binary = r .. binary\n  end\n  if\
    \ negative then\n    binary = \"1\" .. binary\n  else\n    binary = \"0\" .. binary\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend", "  -- local function conversion(dec)\n\
    \  --   if dec == 0 then return '' end\n  --   return conversion(math.floor(dec\
    \ / 2)) .. tostring(dec % 2)\n  -- end\n  -- local binary = conversion(decimal)\n\
    \  -- return string.format('db%sdb', binary)\n  local binary = ''\n  while decimal\
    \ > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return string.format('db%sdb',\
    \ binary)\nend", "  local bin = \"\"\n  while decimal > 0 do\n    if decimal %\
    \ 2 == 0 then\n      bin = \"0\" .. bin\n    else\n      bin = \"1\" .. bin\n\
    \    end\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" .. bin\
    \ .. \"db\"\nend", "  local result = \"\"\n  while decimal > 0 do\n    result\
    \ = (decimal % 2 == 0 and \"0\" or \"1\") .. result\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. result .. \"db\"\nend", "    local binary =\
    \ \"\"\n    local remainder = 0\n    local quotient = decimal\n    local length\
    \ = 0\n    local counter = 0\n    while quotient ~= 0 do\n        remainder =\
    \ quotient % 2\n        quotient = math.floor(quotient / 2)\n        binary =\
    \ binary .. tostring(remainder)\n        length = length + 1\n    end\n    --\
    \ reverse the string\n    local reversed = \"\"\n    while length ~= 0 do\n  \
    \      reversed = reversed .. binary:sub(length, length)\n        length = length\
    \ - 1\n    end\n    return \"db\" .. reversed .. \"db\"\nend", "  local decimal\
    \ = tostring(decimal)\n  local binary_number = \"db\"\n  local int, frac = decimal:match(\"\
    ([^.]+)%.([^.]+)\")\n  int = tonumber(int)\n  frac = tonumber(frac)\n  while int\
    \ > 0 do\n    local remainder = int % 2\n    if remainder == 0 then\n      binary_number\
    \ = binary_number .. \"0\"\n    else\n      binary_number = binary_number .. \"\
    1\"\n    end\n    int = (int - remainder) / 2\n  end\n  binary_number = binary_number\
    \ .. \".\"\n  while frac > 0 do\n    local remainder = frac * 2\n    if remainder\
    \ >= 1 then\n      binary_number = binary_number .. \"1\"\n      frac = remainder\
    \ - 1\n    else\n      binary_number = binary_number .. \"0\"\n      frac = remainder\n\
    \    end\n  end\n  return binary_number .. \"db\"\nend", "    local bin = ''\n\
    \    while decimal > 0 do\n        local mod = decimal % 2\n        bin = mod\
    \ .. bin\n        decimal = math.floor(decimal / 2)\n    end\n    return 'db'\
    \ .. bin .. 'db'\nend", "    -- original code:\n    -- local binary = \"\"\n \
    \   -- local db = \"db\"\n    -- for i = 1, 8 do\n    --     if decimal > 1 then\n\
    \    --         local bit = decimal % 2\n    --         decimal = math.floor(decimal\
    \ / 2)\n    --         binary = bit .. binary\n    --     else\n    --       \
    \  binary = \"0\" .. binary\n    --     end\n    -- end\n    -- return db .. binary\
    \ .. db", "  -- Add your code here\n  local binary = \"\"\n  while decimal > 0\
    \ do\n    local mod = decimal % 2\n    decimal = math.floor(decimal / 2)\n   \
    \ binary = binary .. mod\n  end\n  binary = \"db\" .. binary .. \"db\"\n  return\
    \ binary\nend", "    local result = \"db\"\n    local divisor = 32\n    for _\
    \ = 1, 5 do\n        local quotient = decimal / divisor\n        if quotient >=\
    \ 1 then\n            result = result .. \"1\"\n            decimal = decimal\
    \ - divisor\n        else\n            result = result .. \"0\"\n        end\n\
    \        divisor = divisor / 2\n    end\n    return result .. \"db\"\nend", " \
    \   local bits = {}\n    repeat\n        local rest = math.fmod(decimal, 2)\n\
    \        table.insert(bits, rest)\n        decimal = (decimal - rest) / 2\n  \
    \  until decimal == 0\n    return \"db\" .. table.concat(bits):reverse() .. \"\
    db\"\nend", "    local result = ''\n    local digit\n    while decimal > 0 do\n\
    \        digit = decimal % 2\n        result = result .. digit\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return 'db' .. string.reverse(result)\
    \ .. 'db'\nend", "  local binary = \"\"\n  repeat\n    local r = decimal % 2\n\
    \    decimal = (decimal - r) / 2\n    binary = r .. binary\n  until decimal ==\
    \ 0\n  return \"db\" .. binary .. \"db\"\nend", "    local n = decimal -- the\
    \ decimal number\n    local b = '' -- the binary number\n    local db = '' --\
    \ the string to return\n    while (n ~= 0) do\n        local r = n % 2\n     \
    \   n = math.floor(n / 2)\n        b = r .. b\n    end\n    return \"db\" .. b\
    \ .. \"db\"\nend", "  -- This function works in the order of powers.  It starts\
    \ with 2 ^ 0, 2 ^ 1, 2 ^ 2, 2 ^ 3, ...\n  -- This is the easiest way to do it,\
    \ since it's modular arithmatic.\n  -- It's the same as using binary by powers\
    \ of 2, but we do it backwards.\n  -- For example, if we have the number 15, the\
    \ table would look like this:\n  --                                          \
    \  2 ^ 3      2 ^ 2      2 ^ 1      2 ^ 0\n  --                              \
    \              8          4          2          1\n  --    15 - 8 = 7, 7 - 4 =\
    \ 3, 3 - 2 = 1, 1 - 1 = 0\n  -- =>  15 - 8 - 4 - 2 - 1 = 0\n  -- =>  15 = 1 *\
    \ 8 + 1 * 4 + 1 * 2 + 1 * 1\n  -- =>  15 = 1 * 2 ^ 3 + 1 * 2 ^ 2 + 1 * 2 ^ 1 +\
    \ 1 * 2 ^ 0\n  -- =>  15 = 2 ^ 3 + 2 ^ 2 + 2 ^ 1 + 2 ^ 0", "    local str = \"\
    db\"\n    while (decimal ~= 0) do\n        if (decimal % 2 == 0) then\n      \
    \      str = \"0\" .. str\n        else\n            str = \"1\" .. str\n    \
    \    end\n        decimal = math.floor(decimal / 2)\n    end\n    str = str ..\
    \ \"db\"\n    return str\nend", "    local digits = \"\"\n    repeat\n       \
    \ local remainder = decimal % 2\n        digits = tostring(remainder) .. digits\n\
    \        decimal = math.floor(decimal / 2)\n    until decimal == 0\n    return\
    \ \"db\" .. digits .. \"db\"\nend", "\t-- body\n\tlocal binstr = \"db\"\n\twhile\
    \ decimal > 0 do\n\t\tbinstr = binstr .. (decimal % 2)\n\t\tdecimal = decimal\
    \ / 2\n\tend\n\tbinstr = binstr .. \"db\"\n\treturn binstr\nend", "  local binary\
    \ = {}\n  while decimal > 0 do\n    table.insert(binary, decimal % 2)\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  table.insert(binary, 'db')\n  table.insert(binary,\
    \ 1, 'db')\n  return table.concat(binary)\nend", "\tlocal binary = \"\"\n\trepeat\n\
    \t\tbinary = string.format(\"%d%s\", decimal % 2, binary)\n\t\tdecimal = math.floor(decimal\
    \ / 2)\n\tuntil (decimal <= 0)\n\treturn string.format(\"db%sdb\", binary)\nend",
  "\tlocal converted = \"db\"\n\twhile (decimal ~= 0) do\n\t\tconverted = converted\
    \ .. (decimal % 2)\n\t\tdecimal = math.floor(decimal / 2)\n\tend\n\tconverted\
    \ = converted .. \"db\"\n\treturn converted\nend", "  local binary = 'db'\n  while\
    \ decimal > 0 do\n    local rem = decimal % 2\n    binary = rem .. binary\n  \
    \  decimal = (decimal - rem) / 2\n  end\n  binary = binary .. 'db'\n  return binary\n\
    end", "  -- Use bitwise operators to convert decimal to binary\n  local n = decimal\n\
    \  local binary = \"\"\n  while (n ~= 0) do\n    binary = (n % 2) .. binary\n\
    \    n = math.floor(n / 2)\n  end\n  -- Add extra couple of characters 'db' at\
    \ the beginning and at the end of the string\n  binary = \"db\" .. binary .. \"\
    db\"\n  return binary\nend", "    local function trim(s)\n        local from =\
    \ s:match\"^%s*()\"\n        return from > #s and \"\" or s:match(\".*%S\", from)\n\
    \    end\n    local result = ''\n    while decimal ~= 0 do\n        result = result\
    \ .. tostring(decimal % 2)\n        decimal = decimal // 2\n    end\n    return\
    \ trim(string.reverse('db' .. result .. 'db'))\nend", "  if type(decimal) ~= \"\
    number\" then return nil end\n  local result = \"db\"\n  local bd\n  repeat\n\
    \    bd = decimal % 2\n    decimal = math.floor(decimal / 2)\n    result = result\
    \ .. tostring(bd)\n  until decimal == 0\n  return result .. \"db\"\nend", "  local\
    \ function divide(decimal)\n    local result = \"\"\n    local divide = 2\n  \
    \  while (decimal > 0) do\n      if (decimal % divide > 0) then\n        result\
    \ = \"1\" .. result\n      else\n        result = \"0\" .. result\n      end\n\
    \      decimal = (decimal - (decimal % divide)) / divide\n    end\n    return\
    \ result\n  end\n  return \"db\" .. divide(decimal) .. \"db\"\nend", "  local\
    \ binary = \"\"\n  while decimal > 0 do\n    local q = decimal % 2\n    binary\
    \ = q .. binary\n    decimal = (decimal - q) / 2\n  end\n  return \"db\" .. binary\
    \ .. \"db\"\nend", "  local str = \"db\"\n  local n = decimal\n  repeat\n    str\
    \ = str .. n % 2\n    n = math.floor(n / 2)\n  until n == 0\n  return str .. \"\
    db\"\nend", "  if decimal == 0 then\n    return \"db0db\"\n  end\n  local bin\
    \ = \"\"\n  while decimal > 0 do\n    bin = string.char(string.byte(\"0\") + (decimal\
    \ % 2)) .. bin\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. bin .. \"db\"\nend", "  local decimal = decimal or 0\n  local binary = dec_to_bin(decimal)\n\
    \  return \"db\" .. binary .. \"db\"\nend", "  local result = \"db\"\n  while\
    \ decimal > 0 do\n    local mod = math.fmod(decimal, 2)\n    result = mod .. result\n\
    \    decimal = math.floor(decimal / 2)\n  end\n  return result .. \"db\"\nend",
  "    local result = \"db\"\n    while decimal > 0 do\n        local digit = decimal\
    \ % 2\n        result = digit .. result\n        decimal = (decimal - digit) /\
    \ 2\n    end\n    return result .. \"db\"\nend", "  local binary = \"\"\n  local\
    \ bin_str = \"db\"\n  while decimal > 0 do\n    local r = decimal % 2\n    binary\
    \ = binary .. r\n    decimal = math.floor(decimal / 2)\n  end\n  return bin_str\
    \ .. binary .. bin_str\nend", "    local result = {}\n    local n = math.floor(decimal\
    \ / 2)\n    result[1] = math.fmod(decimal, 2)\n    local i = 2\n    while n >\
    \ 0 do\n        result[i] = math.fmod(n, 2)\n        n = math.floor(n / 2)\n \
    \       i = i + 1\n    end\n    local r = \"db\"\n    for i = #result, 1, -1 do\n\
    \        r = r .. result[i]\n    end\n    return r .. \"db\"\nend", "\treturn\
    \ \"db\" .. string.format(\"%064b\", decimal) .. \"db\"\nend", "    local bin\
    \ = \"\"\n    while decimal > 0 do\n        local rest = decimal % 2\n       \
    \ bin = tostring(rest) .. bin\n        decimal = (decimal - rest) / 2\n    end\n\
    \    return \"db\" .. bin .. \"db\"\nend", "    -- your code here\nend", "   \
    \ local binary = \"\"\n    local bin\n    local is_negative = decimal < 0\n  \
    \  if decimal < 0 then\n        decimal = decimal * -1\n    end\n    local integer,\
    \ fraction = math.modf(decimal)\n    for i = 0, 32 do\n        bin = integer %\
    \ 2\n        binary = string.char(bin + 48) .. binary\n        integer = (integer\
    \ - bin) / 2\n    end\n    binary = (is_negative and '1' or '0') .. binary ..\
    \ \".\"\n    integer = fraction\n    for i = 0, 32 do\n        integer = integer\
    \ * 2\n        if integer >= 1 then\n            binary = binary .. '1'\n    \
    \        integer = integer - 1\n        else\n            binary = binary .. '0'\n\
    \        end\n    end\n    return 'db' .. binary .. 'db'\nend", "    local result\
    \ = ''\n    while decimal > 0 do\n        local r = decimal % 2\n        decimal\
    \ = (decimal - r) / 2\n        result = r .. result\n    end\n    return 'db'\
    \ .. result .. 'db'\nend", "  local result = ''\n  while (decimal ~= 0) do\n \
    \   result = result .. tostring(decimal % 2)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. result .. 'db'\nend", "    local binary = ''\n\
    \    local reminder\n    local quotient = decimal\n    local count = 1\n    local\
    \ tmp = nil\n    if quotient > 0 then\n        repeat\n            reminder =\
    \ quotient % 2\n            quotient = (quotient - reminder) / 2\n           \
    \ binary = binary .. reminder\n            count = count + 1\n        until quotient\
    \ <= 0\n    else\n        binary = binary .. '0'\n    end\n    -- we have binary\
    \ as a string in reverse order.\n    -- we need to reverse it to have right order\n\
    \    -- return 'db' .. string.reverse(binary) .. 'db'\n    -- second way to reverse\
    \ a string.\n    local reverse_binary = 'db'\n    for i = string.len(binary),\
    \ 1, -1 do\n        reverse_binary = reverse_binary .. string.sub(binary, i, i)\n\
    \    end\n    return reverse_binary .. 'db'\nend", "    return \"db\" .. dec_to_bin(decimal)\
    \ .. \"db\"\nend", "  local result = \"\"\n  while decimal > 0 do\n    result\
    \ = result .. tostring(decimal % 2)\n    decimal = math.floor(decimal / 2)\n \
    \ end\n  return \"db\" .. string.reverse(result) .. \"db\"\nend", "    local binary\
    \ = \"\"\n    local remainder\n    repeat\n        remainder = decimal % 2\n \
    \       decimal = (decimal - remainder) / 2\n        binary = remainder .. binary\n\
    \    until decimal == 0\n    return \"db\" .. binary .. \"db\"\nend", "  return\
    \ \"db\" .. string.format(\"%b\", decimal) .. \"db\"\nend", "  if decimal < 0\
    \ then\n    decimal = 2^(32) + decimal\n  end\n  local binary = \"db\"\n  while\
    \ decimal > 0 do\n    binary = binary .. decimal % 2\n    decimal = decimal //\
    \ 2\n  end\n  return binary .. \"db\"\nend", "  if not decimal then\n    return\
    \ nil\n  end\n  local binary = ''\n  while decimal > 0 do\n    local remainder\
    \ = decimal % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. string.reverse(binary) .. 'db'\nend", "  local\
    \ binary = ''\n  while decimal > 0 do\n    local rest = decimal % 2\n    binary\
    \ = tostring(rest) .. binary\n    decimal = (decimal - rest) / 2\n  end\n  local\
    \ binary = 'db' .. binary .. 'db'\n  return binary\nend", "  local hex, b = string.format(\"\
    %x\", decimal)\n  local out = \"db\"\n  for i = 1, #hex do\n    local nibble =\
    \ hex:sub(i, i)\n    if nibble == \"0\" then\n      out = out .. \"0000\"\n  \
    \  elseif nibble == \"1\" then\n      out = out .. \"0001\"\n    elseif nibble\
    \ == \"2\" then\n      out = out .. \"0010\"\n    elseif nibble == \"3\" then\n\
    \      out = out .. \"0011\"\n    elseif nibble == \"4\" then\n      out = out\
    \ .. \"0100\"\n    elseif nibble == \"5\" then\n      out = out .. \"0101\"\n\
    \    elseif nibble == \"6\" then\n      out = out .. \"0110\"\n    elseif nibble\
    \ == \"7\" then\n      out = out .. \"0111\"\n    elseif nibble == \"8\" then\n\
    \      out = out .. \"1000\"\n    elseif nibble == \"9\" then\n      out = out\
    \ .. \"1001\"\n    elseif nibble == \"a\" then\n      out = out .. \"1010\"\n\
    \    elseif nibble == \"b\" then\n      out = out .. \"1011\"\n    elseif nibble\
    \ == \"c\" then\n      out = out .. \"1100\"\n    elseif nibble == \"d\" then\n\
    \      out = out .. \"1101\"\n    elseif nibble == \"e\" then\n      out = out\
    \ .. \"1110\"\n    elseif nibble == \"f\" then\n      out = out .. \"1111\"\n\
    \    end\n  end\n  return out .. \"db\"\nend", "\tlocal left = decimal\n\tlocal\
    \ result = \"db\"\n\twhile left ~= 0 do\n\t\tif left % 2 == 0 then\n\t\t\tresult\
    \ = \"0\" .. result\n\t\telse\n\t\t\tresult = \"1\" .. result\n\t\tend\n\t\tleft\
    \ = math.floor(left / 2)\n\tend\n\treturn result .. \"db\"\nend", "  local ret\
    \ = ''\n  local finish = false\n  repeat\n    if math.floor(decimal/2) == 0 then\n\
    \      finish = true\n    end\n    ret = math.fmod(decimal, 2) .. ret\n    decimal\
    \ = math.floor(decimal/2)\n  until finish == true\n  return 'db' .. ret .. 'db'\n\
    end", "  return \"db\" .. string.format(\"%08b\", decimal) .. \"db\"\nend", " \
    \   local t = {}\n    local db_index = math.floor(decimal / 2)", "  local binary\
    \ = \"db\"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary\
    \ = string.format(\"%d%s\", remainder, binary)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. \"db\"\nend", "    local binary = \"\"\n   \
    \ while decimal > 0 do\n        local b = tostring(decimal % 2)\n        binary\
    \ = b .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend", "    -- YOUR CODE HERE\nend", "  local bin\
    \ = \"\"\n  repeat\n    local b\n    b, decimal = math.modf(decimal / 2)\n   \
    \ bin = string.format(\"%d%s\", decimal, bin)\n    decimal = b\n  until decimal\
    \ == 0\n  return \"db\" .. bin .. \"db\"\nend", "  local binary = \"db\"\n  while\
    \ decimal > 0 do\n    local bit = decimal % 2\n    binary = tostring(bit) .. binary\n\
    \    decimal = math.floor(decimal / 2)\n  end\n  binary = binary .. \"db\"\n \
    \ return binary\nend", "  local bin\n  local db = 'db'\n  local nums = {}\n  repeat\n\
    \    local remainder = decimal % 2\n    table.insert(nums, remainder)\n    decimal\
    \ = (decimal - remainder) / 2\n  until decimal == 0\n  bin = db\n  for i = #nums,\
    \ 1, -1 do\n    bin = bin .. nums[i]\n  end\n  bin = bin .. db\n  return bin\n\
    end", "  local binary, scale = {}\n  scale = 2\n  while decimal > 0 do\n    local\
    \ remainder = decimal % scale\n    table.insert(binary, 1, remainder)\n    decimal\
    \ = (decimal - remainder) / scale\n  end\n  local binary_string = \"db\"\n  for\
    \ _, v in ipairs(binary) do\n    binary_string = binary_string .. tostring(v)\n\
    \  end\n  return binary_string .. \"db\"\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
