name: HumanEval_26_remove_duplicates
language: lua
results:
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ no_duplicates = {}\n    local already_seen = {}\n    for _, v in ipairs(numbers)\
    \ do\n        if not already_seen[v] then\n            no_duplicates[#no_duplicates\
    \ + 1] = v\n            already_seen[v] = true\n        end\n    end\n    return\
    \ no_duplicates\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_v2aad93.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_v2aad93.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local duplicates = {}\n    for _,n in ipairs(numbers) do\n\
    \        if not duplicates[n] then\n            result[#result+1] = n\n      \
    \      duplicates[n] = true\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v7q8gt3.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp9v7q8gt3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = Set()\n    local result = {}\n    for _, v in ipairs(numbers) do\n   \
    \     if not set:contains(v) then\n            set:add(v)\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_v_tasm.lua:6:\
    \ attempt to call a nil value (global 'Set')\nstack traceback:\n\t/tmp/tmpg_v_tasm.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpg_v_tasm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruj0g7v8.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpruj0g7v8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ numbers_set = {}\n    local non_duplicates = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not numbers_set[number] then\n            numbers_set[number]\
    \ = true\n            table.insert(non_duplicates, number)\n        end\n    end\n\
    \    return non_duplicates\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8llyn1av.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8llyn1av.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local set = {}\n    for _, n in ipairs(numbers) do\n      \
    \  if not set[n] then\n            result[#result + 1] = n\n            set[n]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm6k7bxf.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpwm6k7bxf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfa_27ue.lua:12:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwfa_27ue.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    return\
    \ nub(numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpklgq2k8r.lua:6:\
    \ attempt to call a nil value (global 'nub')\nstack traceback:\n\t/tmp/tmpklgq2k8r.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpklgq2k8r.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local freq = {}\n  for _, number in ipairs(numbers) do\n    freq[number]\
    \ = freq[number] or 0\n    freq[number] = freq[number] + 1\n  end\n  for _, number\
    \ in ipairs(numbers) do\n    if freq[number] == 1 then\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vy7uadh.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp6vy7uadh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ foldl(function(list, number)\n    if count(number, numbers) == 1 then\n    \
    \  table.insert(list, number)\n    end\n    return list\n  end, {}, numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgq1kyx4x.lua:6:\
    \ attempt to call a nil value (global 'foldl')\nstack traceback:\n\t/tmp/tmpgq1kyx4x.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpgq1kyx4x.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ ret = {}\n\tlocal uniques = {}\n\tfor _, number in ipairs(numbers) do\n\t\t\
    if not uniques[number] then\n\t\t\tuniques[number] = true\n\t\t\ttable.insert(ret,\
    \ number)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_x_ny4t.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp7_x_ny4t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ used = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n     \
    \   if not used[v] then\n            table.insert(result, v)\n            used[v]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknzrlumg.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpknzrlumg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for i, n in ipairs(numbers) do\n        if not unique[n] then\n\
    \            unique[n] = true\n            numbers[i] = n\n        else\n    \
    \        numbers[i] = nil\n        end\n    end\n    return numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17kk2vtw.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 5=4, 7=5}\nstack traceback:\n\t/tmp/tmp17kk2vtw.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ ret = {}\n    local seen = {}\n    for i = 1, #numbers do\n        local num\
    \ = numbers[i]\n        if not seen[num] then\n            ret[#ret + 1] = num\n\
    \            seen[num] = true\n        end\n    end\n    return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm7y5dgz.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmppm7y5dgz.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            seen[number] = true\n         \
    \   table.insert(result, number)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtlveuaq.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpdtlveuaq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n     \
    \   if not seen[v] then\n            table.insert(result, v)\n            seen[v]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprowzgc2h.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmprowzgc2h.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n      \
    \  if not set[n] then\n            table.insert(result, n)\n            set[n]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvauxu_sm.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvauxu_sm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if not\
    \ seen[num] then\n      table.insert(result, num)\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiowl4sc.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpgiowl4sc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ set = {}\n\tlocal res = {}\n\tfor _, v in ipairs(numbers) do\n\t\tif not set[v]\
    \ then\n\t\t\tset[v] = true\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjorvkv9.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpsjorvkv9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ res = {}\n\tlocal have = {}\n\tfor _, num in ipairs(numbers) do\n\t\tif not\
    \ have[num] then\n\t\t\ttable.insert(res, num)\n\t\t\thave[num] = true\n\t\tend\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0de2kzx.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpg0de2kzx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswyrhtix.lua:13:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpswyrhtix.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = {}\n    local ret = {}\n    for _, num in ipairs(numbers) do\n       \
    \ if not set[num] then\n            set[num] = true\n            table.insert(ret,\
    \ num)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoht_ul7p.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpoht_ul7p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for index, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      seen[number] = true\n      output[#output\
    \ + 1] = number\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x4eebdc.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp7x4eebdc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      seen[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_k4fwr0.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpw_k4fwr0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if not unique[number]\
    \ then\n            unique[number] = true\n            coroutine.yield(number)\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_raqdht.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpd_raqdht.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ res = {}\n\tlocal record = {}\n\tfor _, value in ipairs(numbers) do\n\t\tif\
    \ not record[value] then\n\t\t\tres[#res + 1] = value\n\t\t\trecord[value] = true\n\
    \t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pp7yk50.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_pp7yk50.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ output = {}\n\tlocal added = {}\n\tfor _, number in ipairs(numbers) do\n\t\t\
    if not added[number] then\n\t\t\ttable.insert(output, number)\n\t\t\tadded[number]\
    \ = true\n\t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyn01lzhh.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpyn01lzhh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ TODO: implement\n  return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mc_kmua.lua:15:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp1mc_kmua.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ known = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not known[number] then\n            result[#result + 1] = number\n\
    \            known[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rqma63x.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_rqma63x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, num in ipairs(numbers) do\n   \
    \     if not seen[num] then\n            seen[num] = true\n            table.insert(result,\
    \ num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x9zeg0b.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp7x9zeg0b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ function exists(needle, haystack)\n        for _, value in ipairs(haystack)\
    \ do\n            if value == needle then\n                return true\n     \
    \       end\n        end\n        return false\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppf9z_trd.lua:23: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if not unique[number]\
    \ then\n            unique[number] = true\n            coroutine.yield(number)\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cvlhuf4.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1cvlhuf4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    return\
    \ table.from_array(array.unique(table.to_array(numbers)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjz_d63p8.lua:6:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmpjz_d63p8.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpjz_d63p8.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivr1eg9w.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpivr1eg9w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            unique[number] = nil\n        else\n            unique[number]\
    \ = true\n        end\n    end\n    local result = {}\n    for number, _ in pairs(unique)\
    \ do\n        table.insert(result, number)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            seen[number] = true\n         \
    \   table.insert(result, number)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf00w1nqh.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpf00w1nqh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ occurrences = {}\n  local uniques = {}\n  for _, number in ipairs(numbers) do\n\
    \    if occurrences[number] then\n      occurrences[number] = occurrences[number]\
    \ + 1\n    else\n      occurrences[number] = 1\n    end\n  end\n  for _, number\
    \ in ipairs(numbers) do\n    if occurrences[number] == 1 then\n      table.insert(uniques,\
    \ number)\n    end\n  end\n  return uniques\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, num in ipairs(numbers) do\n   \
    \     if not seen[num] then\n            seen[num] = true\n            table.insert(result,\
    \ num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4d5eey_.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmps4d5eey_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = {}\n    local res = {}\n    for _,n in ipairs(numbers) do\n        if\
    \ not set[n] then\n            res[#res+1] = n\n            set[n] = true\n  \
    \      end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktemvcrg.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpktemvcrg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ map = {}\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not\
    \ map[n] then\n\t\t\tmap[n] = true\n\t\t\ttable.insert(result, n)\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj743a1cd.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpj743a1cd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local output = {}\n    for _, value in ipairs(numbers) do\n \
    \       if not seen[value] then\n            output[#output + 1] = value\n   \
    \         seen[value] = true\n        end\n    end\n    return output\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk33971fz.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpk33971fz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  if\
    \ #numbers == 0 then\n    return {}\n  end\n  local seen = {}\n  local res = {}\n\
    \  for _, element in ipairs(numbers) do\n    if not seen[element] then\n     \
    \ seen[element] = true\n      res[#res + 1] = element\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0n2ukux.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpy0n2ukux.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _, v in ipairs(numbers) do\n    unique[v] = (unique[v] or\
    \ 0) + 1\n  end\n  local result = {}\n  for _, v in ipairs(numbers) do\n    if\
    \ unique[v] == 1 then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  for _, v in ipairs(numbers) do\n    if not seen[v] then\n     \
    \ seen[v] = true\n    else\n      seen[v] = nil\n    end\n  end\n  local result\
    \ = {}\n  for k, _ in pairs(seen) do\n    table.insert(result, k)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ known = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n    \
    \    if not known[n] then\n            table.insert(result, n)\n            known[n]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulkyun2l.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpulkyun2l.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n\
    \            seen[n] = true\n        else\n            seen[n] = nil\n       \
    \ end\n    end\n    local r = {}\n    for k, _ in pairs(seen) do\n        table.insert(r,\
    \ k)\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, n in ipairs(numbers) do\n        if not unique[n] then\n\
    \            unique[n] = true\n            coroutine.yield(n)\n        end\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4dvfp9_.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpe4dvfp9_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local index = {}\n  for _, number in ipairs(numbers) do\n   \
    \ if not index[number] then\n      index[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0jcd23i.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpv0jcd23i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, value in ipairs(numbers) do\n    if\
    \ not seen[value] then\n      table.insert(result, value)\n      seen[value] =\
    \ true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5y_wxrt.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpt5y_wxrt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ numbers_seen = {}\n    local unique_numbers = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not numbers_seen[n] then\n            table.insert(unique_numbers,\
    \ n)\n            numbers_seen[n] = true\n        end\n    end\n    return unique_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tmbc94n.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp2tmbc94n.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ numbers_no_dupes = {}\n    local seen = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(numbers_no_dupes,\
    \ number)\n            seen[number] = true\n        end\n    end\n    return numbers_no_dupes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajswj1ve.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpajswj1ve.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local seen_once = {}\n  for i = 1, #numbers do\n    local num =\
    \ numbers[i]\n    if seen[num] then\n      seen[num] = 2\n    else\n      seen[num]\
    \ = 1\n      seen_once[#seen_once + 1] = num\n    end\n  end\n  local result =\
    \ {}\n  for i = 1, #seen_once do\n    local num = seen_once[i]\n    if seen[num]\
    \ == 1 then\n      result[#result + 1] = num\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _, n in ipairs(numbers) do\n    unique[n] = true\n  end\n\
    \  local copy = {}\n  for _, n in ipairs(numbers) do\n    if unique[n] then\n\
    \      unique[n] = nil\n      table.insert(copy, n)\n    end\n  end\n  return\
    \ copy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv8qj7bg.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpkv8qj7bg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ seen[n] then\n      seen[n] = true\n      table.insert(result, n)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybbksb0e.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpybbksb0e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            unique[number] = nil\n        else\n            unique[number]\
    \ = true\n        end\n    end\n    return table.keys(unique)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6a2fk5a0.lua:14:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp6a2fk5a0.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp6a2fk5a0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local prev = 0\n    for _, i in ipairs(numbers) do\n      \
    \  if i ~= prev then\n            result[#result + 1] = i\n        end\n     \
    \   prev = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza2neyxy.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpza2neyxy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ seen[n] then\n      table.insert(output, n)\n      seen[n] = true\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nefa6tv.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp0nefa6tv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ checked = {}\n    local result = {}\n    for i = 1, #numbers do\n        local\
    \ n = numbers[i]\n        if not checked[n] then\n            checked[n] = true\n\
    \            result[#result + 1] = n\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph97bppvi.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmph97bppvi.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n    if not\
    \ seen[num] then\n      seen[num] = true\n      table.insert(result, num)\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvygr9q_f.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvygr9q_f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, v in ipairs(numbers) do\n    if not\
    \ seen[v] then\n      result[#result + 1] = v\n      seen[v] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_zinsw.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpc5_zinsw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ occurences = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not occurences[number] then\n            result[#result + 1]\
    \ = number\n            occurences[number] = true\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40u4_sek.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp40u4_sek.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ ht = {}\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not ht[n]\
    \ then\n\t\t\tht[n] = true\n\t\t\ttable.insert(result, n)\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2u8tlad.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpy2u8tlad.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ no_duplicates = {}\n\tfor _, number in ipairs(numbers) do\n\t\tlocal found =\
    \ false\n\t\tfor i, _ in ipairs(no_duplicates) do\n\t\t\tif no_duplicates[i] ==\
    \ number then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif\
    \ not found then\n\t\t\ttable.insert(no_duplicates, number)\n\t\tend\n\tend\n\t\
    return no_duplicates\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpke6htrqo.lua:27:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpke6htrqo.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ new_numbers = {}\n    local already_in = {}\n    for i = 1, #numbers do\n  \
    \      local number = numbers[i]\n        if not already_in[number] then\n   \
    \         already_in[number] = true\n            new_numbers[#new_numbers + 1]\
    \ = number\n        end\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplck_xrsk.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmplck_xrsk.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  return\
    \ numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuujkpyzp.lua:14:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpuujkpyzp.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, num in ipairs(numbers) do\n   \
    \     if not seen[num] then\n            seen[num] = true\n            table.insert(result,\
    \ num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3z8yoc9.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_3z8yoc9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ len = #numbers\n    local keys = {}\n    local last_key\n    local value\n \
    \   local insert_pos = 1\n    for i = 1, len do\n        last_key = keys[last_key]\n\
    \        value = numbers[i]\n        if last_key == value then\n            last_key\
    \ = nil\n        else\n            numbers[insert_pos] = value\n            last_key\
    \ = keys[value]\n            keys[value] = insert_pos\n            insert_pos\
    \ = insert_pos + 1\n        end\n    end\n    for i = insert_pos, len do\n   \
    \     numbers[i] = nil\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpholergk9.lua:34:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 3}\nstack traceback:\n\t/tmp/tmpholergk9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ seen = {}\n\tfor i, n in ipairs(numbers) do\n\t\tif seen[n] then\n\t\t\tnumbers[i]\
    \ = nil\n\t\telse\n\t\t\tseen[n] = true\n\t\tend\n\tend\n\treturn numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwb7sf_t.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 5=4, 7=5}\nstack traceback:\n\t/tmp/tmphwb7sf_t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for n, nv in ipairs(numbers) do\n    \
    \    if not seen[nv] then\n            table.insert(result, nv)\n            seen[nv]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_ebastx.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpi_ebastx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local indexes = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not indexes[number] then\n            result[#result + 1] = number\n\
    \            indexes[number] = true\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa999bg94.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpa999bg94.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n \
    \       if not set[number] then\n            set[number] = true\n            table.insert(result,\
    \ number)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfhi1uf_.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvfhi1uf_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, i in ipairs(numbers) do\n    if not\
    \ seen[i] then\n      table.insert(result, i)\n      seen[i] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpsc28s1.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfpsc28s1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ tmp = {}\n    local rtn = {}\n    for _, value in ipairs(numbers) do\n     \
    \   if tmp[value] then\n            tmp[value] = tmp[value] + 1\n        else\n\
    \            tmp[value] = 1\n        end\n    end\n    for _, value in ipairs(numbers)\
    \ do\n        if tmp[value] == 1 then\n            table.insert(rtn, value)\n\
    \        end\n    end\n    return rtn\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ keys = {}\n    local vals = {}\n    for _, v in ipairs(numbers) do\n       \
    \ keys[v] = (keys[v] or 0) + 1\n        if keys[v] == 1 then\n            table.insert(vals,\
    \ v)\n        end\n    end\n    return vals\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38xr9l1f.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp38xr9l1f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number] = true\n\
    \  end\n  return keys(unique)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpthca56sq.lua:10:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpthca56sq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpthca56sq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ uniques = {}\n    local seen = {}\n    for _, num in ipairs(numbers) do\n  \
    \      if not seen[num] then\n            uniques[#uniques + 1] = num\n      \
    \      seen[num] = true\n        end\n    end\n    return uniques\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq1cfgz0.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmprq1cfgz0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjrwu0z9.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpdjrwu0z9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ length = #numbers\n\tlocal set = {}\n\tlocal result = {}\n\tfor i = 1, length\
    \ do\n\t\tlocal num = numbers[i]\n\t\tif not set[num] then\n\t\t\tresult[#result\
    \ + 1] = num\n\t\t\tset[num] = true\n\t\tend\n\tend\n\treturn result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2lexrdi.lua:24:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_2lexrdi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _,number in ipairs(numbers) do\n        if not unique[number]\
    \ then\n            unique[number] = true\n            table.insert(unique, number)\n\
    \        end\n    end\n    return unique\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyw44r4cx.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {true, 1, true, 3}\nstack traceback:\n\t/tmp/tmpyw44r4cx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ idx is a table where each index holds a list of all the input numbers seen\n\
    \  -- so far with that value.\n  local idx = {}\n  local ret = {}\n  for i, n\
    \ in ipairs(numbers) do\n    -- If we've seen this number before, then mark it\
    \ as nil\n    if idx[n] then\n      numbers[i] = nil\n    else\n      idx[n] =\
    \ true\n      ret[#ret+1] = n\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44hdqx0w.lua:27:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp44hdqx0w.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            seen[number] = true\n         \
    \   table.insert(result, number)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j7_1aht.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp1j7_1aht.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = Set(numbers)\n    local list = {}\n    for _, v in pairs(set.items) do\n\
    \        table.insert(list, v)\n    end\n    return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0hc8826q.lua:6:\
    \ attempt to call a nil value (global 'Set')\nstack traceback:\n\t/tmp/tmp0hc8826q.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0hc8826q.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ table = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n    \
    \    if table[v] == nil then\n            table[v] = true\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfmnx0r1s.lua:11:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpfmnx0r1s.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpfmnx0r1s.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n     \
    \   if not seen[v] then\n            table.insert(result, v)\n            seen[v]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhwyj4bm.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfhwyj4bm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ found = {}\n    local result = {}\n    for _,v in ipairs(numbers) do\n     \
    \   if not found[v] then\n            table.insert(result, v)\n            found[v]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e4h1dm6.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp1e4h1dm6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ Use a table for fast checking of membership.\n    local seen = {}\n    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(unique, number)\n            seen[number] = true\n\
    \        end\n    end\n    return unique\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfzzf66k.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpwfzzf66k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local added = {}\n    for i, n in ipairs(numbers) do\n    \
    \    if not added[n] then\n            result[#result + 1] = n\n            added[n]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vvjf5t8.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp6vvjf5t8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local output = {}\n  for _,x in ipairs(numbers) do\n    if not\
    \ seen[x] then\n      table.insert(output, x)\n      seen[x] = true\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeoumjao.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpgeoumjao.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local function add_unique(v)\n    if not seen[v] then\n      seen[v]\
    \ = true\n      return true\n    end\n  end\n  return filter(add_unique, numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph2a5tqhr.lua:13:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmph2a5tqhr.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmph2a5tqhr.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ hash = {}\n  local result = {}\n  for _, i in ipairs(numbers) do\n    if not\
    \ hash[i] then\n      hash[i] = true\n      table.insert(result, i)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7tu4gjt.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpt7tu4gjt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local count = {}\n  for i, n in ipairs(numbers) do\n    if count[n]\
    \ == nil then\n      count[n] = 0\n    end\n    count[n] = count[n] + 1\n    if\
    \ count[n] == 1 then\n      table.insert(result, n)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoao2c83.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpyoao2c83.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ unique = {}\n\tfor _, num in ipairs(numbers) do\n\t\tunique[num] = true\n\t\
    end\n\tlocal result = {}\n\tfor _, num in ipairs(numbers) do\n\t\tif unique[num]\
    \ then\n\t\t\ttable.insert(result, num)\n\t\t\tunique[num] = false\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxezivppo.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxezivppo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\t--\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0gtwjvd.lua:12:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpo0gtwjvd.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ I take it the order matters?\n  local ordered = {}\n  local unordered = {}\n\
    \  local result = {}\n  for _, v in ipairs(numbers) do\n    if unordered[v] ==\
    \ nil then\n      ordered[#ordered + 1] = v\n      unordered[v] = true\n    end\n\
    \  end\n  return ordered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv10y9q6d.lua:24:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpv10y9q6d.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ uniques = {}\n    local no_dups = {}\n    for _, n in ipairs(numbers) do\n \
    \       if not uniques[n] then\n            uniques[n] = true\n            table.insert(no_dups,\
    \ n)\n        end\n    end\n    return no_dups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0g0zd7jc.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp0g0zd7jc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ processed = {}\n  local not_occured = {}\n  for i, v in ipairs(numbers) do\n\
    \    if not processed[v] then\n      table.insert(not_occured, v)\n      processed[v]\
    \ = true\n    end\n  end\n  return not_occured\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqc5dd7r.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpyqc5dd7r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _, v in ipairs(numbers) do\n    unique[v] = true\n  end\n\
    \  local res = {}\n  for _, v in ipairs(numbers) do\n    if unique[v] then\n \
    \     res[#res + 1] = v\n      unique[v] = nil\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ty7v4nm.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp7ty7v4nm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, num in ipairs(numbers) do\n   \
    \     if not seen[num] then\n            table.insert(result, num)\n         \
    \   seen[num] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulji0ghh.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpulji0ghh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = {}\n    local result = {}\n    for _, num in ipairs(numbers) do\n    \
    \    if not set[num] then\n            table.insert(result, num)\n           \
    \ set[num] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4xh8gfp.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpd4xh8gfp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local dict = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ dict[n] then\n      dict[n] = true\n      table.insert(result, n)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c4h2vzw.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp6c4h2vzw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local unique = {}\n    for _, value in ipairs(numbers) do\n \
    \       if not seen[value] then\n            table.insert(unique, value)\n   \
    \         seen[value] = true\n        end\n    end\n    return unique\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wh7grq9.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp9wh7grq9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, n in ipairs(numbers) do\n        if not unique[n] then\n\
    \            unique[n] = true\n            coroutine.yield(n)\n        end\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehsuzv4a.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpehsuzv4a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ set = {}\n    local result = {}\n    for i, v in ipairs(numbers) do\n      \
    \  if not set[v] then\n            result[#result + 1] = v\n            set[v]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq8e3hsb.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpoq8e3hsb.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ i = 1\n    while i <= #numbers do\n        if utils.contains(numbers, numbers[i],\
    \ i + 1) then\n            table.remove(numbers, i)\n        else\n          \
    \  i = i + 1\n        end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqfilxai.lua:8:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpeqfilxai.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpeqfilxai.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n     \
    \   if not seen[n] then\n            table.insert(result, n)\n            seen[n]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h7clazj.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp4h7clazj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ found = {}\n    local unique = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not found[number] then\n            unique[#unique + 1] = number\n\
    \            found[number] = true\n        end\n    end\n    return unique\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2tlzzv7.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpm2tlzzv7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ set = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n    if not\
    \ set[v] then\n      table.insert(result, v)\n      set[v] = true\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxa981571.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxa981571.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ unique = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not unique[n] then\n\t\
    \t\tunique[n] = true\n\t\t\tcoroutine.yield(n)\n\t\tend\n\tend\nend\nassert(table.concat(remove_duplicates\
    \ {}, \",\") == \"\")\nassert(table.concat(remove_duplicates {1}, \",\") == \"\
    1\")\nassert(table.concat(remove_duplicates {1, 2, 3, 2, 4}, \",\") == \"1,3,4\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjht1axfg.lua:14: bad argument #1 to 'concat' (table expected,\
    \ got nil)\nstack traceback:\n\t[C]: in function 'table.concat'\n\t/tmp/tmpjht1axfg.lua:14:\
    \ in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ ret = {}\n    local seen = {}\n    for _, n in ipairs(numbers) do\n        if\
    \ not seen[n] then\n            ret[#ret + 1] = n\n            seen[n] = true\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo272d7h8.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpo272d7h8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ known = {}\n  local result = {}\n  for index, number in ipairs(numbers) do\n\
    \    if not known[number] then\n      table.insert(result, number)\n      known[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yness27.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_yness27.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfs3cyl3b.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfs3cyl3b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ counts = {}\n\tfor i = 1, #numbers do\n\t\tcounts[numbers[i]] = (counts[numbers[i]]\
    \ or 0) + 1\n\tend\n\tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tif counts[numbers[i]]\
    \ == 1 then\n\t\t\tresult[#result + 1] = numbers[i]\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local seen = {}\n    for i = 1, #numbers do\n        local\
    \ n = numbers[i]\n        if not seen[n] then\n            table.insert(result,\
    \ n)\n            seen[n] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhgv0zs9.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvhgv0zs9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ hash = {}\n\tlocal list = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not hash[n]\
    \ then\n\t\t\thash[n] = true\n\t\t\ttable.insert(list, n)\n\t\tend\n\tend\n\t\
    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyiidtf6t.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpyiidtf6t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    return\
    \ niltable(reduce(numbers, function(acc, n)\n        local keep = acc[n] == nil\n\
    \        acc[n] = true\n        return acc, keep and n or nil\n    end))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi347ke99.lua:6:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpi347ke99.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpi347ke99.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, element in ipairs(numbers) do\n\
    \        if not seen[element] then\n            seen[element] = true\n       \
    \     table.insert(result, element)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cz63k93.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp3cz63k93.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ Keep track of occurrences in a dict\n    local occurrences = {}\n    for _,\
    \ n in ipairs(numbers) do\n        local _ = occurrences[n] or 0\n        occurrences[n]\
    \ = occurrences[n] + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd61x51mz.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ visited = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n \
    \   if not visited[number] then\n      table.insert(result, number)\n      visited[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1un_1kyo.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp1un_1kyo.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tlq_032.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp7tlq_032.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local seen = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvahmwo44.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvahmwo44.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ found_set = {}\n    local unique_numbers = {}\n    for _, value in ipairs(numbers)\
    \ do\n        if found_set[value] == nil then\n            unique_numbers[#unique_numbers\
    \ + 1] = value\n            found_set[value] = true\n        end\n    end\n  \
    \  return unique_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwajw92w.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpuwajw92w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ res = {}\n\tlocal flags = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif\
    \ not flags[number] then\n\t\t\ttable.insert(res, number)\n\t\t\tflags[number]\
    \ = true\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmlhxwa5.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpmmlhxwa5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ no_duplicates = {}\n  local hash = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not hash[number] then\n      hash[number] = true\n      table.insert(no_duplicates,\
    \ number)\n    end\n  end\n  return no_duplicates\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0s_o6vq.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpp0s_o6vq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ already_seen = {}\n    local not_duplicates = {}\n    for _,number in ipairs(numbers)\
    \ do\n        if not already_seen[number] then\n            table.insert(not_duplicates,\
    \ number)\n            already_seen[number] = true\n        end\n    end\n   \
    \ return not_duplicates\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmudis0r.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpgmudis0r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ checked = {}\n    local duplicates = {}\n    local result = {}\n    for i, n\
    \ in ipairs(numbers) do\n        if not checked[n] then\n            checked[n]\
    \ = true\n        else\n            duplicates[n] = true\n        end\n    end\n\
    \    for i, n in ipairs(numbers) do\n        if not duplicates[n] then\n     \
    \       table.insert(result, n)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp780aaqz4.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp780aaqz4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local seen = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      result[#result + 1] = number\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6zft6xe.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpf6zft6xe.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ unique = {}\n\tlocal unique_result = {}\n\tfor _, num in ipairs(numbers) do\n\
    \t\tif not unique[num] then\n\t\t\tunique[num] = true\n\t\t\ttable.insert(unique_result,\
    \ num)\n\t\tend\n\tend\n\treturn unique_result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2whb34ui.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp2whb34ui.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local table = {}\n    for _, n in ipairs(numbers) do\n    \
    \    if not table[n] then\n            table[n] = true\n            result[#result\
    \ + 1] = n\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pt9h1fn.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp4pt9h1fn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, item in ipairs(numbers) do\n  \
    \      if not seen[item] then\n            seen[item] = true\n            table.insert(result,\
    \ item)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp10aem1.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpgp10aem1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ copy = {}\n  for _, number in ipairs(numbers) do\n    copy[number] = true\n\
    \  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if copy[number]\
    \ then\n      table.insert(result, number)\n      copy[number] = false\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a0gauxd.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp2a0gauxd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local dupes = {}\n    for _, number in ipairs(numbers) do\n \
    \       if seen[number] then\n            dupes[number] = true\n        else\n\
    \            seen[number] = true\n        end\n    end\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not dupes[number] then\n\
    \            table.insert(result, number)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local value_counts = {}\n    for _, value in ipairs(numbers)\
    \ do\n        if value_counts[value] then\n            value_counts[value] = value_counts[value]\
    \ + 1\n        else\n            value_counts[value] = 1\n        end\n    end\n\
    \    for _, value in ipairs(numbers) do\n        if value_counts[value] == 1 then\n\
    \            table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n     \
    \   if not seen[n] then\n            table.insert(result, n)\n            seen[n]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cp9c_zx.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp5cp9c_zx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ res = {}\n    local cache = {}\n    for _, number in ipairs(numbers) do\n  \
    \      if not cache[number] then\n            cache[number] = true\n         \
    \   table.insert(res, number)\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvs8xi_9.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpqvs8xi_9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ nset = set.new(numbers)\n  local uniques = {}\n  for n in values(nset) do\n\
    \    uniques[#uniques + 1] = n\n  end\n  return uniques\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_u3x4y5n.lua:6:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmp_u3x4y5n.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_u3x4y5n.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    --\
    \ first we need to create a map from all the numbers to their counts.\n    local\
    \ counts = {}\n    for i = 1, #numbers do\n        local number = numbers[i]\n\
    \        counts[number] = (counts[number] or 0) + 1\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprg5cmg67.lua:21: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, n in ipairs(numbers) do\n        if unique[n] then\n\
    \            unique[n] = nil\n        else\n            unique[n] = true\n   \
    \     end\n    end\n    local result = {}\n    for k, _ in pairs(unique) do\n\
    \        table.insert(result, k)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ t = {}\n  for _, number in ipairs(numbers) do\n    t[number] = (t[number] or\
    \ 0) + 1\n  end\n  local out = {}\n  for _, number in ipairs(numbers) do\n   \
    \ if t[number] == 1 then\n      table.insert(out, number)\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ list = {}\n    for _, number in ipairs(numbers) do\n        if list[number]\
    \ == nil then\n            list[number] = true\n        else\n            list[number]\
    \ = nil\n        end\n    end\n    local result = {}\n    for number, _ in pairs(list)\
    \ do\n        table.insert(result, number)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ dict = {}\n    local output = {}\n    for i = 1, #numbers do\n        local\
    \ num = numbers[i]\n        if dict[num] == nil then\n            dict[num] =\
    \ 1\n            output[#output + 1] = num\n        end\n    end\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox3on4nv.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpox3on4nv.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number] = (unique[number]\
    \ or 0) + 1\n  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if unique[number] == 1 then\n      table.insert(result, number)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ number_occurrences = {}\n    for _, number in ipairs(numbers) do\n        if\
    \ number_occurrences[number] then\n            number_occurrences[number] = number_occurrences[number]\
    \ + 1\n        else\n            number_occurrences[number] = 1\n        end\n\
    \    end\n    local result = {}\n    for _, number in ipairs(numbers) do\n   \
    \     if number_occurrences[number] == 1 then\n            table.insert(result,\
    \ number)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ hash = {}\n\tlocal duplicates = {}\n\tlocal result = {}\n\tfor _, value in ipairs(numbers)\
    \ do\n\t\tif hash[value] then\n\t\t\tduplicates[value] = true\n\t\telse\n\t\t\t\
    hash[value] = true\n\t\tend\n\tend\n\tfor _, value in ipairs(numbers) do\n\t\t\
    if not duplicates[value] then\n\t\t\ttable.insert(result, value)\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ First, we build a reverse index with keys being the numbers and values being\n\
    \  -- the count of this number in the input list.\n  local count = {}\n  for _,\
    \ number in ipairs(numbers) do\n    count[number] = (count[number] or 0) + 1\n\
    \  end\n  -- Then, we iterate on the input list and only keep an item if its count\n\
    \  -- is 1. Otherwise, we ignore it.\n  local result = {}\n  for _, number in\
    \ ipairs(numbers) do\n    if count[number] == 1 then\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ seen = {}\n\tlocal remove = {}\n\tfor k, v in ipairs(numbers) do\n\t\tif seen[v]\
    \ then\n\t\t\ttable.insert(remove, k)\n\t\telse\n\t\t\tseen[v] = true\n\t\tend\n\
    \tend\n\ttable.sort(remove, function(a, b) return a > b end)\n\tfor _, v in ipairs(remove)\
    \ do\n\t\ttable.remove(numbers, v)\n\tend\n\treturn numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj88e9pa.lua:27:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfj88e9pa.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            seen[number] = true\n         \
    \   table.insert(result, number)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lqtboem.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp7lqtboem.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ r = {}\n    local duplicates = {}\n    for _, number in ipairs(numbers) do\n\
    \        if r[number] then\n            duplicates[number] = true\n        else\n\
    \            r[number] = true\n        end\n    end\n    local result = {}\n \
    \   for _, number in ipairs(numbers) do\n        if not duplicates[number] then\n\
    \            table.insert(result, number)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb05t0a0j.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpb05t0a0j.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ used = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if\
    \ not used[number] then\n      result[#result + 1] = number\n      used[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wzjvgh0.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp2wzjvgh0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ freq = {}\n    for i = 1, #numbers do\n        freq[numbers[i]] = (freq[numbers[i]]\
    \ or 0) + 1\n    end\n    local ret = {}\n    for i = 1, #numbers do\n       \
    \ if freq[numbers[i]] == 1 then\n            ret[#ret + 1] = numbers[i]\n    \
    \    end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ no_duplicates = {}\n    local duplicates = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if duplicates[n] then\n            -- Duplicate number, do nothing\n\
    \        elseif no_duplicates[n] then\n            duplicates[n] = true\n    \
    \        table.insert(no_duplicates, n)\n        else\n            no_duplicates[n]\
    \ = true\n            table.insert(no_duplicates, n)\n        end\n    end\n \
    \   return no_duplicates\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbesjgs6.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {true, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpmbesjgs6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ result = {}\n\tlocal hash = {}\n\tfor _, number in ipairs(numbers) do\n\t\t\
    if not hash[number] then\n\t\t\ttable.insert(result, number)\n\t\t\thash[number]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnm0fsrx.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfnm0fsrx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ seen[n] then\n      seen[n] = true\n      table.insert(result, n)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4e_pe3b.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpv4e_pe3b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ TODO: Replace the body of this function to make the test pass.\n  return {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm6vi3xn.lua:14:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpxm6vi3xn.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ unique = {}\n\tfor i,v in ipairs(numbers) do\n\t\tunique[v] = (unique[v] or\
    \ 0) + 1\n\tend\n\tlocal uniq_count = 0\n\tfor k,v in pairs(unique) do\n\t\tif\
    \ v == 1 then\n\t\t\tuniq_count = uniq_count + 1\n\t\tend\n\tend\n\tlocal res\
    \ = {}\n\tlocal j = 1\n\tfor i,v in ipairs(numbers) do\n\t\tif unique[v] == 1\
    \ then\n\t\t\tres[j] = v\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4cxchjm.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpi4cxchjm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ known = {}\n    local pos = 1\n    for _, num in ipairs(numbers) do\n      \
    \  if not known[num] then\n            numbers[pos] = num\n            pos = pos\
    \ + 1\n            known[num] = true\n        end\n    end\n    return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tds7wub.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5, 3, 5}\nstack traceback:\n\t/tmp/tmp0tds7wub.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ dict = {}\n    local list = {}\n    for _, number in ipairs(numbers) do\n  \
    \      if not dict[number] then\n            table.insert(list, number)\n    \
    \        dict[number] = true\n        end\n    end\n    return list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbqxjwd5.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfbqxjwd5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\t--\
    \ Check if given arguments are of the proper type.\n\tif (type(numbers) ~= \"\
    table\") then\n\t\terror(\"bad argument #1 to 'remove_duplicates' (table expected,\
    \ got \" .. type(numbers) .. \")\", 2)\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfufk726z.lua:19: 'end' expected (to close 'function' at line\
    \ 5) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ cache = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n    \
    \    if not cache[n] then\n            cache[n] = true\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi80m7phf.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpi80m7phf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _,number in ipairs(numbers) do\n        if not unique[number]\
    \ then\n            unique[number] = true\n            coroutine.yield(number)\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrj1xfk3.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpsrj1xfk3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ u = {}\n  local r = {}\n  for _, v in ipairs(numbers) do\n    if not u[v] then\n\
    \      u[v] = true\n      r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq05g8pn.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmprq05g8pn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ keys = {}\n    local result = {}\n    for _, i in ipairs(numbers) do\n     \
    \   if not keys[i] then\n            result[#result + 1] = i\n            keys[i]\
    \ = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10s4dsuj.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp10s4dsuj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_t4_0hc.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpf_t4_0hc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _, n in ipairs(numbers) do\n    unique[n] = true\n  end\n\
    \  return util.list_from_dict(unique)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpex8ag2fd.lua:10:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpex8ag2fd.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpex8ag2fd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local has_seen = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not has_seen[number] then\n      result[#result + 1] = number\n      has_seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g8vni4n.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp5g8vni4n.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local unique = {}\n    for _, value in ipairs(numbers) do\n \
    \       if not seen[value] then\n            unique[#unique + 1] = value\n   \
    \         seen[value] = true\n        end\n    end\n    return unique\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitq5dj8x.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpitq5dj8x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ result = {}\n    local seen = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv92uu8if.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpv92uu8if.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ visited = {}\n    local result = {}\n    for k,v in ipairs(numbers) do\n   \
    \     if not visited[v] then\n            table.insert(result, v)\n          \
    \  visited[v] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj2_9xuv.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpjj2_9xuv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local found = {}\n  for _, n in ipairs(numbers) do\n    if not\
    \ found[n] then\n      result[#result + 1] = n\n      found[n] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj9pd8w8.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpzj9pd8w8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  --\
    \ TODO: return list of unique numbers\n  if #numbers == 0 then\n    return {}\n\
    \  end\n  local result = {}\n  local prev = numbers[1]\n  local ocurr = { prev\
    \ }\n  for i = 2, #numbers do\n    local curr = numbers[i]\n    if prev == curr\
    \ then\n      table.insert(ocurr, curr)\n    else\n      if #ocurr == 1 then\n\
    \        table.insert(result, ocurr[1])\n      end\n      ocurr = { curr }\n \
    \   end\n    prev = curr\n  end\n  if #ocurr == 1 then\n    table.insert(result,\
    \ ocurr[1])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxizoivyx.lua:36:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpxizoivyx.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ ret = {}\n    local seen = {}\n    for _, n in ipairs(numbers) do\n        if\
    \ not seen[n] then\n            ret[#ret + 1] = n\n            seen[n] = true\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekuu52_c.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpekuu52_c.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ output = {}\n    local seen = {}\n    for _, v in ipairs(numbers) do\n     \
    \   if not seen[v] then\n            table.insert(output, v)\n            seen[v]\
    \ = true\n        end\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabn_jyap.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpabn_jyap.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ no_duplicates = {}\n    local duplicates = {}\n    for _, v in ipairs(numbers)\
    \ do\n        if no_duplicates[v] then\n            duplicates[v] = true\n   \
    \     else\n            no_duplicates[v] = true\n        end\n    end\n    local\
    \ result = {}\n    for _, v in ipairs(numbers) do\n        if not duplicates[v]\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ results = {}\n    local checked = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not checked[number] then\n            checked[number] = true\n   \
    \         table.insert(results, number)\n        end\n    end\n    return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mylvqle.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_mylvqle.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ lookup = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n   \
    \     if not lookup[v] then\n            table.insert(result, v)\n           \
    \ lookup[v] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wxvt2r2.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8wxvt2r2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    return\
    \ map(numbers, function(x) return x end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpir5kanuq.lua:6:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpir5kanuq.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpir5kanuq.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ seen = {}\n\tlocal n_duplicates = 0\n\tlocal n = #numbers\n\tfor i = 1, n do\n\
    \t\tlocal value = numbers[i]\n\t\tif seen[value] then\n\t\t\tn_duplicates = n_duplicates\
    \ + 1\n\t\telse\n\t\t\tseen[value] = true\n\t\tend\n\tend\n\tlocal duplicates\
    \ = {}\n\tlocal index = 1\n\tfor i = 1, n do\n\t\tlocal value = numbers[i]\n\t\
    \tif not seen[value] then\n\t\t\tduplicates[index] = value\n\t\t\tindex = index\
    \ + 1\n\t\tend\n\tend\n\treturn duplicates\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1kk72t2.lua:33:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmph1kk72t2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ s = {}\n    local out = {}\n    for _,v in ipairs(numbers) do\n        if not\
    \ s[v] then\n            table.insert(out, v)\n            s[v] = true\n     \
    \   end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglstrpdj.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpglstrpdj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ processed = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not processed[number] then\n      processed[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn2kg9sp.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmphn2kg9sp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _,v in ipairs(numbers) do\n    unique[v] = true\n  end\n\
    \  local result = {}\n  for _,v in ipairs(numbers) do\n    if unique[v] then\n\
    \      table.insert(result, v)\n      unique[v] = nil\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprry4e88v.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmprry4e88v.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ table = {}\n  local new_table = {}\n  for i,n in ipairs(numbers) do\n    if\
    \ table[n] then\n      table[n] = table[n] + 1\n    else\n      table[n] = 1\n\
    \    end\n  end\n  for i,n in ipairs(numbers) do\n    if table[n] == 1 then\n\
    \      table.insert(new_table, n)\n    end\n  end\n  return new_table\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggen44su.lua:17:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpggen44su.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpggen44su.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number] = (unique[number]\
    \ or 0) + 1\n  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if unique[number] == 1 then\n      table.insert(result, number)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ dict = {}\n    local result = {}\n    for i, n in ipairs(numbers) do\n     \
    \   if not dict[n] then\n            dict[n] = true\n            result[#result\
    \ + 1] = n\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97wf_i5a.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp97wf_i5a.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen_numbers = {}\n    local unique_numbers = {}\n    for _, num in ipairs(numbers)\
    \ do\n        if not seen_numbers[num] then\n            seen_numbers[num] = true\n\
    \            table.insert(unique_numbers, num)\n        end\n    end\n    return\
    \ unique_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7b8ui89e.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp7b8ui89e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ cnt = {}\n    for _, num in ipairs(numbers) do\n        cnt[num] = (cnt[num]\
    \ or 0) + 1\n    end\n    local uniques = {}\n    for _, num in ipairs(numbers)\
    \ do\n        if cnt[num] == 1 then\n            table.insert(uniques, num)\n\
    \        end\n    end\n    return uniques\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ already_seen = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n\
    \        if not already_seen[n] then\n            already_seen[n] = true\n   \
    \         table.insert(result, n)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryvnrhrk.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpryvnrhrk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ result = {}\n  local lookup = {}\n  for _, v in ipairs(numbers) do\n    if not\
    \ lookup[v] then\n      table.insert(result, v)\n      lookup[v] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zzja_m1.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp3zzja_m1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if not unique[number]\
    \ then\n            unique[number] = true\n            coroutine.yield(number)\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_2ncqu8.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpi_2ncqu8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ last_number = nil\n    local number_count = 0\n    local unique_numbers = {}\n\
    \    for _, number in ipairs(numbers) do\n        if number == last_number then\n\
    \            number_count = number_count + 1\n        else\n            number_count\
    \ = 1\n        end\n        if number_count == 1 then\n            table.insert(unique_numbers,\
    \ number)\n        end\n        last_number = number\n    end\n    return unique_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojcbot0y.lua:28:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpojcbot0y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ elements = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if\
    \ not elements[n] then\n      result[#result + 1] = n\n      elements[n] = true\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ycwx3qc.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp0ycwx3qc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01zlmpa7.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp01zlmpa7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    return\
    \ sort_unique(numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6vk7tn1.lua:6:\
    \ attempt to call a nil value (global 'sort_unique')\nstack traceback:\n\t/tmp/tmpe6vk7tn1.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpe6vk7tn1.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n\tlocal\
    \ m = {}\n\tlocal res = {}\n\tfor i, v in ipairs(numbers) do\n\t\tif not m[v]\
    \ then\n\t\t\tm[v] = i\n\t\t\tres[#res + 1] = v\n\t\tend\n\tend\n\treturn res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7ne6zza.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpf7ne6zza.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, element in ipairs(numbers) do\n\
    \        if not seen[element] then\n            table.insert(result, element)\n\
    \            seen[element] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkcf50hf.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpjkcf50hf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n  local\
    \ hash_table = {}\n  local uniques = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not hash_table[number] then\n      hash_table[number] = true\n      uniques[#uniques\
    \ + 1] = number\n    end\n  end\n  return uniques\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyi8kbwz.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpiyi8kbwz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if not table_contains(unique,\
    \ number) then\n            table.insert(unique, number)\n        end\n    end\n\
    \    return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpioxjv5cs.lua:8:\
    \ attempt to call a nil value (global 'table_contains')\nstack traceback:\n\t\
    /tmp/tmpioxjv5cs.lua:8: in local 'candidate'\n\t/tmp/tmpioxjv5cs.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\n-- >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n-- [1, 3, 4]\nlocal function remove_duplicates(numbers)\n    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            seen[number] = true\n         \
    \   table.insert(result, number)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqbtbz9o.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpyqbtbz9o.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
