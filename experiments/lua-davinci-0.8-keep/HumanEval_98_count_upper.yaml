name: HumanEval_98_count_upper
language: lua
prompt: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
  -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg') returns\
  \ 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
  \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
  \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
  \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local n = 0\n    s:gsub('[AEIOU]', function(w) if #w % 2 == 0 then\
    \ n = n + 1 end end)\n    return n\nend", "\tlocal n = 0\n\tfor i = 1, #s do\n\
    \t\tif (i % 2 == 0) and s:sub(i, i):find('[AEIOU]') then\n\t\t\tn = n + 1\n\t\t\
    end\n\tend\n\treturn n\nend", "    local n = 0\n    for i, c in ipairs(s) do\n\
    \        if i % 2 == 0 and c:find('[AEIOU]') then\n            n = n + 1\n   \
    \     end\n    end\n    return n\nend", "    local c = 0\n    for i = 1, #s do\n\
    \        if s:sub(i, i):find('[AEIOU]') and i % 2 == 0 then\n            c = c\
    \ + 1\n        end\n    end\n    return c\nend", "    -- <your code here>\nend",
  "    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.match(s:sub(i,\
    \ i), '[AEIOU]') then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "    local cnt = 0\n    for i = 1, #s do\n        if s:byte(i)\
    \ >= 65 and s:byte(i) <= 90 and (i-1) % 2 == 0 then\n            cnt = cnt + 1\n\
    \        end\n    end\n    return cnt\nend", "    local count = 0\n    for i =\
    \ 1, #s do\n        if string.match(s, \"[AEIOU]\") and i % 2 == 0 then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  \
    \  local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n    \
    \    if i % 2 == 0 and c:find('[AEIOU]') then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #s do\n        if (s:sub(i, i):find('[AEIOU]') and i % 2 == 0) then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local count = 0\n    for i = 1, #s do\n        local char = s:sub(i, i)\n\
    \        if char:match('[AEIOU]') and i % 2 == 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i=1,#s do\n        if i%2 == 0 and is_upper(s:sub(i,i)) then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        if c:match('[AEIOU]') and i % 2 == 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        if i % 2 == 0 and string.find(s, s:sub(i, i), 1,\
    \ true) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i=1,#s do\n        if s:sub(i,i):match('[aeiou]')\
    \ and i%2 == 0 then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "    local count = 0\n    for i = 1, #s do\n        if (i\
    \ % 2 == 0) and s:sub(i, i):match('[AEIOU]') then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    local c = 0\n    for i\
    \ = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n  \
    \          c = c + 1\n        end\n    end\n    return c\nend", "    local c =\
    \ 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            c = c + 1\n        end\n    end\n    return c\nend", "   \
    \ return select(2, s:gsub('([AEIOU])(.)',\n                            function(upper,\
    \ lower)\n                                return lower == upper:lower() and lower\
    \ or upper\n                            end\n                            ))\n\
    end", "    local count = 0\n    for i=1,#s do\n        if s:sub(i,i):match('[AEIOU]')\
    \ and i%2 == 0 then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "\tlocal n = 0\n\tfor i=1, #s, 2 do\n\t\tlocal c = s:sub(i,i)\n\
    \t\tif is_upper(c) then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", " \
    \  local count = 0\n   for i=1, #s do\n      if i % 2 == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "   local i = 0\n   local vowel = 0\n   while i < #s do\n      i = i + 2\n     \
    \ if is_upper(s, i) then\n         vowel = vowel + 1\n      end\n   end\n   return\
    \ vowel\nend", "    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if i % 2 == 0 and c:find('[AEIOU]') then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        if i % 2 == 0 and is_vowel(s:sub(i, i)) and s:sub(i,\
    \ i):upper() == s:sub(i, i) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local result = 0\n    for i = 1, #s do\n\
    \        if i % 2 == 0 and s:byte(i) >= 65 and s:byte(i) <= 90 then\n        \
    \    result = result + 1\n        end\n    end\n    return result\nend", "   \
    \ -- your code here\n    local count = 0\n    s = string.lower(s)\n    for i=1,\
    \ #s do\n        if (i % 2 == 0) and (string.find(s, s[i]) >= 1 and string.find(s,\
    \ s[i]) <= 5) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  -- TODO: Implement me!\n  return 0\nend", "    local c = 0\n\
    \    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            c = c + 1\n        end\n    end\n    return c\nend", "   \
    \ local count = 0\n    local half = string.len(s) / 2\n    local a = half % 2\
    \ == 0 and half or half + 1\n    for i = a, string.len(s), 2 do\n        if string.find(s,\
    \ string.sub(s, i, i), i, true) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    local s = s:lower()\n\
    \    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s[i]) then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for k,v in pairs(string.gmatch(s, '%a')) do\n        if k % 2\
    \ == 0 and v == string.upper(v) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\t\
    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "  local count = 0\n  local is_even = false\n\
    \  for c in s:gmatch\".\" do\n    if is_even and c:match\"[AEIOU]\" then\n   \
    \   count = count + 1\n    end\n    is_even = not is_even\n  end\n  return count\n\
    end", "   return s:gsub('[AEIOU]', ''):len()\nend", "\t-- your code here\nend",
  "  local count = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]') and\
    \ i % 2 == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "   local count = 0\n   for i=1,#s do\n      if i % 2 == 0 and string.match(s:sub(i,i),'[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "    local counter = 0\n    for i=1,string.len(s) do\n        local c = string.sub(s,i,i)\n\
    \        if i % 2 == 0 and c == string.upper(c) and string.find(c,\"[AEIOU]\"\
    ) then\n            counter = counter + 1\n        end\n    end\n    return counter\n\
    end", "   -- YOUR CODE HERE\nend", "    local count = 0\n    for i = 1, #s do\n\
    \        if i % 2 == 0 and (s:sub(i, i) == 'A' or s:sub(i, i) == 'E' or s:sub(i,\
    \ i) == 'I' or s:sub(i, i) == 'O' or s:sub(i, i) == 'U') then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local cnt =\
    \ 0\n    for i = 1, #s do\n        if s:sub(i, i):find('[AEIOU]') then\n     \
    \       cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "  -- Your\
    \ code here.\nend", "  local n = 0\n  for i = 1,#s do\n    if i % 2 == 0 and s:sub(i,i):match('[AEIOU]')\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend", "    local vowel_count\
    \ = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.find(string.upper(s),\
    \ string.sub(s, i, i)) then\n            vowel_count = vowel_count + 1\n     \
    \   end\n    end\n    return vowel_count\nend", "   s = s:gsub('[^aeiouAEIOU]',\
    \ '')\n   s = s:gsub('(%a)', function(c) if c == c:upper() then return c end end)\n\
    \   return s:len()\nend", "    local cnt = 0\n    for i = 1, #s do\n        if\
    \ i % 2 == 0 and is_upper(s:sub(i, i)) then\n            cnt = cnt + 1\n     \
    \   end\n    end\n    return cnt\nend", "    local count = 0\n    local len =\
    \ #s\n    for i = 1, len, 2 do\n        local c = s:sub(i, i)\n        if c ==\
    \ 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tlocal n = 0\n\t\
    for i = 1, #s do\n\t\tif i % 2 == 0 and isupper(s, i) then\n\t\t\tn = n + 1\n\t\
    \tend\n\tend\n\treturn n\nend", "  return count(s, function(c) return is_vowel(c)\
    \ and c == c:upper() end, 2)\nend", "  local i, n = 1, 0\n  for k in s:gmatch('[AEIOU]')\
    \ do\n    if (i % 2) == 0 then\n      n = n + 1\n    end\n    i = i + 1\n  end\n\
    \  return n\nend", "  return string.gsub(s, \"[AEIOUaeiou][^AEIOUaeiou]\", \"\"\
    )\nend", "    -- TODO: Implement this.\n    return 0\nend", "  local count = 0\n\
    \  local flag = 0\n  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_map\
    \ = {}\n  for i, v in ipairs(vowels) do\n    vowels_map[v] = true\n  end\n  for\
    \ i = 1, #s do\n    local c = s:sub(i, i)\n    if vowels_map[c:lower()] then\n\
    \      if flag == 0 then\n        count = count + 1\n      end\n      flag = 1\
    \ - flag\n    end\n  end\n  return count\nend", "  local n = 0\n  local i = 0\n\
    \  while i < #s do\n    i = i + 2\n    if is_upper(s, i) then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend", "    local count = 0\n    local len = #s\n\
    \    for i = 2, len, 2 do\n        local c = s:sub(i, i)\n        if c == 'A'\
    \ or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        if s:sub(i, i):find('[AEIOU]') and (i % 2 == 0) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "   local counter = 0\n   for i = 1, #s do\n      local c = s:sub(i, i)\n      if\
    \ is_vowel(c) and i % 2 == 0 then\n         counter = counter + 1\n      end\n\
    \   end\n   return counter\nend", "  return 0\nend", "\t-- NOTE: Use a flag\n\t\
    -- local result = 0\n\t-- for i = 1, #s do\n\t-- \tlocal c = s:sub(i, i)\n\t--\
    \ \tlocal is_upper = c == c:upper()\n\t-- \tlocal is_vowel = (c == 'A' or c ==\
    \ 'E' or c == 'I' or c == 'O' or c == 'U')\n\t-- \tlocal is_even = (i % 2 == 0)\n\
    \t-- \tif is_upper and is_vowel and is_even then\n\t-- \t\tresult = result + 1\n\
    \t-- \tend\n\t-- end\n\t-- return result", "    local count = 0\n    for i = 1,\
    \ #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]') then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend\nprint(count_upper('aBCdEf'))\n\
    print(count_upper('abcdefg'))\nprint(count_upper('dBBE'))", "    local n = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if i % 2 == 0 and\
    \ c:match('[AEIOU]') then\n            n = n + 1\n        end\n    end\n    return\
    \ n\nend", "  local vowels = 'AEIOU'\n  local count = 0\n  for i = 1, #s do\n\
    \    if vowels:find(s:sub(i, i)) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local counter = 0\n  for i = 1, #s do\n    if i % 2\
    \ == 0 and string.find(s, string.upper(s), i, true) then\n      counter = counter\
    \ + 1\n    end\n  end\n  return counter\nend", "  -- TODO: complete\nend", " \
    \   local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n   \
    \     if c:find('[AEIOU]') and i % 2 == 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "   return s:gsub('(%a)(%u)(%a)',\
    \ ''):len()\nend", "    local n = 0\n    local even = true\n    for i = 1, #s\
    \ do\n        if even and s:sub(i, i):find('[AEIOU]') then\n            n = n\
    \ + 1\n        end\n        even = not even\n    end\n    return n\nend", "  --\
    \ your code here\nend", "    -- your code here\n    local count = 0\n    for i\
    \ = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i, i)) then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    local i = 1\n    while i <= #s do\n        local c = s:sub(i,\
    \ i)\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n\
    \            count = count + 1\n        end\n        i = i + 2\n    end\n    return\
    \ count\nend", "    local n = 0\n    for i = 1, #s do\n        if i % 2 == 0 and\
    \ s:sub(i, i):match('[AEIOU]') then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "  local v = {['A'] = true, ['E'] = true, ['I'] = true, ['O']\
    \ = true, ['U'] = true}\n  local result = 0\n  for i = 1, #s do\n    if (i % 2\
    \ == 0) and v[s:sub(i, i)] then\n      result = result + 1\n    end\n  end\n \
    \ return result\nend", "    local upper = 0\n    local count = 0\n    for i =\
    \ 1, #s do\n        if (i % 2 == 0) then\n            if s:sub(i, i):match(\"\
    [AEIOU]\") then\n                upper = upper + 1\n            end\n        end\n\
    \    end\n    return upper\nend", "    local count = 0\n    for i = 1, string.len(s)\
    \ do\n        if ((i % 2) == 0) and (string.find(s:sub(i, i), \"[AEIOU]\") ~=\
    \ nil) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if math.fmod(i, 2) ==\
    \ 0 and string.find(s, \"[AEIOU]\", i, true) then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    local count = 0\n    for\
    \ i = 1, #s do\n        local c = s:sub(i, i)\n        if i % 2 == 0 and is_upper(c)\
    \ and is_vowel(c) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "\tlocal c = 0\n\tfor i=1,string.len(s),2 do\n\t\tif\
    \ string.match(s, \"[AEIOU]\", i) then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn\
    \ c\nend", "    local vowels = \"aeiouAEIOU\"\n    local counter = 0\n    for\
    \ i = 1, #s do\n        if not (i % 2 == 0) and s:sub(i, i) ~= \"\" and vowels:find(s:sub(i,\
    \ i)) then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend", "    local count = 0\n    for i = 1, #s do\n        if (i % 2)\
    \ == 0 and s:sub(i, i):find('[AEIOU]') then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend", "    local function is_upper(c)\n\
    \        if string.find(c, \"[AEIOU]\") then\n            return true\n      \
    \  else\n            return false\n        end\n    end\n    local k = 0\n   \
    \ for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i, i)) then\n   \
    \         k = k + 1\n        end\n    end\n    return k\nend", "  -- YOUR CODE\
    \ HERE!\nend", "\tlocal n = 0\n\tfor i = 1, #s do\n\t\tif (i % 2 == 0) and s:sub(i,\
    \ i):match('^[AEIOU]$') then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend",
  "    local count = 0\n    for i = 1, string.len(s) do\n        if even(i) then\n\
    \            if is_upper_vowel(string.sub(s, i, i)) then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "    local count = 0\n    local upper = { a=true, e=true, i=true, o=true, u=true\
    \ }\n    for i=1,#s,2 do\n        if upper[s:sub(i,i)] then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\t-- TODO\n\tlocal\
    \ count = 0\n\tfor i=1,#s do\n\t\tif i%2==0 and s:sub(i,i):find(\"[AEIOU]\") then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local count\
    \ = 0\n  -- TODO: Add your code here\n  return count\nend", "\tlocal num_upper\
    \ = 0\n\tfor i = 1, #s do\n\t\tlocal char = s:sub(i, i)\n\t\tif (i % 2) == 0 and\
    \ is_vowel(char) and char == char:upper() then\n\t\t\tnum_upper = num_upper +\
    \ 1\n\t\tend\n\tend\n\treturn num_upper\nend", "  return reduce(\n    s,\n   \
    \ function(acc, c)\n      if (c:match('[aeiou]') and (c == c:upper())) then\n\
    \        return acc + 1\n      else\n        return acc\n      end\n    end,\n\
    \    0\n  )\nend", "    local count = 0\n    for i = 1, #s do\n        if i %\
    \ 2 == 0 and s:sub(i, i):find('[AEIOU]') then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local even_pos_count = 0\n \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #s do\n    if i % 2 ==\
    \ 0 then\n      -- check if s[i] is uppercase and a vowel\n      if string.upper(s[i])\
    \ == s[i] and s[i] == vowels[1] or s[i] == vowels[2] or s[i] == vowels[3] or s[i]\
    \ == vowels[4] or s[i] == vowels[5] then\n        even_pos_count = even_pos_count\
    \ + 1\n      end\n    end\n  end\n  return even_pos_count\nend", "    local index\
    \ = 0\n    local count = 0\n    for i = 1, #s do\n        index = index + 1\n\
    \        if index % 2 == 0 then\n            if s:sub(i, i) == 'A' or s:sub(i,\
    \ i) == 'E' or s:sub(i, i) == 'I' or s:sub(i, i) == 'O' or s:sub(i, i) == 'U'\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local count = 0\n  for i = 1, string.len(s) do\n \
    \   local char = string.sub(s, i, i)\n    if string.find(\"AEIOU\", char) and\
    \ (i % 2 == 0) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    return\
    \ string.gsub(s, \"([aeiou])\", \"\"):gsub(\"[AEIOU]\", \"\"):len()\nend", "\t\
    local count = 0\n\tlocal is_even = false\n\tfor i = 1, #s do\n\t\tif is_even then\n\
    \t\t\tif s:sub(i, i):match('[AEIOU]') then\n\t\t\t\tcount = count + 1\n\t\t\t\
    end\n\t\tend\n\t\tis_even = not is_even\n\tend\n\treturn count\nend", "    local\
    \ vowels = {'A', 'E', 'I', 'O', 'U'}\n    local acc = 0\n    for i = 1, #s do\n\
    \        if i % 2 == 0 and table.contains(vowels, s:sub(i, i)) then\n        \
    \    acc = acc + 1\n        end\n    end\n    return acc\nend", "    local count\
    \ = 0\n    for i=1, #s do\n        local ch = s:sub(i,i)\n        if i % 2 ==\
    \ 0 and ch:match('[AEIOU]') then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    return 0\nend", "    local count = 0\n\
    \    local i = 0\n    while i < #s do\n        if is_upper(s, i) then\n      \
    \      count = count + 1\n        end\n        i = i + 2\n    end\n    return\
    \ count\nend", "    return select(2, s:gsub('[AEIOU]', '%1'))\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and (string.find('AEIOU',\
    \ s:sub(i, i)) ~= nil) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif (s:sub(i,\
    \ i):upper() == s:sub(i, i)) and ((i % 2) == 0) then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "    local count = 0\n    for i = 1, #s\
    \ do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]') then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('^[AEIOU]$')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  -- Write\
    \ code here\n  --return 0\nend", "  local count = 0\n  for i=1,#s do\n    if (i\
    \ % 2) == 0 and s:sub(i,i):match('[AEIOU]') then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend", "  local counter = 0\n  for i = 1, #s do\n\
    \    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]') then\n      counter = counter\
    \ + 1\n    end\n  end\n  return counter\nend", "\t-- TODO: add code here\n\tcount\
    \ = 0\n\tfor i = 1,string.len(s) do\n\t\tif string.sub(s,i,i) == string.upper(string.sub(s,i,i))\
    \ and string.find(\"aeiou\",string.sub(s,i,i)) then\n\t\t\tif math.fmod(i,2) ==\
    \ 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "   local count = 0\n   for i=1,#s do\n      if (i % 2) == 0 and s:sub(i,i):find('[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "  local cnt = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nassert(count_upper('aBCdEf')\
    \ == 1)\nassert(count_upper('abcdefg') == 0)\nassert(count_upper('dBBE') == 0)",
  "  if s:len() < 2 then\n    return 0\n  end\n  local count = 0\n  for i=2, s:len(),\
    \ 2 do\n    local c = s:sub(i, i)\n    if c == 'A' or c == 'E' or c == 'I' or\
    \ c == 'O' or c == 'U' then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  return s:gsub('([AEIOU])', function(c) return c:lower() end):gsub('[aeiou]',\
    \ ''):len()\nend", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and\
    \ s:sub(i, i):match('[AEIOU]') then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "\tlocal uppers = 0\n\tfor i = 1, #s do\n\t\tif s:sub(i,\
    \ i):match('^[AEIOU]$') and math.fmod(i, 2) == 0 then\n\t\t\tuppers = uppers +\
    \ 1\n\t\tend\n\tend\n\treturn uppers\nend", "  local n = 0\n  for i, char in ipairs(s)\
    \ do\n    if string.match(char, \"[aeiou]\") and i % 2 == 0 then\n      n = n\
    \ + 1\n    end\n  end\n  return n\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\
    \t\tif (i % 2) == 0 and s:sub(i, i):find('^[AEIOU]$') then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend", "\tlocal evens = even_indices(s)\n\
    \tlocal num = 0\n\tfor i = 1, #evens do\n\t\tif vowel(s:sub(evens[i], evens[i]))\
    \ and (s:sub(evens[i], evens[i]) == s:sub(evens[i], evens[i]):upper()) then\n\t\
    \t\tnum = num + 1\n\t\tend\n\tend\n\treturn num\nend", "    local count = 0\n\
    \    for i = 1,#s do\n        if is_upper(s:sub(i,i)) and is_even(i) then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \ local even_upper = 0\n  local vowels = \"aeiouAEIOU\"\n  for idx = 1, #s, 2\
    \ do\n    local c = s:sub(idx, idx)\n    if string.find(vowels, c) then\n    \
    \  even_upper = even_upper + 1\n    end\n  end\n  return even_upper\nend", " \
    \ return count(even(upcase(vowels(s))))\nend", "\t-- TODO: your code here\nend",
  "    local n = 0\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n       \
    \ if 'AEIOU' :find(ch) then\n            n = n + 1\n        end\n    end\n   \
    \ return n\nend", "    -- Implement me!\n    return s:gsub('%u[aeiou]',''):len()\n\
    end", "    -- your code here\n    -- get length of string\n    local len = string.len(s)\n\
    \    -- set up counter\n    local count = 0\n    -- loop through each character\n\
    \    for i = 1, len do\n        -- check if the current character is uppercase\
    \ vowel\n        -- and in even indices\n        if string.match(s:sub(i, i),\
    \ \"[AEIOU]\") and i % 2 == 0 then\n            -- if so, increase the counter\n\
    \            count = count + 1\n        end\n    end\n    -- return the counter\n\
    \    return count\nend", "    local i = 0\n    local count = 0\n    for c in s:gmatch('%a')\
    \ do\n        if i % 2 == 0 and c:match('[AEIOU]') then\n            count = count\
    \ + 1\n        end\n        i = i + 1\n    end\n    return count\nend", "    local\
    \ count = 0\n    for k, v in pairs(s:gmatch('[aeiou]*')) do\n        if k % 2\
    \ == 0 and v == v:upper() then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "    local n = 0\n    local len = string.len(s)\n\
    \    for i = 1, len, 2 do\n        if 'AEIOU'[s:sub(i, i)] then\n            n\
    \ = n + 1\n        end\n    end\n    return n\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]') and i % 2 == 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for i=1,#s do\n    local c = s:sub(i,i)\n    if ((i % 2 ==\
    \ 0) and (string.match(c,'[AEIOU]'))) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local n = 0\n    for i = 1,#s,2 do\n      \
    \  local c = s:sub(i,i)\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O'\
    \ or c == 'U' then\n            n = n + 1\n        end\n    end\n    return n\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  --[[\n  -- (When 'i' is even, it is the same as if it were divided by\
    \ 2, and if 'i' is odd,\n  -- it is the same as if it were divided by 2 and then\
    \ rounded up.)\n  -- 'i % 2' tests if 'i' is even\n  --]]\n  local even_uppers\
    \ = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:find('[AEIOU]')\
    \ and i % 2 == 0 then\n      even_uppers = even_uppers + 1\n    end\n  end\n \
    \ return even_uppers\nend", "  local count = 0\n  for i = 1, #s do\n    if (i\
    \ % 2 == 0) and s:match('[AEIOU]', i) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  return #s:gsub('[AEIOU]', '')\nend", "\t-- FILL\
    \ IN YOUR CODE HERE\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif math.fmod(i,\
    \ 2) == 0 and string.match(s:sub(i, i), '[AEIOU]') then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend", "   if type(s) ~= 'string' then\n \
    \     return nil, 'expected a string'\n   end\n   local vowels = {a=true, e=true,\
    \ i=true, o=true, u=true}\n   local count = 0\n   for i = 1, #s, 2 do\n      if\
    \ vowels[s:sub(i, i):lower()] then\n         count = count + 1\n      end\n  \
    \ end\n   return count\nend", "    return 0\nend", "  local c = 0\n  for i=1,#s,2\
    \ do\n    if s:sub(i,i):match(\"[AEIOU]\") then\n      c = c + 1\n    end\n  end\n\
    \  return c\nend", "  local count = 0\n  local len = #s\n  for i = 2, len, 2 do\n\
    \    if s:byte(i) >= 65 and s:byte(i) <= 90 then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend", "   local cnt = 0\n   for i = 1, #s do\n\
    \      if s:sub(i, i):match('[AEIOU]') and i % 2 == 0 then\n         cnt = cnt\
    \ + 1\n      end\n   end\n   return cnt\nend", "    local i = 1\n    local count\
    \ = 0\n    for c in string.gmatch(s, '.') do\n        if i % 2 == 0 and string.find(c,\
    \ '[AEIOU]') then\n            count = count + 1\n        end\n        i = i +\
    \ 1\n    end\n    return count\nend", "\tlocal even_pos_table = find_even_pos(s)\n\
    \tlocal count = 0\n\tfor pos, _ in pairs(even_pos_table) do\n\t\tif is_vowel(s:sub(pos,\
    \ pos)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", " \
    \ local num = 0\n  for i = 1, #s do\n    if s:sub(i, i):match('[AEIOU]') then\n\
    \      num = num + 1\n    end\n  end\n  return num\nend", "\tlocal cnt = 0\n\t\
    for i=1,#s,2 do\n\t\tlocal c = s:sub(i,i)\n\t\tif c == 'A' or c == 'E' or c ==\
    \ 'I' or c == 'O' or c == 'U' then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn\
    \ cnt\nend", "\treturn select(2, s:gsub('[AEIOU]', ''))\nend", "    local i =\
    \ 0\n    for c in s:gmatch(\"%u\") do\n        i = i + 1\n    end\n    return\
    \ i\nend", "    local t = string.gmatch(s, \".\")\n    local i = 0\n    local\
    \ c = 0\n    for _ in t do\n        i = i + 1\n        if i % 2 == 0 and string.match(string.upper(_),\
    \ \"[AEIOU]\") then\n            c = c + 1\n        end\n    end\n    return c\n\
    end", "  local function is_vowel(c)\n    return c == 'A' or c == 'E' or c == 'I'\
    \ or c == 'O' or c == 'U'\n  end\n  local cnt = 0\n  for i=1, #s, 2 do\n    if\
    \ is_vowel(s:sub(i, i)) then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\n\
    end", "\tlocal count = 0\n\ts:gsub('[AEIOU]', function(c)\n\t\tif c:upper() ==\
    \ c then\n\t\t\tcount = count + 1\n\t\tend\n\tend)\n\treturn count\nend", "  local\
    \ c = 0\n  for i=1,#s,2 do\n    if string.find(\"AEIOU\",string.sub(s,i,i)) then\n\
    \      c = c + 1\n    end\n  end\n  return c\nend", "  -- ..\nend", "    -- Implementation\
    \ goes here\n    return #string.gsub(s, \"[AEIOU][^AEIOU]\", \"\")\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nassert(count_upper('aBCdEf')\
    \ == 1)\nassert(count_upper('abcdefg') == 0)\nassert(count_upper('dBBE') == 0)",
  "    if type(s) ~= 'string' then\n        error('count_upper: string argument required')\n\
    \    end\n    local count = 0\n    local vowels = {'A', 'E', 'I', 'O', 'U'}\n\
    \    for i = 1, #s do\n        if i % 2 == 0 then\n            for k, v in pairs(vowels)\
    \ do\n                if v == s:sub(i, i) then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "   local count = 0\n   for i = 1, #s do\n      if (i % 2 == 0)\
    \ and is_upper(s:sub(i, i)) then\n         count = count + 1\n      end\n   end\n\
    \   return count\nend", "    local count = 0\n    for i = 1, #s do\n        if\
    \ i % 2 == 0 and s:sub(i, i):find('[AEIOU]') then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "  local count = 0\n  for i=1,#s\
    \ do\n    if is_upper(s, i) and even(i) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  return (string.gsub(s, \"[AEIOU]\", \"\"))\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if is_vowel(s:sub(i,\
    \ i)) and i % 2 == 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "\tlocal charMap = {}\n\tfor i = 1, #s do\n\t\tcharMap[i]\
    \ = string.char(s:byte(i))\n\tend\n\tlocal count = 0\n\tfor i = 1, #charMap do\n\
    \t\tif i % 2 == 0 and charMap[i] == string.upper(charMap[i]) then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\tlocal n = 0\n\tfor i =\
    \ 1, #s do\n\t\tif s:sub(i, i):match('^[aeiou]$') then\n\t\t\tn = n + 1\n\t\t\
    end\n\tend\n\treturn n\nend", "\tlocal counter = 0\n\tfor i = 1, #s do\n\t\tif\
    \ i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n\t\t\tcounter = counter +\
    \ 1\n\t\tend\n\tend\n\treturn counter\nend", "    local count = 0\n    for i=1,#s\
    \ do\n        if string.match(s:sub(i,i),'^[AEIOU]$') then\n            if i%2==0\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local count = 0\n  for i = 1, #s do\n    if i % 2\
    \ == 0 and s:sub(i, i):find('[AEIOU]') then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local vowels = 'aeiouAEIOU'\n    local count\
    \ = 0\n    for i=1, #s do\n        if string.find(vowels, s:sub(i,i)) then\n \
    \           if i % 2 == 0 then\n                count = count + 1\n          \
    \  end\n        end\n    end\n    return count\nend", "\tlocal counter = 0\n\t\
    for i=1, #s do\n\t\tif (string.byte(s, i) >= 65 and string.byte(s, i) <= 90) and\
    \ (i % 2 == 0) then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\n\
    end", "  return nil\nend", "  local count = 0\n  for i = 1, string.len(s) do\n\
    \    local char = string.sub(s, i, i)\n    if char:match(\"%a\") and char:match(\"\
    %u\") and i % 2 == 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local c = 0\n  for i = 1, string.len(s) do\n    if i % 2 == 0 and string.find(s,\
    \ \"[AEIOU]\", i, true) then\n      c = c + 1\n    end\n  end\n  return c\nend",
  "    local count = 0\n    local x = 2\n    for c in s:gmatch'.' do\n        if c:find'[AEIOU]'\
    \ and (x % 2 == 0) then\n            count = count + 1\n        end\n        x\
    \ = x + 1\n    end\n    return count\nend", "    local num = 0\n    for i = 1,\
    \ #s do\n        if (i % 2 == 0) and is_upper(s, i) then\n            num = num\
    \ + 1\n        end\n    end\n    return num\nend", "  local sum = 0\n  for i=1,#s\
    \ do\n    local c = s:sub(i,i)\n    if (i % 2 == 0) and (c:match(\"[AEIOU]\"))\
    \ then\n      sum = sum + 1\n    end\n  end\n  return sum\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and (s:sub(i, i):match(\"[AEIOU]\"\
    )) then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ n = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:find('[AEIOU]')\
    \ and i % 2 == 0 then\n            n = n + 1\n        end\n    end\n    return\
    \ n\nend", "    if type(s) ~= 'string' then\n        return nil, \"Input string\
    \ is not a string\"\n    end\n    local n = 0\n    for i = 1, #s do\n        if\
    \ i % 2 == 0 and s:sub(i, i):match('^[AEIOU]$') then\n            n = n + 1\n\
    \        end\n    end\n    return n\nend", "    return s:gsub('[AaEeIiOoUu]',\
    \ ' '):gsub('(%S+)', ' '):len()\nend", "\tlocal count = 0\n\tlocal i = 1\n\twhile\
    \ i <= #s do\n\t\tif uppers[s:sub(i,i)] then\n\t\t\tcount = count + 1\n\t\tend\n\
    \t\ti = i + 2\n\tend\n\treturn count\nend", "    return 0\nend", "    local count\
    \ = 0\n    local even = false\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c:match('[AEIOU]') then\n            if even then\n         \
    \       count = count + 1\n            end\n            even = not even\n    \
    \    end\n    end\n    return count\nend", "    local l = string.len(s)\n    local\
    \ c = 0\n    for i = 1, l, 2 do\n        local b = string.byte(s, i)\n       \
    \ if b >= 65 and b <= 90 then\n            c = c + 1\n        end\n    end\n \
    \   return c\nend", "  local count = 0\n  for i = 1, #s do\n    if ((s:sub(i,\
    \ i) == 'A') or (s:sub(i, i) == 'E') or (s:sub(i, i) == 'I') or (s:sub(i, i) ==\
    \ 'O') or (s:sub(i, i) == 'U')) and (i % 2 == 0) then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "  return string.gsub(s, \"[AEIOU]\", \"\
    \")\nend", "    local cnt = 0\n    local vowel = {A=true, E=true, I=true, O=true,\
    \ U=true}\n    for i=1,#s,2 do\n        local c = s:sub(i,i)\n        if vowel[c]\
    \ then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend",
  "  return s:gsub(\"(%a)([AEIOU])(%a*)\", function(a, b, c)\n    if #c == 0 then\n\
    \      return a\n    else\n      return b\n    end\n  end):len()\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if string.match(s, i, i) ~= string.lower(string.match(s,\
    \ i, i)) and (i%2 == 0) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    for i = 1, #s do\n        if math.fmod(i,\
    \ 2) == 0 and string.find(s, s:sub(i, i), 1, true) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local vowel = 'AEIOU'\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and vowel:find(s:sub(i,\
    \ i)) then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ return count_helper(s, true, true)\nend", "    local count = 0\n    for i =\
    \ 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  \
    \  local count = 0\n    for i = 1, string.len(s) do\n        if i % 2 == 0 and\
    \ string.sub(s, i, i) == string.upper(string.sub(s, i, i)) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.find(s, '%u') then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    -- First, turn the string into a table of characters.\n    local t = {}\n \
    \   for c in s:gmatch(\".\") do\n        table.insert(t, c)\n    end", "    local\
    \ count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.match(s, \"\
    %u\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "   local count = 0\n   for i = 1, #s do\n      if (i % 2 == 0) and (s:sub(i,\
    \ i):match(\"^[AEIOU]$\")) then\n         count = count + 1\n      end\n   end\n\
    \   return count\nend", "  return #s:gsub(\"[aeiou]\",function(c) return c:upper()\
    \ end):gsub(\"[^AEOIU]\",\"\")\nend", "    local i = 0\n    local count = 0\n\
    \    while i < #s do\n        i = i + 2\n        if is_upper(s:sub(i, i)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local upper, count = 0, 0\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c:match('[AEIOU]') then\n            upper = upper + 1\n    \
    \    end\n        if upper % 2 == 0 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend", "  local vowel = \"aeiou\"\n  local\
    \ counter = 0\n  for i = 1, string.len(s) do\n    if i % 2 == 0 and vowel:find(string.lower(s:sub(i,\
    \ i))) then\n      counter = counter + 1\n    end\n  end\n  return counter\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
