name: HumanEval_117_select_words
language: lua
results:
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t = s:split(\" \")\n    local res = {}\n    for i = 1, #t do\n\
    \        local c = t[i]:gsub(\"[^bcdfghjklmnpqrstvwxyz]\", \"\")\n        if #c\
    \ == n then\n            table.insert(res, t[i])\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9v99omz.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpt9v99omz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpt9v99omz.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local function count_consonants(word)\n        local consonants = \"\
    qwrtypsdfghjklzxcvbnm\"\n        local count = 0\n        for i = 1, #word do\n\
    \            local c = word:sub(i, i)\n            if not (c == \" \" or c ==\
    \ \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\") then\n      \
    \          count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    local result = {}\n    local words = {}\n    local i = 1\n    while\
    \ true do\n        local j = s:find(\" \", i)\n        if j then\n           \
    \ local word = s:sub(i, j - 1)\n            words[#words + 1] = word\n       \
    \     i = j + 1\n        else\n            words[#words + 1] = s:sub(i)\n    \
    \        break\n        end\n    end\n    for i = 1, #words do\n        local\
    \ word = words[i]\n        if count_consonants(word) == n then\n            result[#result\
    \ + 1] = word\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0vfvopl.lua:54:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpb0vfvopl.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local list = {}\n  for word in s:gmatch(\"%S+\") do\n    if count_consonants(word)\
    \ == n then\n      table.insert(list, word)\n    end\n  end\n  return list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ibu0w04.lua:15:\
    \ attempt to call a nil value (global 'count_consonants')\nstack traceback:\n\t\
    /tmp/tmp2ibu0w04.lua:15: in local 'candidate'\n\t/tmp/tmp2ibu0w04.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local function is_consonant(char)\n    local consonants = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'z'}\n    for i = 1, #consonants do\n      if consonants[i] == char then\n \
    \       return true\n      end\n    end\n    return false\n  end\n  local function\
    \ count_consonants(word)\n    local consonants = 0\n    for i = 1, #word do\n\
    \      if is_consonant(word:sub(i, i)) then\n        consonants = consonants +\
    \ 1\n      end\n    end\n    return consonants\n  end\n  local words = {}\n  for\
    \ word in s:gmatch(\"%w+\") do\n    if count_consonants(word) == n then\n    \
    \  table.insert(words, word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7c4qjf8.lua:44:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpi7c4qjf8.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local consonants, vowels = 'bcdfghjklmnpqrstvwxyz', 'aeiou'\n  local count\
    \ = 0\n  local function getWord(s)\n    local t = {}\n    for word in s:gmatch('%w+')\
    \ do\n      table.insert(t, word)\n    end\n    return t\n  end\n  local function\
    \ getConsonants(s)\n    count = 0\n    for i = 1, #s do\n      for j = 1, #consonants\
    \ do\n        if consonants:sub(j, j) == s:sub(i, i) then\n          count = count\
    \ + 1\n        end\n      end\n    end\n    return count\n  end\n  local t = getWord(s)\n\
    \  local r = {}\n  for i = 1, #t do\n    if getConsonants(t[i]) == n then\n  \
    \    table.insert(r, t[i])\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nytpvo0.lua:47:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp2nytpvo0.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  if #s == 0 then return {} end\n  local words = {}\n  local vowels = {\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n  local cons = {}\n  local k = 0\n  local num_cons\
    \ = 0\n  for i = 1, #s do\n    if s:sub(i, i) == \" \" then\n      if num_cons\
    \ == n then\n        words[#words + 1] = s:sub(k, i - 1)\n      end\n      k =\
    \ i + 1\n      num_cons = 0\n    else\n      for _, v in ipairs(vowels) do\n \
    \       if s:sub(i, i) == v then\n          cons[#cons + 1] = i\n        end\n\
    \      end\n    end\n  end\n  for i = 1, #cons do\n    if cons[i] == 1 or cons[i]\
    \ == #s then\n      num_cons = num_cons + 1\n    elseif cons[i] ~= cons[i + 1]\
    \ - 1 then\n      num_cons = num_cons + 1\n    end\n  end\n  if num_cons == n\
    \ then\n    words[#words + 1] = s:sub(k, #s)\n  end\n  return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcajt2q3n.lua:37:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcajt2q3n.lua:37: in local 'candidate'\n\t/tmp/tmpcajt2q3n.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal words = {}\n\tlocal word = \"\"\n\tlocal consonants = 0\n\tlocal\
    \ has_word = false\n\t\n\tfor i = 1, string.len(s) do\n\t\tif s:sub(i, i) ~= \"\
    \ \" then\n\t\t\tword = word .. s:sub(i, i)\n\t\t\thas_word = true\n\t\t\t\n\t\
    \t\tif not is_vowel(s:sub(i, i)) then\n\t\t\t\tconsonants = consonants + 1\n\t\
    \t\tend\n\t\telse\n\t\t\tif has_word then\n\t\t\t\tif consonants == n then\n\t\
    \t\t\t\ttable.insert(words, word)\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tword = \"\"\n\
    \t\t\t\tconsonants = 0\n\t\t\t\thas_word = false\n\t\t\tend\n\t\tend\n\tend\n\t\
    \n\tif has_word then\n\t\tif consonants == n then\n\t\t\ttable.insert(words, word)\n\
    \t\tend\n\tend\n\t\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtrbgoal.lua:23:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpbtrbgoal.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpbtrbgoal.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local function has_exactly_n_consonants(s, n)\n        local consonants\
    \ = {\n            ['B'] = true, ['C'] = true, ['D'] = true, ['F'] = true, ['G']\
    \ = true,\n            ['H'] = true, ['J'] = true, ['K'] = true, ['L'] = true,\
    \ ['M'] = true,\n            ['N'] = true, ['P'] = true, ['Q'] = true, ['R'] =\
    \ true, ['S'] = true,\n            ['T'] = true, ['V'] = true, ['W'] = true, ['X']\
    \ = true, ['Y'] = true,\n            ['Z'] = true\n        }\n        local cnt\
    \ = 0\n        for i = 1, string.len(s) do\n            if consonants[string.sub(s,\
    \ i, i)] then\n                cnt = cnt + 1\n            end\n        end\n \
    \       return cnt == n\n    end\n    local t = {}\n    for i in string.gmatch(s,\
    \ '%S+') do\n        if has_exactly_n_consonants(i, n) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq7uzeyk.lua:41:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfq7uzeyk.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local function is_vowel(c)\n\
    \    for _, v in ipairs(vowels) do\n      if v == c then return true end\n   \
    \ end\n    return false\n  end\n  local words = {}\n  for word in s:gmatch('%S+')\
    \ do\n    local n_consonants = 0\n    for c in word:gmatch('.') do\n      if not\
    \ is_vowel(c:lower()) then n_consonants = n_consonants + 1 end\n    end\n    if\
    \ n_consonants == n then table.insert(words, word) end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  for word in s:gmatch(\"%S+\") do\n    if word:match(\"\
    [bcdfghjklmnpqrstvwxz]\") and word:match(\"[bcdfghjklmnpqrstvwxz]\") == n then\n\
    \      table.insert(t, word)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot9ci7tp.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpot9ci7tp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpc4lflr.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphpc4lflr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local list = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:match(\"\
    (%a)%1\") then\n      local consonants = word:gsub(\"%l\", \"\")\n      if #consonants\
    \ == n then\n        table.insert(list, word)\n      end\n    end\n  end\n  return\
    \ list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zh820gm.lua:28:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp7zh820gm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local function count_consonants(word)\n        local consonants = {\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"}\n        local count\
    \ = 0\n        for i = 1, #word do\n            for j = 1, #consonants do\n  \
    \              if word:sub(i, i) == consonants[j] then\n                    count\
    \ = count + 1\n                end\n            end\n        end\n        return\
    \ count\n    end\n    local res = {}\n    for word in s:gmatch(\"%S+\") do\n \
    \       if count_consonants(word) == n then\n            table.insert(res, word)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qdtdmzm.lua:38:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp9qdtdmzm.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words, word = {}, \"\"\n    for c in s:gmatch(\".\") do\n    \
    \    if c == \" \" then\n            if #word == n then\n                table.insert(words,\
    \ word)\n            end\n            word = \"\"\n        else\n            word\
    \ = word .. c\n        end\n    end\n    if #word == n then\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr2c4odj.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmplr2c4odj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf27pgryq.lua:19:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpf27pgryq.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = word:gsub(\"[aeiouAEIOU]\", \"\")\n        if #consonants == n\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal words, t, numberOfConsonants = {}, {}, 0\n\tfor consonant in s:gmatch(\"\
    [^aeiou ]\") do\n\t\tt[consonant] = true\n\tend\n\tfor word in s:gmatch(\"%S+\"\
    ) do\n\t\tfor letter in word:gmatch(\".\") do\n\t\t\tif t[letter] then\n\t\t\t\
    \tnumberOfConsonants = numberOfConsonants + 1\n\t\t\tend\n\t\tend\n\t\tif numberOfConsonants\
    \ == n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\t\tnumberOfConsonants\
    \ = 0\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r_jud24.lua:38:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8r_jud24.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  if s == \"\" then return {} end\n  local word_list = {}\n  for word in\
    \ s:gmatch(\"%w+\") do\n    if (word:gsub(\"[^aeiou]\", \"\"):len() == n) then\n\
    \      table.insert(word_list, word)\n    end\n  end\n  return word_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xd6t582.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp5xd6t582.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local cons = 'bcdfghjklmnpqrstvwxyz'\n    local words = {}\n    for\
    \ word in s:gmatch('%w+') do\n        local count = 0\n        for char in word:gmatch('.')\
    \ do\n            if cons:find(char:lower()) then\n                count = count\
    \ + 1\n            end\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if #s == 0 then return {} end\n    s = s:lower()\n    local words =\
    \ {}\n    for w in s:gmatch(\"%S+\") do\n        local consonants = 0\n      \
    \  for c in w:gmatch(\"[b-df-hj-np-tv-z]+\") do\n            consonants = consonants\
    \ + 1\n        end\n        if consonants == n then\n            table.insert(words,\
    \ w)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ny_to9r.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6ny_to9r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nfahzcs.lua:19:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp1nfahzcs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    local cnt = 0\n    for word in s:gmatch(\"%w+\"\
    ) do\n        for consonant in word:gmatch(\"[^aeiouAEIOU]\") do\n           \
    \ cnt = cnt + 1\n        end\n        if cnt == n then\n            table.insert(result,\
    \ word)\n        end\n        cnt = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n   -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfqq08a9.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpqfqq08a9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal res = {}\n\tlocal c, w = 0, nil\n\tfor w in s:gmatch(\"%w+\") do\n\
    \t\tc = w:gsub(\"[%a&&[^aeiou]]\", \"\"):len()\n\t\tif c == n then\n\t\t\ttable.insert(res,\
    \ w)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncke1u9g.lua:27:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpncke1u9g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    local vw = {}\n    local\
    \ nvw = {}\n    local words = {}\n    local result = {}\n    for i = 1, #s do\n\
    \        if s:sub(i, i) == ' ' then\n            table.insert(vw, words)\n   \
    \         words = {}\n        else\n            table.insert(words, s:sub(i, i))\n\
    \        end\n    end\n    table.insert(vw, words)\n    for i = 1, #vw do\n  \
    \      local temp = {}\n        for j = 1, #vw[i] do\n            table.insert(temp,\
    \ vw[i][j])\n        end\n        table.insert(nvw, temp)\n    end\n    for i\
    \ = 1, #nvw do\n        for j = 1, #nvw[i] do\n            for k = 1, #consonants\
    \ do\n                if nvw[i][j] == consonants[k] then\n                   \
    \ nvw[i][j] = 1\n                end\n            end\n        end\n    end\n\
    \    for i = 1, #nvw do\n        local sum = 0\n        for j = 1, #nvw[i] do\n\
    \            sum = sum + nvw[i][j]\n        end\n        if sum == n then\n  \
    \          local word = ''\n            for j = 1, #nvw[i] do\n              \
    \  word = word .. vw[i][j]\n            end\n            table.insert(result,\
    \ word)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp46smns4a.lua:46:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmp46smns4a.lua:46: in local 'candidate'\n\t/tmp/tmp46smns4a.lua:62: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  if n == 0 then\n    for w in s:gmatch(\"[^%s]+\") do t[#t+1]\
    \ = w end\n  else\n    for w in s:gmatch(\"%w+\") do\n      local c = w:gsub(\"\
    [%a&&[^aeiou]]\", \"\")\n      if #c == n then t[#t+1] = w end\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4imap3qx.lua:28:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmp4imap3qx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = string.split(s, ' ')\n    local consonants = 0\n    local\
    \ results = {}\n    for i = 1, #words do\n        local word = words[i]\n    \
    \    consonants = 0\n        for j = 1, #word do\n            local c = word:sub(j,\
    \ j)\n            if (c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~=\
    \ 'u') then\n                consonants = consonants + 1\n            end\n  \
    \      end\n        if (consonants == n) then\n            table.insert(results,\
    \ word)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx3suv3o7.lua:13:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpx3suv3o7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpx3suv3o7.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg_6uco1.lua:18:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpcg_6uco1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  s = s:lower()\n  local function is_consonant(c)\n    if c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      return false\n    end\n\
    \    return true\n  end\n  local function count_consonants(word)\n    if not word\
    \ then return 0 end\n    local count = 0\n    for i = 1, #word do\n      if is_consonant(word:sub(i,\
    \ i)) then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\n  local result = {}\n  for word in s:gmatch(\"%S+\") do\n    if count_consonants(word)\
    \ == n then\n      table.insert(result, word)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk84n4mf.lua:43:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"mary\", \"lamb\"}\nstack traceback:\n\
    \t/tmp/tmpjk84n4mf.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local function is_consonant(c)\n        local cc = c:lower()\n     \
    \   return cc:find(\"^[bcdfghjklmnpqrstvwxyz]$\") ~= nil\n    end\n    local words\
    \ = {}\n    for w in s:gmatch(\"%S+\") do\n        local nc = 0\n        for c\
    \ in w:gmatch(\".\") do\n            if is_consonant(c) then\n               \
    \ nc = nc + 1\n            end\n        end\n        if nc == n then\n       \
    \     table.insert(words, w)\n        end\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal tab, word, idx = {}, {}, 1\n\twhile idx < #s do\n\t\tlocal c = s:sub(idx,\
    \ idx)\n\t\tif c == ' ' then\n\t\t\ttable.insert(tab, table.concat(word))\n\t\t\
    \tword = {}\n\t\telse\n\t\t\ttable.insert(word, c)\n\t\tend\n\t\tidx = idx + 1\n\
    \tend\n\ttable.insert(tab, table.concat(word))\n\tlocal vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n\tfor i = #tab, 1, -1 do\n\t\tlocal num = 0\n\t\tfor j = 1, #tab[i]\
    \ do\n\t\t\tlocal c = tab[i]:sub(j, j)\n\t\t\tif not array_contains(vowels, c)\
    \ then\n\t\t\t\tnum = num + 1\n\t\t\tend\n\t\tend\n\t\tif num ~= n then\n\t\t\t\
    table.remove(tab, i)\n\t\tend\n\tend\n\treturn tab\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpitm318c6.lua:30:\
    \ attempt to call a nil value (global 'array_contains')\nstack traceback:\n\t\
    /tmp/tmpitm318c6.lua:30: in local 'candidate'\n\t/tmp/tmpitm318c6.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = word:gsub(\"[^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\", \"\")\n    if\
    \ #consonants == n then\n      table.insert(words, word)\n    end\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for word\
    \ in s:gmatch('%w+') do\n    local count = 0\n    for c in word:gmatch('%a') do\n\
    \      if not table.has_value(vowels, c) then\n        count = count + 1\n   \
    \   end\n    end\n    if count == n then\n      table.insert(words, word)\n  \
    \  end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_tbwtau.lua:18:\
    \ attempt to call a nil value (field 'has_value')\nstack traceback:\n\t/tmp/tmp2_tbwtau.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp2_tbwtau.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    s = s:lower()\n    local t = {'a', 'e', 'i', 'o', 'u'}\n    local r\
    \ = {}\n    local function check_word(s)\n        local c = 0\n        for i =\
    \ 1, s:len() do\n            if not t[s:sub(i, i)] then\n                c = c\
    \ + 1\n            end\n        end\n        return c == n\n    end\n    for w\
    \ in s:gmatch('%w+') do\n        if check_word(w) then\n            table.insert(r,\
    \ w)\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovs77p_g.lua:36:\
    \ expected: {\"little\"}\nactual: {\"mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpovs77p_g.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 1\n    while true do\n        local\
    \ j = s:find(\" \", i)\n        if j == nil then\n            j = #s\n       \
    \ end\n        if j - i == n then\n            table.insert(words, s:sub(i, j\
    \ - 1))\n        end\n        if j == #s then\n            break\n        end\n\
    \        i = j + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbeq22d1l.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpbeq22d1l.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal r = {}\n\tlocal w = {}\n\tlocal c = 0\n\tfor k, v in s:gmatch(\"\
    ([%a]+)\") do\n\t\ttable.insert(w, k)\n\tend\n\tfor i, j in ipairs(w) do\n\t\t\
    for a, b in j:gmatch(\"([^aeiou]+)\") do\n\t\t\tc = c + #a\n\t\tend\n\t\tif c\
    \ == n then\n\t\t\ttable.insert(r, j)\n\t\tend\n\t\tc = 0\n\tend\n\treturn r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0zmbm2k.lua:38:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpu0zmbm2k.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  if s == \"\" then return {} end\n  local arr, result = {}, {}\n  for word\
    \ in s:gmatch(\"%w+\") do\n    arr[#arr + 1] = word\n  end\n  for i = 1, #arr\
    \ do\n    local count = 0\n    for j = 1, #arr[i] do\n      if arr[i]:sub(j, j):match(\"\
    [^AEIOUaeiou]\") then\n        count = count + 1\n      end\n    end\n    if count\
    \ == n then\n      result[#result + 1] = arr[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  if #s == 0 then return {} end\n  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    local cons = 0\n    for char in word:gmatch(\"[bcdfghjklmnpqrstvwxyz]\"\
    ) do\n      cons = cons + 1\n    end\n    if cons == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2br72ts.lua:31:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpz2br72ts.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal function is_vowel(c)\n\t\treturn {\n\t\t\t[\"a\"] = true,\n\t\t\t\
    [\"e\"] = true,\n\t\t\t[\"i\"] = true,\n\t\t\t[\"o\"] = true,\n\t\t\t[\"u\"] =\
    \ true,\n\t\t}[c]\n\tend\n\tlocal words = {}\n\tfor word in s:gmatch(\"%w+\")\
    \ do\n\t\tlocal count = 0\n\t\tfor c in word:gmatch(\".\") do\n\t\t\tif not is_vowel(c:lower())\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count == n then\n\
    \t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxb0bbc91.lua:20: 'end' expected (to close 'function' at line\
    \ 13) near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  for w in s:gmatch(\"%w+\") do\n    if w:gsub(\"[^aeiou]\"\
    , \"\"):len() == n then\n      t[#t+1] = w\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bkbmg8r.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8bkbmg8r.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local consonants = \"bcdfghjklmnpqrstvwxyz\"\n    local t = {}\n   \
    \ local words = {}\n    local c = 0\n    -- split string into words\n    for w\
    \ in s:gmatch(\"%w+\") do\n        table.insert(t, w)\n    end\n    -- check each\
    \ word for consonants\n    for i = 1, #t do\n        for j = 1, #t[i] do\n   \
    \         if consonants:find(t[i]:sub(j, j)) then\n                c = c + 1\n\
    \            end\n        end\n        if c == n then\n            table.insert(words,\
    \ t[i])\n        end\n        c = 0\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsso6bva.lua:40:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpdsso6bva.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local consonants = 'bcdfghjklmnpqrstvwxyz'\n \
    \   for w in s:gmatch('%S+') do\n        local c = 0\n        for l in w:lower():gmatch('[^aeiou]+')\
    \ do\n            c = c + #l\n        end\n        if c == n then\n          \
    \  table.insert(words, w)\n        end\n    end\n    return words\nend\nprint(table.concat(select_words(\"\
    Mary had a little lamb\", 4), ' | '))\nprint(table.concat(select_words(\"Mary\
    \ had a little lamb\", 3), ' | '))\nprint(table.concat(select_words(\"simple white\
    \ space\", 2), ' | '))\nprint(table.concat(select_words(\"Hello world\", 4), '\
    \ | '))\nprint(table.concat(select_words(\"Uncle sam\", 3), ' | '))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "little\nMary | lamb\n\nworld\nUncle\n.\nRan 1 tests in 0.000 seconds, 1\
    \ success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local vov = {\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\"}\n  for word in s:gmatch(\"%w+\") do\n    local num = 0\n    for char in word:gmatch(\"\
    %l\") do\n      for _,v in ipairs(vov) do\n        if v == char then break end\n\
    \        num = num + 1\n      end\n    end\n    if num == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gj2w4a9.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp9gj2w4a9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalnwpwpp.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpalnwpwpp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnl1zbya.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpsnl1zbya.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    s = s:gsub(\" \", \"\")\n    local words = {}\n    local c = {}\n  \
    \  for i = 1, string.len(s) do\n        table.insert(c, s:sub(i, i))\n    end\n\
    \    -- print(\"c\", #c)\n    local flag = false\n    local tmp = {}\n    for\
    \ i = 1, #c do\n        if i == 1 then\n            tmp[1] = c[i]\n        else\n\
    \            table.insert(tmp, c[i])\n        end\n        local consonants =\
    \ 0\n        local vowels = 0\n        -- print(\"tmp\", #tmp)\n        for j\
    \ = 1, #tmp do\n            -- print(\"tmp[j]\", tmp[j])\n            if tmp[j]\
    \ == \"a\" or tmp[j] == \"A\" or tmp[j] == \"e\" or tmp[j] == \"E\" or\n     \
    \           tmp[j] == \"i\" or tmp[j] == \"I\" or tmp[j] == \"o\" or tmp[j] ==\
    \ \"O\" or\n                tmp[j] == \"u\" or tmp[j] == \"U\" then\n        \
    \        vowels = vowels + 1\n            else\n                consonants = consonants\
    \ + 1\n            end\n        end\n        -- print(\"consonants, vowels\",\
    \ consonants, vowels)\n        if consonants == n then\n            table.insert(words,\
    \ table.concat(tmp))\n            tmp = {}\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_xwb9vo.lua:53:\
    \ expected: {\"little\"}\nactual: {\"Maryh\", \"adalitt\", \"lelamb\"}\nstack\
    \ traceback:\n\t/tmp/tmpq_xwb9vo.lua:53: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n   local result = {}\n   local current_word = {}\n   local consonants =\
    \ {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"}\n   local vocal\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n   for i = 1, #s do\n      if\
    \ s:sub(i, i) ~= \" \" then\n         table.insert(current_word, s:sub(i, i))\n\
    \      else\n         local consonant_count = 0\n         for j = 1, #current_word\
    \ do\n            for k = 1, #consonants do\n               if current_word[j]\
    \ == consonants[k] then\n                  consonant_count = consonant_count +\
    \ 1\n               end\n            end\n         end\n         if consonant_count\
    \ == n then\n            local current_word_string = \"\"\n            for j =\
    \ 1, #current_word do\n               current_word_string = current_word_string\
    \ .. current_word[j]\n            end\n            table.insert(result, current_word_string)\n\
    \         end\n         current_word = {}\n      end\n   end\n   local consonant_count\
    \ = 0\n   for j = 1, #current_word do\n      for k = 1, #consonants do\n     \
    \    if current_word[j] == consonants[k] then\n            consonant_count = consonant_count\
    \ + 1\n         end\n      end\n   end\n   if consonant_count == n then\n    \
    \  local current_word_string = \"\"\n      for j = 1, #current_word do\n     \
    \    current_word_string = current_word_string .. current_word[j]\n      end\n\
    \      table.insert(result, current_word_string)\n   end\n   return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sp1j3hk.lua:61:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp4sp1j3hk.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal r, ln = {}, n\n\tstring.gsub(s, \"(%w+)\", function(w) \n\t\tstring.gsub(w,\
    \ \"[^aeiouAEIOU]\", function() \n\t\t\tln = ln - 1\n\t\tend)\n\t\tif ln == 0\
    \ then\n\t\t\ttable.insert(r, w)\n\t\tend\n\t\tln = n\n\tend)\n\treturn r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal count = {}\n\tfor c\
    \ in s:gmatch(\"%w+\") do\n\t\tlocal c1 = c:lower()\n\t\tlocal num = 0\n\t\tfor\
    \ i = 1,#c1 do\n\t\t\tif not vowels[c1:sub(i,i)] then\n\t\t\t\tnum = num + 1\n\
    \t\t\tend\n\t\tend\n\t\tif num == n then\n\t\t\ttable.insert(count, c)\n\t\tend\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfet4egzu.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpfet4egzu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  assert(type(s) == \"string\", \"input must be a string\")\n  assert(type(n)\
    \ == \"number\", \"n must be a number\")\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa14dbwnj.lua:21:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpa14dbwnj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words, result = {}, {}\n    for word in s:gmatch(\"%w+\") do\n\
    \        words[#words + 1] = word\n    end\n    for _, word in ipairs(words) do\n\
    \        local consonants = word:gsub(\"[^b-df-hj-np-tv-z]+\", \"\")\n       \
    \ if consonants:len() == n then\n            result[#result + 1] = word\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpft9s0c88.lua:30:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpft9s0c88.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local l = {}\n  local w = ''\n  local v = 'aeiou'\n  for c in s:gmatch('.')\
    \ do\n    if c == ' ' then\n      local cn = 0\n      for cc in w:gmatch('[^'..v..']')\
    \ do\n        cn = cn + 1\n      end\n      if cn == n then\n        l[#l+1] =\
    \ w\n      end\n      w = ''\n    else\n      w = w .. c\n    end\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_4894ar.lua:37:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpx_4894ar.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local str = split(s, ' ')\n    local res = {}\n    for i = 1, #str do\n\
    \        local nc = 0\n        for j = 1, #str[i] do\n            if not (str[i]:sub(j,\
    \ j) == 'a' or\n                str[i]:sub(j, j) == 'e' or\n                str[i]:sub(j,\
    \ j) == 'i' or\n                str[i]:sub(j, j) == 'o' or\n                str[i]:sub(j,\
    \ j) == 'u') then\n                nc = nc + 1\n            end\n        end\n\
    \        if nc == n then\n            table.insert(res, str[i])\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfx1tqnof.lua:13:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpfx1tqnof.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpfx1tqnof.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n   local t = {}\n   local c = s:gmatch'[aeiou]*'\n   for w in s:gmatch'%w+'\
    \ do\n      if #c() == n then t[#t+1] = w end\n   end\n   return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb34dbkte.lua:24:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpb34dbkte.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ words = {}\n  for word in s:gmatch(\"%S+\") do\n    local cns = 0\n    for i\
    \ = 1, #word do\n      local found = false\n      for j = 1, #vowels do\n    \
    \    if word:sub(i, i) == vowels[j] then\n          found = true\n          break\n\
    \        end\n      end\n      if not found then\n        cns = cns + 1\n    \
    \  end\n    end\n    if cns == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrc9k6_o.lua:44:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpsrc9k6_o.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = s:gmatch(\"%w+\")\n    local result = {}\n    for word\
    \ in words do\n        local count = 0\n        for _ in word:gmatch(\"[^aeiouAEIOU]\"\
    ) do\n            count = count + 1\n        end\n        if count == n then\n\
    \            table.insert(result, word)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local res = {}\n  for word in s:gmatch(\"%S+\") do\n    local consonants\
    \ = 0\n    for c in word:gmatch(\"%a\") do\n      if not c:match(\"[aeiou]\")\
    \ then\n        consonants = consonants + 1\n      end\n    end\n    if consonants\
    \ == n then\n      table.insert(res, word)\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns9_1wm5.lua:35:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpns9_1wm5.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\t-- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60_02rl1.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp60_02rl1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    words = {}\n    word = ''\n    count = 0\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= ' ' then\n            word =\
    \ word .. s:sub(i, i)\n        else\n            for j = 1, #word do\n       \
    \         if word:sub(j, j) == 'a' or word:sub(j, j) == 'e' or word:sub(j, j)\
    \ == 'i' or word:sub(j, j) == 'o' or word:sub(j, j) == 'u' then\n            \
    \        consonants = consonants + 1\n                end\n            end\n \
    \           if consonants == n then\n                words[count + 1] = word\n\
    \                count = count + 1\n            end\n            word = ''\n \
    \           consonants = 0\n        end\n    end\n    for j = 1, #word do\n  \
    \      if word:sub(j, j) == 'a' or word:sub(j, j) == 'e' or word:sub(j, j) ==\
    \ 'i' or word:sub(j, j) == 'o' or word:sub(j, j) == 'u' then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  words[count + 1] = word\n        count = count + 1\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk41bzoaj.lua:49:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpk41bzoaj.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    -- TODO: write your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ssqwza7.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp6ssqwza7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxzreuh_.lua:18:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpcxzreuh_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local res = {}\n    local lcons = 0\n    local word = \"\"\n    for\
    \ i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            if s:sub(i,\
    \ i) == \"a\" or s:sub(i, i) == \"e\" or s:sub(i, i) == \"i\" or s:sub(i, i) ==\
    \ \"o\" or s:sub(i, i) == \"u\" then\n                word = word .. s:sub(i,\
    \ i)\n            else\n                lcons = lcons + 1\n                word\
    \ = word .. s:sub(i, i)\n            end\n        else\n            if lcons ==\
    \ n then\n                table.insert(res, word)\n            end\n         \
    \   lcons = 0\n            word = \"\"\n        end\n    end\n    if lcons ==\
    \ n then\n        table.insert(res, word)\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4_tudf_.lua:45:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpr4_tudf_.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local consonants = 'bcdfghjklmnpqrstvwxyz'\n  local result = {}\n  if\
    \ #s == 0 then return result end\n  for word in s:gmatch('%w+') do\n    local\
    \ c_count = 0\n    for c in word:gmatch('[b-z]') do\n      c_count = c_count +\
    \ 1\n    end\n    if c_count == n then table.insert(result, word) end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsoetbeu.lua:29:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmptsoetbeu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  for word in s:gmatch(\"%S+\") do\n    local consonants\
    \ = word:gsub(\"[aeiouy]+\", \"\")\n    if #consonants == n then\n      table.insert(t,\
    \ word)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4e7avsay.lua:27:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp4e7avsay.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local current_word = \"\"\n    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local consonants = 0\n    for i = 1, #s do\n\
    \        local ch = s:sub(i, i)\n        if ch ~= ' ' then\n            current_word\
    \ = current_word .. ch\n            if not vowels[ch] then\n                consonants\
    \ = consonants + 1\n            end\n        else\n            if consonants ==\
    \ n then\n                words[#words + 1] = current_word\n            end\n\
    \            current_word = \"\"\n            consonants = 0\n        end\n  \
    \  end\n    if current_word ~= \"\" and consonants == n then\n        words[#words\
    \ + 1] = current_word\n    end\n    return words\nend\nprint(select_words(\"Mary\
    \ had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\n\
    print(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\"\
    , 4))\nprint(select_words(\"Uncle sam\", 3))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "table: 0xb98d90\ntable: 0xb98bb0\ntable: 0xb96c50\ntable: 0xb94020\ntable:\
    \ 0xb942e0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabq9vk75.lua:46:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpabq9vk75.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local word_length = 0\n\
    \    local consonants = \"bcdfghjklmnpqrstvwxyz\"\n    local vowel = \"aeiou\"\
    \n    local consonant_count = 0\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        if char == \" \" then\n            if word_length == n then\n  \
    \              table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            word_length = 0\n            consonant_count = 0\n       \
    \ else\n            word = word .. char\n            if consonants:find(char)\
    \ then\n                consonant_count = consonant_count + 1\n            end\n\
    \            word_length = word_length + 1\n        end\n    end\n    if word_length\
    \ == n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpracxsw18.lua:45:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpracxsw18.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local list = {}\n    for word in s:gmatch(\"%w+\") do\n        if n\
    \ == #word:gsub(\"[aeiouAEIOU]\", \"\") then\n            table.insert(list, word)\n\
    \        end\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local t = {}\n    local i = 1\n    local len =\
    \ string.len(s)\n    local word = \"\"\n    local vowels = {\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    for j = 1, len do\n        if string.sub(s, j, j) == \" \"\
    \ then\n            if #word ~= 0 then\n                t[i] = word\n        \
    \        i = i + 1\n                word = \"\"\n            end\n        else\n\
    \            word = word .. string.sub(s, j, j)\n        end\n    end\n    if\
    \ #word ~= 0 then\n        t[i] = word\n    end\n    local k = 1\n    for i =\
    \ 1, #t do\n        local consonants = 0\n        for j = 1, string.len(t[i])\
    \ do\n            local is_vowel = false\n            for _, v in ipairs(vowels)\
    \ do\n                if string.sub(t[i], j, j) == v then\n                  \
    \  is_vowel = true\n                    break\n                end\n         \
    \   end\n            if not is_vowel then\n                consonants = consonants\
    \ + 1\n            end\n        end\n        if consonants == n then\n       \
    \     words[k] = t[i]\n            k = k + 1\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp649q3_gw.lua:63:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp649q3_gw.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local count = 0\n    local t = {}\n    local v = 0\n    local a = 0\n\
    \    local j = 0\n    local start = 0\n    local res = {}\n    local p = 0\n \
    \   local i = 0\n    t[\"a\"] = 0\n    t[\"e\"] = 0\n    t[\"i\"] = 0\n    t[\"\
    o\"] = 0\n    t[\"u\"] = 0\n    for i = 1, s:len() do\n        if s:sub(i, i)\
    \ == \" \" then\n            if j == 0 then\n                start = i\n     \
    \       end\n            j = j + 1\n        end\n        if t[s:sub(i, i)] ==\
    \ nil then\n            count = count + 1\n        end\n    end\n    for i = start,\
    \ s:len() do\n        if s:sub(i, i) == \" \" then\n            if count == n\
    \ then\n                a = 1\n            end\n            if a == 1 then\n \
    \               res[p] = s:sub(start, i)\n                p = p + 1\n        \
    \    end\n            a = 0\n            count = 0\n            start = i + 1\n\
    \        end\n        if t[s:sub(i, i)] == nil then\n            count = count\
    \ + 1\n        end\n    end\n    if count == n then\n        a = 1\n    end\n\
    \    if a == 1 then\n        res[p] = s:sub(start, i)\n    end\n    return res\n\
    end\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"\
    Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\n\
    print(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "table: 0x227f900\ntable: 0x227fb10\ntable: 0x2278630\ntable: 0x22786e0\n\
    table: 0x22820c0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz24np79s.lua:72:\
    \ expected: {\"little\"}\nactual: {0=\"\"}\nstack traceback:\n\t/tmp/tmpz24np79s.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local count = 0\n  for word in s:gmatch(\"%S+\") do\n\
    \    count = word:gsub(\"[^aeiouy]\", \"\")\n    if count == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21032bx2.lua:27:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp21032bx2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local cons = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    local list = {}\n    for word\
    \ in s:gmatch(\"%w+\") do\n        local count = 0\n        for c in word:gmatch(\"\
    %a\") do\n            if cons[c] then\n                count = count + 1\n   \
    \         end\n        end\n        if count == n then\n            table.insert(list,\
    \ word)\n        end\n    end\n    return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfo_m8mta.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfo_m8mta.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local n = n - 1\n    local result = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        if word:gsub(\"[AEIOUaeiou]\", \"\"):len() == n then\n    \
    \        table.insert(result, word)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsvjh5y9.lua:26:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpjsvjh5y9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local out = {}\n  local vowels = {a = true, e = true, i = true, o = true,\
    \ u = true}\n  for word in s:gmatch(\"%S+\") do\n    local cons = 0\n    for c\
    \ in word:gmatch(\".\") do\n      if not vowels[c:lower()] then\n        cons\
    \ = cons + 1\n      end\n    end\n    if cons == n then\n      table.insert(out,\
    \ word)\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local res = {}\n  local str = ''\n  local list = {}\n  local result =\
    \ {}\n  local list = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  for i =\
    \ 1, #s do\n    local char = s:sub(i, i)\n    if char == ' ' then\n      table.insert(list,\
    \ str)\n      str = ''\n    else\n      str = str .. char\n    end\n  end\n  table.insert(list,\
    \ str)\n  for i = 1, #list do\n    local word = list[i]\n    local count = 0\n\
    \    for j = 1, #word do\n      local char = word:sub(j, j)\n      for k = 1,\
    \ #consonants do\n        if char == consonants[k] then\n          count = count\
    \ + 1\n        end\n      end\n    end\n    if count == n then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc89y5ste.lua:51:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpc89y5ste.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [^aeiouAEIOU]\", \"\"):len() == n then\n            table.insert(words, word)\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5kmzopd.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpa5kmzopd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9iitedf.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpo9iitedf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local result = {}\n  for word in s:gmatch(\"%S+\") do\n    local consonants\
    \ = word:gsub(\"[^aeiou]\", \"\")\n    if #consonants == n then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvalhus8k.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvalhus8k.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local ret = {}\n  local t = {}\n  local count = 0\n  local last = ''\n\
    \  for i=1,#s do\n    if s:sub(i,i) == ' ' then\n      count = 0\n      for k,v\
    \ in pairs(t) do\n        count = count + v\n      end\n      if count == n then\n\
    \        ret[#ret+1] = last\n      end\n      t = {}\n      last = ''\n    else\n\
    \      if \"aeiouAEIOU\" :find(s:sub(i,i)) then\n        t[s:sub(i,i)] = (t[s:sub(i,i)]\
    \ or 0) + 1\n      end\n      last = last .. s:sub(i,i)\n    end\n  end\n  count\
    \ = 0\n  for k,v in pairs(t) do\n    count = count + v\n  end\n  if count == n\
    \ then\n    ret[#ret+1] = last\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwx_fhrwx.lua:29: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  if #s > 0 then\n    local counter = 0\n    local words\
    \ = {}\n    local current_word = {}\n    for i=1,#s do\n      local char = s:sub(i,i)\n\
    \      if char == \" \" then\n        if #current_word > 0 then\n          table.insert(words,\
    \ table.concat(current_word))\n          current_word = {}\n        end\n    \
    \  else\n        table.insert(current_word, char)\n      end\n    end\n    if\
    \ #current_word > 0 then\n      table.insert(words, table.concat(current_word))\n\
    \    end\n    for i=1,#words do\n      local word = words[i]\n      local vowels\
    \ = \"aeiou\"\n      for j=1,#word do\n        local char = word:sub(j,j)\n  \
    \      if vowels:find(char) == nil then\n          counter = counter + 1\n   \
    \     end\n      end\n      if counter == n then\n        table.insert(t, word)\n\
    \      end\n      counter = 0\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdey1nn6.lua:57:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppdey1nn6.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t = {}\n    for word in s:gmatch(\"%w+\") do\n        local count\
    \ = 0\n        for ch in word:gmatch(\"[bcdfghjklmnpqrstvwxyz]\") do\n       \
    \     count = count + 1\n        end\n        if count == n then\n           \
    \ table.insert(t, word)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1r780mb.lua:30:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpy1r780mb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- your code here\n  if s == '' then\n    return {}\n  end\n  local words\
    \ = {}\n  local count = 0\n  local temp = ''\n  local n = n\n  local function\
    \ is_consonant(char)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i\
    \ = 1, #vowels do\n      if char == vowels[i] then\n        return false\n   \
    \   end\n    end\n    return true\n  end\n  for char in s:gmatch('.') do\n   \
    \ if char == ' ' then\n      if count == n then\n        table.insert(words, temp)\n\
    \      end\n      temp = ''\n      count = 0\n    else\n      if is_consonant(char)\
    \ then\n        count = count + 1\n      end\n      temp = temp .. char\n    end\n\
    \  end\n  if count == n then\n    table.insert(words, temp)\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsok2trm.lua:57:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfsok2trm.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxhg9pfq.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpjxhg9pfq.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n   local result = {}\n   for word in s:gmatch(\"%w+\") do\n      local n_consonants\
    \ = 0\n      for char in word:gmatch(\"[^aeiou]\") do\n         n_consonants =\
    \ n_consonants + 1\n      end\n      if n_consonants == n then\n         table.insert(result,\
    \ word)\n      end\n   end\n   return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0vgxiw_.lua:33:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpd0vgxiw_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal words, consonants = {}, {b=1, c=1, d=1, f=1, g=1, h=1, j=1, k=1,\
    \ l=1, m=1, n=1, p=1, q=1, r=1, s=1, t=1, v=1, w=1, x=1, y=1, z=1}\n\tlocal v\
    \ = s:lower():gsub(\"%p\", \" \"):gsub(\"%a\", function(c) if consonants[c] then\
    \ return \"c\" else return \"v\" end end)\n\tfor w in v:gmatch(\"%S+\") do\n\t\
    \tlocal c = 0\n\t\tfor _ in w:gmatch(\"c\") do c = c + 1 end\n\t\tif c == n then\
    \ table.insert(words, s:sub(v:find(w), #w + v:find(w))) end\n\tend\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93fdx5xb.lua:26:\
    \ expected: {\"little\"}\nactual: {\"little \"}\nstack traceback:\n\t/tmp/tmp93fdx5xb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal t = {}\n\tlocal w = s:gmatch('%w+')\n\tfor word in w do\n\t\tif\
    \ #word == n + word:gsub('[^%a]', ''):gsub('[aeiou]', ''):len() then\n\t\t\ttable.insert(t,\
    \ word)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qo923i_.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6qo923i_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t = {}\n    local k = 0\n    for w in s:gmatch(\"%S+\") do\n \
    \       local c = 0\n        for l in w:gmatch(\"[^aeiou]\") do\n            c\
    \ = c + 1\n        end\n        if c == n then\n            k = k + 1\n      \
    \      t[k] = w\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl84753y.lua:35:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmptl84753y.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if n < 0 then n = 0 end\n    local res = {}\n    local index = 0\n \
    \   for word in s:gmatch(\"%w+\") do\n        if #word == n then\n           \
    \ res[index] = word\n            index = index + 1\n        end\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_z_g5k4m.lua:28:\
    \ expected: {\"little\"}\nactual: {0=\"Mary\", \"lamb\"}\nstack traceback:\n\t\
    /tmp/tmp_z_g5k4m.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local function has_n_consonants(w)\n        local function is_consonant(c)\n\
    \            return not w:find(c, 1, true)\n        end\n        local consonants\
    \ = \"aeiou\"\n        local consonant_count = 0\n        for c in w:gmatch(\"\
    %a\") do\n            if is_consonant(c) then\n                consonant_count\
    \ = consonant_count + 1\n            end\n        end\n        return consonant_count\
    \ == n\n    end\n    local words = {}\n    for w in s:gmatch(\"%w+\") do\n   \
    \     if has_n_consonants(w) then\n            table.insert(words, w)\n      \
    \  end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3agu6bp.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpy3agu6bp.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local l = {}\n    for k, v in s:gmatch(\"%w+\") do\n        if (v:lower():gsub(\"\
    [aeiouy]\", \"\"):len() == n) then\n            table.insert(l, v)\n        end\n\
    \    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59e3k5_c.lua:15:\
    \ attempt to index a nil value (local 'v')\nstack traceback:\n\t/tmp/tmp59e3k5_c.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp59e3k5_c.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq995k6um.lua:19:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpq995k6um.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local tmp = {};\n    local words = {};\n    for i = 1, #s do\n     \
    \   if s:sub(i, i) ~= \" \" then\n            tmp[#tmp + 1] = s:sub(i, i)\n  \
    \      else\n            if #tmp == n then\n                words[#words + 1]\
    \ = table.concat(tmp)\n            end\n            tmp = {}\n        end\n  \
    \  end\n    if #tmp == n then\n        words[#words + 1] = table.concat(tmp)\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4qg34yp.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpc4qg34yp.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        local\
    \ count = 0\n        for letter in word:gmatch(\"%a\") do\n            if \"aeiou\"\
    \ ~= string.find(letter, \"[aeiou]\") then\n                count = count + 1\n\
    \            end\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfm3sjct.lua:31:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpdfm3sjct.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4shxnte3.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp4shxnte3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  if n == 0 then return {} end\n  local l = {}\n  local i, j = 1, 1\n  while\
    \ i <= #s do\n    local c = s:sub(i, i)\n    if not c:match(\"%a\") then \n  \
    \    if j - i == n then l[#l + 1] = s:sub(i - j + 1, i - 1) end\n      j = i +\
    \ 1\n    end\n    i = i + 1\n  end\n  if j == 1 then return {} end\n  if j <=\
    \ #s and #s - j + 1 == n then l[#l + 1] = s:sub(j) end\n  return l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp851mendc.lua:32:\
    \ expected: {\"little\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp851mendc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local res = {}\n  for w in s:gmatch(\"%S+\") do\n    local c = 0\n   \
    \ for _ in w:gmatch(\"[^aeiouAEIOU]\") do\n      c = c + 1\n    end\n    if c\
    \ == n then\n      res[#res+1] = w\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = string.gsub(s, \"[aeiou ]\", \"\
    \")\n  if #consonants == 0 then\n    return words\n  end\n  for word in string.gmatch(s,\
    \ \"[^ ]+\") do\n    local wordConsonants = string.gsub(word, \"[aeiou]\", \"\"\
    )\n    if #wordConsonants == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbuwgxlr.lua:34:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmprbuwgxlr.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local res = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = word:gsub(\"[aeiouAEIOU]\", \"\")\n    if #consonants == n then\n      table.insert(res,\
    \ word)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  local a = 0\n  local b = 0\n  local c = 0\n  for i = 1,\
    \ n - 1 do\n    a = string.find(s, \"%S+\", b + 1)\n    if a == nil then\n   \
    \   break\n    end\n    b = string.find(s, \"%s+\", a)\n    local x = string.sub(s,\
    \ a, b - 1)\n    if #x - #string.gsub(x, \"[^aeiouAEIOU]\", \"\") == n then\n\
    \      table.insert(t, x)\n    end\n  end\n  c = string.find(s, \"%S+\", b + 1)\n\
    \  if c == nil then\n    return t\n  end\n  local x = string.sub(s, c)\n  if #x\
    \ - #string.gsub(x, \"[^aeiouAEIOU]\", \"\") == n then\n    table.insert(t, x)\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjb0oq3i4.lua:42:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpjb0oq3i4.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t = {}\n    local s = s .. \" \"\n    local word = \"\"\n    local\
    \ c = 0\n    local consonants = \"qwrtypsdfghjklzxcvbnm\"\n    for i = 1, #s do\n\
    \        if s:sub(i, i) ~= \" \" then\n            word = word .. s:sub(i, i)\n\
    \        else\n            for j = 1, #word do\n                if consonants:find(word:sub(j,\
    \ j)) then\n                    c = c + 1\n                end\n            end\n\
    \            if c == n then\n                table.insert(t, word)\n         \
    \   end\n            word = \"\"\n            c = 0\n        end\n    end\n  \
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hs02dpk.lua:41:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp9hs02dpk.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    words = {}\n    for w in s:gmatch(\"%S+\") do\n        t = {}\n    \
    \    for c in w:gmatch(\"%a\") do\n            if \"AEIOUaeiou\":find(c) == nil\
    \ then\n                table.insert(t, c)\n            end\n        end\n   \
    \     if #t == n then\n            table.insert(words, w)\n        end\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0p14p3ug.lua:17: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local l = {}\n  for w in s:gmatch(\"%w+\") do\n    if w:gsub(\"[^bcdfghjklmnpqrstvwxyz]\"\
    , \"\"):len() == n then\n      l[#l+1] = w\n    end\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6ecgu7l.lua:26:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpo6ecgu7l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  s = s:lower()\n  local vowels = {a = true, e = true, i = true, o = true,\
    \ u = true}\n  local function is_consonant(c)\n    return not vowels[c]\n  end\n\
    \  local start = 1\n  local word = {}\n  local words = {}\n  for i = 1, #s do\n\
    \    local c = s:sub(i, i)\n    if c == ' ' then\n      if #word == n then\n \
    \       words[#words + 1] = table.concat(word)\n      end\n      word = {}\n \
    \     start = i + 1\n    elseif is_consonant(c) then\n      word[#word + 1] =\
    \ c\n    end\n  end\n  if #word == n then\n    words[#words + 1] = table.concat(word)\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1drc_fz_.lua:42:\
    \ expected: {\"little\"}\nactual: {\"lttl\"}\nstack traceback:\n\t/tmp/tmp1drc_fz_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    local result = {}\n \
    \   for word in s:gmatch(\"%w+\") do\n        local count = 0\n        for letter\
    \ in word:gmatch(\"%a\") do\n            for _, consonant in ipairs(consonants)\
    \ do\n                if letter == consonant then\n                    count =\
    \ count + 1\n                end\n            end\n        end\n        if count\
    \ == n then\n            table.insert(result, word)\n        end\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop2su1gr.lua:35:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpop2su1gr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if #s == 0 then\n        return {}\n    end\n    local v = {}\n    local\
    \ i = 1\n    while i <= #s do\n        local j = i\n        while j <= #s and\
    \ s:sub(j, j) ~= ' ' do\n            j = j + 1\n        end\n        local w =\
    \ s:sub(i, j - 1)\n        local c = w:gsub('[aeiouAEIOU]', '')\n        if #c\
    \ == n then\n            table.insert(v, w)\n        end\n        i = j + 1\n\
    \    end\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal l = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\tlocal c = 0\n\t\t\
    for cnt in word:gmatch(\"[bcdfghjklmnpqrstvwxyz]\") do\n\t\t\tc = c + 1\n\t\t\
    end\n\t\tif c == n then\n\t\t\ttable.insert(l, word)\n\t\tend\n\tend\n\treturn\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxnw43w0.lua:30:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmptxnw43w0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local list = {}\n  for word in s:gmatch(\"%w+\") do\n    if #(word:gsub(\"\
    [aeiou]\", \"\")) == n then\n      table.insert(list, word)\n    end\n  end\n\
    \  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsawc4cp.lua:29:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpbsawc4cp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local ret = {}\n    local consonants = {['b'] = true, ['c'] = true,\
    \ ['d'] = true, ['f'] = true, ['g'] = true, ['h'] = true, ['j'] = true, ['k']\
    \ = true, ['l'] = true, ['m'] = true, ['n'] = true, ['p'] = true, ['q'] = true,\
    \ ['r'] = true, ['s'] = true, ['t'] = true, ['v'] = true, ['w'] = true, ['x']\
    \ = true, ['y'] = true, ['z'] = true}\n    for word in s:gmatch(\"%S+\") do\n\
    \        local counter = 0\n        for char in word:gmatch(\"%a\") do\n     \
    \       if consonants[char:lower()] then\n                counter = counter +\
    \ 1\n            end\n        end\n        if counter == n then\n            table.insert(ret,\
    \ word)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local set = {}\n    for k, v in string.gmatch(s, \"%w+\") do\n     \
    \   local word = {}\n        for index = 1, #v do\n            local char = string.sub(v,\
    \ index, index)\n            if index == 1 or index == #v then\n             \
    \   if char ~= 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~=\
    \ 'u' then\n                    table.insert(word, char)\n                end\n\
    \            else\n                if char ~= 'a' and char ~= 'e' and char ~=\
    \ 'i' and char ~= 'o' and char ~= 'u' then\n                    table.insert(word,\
    \ char)\n                end\n            end\n        end\n        if #word ==\
    \ n then\n            table.insert(set, v)\n        end\n    end\n    return set\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw7h57t03.lua:16:\
    \ attempt to get length of a nil value (local 'v')\nstack traceback:\n\t/tmp/tmpw7h57t03.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpw7h57t03.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local function isConsonant(c)\n        if c == \"a\" or c == \"e\" or\
    \ c == \"i\" or c == \"o\" or c == \"u\" then\n            return false\n    \
    \    end\n        return true\n    end\n    local consonants = 0\n    local words\
    \ = {}\n    local word = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if isConsonant(c) then\n            consonants = consonants + 1\n\
    \        end\n        if c == \" \" then\n            if consonants == n then\n\
    \                table.insert(words, word)\n            end\n            consonants\
    \ = 0\n            word = \"\"\n        else\n            word = word .. c\n \
    \       end\n    end\n    if consonants == n then\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qz0ylhn.lua:46:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmp4qz0ylhn.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjp7iup8v.lua:19:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpjp7iup8v.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local c = ''\n    for w in s:gmatch('%w+') do\n\
    \        c = 0\n        for _ in w:gmatch('[^aeiouAEIOU]') do\n            c =\
    \ c + 1\n        end\n        if c == n then\n            table.insert(words,\
    \ w)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal words, count, cons = {}, 0, 'bcdfghjklmnpqrstvwxyz'\n\tfor word\
    \ in s:gmatch('%w+') do\n\t\tfor letter in word:gmatch('%l') do\n\t\t\tif cons:find(letter)\
    \ then count = count + 1 end\n\t\tend\n\t\tif count == n then table.insert(words,\
    \ word) end\n\t\tcount = 0\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9au1h5ad.lua:28:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp9au1h5ad.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for c in word:gmatch(\"[^aeiou]\") do\n            consonants\
    \ = consonants + 1\n        end\n        if consonants == n then\n           \
    \ table.insert(words, word)\n        end\n    end\n    return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lfea08l.lua:33:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp1lfea08l.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal t, i, j = {}, 1, 1\n\tfor j in s:gmatch('%w+') do\n\t\tif j:gsub('[^aeiou]',\
    \ ''):len() == n then\n\t\t\tt[i] = j\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yu7i8q3.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp2yu7i8q3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words, count, consonants = {}, 0, {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  for\
    \ word in s:gmatch(\"%w+\") do\n    for _, letter in ipairs(word:lower():gmatch(\"\
    %l\")) do\n      for _, c in ipairs(consonants) do\n        if letter == c then\n\
    \          count = count + 1\n        end\n      end\n    end\n    if count ==\
    \ n then\n      table.insert(words, word)\n    end\n    count = 0\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ ccount = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n            ccount\
    \ = ccount + 1\n        end\n        if ccount == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibzt3kpw.lua:33:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpibzt3kpw.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if not\
    \ word:find(\"[aeiou]\") then\n            local c = word:gsub(\"[aeiou]\", \"\
    \")\n            if #c == n then\n                table.insert(words, word)\n\
    \            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3usaiby.lua:28:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp_3usaiby.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local ret = {}\n    local start = 1\n    local iter = re.gmatch(s, \"\
    [a-z]+\")\n    for m in iter do\n        local num = 0\n        for i = 1, #m\
    \ do\n            if not is_vowel(m:sub(i, i)) then\n                num = num\
    \ + 1\n            end\n        end\n        if num == n then\n            table.insert(ret,\
    \ m)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp017art8f.lua:15:\
    \ attempt to index a nil value (global 're')\nstack traceback:\n\t/tmp/tmp017art8f.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp017art8f.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local l, c, t = {}, {}, {}\n    local a, b = \"bcdfghjklmnpqrstvwxyz\"\
    , \"aeiou\"\n    for w in s:gmatch(\"%S+\") do\n        for i in w:gmatch(\".\"\
    ) do\n            if b:find(i:lower()) then l[#l+1] = i end\n            if a:find(i:lower())\
    \ then c[#c+1] = i end\n        end\n        if #c == n then t[#t+1] = w end\n\
    \        l, c = {}, {}\n    end\n    return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ w)\n  end\n  local result = {}\n  for _, v in ipairs(words) do\n    local consonants\
    \ = 0\n    for i = 1, #v do\n      local c = v:sub(i, i)\n      if c:find(\"[bcdfghjklmnpqrstvwxyz]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n    if consonants\
    \ == n then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2b4hj_o.lua:37:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpq2b4hj_o.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    -- your code here\n    local str = {}\n    local p = s:gmatch(\"%w+\"\
    )\n    local consonants = \"bcdfghjklmnpqrstvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = {}\n    local conscnt = 0\n    local vowlcnt = 0\n    local\
    \ i = 1\n    local j = 1\n    local k = 1\n    local a = 0\n    for x in p do\n\
    \        str[i] = x\n        i = i + 1\n    end\n    for i = 1, #str do\n    \
    \    for j = 1, #str[i] do\n            for k = 1, #consonants do\n          \
    \      if str[i]:sub(j, j) == consonants:sub(k, k) then\n                    conscnt\
    \ = conscnt + 1\n                end\n            end\n            for k = 1,\
    \ #vowels do\n                if str[i]:sub(j, j) == vowels:sub(k, k) then\n \
    \                   vowlcnt = vowlcnt + 1\n                end\n            end\n\
    \        end\n        if conscnt == n then\n            result[a] = str[i]\n \
    \           a = a + 1\n        end\n        conscnt = 0\n        vowlcnt = 0\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevsfglhs.lua:55:\
    \ expected: {\"little\"}\nactual: {0=\"little\"}\nstack traceback:\n\t/tmp/tmpevsfglhs.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local function is_word(word)\n        local vowels = {\n           \
    \ [\"a\"] = true,\n            [\"e\"] = true,\n            [\"i\"] = true,\n\
    \            [\"o\"] = true,\n            [\"u\"] = true,\n            [\"y\"\
    ] = true\n        }\n        local count = 0\n        for _, letter in ipairs(word)\
    \ do\n            if not vowels[letter] then\n                count = count +\
    \ 1\n            end\n        end\n        return count == n\n    end\n    local\
    \ res = {}\n    for word in s:gmatch(\"%w+\") do\n        if is_word(word) then\n\
    \            table.insert(res, word)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdakm5ud.lua:42:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwdakm5ud.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {}\n  local vowels = {}\n  consonants\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z' }\n  vowels = { 'a', 'e', 'i', 'o', 'u', 'y' }\n  for\
    \ word in s:gmatch(\"%S+\") do\n    local count = 0\n    for letter in word:gmatch(\"\
    %a\") do\n      for k, v in pairs(consonants) do\n        if v == letter then\n\
    \          count = count + 1\n        end\n      end\n    end\n    if count ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xf31pqb.lua:38:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp_xf31pqb.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word_begin = 1\n    local word_end = 0\n\
    \    local word = \"\"\n    local word_consonants = 0\n    local word_vowels =\
    \ 0\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            word_end\
    \ = i - 1\n            word = s:sub(word_begin, word_end)\n            for j =\
    \ 1, #word do\n                if word:sub(j, j) == \"a\" or word:sub(j, j) ==\
    \ \"e\" or word:sub(j, j) == \"i\" or word:sub(j, j) == \"o\" or word:sub(j, j)\
    \ == \"u\" then\n                    word_vowels = word_vowels + 1\n         \
    \       else\n                    word_consonants = word_consonants + 1\n    \
    \            end\n            end\n            if word_consonants == n then\n\
    \                table.insert(words, word)\n            end\n            word_begin\
    \ = i + 1\n            word_consonants = 0\n            word_vowels = 0\n    \
    \    end\n    end\n    word_end = #s\n    word = s:sub(word_begin, word_end)\n\
    \    for j = 1, #word do\n        if word:sub(j, j) == \"a\" or word:sub(j, j)\
    \ == \"e\" or word:sub(j, j) == \"i\" or word:sub(j, j) == \"o\" or word:sub(j,\
    \ j) == \"u\" then\n            word_vowels = word_vowels + 1\n        else\n\
    \            word_consonants = word_consonants + 1\n        end\n    end\n   \
    \ if word_consonants == n then\n        table.insert(words, word)\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9k8fas0d.lua:60:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp9k8fas0d.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if s == \"\" then return {} end\n    local words = {}\n    for word\
    \ in s:gmatch(\"%S+\") do\n        if word:gsub(\"[^aeiouAEIOU]\", \"\"):len()\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpostcro3u.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpostcro3u.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  s:gsub(\"%w+\", function(w)\n    if (w:gsub(\"[aeiou]+\"\
    , \"\"):len() == n) then table.insert(t, w) end\n  end)\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaol1hgqh.lua:27:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpaol1hgqh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local arr, word = {}, \"\"\n  for i=1,#s do\n    if string.match(s:sub(i,i),\
    \ \"[%a]\") then\n      word = word .. s:sub(i,i)\n    else\n      if #word ==\
    \ n then\n        table.insert(arr, word)\n      end\n      word = \"\"\n    end\n\
    \  end\n  if #word == n then\n    table.insert(arr, word)\n  end\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzz_8qkjc.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpzz_8qkjc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptn6bls4y.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmptn6bls4y.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = {}\n  for i = 1, #s do\n    local c =\
    \ s:sub(i, i)\n    if c == ' ' then\n      words[#words + 1] = table.concat(word)\n\
    \      word = {}\n    else\n      word[#word + 1] = c\n    end\n  end\n  words[#words\
    \ + 1] = table.concat(word)\n  local result = {}\n  for i = 1, #words do\n   \
    \ local consonants = 0\n    for j = 1, #words[i] do\n      local c = words[i]:sub(j,\
    \ j)\n      if c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u' then\n\
    \        consonants = consonants + 1\n      end\n    end\n    if consonants ==\
    \ n then\n      result[#result + 1] = words[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9js43xqh.lua:48:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp9js43xqh.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local result = {}\n  local consonants = 'bcdfghjklmnpqrstvwxyz'\n  local\
    \ vowels = 'aeiou'\n  local words = stringx.split(s, ' ')\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for i = 1, #word do\n      local letter = string.lower(word:sub(i,\
    \ i))\n      if stringx.strip(consonants, letter) then\n        count = count\
    \ + 1\n      end\n    end\n    if count == n then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvadx0zh3.lua:16:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpvadx0zh3.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpvadx0zh3.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if s == '' then return {} end\n    local words = {}\n    for word in\
    \ s:gmatch('%S+') do\n        local c = 0\n        for i = 1, word:len() do\n\
    \            if not word:sub(i, i):match('[aeiou]') then\n                c =\
    \ c + 1\n            end\n        end\n        if c == n then table.insert(words,\
    \ word) end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6rl4ja3.lua:34:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp_6rl4ja3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if s == \"\" then return {} end\n    local words = {}\n    for word\
    \ in s:gmatch(\"%S+\") do\n        if word:gsub(\"[aeiouAEIOU]\", \"\"):len()\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local l = {}\n    for word in s:gmatch(\"%w+\") do\n        local count\
    \ = 0\n        for c in word:gmatch(\"[^aeiouy]\") do\n            count = count\
    \ + 1\n        end\n        if count == n then\n            table.insert(l, word)\n\
    \        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpto6iww8e.lua:30:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpto6iww8e.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnpy6etg.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmplnpy6etg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local result = {}\n  for word in s:gmatch(\"%S+\") do\n    local consonants\
    \ = word:gsub(\"[aeiouAEIOU]\", \"\")\n    if #consonants == n then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if s:len() == 0 then return {} end\n    local t = {}\n    for word in\
    \ s:gmatch(\"%w+\") do\n        local cnt = 0\n        for char in word:gmatch(\"\
    [b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]\") do\n            cnt = cnt + 1\n        end\n\
    \        if cnt == n then\n            table.insert(t, word)\n        end\n  \
    \  end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if n == 0 then\n        return s:match(\"^%a+$\") and {s} or {}\n  \
    \  end\n    local function match(s)\n        local t = {}\n        local i = 1\n\
    \        while true do\n            local j = s:find(\"%s\", i)\n            if\
    \ not j then\n                j = s:len() + 1\n            end\n            if\
    \ j - i ~= n + 1 then\n                local w = s:sub(i, j - 1)\n           \
    \     local c = w:gsub(\"[^aeiou]\", \"\")\n                if #c == n then\n\
    \                    t[#t + 1] = w\n                end\n            end\n   \
    \         if j > s:len() then\n                break\n            end\n      \
    \      i = j + 1\n        end\n        return t\n    end\n    return match(s)\n\
    end\nreturn select_words\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkmg_bztt.lua:41: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local function cns(s)\n        local cns = 0\n        for i = 1, #s\
    \ do\n            if not (s:sub(i, i) == 'a' or\n                    s:sub(i,\
    \ i) == 'e' or\n                    s:sub(i, i) == 'i' or\n                  \
    \  s:sub(i, i) == 'o' or\n                    s:sub(i, i) == 'u') then\n     \
    \           cns = cns + 1\n            end\n        end\n        return cns\n\
    \    end\n    local t = {}\n    for w in s:gmatch(\"%w+\") do\n        if cns(w)\
    \ == n then\n            table.insert(t, w)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcpvda2k.lua:42:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpdcpvda2k.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local lst = {}\n    local vowels = \"aeiouAEIOU\"\n    for w in s:gmatch(\"\
    %S+\") do\n        local consonants = 0\n        for c in w:gmatch(\"%a\") do\n\
    \            if vowels:find(c) == nil then\n                consonants = consonants\
    \ + 1\n            end\n        end\n        if consonants == n then\n       \
    \     table.insert(lst, w)\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  if s == \"\" then return {} end\n  local words = {}\n  local word = \"\
    \"\n  local word_consonants = 0\n  local function check_word()\n    if word ~=\
    \ \"\" and word_consonants == n then\n      table.insert(words, word)\n    end\n\
    \    word = \"\"\n    word_consonants = 0\n  end\n  local function add_to_word(c)\n\
    \    if c == \" \" then\n      check_word()\n    else\n      if c ~= \"a\" and\
    \ c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n        word_consonants\
    \ = word_consonants + 1\n      end\n      word = word .. c\n    end\n  end\n \
    \ for i = 1, #s do\n    add_to_word(s:sub(i, i))\n  end\n  check_word()\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rtlu9qg.lua:48:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp9rtlu9qg.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local res = {}\n  for word in s:gmatch(\"%w+\") do\n    local count =\
    \ word:gsub(\"[^aeiouAEIOU]\", \"\")\n    if #count == n then\n      table.insert(res,\
    \ word)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3oe64vot.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3oe64vot.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfs3r5k1w.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfs3r5k1w.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local res = {}\n    for w in s:gmatch(\"%S+\") do\n        local count\
    \ = 0\n        for l in w:gmatch(\"%S\") do\n            if l:match(\"[^aeiou]\"\
    ) then\n                count = count + 1\n            end\n        end\n    \
    \    if count == n then\n            table.insert(res, w)\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1zmzdio.lua:35:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpv1zmzdio.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words, cn = {}, 0\n    for w in s:gmatch(\"%S+\") do\n       \
    \ cn = 0\n        for l in w:gmatch(\"[^aeiou]\") do\n            cn = cn + 1\n\
    \        end\n        if cn == n then\n            table.insert(words, w)\n  \
    \      end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg63yuzh.lua:33:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqg63yuzh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  if s == \"\" then return {} end\n  local res = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    local consonants = 0\n    for c in word:gmatch(\"[^aeiouAEIOU ]\"\
    ) do\n      consonants = consonants + 1\n    end\n    if consonants == n then\n\
    \      table.insert(res, word)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    -- code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzrnmhfv.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpuzrnmhfv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\treturn {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pey56v3.lua:19:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp0pey56v3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:match(\"\
    [^aeiou ]\") and #word:match(\"[^aeiou ]\") == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfeds0x7n.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfeds0x7n.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for w in s:gmatch(\"%w+\") do\n        local count\
    \ = w:gsub(\"[aeiou]\", \"\"):len()\n        if count == n then\n            table.insert(words,\
    \ w)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7amzc9si.lua:30:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp7amzc9si.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = word:gsub(\"[aouieAOUIE]\", \"\")\n    if #consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local consonants = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'}\n    local words = {}\n\
    \    local cons = 0\n    local word = ''\n    local start = 0\n    local stop\
    \ = 0\n    local index = 1\n    while index <= #s do\n        local char = s:sub(index,\
    \ index)\n        local found = false\n        for _, consonant in ipairs(consonants)\
    \ do\n            if char == consonant then\n                cons = cons + 1\n\
    \                found = true\n                break\n            end\n      \
    \  end\n        if not found then\n            if char == ' ' then\n         \
    \       if cons == n then\n                    word = s:sub(start, stop)\n   \
    \                 table.insert(words, word)\n                end\n           \
    \     cons = 0\n                start = stop + 2\n            end\n        end\n\
    \        stop = stop + 1\n        index = index + 1\n    end\n    if cons == n\
    \ then\n        word = s:sub(start, stop)\n        table.insert(words, word)\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm_09k7z.lua:53:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpdm_09k7z.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t, m = {}, {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ c, d = 0, {}\n        for i = 1, #word do\n            local c = word:sub(i,\
    \ i)\n            if c ~= \"a\" and c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and\
    \ c ~= \"u\" and c ~= \"y\" then\n                c = c + 1\n            end\n\
    \        end\n        if c == n then\n            t[#t + 1] = word\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0v0n6pah.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'c')\nstack traceback:\n\
    \t/tmp/tmp0v0n6pah.lua:19: in local 'candidate'\n\t/tmp/tmp0v0n6pah.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n   local words = {}\n   for w in s:gmatch(\"%S+\") do\n      local cn =\
    \ 0\n      for c in w:gmatch(\"[^aeiou]\") do\n         cn = cn + 1\n      end\n\
    \      if cn == n then\n         words[#words+1] = w\n      end\n   end\n   return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cawl_v5.lua:33:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3cawl_v5.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_ep4387.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpp_ep4387.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        if (w:gsub(\"\
    [aeiouAEIOU]\", \"\"):len() == n) then\n            table.insert(words, w)\n \
    \       end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local function isVowel(char)\n    char = char:lower()\n    return (char\
    \ == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u')\n  end\n\
    \  local function countConsonants(str)\n    local consonantsCount = 0\n    for\
    \ i = 1, #str do\n      if not isVowel(str:sub(i, i)) then\n        consonantsCount\
    \ = consonantsCount + 1\n      end\n    end\n    return consonantsCount\n  end\n\
    \  local wordsList = {}\n  for word in s:gmatch(\"%S+\") do\n    if countConsonants(word)\
    \ == n then\n      table.insert(wordsList, word)\n    end\n  end\n  return wordsList\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n   local t = {}\n   for w in s:gmatch(\"%S+\") do\n      if #w == n then\n\
    \         table.insert(t, w)\n      end\n   end\n   return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7jap0d7.lua:25:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpm7jap0d7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\t-- your code here\n\tlocal words = {}\n\tlocal word = \"\"\n\tfor char\
    \ in s:gmatch('.') do\n\t\tif (char == \" \") then\n\t\t\tif #word == n then\n\
    \t\t\t\ttable.insert(words, word)\n\t\t\tend\n\t\t\tword = \"\"\n\t\telse\n\t\t\
    \tword = word .. char\n\t\tend\n\tend\n\tif #word == n then\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39ilutid.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmp39ilutid.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local consonants = {['b'] = 1, ['c'] = 1, ['d'] = 1, ['f'] = 1, ['g']\
    \ = 1, ['h'] = 1,\n                      ['j'] = 1, ['k'] = 1, ['l'] = 1, ['m']\
    \ = 1, ['n'] = 1, ['p'] = 1,\n                      ['q'] = 1, ['r'] = 1, ['s']\
    \ = 1, ['t'] = 1, ['v'] = 1, ['w'] = 1,\n                      ['x'] = 1, ['z']\
    \ = 1}\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local count\
    \ = 0\n    for letter in word:gmatch(\"%a\") do\n      if consonants[letter:lower()]\
    \ then\n        count = count + 1\n      end\n    end\n    if count == n then\n\
    \      table.insert(words, word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cvftcl2.lua:36:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp1cvftcl2.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    local str = s\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    while string.len(str) > 0 do\n     \
    \   local length = string.find(str, \" \")\n        if length == nil then\n  \
    \          length = string.len(str)\n        end\n        local word = string.sub(str,\
    \ 1, length)\n        local consonant_count = 0\n        for j=1, string.len(word)\
    \ do\n            for k=1, #consonants do\n                if word:sub(j, j) ==\
    \ consonants[k] then\n                    consonant_count = consonant_count +\
    \ 1\n                end\n            end\n        end\n        if consonant_count\
    \ == n then\n            words[index] = word\n            index = index + 1\n\
    \        end\n        str = string.sub(str, length + 1, string.len(str))\n   \
    \ end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcogqv8_r.lua:43:\
    \ expected: {\"little\"}\nactual: {\"little \"}\nstack traceback:\n\t/tmp/tmpcogqv8_r.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t, v = {}, 0\n  if #s > 0 then\n    s = s .. \" \"\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == \" \" then\n        if v == n then\n     \
    \     table.insert(t, s:sub(i - #t[#t], i - 1))\n        end\n        v = 0\n\
    \        t = {}\n      else\n        if s:sub(i, i) ~= \"a\" and s:sub(i, i) ~=\
    \ \"A\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"E\" and s:sub(i, i) ~= \"\
    i\" and s:sub(i, i) ~= \"I\" and s:sub(i, i) ~= \"o\" and s:sub(i, i) ~= \"O\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \"U\" then\n          v = v + 1\n\
    \          table.insert(t, s:sub(i, i))\n        end\n      end\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxurokn4.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpnxurokn4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwbuzwn5.lua:19:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqwbuzwn5.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- TODO: Implement select_words function\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiehauhpu.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpiehauhpu.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprp0t5ftz.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmprp0t5ftz.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for ch in s:gmatch\".\" do\n        if ch == \" \" then\n            if consonants\
    \ == n then\n                table.insert(words, word)\n            end\n    \
    \        word = \"\"\n            consonants = 0\n        else\n            if\
    \ not (ch == \"a\" or ch == \"e\" or ch == \"i\" or ch == \"o\" or ch == \"u\"\
    ) then\n                consonants = consonants + 1\n            end\n       \
    \     word = word .. ch\n        end\n    end\n    if consonants == n then\n \
    \       table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kih_56b.lua:43:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp7kih_56b.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local r = {}\n    for w in s:gmatch(\"%w+\") do\n        if #w - w:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(r, w)\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1wjhdte.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpv1wjhdte.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        if string.len(word)\
    \ - word:gsub(\"[aeiou]\", \"\"):len() == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr83c8al3.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpr83c8al3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    -- Your code here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2zty2of.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpd2zty2of.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  local words = split(s, \" \")\n  for i,word in ipairs(words)\
    \ do\n    if count_consonants(word) == n then\n      table.insert(t, word)\n \
    \   end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptoxgdtbg.lua:14:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmptoxgdtbg.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmptoxgdtbg.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if s == '' then\n        return {}\n    end\n    local t = {}\n    for\
    \ word in s:gmatch('%S+') do\n        local c = 0\n        for letter in word:gmatch('[^aeiouyAEIOUY]')\
    \ do\n            c = c + 1\n        end\n        if c == n then\n           \
    \ table.insert(t, word)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptoehla1z.lua:33:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmptoehla1z.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal words = {}\n\tlocal count = 0\n\tlocal word = \"\"\n\tfor c in s:gmatch\"\
    .\" do\n\t\tif c:match\"%s\" then\n\t\t\tif count == n then\n\t\t\t\ttable.insert(words,\
    \ word)\n\t\t\tend\n\t\t\tcount = 0\n\t\t\tword = \"\"\n\t\telseif not c:match\"\
    [aeiouAEIOU]\" then\n\t\t\tcount = count + 1\n\t\tend\n\t\tword = word .. c\n\t\
    end\n\tif count == n then\n\t\ttable.insert(words, word)\n\tend\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprf30vxxh.lua:37:\
    \ expected: {\"little\"}\nactual: {\" little\"}\nstack traceback:\n\t/tmp/tmprf30vxxh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  for w in s:gmatch(\"%w+\") do\n    if string.gsub(w, \"\
    [aeiou]\", \"\") == string.rep(\"c\", n) then\n      table.insert(t, w)\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwhz_pdu.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpiwhz_pdu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    for w in s:gmatch(\"%S+\") do\n        local\
    \ cn = 0\n        for c in w:gmatch(\"[^aeiou]\") do\n            cn = cn + 1\n\
    \        end\n        if cn == n then\n            table.insert(result, w)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4rda21d.lua:33:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpq4rda21d.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    res = {}\n    for word in s:gmatch(\"%S+\") do\n        local len =\
    \ word:gsub(\"[^b-df-hj-np-tv-z]\", \"\"):len()\n        if len == n then\n  \
    \          table.insert(res, word)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvhdiebk.lua:27:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpdvhdiebk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if #s == 0 then\n        return {}\n    end\n    local words = {}\n\
    \    for word in s:gmatch(\"%S+\") do\n        local count = 0\n        for _\
    \ in word:gmatch(\"[^aeiouAEIOU]\") do\n            count = count + 1\n      \
    \  end\n        if count == n then\n            table.insert(words, word)\n  \
    \      end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local result = {}\n  local words = string.gmatch(s, \"%S+\")\n  for word\
    \ in words do\n    local consonants = 0\n    for _, char in ipairs(word:gmatch(\"\
    %a\")) do\n      if \"aeiouAEIOU\" ~= string.find(char, 1, true) then\n      \
    \  consonants = consonants + 1\n      end\n    end\n    if consonants == n then\n\
    \      table.insert(result, word)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = s:split(' ')\n    local result = {}\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local counts = word:split(''):count_list(function(ch)\
    \ return 'aeiou'.find(ch) == nil end)\n        if #counts == n then\n        \
    \    table.insert(result, word)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_8dynntf.lua:17: 'end' expected near '.'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\t-- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqdy8ts3.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpiqdy8ts3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local c = string.gmatch(s, \"[^aeiouAEIOU]+\")\n    local e = {}\n \
    \   for w in c do\n        if #w == n then\n            table.insert(e, w)\n \
    \       end\n    end\n    return e\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyk1xh6b.lua:26:\
    \ expected: {\"little\"}\nactual: {\"ry h\"}\nstack traceback:\n\t/tmp/tmpsyk1xh6b.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local res = {}\n  local w_b, w_e = 1, 0\n  for i = 1, #s do\n    if s:sub(i,\
    \ i) == ' ' then\n      local cons = 0\n      for _ = w_b, w_e do\n        local\
    \ c = s:sub(_, _)\n        if c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o'\
    \ and c ~= 'u' then\n          cons = cons + 1\n        end\n      end\n     \
    \ if cons == n then\n        table.insert(res, s:sub(w_b, w_e))\n      end\n \
    \     w_b = i + 1\n    end\n    w_e = i\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjod8q5je.lua:38:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpjod8q5je.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local consonants = {\n        ['B'] = true,\n\
    \        ['C'] = true,\n        ['D'] = true,\n        ['F'] = true,\n       \
    \ ['G'] = true,\n        ['H'] = true,\n        ['J'] = true,\n        ['K'] =\
    \ true,\n        ['L'] = true,\n        ['M'] = true,\n        ['N'] = true,\n\
    \        ['P'] = true,\n        ['Q'] = true,\n        ['R'] = true,\n       \
    \ ['S'] = true,\n        ['T'] = true,\n        ['V'] = true,\n        ['W'] =\
    \ true,\n        ['X'] = true,\n        ['Y'] = true,\n        ['Z'] = true,\n\
    \    }\n    for word in s:gmatch('%S+') do\n        local c = 0\n        for w\
    \ in word:gmatch('%S') do\n            if consonants[w:upper()] then\n       \
    \         c = c + 1\n            end\n        end\n        if c == n then\n  \
    \          table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    if word:gsub(\"\
    [^aeiouAEIOU]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqno8a44.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpaqno8a44.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local result = {}\n  local substring = ''\n  for c in s:gmatch('%a') do\n\
    \    if c:find('%a') then\n      substring = substring .. c\n    else\n      if\
    \ #substring == n then\n        table.insert(result, substring)\n      end\n \
    \     substring = ''\n    end\n  end\n  if #substring == n then\n    table.insert(result,\
    \ substring)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanx0w03l.lua:34:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpanx0w03l.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    if s == \"\" then\n        return {}\n    end\n    local ss = {}\n \
    \   for word in s:gmatch(\"%w+\") do\n        local count = 0\n        for c in\
    \ word:gmatch(\"[^aeiou]\") do\n            count = count + 1\n        end\n \
    \       if count == n then\n            table.insert(ss, word)\n        end\n\
    \    end\n    return ss\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b90ljk0.lua:36:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6b90ljk0.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local t = {}\n  local ss\
    \ = {}\n  for i in s:gmatch(\"%S+\") do\n    table.insert(ss, i)\n  end\n  for\
    \ _, v in ipairs(ss) do\n    local l = 0\n    for _, char in ipairs(v:lower():gmatch(\"\
    %a\")) do\n      for _, con in ipairs(consonants) do\n        if char == con then\n\
    \          l = l + 1\n        end\n      end\n    end\n    if l == n then\n  \
    \    table.insert(t, v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal res = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\tlocal c = 0\n\t\
    \tfor char in word:gmatch(\"%a\") do\n\t\t\tif char ~= \"a\" and char ~= \"e\"\
    \ and char ~= \"i\" and char ~= \"o\" and char ~= \"u\" then\n\t\t\t\tc = c +\
    \ 1\n\t\t\tend\n\t\tend\n\t\tif c == n then\n\t\t\ttable.insert(res, word)\n\t\
    \tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiee1c8d0.lua:35:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpiee1c8d0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal result = {}\n\ts:gsub(\"%S+\", function(word)\n\t\tif word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n\t\t\ttable.insert(result, word)\n\t\tend\n\
    \tend)\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1nxj9g7.lua:25:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpg1nxj9g7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  if n == 0 then return {} end\n  local s2 = s:gsub(\"[aeiouAEIOU ]\", \"\
    \"):gsub(\"(.)\", \"%1 \")\n  local t = {}\n  for w in s:gmatch(\"[^ ]+\") do\n\
    \    if #w:gsub(\"[aeiouAEIOU]\", \"\") == n then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal cons = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"z\"}\n\tlocal words = {}\n\tfor i in s:gmatch(\"%S+\") do\n\t\tlocal num =\
    \ 0\n\t\tfor c in i:gmatch(\"%S\") do\n\t\t\tfor _,v in ipairs(cons) do\n\t\t\t\
    \tif c == v then\n\t\t\t\t\tnum = num + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    \tif num == n then\n\t\t\ttable.insert(words, i)\n\t\tend\n\tend\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0wvsj7w.lua:35:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpl0wvsj7w.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrevgme6.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpzrevgme6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t = {}\n    local s, k = s:gsub('%a+', function(w)\n        local\
    \ vowels = w:gsub('[aeiou]', '')\n        if #vowels == n then\n            t[#t+1]\
    \ = w\n        end\n    end)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphv09nzgq.lua:30:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphv09nzgq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local function count_consonants(str)\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'z'}\n    local count = 0\n    for i = 1, #str do\n      if (table.indexof(consonants,\
    \ str:sub(i, i)) > 0) then\n        count = count + 1\n      end\n    end\n  \
    \  return count\n  end\n  local list = {}\n  local list2 = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    if (count_consonants(word) == n) then\n      table.insert(list,\
    \ word)\n    end\n  end\n  if (#list > 0) then\n    for i = 1, #list do\n    \
    \  for word in s:gmatch(\"%w+\") do\n        if (table.indexof(list, word) ==\
    \ i) then\n          table.insert(list2, word)\n        end\n      end\n    end\n\
    \  end\n  return list2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo5raaffa.lua:17:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpo5raaffa.lua:17:\
    \ in local 'count_consonants'\n\t/tmp/tmpo5raaffa.lua:26: in local 'candidate'\n\
    \t/tmp/tmpo5raaffa.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal count = 0\n\tlocal consonants = {\n\t\t['b'] = true,\n\t\t['c']\
    \ = true,\n\t\t['d'] = true,\n\t\t['f'] = true,\n\t\t['g'] = true,\n\t\t['h']\
    \ = true,\n\t\t['j'] = true,\n\t\t['k'] = true,\n\t\t['l'] = true,\n\t\t['m']\
    \ = true,\n\t\t['n'] = true,\n\t\t['p'] = true,\n\t\t['q'] = true,\n\t\t['r']\
    \ = true,\n\t\t['s'] = true,\n\t\t['t'] = true,\n\t\t['v'] = true,\n\t\t['w']\
    \ = true,\n\t\t['x'] = true,\n\t\t['y'] = true,\n\t\t['z'] = true\n\t}\n\tlocal\
    \ result = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tcount = 0\n\t\tfor c in\
    \ word:gmatch(\"%a\") do\n\t\t\tif consonants[c:lower()] then\n\t\t\t\tcount =\
    \ count + 1\n\t\t\tend\n\t\tend\n\t\tif count == n then\n\t\t\ttable.insert(result,\
    \ word)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n   local vowel = {'a', 'e', 'i', 'o', 'u'}\n   local word = {}\n   local\
    \ words = {}\n   local v = 0\n   local c = 0\n   local count = 0\n   for i = 1,\
    \ #s do\n      if s:sub(i, i) == ' ' then\n         if #word ~= 0 then\n     \
    \       for j = 1, #word do\n               for k = 1, #vowel do\n           \
    \       if word[j] == vowel[k] then\n                     v = v + 1\n        \
    \          end\n               end\n            end\n            c = #word - v\n\
    \            if c == n then\n               words[count + 1] = table.concat(word)\n\
    \               count = count + 1\n            end\n            word = {}\n  \
    \          v = 0\n            c = 0\n         end\n      else\n         word[#word\
    \ + 1] = s:sub(i, i)\n      end\n   end\n   if #word ~= 0 then\n      for j =\
    \ 1, #word do\n         for k = 1, #vowel do\n            if word[j] == vowel[k]\
    \ then\n               v = v + 1\n            end\n         end\n      end\n \
    \     c = #word - v\n      if c == n then\n         words[count + 1] = table.concat(word)\n\
    \         count = count + 1\n      end\n      word = {}\n      v = 0\n      c\
    \ = 0\n   end\n   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qj_j0i_.lua:69:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp7qj_j0i_.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jsrxk99.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp2jsrxk99.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal output = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tlocal cons\
    \ = 0\n\t\tfor letter in word:gmatch(\"[^aeiou]\") do\n\t\t\tcons = cons + 1\n\
    \t\tend\n\t\tif cons == n then\n\t\t\ttable.insert(output, word)\n\t\tend\n\t\
    end\n\treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkng_dn7.lua:33:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpkkng_dn7.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local res = {}\n  for word in s:gmatch(\"%w+\") do\n    local count =\
    \ #word - word:gsub(\"[^aeiou]\", \"\")\n    if count == n then\n      table.insert(res,\
    \ word)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc6jnlir2.lua:15:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpc6jnlir2.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpc6jnlir2.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local l = {}\n  local t = s:split(\" \")\n  for i = 1, #t do\n    local\
    \ count = 0\n    for j = 1, #t[i] do\n      if t[i]:match(\"[^aeiouAEIOU]\") then\n\
    \        count = count + 1\n      end\n    end\n    if count == n then\n     \
    \ l[#l + 1] = t[i]\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslvx3nfc.lua:14:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpslvx3nfc.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpslvx3nfc.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w9yx8xo.lua:19:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp4w9yx8xo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal list = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tif count_consonants(word)\
    \ == n then\n\t\t\ttable.insert(list, word)\n\t\tend\n\tend\n\treturn list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizbd99xd.lua:15:\
    \ attempt to call a nil value (global 'count_consonants')\nstack traceback:\n\t\
    /tmp/tmpizbd99xd.lua:15: in local 'candidate'\n\t/tmp/tmpizbd99xd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
