name: HumanEval_133_sum_squares
language: lua
results:
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\t\n\tfor k,v in pairs(lst) do\n\t\tsum = sum + (math.ceil(v)\
    \ * math.ceil(v))\n\tend\n\t\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    v = math.ceil(v)\n    sum =\
    \ sum + v*v\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local s = 0\n  for _, v in ipairs(lst) do\n    s = s + math.ceil(v) ^ 2\n \
    \ end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _,v in ipairs(lst) do\n        sum = sum + math.ceil(v)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    -- add your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyhq6dls.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmplyhq6dls.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    sum = 0\n    for _,v in ipairs(lst) do\n        sum = sum + math.ceil(v)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor _, num in ipairs(lst) do\n\t\tsum = sum + math.ceil(num)\
    \ ^ 2\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal lst1 = {}\n\tfor i = 1, #lst do\n\t\tlst1[i] = math.ceil(lst[i])\n\tend\n\
    \tlocal sum = 0\n\tfor i = 1, #lst1 do\n\t\tsum = sum + lst1[i] * lst1[i]\n\t\
    end\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + math.ceil(v)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local s = 0\n  for _, v in ipairs(lst) do\n    v = math.ceil(v)\n    s = s\
    \ + v*v\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tsum = sum + math.ceil(v) ^\
    \ 2\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local val = math.ceil(lst[i])\n  \
    \  sum = sum + (val * val)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local res = 0\n    for _, v in ipairs(lst) do\n        res = res + math.ceil(v\
    \ * v)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpp5ly2k.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmpqpp5ly2k.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, num in ipairs(lst) do\n    sum = sum + math.ceil(num)\
    \ ^ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + (math.ceil(lst[i])\
    \ * math.ceil(lst[i]))\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor _, num in ipairs(lst) do\n\t\tsum = sum + math.ceil(num)\
    \ ^ 2\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i, num in ipairs(lst) do\n        sum = sum + math.ceil(num)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1hkov65.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpz1hkov65.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54pny_nl.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp54pny_nl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local squares = 0\n    for _, x in ipairs(lst) do\n        squares = squares\
    \ + math.ceil(x) ^ 2\n    end\n    return squares\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        local num = math.ceil(v)\n\
    \        sum = sum + (num * num)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local total = 0\n  for _, v in ipairs(lst) do\n    total = total + math.ceil(v)^2\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8p_yj5i.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpb8p_yj5i.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local total = 0\n  for i, j in ipairs(lst) do\n    j = math.ceil(j)\n    total\
    \ = total + j * j\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local val = math.ceil(lst[i])\n  \
    \  sum = sum + (val * val)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local total = 0\n    for _, n in ipairs(lst) do\n        total = total +\
    \ math.ceil(n) ^ 2\n    end\n    return total\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal result = 0\n\tfor i,v in ipairs(lst) do\n\t\tresult = result + math.ceil(v)*math.ceil(v)\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmr_buuvd.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpmr_buuvd.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _,num in ipairs(lst) do\n    num = math.ceil(num)\n  \
    \  sum = sum + num * num\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoabz2e5b.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpoabz2e5b.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for _,v in ipairs(lst) do\n        result = result\
    \ + math.ceil(v) ^ 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local r = 0\n  for _, n in ipairs(lst) do\n    r = r + math.ceil(n)^2\n  end\n\
    \  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm8x0fin.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpnm8x0fin.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local l = {}\n    for _, v in ipairs(lst) do\n        local v = math.ceil(v)\n\
    \        table.insert(l, v)\n    end\n    local sum = 0\n    for _, v in ipairs(l)\
    \ do\n        sum = sum + v*v\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local res = 0\n  for _, value in ipairs(lst) do\n    res = res + math.ceil(value)\
    \ ^ 2\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    return sum(map(lst, function(x)\n        return math.ceil(x) ^ 2\n    end))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfifmh6lo.lua:11:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpfifmh6lo.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpfifmh6lo.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + math.ceil(v)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg52d9nac.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpg52d9nac.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  sum = 0\n  for i,v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for _, v in ipairs(lst) do\n        result = result\
    \ + math.ceil(v) ^ 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynx02n9d.lua:17:\
    \ expected: 14, actual: {1, 2, 3}\nstack traceback:\n\t/tmp/tmpynx02n9d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local r = 0\n    for i, v in ipairs(lst) do\n        v = math.ceil(v)\n \
    \       r = r + v * v\n    end\n    return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum=0\n  for i=1,#lst do\n    sum=sum+math.ceil(lst[i])^2\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for _, v in ipairs(lst) do\n        result = result\
    \ + math.ceil(v) ^ 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _,v in ipairs(lst) do\n        local n = math.ceil(v)\n\
    \        sum = sum + n * n\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tsum = sum + math.ceil(lst[i])^2\n\t\
    end\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local ret = 0\n    for _, v in ipairs(lst) do\n        local num = math.ceil(v)\n\
    \        ret = ret + num * num\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum=0\n  for _,v in ipairs(lst) do\n    sum=sum+math.ceil(v)*math.ceil(v)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _,v in ipairs(lst) do\n        sum = sum + math.ceil(v)*math.ceil(v)\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        sum = sum + math.ceil(v)*math.ceil(v)\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _, i in ipairs(lst) do\n        sum = sum + math.ceil(i)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + math.ceil(v)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for _, x in ipairs(lst) do\n        result = result\
    \ + math.ceil(x) ^ 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v) ^\
    \ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    return lst:map(function(x) return x:tointeger() end):map(function(x) return\
    \ x^2 end):reduce(0, function(x,y) return x+y end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_qqmldx.lua:11:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpx_qqmldx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpx_qqmldx.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    local v1 = math.ceil(v)\n \
    \   sum = sum + v1^2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local ret = 0\n  for _, val in ipairs(lst) do\n    ret = ret + math.ceil(val)^2\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tlocal el = math.ceil(v)\n\t\t\
    sum = sum + (el * el)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        sum = sum + math.ceil(v)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kvfobri.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp7kvfobri.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymdtige5.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpymdtige5.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \   local sum = 0\n   for i, v in ipairs(lst) do\n      sum = sum + math.ceil(v)*math.ceil(v)\n\
    \   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfhkadio.lua:17:\
    \ expected: 14, actual: 0\nstack traceback:\n\t/tmp/tmplfhkadio.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2t0tgnf.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpy2t0tgnf.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local res = 0\n  for _, v in ipairs(lst) do\n    res = res + math.ceil(v)^2\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6y53xy2h.lua:17:\
    \ expected: 14, actual: 0\nstack traceback:\n\t/tmp/tmp6y53xy2h.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0l8rg7k.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpi0l8rg7k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    local x = math.ceil(v)\n \
    \   sum = sum + x * x\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for i = 1, #lst do\n    local value = math.ceil(lst[i])\n\
    \    result = result + (value * value)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.ceil(lst[i])^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + math.ceil(v)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_otopfp.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp0_otopfp.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, i in ipairs(lst) do\n    sum = sum + math.ceil(i) ^\
    \ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, n in ipairs(lst) do\n    sum = sum + math.ceil(n)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  if type(lst) ~= \"table\" then\n    return 0\n  end\n  local total = 0\n  for\
    \ k, v in pairs(lst) do\n    if type(v) == \"number\" then\n      total = total\
    \ + math.ceil(v)^2\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.ceil(lst[i])^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for _, value in ipairs(lst) do\n    result = result + math.ceil(value)\
    \ ^ 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  sum = 0\n  for k,v in pairs(lst) do\n    sum = sum + math.ceil(v) ^ 2\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \t-- body\n\tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tsum = sum + math.ceil(lst[i])^2\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for i = 1, #lst do\n    result = result + math.ceil(lst[i])\
    \ ^ 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i, val in ipairs(lst) do\n    sum = sum + math.ceil(val)\
    \ ^ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        local x = math.ceil(v)\n\
    \        sum = sum + x*x\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \   local sum = 0\n   for _, v in ipairs(lst) do\n      sum = sum + math.ceil(v)\
    \ ^ 2\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  --your code here\n  local sum=0\n  for _, v in ipairs(lst) do\n    sum = sum\
    \ + (math.ceil(v))^2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v) ^\
    \ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for _,v in ipairs(lst) do\n    result = result + math.ceil(v)\
    \ ^ 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for i = 1, #lst do\n        result = result + math.ceil(lst[i])\
    \ ^ 2\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\n  local sum = 0\n  for _,v in ipairs(lst) do\n    sum =\
    \ sum + math.ceil(v)^2\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhweoeok.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpzhweoeok.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    sum = sum + math.ceil(v)*math.ceil(v)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38fkuk_c.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp38fkuk_c.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    local cv = math.ceil(v)\n\
    \    sum = sum + cv * cv\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local function list_ceil(list)\n        local c_list = {}\n        for _,\
    \ v in ipairs(list) do\n            c_list[#c_list + 1] = math.ceil(v)\n     \
    \   end\n        return c_list\n    end\n    local sqr_list = list_ceil(lst)\n\
    \    local result = 0\n    for _, v in ipairs(sqr_list) do\n        result = result\
    \ + (v * v)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.ceil(lst[i])^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local acc = 0\n  for _, v in ipairs(lst) do\n    acc = acc + math.ceil(v) ^\
    \ 2\n  end\n  return acc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + math.ceil(v)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal res = 0\n\tfor _, v in ipairs(lst) do\n\t\tres = res + math.ceil(v)^2\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqmsfwdg.lua:17:\
    \ expected: 14, actual: 0\nstack traceback:\n\t/tmp/tmpcqmsfwdg.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local total = 0\n    for i, num in ipairs(lst) do\n        total = total\
    \ + math.ceil(num) ^ 2\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local ret_val = 0\n  for i,v in ipairs(lst) do\n    v = math.ceil(v)\n    v\
    \ = v * v\n    ret_val = ret_val + v\n  end\n  return ret_val\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for i = 1, #lst do\n    result = result + math.ceil(lst[i])\
    \ ^ 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor _,v in ipairs(lst) do\n\t\tsum = sum + math.ceil(v)^2\n\
    \tend\n\treturn sum\nend\nprint(sum_squares({1,2,3}))\nprint(sum_squares({1,4,9}))\n\
    print(sum_squares({1,3,5,7}))\nprint(sum_squares({1.4,4.2,0}))\nprint(sum_squares({-2.4,1,1}))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "14.0\n98.0\n84.0\n29.0\n6.0\n.\nRan 1 tests in 0.000 seconds, 1 success,\
    \ 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local s = 0\n  for _, v in ipairs(lst) do\n    s = s + math.ceil(v)^2\n  end\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    local s = math.ceil(v)\n \
    \   sum = sum + s * s\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    return lst == {} and 0 or math.ceil(lst[1]) ^ 2 + sum_squares({select(2,\
    \ unpack(lst))})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp278wlumf.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp278wlumf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp278wlumf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for i, v in ipairs(lst) do\n        result = result\
    \ + math.ceil(v) ^ 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tsum = sum + math.ceil(lst[i]) ^ 2\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local res = 0\n    for _, v in ipairs(lst) do\n        res = res + math.ceil(v)\
    \ ^ 2\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    -- Your code is here...\n    local sum = 0\n    for _, v in ipairs(lst) do\n\
    \        sum = sum + math.ceil(v) ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for i,v in ipairs(lst) do\n        result = result\
    \ + math.ceil(v)^2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    --YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkynh5x0y.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpkynh5x0y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \   local sum = 0\n   for i,v in ipairs(lst) do\n      sum = sum + math.ceil(v)^2\n\
    \   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- body\n  local sum = 0\n  for _,v in ipairs(lst) do\n    sum = sum + (math.ceil(v)\
    \ * math.ceil(v))\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfa91gvz1.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpfa91gvz1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + (math.ceil(lst[i])\
    \ * math.ceil(lst[i]))\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _,v in ipairs(lst) do\n        sum = sum + math.ceil(v)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor _,v in ipairs(lst) do\n\t\tsum = sum + math.ceil(v)^2\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    local value = math.ceil(v)\n\
    \    sum = sum + value * value\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1f74cb9f.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp1f74cb9f.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    -- your code here\n    local sum = 0\n    for i,v in ipairs(lst) do\n   \
    \     sum = sum + math.ceil(v)^2\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal res = 0\n\tfor _, v in ipairs(lst) do\n\t\tres = res + math.ceil(v)^2\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2e7v1nc.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpw2e7v1nc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + math.ceil(v)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    sum = sum + math.ceil(v) ^\
    \ 2\n  end\n  return sum\nend\nreturn sum_squares\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpanhl1wbq.lua:18: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- body\n  local lst_temp = {}\n  local sum = 0\n  for i,v in ipairs(lst) do\n\
    \    lst_temp[i] = math.ceil(v)\n    sum = sum + math.pow(lst_temp[i],2)\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum=0\n  for i=1,#lst do\n    sum=sum+math.ceil(lst[i])^2\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    sum = sum + math.ceil(v)*math.ceil(v)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i, val in ipairs(lst) do\n        sum = sum + math.ceil(val)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tif type(lst) ~= \"table\" then\n\t\treturn nil, \"Expected a table\"\n\tend\n\
    \tlocal result = 0\n\tfor _, n in ipairs(lst) do\n\t\tresult = result + math.ceil(n)^2\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + math.ceil(v)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  return map_reduce(function(a) return math.ceil(a) * math.ceil(a) end,\n   \
    \                 function(b, c) return b + c end,\n                    0, lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmx6_cbg8.lua:11:\
    \ attempt to call a nil value (global 'map_reduce')\nstack traceback:\n\t/tmp/tmpmx6_cbg8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmx6_cbg8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    sum = 0\n    for _, value in ipairs(lst) do\n        sum = sum + math.ceil(value)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tsum = sum + math.ceil(lst[i]) ^ 2\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local total = 0\n    for _,v in ipairs(lst) do\n        local n = math.ceil(v)\n\
    \        total = total + n * n\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local total = 0\n  for i = 1, #lst do\n    lst[i] = math.ceil(lst[i])\n   \
    \ total = total + lst[i]^2\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local s = 0\n    for i,v in ipairs(lst) do\n        s = s + math.ceil(v)^2\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    local v = math.ceil(v)\n \
    \   sum = sum + v * v\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + math.ceil(v)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8utbpso.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpq8utbpso.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uafulhs.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp_uafulhs.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \treturn 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ygbx9zs.lua:17:\
    \ expected: 14, actual: 0\nstack traceback:\n\t/tmp/tmp9ygbx9zs.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _,v in ipairs(lst) do\n        sum = sum + math.ceil(v)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \   -- your code here\n   local total = 0\n   for i = 1, #lst do\n      total\
    \ = total + math.ceil(lst[i])^2\n   end\n   return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.ceil(lst[i])^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    sum = sum + math.ceil(v) ^\
    \ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for i = 1, #lst do\n    local v = math.ceil(lst[i])\n \
    \   result = result + v * v\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i, val in ipairs(lst) do\n        sum = sum + math.ceil(val)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for _,v in ipairs(lst) do\n        result = result\
    \ + math.ceil(v)^2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tsum = sum + math.ceil(v)^2\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local total = 0\n  for k,v in pairs(lst) do\n    total = total + math.ceil(v)*math.ceil(v)\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.ceil(lst[i])\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for _, v in ipairs(lst) do\n    result = result + math.ceil(v)\
    \ ^ 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for _,v in ipairs(lst) do\n    result = result + math.ceil(v)^2\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, val in ipairs(lst) do\n    sum = sum + math.ceil(val)*math.ceil(val)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    sum = sum + math.ceil(v)*math.ceil(v)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \t-- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5py5gb1.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpy5py5gb1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local res = 0\n  for i, v in ipairs(lst) do\n    res = res + math.ceil(v)^2\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local res = 0\n  for _, v in ipairs(lst) do\n    res = res + math.ceil(v) ^\
    \ 2\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        local s = math.ceil(v)\n\
    \        sum = sum + s * s\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  --your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobtqgc4w.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpobtqgc4w.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v) ^\
    \ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal rs = 0\n\tfor i,v in ipairs(lst) do\n\t\trs = rs + math.ceil(v) * math.ceil(v)\n\
    \tend\n\treturn rs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for _, v in ipairs(lst) do\n    result = result + math.ceil(v)\
    \ ^ 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for _, v in ipairs(lst) do\n    result = result + math.ceil(v)\
    \ ^ 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    sum = sum + math.ceil(v)^2\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  --[[\n  Function to sum up the squared elements of a given list\n  ]]--\n \
    \ local total = 0 -- initialize total\n  for _, v in ipairs(lst) do\n    -- for\
    \ each element of lst\n    total = total + math.ceil(v)^2 -- add the square of\
    \ the element to total\n  end\n  return total -- return the total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.ceil(lst[i])^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local output = 0\n  for _,v in ipairs(lst) do\n    output = output + math.ceil(v)^2\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for i, v in ipairs(lst) do\n        result = result\
    \ + math.ceil(v) ^ 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _, x in ipairs(lst) do\n        sum = sum + x * x\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzfjwxz6.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgzfjwxz6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local result = 0\n  for _, n in ipairs(lst) do\n    result = result + math.ceil(n)^2\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for _,v in ipairs(lst) do\n        sum = sum + math.ceil(v)\
    \ ^ 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    sum = sum + math.ceil(v) ^\
    \ 2\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i, x in ipairs(lst) do\n        sum = sum + math.ceil(x)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n\
    \    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
    \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
    \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
    \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
    \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytd0t_yl.lua:16:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpytd0t_yl.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k4jml6v.lua:17:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp_k4jml6v.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  return reduce(lst, function(t, n) return t + n * n end, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7ogmq76.lua:11:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpq7ogmq76.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq7ogmq76.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \tlocal sum = 0\n\tfor _,v in ipairs(lst) do\n\t\tsum = sum + math.ceil(v)^2\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local _sum = 0\n    for i = 1, #lst do\n        _sum = _sum + math.ceil(lst[i])\
    \ ^ 2\n    end\n    return _sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local result = 0\n    for _,v in ipairs(lst) do\n        result = result\
    \ + math.ceil(v)^2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        sum = sum + math.ceil(v)^2\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.ceil(v)^2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.ceil(lst[i])\
    \ ^ 2\n    end\n    return sum\nend\nassert(sum_squares({1, 2, 3}) == 14)\nassert(sum_squares({1,\
    \ 4, 9}) == 98)\nassert(sum_squares({1, 3, 5, 7}) == 84)\nassert(sum_squares({1.4,\
    \ 4.2, 0}) == 29)\nassert(sum_squares({-2.4, 1, 1}) == 6)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
