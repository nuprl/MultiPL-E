name: HumanEval_94_skjkasdkd
language: lua
prompt: "-- You are given a list of integers.\n-- You need to find the largest prime\
  \ value and return the sum of its digits.\n-- Examples:\n-- For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n-- For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n-- For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n-- For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n-- For lst = [0,81,12,3,1,21] the output should be 3\n--\
  \ For lst = [0,8,1,2,1,7] the output should be 7\nlocal function skjkasdkd(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = skjkasdkd\n\
  \    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
  \ 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1, 0, 1, 8, 2,\
  \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0,\
  \ 81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n\
  \    lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191,\
  \ 123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ['    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
    43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,
    131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,
    223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,
    311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,
    503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
    613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,
    719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
    827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,
    941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033,
    1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117,
    1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,', "  \nend",
  "  local function isPrime(a)\n    if a<=1 then return false end\n    for i=2,a-1\
    \ do\n      if a%i==0 then return false end\n    end\n    return true\n  end\n\
    \  local t={}\n  for k,v in pairs(lst) do\n    if isPrime(v) then table.insert(t,v)\
    \ end\n  end\n  table.sort(t,function(a,b)return a>b end)\n  if #t==0 then return\
    \ 0 end\n  local s=tostring(t[1])\n  local r=0\n  for i=1,#s do\n    r=r+tonumber(s:sub(i,i))\n\
    \  end\n  return r\nend", "    local function digitSum(n)\n        local s = 0\n\
    \        while n > 0 do\n            s = s + n % 10\n            n = math.floor(n\
    \ / 10)\n        end\n        return s\n    end\n    local function isPrime(n)\n\
    \        if n <= 1 then return false end\n        if n == 2 then return true end\n\
    \        if n % 2 == 0 then return false end\n        for i = 3, math.sqrt(n),\
    \ 2 do\n            if n % i == 0 then return false end\n        end\n       \
    \ return true\n    end\n    local function getLargestPrime(lst)\n        local\
    \ largest_prime = -1\n        for i = 1, #lst do\n            if isPrime(lst[i])\
    \ and lst[i] > largest_prime then\n                largest_prime = lst[i]\n  \
    \          end\n        end\n        return largest_prime\n    end\n    return\
    \ digitSum(getLargestPrime(lst))\nend", "  if #lst == 0 then return 0 end\n  local\
    \ function sumDigits(num)\n    local res = 0\n    while num ~= 0 do\n      res\
    \ = res + (num % 10)\n      num = math.floor(num / 10)\n    end\n    return res\n\
    \  end\n  local function isPrime(num)\n    if num < 2 then return false end\n\
    \    if num == 2 then return true end\n    for i = 2, math.floor(math.sqrt(num))\
    \ do\n      if num % i == 0 then return false end\n    end\n    return true\n\
    \  end\n  local function getLargestPrime(lst)\n    local res = -1\n    for i =\
    \ 1, #lst do\n      if isPrime(lst[i]) and lst[i] > res then res = lst[i] end\n\
    \    end\n    return res\n  end\n  return sumDigits(getLargestPrime(lst))\nend",
  "    -- create local variables\n    local d = 0\n    local x = 0\n    local m =\
    \ 0\n    -- checks for any prime numbers\n    for i = 1, #lst do\n        for\
    \ j = 2, lst[i] do\n            if lst[i] % j == 0 then\n                d = d\
    \ + 1\n            end\n        end\n        -- checks to see if number is larger\
    \ than current largest\n        if d == 1 and lst[i] > m then\n            m =\
    \ lst[i]\n        end\n        d = 0\n    end\n    -- counts all the digits of\
    \ the largest prime\n    while m ~= 0 do\n        x = x + m % 10\n        m =\
    \ math.floor(m / 10)\n    end\n    return x\nend", "  local primes = {}\n  local\
    \ total = 0\n  for _, v in ipairs(lst) do\n    if v == 0 then\n      break\n \
    \   end\n    if v % 2 == 0 then\n      primes[v] = true\n    end\n    for i =\
    \ 3, v, 2 do\n      if v % i == 0 then\n        primes[v] = true\n      end\n\
    \    end\n  end\n  for k, _ in pairs(primes) do\n    total = total + k\n  end\n\
    \  local str = tostring(total)\n  local sum = 0\n  for i = 1, #str do\n    sum\
    \ = sum + tonumber(str:sub(i, i))\n  end\n  return sum\nend", "    local largestPrime\
    \ = 0\n    for i=1,#lst do\n        local n = lst[i]\n        local flag = true\n\
    \        for j=2, n-1 do\n            if n % j == 0 then\n                flag\
    \ = false\n                break\n            end\n        end\n        if flag\
    \ and n > largestPrime then\n            largestPrime = n\n        end\n    end\n\
    \    local r = largestPrime\n    local sum = 0\n    while r > 0 do\n        sum\
    \ = sum + r % 10\n        r = math.floor(r / 10)\n    end\n    return sum\nend",
  "    local function sum(s)\n        local total = 0\n        for i=1, #s do\n  \
    \          total = total + s:sub(i,i)\n        end\n        return total\n   \
    \ end\n    local function isPrime(n)\n        if n <= 1 then return false end\n\
    \        if n % 2 == 0 and n ~= 2 then return false end\n        for i=3, math.sqrt(n),\
    \ 2 do\n            if n % i == 0 then return false end\n        end\n       \
    \ return true\n    end\n    local function prime(n)\n        if n <= 2 then return\
    \ false end\n        for i=3, math.sqrt(n), 2 do\n            if n % i == 0 then\
    \ return false end\n        end\n        return true\n    end\n    local primes\
    \ = {}\n    for i, v in ipairs(lst) do\n        local str = tostring(v)\n    \
    \    local l = #str\n        for j=1, l do\n            local num = tonumber(str:sub(j,\
    \ j))\n            if not primes[num] and prime(num) then\n                primes[num]\
    \ = num\n            end\n        end\n    end\n    local max = primes[1]\n  \
    \  for _, v in ipairs(primes) do\n        if v > max then\n            max = v\n\
    \        end\n    end\n    return sum(tostring(max))\nend", "  local n = 1\n \
    \ local i = 2\n  local v = 0\n  local r = 0\n  while n < #lst do\n    if lst[n]\
    \ == 0 then\n      n = n + 1\n    else\n      v = lst[n]\n      n = n + 1\n  \
    \    i = 2\n      while i <= v do\n        if v % i == 0 then\n          v = v\
    \ / i\n          if i > r then\n            r = i\n          end\n        else\n\
    \          i = i + 1\n        end\n      end\n    end\n  end\n  return (r / 10)\
    \ + (r % 10)\nend", "  print(lst)\n  local sum = 0\n  local largest = 0\n  local\
    \ previous = 0\n  local num = 0\n  local i = 1\n  while lst[i] do\n    if(lst[i]\
    \ == i) then\n      previous = lst[i]\n      num = lst[i]\n      i = i + 1\n \
    \   else\n      if(num ~= previous) then\n        return 0\n      end\n      if(largest\
    \ < num) then\n        largest = num\n      end\n      sum = sum + num\n     \
    \ num = lst[i]\n      previous = num\n      i = i + 1\n    end\n  end\n  return\
    \ sum\nend", "  local sm = 0\n  local primes = {}\n  local function contains(t,\
    \ val)\n    for k, v in pairs(t) do\n      if v == val then\n        return true\n\
    \      end\n    end\n    return false\n  end\n  local function is_prime(num)\n\
    \    if num < 0 then\n      return false\n    end\n    if num == 1 then\n    \
    \  return false\n    end\n    for i = 2, math.floor(math.sqrt(num)) do\n     \
    \ if num % i == 0 then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  for k, v in pairs(lst) do\n    if is_prime(v) then\n      table.insert(primes,\
    \ v)\n    end\n  end\n  local largest_prime = math.max(unpack(primes))\n  while\
    \ largest_prime ~= 0 do\n    sm = sm + (largest_prime % 10)\n    largest_prime\
    \ = math.floor(largest_prime / 10)\n  end\n  return sm\nend", "  local largest_prime_int\
    \ = 0\n  for i=1,#lst do\n    local n = lst[i]\n    if is_prime(n) then\n    \
    \  if largest_prime_int < n then\n        largest_prime_int = n\n      end\n \
    \   end\n  end\n  local sum = 0\n  while largest_prime_int > 0 do\n    sum = sum\
    \ + largest_prime_int % 10\n    largest_prime_int = math.floor(largest_prime_int\
    \ / 10)\n  end\n  return sum\nend", "  local largestPrime = 0\n  for i = 1, #lst\
    \ do\n    local j = lst[i]\n    while j % 2 == 0 do\n      j = j / 2\n    end\n\
    \    while j % 3 == 0 do\n      j = j / 3\n    end\n    while j % 5 == 0 do\n\
    \      j = j / 5\n    end\n    while j % 7 == 0 do\n      j = j / 7\n    end\n\
    \    if j == 1 then\n      if lst[i] > largestPrime then\n        largestPrime\
    \ = lst[i]\n      end\n    end\n  end\n  return math.modf(largestPrime % 10) +\
    \ math.modf(largestPrime / 10) % 10 + math.modf(largestPrime / 100) % 10\nend",
  "    local primes = {}\n    for i=1, #lst do\n        if lst[i] > 1 then\n     \
    \       local num = lst[i]\n            local k = 2\n            while k < num\
    \ do\n                if num % k == 0 then\n                    num = num / k\n\
    \                    if primes[k] then\n                        primes[k] = primes[k]\
    \ + 1\n                    else\n                        primes[k] = 1\n     \
    \               end\n                else\n                    k = k + 1\n   \
    \             end\n            end\n            if primes[num] then\n        \
    \        primes[num] = primes[num] + 1\n            else\n                primes[num]\
    \ = 1\n            end\n        end\n    end\n    local biggest = 0\n    for k,\
    \ v in pairs(primes) do\n        if k > biggest then\n            biggest = k\n\
    \        end\n    end\n    local s = tostring(biggest)\n    local sum = 0\n  \
    \  for i=1, #s do\n        sum = sum + tonumber(s:sub(i, i))\n    end\n    return\
    \ sum\nend", "\tlocal primes = {\n\t\t[2] = true,\n\t\t[3] = true,\n\t\t[5] =\
    \ true,\n\t\t[7] = true,\n\t\t[11] = true,\n\t\t[13] = true,\n\t\t[17] = true,\n\
    \t\t[19] = true,\n\t\t[23] = true,\n\t\t[29] = true,\n\t\t[31] = true,\n\t\t[37]\
    \ = true,\n\t\t[41] = true,\n\t\t[43] = true,\n\t\t[47] = true,\n\t\t[53] = true,\n\
    \t\t[59] = true,\n\t\t[61] = true,\n\t\t[67] = true,\n\t\t[71] = true,\n\t\t[73]\
    \ = true,\n\t\t[79] = true,\n\t\t[83] = true,\n\t\t[89] = true,\n\t\t[97] = true,\n\
    \t\t[101] = true,\n\t\t[103] = true,\n\t\t[107] = true,\n\t\t[109] = true,\n\t\
    \t[113] = true,\n\t\t[127] = true,\n\t\t[131] = true,\n\t\t[137] = true,\n\t\t\
    [139] = true,\n\t\t[149] = true,\n\t\t[151] = true,\n\t\t[157] = true,\n\t\t[163]\
    \ = true,\n\t\t[167] = true,\n\t\t[173] = true,\n\t\t[179] = true,\n\t\t[181]\
    \ = true,\n\t\t[191] = true,\n\t\t[193] = true,\n\t\t[197] = true,\n\t\t[199]\
    \ = true,\n\t\t[211] = true,\n\t\t[223] = true,\n\t\t[227] = true,\n\t\t[229]\
    \ = true,\n\t\t[233] = true,\n\t\t[239] = true,\n\t\t[241] = true,\n\t\t[251]\
    \ = true,\n\t\t[257] = true,\n\t\t[263] = true,\n", "  print(table.concat(lst,\
    \ \" \"))\n  print(table.concat(lst))\n  local m = 1\n  for i = 1, #lst do\n \
    \   m = math.max(m, lst[i])\n  end\n  local max = 0\n  for i = 2, m do\n    local\
    \ i2 = i\n    local f = true\n    for j = 2, math.sqrt(i) do\n      if i2 % j\
    \ == 0 then\n        f = false\n        break\n      end\n    end\n    if f then\n\
    \      local sum = 0\n      while i2 > 0 do\n        sum = sum + i2 % 10\n   \
    \     i2 = math.floor(i2 / 10)\n      end\n      max = math.max(max, sum)\n  \
    \  end\n  end\n  return max\nend", '  local primes = { 2, 3, 5, 7, 11, 13, 17,
    19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,
    107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,
    193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,
    281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,
    383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,
    479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,
    593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,
    683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,
    911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019,
    1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097,
    1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201,
    1213,', "  local sum = 0\n  local max = 0\n  for i=1,#lst do\n    local len =\
    \ 0\n    local num = lst[i]\n    while num > 0 do\n      len = len + 1\n     \
    \ num = math.floor(num / 10)\n    end\n    num = lst[i]\n    local rem = 0\n \
    \   for j=1,len do\n      rem = rem * 10 + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    local isPrime = true\n    for j=2,math.floor(rem / 2) do\n\
    \      if rem % j == 0 then\n        isPrime = false\n        break\n      end\n\
    \    end\n    if isPrime and rem > max then\n      max = rem\n    end\n  end\n\
    \  while max > 0 do\n    sum = sum + max % 10\n    max = math.floor(max / 10)\n\
    \  end\n  return sum\nend", "\tlocal primes={}\n\tfor i=1,#lst do\n\t\tif isPrime(lst[i])\
    \ then\n\t\t\tprimes[#primes+1]=lst[i]\n\t\tend\n\tend\n\tlocal largest=math.max(unpack(primes))\n\
    \tlocal result=0\n\twhile largest>0 do\n\t\tresult=result+largest%10\n\t\tlargest=math.floor(largest/10)\n\
    \tend\n\treturn result\nend", "\tfor i = #lst, 1, -1 do\n\t\tlocal isPrime = true\n\
    \t\tfor j = #lst, 1, -1 do\n\t\t\tif i ~= j and i % j == 0 then\n\t\t\t\tisPrime\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isPrime then\n\t\t\tlocal\
    \ sum = 0\n\t\t\twhile i > 0 do\n\t\t\t\tsum = sum + i % 10\n\t\t\t\ti = math.floor(i\
    \ / 10)\n\t\t\tend\n\t\t\treturn sum\n\t\tend\n\tend\nend", "    local res, mp\
    \ = 0, {}\n    local function isPrime(n)\n        if n < 2 then return false end\n\
    \        for i = 2, n - 1 do\n            if n % i == 0 then return false end\n\
    \        end\n        return true\n    end\n    for i = 1, #lst do\n        local\
    \ n = lst[i]\n        if isPrime(n) then\n            local t = 0\n          \
    \  while n > 0 do\n                t = t + n % 10\n                n = math.floor(n\
    \ / 10)\n            end\n            mp[i] = t\n            res = math.max(res,\
    \ t)\n        end\n    end\n    return res\nend", "    local primos = {}\n   \
    \ for i = 1, #lst do\n        if isPrime(lst[i]) then\n            primos[#primos\
    \ + 1] = lst[i]\n        end\n    end\n    table.sort(primos)\n    local n = tostring(primos[#primos])\n\
    \    local soma = 0\n    for i = 1, #n do\n        soma = soma + tonumber(n:sub(i,\
    \ i))\n    end\n    return soma\nend", "  local len, ret, tbl = #lst, {}, {}\n\
    \  for i = 1, len do\n    local num = lst[i]\n    for k = 2, num ^ 0.5 do\n  \
    \    if num % k == 0 then tbl[num] = true end\n    end\n  end\n  for i = 1, len\
    \ do\n    local num = lst[i]\n    if not tbl[num] then ret[#ret + 1] = num end\n\
    \  end\n  table.sort(ret, function(a, b) return a > b end)\n  if ret[1] then\n\
    \    local str = tostring(ret[1])\n    return str:gsub('.', function(a) return\
    \ tonumber(a) end):sum()\n  end\n  return 0\nend", "    local max = 0\n    for\
    \ i=1,#lst do\n        if not lst[i] then break end\n        if lst[i] > max then\
    \ max = lst[i] end\n    end\n    for i=max,2,-1 do\n        local isprime = true\n\
    \        for j=2,max/2 do\n            if (i % j == 0) then\n                isprime\
    \ = false\n                break\n            end\n        end\n        if isprime\
    \ then\n            local sum = 0\n            while i > 0 do\n              \
    \  sum = sum + (i % 10)\n                i = math.floor(i / 10)\n            end\n\
    \            return sum\n        end\n    end\nend", "    local function sdsd(x)\n\
    \        local function sd(x)\n            return math.random(x)\n        end\n\
    \        return sd(x)\n    end\n    local function kasd(x)\n        local lst\
    \ = {}\n        for i = 2, x do\n            lst[#lst + 1] = i\n        end\n\
    \        for i = 1, #lst do\n            local n = sdsd(i)\n            lst[i],\
    \ lst[n] = lst[n], lst[i]\n        end\n        return lst\n    end\n    local\
    \ function ss(x)\n        local function tt(x)\n            return (x > 1) and\
    \ not x:find('[^13579]')\n        end\n        return tt(x)\n    end\n    local\
    \ function dd(lst)\n        local res = {}\n        for i = 1, #lst do\n     \
    \       if ss(lst[i]) then\n                res[#res + 1] = lst[i]\n         \
    \   end\n        end\n        return res\n    end\n    local function sd(x)\n\
    \        local res = {}\n        for i = 1, #x do\n            res[#res + 1] =\
    \ x[i]\n        end\n        return res\n    end\n    local function sdk(x)\n\
    \        local function sdds(x)\n            local function jksd(x)\n        \
    \        local res = 0\n                for i = 1, #x do\n                   \
    \ res = res + x[i]\n                end\n                return res\n        \
    \    end\n            return jksd(x)\n        end\n        return sdds(x)\n  \
    \  end\n    local function aasd(x)\n        local res = {}\n        while (x >\
    \ 0) do\n            res[#res + 1] = x % 10\n            x = math.floor(x / 10)\n\
    \        end\n        return res\n    end\n    local function sda(x)\n       \
    \ local function asd(x)\n            local function asd(x)\n                local\
    \ function jksd(x)\n                    local res = 0\n                    for\
    \ i = 1, #x do\n                        res = res + x[i]", "\tlocal result, max_prime\
    \ = 0, 0\n\tfor _,v in ipairs(lst) do\n\t\tif v > max_prime and is_prime(v) then\n\
    \t\t\tmax_prime = v\n\t\tend\n\tend\n\twhile max_prime > 0 do\n\t\tresult = result\
    \ + max_prime % 10\n\t\tmax_prime = math.floor(max_prime / 10)\n\tend\n\treturn\
    \ result\nend", "    local function isPrime(n)\n        if n <= 1 then return\
    \ false end\n        if n <= 3 then return true end\n        if n % 2 == 0 or\
    \ n % 3 == 0 then return false end\n        for i = 5, math.sqrt(n), 6 do\n  \
    \          if n % i == 0 or n % (i + 2) == 0 then return false end\n        end\n\
    \        return true\n    end\n    local p = 0\n    for _, v in ipairs(lst) do\n\
    \        if isPrime(v) and v > p then p = v end\n    end\n    local sum = 0\n\
    \    while p > 0 do\n        sum = sum + p % 10\n        p = math.floor(p / 10)\n\
    \    end\n    return sum\nend", "  local function isprime(n)\n    for i=2,n-1\
    \ do\n      if n%i==0 then return false end\n    end\n    return true\n  end\n\
    \  local function isZero(n) return n==0 end\n  local primes = {}\n  for _,n in\
    \ ipairs(lst) do\n    if isprime(n) then table.insert(primes,n) end\n  end\n \
    \ local maxPrime = table.remove(primes,table.find(primes,math.max(unpack(primes))))\n\
    \  return maxPrime==nil and 0 or\n    table.reduce(maxPrime:totable(),function(a,b)\
    \ return a+b end,0)\nend", "\tlocal nums = lst\n\tlocal product = 1\n\tlocal max_prime\
    \ = 2\n\tfor i=1,#nums do\n\t\tif is_prime(nums[i]) then\n\t\t\tproduct = product\
    \ * nums[i]\n\t\t\tif nums[i] > max_prime then\n\t\t\t\tmax_prime = nums[i]\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn sum_digits(max_prime)\nend", "    local largest,\
    \ prime = 1, true\n    for i=1, #lst do\n        for j=2, lst[i]^0.5 do\n    \
    \        if lst[i] % j == 0 then\n                prime = false\n            \
    \    break\n            end\n        end\n        if prime and lst[i] > largest\
    \ then\n            largest = lst[i]\n        end\n        prime = true\n    end\n\
    \    local sum = 0\n    for i=1, #largest do\n        sum = sum + largest:sub(i,i)\n\
    \    end\n    return sum\nend", "    local function isPrime(n)\n        if n <\
    \ 2 then return false end\n        if n % 2 == 0 then return n == 2 end\n    \
    \    if n % 3 == 0 then return n == 3 end\n        local i, w = 5, 2\n       \
    \ while i * i <= n do\n            if n % i == 0 then return false end\n     \
    \       i = i + w\n            w = 6 - w\n        end\n        return true\n \
    \   end\n    local function split(n)\n        local t = {}\n        for i = 0,\
    \ 9 do\n            if n % (10 ^ i) > 0 then\n                t[#t + 1] = math.floor(n\
    \ / (10 ^ i)) % 10\n            end\n        end\n        return t\n    end\n\
    \    local function checker(n)\n        local t = split(n)\n        local res\
    \ = 0\n        for _, v in ipairs(t) do\n            res = res + v\n        end\n\
    \        return res\n    end\n    local max = 0\n    for _, v in ipairs(lst) do\n\
    \        if isPrime(v) and v > max then\n            max = v\n        end\n  \
    \  end\n    return checker(max)\nend", "\tlocal max = 0\n\tfor k,v in pairs(lst)\
    \ do\n\t\tif math.isPrime(v) and v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\
    \tlocal sum = 0\n\tfor i = 1, #tostring(max) do\n\t\tsum = sum + tostring(max):sub(i,i)\n\
    \tend\n\treturn sum\nend", "\tlocal max = 0\n\tfor i = 1, #lst do\n\t\tlocal num\
    \ = lst[i]\n\t\twhile num % 2 == 0 do\n\t\t\tnum = num / 2\n\t\tend\n\t\tlocal\
    \ div = 3\n\t\twhile div < num ^ 0.5 do\n\t\t\tif num % div == 0 then\n\t\t\t\t\
    num = num / div\n\t\t\telse\n\t\t\t\tdiv = div + 2\n\t\t\tend\n\t\tend\n\t\tif\
    \ num > max then\n\t\t\tmax = num\n\t\tend\n\tend\n\tlocal sum = 0\n\twhile max\
    \ > 0 do\n\t\tsum = sum + max % 10\n\t\tmax = math.floor(max / 10)\n\tend\n\t\
    return sum\nend\nprint(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}))\n\
    print(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}))\nprint(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}))\n\
    print(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}))\nprint(skjkasdkd({0,81,12,3,1,21}))\n\
    print(skjkasdkd({0,8,1,2,1,7}))", "    local max = 0\n    for i = 1, #lst do\n\
    \        local val = lst[i]\n        if math.prime(val) and val > max then\n \
    \           max = val\n        end\n    end\n    local sum = 0\n    while max\
    \ > 0 do\n        sum = sum + max % 10\n        max = math.floor(max / 10)\n \
    \   end\n    return sum\nend", "  local largest_prime = 0\n  for k,v in pairs(lst)\
    \ do\n    if lst[k] > largest_prime and (is_prime(lst[k]) == true) then\n    \
    \  largest_prime = lst[k]\n    end\n  end\n  local prime_sum = 0\n  while largest_prime\
    \ > 0 do\n    prime_sum = prime_sum + largest_prime % 10\n    largest_prime =\
    \ math.floor(largest_prime / 10)\n  end\n  return prime_sum\nend", "    local\
    \ list = \"\"\n    for i = 1, #lst do\n        if lst[i] % 2 ~= 0 then\n     \
    \       list = list .. lst[i]\n        end\n    end\n    list = list .. 0\n  \
    \  local largest_prime_value = math.max(list)\n    local sum = 0\n    for i =\
    \ 1, #largest_prime_value do\n        sum = sum + largest_prime_value[i]\n   \
    \ end\n    return sum\nend", "\tlocal primes = { [2] = 2 }\n\tlocal sum = 0\n\t\
    \n\tfor n=1,math.huge do\n\t\tfor n2=2,n-1 do\n\t\t\tif n%n2 == 0 then\n\t\t\t\
    \tbreak\n\t\t\telseif n2 == n-1 then\n\t\t\t\tprimes[n] = n\n\t\t\tend\n\t\tend\n\
    \t\tif #primes > #lst then\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\tfor n=1,#lst do\n\
    \t\tsum = sum + primes[lst[n]]\n\tend\n\t\n\tlocal num = tostring(sum)\n\tlocal\
    \ sum = 0\n\tfor n=1,#num do\n\t\tsum = sum + tonumber(num:sub(n,n))\n\tend\n\t\
    \n\treturn sum\nend", '    local primer={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,',
  "   local function dsdadas(n)\n      local o = {}\n      while n > 0 do\n      \
    \   o[#o+1] = n % 10\n         n = n // 10\n      end\n      return o\n   end\n\
    \   local function sdsa(a, b)\n      local aa = dsdadas(a)\n      local bb = dsdadas(b)\n\
    \      return aa[1] * bb[1] + aa[2] * bb[2] + aa[3] * bb[3] + aa[4] * bb[4] +\
    \ aa[5] * bb[5] + aa[6] * bb[6] + aa[7] * bb[7] + aa[8] * bb[8] + aa[9] * bb[9]\
    \ + aa[10] * bb[10]\n   end\n   local function dsddd(a, b)\n      return a > b\n\
    \   end\n   local t = {}\n   for _, n in ipairs(lst) do\n      if n == 1 then\n\
    \         table.insert(t, n)\n      else\n         local p = true\n         for\
    \ i = 2, n do\n            if n % i == 0 then\n               p = false\n    \
    \           break\n            end\n         end\n         if p then\n       \
    \     table.insert(t, n)\n         end\n      end\n   end\n   table.sort(t, dsddd)\n\
    \   return sdsa(t[1], t[2])\nend", "  local primes = {}\n  local function is_prime(x)\n\
    \    if x == 1 then return false end\n    if x == 2 then return true end\n   \
    \ if x % 2 == 0 then return false end\n    for i = 3, math.sqrt(x), 2 do\n   \
    \   if x % i == 0 then return false end\n    end\n    return true\n  end\n  for\
    \ i, n in ipairs(lst) do\n    if is_prime(n) then\n      primes[#primes + 1] =\
    \ n\n    end\n  end\n  local max = 0\n  for i, n in ipairs(primes) do\n    if\
    \ n > max then\n      max = n\n    end\n  end\n  local ret = 0\n  while max >\
    \ 0 do\n    ret = ret + max % 10\n    max = math.floor(max / 10)\n  end\n  return\
    \ ret\nend", "\tlocal max = 0\n\tfor i = 1, #lst do\n\t\tlocal n = lst[i]\n\t\t\
    if n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\tlocal function is_prime(n)\n\
    \t\tif n < 2 then\n\t\t\treturn false\n\t\tend\n\t\tfor i = 2, math.sqrt(n) do\n\
    \t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn\
    \ true\n\tend\n\tfor i = max, 2, -1 do\n\t\tif is_prime(i) then\n\t\t\tlocal sum\
    \ = 0\n\t\t\tfor k = 1, #tostring(i) do\n\t\t\t\tsum = sum + tonumber(tostring(i):sub(k,\
    \ k))\n\t\t\tend\n\t\t\treturn sum\n\t\tend\n\tend\nend", "  local tbl = {};\n\
    \  for k,v in pairs(lst) do\n    if v == 0 then\n      table.insert(tbl, {k,1});\n\
    \    else\n      local i = 2;\n      while i < v do\n        if v % i == 0 then\n\
    \          table.insert(tbl, {k,i});\n          v = v / i;\n        else\n   \
    \       i = i + 1;\n        end\n      end\n      table.insert(tbl, {k,v});\n\
    \    end\n  end\n  tbl = r(tbl,1);\n  local t = {};\n  for k,v in pairs(tbl) do\n\
    \    table.insert(t, v[2]);\n  end\n  return s(t);\nend\nprint(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}));\n\
    print(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}));\nprint(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}));\n\
    print(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}));\nprint(skjkasdkd({0,81,12,3,1,21}));\n\
    print(skjkasdkd({0,8,1,2,1,7}));", "    local largest = 0\n    for _,v in pairs(lst)\
    \ do\n        if v > largest and v % 2 ~= 0 and math.sqrt(v) % 1 ~= 0 then\n \
    \           largest = v\n        end\n    end\n    local str = largest .. \"\"\
    \n    local sum = 0\n    for i = 1,#str do\n        sum = sum + tonumber(str:sub(i,i))\n\
    \    end\n    return sum\nend", "  local function isPrime(n)\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local function digitSum(n)\n    local str = tostring(n)\n\
    \    local sum = 0\n    for i = 1, #str do\n      sum = sum + tonumber(str:sub(i,\
    \ i))\n    end\n    return sum\n  end\n  local function getLargestPrime(lst)\n\
    \    local max = 0\n    for _,v in ipairs(lst) do\n      if isPrime(v) and v >\
    \ max then\n        max = v\n      end\n    end\n    return max\n  end\n  return\
    \ digitSum(getLargestPrime(lst))\nend", "  local idx = #lst\n  local res = 0\n\
    \  for i = idx, 1, -1 do\n    local flg = true\n    local num = lst[i]\n    for\
    \ j = 2, num - 1 do\n      if num % j == 0 then\n        flg = false\n       \
    \ break\n      end\n    end\n    if flg then\n      local str = tostring(num)\n\
    \      for k = 1, #str do\n        res = res + tonumber(str:sub(k, k))\n     \
    \ end\n      break\n    end\n  end\n  return res\nend", "    return function()\n\
    \        local function isPrime(n)\n            if n < 2 then return false end\n\
    \            for i = 2, math.sqrt(n) do\n                if n % i == 0 then return\
    \ false end\n            end\n            return true\n        end\n        local\
    \ primes = {}\n        for i = 1, #lst do\n            if isPrime(lst[i]) then\
    \ table.insert(primes, lst[i]) end\n        end\n        local maxPrime = math.max(unpack(primes))\n\
    \        local maxPrimeStr = tostring(maxPrime)\n        local sum = 0\n     \
    \   for i = 1, #maxPrimeStr do\n            sum = sum + maxPrimeStr:sub(i, i)\n\
    \        end\n        return sum\n    end\nend", "  local r={}\n  local c=0\n\
    \  for _, v in pairs(lst) do\n    if v%2~=0 and v%3~=0 and v%5~=0 and v%7~=0 and\
    \ v%9~=0 and v%11~=0 and v%13~=0 and v%17~=0 and v%19~=0 and v%23~=0 and v%29~=0\
    \ and v%31~=0 and v%37~=0 and v%41~=0 and v%43~=0 and v%47~=0 and v%53~=0 and\
    \ v%59~=0 and v%61~=0 and v%67~=0 and v%71~=0 and v%73~=0 and v%79~=0 and v%83~=0\
    \ and v%89~=0 and v%97~=0 and v%101~=0 and v%103~=0 and v%107~=0 and v%109~=0\
    \ and v%113~=0 and v%127~=0 and v%131~=0 and v%137~=0 and v%139~=0 and v%149~=0\
    \ and v%151~=0 and v%157~=0 and v%163~=0 and v%167~=0 and v%173~=0 and v%179~=0\
    \ and v%181~=0 and v%191~=0 and v%193~=0 and v%197~=0 and v%199~=0 and v%211~=0\
    \ and v%223~=0 and v%227~=0 and v%229~=0 and v%233~=0 and v%239~=0 and v%241~=0\
    \ and v%251~=0 and v%257~=0 and v%263~=0 and v%269~=0 and v%271~=0 and v%277~=0\
    \ and v%281~=0 and v%283~=0 and v%293~=0 and v%307~=0 and v%311~=0 and v%313~=0\
    \ and v%317~=0 and v%331~=0 and v%337~=0 and v", "  local largestPrime = 1\n \
    \ for k, v in pairs(lst) do\n    local p = 1\n    local flag = true\n    while\
    \ p <= v do\n      if v % p == 0 then\n        if flag then\n          flag =\
    \ false\n        else\n          flag = true\n          break\n        end\n \
    \     end\n      p = p + 1\n    end\n    if flag and v > largestPrime then\n \
    \     largestPrime = v\n    end\n  end\n  local ret = 0\n  while largestPrime\
    \ > 0 do\n    ret = ret + largestPrime % 10\n    largestPrime = math.floor(largestPrime\
    \ / 10)\n  end\n  return ret\nend", "    local largest_prime = -1\n    for k,v\
    \ in pairs(lst) do\n        if is_prime(v) and v > largest_prime then\n      \
    \      largest_prime = v\n        end\n    end\n    if largest_prime == -1 then\n\
    \        return 0\n    end\n    local digits = digit_table(largest_prime)\n  \
    \  local sum = 0\n    for k,v in pairs(digits) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend", "  local max = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n    end\n  end\n  local function isPrime(n)\n\
    \    for i = 2, n - 1 do\n      if n % i == 0 then\n        return false\n   \
    \   end\n    end\n    return true\n  end\n  for i = max, 1, -1 do\n    if isPrime(i)\
    \ then\n      local sum = 0\n      for n in tostring(i):gmatch('.') do\n     \
    \   sum = sum + tonumber(n)\n      end\n      return sum\n    end\n  end\nend",
  "\tlocal p = 0\n\tfor i = 1, #lst do\n\t\tlocal pr = true\n\t\tfor j = 2, lst[i]\
    \ - 1 do\n\t\t\tif lst[i] % j == 0 then\n\t\t\t\tpr = false\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\t\tif pr then\n\t\t\tp = lst[i]\n\t\tend\n\tend\n\tlocal sum\
    \ = 0\n\twhile p > 0 do\n\t\tsum = sum + p % 10\n\t\tp = math.floor(p / 10)\n\t\
    end\n\treturn sum\nend", "  local num = 0\n  local max = 0\n  for _, n in ipairs(lst)\
    \ do\n    local div = n\n    while div ~= 1 do\n      local isPrime = true\n \
    \     for d = 2, div-1 do\n        if div % d == 0 then\n          isPrime = false\n\
    \          break\n        end\n      end\n      if isPrime then break end\n  \
    \    for d = 2, div-1 do\n        if div % d == 0 then\n          div = div /\
    \ d\n          break\n        end\n      end\n    end\n    if div > max then\n\
    \      max = div\n    end\n  end\n  while max > 0 do\n    num = num + max % 10\n\
    \    max = math.floor(max / 10)\n  end\n  return num\nend", "  local a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z=table.unpack(lst)\n\
    \  local n=math.max(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)\n  if\
    \ n==0 then\n    return 0\n  end\n  local function isPrime(n)\n    for i=2,math.sqrt(n)\
    \ do\n      if n%i==0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function isLargePrime(n)\n    local sum=0\n    while n>0\
    \ do\n      sum=sum+n%10\n      n=math.floor(n/10)\n    end\n    return isPrime(sum)\n\
    \  end\n  for i=n,0,-1 do\n    if isLargePrime(i) then\n      return i\n    end\n\
    \  end\nend", "  --determine the largest prime number in the list\n  --determine\
    \ the sum of its digits\n  --return the sum of its digits\n  local primes = {}\n\
    \  local maximum\n  for i,v in ipairs(lst) do\n    if v > 1 then\n      local\
    \ prime = true\n      for j,_ in ipairs(primes) do\n        if v % primes[j] ==\
    \ 0 then\n          prime = false\n          break\n        end\n      end\n \
    \     if prime then\n        table.insert(primes, v)\n        if not maximum or\
    \ v > maximum then\n          maximum = v\n        end\n      end\n    end\n \
    \ end\n  local str = tostring(maximum)\n  local sum = 0\n  for i=1, #str do\n\
    \    sum = sum + str:sub(i,i)\n  end\n  return sum\nend", "    return 1\nend",
  "  return lst\nend", end, "    local function isPrime(n)\n        if n <= 1 then\
    \ return false end\n        if n % 2 == 0 and n ~= 2 then return false end\n \
    \       for i = 3, n ^ 0.5, 2 do\n            if n % i == 0 then return false\
    \ end\n        end\n        return true\n    end\n    local a = 0\n    for i =\
    \ 1, #lst do\n        if isPrime(lst[i]) and lst[i] > a then\n            a =\
    \ lst[i]\n        end\n    end\n    local b = 0\n    while a > 0 do\n        b\
    \ = b + a % 10\n        a = math.floor(a / 10)\n    end\n    return b\nend\nskjkasdkd{0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}\
    \ --> 10\nskjkasdkd{1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} --> 25\nskjkasdkd{1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}\
    \ --> 13\nskjkasdkd{0,724,32,71,99,32,6,0,5,91,83,0,5,6} --> 11\nskjkasdkd{0,81,12,3,1,21}\
    \ --> 3\nskjkasdkd{0,8,1,2,1,7} --> 7", "    -- Prime numbers between 0 and the\
    \ first item in the list\n    local primeNumbers = {2, 3, 5, 7}\n    local result\
    \ = 0\n    -- Find all prime numbers between 0 and the first item in the list\
    \ and add them to the primeNumbers table\n    for i = 2, lst[1] do\n        local\
    \ numberIsPrime = true\n        for j = 2, i - 1 do\n            if i % j == 0\
    \ then\n                numberIsPrime = false\n                break\n       \
    \     end\n        end\n        if numberIsPrime then\n            table.insert(primeNumbers,\
    \ i)\n        end\n    end\n    -- Get the biggest prime number\n    local max\
    \ = 0\n    for i = 1, #primeNumbers do\n        if primeNumbers[i] > max then\n\
    \            max = primeNumbers[i]\n        end\n    end\n    -- Get the sum of\
    \ the digits of the biggest prime number\n    while max > 0 do\n        result\
    \ = result + max % 10\n        max = math.floor(max / 10)\n    end\n    return\
    \ result\nend", '    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,
    41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,
    131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,
    223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,
    311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,
    503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
    613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,
    719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
    827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,
    941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033,
    1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117,
    1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,', "    for k,\
    \ v in pairs(lst) do\n        -- Check if any two numbers sum to 0.\n        for\
    \ i = 1, #lst do\n            if lst[i] == v * -1 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nprint(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}))\n\
    print(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}))\nprint(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}))\n\
    print(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}))\nprint(skjkasdkd({0,81,12,3,1,21}))\n\
    print(skjkasdkd({0,8,1,2,1,7}))", "    local primes = {}\n    local largest =\
    \ 0\n    for _, n in ipairs(lst) do\n        if n > largest then\n           \
    \ largest = n\n        end\n    end\n    local function isPrime(num)\n       \
    \ if num == 1 then\n            return false\n        end\n        if num == 2\
    \ then\n            return true\n        end\n        for i = 2, math.sqrt(num)\
    \ do\n            if num % i == 0 then\n                return false\n       \
    \     end\n        end\n        return true\n    end\n    while largest >= 1 do\n\
    \        if isPrime(largest) then\n            table.insert(primes, largest)\n\
    \        end\n        largest = largest - 1\n    end\n    if #primes == 0 then\n\
    \        return false\n    end\n    local largestPrime = 0\n    for _, prime in\
    \ ipairs(primes) do\n        if prime > largestPrime then\n            largestPrime\
    \ = prime\n        end\n    end\n    if largestPrime == 0 then\n        return\
    \ false\n    end\n    local str = tostring(largestPrime)\n    local sum = 0\n\
    \    for i = 1, #str do\n        sum = sum + tonumber(str:sub(i, i))\n    end\n\
    \    return sum\nend", "  local prime = 1\n  for i = 1, #lst do\n    local a =\
    \ lst[i]\n    if prime < a then\n      local isPrime = true\n      for j = 2,\
    \ a - 1 do\n        if a % j == 0 then\n          isPrime = false\n          break\n\
    \        end\n      end\n      if isPrime then\n        prime = a\n      end\n\
    \    end\n  end\n  local sum = 0\n  while prime > 0 do\n    sum = sum + prime\
    \ % 10\n    prime = math.floor(prime / 10)\n  end\n  return sum\nend", "\tlocal\
    \ val = 0\n\tfor i = 1, #lst do\n\t\tlocal c = lst[i]\n\t\tif c > val then\n\t\
    \t\tval = c\n\t\tend\n\tend\n\tlocal ret = 0\n\twhile val > 0 do\n\t\tret = ret\
    \ + (val % 10)\n\t\tval = math.floor(val / 10)\n\tend\n\treturn ret\nend", " \
    \   local function isPrime(num)\n        if num == 1 then return false end\n \
    \       for i = 2, math.sqrt(num) do\n            if num % i == 0 then return\
    \ false end\n        end\n        return true\n    end\n    local function sumOfDigits(num)\n\
    \        local sum = 0\n        for d in tostring(num):gmatch(\"%d\") do\n   \
    \         sum = sum + tonumber(d)\n        end\n        return sum\n    end\n\
    \    local maxPrime = 0\n    for _, num in ipairs(lst) do\n        if isPrime(num)\
    \ and num > maxPrime then\n            maxPrime = num\n        end\n    end\n\
    \    return sumOfDigits(maxPrime)\nend", "\tlocal largestPrime = 0\n\tlocal largestPrimeString\
    \ = \"\"\n\tfor i = 1, #lst do\n\t\tlocal j = lst[i]\n\t\tif (isPrime(j)) then\n\
    \t\t\tif (j > largestPrime) then\n\t\t\t\tlargestPrime = j\n\t\t\t\tlargestPrimeString\
    \ = tostring(j)\n\t\t\tend\n\t\tend\n\tend\n\tlocal sum = 0\n\tfor i = 1, #largestPrimeString\
    \ do\n\t\tsum = sum + tonumber(largestPrimeString:sub(i, i))\n\tend\n\treturn\
    \ sum\nend", "  local largest_prime, sum = 0, 0\n  local digit\n  local lst =\
    \ lst\n  local lst_len = #lst\n  local big_num = 0\n  local big_num_pos = 1\n\
    \  local prime_nums = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039,\
    \ 1049, 1051, 1061, 1063, 1069", "\tfor i=table.maxn(lst),1,-1 do\n\t\tif lst[i]\
    \ % 2 == 0 then\n\t\t\ttable.remove(lst,i)\n\t\tend\n\tend\n\tlocal max = 0\n\t\
    for i=1,table.maxn(lst) do\n\t\tif lst[i] > max then\n\t\t\tmax = lst[i]\n\t\t\
    end\n\tend\n\tlocal sum = 0\n\twhile max > 0 do\n\t\tsum = sum + (max % 10)\n\t\
    \tmax = math.floor(max / 10)\n\tend\n\treturn sum\nend", "  lst = lst:gsub(\"\
    [^0-9]\", \"\")\n  lst = lst:gsub(\"0\", \"\")\n  print(lst)\n  local max = lst:sub(1,1)\n\
    \  for digit in lst:gmatch(\".\") do\n    if digit > max then\n      max = digit\n\
    \    end\n  end\n  return max\nend", "  local prima_angka = 0;\n  for i=1,#lst\
    \ do\n    if(prima(lst[i]) == true) then\n      if(lst[i] > prima_angka) then\n\
    \        prima_angka = lst[i];\n      end\n    end\n  end\n  local angka = split(prima_angka);\n\
    \  local total = 0;\n  for i=1,#angka do\n    total = total + tonumber(angka[i]);\n\
    \  end\n  return total;\nend", "    local primes = {}\n    for _, n in ipairs(lst)\
    \ do\n        if isPrime(n) then\n            primes[#primes + 1] = n\n      \
    \  end\n    end\n    if #primes == 0 then\n        return 0\n    end\n    table.sort(primes,\
    \ function(a, b) return a > b end)\n    local prime = primes[1]\n    local nums\
    \ = {}\n    while prime > 0 do\n        nums[#nums + 1] = prime % 10\n       \
    \ prime = math.floor(prime / 10)\n    end\n    local sum = 0\n    for _, n in\
    \ ipairs(nums) do\n        sum = sum + n\n    end\n    return sum\nend", "   \
    \ local sorted = {}\n    local largest = 0\n    local sum = 0\n    for i,v in\
    \ ipairs(lst) do\n        if(isPrime(v)) then\n            table.insert(sorted,\
    \ v)\n        end\n    end\n    for i,v in ipairs(sorted) do\n        if(v > largest)\
    \ then\n            largest = v\n        end\n    end\n    if(largest == 0) then\n\
    \        return 0\n    end\n    while largest > 0 do\n        sum = sum + largest\
    \ % 10\n        largest = math.floor(largest / 10)\n    end\n    return sum\n\
    end", "    return lst\n        :map(function(a) return a:totable() end)\n    \
    \    :flatMap(function(a) return a end)\n        :reduce(0, function(a, b) return\
    \ a + b end)\nend", "\tlocal primes = {}\n\tfor _, n in ipairs(lst) do\n\t\tif\
    \ n > 1 then\n\t\t\tlocal notPrime = false\n\t\t\tfor _, p in ipairs(primes) do\n\
    \t\t\t\tif n % p == 0 then\n\t\t\t\t\tnotPrime = true\n\t\t\t\t\tbreak\n\t\t\t\
    \tend\n\t\t\tend\n\t\t\tif not notPrime then\n\t\t\t\ttable.insert(primes, n)\n\
    \t\t\tend\n\t\tend\n\tend\n\tlocal max = 0\n\tfor _, n in ipairs(primes) do\n\t\
    \tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\tlocal sum = 0\n\twhile max\
    \ > 0 do\n\t\tsum = sum + (max % 10)\n\t\tmax = math.floor(max / 10)\n\tend\n\t\
    return sum\nend", "\tlocal function sdfgsdfgs(num)\n\t\tlocal function asdfasdf(num)\n\
    \t\t\tlocal function asdfasd(num)\n\t\t\t\tif num%2 == 0 then\n\t\t\t\t\treturn\
    \ false\n\t\t\t\tend\n\t\t\t\tif num%3 == 0 then\n\t\t\t\t\treturn false\n\t\t\
    \t\tend\n\t\t\t\tif num%5 == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\
    \t\tif num%7 == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\treturn true\n\
    \t\t\tend\n\t\t\tlocal function asdasd(num)\n\t\t\t\tlocal function asdfas(num)\n\
    \t\t\t\t\tif num%2 == 0 then\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\t\
    \tif num%3 == 0 then\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\t\tif num%5\
    \ == 0 then\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\t\treturn true\n\t\
    \t\t\tend\n\t\t\t\tif asdfas(num) == true then\n\t\t\t\t\tif num%7 == 0 then\n\
    \t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\t\tif asdasd(num) == true then\n\t\t\t\tif asdfasd(num)\
    \ == true then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\t\treturn false\n\t\tend\n\t\tlocal function asdfasd(num)\n\t\t\tlocal\
    \ function asdfasd(num)\n\t\t\t\tif num%2 == 0 then\n\t\t\t\t\treturn false\n\t\
    \t\t\tend\n\t\t\t\tif num%3 == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\
    \t\t\tif num%5 == 0 then\n\t\t\t\t\t", "  local largest\n  local fn = function(a,b)\
    \ return a > b end\n  for i = 1, #lst do\n    if largest == nil then\n      largest\
    \ = lst[i]\n    else\n      largest = fn(largest, lst[i]) and largest or lst[i]\n\
    \    end\n  end\n  local n = largest\n  local i = 2\n  while i*i <= n do\n   \
    \ if n % i == 0 then\n      largest = i\n      n = n / i\n    else\n      i =\
    \ i + 1\n    end\n  end\n  largest = i ~= 1 and n or largest\n  local function\
    \ sumDigits(n)\n    local sum = 0\n    while n > 0 do\n      sum = sum + n % 10\n\
    \      n = math.floor(n / 10)\n    end\n    return sum\n  end\n  return sumDigits(largest)\n\
    end", "  local tab = {}\n  for i=1, #lst do\n    table.insert(tab, lst[i])\n \
    \ end\n  for i=1, #tab do\n    for j=i+1, #tab do\n      if tab[i] ~= 0 and tab[j]\
    \ ~= 0 then\n        if tab[j] % tab[i] == 0 then\n          tab[j] = 0\n    \
    \    end\n      end\n    end\n  end\n  table.sort(tab, function(a,b) return a\
    \ > b end)\n  local prime = tab[1]\n  local res = 0\n  while prime > 0 do\n  \
    \  res = res + prime % 10\n    prime = math.floor(prime / 10)\n  end\n  return\
    \ res\nend", "  local value = 0\n  local primes = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n  local maxPrime\
    \ = 2\n  for _,v in pairs(lst) do\n    for i,p in pairs(primes) do\n      if v%p\
    \ == 0 then\n        if maxPrime < p then\n          maxPrime = p\n        end\n\
    \      end\n    end\n  end\n  local digits = {}\n  while maxPrime > 0 do\n   ",
  "    local max = 0\n    for i=1,#lst do\n        local is_prime = true\n       \
    \ for j=2,lst[i]-1 do\n            if lst[i]%j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ and lst[i] > max then\n            max = lst[i]\n        end\n    end\n    local\
    \ sum = 0\n    while max > 0 do\n        sum = sum + (max%10)\n        max = math.floor(max/10)\n\
    \    end\n    return sum\nend", "  local primes = {}\n  local maxPrime = 2\n \
    \ for _, num in ipairs(lst) do\n    if num > maxPrime then\n      for i = maxPrime,\
    \ num do\n        if not primes[i] then\n          for j = 2, i-1 do\n       \
    \     if i % j == 0 then\n              primes[i] = true\n              break\n\
    \            end\n          end\n        end\n      end\n      maxPrime = num\n\
    \    end\n  end\n  local maxPrimeValue = 0\n  for _, prime in ipairs(lst) do\n\
    \    if not primes[prime] and prime > maxPrimeValue then\n      maxPrimeValue\
    \ = prime\n    end\n  end\n  local result = 0\n  while maxPrimeValue > 0 do\n\
    \    result = result + maxPrimeValue % 10\n    maxPrimeValue = math.floor(maxPrimeValue\
    \ / 10)\n  end\n  return result\nend", "    local fun = require 'library'\n  \
    \  local primes = fun.find_primes(fun.max(lst))\n    local len = #primes\n   \
    \ local last_prime\n    for i = len, 1, -1 do\n        local prime = primes[i]\n\
    \        if fun.is_in(prime, lst) then\n            last_prime = prime\n     \
    \       break\n        end\n    end\n    local str = tostring(last_prime)\n  \
    \  local len = #str\n    local sum = 0\n    for i = 1, len do\n        local char\
    \ = str:sub(i, i)\n        sum = sum + tonumber(char)\n    end\n    return sum\n\
    end", "    local hash = {}\n    local arr = {}\n    for _, v in ipairs(lst) do\n\
    \        hash[v] = true\n    end\n    for n, _ in pairs(hash) do\n        arr[#arr\
    \ + 1] = n\n    end\n    table.sort(arr)\n    local res = 0\n    for i = #arr,\
    \ 1, -1 do\n        if isPrime(arr[i]) then\n            res = arr[i]\n      \
    \      break\n        end\n    end\n    local ret = 0\n    while res > 0 do\n\
    \        ret = ret + res % 10\n        res = math.floor(res / 10)\n    end\n \
    \   return ret\nend", "    local a = {}\n    for i = 1,#lst do\n        if lst[i]\
    \ == 0 then\n            return 0\n        end\n        a[i] = 0\n        while\
    \ lst[i]%2 == 0 do\n            lst[i] = lst[i]/2\n            a[i] = 2\n    \
    \    end\n        for j = 3,lst[i]^0.5,2 do\n            while lst[i]%j == 0 do\n\
    \                lst[i] = lst[i]/j\n                a[i] = j\n            end\n\
    \        end\n        if lst[i] > 2 then\n            a[i] = lst[i]\n        end\n\
    \    end\n    local b = 0\n    for i = 1,#a do\n        if a[i] > b then\n   \
    \         b = a[i]\n        end\n    end\n    local c = 0\n    while b > 0 do\n\
    \        c = c + b%10\n        b = math.floor(b/10)\n    end\n    return c\nend",
  "\tlocal min, max = 2, 0\n\tlocal count = {}\n\tfor i=1, #lst do\n\t\tif not count[lst[i]]\
    \ then\n\t\t\tcount[lst[i]] = 1\n\t\telse\n\t\t\tcount[lst[i]] = count[lst[i]]\
    \ + 1\n\t\tend\n\t\tif lst[i] > max then\n\t\t\tmax = lst[i]\n\t\tend\n\t\tif\
    \ lst[i] < min then\n\t\t\tmin = lst[i]\n\t\tend\n\tend\n\tlocal i = min + 1\n\
    \twhile i <= max do\n\t\tif count[i] then\n\t\t\tfor j=i+i, max, i do\n\t\t\t\t\
    count[j] = nil\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal ks = {}\n\t\
    for k, v in pairs(count) do\n\t\ttable.insert(ks, k)\n\tend\n\ttable.sort(ks)\n\
    \tlocal res = 0\n\tfor i=1, #ks do\n\t\tres = res + string.len(ks[i])\n\tend\n\
    \treturn res\nend", "  local primes = {}\n  local max = 0\n  for i = 1, #lst do\n\
    \    local k = i+1\n    for j = k, #lst do\n      if lst[i] ~= 0 and lst[i] ==\
    \ lst[j] then\n        if lst[i] > max then\n          max = lst[i]\n        end\n\
    \        table.insert(primes, lst[i])\n      end\n    end\n  end\n  local sum\
    \ = 0\n  while max > 0 do\n    local rem = max % 10\n    sum = sum + rem\n   \
    \ max = (max - rem) / 10\n  end\n  return sum\nend", "local mx=0\nfor k,v in pairs(lst)\
    \ do\nif v>mx then mx=v end\nend", "    if lst == nil then return nil end\n  \
    \  local p = {}\n    local s = 0\n    for i = 2, lst[#lst] do\n        local j\
    \ = 1\n        while lst[j] and i % lst[j] ~= 0 do\n            j = j + 1\n  \
    \      end\n        if not lst[j] then\n            p[#p + 1] = i\n        end\n\
    \    end\n    for i = 1, #p do\n        s = s + math.floor(p[i] / 10) + p[i] %\
    \ 10\n    end\n    return s\nend", "  local mx = 0\n  for _,v in ipairs(lst) do\n\
    \    if v > mx and v % 2 ~= 0 and v % 3 ~= 0 and v % 5 ~= 0 and v % 7 ~= 0 then\n\
    \      mx = v\n    end\n  end\n  local res = 0\n  while mx > 0 do\n    res = res\
    \ + mx % 10\n    mx = math.floor(mx / 10)\n  end\n  return res\nend", "    local\
    \ list = {}\n    for i,v in ipairs(lst) do\n        local a = 0\n        for j=1,v\
    \ do\n            if v%j==0 then\n                a = a + 1\n            end\n\
    \        end\n        if a == 2 then\n            list[#list+1] = v\n        end\n\
    \    end\n    local num = 0\n    for i,v in ipairs(list) do\n        if v > num\
    \ then\n            num = v\n        end\n    end\n    local sum = 0\n    for\
    \ i=1,#num do\n        local c = tonumber(num:sub(i,i))\n        sum = sum + c\n\
    \    end\n    return sum\nend", "  local primelist = {}\n  local function isPrime(n)\n\
    \    if n < 2 then return false end\n    if n == 2 then return true end\n    if\
    \ n % 2 == 0 then return false end\n    for i = 3, math.sqrt(n), 2 do\n      if\
    \ n % i == 0 then return false end\n    end\n    return true\n  end\n  for _,n\
    \ in ipairs(lst) do\n    if isPrime(n) then\n      table.insert(primelist, n)\n\
    \    end\n  end\n  if #primelist == 0 then return 0 end\n  local big = 0\n  for\
    \ _,n in ipairs(primelist) do\n    if n > big then big = n end\n  end\n  local\
    \ total = 0\n  while big > 0 do\n    total = total + big % 10\n    big = math.floor(big\
    \ / 10)\n  end\n  return total\nend\ntests.skjkasdkd = function()\n  assert(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3})\
    \ == 10)\n  assert(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25)\n\
    \  assert(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13)\n\
    \  assert(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11)\n  assert(skjkasdkd({0,81,12,3,1,21})\
    \ == 3)\n  assert(skjkasdkd({0,8,1,2,1,7}) == 7)\nend", "    local function isPrime(num)\n\
    \        for i = 2, math.floor(math.sqrt(num)) do\n            if num % i == 0\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    local a = 0\n    for i = 0, #lst do\n        if lst[i] >\
    \ a and isPrime(lst[i]) then\n            a = lst[i]\n        end\n    end\n \
    \   local total = 0\n    while a > 0 do\n        total = total + a % 10\n    \
    \    a = math.floor(a / 10)\n    end\n    return total\nend", "  local function\
    \ isPrime(n)\n    for i = 2, n - 1 do\n      if n % i == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  local function primeSum(n)\n\
    \    local res = 0\n    while n > 0 do\n      res = res + n % 10\n      n = math.floor(n\
    \ / 10)\n    end\n    return res\n  end\n  local prime = 0\n  for _, v in ipairs(lst)\
    \ do\n    if isPrime(v) and v > prime then\n      prime = v\n    end\n  end\n\
    \  return primeSum(prime)\nend", "local function isPrime(n)\n  if n < 2 then return\
    \ false end\n  if n == 2 then return true end\n  for i = 2, n ^ 0.5 do\n    if\
    \ n % i == 0 then return false end\n  end\n  return true\nend", "  local ret,\
    \ primes = 0, {}\n  for _, n in ipairs(lst) do\n    if n > 1 then\n      local\
    \ p, f = true, 2\n      while p and f * f <= n do\n        if n % f == 0 then\n\
    \          p = false\n        end\n        f = f + 1\n      end\n      if p then\n\
    \        table.insert(primes, n)\n      end\n    end\n  end\n  for _, d in pairs(tostring(math.max(unpack(primes))))\
    \ do\n    ret = ret + tonumber(d)\n  end\n  return ret\nend", "    local function\
    \ sumDigits(num)\n        local sum = 0\n        while num > 0 do\n          \
    \  sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n\
    \        return sum\n    end\n    local function isPrime(num)\n        if num\
    \ <= 1 then return false end\n        for i = 2, math.sqrt(num) do\n         \
    \   if num % i == 0 then return false end\n        end\n        return true\n\
    \    end\n    local function findLargestPrime(lst)\n        local largestPrime\n\
    \        for i = 1, #lst do\n            if isPrime(lst[i]) then\n           \
    \     if largestPrime == nil or lst[i] > largestPrime then\n                 \
    \   largestPrime = lst[i]\n                end\n            end\n        end\n\
    \        return largestPrime\n    end\n    return sumDigits(findLargestPrime(lst))\n\
    end", "    local primearr = {}\n    local function isPrime(num)\n        if num\
    \ == 1 then return false end\n        if num == 2 then return true end\n     \
    \   if num % 2 == 0 then return false end\n        for i = 3, math.floor(math.sqrt(num))\
    \ + 1, 2 do\n            if num % i == 0 then return false end\n        end\n\
    \        return true\n    end\n    for i = 1, #lst do\n        if isPrime(lst[i])\
    \ then\n            table.insert(primearr, lst[i])\n        end\n    end\n   \
    \ local largest = primearr[1]\n    for i = 2, #primearr do\n        if primearr[i]\
    \ > largest then\n            largest = primearr[i]\n        end\n    end\n  \
    \  local sum = 0\n    while largest > 0 do\n        sum = sum + (largest % 10)\n\
    \        largest = math.floor(largest / 10)\n    end\n    return sum\nend", " \
    \   local is_prime = function(n)\n        for i = 2, n - 1 do\n            if\
    \ n % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local largest_prime = 0\n    for i = 1, #lst\
    \ do\n        if is_prime(lst[i]) and lst[i] > largest_prime then\n          \
    \  largest_prime = lst[i]\n        end\n    end\n    local sum = 0\n    while\
    \ largest_prime > 0 do\n        sum = sum + largest_prime % 10\n        largest_prime\
    \ = math.floor(largest_prime / 10)\n    end\n    return sum\nend\nassert(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3})\
    \ == 10)\nassert(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25)\n\
    assert(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13)\n\
    assert(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11)\nassert(skjkasdkd({0,81,12,3,1,21})\
    \ == 3)\nassert(skjkasdkd({0,8,1,2,1,7}) == 7)", "  local sum = 0\n  local max\
    \ = 1\n  for _,v in pairs(lst) do\n    local t = {}\n    for i = 2, v do\n   \
    \   if (v % i) == 0 then\n        t[#t+1] = i\n      end\n    end\n    if #t ==\
    \ 0 then\n      t[#t+1] = v\n    end\n    local m = math.max(unpack(t))\n    if\
    \ m > max then\n      max = m\n    end\n  end\n  while max > 0 do\n    sum = sum\
    \ + (max % 10)\n    max = math.floor(max / 10)\n  end\n  return sum\nend", " \
    \   local function digitSum(n)\n        local n = n or 0\n        local sum =\
    \ 0\n        while n > 0 do\n            sum = sum + (n % 10)\n            n =\
    \ math.floor(n / 10)\n        end\n        return sum\n    end\n    local function\
    \ isPrime(n)\n        if n < 2 then return false end\n        for i = 2, math.sqrt(n)\
    \ do\n            if n % i == 0 then return false end\n        end\n        return\
    \ true\n    end\n    local largestPrime = 0\n    for _, v in ipairs(lst) do\n\
    \        if isPrime(v) and v > largestPrime then\n            largestPrime = v\n\
    \        end\n    end\n    return digitSum(largestPrime)\nend", "    local primeLst\
    \ = {}\n    local primeN = 0\n    for i = 1, #lst do\n        if PrimeLst.IsPrime(lst[i])\
    \ then\n            primeLst[#primeLst + 1] = lst[i]\n        end\n    end\n \
    \   for i = 1, #primeLst do\n        if primeLst[i] > primeN then\n          \
    \  primeN = primeLst[i]\n        end\n    end\n    local res = 0\n    while primeN\
    \ > 0 do\n        res = res + primeN % 10\n        primeN = math.floor(primeN\
    \ / 10)\n    end\n    return res\nend", "\tlocal function isPrime(n)\n\t\tif n\
    \ < 2 then return false end\n\t\tif n == 2 then return true end\n\t\tfor i = 2,\
    \ n - 1 do\n\t\t\tif n % i == 0 then return false end\n\t\tend\n\t\treturn true\n\
    \tend\n\tlocal largest_prime\n\tfor i = 1, #lst do\n\t\tif isPrime(lst[i]) then\n\
    \t\t\tif not largest_prime or lst[i] > largest_prime then\n\t\t\t\tlargest_prime\
    \ = lst[i]\n\t\t\tend\n\t\tend\n\tend\n\tlocal sum = 0\n\tfor i = 1, #tostring(largest_prime)\
    \ do\n\t\tsum = sum + tonumber(tostring(largest_prime):sub(i, i))\n\tend\n\treturn\
    \ sum\nend", "  local function f(s,n) return s + (n - n%10)/10 end\n  local function\
    \ g(s,n) return s + n%10 end\n  local function h(t) return t[1] end\n  local function\
    \ sift(l,a,b)\n    local r,p,k,v = {},1,a,0\n    for i=a,b do\n      if l[i]%p\
    \ == 0 then\n        v = (v + l[i])%10\n        l[i] = 0\n      else\n       \
    \ p = l[i]\n        r[k] = l[i]\n        k = k + 1\n      end\n    end\n    return\
    \ r, v\n  end\n  local function filter(n) return n > 1 end\n  local function sol(l)\n\
    \    local t = {}\n    while #l > 0 do\n      l, t[#t+1] = sift(l,1,#l)\n    end\n\
    \    return t\n  end\n  local t = {}\n  t = sol(lst)\n  t = table.filter(t,filter)\n\
    \  if #t > 0 then\n    local m = table.reduce(t,h)\n    return table.reduce(m,f,0)\
    \ + table.reduce(m,g,0)\n  else\n    return 0\n  end\nend", "    local l = {}\n\
    \    for _, v in ipairs(lst) do\n        for n = 1, v do\n            local is_prime\
    \ = true\n            for i = 2, n - 1 do\n                if n % i == 0 then\n\
    \                    is_prime = false\n                    break\n           \
    \     end\n            end\n            if is_prime and n > 1 then\n         \
    \       table.insert(l, n)\n            end\n        end\n    end\n    local max\
    \ = -1\n    for _, v in ipairs(l) do\n        if v > max then\n            max\
    \ = v\n        end\n    end\n    local str = tostring(max)\n    local r = 0\n\
    \    for i = 1, #str do\n        r = r + tonumber(str:sub(i, i))\n    end\n  \
    \  return r\nend", "  local max = 0\n  for i=1,#lst do\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n  end\n  local str = tostring(max)\n  local sum\
    \ = 0\n  for i=1,#str do\n    sum = sum + tonumber(str:sub(i,i))\n  end\n  return\
    \ sum\nend", "    local j = 0;\n    local b = 0;\n    for i = 1, #lst do\n   \
    \     if lst[i] > j then\n            j = lst[i];\n        end\n    end\n    for\
    \ i = 1, #lst do\n        if (j % lst[i] == 0) and (j / lst[i] == 1) then\n  \
    \          b = 1;\n        end\n    end\n    if b == 1 then\n        for i = 1,\
    \ #lst do\n            if (j % lst[i] == 0) and (j / lst[i] == 1) then\n     \
    \           j = lst[i];\n            end\n        end\n    end\n    return j;\n\
    end", "    local res = 0\n    for _, v in ipairs(lst) do\n        if v > res and\
    \ isPrime(v) then\n            res = v\n        end\n    end\n    return sumOfDigits(res)\n\
    end", "\nend", "\tlocal primes = {}\n\tfor _,l in ipairs(lst) do\n\t\tif isPrime(l)\
    \ then\n\t\t\ttable.insert(primes, l)\n\t\tend\n\tend\n\tlocal maxPrime = math.max(unpack(primes))\n\
    \tlocal sum = 0\n\tfor i = 1,#tostring(maxPrime) do\n\t\tsum = sum + tonumber(tostring(maxPrime):sub(i,i))\n\
    \tend\n\treturn sum\nend", "    lst = table.pack(...)\n    local primes = {}\n\
    \    local maxPrime = 2\n    local sum = 0\n    local found = false\n    while\
    \ not found do\n        local marked = {}\n        for i=1,#lst do\n         \
    \   if lst[i] % maxPrime == 0 then\n                marked[#marked+1] = lst[i]\n\
    \            end\n        end\n        for i=1,#marked do\n            lst[i]\
    \ = nil\n        end\n        if #marked == 0 then\n            found = true\n\
    \        end\n        maxPrime = maxPrime + 1\n    end\n    for k,v in pairs(lst)\
    \ do\n        sum = sum + v\n    end\n    return sum\nend", "\tlocal res = {}\n\
    \tfor i=1, #lst do\n\t\tlocal n = tonumber(lst[i])\n\t\tif n and n > 1 then\n\t\
    \t\tlocal p = 1\n\t\t\tfor d=2, n do\n\t\t\t\tif n % d == 0 then\n\t\t\t\t\tp\
    \ = d\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif p == 1 then\n\t\t\t\t\
    table.insert(res, n)\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal max = 0\n\tfor i=1,\
    \ #res do\n\t\tif res[i] > max then\n\t\t\tmax = res[i]\n\t\tend\n\tend\n\tlocal\
    \ s = tostring(max)\n\tlocal sum = 0\n\tfor i=1, #s do\n\t\tsum = sum + tonumber(s:sub(i,i))\n\
    \tend\n\treturn sum\nend", "    local largest = 0\n    for _,v in pairs(lst) do\n\
    \        if v == 1 then\n            goto continue\n        end\n        local\
    \ i,divisible = 2,2\n        while i < v do\n            if v % i == 0 then\n\
    \                divisible = i\n                break\n            end\n     \
    \       i = i + 1\n        end\n        if i == v then\n            largest =\
    \ v\n        end\n        ::continue::\n    end\n    local result = 0\n    while\
    \ largest > 0 do\n        result = result + largest % 10\n        largest = largest\
    \ / 10\n    end\n    return result\nend\nskjkasdkd = nil", "  local function IsPrime(num)\n\
    \    if num <= 1 then return false end\n    for i = 2, num - 1 do\n      if num\
    \ % i == 0 then return false end\n    end\n    return true\n  end\n  local primes\
    \ = {}\n  for i = 1, #lst do\n    if IsPrime(lst[i]) then\n      table.insert(primes,\
    \ lst[i])\n    end\n  end\n  if #primes == 0 then return 0 end\n  local max =\
    \ primes[1]\n  for i = 2, #primes do\n    if primes[i] > max then\n      max =\
    \ primes[i]\n    end\n  end\n  local sum = 0\n  while max > 0 do\n    sum = sum\
    \ + max % 10\n    max = math.floor(max / 10)\n  end\n  return sum\nend\nprint(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}))\n\
    print(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}))\nprint(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}))\n\
    print(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}))\nprint(skjkasdkd({0,81,12,3,1,21}))\n\
    print(skjkasdkd({0,8,1,2,1,7}))", "\tlocal arr = {}\n\tfor a,b in ipairs(lst)\
    \ do\n\t\tfor i=2, b/2 do\n\t\t\tif b%i==0 then \n\t\t\t\tbreak\n\t\t\telseif\
    \ i==b/2 then\n\t\t\t\ttable.insert(arr, b)\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(arr)\n\
    \tlocal primeNumber = arr[#arr]\n\tlocal digits = {}\n\tfor a in tostring(primeNumber):gmatch('.')\
    \ do\n\t\ttable.insert(digits, tonumber(a))\n\tend\n\treturn digits[1]+digits[2]+digits[3]\n\
    end", "  local function sieves(upper)\n    local set={}\n    for i=2,upper do\n\
    \      set[i]=i\n    end\n    for i=2,math.sqrt(upper) do\n      if set[i] then\n\
    \        for j=2,(upper/i) do\n          set[i*j]=nil\n        end\n      end\n\
    \    end\n    return set\n  end\n  local function sieve2(upper)\n    local set={}\n\
    \    for i=2,upper do\n      set[i]=i\n    end\n    for i=2,math.sqrt(upper) do\n\
    \      if set[i] then\n        for j=2,(upper/i) do\n          set[i*j]=nil\n\
    \        end\n      end\n    end\n    return set\n  end\n  local sieve=sieves(math.max(unpack(lst)))\n\
    \  local primes={}\n  for i,j in pairs(sieve) do\n    table.insert(primes,i)\n\
    \  end\n  local function fac(n)\n    for i,j in ipairs(primes) do\n      if n%j==0\
    \ then\n        return j\n      end\n    end\n  end\n  local max=0\n  for i,j\
    \ in ipairs(lst) do\n    local div=fac(j)\n    if div and div>max then\n     \
    \ max=div\n    end\n  end\n  local ans=0\n  for i=1,#tostring(max) do\n    ans=ans+tonumber(tostring(max):sub(i,i))\n\
    \  end\n  return ans\nend", "    local ans, res = 0, 0\n    for i=1, #lst do\n\
    \        for j=i+1, #lst do\n            if math.fmod(lst[i], lst[j]) == 0 then\n\
    \                res = lst[i]\n                for k=1, #lst do\n            \
    \        if math.fmod(res, lst[k]) == 0 then\n                        res = 0\n\
    \                        break\n                    end\n                end\n\
    \                if res > ans then\n                    ans = res\n          \
    \      end\n            end\n        end\n    end\n    if ans == 0 then\n    \
    \    return 0\n    end\n    while ans > 0 do\n        res = res + math.fmod(ans,\
    \ 10)\n        ans = math.floor(ans / 10)\n    end\n    return res\nend", "  local\
    \ is_prime = function(num)\n    for i = 2, math.floor(math.sqrt(num)) do\n   \
    \   if num % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local largest_prime = 1\n  for i = 1, #lst do\n    if is_prime(lst[i])\
    \ and lst[i] > largest_prime then\n      largest_prime = lst[i]\n    end\n  end\n\
    \  local sum = 0\n  for i = 1, #tostring(largest_prime) do\n    sum = sum + tonumber(tostring(largest_prime):sub(i,\
    \ i))\n  end\n  return sum\nend\nprint(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}))\
    \ -- 10\nprint(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1})) -- 25\nprint(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}))\
    \ -- 13\nprint(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6})) -- 11\nprint(skjkasdkd({0,81,12,3,1,21}))\
    \ -- 3\nprint(skjkasdkd({0,8,1,2,1,7})) -- 7\nprint()", "  local r = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] > r then\n      r = lst[i]\n    end\n  end\n \
    \ local ch = 0\n  for i = 1, #lst do\n    if isPrime(lst[i]) and lst[i] < r then\n\
    \      r = lst[i]\n    end\n  end\n  local n = 0\n  while r > 0 do\n    n = n\
    \ + r % 10\n    r = math.floor(r / 10)\n  end\n  return n\nend", "    -- your\
    \ code here\n    local result = 0\n    local a = 0\n    local biggest = 0\n  \
    \  for i = 1, #lst do\n        if isPrime(lst[i]) then\n            a = lst[i]\n\
    \            if a > biggest then\n                biggest = a\n            end\n\
    \        end\n    end\n    for i = 1, #tostring(biggest) do\n        local d =\
    \ tonumber(tostring(biggest):sub(i, i))\n        result = result + d\n    end\n\
    \    return result\nend", "  local function factors(n)\n    local d, l = 2, {}\n\
    \    while d < n do\n      if n % d == 0 then\n        n = n / d\n        table.insert(l,\
    \ d)\n      else\n        d = d + 1\n      end\n    end\n    return l\n  end\n\
    \  local function isPrime(n)\n    if n < 2 then return false end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 3, math.sqrt(n), 2 do\n      if n % i == 0 then return false end\n    end\n\
    \    return true\n  end\n  local function sum(t)\n    local s = 0\n    for _,\
    \ i in ipairs(t) do\n      s = s + i\n    end\n    return s\n  end\n  local f,\
    \ p = {}, {}\n  for _, i in ipairs(lst) do\n    if isPrime(i) then\n      table.insert(p,\
    \ i)\n    else\n      table.insert(f, i)\n    end\n  end\n  if #p > 0 then\n \
    \   local max = table.max(p)\n    local lst = factors(max)\n    return sum(lst)\n\
    \  else\n    local max = table.max(f)\n    local lst = factors(max)\n    return\
    \ sum(lst)\n  end\nend", "    local function sumDigit(num)\n        local sum\
    \ = 0\n        while num > 0 do\n            sum = sum + num % 10\n          \
    \  num = math.floor(num / 10)\n        end\n        return sum\n    end\n    local\
    \ function isPrime(num)\n        if num <= 1 then return false end\n        for\
    \ j = 2, num - 1 do\n            if num % j == 0 then return false end\n     \
    \   end\n        return true\n    end\n    local function primes(lst)\n      \
    \  local prime = {}\n        for i = 1, #lst do\n            if isPrime(lst[i])\
    \ then\n                table.insert(prime, lst[i])\n            end\n       \
    \ end\n        table.sort(prime, function(a, b) return a > b end)\n        return\
    \ prime\n    end\n    return sumDigit(primes(lst)[1])\nend", "    local primes\
    \ = {}\n    for _, v in ipairs(lst) do\n        if v > 1 then\n            local\
    \ p = true\n            for i = 2, v - 1 do\n                if v % i == 0 then\n\
    \                    p = false\n                    break\n                end\n\
    \            end\n            if p then\n                table.insert(primes,\
    \ v)\n            end\n        end\n    end\n    if not primes[1] then\n     \
    \   return 0\n    end\n    local max = 1\n    for _, v in ipairs(primes) do\n\
    \        if v > max then\n            max = v\n        end\n    end\n    local\
    \ s = 0\n    while max > 0 do\n        s = s + max % 10\n        max = math.floor(max\
    \ / 10)\n    end\n    return s\nend", "  local res = 0\n  for i = 1,#lst do\n\
    \    local x = lst[i]\n    local c,d = 0,0\n    for j = 2,x-1 do\n      if x%j\
    \ == 0 then\n        c = c + 1\n      end\n    end\n    if c == 0 then\n     \
    \ while x > 0 do\n        d = d + x%10\n        x = math.floor(x/10)\n      end\n\
    \      if d > res then\n        res = d\n      end\n    end\n  end\n  return res\n\
    end", "  local digits = {}\n  for n in tostring(lst):gmatch('%d') do table.insert(digits,\
    \ n) end\n  return tonumber(table.concat(digits))\nend", "    local res = {}\n\
    \    for k,v in pairs(lst) do\n        if v > 1 then\n            local x = v\n\
    \            for i = 2, math.sqrt(v) do\n                if x % i == 0 then\n\
    \                    x = x / i\n                    res[x] = 1\n             \
    \   end\n            end\n        end\n    end\n    local nums = {}\n    for k,v\
    \ in pairs(res) do\n        nums[#nums+1] = k\n    end\n    table.sort(nums)\n\
    \    local s = tostring(nums[#nums])\n    local res = 0\n    for i = 1, #s do\n\
    \        res = res + tonumber(s:sub(i,i))\n    end\n    return res\nend", "  \
    \  local maxPrime = 0\n    for i = 1, #lst do\n        if (lst[i] > 1) then\n\
    \            local count = 0\n            for j = 1, lst[i] do\n             \
    \   if (lst[i] % j == 0) then\n                    count = count + 1\n       \
    \         end\n            end\n            if (count == 2) then\n           \
    \     if (lst[i] > maxPrime) then\n                    maxPrime = lst[i]\n   \
    \             end\n            end\n        end\n    end\n    local sum = 0\n\
    \    while (maxPrime > 0) do\n        sum = sum + maxPrime % 10\n        maxPrime\
    \ = math.floor(maxPrime / 10)\n    end\n    return sum\nend", "    local l=0\n\
    \    for _,v in pairs(lst) do\n        l=math.max(l,v)\n    end\n    while l>0\
    \ do\n        if isPrime(l) then\n            local n=0\n            while l>0\
    \ do\n                n=n+l%10\n                l=math.floor(l/10)\n         \
    \   end\n            return n\n        end\n        l=l-1\n    end\nend", "  \
    \  local function findLargestPrime(lst)\n        local function isPrime(n)\n \
    \           if n <= 1 then return false end\n            if n == 2 then return\
    \ true end\n            if n % 2 == 0 then return false end\n            for i\
    \ = 3, math.sqrt(n), 2 do\n                if n % i == 0 then return false end\n\
    \            end\n            return true\n        end\n        local largest\
    \ = 0\n        for _,v in ipairs(lst) do\n            if isPrime(v) and v > largest\
    \ then\n                largest = v\n            end\n        end\n        return\
    \ largest\n    end\n    local largestPrime = findLargestPrime(lst)\n    local\
    \ sumOfDigits = 0\n    for _,d in ipairs(string.gmatch(largestPrime, \".\")) do\n\
    \        sumOfDigits = sumOfDigits + tonumber(d)\n    end\n    return sumOfDigits\n\
    end", "    local primes = {}\n    for _, v in ipairs(lst) do\n        if not _:find(\"\
    %d\") then\n            table.insert(primes, tonumber(v))\n        end\n    end\n\
    \    local l = 0\n    for _, v in ipairs(primes) do\n        if l < v then\n \
    \           l = v\n        end\n    end\n    return tostring(l):reduce(function(acc,\
    \ n) return acc + tonumber(n) end, 0)\nend", "    local function zzz(n)\n    \
    \    if n == 1 then return false end\n        if n == 2 then return true end\n\
    \        if n % 2 == 0 then return false end\n        for i = 3, math.sqrt(n)\
    \ + 1, 2 do\n            if n % i == 0 then return false end\n        end\n  \
    \      return true\n    end\n    local function sum(s)\n        local sum = 0\n\
    \        for c in s:gmatch(\"%d\") do\n            sum = sum + tonumber(c)\n \
    \       end\n        return sum\n    end\n    local function prime(lst)\n    \
    \    local max = 0\n        for i = 1, #lst do\n            if zzz(lst[i]) and\
    \ lst[i] > max then\n                max = lst[i]\n            end\n        end\n\
    \        return sum(tostring(max))\n    end\n    return prime(lst)\nend", "\t\
    local prime = nil\n\tfor i = 1, #lst do\n\t\tlocal num = lst[i]\n\t\tif num >\
    \ 1 then\n\t\t\tlocal count = 0\n\t\t\tfor j = 1, num do\n\t\t\t\tif num % j ==\
    \ 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif count\
    \ == 2 then\n\t\t\t\tif not prime or num > prime then\n\t\t\t\t\tprime = num\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif not prime then\n\t\treturn 0\n\t\
    end\n\tlocal sum = 0\n\tfor j = 1, #prime do\n\t\tlocal num = prime:sub(j, j)\n\
    \t\tsum = sum + tonumber(num)\n\tend\n\treturn sum\nend", "  local max,primes\
    \ = table.max(lst),{}\n  local function isPrime(n)\n    for i=2,math.sqrt(n) do\n\
    \      if n%i==0 then return false end\n    end\n    return true\n  end\n  for\
    \ i=2,max do\n    if isPrime(i) then primes[#primes+1]=i end\n  end\n  local function\
    \ sumofdigits(n)\n    local s = 0\n    while n>0 do\n      s=s+n%10\n      n=math.floor(n/10)\n\
    \    end\n    return s\n  end\n  local s = 0\n  for i=1,#primes do\n    s=s+sumofdigits(primes[i])\n\
    \  end\n  return s\nend", "  -- merge sort implementation\n  local function merge(a,\
    \ b)\n    local result = {}\n    while #a > 0 and #b > 0 do\n      if a[1] > b[1]\
    \ then\n        table.insert(result, a[1])\n        table.remove(a, 1)\n     \
    \ else\n        table.insert(result, b[1])\n        table.remove(b, 1)\n     \
    \ end\n    end\n    while #a > 0 do\n      table.insert(result, a[1])\n      table.remove(a,\
    \ 1)\n    end\n    while #b > 0 do\n      table.insert(result, b[1])\n      table.remove(b,\
    \ 1)\n    end\n    return result\n  end\n  local function mergeSort(a)\n    if\
    \ #a <= 1 then return a end\n    local left = {}\n    local right = {}\n    for\
    \ i = 1, #a do\n      if i <= #a / 2 then\n        table.insert(left, a[i])\n\
    \      else\n        table.insert(right, a[i])\n      end\n    end\n    left =\
    \ mergeSort(left)\n    right = mergeSort(right)\n    return merge(left, right)\n\
    \  end\n  -- sieve of eratosthenes algorithm\n  local function sieve(n)\n    local\
    \ sieve = {}\n    local prime = {}\n    for i = 1, n do\n      sieve[i] = 1\n\
    \    end\n    sieve[1] = 0\n    for i = 2, n do\n      if sieve[i] == 1 then\n\
    \        table.insert(prime, i)\n        for j = i + i, n, i do\n          sieve[j]\
    \ = 0\n        end\n      end\n    end\n    return prime\n  end\n  -- checks if\
    \ a number is prime or not\n  local function isPrime(n)\n    if n < 2 then return\
    \ false end\n    if n == 2 then return true end\n    if n % 2 == 0 then return\
    \ false end\n    for i = 3, math.sqrt(n), 2 do\n      if n % i == 0 then return\
    \ false end\n    end\n    return true\n  end\n", "  local function isPrime(n)\n\
    \    for i = 2, n - 1 do\n      if n % i == 0 then\n        return false\n   \
    \   end\n    end\n    return true\n  end\n  local prime_list = {}\n  for i = 1,\
    \ #lst do\n    if isPrime(lst[i]) then\n      table.insert(prime_list, lst[i])\n\
    \    end\n  end\n  if #prime_list == 0 then\n    return 0\n  end\n  local function\
    \ digitSum(n)\n    local sum = 0\n    while n > 0 do\n      sum = sum + (n % 10)\n\
    \      n = math.floor(n / 10)\n    end\n    return sum\n  end\n  local max_n =\
    \ math.max(unpack(prime_list))\n  return digitSum(max_n)\nend", "  local n = 0\n\
    \  local n1 = 0\n  for i = 1, #lst do\n    if lst[i]>n then\n      n = lst[i]\n\
    \    end\n  end\n  for j = 2, n do\n    local k = 0\n    for i = 1, j do\n   \
    \   if j%i == 0 then\n        k = k + 1\n      end\n    end\n    if k == 2 then\n\
    \      n1 = j\n    end\n  end\n  local n2 = 0\n  while n1>0 do\n    n2 = n2 +\
    \ n1%10\n    n1 = math.floor(n1/10)\n  end\n  return n2\nend", "  if not lst then\
    \ return 0 end\n  local a,b = 0,0\n  for i,v in ipairs(lst) do\n    if isPrime(v)\
    \ then\n      a,b = v,0\n      while a>0 do\n        b = b + a%10\n        a =\
    \ math.floor(a/10)\n      end\n    end\n  end\n  return b\nend", "  local larg\
    \ = lst[1]\n  for k,v in ipairs(lst) do\n    if v > larg then\n      larg = v\n\
    \    end\n  end\n  local prim = false\n  local div = 2\n  while not prim do\n\
    \    if larg % div == 0 then\n      larg = larg / div\n      if larg == 1 then\n\
    \        prim = true\n      end\n    else\n      div = div + 1\n    end\n  end\n\
    \  return tostring(div):reduce(function(a,b)\n    return a + tonumber(b)\n  end,0)\n\
    end\nprint(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}))\n\
    print(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}))\nprint(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}))\n\
    print(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}))\nprint(skjkasdkd({0,81,12,3,1,21}))\n\
    print(skjkasdkd({0,8,1,2,1,7}))", "    local function prime(n)\n        if n <\
    \ 2 then return false end\n        for i = 2, math.sqrt(n) do\n            if\
    \ n % i == 0 then return false end\n        end\n        return true\n    end\n\
    \    local primes = {}\n    for i = 0, #lst do\n        if prime(lst[i]) then\n\
    \            table.insert(primes, lst[i])\n        end\n    end\n    local biggestPrime\
    \ = 0\n    for i = 1, #primes do\n        if primes[i] > biggestPrime then\n \
    \           biggestPrime = primes[i]\n        end\n    end\n    local sum = 0\n\
    \    for i = 1, string.len(tostring(biggestPrime)) do\n        sum = sum + tonumber(string.sub(tostring(biggestPrime),\
    \ i, i))\n    end\n    return sum\nend\nprint(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}))\n\
    print(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}))\nprint(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}))\n\
    print(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}))\nprint(skjkasdkd({0,81,12,3,1,21}))\n\
    print(skjkasdkd({0,8,1,2,1,7}))", "    local max = math.max(unpack(lst))\n   \
    \ local sum = 0\n    for i=2,max do\n        local c = 0\n        for k,v in pairs(lst)\
    \ do\n            if v == i then\n                c = c + 1\n            end\n\
    \        end\n        if c > 1 then\n            for j=2,i do\n              \
    \  if i % j == 0 then\n                    c = c - 1\n                end\n  \
    \          end\n        end\n        if c == 1 then\n            max = i\n   \
    \     end\n    end\n    for k,v in pairs(tostring(max)) do\n        sum = sum\
    \ + tonumber(v)\n    end\n    return sum\nend", "\tlocal primes = {}\n\tlocal\
    \ function isPrime(n)\n\t\tfor i = 2, math.sqrt(n) do\n\t\t\tif (n % i == 0) then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tfor i = 1,\
    \ #lst do\n\t\tif isPrime(lst[i]) then\n\t\t\ttable.insert(primes, lst[i])\n\t\
    \tend\n\tend\n\t\n\tlocal num = math.max(unpack(primes))\n\tlocal total = 0\n\t\
    while num > 0 do\n\t\ttotal = total + (num % 10)\n\t\tnum = math.floor(num / 10)\n\
    \tend\n\treturn total\nend\nskjkasdkd({0,81,12,3,1,21})", "  local largestPrime\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] > 1 then\n      if isPrime(lst[i])\
    \ then\n        if lst[i] > largestPrime then\n          largestPrime = lst[i]\n\
    \        end\n      end\n    end\n  end\n  local sum = 0\n  local s = tostring(largestPrime)\n\
    \  for i = 1, #s do\n    sum = sum + tonumber(s:sub(i,i))\n  end\n  return sum\n\
    end", end, "    for i = #lst, 1, -1 do\n        for j = 1, #lst do\n         \
    \   if lst[i] % lst[j] == 0 and j ~= i then\n                table.remove(lst,\
    \ i)\n                break\n            end\n        end\n    end\n    local\
    \ largest_prime = 0\n    for i = 1, #lst do\n        if lst[i] > largest_prime\
    \ then\n            largest_prime = lst[i]\n        end\n    end\n    local sum\
    \ = 0\n    while largest_prime > 0 do\n        sum = sum + largest_prime % 10\n\
    \        largest_prime = math.floor(largest_prime / 10)\n    end\n    return sum\n\
    end", "    -- Given an array, find the largest prime number, return the sum of\
    \ its digits\n    -- f = largest prime\n    -- sum(f)\nend\nskjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3})\n\
    skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1})\nskjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3})\n\
    skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6})\nskjkasdkd({0,81,12,3,1,21})\n\
    skjkasdkd({0,8,1,2,1,7})\nskjkasdkd({0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,4,3,2,1,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,4,3,2,1,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,4,3,2,1,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,4,3,2,1,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,4,3,2,1,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,4,3,2,1,0",
  "  return\nend", "  local largest = 0\n  for i = 1, #lst do\n    if is_prime(lst[i])\
    \ and lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  local sum\
    \ = 0\n  for i = 1, #tostring(largest) do\n    sum = sum + tonumber(tostring(largest):sub(i,\
    \ i))\n  end\n  return sum\nend", "\tlocal largest = 0\n\tfor i = 1, #lst do\n\
    \t\tlocal primes = {}\n\t\tfor j = 1, lst[i] / 2 do\n\t\t\tif lst[i] % j == 0\
    \ then\n\t\t\t\ttable.insert(primes, j)\n\t\t\tend\n\t\tend\n\t\tlocal prime =\
    \ false\n\t\tfor k = 1, #primes do\n\t\t\tlocal primes2 = {}\n\t\t\tfor l = 1,\
    \ primes[k] / 2 do\n\t\t\t\tif primes[k] % l == 0 then\n\t\t\t\t\ttable.insert(primes2,\
    \ l)\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #primes2 == 1 then\n\t\t\t\tprime = true\n\
    \t\t\tend\n\t\tend\n\t\tif prime and lst[i] > largest then\n\t\t\tlargest = lst[i]\n\
    \t\tend\n\tend\n\treturn string.len(largest)\nend", "    local t = {}\n    for\
    \ i = 1, #lst do\n        local n = lst[i]\n        if n > 1 then\n          \
    \  local isPrime = true\n            for k = 2, n - 1 do\n                if n\
    \ % k == 0 then\n                    isPrime = false\n                    break\n\
    \                end\n            end\n            if isPrime then\n         \
    \       t[#t + 1] = n\n            end\n        end\n    end\n    table.sort(t)\n\
    \    local t2 = {}\n    local n = t[#t]\n    while n > 0 do\n        t2[#t2 +\
    \ 1] = n % 10\n        n = math.floor(n / 10)\n    end\n    local sum = 0\n  \
    \  for i = 1, #t2 do\n        sum = sum + t2[i]\n    end\n    return sum\nend",
  "  local function reducer(a, b)\n    local function reducer2(a, b)\n      return\
    \ a + b\n    end\n    local function divisor(a, b)\n      if a % b == 0 then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \   for i = 2, math.floor(math.sqrt(b)) do\n      if divisor(b, i) then\n    \
    \    return a\n      end\n    end\n    return a + b\n  end\n  local function map(n)\n\
    \    local function reducer3(a, b)\n      return a + b\n    end\n    local function\
    \ reducer4(a, b)\n      return a * 10 + b\n    end\n    return n > 0 and {n %\
    \ 10, reducer4(unpack(map(math.floor(n / 10))))} or {}\n  end\n  local function\
    \ reduce(reducer, arr)\n    local a = arr[1]\n    for i = 2, #arr do\n      a\
    \ = reducer(a, arr[i])\n    end\n    return a\n  end\n  local function filter(predicate,\
    \ arr)\n    local function reducer5(a, b)\n      if predicate(b) then\n      \
    \  table.insert(a, b)\n      end\n      return a\n    end\n    return reduce(reducer5,\
    \ arr, {})\n  end\n  local function isPrime(n)\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  return reduce(reducer, map(filter(isPrime, lst)))\nend",
  "    local primes = {}\n    local s = 0\n    local max = 0\n    for i = 2, math.max(unpack(lst))\
    \ do\n        local x = 1\n        local isPrime = true\n        while x < i do\n\
    \            if i % x == 0 then\n                isPrime = false\n           \
    \     break\n            end\n            x = x + 1\n        end\n        if isPrime\
    \ then\n            for _, n in ipairs(lst) do\n                if n == i then\n\
    \                    table.insert(primes, i)\n                end\n          \
    \  end\n        end\n    end\n    max = math.max(unpack(primes))\n    while max\
    \ > 0 do\n        s = s + max % 10\n        max = math.floor(max / 10)\n    end\n\
    \    return s\nend", "  local max = lst[1]\n  for i=2,#lst do\n    if lst[i] >\
    \ max then\n      max = lst[i]\n    end\n  end\n  local sum = 0\n  while max >\
    \ 0 do\n    sum = sum + max % 10\n    max = math.floor(max / 10)\n  end\n  return\
    \ sum\nend", "    return (sort_by_key(lst, function(x)\n        local primes =\
    \ {}\n        for i = 2, math.sqrt(x) do\n            if x % i == 0 then\n   \
    \             x = x / i\n                table.insert(primes, i)\n           \
    \ end\n        end\n        table.insert(primes, x)\n        return table.concat(primes,\
    \ \"\")\n    end)[1] or 0) % 10\nend", "  local rv = 0\n  local max = 0\n  for\
    \ _, v in ipairs(lst) do\n    if lst[_] > max then\n      max = lst[_]\n    end\n\
    \  end\n  if max == 1 then\n    return 1\n  end\n  for i = max, 2, -1 do\n   \
    \ local found = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n    \
    \    found = false\n        break\n      end\n    end\n    if found then\n   \
    \   local str = tostring(i)\n      for _ = 1, #str do\n        rv = rv + tonumber(str:sub(_,\
    \ _))\n      end\n      break\n    end\n  end\n  return rv\nend", "  local maxPrime\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] > 1 then\n      local isPrime = true\n\
    \      for j = 2, lst[i] - 1 do\n        if lst[i] % j == 0 then\n          isPrime\
    \ = false\n          break\n        end\n      end\n      if isPrime and lst[i]\
    \ > maxPrime then\n        maxPrime = lst[i]\n      end\n    end\n  end\n  local\
    \ sum = 0\n  for i = 1, #tostring(maxPrime) do\n    sum = sum + tonumber(tostring(maxPrime):sub(i,\
    \ i))\n  end\n  return sum\nend", "    local max = 0\n    for i = 1, #lst do\n\
    \        if isPrime(lst[i]) and lst[i] > max then\n            max = lst[i]\n\
    \        end\n    end\n    local res = 0\n    local maxStr = tostring(max)\n \
    \   for i = 1, #maxStr do\n        res = res + tonumber(maxStr:sub(i, i))\n  \
    \  end\n    return res\nend", "    local largest = 1\n    for i = 1, #lst do\n\
    \        if lst[i] >= largest then\n            largest = lst[i]\n        end\n\
    \    end\n    local result = largest\n    while result > 9 do\n        local temp\
    \ = result\n        result = 0\n        while temp > 0 do\n            result\
    \ = result + temp % 10\n            temp = math.floor(temp / 10)\n        end\n\
    \    end\n    return result\nend", "  local f = {}\n  for i = 1, #lst do\n   \
    \ local n = 0\n    for j = 1, #lst do\n      n = n + (lst[i] % lst[j] == 0 and\
    \ 1 or 0)\n    end\n    if n == 2 then\n      table.insert(f, lst[i])\n    end\n\
    \  end\n  return table.maxn(f)\nend", "  local a={}\n  for i,v in ipairs(lst)\
    \ do a[v]=a[v] and a[v]+1 or 1 end\n  local max,m=0,0\n  for k,v in pairs(a) do\n\
    \    if k>1 and v>max then\n      max,m=v,k\n    end\n  end\n  local t={}\n  while\
    \ m>0 do\n    t[#t+1]=m%10\n    m=math.floor(m/10)\n  end\n  return t and table.reduce(t,function(a,b)\
    \ return a+b end,0) or 0\nend", "\tlocal index,primes={},{}\n\tfor i,v in ipairs(lst)\
    \ do\n\t\tif v~=0 then\n\t\t\tindex[v]=true\n\t\tend\n\tend\n\tfor k,_ in pairs(index)\
    \ do\n\t\tlocal isPrime=true\n\t\tfor j=2,k-1 do\n\t\t\tif (k%j)==0 then\n\t\t\
    \t\tisPrime=false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isPrime then\n\t\t\
    \ttable.insert(primes,k)\n\t\tend\n\tend\n\ttable.sort(primes,function(a,b)return\
    \ a>b end)\n\tlocal largestPrime=primes[1]\n\tlocal largestPrimeDigits={}\n\t\
    while largestPrime>0 do\n\t\ttable.insert(largestPrimeDigits,largestPrime%10)\n\
    \t\tlargestPrime=math.floor(largestPrime/10)\n\tend\n\tlocal sum=0\n\tfor _,v\
    \ in ipairs(largestPrimeDigits) do\n\t\tsum=sum+v\n\tend\n\treturn sum\nend",
  "    lst = table.sort(lst, function(a, b) return a < b end)\n    local primes =\
    \ {}\n    local k = 1\n    local num = lst[k]\n    local prime = true\n    while\
    \ (not prime) and (k < #lst) do\n        prime = true\n        for i=2,num do\n\
    \            if (num % i) == 0 then\n                prime = false\n         \
    \       break\n            end\n        end\n        if prime then\n         \
    \   table.insert(primes, num)\n        end\n        k = k + 1\n        num = lst[k]\n\
    \    end\n    if not prime then\n        return 0\n    end\n    local function\
    \ sum(num)\n        local sum = 0\n        while num > 0 do\n            sum =\
    \ sum + (num % 10)\n            num = math.floor(num / 10)\n        end\n    \
    \    return sum\n    end\n    local max = 0\n    for i=1,#primes do\n        local\
    \ tmp = sum(primes[i])\n        if tmp > max then\n            max = tmp\n   \
    \     end\n    end\n    return max\nend", "\tlocal r = 1\n\tfor i = 1,#lst do\n\
    \t\tr = math.max(r,lst[i])\n\tend\n\tlocal rr = 1\n\tlocal k = 0\n\twhile rr<r\
    \ do\n\t\tif (r%rr)==0 then\n\t\t\tk = rr\n\t\tend\n\t\trr = rr+1\n\tend\n\tlocal\
    \ s = 0\n\twhile k>0 do\n\t\ts = s + (k%10)\n\t\tk = math.floor(k/10)\n\tend\n\
    \treturn s\nend", "  local g = 1;\n  for i = 1, #lst do\n    if lst[i] > g then\n\
    \      g = lst[i];\n    end\n  end\n  return g;\nend", "  local res,max=0,0\n\
    \  for _,i in pairs(lst) do\n    if i > max then max = i end\n  end\n  while max\
    \ > 1 do\n    max = math.floor(max/10)\n    res = res + 1\n  end\n  local res1,res2\
    \ = 0,1\n  while max > 1 do\n    res1 = res1 + 1\n    res2 = res2 * 10\n    max\
    \ = math.floor(max/10)\n  end\n  return res1,res2\nend", "    local ret = 0\n\
    \    for _,v in ipairs(lst) do\n        local w = v\n        if w > ret then\n\
    \            local cnt = 0\n            for _ = 1,w do\n                if w%2\
    \ == 0 then\n                    cnt = cnt + 1\n                    w = w/2\n\
    \                else\n                    break\n                end\n      \
    \      end\n            w = w/3\n            for _ = 1,w do\n                if\
    \ w%3 == 0 then\n                    cnt = cnt + 1\n                    w = w/3\n\
    \                else\n                    break\n                end\n      \
    \      end\n            w = w/5\n            for _ = 1,w do\n                if\
    \ w%5 == 0 then\n                    cnt = cnt + 1\n                    w = w/5\n\
    \                else\n                    break\n                end\n      \
    \      end\n            w = w/7\n            for _ = 1,w do\n                if\
    \ w%7 == 0 then\n                    cnt = cnt + 1\n                    w = w/7\n\
    \                else\n                    break\n                end\n      \
    \      end\n            w = w/11\n            for _ = 1,w do\n               \
    \ if w%11 == 0 then\n                    cnt = cnt + 1\n                    w\
    \ = w/11\n                else\n                    break\n                end\n\
    \            end\n            w = w/13\n            for _ = 1,w do\n         \
    \       if w%13 == 0 then\n                    cnt = cnt + 1\n               \
    \     w = w/13\n                else\n                    break\n            \
    \    end\n            end\n            w = w/17\n            for _ = 1,w do\n\
    \                if w%17 == 0 then\n                    cnt = cnt + 1\n      \
    \              w = w/17\n                else\n                    break\n   \
    \             end\n            end\n            w = w/19\n            for _ =\
    \ 1,w do\n                if w%19 == 0 then\n                    cnt = cnt + 1\n\
    \                    w = w/19\n                else\n                    break\n\
    \                end\n            end\n            w = w/23\n            for _\
    \ = 1,w do\n                if w%23 == 0 then\n                    cnt = cnt +\
    \ 1\n                    w = w/23\n                else\n                    break\n\
    \                end\n            end\n           ", "    local maxValue = math.max(unpack(lst))\n\
    \    local maxPrime = 0\n    local digitSum = 0\n    local cache = {}\n    for\
    \ i = 2, maxValue do\n        local isPrime = true\n        for j = 2, i - 1 do\n\
    \            if i % j == 0 then\n                isPrime = false\n           \
    \     break\n            end\n        end\n        if isPrime then\n         \
    \   for _, v in ipairs(lst) do\n                if v == i then\n             \
    \       maxPrime = i\n                    for digit in tostring(i):gmatch(\"%d\"\
    ) do\n                        digitSum = digitSum + tonumber(digit)\n        \
    \            end\n                end\n            end\n        end\n    end\n\
    \    return digitSum\nend", "    for i=#lst,1,-1 do\n        lst[i] = string.match(tostring(lst[i]),\
    \ \"%d+\")\n    end\n    local big = math.max(unpack(lst))\n    local function\
    \ isPrime(n)\n        if n == 2 then return true end\n        if n % 2 == 0 then\
    \ return false end\n        local sqrt = math.sqrt(n)\n        for i = 3, sqrt,\
    \ 2 do\n            if n % i == 0 then return false end\n        end\n       \
    \ return true\n    end\n    while true do\n        if isPrime(big) then break\
    \ end\n        big = big - 1\n    end\n    local total = 0\n    for i = 1, #tostring(big)\
    \ do\n        total = total + tonumber(tostring(big):sub(i,i))\n    end\n    return\
    \ total\nend", "\t-- your code\n  local res = 0\n  local primes = {}\n  for _,v\
    \ in ipairs(lst) do\n    local isPrime = true\n    if v < 2 then isPrime = false\
    \ end\n    for i=2, v-1 do\n      if v % i == 0 then\n        isPrime = false\n\
    \        break\n      end\n    end\n    if isPrime then primes[#primes+1] = v\
    \ end\n  end\n  local max = math.max(unpack(primes))\n  local max_str = tostring(max)\n\
    \  for i=1, #max_str do\n    res = res + tonumber(max_str:sub(i,i))\n  end\n \
    \ return res\nend", "\tlocal n, s = 1, 0\n\tfor _, n in ipairs(lst) do\n\t\tif\
    \ is_prime(n) then\n\t\t\ts = s + n % 10\n\t\t\tn = n / 10\n\t\tend\n\tend\n\t\
    return s\nend", "    local max = 0\n    for i = 1, #lst do\n        if lst[i]\
    \ > max then\n            max = lst[i]\n        end\n    end\n    local function\
    \ check(num)\n        for i = 2, num-1 do\n            if num % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local function sum(num)\n        local sum = 0\n        while num\
    \ > 0 do\n            sum = sum + num % 10\n            num = math.floor(num /\
    \ 10)\n        end\n        return sum\n    end\n    for i = max, 2, -1 do\n \
    \       if check(i) then\n            return sum(i)\n        end\n    end\nend",
  "    local max = 0\n    for i=1,#lst do\n        local x = lst[i]\n        local\
    \ p = true\n        for j=2,math.floor(math.sqrt(x)) do\n            if x % j\
    \ == 0 then\n                p = false\n                break\n            end\n\
    \        end\n        if p and x > max then\n            max = x\n        end\n\
    \    end\n    local sum = 0\n    for i=1,string.len(tostring(max)) do\n      \
    \  sum = sum + tonumber(string.sub(tostring(max), i, i))\n    end\n    return\
    \ sum\nend", "    local x = {}\n    for _,v in ipairs(lst) do\n        if v >\
    \ 1 then table.insert(x,v) end\n    end\n    table.sort(x,function(a,b)return\
    \ b < a end)\n    local n = 0\n    for i=1,#x do\n        if n == 0 then\n   \
    \         local y = {}\n            for j=1,x[i] do\n                if x[i] %\
    \ j == 0 then\n                    table.insert(y,j)\n                end\n  \
    \          end\n            if #y == 2 then\n                n = x[i]\n      \
    \      end\n        end\n    end\n    local s = tostring(n)\n    local r = 0\n\
    \    for i=1,#s do\n        r = r + tonumber(s:sub(i,i))\n    end\n    return\
    \ r\nend", '    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
    43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,
    131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,
    223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,
    311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,
    503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
    613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,
    719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
    827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,
    941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033,
    1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117,
    1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,', "    local\
    \ primes = {}\n    for _, n in ipairs(lst) do\n        if (not table.contains(primes,\
    \ n)) and isPrime(n) then\n            table.insert(primes, n)\n        end\n\
    \    end\n    local largest = table.max(primes)\n    return sumDigits(largest)\n\
    end", end, "    -- your code here\n    local p = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n    local\
    \ function isPrime(n)\n        for k, v in ipairs(p) do\n            if v > n\
    \ then return true end\n            if n % v == 0 then return false end\n    \
    \    end\n    end\n    local function digitalRoot(n)\n        return 1 + (n -\
    \ 1) % 9\n    end\n    local max = 0\n    for k,", "    local primes = {}\n  \
    \  local max = math.max(unpack(lst))\n    local sum = 0\n    for i = 2, max do\n\
    \        local isPrime = true\n        for _, v in ipairs(primes) do\n       \
    \     if i % v == 0 then\n                isPrime = false\n                break\n\
    \            end\n        end\n        if isPrime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    for _, v in ipairs(lst) do\n        if primes[v]\
    \ then\n            for i = 1, #tostring(v) do\n                sum = sum + tonumber(tostring(v):sub(i,\
    \ i))\n            end\n        end\n    end\n    return sum\nend", "    local\
    \ function isPrime(num)\n        local max = math.sqrt(num)\n        for i = 2,\
    \ max do\n            if num % i == 0 then\n                return false\n   \
    \         end\n        end\n        return true\n    end\n    local sum = 0\n\
    \    local mx = 0\n    for i = 1, #lst do\n        if isPrime(lst[i]) then\n \
    \           mx = math.max(mx, lst[i])\n        end\n    end\n    for j = 1, #mx..\"\
    \" do\n        sum = sum + (mx..\"\")[j]\n    end\n    return sum\nend", 'local
    t = {[1]=1,[2]=1,[3]=1,[4]=1,[5]=1,[6]=1,[7]=1,[8]=1,[9]=1,[0]=1}', "  local primes\
    \ = {}\n  local max = math.max(unpack(lst))\n  local sieve = {}\n  local sum =\
    \ 0\n  for i = 2, max do\n    if not sieve[i] then\n      for j = i*2, max, i\
    \ do\n        sieve[j] = true\n      end\n      table.insert(primes, i)\n    end\n\
    \  end\n  for k, v in pairs(lst) do\n    if primes[v] then\n      local n = v\n\
    \      while n > 0 do\n        sum = sum + (n % 10)\n        n = math.floor(n\
    \ / 10)\n      end\n    end\n  end\n  return sum\nend", "\tlocal max = math.max(unpack(lst))\n\
    \tlocal t = {}\n\tfor i = 1, #lst do\n\t\tlocal v = lst[i]\n\t\tif v > 1 then\n\
    \t\t\tfor j = 2, v do\n\t\t\t\tif v % j == 0 then\n\t\t\t\t\tt[j] = (t[j] or 0)\
    \ + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal maxk = 1\n\tfor k, v in\
    \ pairs(t) do\n\t\tif v > 1 and maxk < k then\n\t\t\tmaxk = k\n\t\tend\n\tend\n\
    \tlocal sum = 0\n\twhile maxk > 0 do\n\t\tsum = sum + (maxk % 10)\n\t\tmaxk =\
    \ math.floor(maxk / 10)\n\tend\n\treturn sum\nend", "    local function getDigits(n)\n\
    \        local t = {}\n        while n > 0 do\n            local m = n % 10\n\
    \            t[#t + 1] = m\n            n = (n - m) / 10\n        end\n      \
    \  return t\n    end\n    local function prime(n)\n        if n <= 1 then return\
    \ false end\n        if n == 2 then return true end\n        if n % 2 == 0 then\
    \ return false end\n        for i = 3, math.sqrt(n), 2 do\n            if n %\
    \ i == 0 then return false end\n        end\n        return true\n    end\n  \
    \  local function sum(t)\n        local r = 0\n        for _, i in ipairs(t) do\n\
    \            r = r + i\n        end\n        return r\n    end\n    local m =\
    \ 0\n    for _, i in ipairs(lst) do\n        if prime(i) and i > m then\n    \
    \        m = i\n        end\n    end\n    return sum(getDigits(m))\nend", "  \
    \  local t = table.maxn(lst)\n    local b = {}\n    for i=1,t do\n        local\
    \ n = lst[i]\n        if n<0 then n = n*-1 end\n        if n>0 then\n        \
    \    local r = 2\n            while r<n do\n                if n%r == 0 then\n\
    \                    break\n                end\n                r = r+1\n   \
    \         end\n            if r==n then\n                local j = math.max(table.maxn(b))\n\
    \                if not j then j = 0 end\n                b[j+1] = n\n       \
    \     end\n        end\n    end\n    local p = table.maxn(b)\n    if not p then\
    \ p = 0 end\n    local s = 0\n    for i=1,p do\n        local c = b[i]\n     \
    \   local n = c%10\n        c = (c-n)/10\n        s = s+n\n        while c>0 do\n\
    \            n = c%10\n            c = (c-n)/10\n            s = s+n\n       \
    \ end\n    end\n    return s\nend", "  local n = 0\n  for i = #lst, 1, -1 do\n\
    \    local a = lst[i]\n    if a > n then\n      n = a\n    end\n  end\n  local\
    \ s = 0\n  while n > 0 do\n    s = s + n % 10\n    n = math.floor(n / 10)\n  end\n\
    \  return s\nend", "    local sum = 0\n    local max = 0\n    for i, v in ipairs(lst)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ while max > 0 do\n        sum = sum + max % 10\n        max = math.floor(max\
    \ / 10)\n    end\n    return sum\nend\nprint(skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}))\n\
    print(skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}))\nprint(skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}))\n\
    print(skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}))\nprint(skjkasdkd({0,81,12,3,1,21}))\n\
    print(skjkasdkd({0,8,1,2,1,7}))", "    local function gcd(a, b)\n        if b\
    \ == 0 then return a end\n        return gcd(b, a % b)\n    end\n    local function\
    \ is_prime(n)\n        local max = math.sqrt(n)\n        for i = 2, max do\n \
    \           if n % i == 0 then return false end\n        end\n        return true\n\
    \    end\n    local function get_largest_prime(a)\n        local max = a[1]\n\
    \        for i = 2, #a do\n            if a[i] > max and is_prime(a[i]) then\n\
    \                max = a[i]\n            end\n        end\n        return max\n\
    \    end\n    local function get_digits(n)\n        local digits = {}\n      \
    \  for i = 1, #n do\n            digits[i] = tonumber(n:sub(i, i))\n        end\n\
    \        return digits\n    end\n    local function sum_digits(lst)\n        local\
    \ sum = 0\n        for i = 1, #lst do\n            sum = sum + lst[i]\n      \
    \  end\n        return sum\n    end\n    local n = get_largest_prime(lst)\n  \
    \  local t = get_digits(tostring(n))\n    return sum_digits(t)\nend", "    local\
    \ n = 2\n    local x = {}\n    for i = 2, math.max(unpack(lst)) do\n        if(lst[i]\
    \ ~= nil) then\n            x[#x + 1] = i\n        end\n    end\n    while(n <\
    \ math.max(unpack(x))) do\n        local i = 1\n        while(x[i] <= n) do\n\
    \            if(x[i] == n) then\n                local j = 1\n               \
    \ while(j < #x) do\n                    if(x[j] % n == 0) then\n             \
    \           table.remove(x, j)\n                    else\n                   \
    \     j = j + 1\n                    end\n                end\n            end\n\
    \            i = i + 1\n        end\n        n = n + 1\n    end\n    return x[#x]\n\
    end", "  local prime,digits\n  local largest,sum = 0,0\n  for i=1,#lst do\n  \
    \  for j=1,#lst do\n      if i~=j then\n        prime = lst[i] * lst[j]\n    \
    \    if prime > largest then\n          largest = prime\n          digits = tostring(largest)\n\
    \          local s = 0\n          for k=1,#digits do\n            s = s + tonumber(digits:sub(k,k))\n\
    \          end\n          sum = s\n        end\n      end\n    end\n  end\n  return\
    \ sum\nend", "\tlocal primes = {}\n\tfor i = #lst, 1, -1 do\n\t\tif lst[i] > 1\
    \ then\n\t\t\tfor j = 2, lst[i] do\n\t\t\t\tif lst[i] % j == 0 then\n\t\t\t\t\t\
    break\n\t\t\t\tend\n\t\t\t\tif j == lst[i] then\n\t\t\t\t\ttable.insert(primes,\
    \ lst[i])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal maxPrime = math.max(unpack(primes))\n\
    \tlocal str = tostring(maxPrime)\n\tlocal sum = 0\n\tfor i = 1, #str do\n\t\t\
    sum = sum + tonumber(str:sub(i, i))\n\tend\n\treturn sum\nend", "    -- code goes\
    \ here\n    -- Note: don't modify the code below\n    return sum(lst)\nend", " \
    \   local function isPrime(n)\n        for i = 2, math.sqrt(n) do\n          \
    \  if n % i == 0 then\n                return false\n            end\n       \
    \ end\n        return true\n    end\n    local tb = {}\n    for i = 2, math.max(unpack(lst))\
    \ do\n        if isPrime(i) then\n            table.insert(tb, i)\n        end\n\
    \    end\n    local str = tostring(math.max(unpack(tb)))\n    local output = 0\n\
    \    for i = 1, string.len(str) do\n        output = output + tonumber(string.sub(str,\
    \ i, i))\n    end\n    return output\nend", "    local primenumbers = {}\n   \
    \ for i=1,#lst do\n        if primenumbers[lst[i]] == nil then\n            primenumbers[lst[i]]\
    \ = true\n            for j=2,(lst[i]/2) do\n                if lst[i]%j == 0\
    \ then\n                    primenumbers[lst[i]] = false\n                   \
    \ break\n                end\n            end\n        end\n    end\n    local\
    \ max = 0\n    for i=1,#lst do\n        if primenumbers[lst[i]] and lst[i] > max\
    \ then\n            max = lst[i]\n        end\n    end\n    local str = tostring(max)\n\
    \    local sum = 0\n    for i=1,#str do\n        sum = sum + tonumber(str:sub(i,i))\n\
    \    end\n    return sum\nend", "    local primes = {}\n    for i = 2, math.max(unpack(lst))\
    \ do\n        if isPrime(i) then\n            primes[#primes + 1] = i\n      \
    \  end\n    end\n    local largest = primes[#primes]\n    local nums = {}\n  \
    \  while largest > 0 do\n        nums[#nums + 1] = largest % 10\n        largest\
    \ = math.floor(largest / 10)\n    end\n    return nums[1] + nums[2] + nums[3]\n\
    end", '    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,
    47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,
    137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,
    227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,
    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
    419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
    509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,
    617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719,
    727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,
    829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
    947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039,
    1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123,
    1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,', "  local largestPrime\
    \ = 0\n  for i = 1, #lst do\n    local curr = lst[i]\n    if curr > largestPrime\
    \ and IsPrime(curr) then\n      largestPrime = curr\n    end\n  end\n  local sum\
    \ = 0\n  for i = 1, tostring(largestPrime):len() do\n    sum = sum + tonumber(tostring(largestPrime):sub(i,\
    \ i))\n  end\n  return sum\nend", "  local result = 0\n  local prime_max = 0\n\
    \  for i=1,#lst do\n    if (lst[i] == 1) then\n      goto continue\n    end\n\
    \    for j=2,lst[i]-1 do\n      if (lst[i] % j == 0) then\n        goto continue\n\
    \      end\n    end\n    prime_max = lst[i]\n    ::continue::\n  end\n  while\
    \ prime_max > 0 do\n    result = result + prime_max % 10\n    prime_max = math.floor(prime_max\
    \ / 10)\n  end\n  return result\nend", "  local sum = 0\n  local max = 0\n  for\
    \ _, v in ipairs(lst) do\n    local res = true\n    for i = 2, v - 1 do\n    \
    \  if v % i == 0 then\n        res = false\n        break\n      end\n    end\n\
    \    if res and v > max then\n      max = v\n    end\n  end\n  for i = 1, #tostring(max)\
    \ do\n    sum = sum + tonumber(tostring(max):sub(i, i))\n  end\n  return sum\n\
    end", "  local mx = nil\n  for i = 1, #lst do\n    if lst[i] and math.mod(lst[i],\
    \ 2) ~= 0 and math.mod(lst[i], 3) ~= 0 then\n      if mx == nil or lst[i] > mx\
    \ then\n        mx = lst[i]\n      end\n    end\n  end\n  local res = 0\n  while\
    \ mx > 0 do\n    res = res + mx % 10\n    mx = math.floor(mx / 10)\n  end\n  return\
    \ res\nend\nskjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) --\
    \ 10\nskjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) -- 25\nskjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3})\
    \ -- 13\nskjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) -- 11\nskjkasdkd({0,81,12,3,1,21})\
    \ -- 3\nskjkasdkd({0,8,1,2,1,7}) -- 7\nskjkasdkd({0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
  "  return sum(tostring(math.max(table.unpack(lst))))\nend", "    for k, v in ipairs(lst)\
    \ do\n        lst[k] = tostring(v)\n    end\n    for k, v in ipairs(lst) do\n\
    \        for i = 1, #v do\n            lst[#lst + 1] = string.sub(v, i, i)\n \
    \       end\n    end\n    local max, sum = -math.huge, 0\n    for k, v in ipairs(lst)\
    \ do\n        local num = tonumber(v)\n        if num > max and isPrime(num) then\n\
    \            max = num\n        end\n    end\n    if max ~= -math.huge then\n\
    \        max = tostring(max)\n        for i = 1, #max do\n            sum = sum\
    \ + tonumber(string.sub(max, i, i))\n        end\n    end\n    return sum\nend",
  "    local n = table.maxn(lst)\n    for i = 1, n, 1 do\n        if lst[i] > 0 then\n\
    \            for j = i + 1, n, 1 do\n                if lst[j] % lst[i] == 0 then\n\
    \                    lst[j] = 0\n                end\n            end\n      \
    \  end\n    end\n    local max = 0\n    for i = 1, n, 1 do\n        if lst[i]\
    \ > max then\n            max = lst[i]\n        end\n    end\n    local sum =\
    \ 0\n    while max > 0 do\n        sum = sum + max % 10\n        max = math.floor(max\
    \ / 10)\n    end\n    return sum\nend\nprint(skjkasdkd({ 0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3\
    \ }))\nprint(skjkasdkd({ 1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1 }))\nprint(skjkasdkd({\
    \ 1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3 }))\nprint(skjkasdkd({ 0,724,32,71,99,32,6,0,5,91,83,0,5,6\
    \ }))\nprint(skjkasdkd({ 0,81,12,3,1,21 }))\nprint(skjkasdkd({ 0,8,1,2,1,7 }))"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
