name: HumanEval_76_is_simple_power
language: lua
prompt: "-- Your task is to write a function that returns true if a number x is a\
  \ simple\n-- power of n and false in other cases.\n-- x is a simple power of n if\
  \ n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
  \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
  -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
  \ is_simple_power(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
  \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
  \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
  \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
  \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
  \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
  \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if x == 1 then return true end\n    local i = 1\n    while true\
    \ do\n        local tmp = n ^ i\n        if tmp == x then return true end\n  \
    \      if tmp > x then return false end\n        i = i + 1\n    end\nend", " \
    \ return math.log(x) / math.log(n) % 1 == 0\nend", "  return math.sqrt(x) % 1\
    \ == 0 and math.log(x) / math.log(n) % 1 == 0\nend", "  return false\nend", " \
    \ return x ~= 1 and math.log(x, n) % 1 == 0\nend", "    local y = math.log(x,\
    \ n)\n    return y % 1 == 0\nend", "  if x == 1 then return true end\n  for i\
    \ = 2, x do\n    if i^x == n then return true end\n  end\n  return false\nend",
  "  -- your code here\nend", "  local result = false\n  local i = 0\n  while n^i\
    \ < x do\n    i = i + 1\n  end\n  if n^i == x then\n    result = true\n  end\n\
    \  return result\nend", "    local result = true\n    if x == 1 then\n       \
    \ return true\n    end\n    if x == 0 then\n        return false\n    end\n  \
    \  for i = 2, x, 1 do\n        if math.floor(x ^ (1 / i)) == n then\n        \
    \    return true\n        end\n    end\n    return false\nend", "  local res =\
    \ math.sqrt(x)\n  if res % 1 == 0 then\n    return true\n  else\n    return false\n\
    \  end\nend", "    local power = n\n    while power < x do\n        power = power\
    \ * n\n    end\n    return power == x\nend", "    return x^(1/n) == math.floor(x^(1/n))\n\
    end", "  for i = 1, x do\n    if n^i == x then\n      return true\n    end\n \
    \ end\n  return false\nend", "    if x == 1 then return true end\n    for i =\
    \ 2, x do\n        if i*i == x then return true end\n    end\n    return false\n\
    end", "  return x%math.log(x,n) == 0\nend", "    local power = 0\n    for i =\
    \ 1, 20 do\n        if n ^ i == x then\n            power = i\n            break\n\
    \        end\n    end\n    return power ~= 0\nend", "    local root = math.sqrt(x)\n\
    \    if root ~= math.floor(root) then\n        return false\n    end\n    return\
    \ math.pow(n, root) == x\nend", "  local x = tostring(x)\n  local n = tostring(n)\n\
    \  local p = x:gsub(n, \"\")\n  if p == \"\" then\n    return true\n  else\n \
    \   return false\n  end\nend", "  -- code here\nend", "  return x == math.floor(x\
    \ ^ (1 / n)) ^ n\nend", "    for i = 0, x do\n        if x == math.pow(n, i) then\n\
    \            return true\n        end\n    end\n    return false\nend", "  if\
    \ x == 1 then return true end\n  local i = 2\n  while n ^ i <= x do\n    if n\
    \ ^ i == x then return true end\n    i = i + 1\n  end\n  return false\nend", " \
    \ return x == 1 or x == n or (x % n == 0 and is_simple_power(x / n, n))\nend",
  "  if x == 0 then return n == 0 end\n  local b, r = x/n, x%n\n  if r == 0 then\n\
    \    return is_simple_power(b, n)\n  else\n    return false\n  end\nend", "  \
    \  return math.floor(math.log(x, n)) == math.log(x, n)\nend\nreturn is_simple_power",
  "  for i = 1, math.huge do\n    if x == math.pow(n, i) then\n      return true\n\
    \    end\n    if x < math.pow(n, i) then\n      return false\n    end\n  end\n\
    end", "  -- your code here\nend", "  return x == n^math.floor(math.log(x)/math.log(n))\n\
    end", "  -- your code here\nend", "  return false\nend", "    local max_n = x^(1/n)\n\
    \    for i = 0, max_n do\n        if n^i == x then\n            return true\n\
    \        end\n    end\n    return false\nend", "    for i = 0, math.huge do\n\
    \        if n ^ i == x then\n            return true\n        end\n        if\
    \ n ^ i > x then\n            return false\n        end\n    end\nend", "  return\
    \ x > 0 and (x % n) == 0 and math.log(x) / math.log(n) % 1 == 0\nend", "\tif x\
    \ == 1 then return true end\n\tif x%n ~= 0 then return false end\n\treturn is_simple_power(x/n,\
    \ n)\nend", "    -- your code here\nend", "  return x > 0 and math.log(x, n) %\
    \ 1 == 0\nend", "    return x == n ^ (x:to_number() .. \"\"):match(\"^%d+\")\n\
    end", "  for i = 0, x do\n    if math.pow(n, i) == x then\n      return true\n\
    \    end\n  end\n  return false\nend", "  -- your code here\nend", "    return\
    \ x == n ^ (math.log(x)/math.log(n))\nend", "  local i = 1\n  local res = n\n\
    \  while res < x do\n    i = i + 1\n    res = n^i\n  end\n  return res == x\n\
    end", "  if x == 1 then return true end\n  local pow = n\n  while pow < x do\n\
    \    pow = pow * n\n  end\n  return pow == x\nend", "    if x < 1 or n < 1 then\
    \ return false end\n    if x == 1 then return true end\n    local power = 1\n\
    \    for i = 1, 20 do\n        power = power * n\n        if power == x then return\
    \ true end\n    end\n    return false\nend", "\tlocal y = 1\n\twhile n^y <= x\
    \ do\n\t\tif n^y == x then\n\t\t\treturn true\n\t\tend\n\t\ty = y + 1\n\tend\n\
    \treturn false\nend", "  return (x % (n ^ math.floor(math.log(x) / math.log(n)))\
    \ == 0)\nend", "  -- your code goes here\nend", "  if n == 1 then return x ==\
    \ 1 end\n  while n > 1 do\n    if n % x == 0 then\n      n = n / x\n    else\n\
    \      return false\n    end\n  end\n  return n == 1\nend", "  local res = x ^\
    \ (1 / n)\n  local actual = math.floor(res)\n  return actual == res\nend", " \
    \ return x == math.floor(math.log(x, n)) ^ n\nend", "  return x == n ^ math.floor(math.log(x)\
    \ / math.log(n))\nend", "  -- your code here\nend", "    return x == 1 or math.log(x,\
    \ n) % 1 == 0\nend", "    -- body\nend", "    local i = 1\n    while n^i < x do\n\
    \        i = i + 1\n    end\n    return x == n^i\nend", "  return x ~= 0 and n\
    \ ~= 0 and math.log(x, n) % 1 == 0\nend", "    return math.log(x) / math.log(n)\
    \ % 1 == 0\nend", "  if x == 1 then return true end\n  local xn = n\n  repeat\n\
    \    if xn == x then return true end\n    xn = xn * n\n  until xn > x\n  return\
    \ false\nend", "    local ans = math.log(x) / math.log(n)\n    return (math.floor(ans)\
    \ == ans)\nend", "  return x == n ^ (math.log(x) / math.log(n))\nend", "\treturn\
    \ x == math.floor(x) and n == math.floor(n) and math.log(x, n) == math.floor(math.log(x,\
    \ n))\nend", "  return math.log(x, n) % 1 == 0\nend", "  local p = math.log(x)\
    \ / math.log(n)\n  return math.floor(p) == p\nend", "    local r = 1\n    for\
    \ i = 1, x do\n        r = r * n\n        if r == x then\n            return true\n\
    \        end\n    end\n    return false\nend", "  if x == 1 then return true end\n\
    \  local i = 1\n  while true do\n    if n ^ i == x then return true\n    elseif\
    \ n ^ i > x then return false end\n    i = i + 1\n  end\nend", "  if n == 0 and\
    \ x == 1 then return true end\n  local power = n\n  while power <= x do\n    if\
    \ power == x then return true end\n    power = power * n\n  end\n  return false\n\
    end", "  local nn = math.log(x) / math.log(n)\n  return math.floor(nn) == nn\n\
    end", "  if x < 1 or n < 1 then return false end\n  local pow = n\n  repeat\n\
    \    if pow == x then return true end\n    pow = pow * n\n  until pow > x\n  return\
    \ false\nend", "  local a = math.log(x) / math.log(n)\n  if a % 1 == 0 then\n\
    \    return true\n  else\n    return false\n  end\nend", "  -- Write your code\
    \ here.\nend", "  for i = 2, x do\n    if n^i == x then\n      return true\n \
    \   end\n  end\n  return false\nend", "  return x == 1 or (x ~= 0 and x % n ==\
    \ 0 and is_simple_power(x / n, n))\nend", "    if x == 1 then return true end\n\
    \    local i = 1\n    while i <= x do\n        if i == x then return true end\n\
    \        i = i * n\n    end\n    return false\nend", "  if x == 1 then return\
    \ true end\n  if x == 0 then return false end\n  return math.log(x, n) % 1 ==\
    \ 0\nend", "  return (math.sqrt(x) == n)\nend", "  if x == 1 and n == 1 then return\
    \ true end\n  local res = 0\n  for i = 0, 100 do\n    res = n ^ i\n    if res\
    \ == x then return true end\n    if res > x then return false end\n  end\n  return\
    \ false\nend", "  if x < 0 or n < 0 then return false end\n  if x == 0 and n ==\
    \ 0 then return false end\n  if x == 1 then return true end\n  local y = 1\n \
    \ while y <= x do\n    if x == y then return true end\n    y = y * n\n  end\n\
    \  return false\nend", "  -- your code here\nend", end, "  local power = 0\n \
    \ local temp = x\n  if temp == 1 and n == 1 then\n    return true\n  end\n  while\
    \ temp > 1 do\n    if temp % n == 0 then\n      temp = temp / n\n      power =\
    \ power + 1\n    else\n      return false\n    end\n  end\n  return true\nend",
  "  return x == n ^ math.floor(math.log(x) / math.log(n))\nend", "  local int = math.log(x)\
    \ / math.log(n)\n  if math.floor(int) == int then\n    return true\n  else\n \
    \   return false\n  end\nend", "    if x < n then return false end\n    while\
    \ x > n do\n        x = x / n\n    end\n    return x == n\nend", "  -- your code\
    \ goes here\nend", "    -- your code here\nend", "  local n_log = math.log(x)\
    \ / math.log(n)\n  return n_log % 1 == 0\nend", "  if (x == 1) then\n    return\
    \ true\n  end\n  if (x < 1) then\n    return false\n  end\n  while (x % n == 0)\
    \ do\n    x = x / n\n  end\n  return x == 1\nend", "  return x == n ^ math.floor(math.log(x)/math.log(n))\n\
    end", "  if x == 1 and n == 1 then return true end\n  if n == 1 then return false\
    \ end\n  local y = n\n  while y < x do\n    y = y * n\n  end\n  return y == x\n\
    end", "  -- if x is 1 or x is n\n  if x == 1 or x == n then\n    return true\n\
    \  end\n  -- if x is larger than n, divide x by n\n  while x > n do\n    x = x\
    \ / n\n  end\n  -- if x is equal to n, return true\n  if x == n then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    return x == math.pow(n, math.log(x)\
    \ / math.log(n))\nend", "  if x == 1 then return true end\n  local remainder =\
    \ x\n  while remainder > 1 do\n    remainder = remainder / n\n    if remainder\
    \ == 1 then return true end\n  end\n  return false\nend", "  if x == 1 and n ==\
    \ 1 then return true end\n  for i = 0, x do\n    if n ^ i == x then return true\
    \ end\n  end\n  return false\nend", "    local x1 = math.log(x, n)\n    return\
    \ math.floor(x1) == x1\nend", "    if x==1 then return true end\n    if n==1 or\
    \ n==0 then return false end\n    if x<n then return false end\n    while x>1\
    \ do\n        if x%n~=0 then return false end\n        x=x/n\n    end\n    return\
    \ true\nend", "  local y = math.log(x, n)\n  local z = math.floor(y)\n  return\
    \ y == z\nend", "  for i = 0, x, 1 do\n    if math.pow(n, i) == x then\n     \
    \ return true\n    end\n  end\n  return false\nend", "  if x == 1 and n ~= 1 then\
    \ return false end\n  local int = x\n  while int > 1 do\n    if int%n == 0 then\n\
    \      int = int/n\n    else\n      return false\n    end\n  end\n  return true\n\
    end", "    if x == 1 then return true end\n    local i = 0\n    while x%n == 0\
    \ do\n        x = x/n\n        i = i + 1\n    end\n    return x == 1\nend", " \
    \   -- your code here\nend", "\treturn x^(1/n) % 1 == 0\nend", "  return (math.log(x)/math.log(n))%1\
    \ == 0\nend", "    if x == 0 then return false end\n    local a = math.log(x)\
    \ / math.log(n)\n    return a == math.floor(a)\nend", "  -- your code here\nend",
  "  if n == 1 then return x == 1 end\n  local pow = n\n  while pow < x do\n    pow\
    \ = pow * n\n  end\n  return pow == x\nend", "  local a = 1\n  while a <= x do\n\
    \    if a == x then\n      return true\n    end\n    a = a * n\n  end\n  return\
    \ false\nend", "  for i = 1, x do\n    if x == math.pow(n, i) then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  return x / n ^ (math.log(x) /\
    \ math.log(n)) == 1\nend", "  if x == 1 then return true end\n  local tmp = 1\n\
    \  while tmp < x do\n    tmp = tmp * n\n    if tmp == x then return true end\n\
    \  end\n  return false\nend", "  local exp = 1\n  while true do\n    local res\
    \ = n ^ exp\n    if res == x then\n      return true\n    elseif res > x then\n\
    \      return false\n    end\n    exp = exp + 1\n  end\nend", "  -- Good luck!\n\
    \  if x == 1 then return true end\n  if n < 1 then return false end\n  local i\
    \ = 1\n  while n^i <= x do\n    if n^i == x then return true end\n    i = i +\
    \ 1\n  end\n  return false\nend", "  -- your code here\nend", "  local a = n ^\
    \ x\n  return a == x\nend", "    local pow = 1\n    for i = 1, 20 do\n       \
    \ pow = pow * n\n        if pow == x then\n            return true\n        end\n\
    \    end\n    return false\nend", "    if x == 0 then return false end\n    local\
    \ y = 1\n    while y < x do\n        y = y * n\n    end\n    return y == x\nend",
  "  -- your code here\nend", "  return x ~= 1 and (x == n or is_simple_power(x /\
    \ n, n))\nend", "    local is_simple_power = false\n    while x >= 1 do\n    \
    \    if x == 1 then\n            is_simple_power = true\n            break\n \
    \       end\n        if x % n ~= 0 then\n            break\n        end\n    \
    \    x = x / n\n    end\n    return is_simple_power\nend", "  local res = false\n\
    \  while n < x do\n    n = n * n\n  end\n  return n == x\nend", "  if n == 1 then\
    \ return false end\n  local r = x/n\n  if r%1 == 0 then\n    return is_simple_power(r,\
    \ n)\n  else\n    return r == 1\n  end\nend", "  local function log_b(val, base)\n\
    \    return math.log(val) / math.log(base)\n  end\n  return math.floor(log_b(x,\
    \ n)) == log_b(x, n)\nend", "  local p = 1\n  while p < x do\n    p = p * n\n\
    \  end\n  return p == x\nend", "    -- your code here\nend", "  -- your code here\n\
    end", "  local p = math.pow(n, math.floor(math.log(x)/math.log(n)))\n  return\
    \ p == x\nend", "  for i = 1, x do\n    if x == n ^ i then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local y = math.floor(math.log(x) / math.log(n))\n\
    \  return x == n ^ y\nend", "  return x == math.pow(n, math.log(x) / math.log(n))\n\
    end", "  local m = n\n  while m * n < x do\n    m = m * n\n  end\n  return m ==\
    \ x\nend", "    -- your code here\nend", "\tlocal solution = n^math.log(x)/math.log(n)\n\
    \tif x == solution then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "  local max = x\n  while max > 1 do\n    if x == max then\n      return true\n\
    \    end\n    max = max / n\n  end\n  return false\nend", "    if x == 1 then\
    \ return true end\n    if n == 1 then return x == 1 end\n    local ret = x % n\
    \ == 0\n    if ret then return is_simple_power(x / n, n) end\n    return false\n\
    end", "  return x == n^(math.floor(math.log(x)/math.log(n)))\nend", "  if x <\
    \ 1 or n < 1 then return false end\n  if x == 1 and n == 1 then return true end\n\
    \  if x == 1 then return false end\n  if n == 1 then return true end\n  local\
    \ i = 1\n  while i <= x do\n    if i == x then return true end\n    i = i * n\n\
    \  end\n  return false\nend", "  return x%n == 0 and x ~= 1\nend", "    return\
    \ x == n ^ math.floor(math.log(x) / math.log(n))\nend", "\t-- your code here\n\
    end", "  -- your code here\nend", "  return false\nend", "    for i = 0, x, 1\
    \ do\n        if x == n^i then\n            return true\n        end\n    end\n\
    \    return false\nend", "    for i = 2, x do\n        if n ^ i == x then\n  \
    \          return true\n        end\n    end\n    return false\nend", "    if\
    \ x == 0 then return n == 0 end\n    return x % n == 0 and x == n^(math.log(x)/math.log(n))\n\
    end", "    if x == 1 then return true end\n    if n == 1 then return false end\n\
    \    local count = 2\n    local result = n * n\n    while result <= x do\n   \
    \     if result == x then return true end\n        result = result * n\n     \
    \   count = count + 1\n    end\n    return false\nend", "  return math.log(x,\
    \ n) % 1 == 0\nend", "    for i = 0, x do\n        if n ^ i == x then\n      \
    \      return true\n        end\n    end\n    return false\nend", "\tfor i = 0,\
    \ x do\n\t\tif x == n ^ i then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end", end, "  -- your code here\nend", "    if x == 1 then return true end\n \
    \   if x % n ~= 0 then return false end\n    return is_simple_power(x / n, n)\n\
    end", "  -- your code here\nend", "  local y = math.log(x) / math.log(n)\n  local\
    \ i, f = math.modf(y)\n  return f == 0\nend", "  local power = 0\n  while true\
    \ do\n    if n ^ power == x then\n      return true\n    elseif n ^ power > x\
    \ then\n      return false\n    end\n    power = power + 1\n  end\nend", "  for\
    \ i = 1, 10 do\n    if n ^ i == x then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    -- your code here\nend", "  if x < 1 or n < 1 then return\
    \ false end\n  while true do\n    if x == 1 then return true end\n    if x % n\
    \ ~= 0 then return false end\n    x = x / n\n  end\nend", "  return x == math.pow(n,\
    \ math.floor(math.log(x) / math.log(n)))\nend", "  return x == math.floor(x /\
    \ n) * n and x / n == math.floor(x / n)\nend", "  local power = n\n  while power\
    \ < x do\n    power = power * n\n  end\n  return power == x\nend", "  return math.log(x)\
    \ / math.log(n) % 1 == 0\nend", "    if x==1 then return true end\n    for i=1,math.log(x)/math.log(n)\
    \ do\n        if n^i==x then return true end\n    end\n    return false\nend",
  "    local powered_n = n\n    while powered_n < x do\n        powered_n = powered_n\
    \ * n\n    end\n    return powered_n == x\nend", "  local r = (math.log(x) / math.log(n))\n\
    \  return math.floor(r) == r\nend", "  -- your code here\nend", "\tif x == 1 then\
    \ return true end\n\tif x == 0 then return false end\n\tif x % n ~= 0 then return\
    \ false end\n\tlocal nn = n\n\twhile nn < x do\n\t\tnn = nn * n\n\tend\n\treturn\
    \ nn == x\nend", "    if x == 1 then return true end\n    while x % n == 0 do\n\
    \        x = x / n\n    end\n    return x == 1\nend", "    local k = math.log(x)\
    \ / math.log(n)\n    return k % 1 == 0\nend", "    return (n ~= 0 and n ~= 1 and\
    \ x > 0 and math.log(x) / math.log(n) % 1 == 0) or (x == 1 and n == 1)\nend",
  "  -- your code here\nend", "  local exp = 1\n  while exp <= math.log(x) / math.log(n)\
    \ do\n    if n ^ exp == x then\n      return true\n    end\n    exp = exp + 1\n\
    \  end\n  return false\nend", "\tlocal i = 0\n\twhile true do\n\t\tif n^i == x\
    \ then\n\t\t\treturn true\n\t\telseif n^i > x then\n\t\t\treturn false\n\t\tend\n\
    \t\ti = i + 1\n\tend\nend", "  local i = 0\n  while true do\n    local result\
    \ = math.pow(n, i)\n    if x == result then\n      return true\n    elseif result\
    \ > x then\n      return false\n    end\n    i = i + 1\n  end\nend", "  -- your\
    \ code here\nend", "    local q = x/n\n    if math.floor(q)==q then\n        if\
    \ q<=1 then\n            return true\n        else\n            return is_simple_power(q,\
    \ n)\n        end\n    else\n        return false\n    end\nend", "  if (x ==\
    \ 1) then\n    return true\n  end\n  return x % n == 0 and is_simple_power(x /\
    \ n, n)\nend", "    return x%math.log(x, n)==0\nend", "  -- your code here\nend",
  "    if n == 0 and x == 1 then return true end\n    if n == 0 and x ~= 1 then return\
    \ false end\n    if n < 0 then n = n * -1 end\n    local i = 1\n    local tmp\
    \ = n\n    while i <= x do\n        if tmp == x then return true end\n       \
    \ if tmp > x then return false end\n        tmp = tmp * n\n        i = i + 1\n\
    \    end\n    return false\nend", "    local n1 = math.log(x) / math.log(n)\n\
    \    return math.ceil(n1) == math.floor(n1)\nend", "    if x == 0 then return\
    \ false end\n    local y = n^(math.log(x)/math.log(n))\n    return y % 1 == 0\n\
    end", end, "    if n == 1 then\n        return x == 1\n    end\n    if x == n\
    \ then\n        return true\n    end\n    if n > x then\n        return false\n\
    \    end\n    local r = x / n\n    return r == math.floor(r) and is_simple_power(r,\
    \ n)\nend", "  local i = 1\n  while x >= n do\n    if x == n then\n      return\
    \ true\n    end\n    x = x / n\n  end\n  return false\nend", "\treturn x==1 or\
    \ (x % (n ^ math.floor(math.log(x)/math.log(n))) == 0)\nend", "  local i = 1\n\
    \  while x > 1 do\n    x = x / n\n    if x == 1 then\n      return true\n    end\n\
    \    if x % 1 ~= 0 then\n      return false\n    end\n  end\n  return false\n\
    end", "  return x == math.huge and n ~= 1 and n < 0 or n ~= 0 and x ~= 0 and x\
    \ == n ^ (math.log(x) / math.log(n))\nend", "  for i = 1, x do\n    if math.pow(n,\
    \ i) == x then\n      return true\n    end\n  end\n  return false\nend", "   \
    \ --your code here\n    if x == n ^ math.log(x) / math.log(n) then\n      return\
    \ true\n    else\n      return false\n    end\nend", "    local z = n\n    while\
    \ z < x do\n        z = z * n\n    end\n    return z == x\nend", "  for i = 0,\
    \ x do\n    if n ^ i == x then\n      return true\n    end\n  end\n  return false\n\
    end", "    -- some code here\nend", "    for i = 1, x do\n        if n ^ i ==\
    \ x then\n            return true\n        end\n    end\n    return false\nend",
  "  return x ~= 1 and n ~= 1 and x % n == 0 and x % (n ^ 2) ~= 0 and x / n == n\n\
    end", "    return x == math.pow(n, math.floor(math.log(x) / math.log(n)))\nend",
  "  if (x < 0) then\n    x = x * -1\n  end\n  local i = 0\n  local nx = n^i\n  while\
    \ (nx <= x) do\n    if (nx == x) then\n      return true\n    end\n    i = i +\
    \ 1\n    nx = n^i\n  end\n  return false\nend", "  local xn = n\n  while xn <\
    \ x do\n    xn = xn * n\n  end\n  return xn == x\nend", "  if x < 1 or n < 1 then\
    \ return false end\n  local i = 0\n  while true do\n    local p = n ^ i\n    if\
    \ p == x then return true end\n    if p > x then return false end\n    i = i +\
    \ 1\n  end\nend", "    return x == 1 or x == n\nend", "    return (x == n ^ (math.log(x)\
    \ / math.log(n))) and (x ~= 1)\nend", "  local k = math.log(x) / math.log(n)\n\
    \  return math.floor(k) == k\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
