name: HumanEval_108_count_nums
language: lua
prompt: "-- Write a function count_nums which takes an array of integers and returns\n\
  -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
  \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
  \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11]) ==\
  \ 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
  \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2, 0}),\
  \ 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
  \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
  \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
  \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = 0\n    for _, n in ipairs(arr) do\n        local\
    \ sum = 0\n        if n < 0 then\n            sum = sum -1\n            n = -n\n\
    \        end\n        while n > 0 do\n            sum = sum + n % 10\n       \
    \     n = math.floor(n / 10)\n        end\n        if sum > 0 then\n         \
    \   result = result + 1\n        end\n    end\n    return result\nend", "  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    if sum_digits(num) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local function\
    \ sum_digits(num)\n        local s = 0\n        for digit in string.gmatch(tostring(math.abs(num)),\
    \ \"%d\") do\n            s = s + tonumber(digit)\n        end\n        return\
    \ s\n    end", "    local sum_digits = function(number)\n        local sign =\
    \ 1\n        if number < 0 then\n            sign = -1\n            number = -number\n\
    \        end\n        local sum = 0\n        for digit in tostring(number):gmatch(\"\
    %d\") do\n            sum = sum + tonumber(digit)\n        end\n        return\
    \ sign * sum\n    end\n    local count = 0\n    for _, n in ipairs(arr) do\n \
    \       if sum_digits(n) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local c = 0\n    for i,v in ipairs(arr)\
    \ do\n        if v > 0 then\n            if count_digit_sum(v) > 0 then\n    \
    \            c = c + 1\n            end\n        else\n            if count_digit_sum(v)\
    \ < 0 then\n                c = c + 1\n            end\n        end\n    end\n\
    \    return c\nend", "  return arr\n    :map(abs)\n    :map(math.floor)\n    :map(to_string)\n\
    \    :map(string.gmatch(\".\"))\n    :map(sum)\n    :filter(gt(0))\n    :length()\n\
    end", "    -- TODO: Write your solution to problem 4.3 here.\nend", "    local\
    \ num = 0\n    for i = 1, #arr do\n        local sum = 0\n        local num =\
    \ arr[i]\n        if num < 0 then\n            num = num * -1\n        end\n \
    \       while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if sum > 0 then\n            num\
    \ = num + 1\n        end\n    end\n    return num\nend", "    -- Don't touch this\
    \ line.\n    return count_nums_helper(0, arr)\nend", "    local cnt = 0\n    for\
    \ i = 1, #arr do\n        local n = arr[i]\n        local sum = 0\n        while\
    \ n ~= 0 do\n            local digit = n % 10\n            sum = sum + digit\n\
    \            n = math.floor(n / 10)\n        end\n        if sum > 0 then\n  \
    \          cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "    local\
    \ count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n       \
    \ local sign = num < 0 and -1 or 1\n        num = math.abs(num)\n        while\
    \ num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num\
    \ / 10)\n        end\n        if sign * sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    -- TODO: implement the\
    \ function\nend", "  local count = 0\n  for _, v in ipairs(arr) do\n    local\
    \ sum = 0\n    local a = v\n    if a < 0 then\n      a = -a\n    end\n    while\
    \ a > 0 do\n      sum = sum + a % 10\n      a = a // 10\n    end\n    if sum >\
    \ 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", "  return\
    \ #(filter(arr, function(a) return sum_digits(a) > 0 end))\nend", "  local count\
    \ = 0\n  for i = 1, #arr do\n    if (sum_digits(arr[i]) > 0) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n  \
    \  for _, n in ipairs(arr) do\n        local s = 0\n        if n >= 0 then\n \
    \           while n > 0 do\n                s = s + n % 10\n                n\
    \ = math.floor(n / 10)\n            end\n        else\n            while n < 0\
    \ do\n                s = s - n % 10\n                n = math.floor(n / 10)\n\
    \            end\n        end\n        if s > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for _, v in ipairs(arr) do\n        local sum = 0\n        local n = v\n  \
    \      if n < 0 then\n            n = -n\n        end\n        while n > 0 do\n\
    \            sum = sum + n % 10\n            n = math.floor(n / 10)\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local sum = 0\n    for i, v in ipairs(arr) do\n\
    \        if v ~= 0 then\n            sum = sum + 1\n        end\n    end\n   \
    \ return sum\nend", "\t-- Implement this function yourself\nend", "  local function\
    \ sum_digits(n)\n    local res = 0\n    while n ~= 0 do\n      res = res + math.abs(n\
    \ % 10)\n      n = math.floor(n / 10)\n    end\n    return res\n  end\n  local\
    \ res = 0\n  for _, n in ipairs(arr) do\n    if sum_digits(n) > 0 then\n     \
    \ res = res + 1\n    end\n  end\n  return res\nend", "    local count = 0\n  \
    \  for _, number in ipairs(arr) do\n        local sum = 0\n        number = math.abs(number)\n\
    \        while number > 0 do\n            sum = sum + number % 10\n          \
    \  number = math.floor(number / 10)\n        end\n        if sum > 0 then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \   return 0\nend", "    local function sum_digits(x)\n        local total = 0\n\
    \        while x ~= 0 do\n            total = total + (x % 10)\n            x\
    \ = math.floor(x / 10)\n        end\n        return total\n    end", "    -- your\
    \ code here\nend", "    local count = 0\n    for i = 1, #arr do\n        local\
    \ num = arr[i]\n        local sum = 0\n        repeat\n            sum = sum +\
    \ math.abs(num % 10)\n            num = math.floor(num / 10)\n        until num\
    \ == 0\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for _, n in ipairs(arr)\
    \ do\n    local sum = 0\n    local nn = math.abs(n)\n    while nn > 0 do\n   \
    \   sum = sum + nn % 10\n      nn = nn // 10\n    end\n    if n < 0 then\n   \
    \   sum = sum + 1\n    end\n    if sum > 0 then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend", "    -- your code here\nend", "    -- TODO:\
    \ implement this function\nend", "    local count = 0\n    for _, v in ipairs(arr)\
    \ do\n        local sum = 0\n        for c in tostring(v):gmatch(\"-?%d\") do\n\
    \            sum = sum + tonumber(c)\n        end\n        if sum > 0 then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", "\t\
    local count = 0\n\tfor i = 1, #arr do\n\t\tif sum_digits(arr[i]) > 0 then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    if #arr == 0 then\n\
    \        return 0\n    end\n    local count = 0\n    for _, num in ipairs(arr)\
    \ do\n        local digits = math.abs(num)\n        local digit_sum = 0\n    \
    \    while digits > 0 do\n            digit_sum = digit_sum + (digits % 10)\n\
    \            digits = digits // 10\n        end\n        if digit_sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local counter = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ n = arr[i]\n        while n ~= 0 do\n            sum = sum + math.abs(n % 10)\n\
    \            n = math.floor(n / 10)\n        end\n        if sum > 0 then\n  \
    \          counter = counter + 1\n        end\n    end\n    return counter\nend",
  "\tlocal i, n, cnt = 1, #arr, 0\n\twhile i <= n do\n\t\tlocal num = arr[i]\n\t\t\
    if num < 0 then\n\t\t\tnum = -num\n\t\tend\n\t\twhile num > 0 do\n\t\t\tcnt =\
    \ cnt + num % 10\n\t\t\tnum = num // 10\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ cnt\nend", "  local total = 0\n  for _,v in ipairs(arr) do\n    local s = tostring(v)\n\
    \    local sum = 0\n    for i = 1, #s do\n      local c = s:sub(i,i)\n      if\
    \ c ~= '-' then\n        sum = sum + tonumber(c)\n      end\n    end\n    if sum\
    \ > 0 then\n      total = total + 1\n    end\n  end\n  return total\nend", " \
    \ -- TODO\nend", "  local count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n\
    \    if num < 0 then\n      num = -num\n    end\n    local sum = 0\n    while\
    \ num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n \
    \   end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    return 0\nend", "    local s = 0\n    for _, x in ipairs(arr)\
    \ do\n        local d = x\n        local sx = 0\n        while d ~= 0 do\n   \
    \         sx = sx + (d % 10)\n            d = math.floor(d / 10)\n        end\n\
    \        if sx > 0 then\n            s = s + 1\n        end\n    end\n    return\
    \ s\nend", "    local function sum_digits(n)\n        local sum = 0\n        for\
    \ digit in tostring(n):gmatch('%d') do\n            sum = sum + tonumber(digit)\n\
    \        end\n        return sum\n    end", "    -- YOUR CODE HERE\nend", "  return\
    \ nil\nend", "    local count = 0\n    for i = 1, #arr do\n        local num =\
    \ arr[i]\n        local sum = 0\n        local sign = 1\n        if num < 0 then\n\
    \            sign = -1\n            num = -num\n        end\n        while num\
    \ > 0 do\n            sum = sum + num % 10\n            num = math.floor(num /\
    \ 10)\n        end\n        if sign * sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  -- YOUR CODE HERE\n  --[[\n\
    \    local count = 0\n    for k, v in pairs(arr) do\n        if tonumber(v) >=\
    \ 0 then\n            if tostring(v):len() > 1 then\n                local value\
    \ = tostring(v)\n                local sum = 0\n                for i = 1, #value\
    \ do\n                    sum = sum + tonumber(value:sub(i, i))\n            \
    \    end\n                if sum > 0 then\n                    count = count +\
    \ 1\n                end\n            else\n                count = count + 1\n\
    \            end\n        else\n            local sum = 0\n            local value\
    \ = tostring(v)\n            sum = sum + tonumber(value:sub(1, 1))\n         \
    \   for i = 2, #value do\n                sum = sum + tonumber(value:sub(i, i))\n\
    \            end\n            if sum > 0 then\n                count = count +\
    \ 1\n            end\n        end\n    end\n    return count\n  ]]\n  local sum\
    \ = 0\n  for k, v in pairs(arr) do\n    sum = sum + tostring(v):len()\n  end\n\
    \  return sum\nend", "    local ret = 0\n    for i, val in ipairs(arr) do\n  \
    \      local sum = 0\n        local num = math.abs(val)\n        while num > 0\
    \ do\n            sum = sum + (num % 10)\n            num = math.floor(num / 10)\n\
    \        end\n        if sum > 0 then\n            ret = ret + 1\n        end\n\
    \    end\n    return ret\nend", "\tlocal count = 0\n\tfor i, v in ipairs(arr)\
    \ do\n\t\tlocal sum = 0\n\t\tlocal n = v\n\t\tif v < 0 then\n\t\t\tn = -v\n\t\t\
    end\n\t\twhile n > 0 do\n\t\t\tsum = sum + n % 10\n\t\t\tn = n // 10\n\t\tend\n\
    \t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    for i = 1, #arr do\n        if sum_digits(math.abs(arr[i]))\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local function sum_digits(n)\n        local acc = 0\n        while\
    \ n ~= 0 do\n            acc = acc + n % 10\n            n = math.floor(n / 10)\n\
    \        end\n        return acc\n    end", "    -- Insert your code here.\nend",
  "  if(#arr == 0) then\n    return 0\n  end\n  local count = 0\n  for i = 1, #arr\
    \ do\n    if(sum_digits(arr[i]) > 0) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    -- YOUR CODE HERE\nend", "    local ret = 0\n\
    \    for _, x in ipairs(arr) do\n        local sum = 0\n        for d in tostring(x):gmatch('%d')\
    \ do\n            sum = sum + tonumber(d)\n        end\n        if sum > 0 then\n\
    \            ret = ret + 1\n        end\n    end\n    return ret\nend", "    local\
    \ out = 0\n    for k, v in pairs(arr) do\n        local sum = 0\n        while\
    \ v ~= 0 do\n            sum = sum + v % 10\n            v = math.floor(v / 10)\n\
    \        end\n        if sum > 0 then\n            out = out + 1\n        end\n\
    \    end\n    return out\nend", "    local count = 0\n    for _, num in ipairs(arr)\
    \ do\n        if sum_digits(num) > 0 then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "    local result = 0\n    for i =\
    \ 1, #arr do\n        local total = 0\n        local str = tostring(arr[i])\n\
    \        for j = 1, #str do\n            local digit = str:sub(j, j)\n       \
    \     total = total + tonumber(digit)\n        end\n        if total > 0 then\n\
    \            result = result + 1\n        end\n    end\n    return result\nend",
  "    local count = 0\n    for i, v in ipairs(arr) do\n        local sum = 0\n  \
    \      for d in string.gmatch(tostring(math.abs(v)), '%d') do\n            sum\
    \ = sum + tonumber(d)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tlocal counter\
    \ = 0\n\tfor i, v in ipairs(arr) do\n\t\tlocal digits = signed_digits(v)\n\t\t\
    local sum = 0\n\t\tfor _, d in ipairs(digits) do\n\t\t\tsum = sum + d\n\t\tend\n\
    \t\tif sum > 0 then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\n\
    end", "    if #arr == 0 then\n        return 0\n    end\n    local count = 0\n\
    \    for _, num in ipairs(arr) do\n        if num > 0 then\n            local\
    \ sum = 0\n            while num > 0 do\n                sum = sum + num % 10\n\
    \                num = math.floor(num / 10)\n            end\n            if sum\
    \ > 0 then\n                count = count + 1\n            end\n        else\n\
    \            if num < 0 then\n                num = -num\n                local\
    \ sum = 0\n                while num > 0 do\n                    sum = sum + num\
    \ % 10\n                    num = math.floor(num / 10)\n                end\n\
    \                if sum > 0 then\n                    count = count + 1\n    \
    \            end\n            end\n        end\n    end\n    return count\nend",
  "    local c = 0\n    for i = 1, #arr do\n        local x = math.abs(arr[i])\n \
    \       local sum = 0\n        while x > 0 do\n            sum = sum + x % 10\n\
    \            x = math.floor(x / 10)\n        end\n        if sum > 0 then\n  \
    \          c = c + 1\n        end\n    end\n    return c\nend", "    -- your code\
    \ here\nend", "    local counter = 0\n    for i = 1, #arr do\n        if sum_of_digits(arr[i])\
    \ > 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend", "    local function sum_of_digits(num)\n        local sum = 0\n\
    \        while num ~= 0 do\n            sum = sum + (num % 10)\n            num\
    \ = math.floor(num / 10)\n        end\n        return sum\n    end", "  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n    for _, d in\
    \ ipairs(to_digits(num)) do\n      sum = sum + d\n    end\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  --[[\n  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    local digits_sum = 0\n    n = n\
    \ < 0 and -n or n\n    while n > 0 do\n      digits_sum = digits_sum + n % 10\n\
    \      n = math.floor(n / 10)\n    end\n    if digits_sum > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\n  --]]\n  local c = 0\n  for _,\
    \ n in ipairs(arr) do\n    if n % 9 > 0 then\n      c = c + 1\n    end\n  end\n\
    \  return c\nend", "    local n = 0\n    for i = 1, #arr do\n        local a =\
    \ arr[i]\n        if (a > 0) then\n            local sum = 0\n            while\
    \ (a > 0) do\n                sum = sum + (a % 10)\n                a = math.floor(a\
    \ / 10)\n            end\n            if (sum > 0) then\n                n = n\
    \ + 1\n            end\n        elseif (a < 0) then\n            local sum = 0\n\
    \            while (a < 0) do\n                sum = sum + ((a % 10) * -1)\n \
    \               a = math.floor(a / 10)\n            end\n            if (sum >\
    \ 0) then\n                n = n + 1\n            end\n        end\n    end\n\
    \    return n\nend", "  local sum = 0\n  for _, v in ipairs(arr) do\n    sum =\
    \ sum + math.abs(v)\n  end\n  return sum\nend", "    -- YOUR CODE HERE\nend",
  "  -- TODO: add code here\nend", "  local count = 0\n  for i = 1, #arr do\n    if\
    \ sum_digits(arr[i]) > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    -- Get the number of elements in the array.\n    local elems\
    \ = #arr\n    -- Initialize the number of elements that have a sum of digits >\
    \ 0 to 0.\n    local sum_count = 0\n    -- Loop through the array.\n    for _,\
    \ num in ipairs(arr) do\n        -- Split the number into an array of its digits.\n\
    \        local digits = string.split(tostring(num), '')\n        -- Initialize\
    \ the sum of digits to 0.\n        local sum = 0\n        -- Loop through the\
    \ digits.\n        for _, digit in ipairs(digits) do\n            -- Convert the\
    \ digit from a string to a number and add it to the sum.\n            sum = sum\
    \ + tonumber(digit)\n        end\n        -- If the sum of digits is > 0, increment\
    \ the sum_count.\n        if sum > 0 then\n            sum_count = sum_count +\
    \ 1\n        end\n    end\n    -- Return the sum_count.\n    return sum_count\n\
    end", "    local counter = 0\n    for _, n in ipairs(arr) do\n        local s\
    \ = signed_digits(n)\n        if #s > 0 then\n            counter = counter +\
    \ 1\n        end\n    end\n    return counter\nend", "    local count = 0\n  \
    \  for _, num in ipairs(arr) do\n        if sum_signed_digits(num) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local sum = 0\n    for _,v in ipairs(arr) do\n        if math.abs(v) >= 10\
    \ then\n            sum = sum + math.abs(v)\n        else\n            sum = sum\
    \ + v\n        end\n    end\n    return sum\nend", "\tlocal ans = 0\n\tfor i,\
    \ v in ipairs(arr) do\n\t\tif sum_digits(v) > 0 then\n\t\t\tans = ans + 1\n\t\t\
    end\n\tend\n\treturn ans\nend", "    local n = 0\n    for i, x in ipairs(arr)\
    \ do\n        if sum_digits(x) > 0 then\n            n = n + 1\n        end\n\
    \    end\n    return n\nend", end, "  local res = 0\n  for i = 1, #arr do\n  \
    \  local n = arr[i]\n    local sum = 0\n    while n ~= 0 do\n      local d = n\
    \ % 10\n      sum = sum + math.abs(d)\n      n = math.floor(n / 10)\n    end\n\
    \    if sum > 0 then\n      res = res + 1\n    end\n  end\n  return res\nend",
  "    local count = 0\n    for _, n in ipairs(arr) do\n        if sum_of_digits(n)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n\
    \ == 0 then\n      count = count + 1\n    else\n      if n < 0 then\n        n\
    \ = -n\n      end\n      while n > 0 do\n        count = count + n % 10\n    \
    \    n = math.floor(n / 10)\n      end\n    end\n  end\n  return count\nend",
  "\tlocal count = 0\n\tfor i, v in ipairs(arr) do\n\t\tif sum_digits(v) > 0 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local f = function(acc,\
    \ curr)\n    if signed_digits_sum(curr) > 0 then\n      return acc + 1\n    else\n\
    \      return acc\n    end\n  end\n  return foldl(f, 0, arr)\nend", "    local\
    \ count = 0\n    for i, v in ipairs(arr) do\n        if sum_digits(v) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    sum = 0\n    for i = 1, #arr do\n        num = arr[i]\n        if num < 0 then\n\
    \            num = -num\n        end\n        while num > 0 do\n            digit\
    \ = num % 10\n            sum = sum + digit\n            num = math.floor(num\
    \ / 10)\n        end\n    end\n    return sum\nend", "\tlocal count = 0\n\tfor\
    \ _, num in ipairs(arr) do\n\t\tif sum_digits(num) > 0 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend", "  local count = 0\n  for i = 1,\
    \ #arr do\n    if sum_signed_digits(arr[i]) > 0 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #arr do\n\
    \    local sum = 0\n    local elem = arr[i]\n    if elem < 0 then\n      sum =\
    \ sum + elem % 10 - 10\n      elem = (elem - elem % 10) / 10\n    end\n    while\
    \ elem > 0 do\n      sum = sum + elem % 10\n      elem = (elem - elem % 10) /\
    \ 10\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local res = 0\n  for i = 1, #arr do\n    local num =\
    \ arr[i]\n    local s = 0\n    if num < 0 then\n      num = -num\n    end\n  \
    \  while num > 0 do\n      s = s + num % 10\n      num = math.floor(num / 10)\n\
    \    end\n    if s > 0 then\n      res = res + 1\n    end\n  end\n  return res\n\
    end", "    local count = 0\n    for i, v in ipairs(arr) do\n        if sum_digits(v)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for _, v in ipairs(arr) do\n    if v < 0 then\n  \
    \    v = -v\n    end\n    local s = 0\n    while v > 0 do\n      s = s + v % 10\n\
    \      v = math.floor(v / 10)\n    end\n    if s > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for i =\
    \ 1, #arr do\n        local sum = 0\n        local num = math.abs(arr[i])\n  \
    \      while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for _,\
    \ num in ipairs(arr) do\n        local sum = 0\n        for digit in tostring(num):gmatch(\"\
    %-?%d\") do\n            sum = sum + tonumber(digit)\n        end\n        if\
    \ sum > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for _, n in ipairs(arr) do\n        if\
    \ sum_digits(n) > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    -- Your code here\nend", "    return 0\nend", " \
    \ local c = 0\n  for i = 1, #arr do\n    if sum_digits(arr[i]) > 0 then\n    \
    \  c = c + 1\n    end\n  end\n  return c\nend", "  local total = 0\n  for i =\
    \ 1, #arr do\n    local num = arr[i]\n    local sum = 0\n    while num ~= 0 do\n\
    \      sum = sum + (num % 10)\n      num = math.floor(num / 10)\n    end\n   \
    \ if sum > 0 then\n      total = total + 1\n    end\n  end\n  return total\nend",
  "  -- YOUR CODE HERE\n  local counts = 0\n  for i = 1, #arr do\n    local num =\
    \ arr[i]\n    local sum = 0\n    while num ~= 0 do\n      sum = sum + math.abs(num\
    \ % 10)\n      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n    \
    \  counts = counts + 1\n    end\n  end\n  return counts\nend", "    local f =\
    \ function(v) return sum_digits(v) > 0 end\n    return count(arr, f)\nend", " \
    \   return 'replace this string with your code'\nend", "  local count = 0\n  for\
    \ i, v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend", end, "    local count = 0\n    for\
    \ i, v in ipairs(arr) do\n        local sum = 0\n        local tmp = math.abs(v)\n\
    \        while tmp > 0 do\n            sum = sum + (tmp % 10)\n            tmp\
    \ = math.floor(tmp / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i = 1, #arr do\n        local n = arr[i]\n        local sum = 0\n\
    \        while n ~= 0 do\n            sum = sum + math.abs(n % 10)\n         \
    \   n = math.floor(n / 10)\n        end\n        if sum > 0 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend", "  local count\
    \ = 0\n  for i, v in ipairs(arr) do\n    local n = v\n    if n < 0 then\n    \
    \  n = -n\n    end\n    local sum = 0\n    while n > 0 do\n      sum = sum + (n\
    \ % 10)\n      n = n // 10\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    if #arr == 0 then\n        return\
    \ 0\n    end\n    return count_nums(array.slice(arr, 2)) +\n        ((array.sum(array.map(array.filter(arr,\n\
    \        function(x) return x ~= 0 end), abs)) > 0) and 1 or 0)\nend", "  local\
    \ count = 0\n  for i, v in ipairs(arr) do\n    local sum = 0\n    local n = math.abs(v)\n\
    \    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n\
    \    end\n    if v == 0 or sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for i = 1, #arr do\n        local\
    \ sum = 0\n        local cur = arr[i]\n        if cur < 0 then\n            cur\
    \ = -cur\n        end\n        while cur > 0 do\n            sum = sum + cur %\
    \ 10\n            cur = math.floor(cur / 10)\n        end\n        if sum > 0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for _, v in ipairs(arr) do\n        if sum_digits(v)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #arr do\n        local arrItem = arr[i]\n\
    \        local sum = 0\n        while arrItem ~= 0 do\n            local digit\
    \ = arrItem % 10\n            sum = sum + digit\n            arrItem = (arrItem\
    \ - digit) / 10\n        end\n        if sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i = 1, #arr do\n        local n = 0\n        local x = arr[i]\n       \
    \ while x ~= 0 do\n            n = n + x % 10\n            x = x // 10\n     \
    \   end\n        if n > 0 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "  local count = 0\n  for _,v in ipairs(arr)\
    \ do\n    if add_digits(v) > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for _, elem in ipairs(arr) do\n\
    \        if signed_sum_digits(elem) > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  return error(\"NOT IMPLEMENTED\"\
    )\nend", "    local cnt = 0\n    for _, v in ipairs(arr) do\n        if v < 0\
    \ then\n            if v % 10 ~= v then\n                cnt = cnt + 1\n     \
    \       end\n        else\n            if v % 10 > 0 then\n                cnt\
    \ = cnt + 1\n            end\n        end\n    end\n    return cnt\nend", "  \
    \  local function add_digits(n)\n        local result = 0\n        local val =\
    \ math.abs(n)\n        while val > 0 do\n            result = result + val % 10\n\
    \            val = math.floor(val / 10)\n        end\n        return result\n\
    \    end\n    local function sign(n)\n        if n < 0 then\n            return\
    \ -1\n        else\n            return 1\n        end\n    end\n    local result\
    \ = 0\n    for _, x in ipairs(arr) do\n        if sign(x) * add_digits(x) > 0\
    \ then\n            result = result + 1\n        end\n    end\n    return result\n\
    end", "    local count = 0\n    for i = 1, #arr do\n        local sum = 0\n  \
    \      local val = arr[i]\n        while val ~= 0 do\n            sum = sum +\
    \ (val % 10)\n            val = math.floor(val / 10)\n        end\n        if\
    \ sum > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    -- your code here\nend", "    return fold(function(n, acc)\
    \ return acc + sum_digits(n) > 0 and 1 or 0 end, 0, arr)\nend", end, "  local\
    \ count = 0\n  for i, num in ipairs(arr) do\n    if sum_of_digits(num) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local c =\
    \ 0\n    for i = 1, #arr do\n        local sum = 0\n        local digit = 0\n\
    \        if arr[i] < 0 then digit = -1 end\n        while arr[i] ~= 0 do\n   \
    \         sum = sum + math.abs(arr[i] % 10)\n            arr[i] = math.floor(arr[i]\
    \ / 10)\n        end\n        if digit == -1 then sum = sum + 1 end\n        if\
    \ sum > 0 then c = c + 1 end\n    end\n    return c\nend\nprint(count_nums({-1,\
    \ 11, -11}))", "  -- Remember:\n  -- * We can use count() function to get the\
    \ number of elements which satisfy\n  --   a given predicate.\n  -- * We can use\
    \ split_digits() function to get the digits of an integer.\n  -- * We can use\
    \ sum() function to get the sum of a list of integers.\n  -- * A simple function\
    \ that returns True if the sum of digits of given\n  --   integer is greater than\
    \ 0 can be defined as follows:\n  --      gt_zero = function(n) return sum(split_digits(n))\
    \ > 0 end\n  --\n  -- These functions are used as follows:\n  -- >>> count(gt_zero,\
    \ [-1, 11, -11]) == 1\n  -- >>> count(gt_zero, [1, 1, 2]) == 3\n  -- Now just\
    \ apply count() function on the given array of integers.\n  return count(function(n)\
    \ return sum(split_digits(n)) > 0 end, arr)\nend", "    local count = 0\n    for\
    \ i,v in ipairs(arr) do\n        local temp = v\n        local sum = 0\n     \
    \   if temp < 0 then\n            temp = temp * -1\n        end\n        while\
    \ temp > 0 do\n            sum = sum + (temp % 10)\n            temp = math.floor(temp\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local count = 0\n  for i = 1,\
    \ #arr do\n    local s = 0\n    for d in tostring(math.abs(arr[i])):gmatch(\"\
    [0-9]\") do\n      s = s + tonumber(d)\n    end\n    if s > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v >= 0 then\n            sum = sum + v %\
    \ 10\n            v = v / 10\n        else\n            v = -v\n            sum\
    \ = sum - v % 10\n            v = v / 10\n        end\n        while v > 0 do\n\
    \            sum = sum + v % 10\n            v = v / 10\n        end\n    end\n\
    \    return sum\nend", "  local count = 0\n  for k, v in pairs(arr) do\n    local\
    \ sum = 0\n    v = math.abs(v)\n    while v > 0 do\n      sum = sum + v % 10\n\
    \      v = math.floor(v / 10)\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    -- TODO: add code here\nend",
  "    local count = 0\n    for k, v in pairs(arr) do\n        if (v > 0 and v % 10\
    \ > 0) or (v < 0 and v % 10 < 0) then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    local cnt = 0\n    for _,v in ipairs(arr)\
    \ do\n        if sum_of_digits(v) > 0 then\n            cnt = cnt + 1\n      \
    \  end\n    end\n    return cnt\nend", "    local count = 0\n    for i = 1, #arr\
    \ do\n        -- Get the first \"signed\" digit\n        local num = math.floor(math.abs(arr[i])\
    \ / 10)\n        local sum = math.abs(arr[i]) % 10\n        while num > 0 do\n\
    \            sum = sum + num % 10\n            num = math.floor(num / 10)\n  \
    \      end\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local cnt = 0\n  for i = 1, #arr do\n   \
    \ local v = arr[i]\n    local sum = 0\n    if v < 0 then v = -v end\n    while\
    \ v > 0 do\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n    end\n\
    \    if sum > 0 then cnt = cnt + 1 end\n  end\n  return cnt\nend", "  local count\
    \ = 0\n  for i = 1, #arr do\n    if sum_digits(arr[i]) > 0 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for\
    \ _, value in ipairs(arr) do\n        local digits = get_sign_digits(value)\n\
    \        local sum = sum_of_digits(digits)\n        if sum > 0 then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "  return\
    \ 'YOUR_CODE_HERE'\nend", "    local count = 0\n    for k, v in pairs(arr) do\n\
    \        if sum_digits(v) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for _, n in ipairs(arr)\
    \ do\n    local digits = to_digits(n)\n    if sum(digits) > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n  \
    \  for _, i in ipairs(arr) do\n        -- Append '0' to ensure that the first\
    \ digit is counted.\n        local s = '0' .. i\n        local sum = 0\n     \
    \   for j = 1, #s do\n            sum = sum + tonumber(s:sub(j, j))\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for _, v in ipairs(arr) do\n\
    \        if sum_digits(v) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for i = 1, #arr do\n\
    \        if count_signed_digits(arr[i]) > 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "  local res = 0\n  for _,\
    \ v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n      res = res + 1\n  \
    \  end\n  end\n  return res\nend", "    local function count_digits(x)\n     \
    \   if x < 0 then\n            x = -x\n        end\n        if x < 10 then\n \
    \           return x\n        end\n        local sum = 0\n        while x > 0\
    \ do\n            sum = sum + x % 10\n            x = math.floor(x / 10)\n   \
    \     end\n        return sum\n    end\n    local count = 0\n    for i = 1, #arr\
    \ do\n        if count_digits(arr[i]) > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for _,\
    \ num in ipairs(arr) do\n        local sum = sum_of_digits(num)\n        if sum\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j =\
    \ 1, #tostring(arr[i]) do\n      if string.sub(tostring(arr[i]), j, j) == \"-\"\
    \ then\n        sum = sum - tonumber(string.sub(tostring(arr[i]), j + 1, j + 1))\n\
    \      else\n        sum = sum + tonumber(string.sub(tostring(arr[i]), j, j))\n\
    \      end\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend", "    return 0\nend", "    local count = 0\n    for\
    \ i = 1, #arr do\n        if math.abs(arr[i]) > 9 then\n            local n =\
    \ math.abs(arr[i])\n            local sum = 0\n            while n > 0 do\n  \
    \              sum = sum + n % 10\n                n = n // 10\n            end\n\
    \            if sum > 0 then\n                count = count + 1\n            end\n\
    \        else\n            if arr[i] ~= 0 then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "  -- TODO:\
    \ Implement count_nums\nend", "    local sum = 0\n    for i, v in ipairs(arr)\
    \ do\n        sum = sum + sum_digits(v)\n    end\n    return sum\nend", "    local\
    \ count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        if num\
    \ < 0 then\n            num = -num\n        end\n        local sum = 0\n     \
    \   while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    return table.reduce(arr, 0,\
    \ function(sum, n)\n        return sum + signed_digit_sum(n)\n    end)\nend",
  "    return sum(map(function(x) if sum_digits(x)>0 then return 1 else return 0 end\
    \ end, arr))\nend", "    local count = 0\n    for _, n in ipairs(arr) do\n   \
    \     local sum = 0\n        local abs_n = math.abs(n)\n        while abs_n >\
    \ 0 do\n            sum = sum + abs_n % 10\n            abs_n = math.floor(abs_n\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local sum = 0\n  for i, v in\
    \ ipairs(arr) do\n    local dig_sum = 0\n    if v < 0 then\n      v = -v\n   \
    \ end\n    while v > 0 do\n      dig_sum = dig_sum + v % 10\n      v = math.floor(v\
    \ / 10)\n    end\n    if dig_sum > 0 then\n      sum = sum + 1\n    end\n  end\n\
    \  return sum\nend", "  -- YOUR CODE HERE\n  return -1\nend", "\tlocal count =\
    \ 0\n\tfor i = 1, #arr do\n\t\tif sum_digits(arr[i]) > 0 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend", "    local count = 0\n    for i =\
    \ 1, #arr do\n        local sum = 0\n        local temp = arr[i]\n        if temp\
    \ < 0 then\n            temp = -temp\n        end\n        while temp > 0 do\n\
    \            sum = sum + temp % 10\n            temp = math.floor(temp / 10)\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    local cnt = 0\n    for i = 1, #arr\
    \ do\n        if sum_digits(arr[i]) > 0 then\n            cnt = cnt + 1\n    \
    \    end\n    end\n    return cnt\nend", "    local count = 0\n    for i, v in\
    \ ipairs(arr) do\n        if sum_signed_digits(v) > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local count =\
    \ 0\n  for _, v in ipairs(arr) do\n    local digits = to_digits(v)\n    if digits[1]\
    \ < 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \   local count = 0\n    for i, v in ipairs(arr) do\n        local d = signed_digits(v)\n\
    \        if sum(d) > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for _, e in ipairs(arr) do\n\
    \        -- check if the number is negative\n        if e < 0 then\n         \
    \   -- since the first signed digit will be negative, we change the sign\n   \
    \         -- of the number, which becomes the opposite of itself, but with the\n\
    \            -- first signed digit as positive\n            e = -e\n        end\n\
    \        -- check if the sum of digits is greater than 0\n        if calc_digits_sum(e)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for _, num in ipairs(arr) do\n        local sum\
    \ = 0\n        local tmp = math.abs(num)\n        while tmp > 0 do\n         \
    \   sum = sum + tmp % 10\n            tmp = math.floor(tmp / 10)\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local count = 0\n  for _, n in ipairs(arr) do\n  \
    \  local sum = 0\n    for d in tostring(n):gmatch(\"%-?%d\") do\n      sum = sum\
    \ + tonumber(d)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local sum = 0\n    for i, v in ipairs(arr)\
    \ do\n        local t = v\n        if v < 0 then\n            t = -v\n       \
    \ end\n        local d = 0\n        while t > 0 do\n            d = d + t % 10\n\
    \            t = math.floor(t / 10)\n        end\n        if d > 0 then\n    \
    \        sum = sum + 1\n        end\n    end\n    return sum\nend", "    return\
    \ 0\nend", "    local function sign_digits(n)\n        local ret = {}\n      \
    \  if n < 0 then\n            table.insert(ret, -1)\n            n = -n\n    \
    \    end\n        while n > 0 do\n            table.insert(ret, n % 10)\n    \
    \        n = math.floor(n / 10)\n        end\n        return ret\n    end\n  \
    \  local function digit_sum(n)\n        local ret = 0\n        for i = 1, #n do\n\
    \            ret = ret + n[i]\n        end\n        return ret\n    end\n    local\
    \ count = 0\n    for i = 1, #arr do\n        if digit_sum(sign_digits(arr[i]))\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for _, num in ipairs(arr) do\n        local sum\
    \ = 0\n        local sign = 1\n        if num < 0 then\n            sign = -1\n\
    \        end\n        for _, ch in utf8.codes(num * sign) do\n            sum\
    \ = sum + sign * tonumber(utf8.char(ch))\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for i = 1, #arr do\n        local n = arr[i]\n       \
    \ local total = 0\n        while n ~= 0 do\n            total = total + n % 10\n\
    \            n = math.floor(n / 10)\n        end\n        if total > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local total = 0\n    for i, v in ipairs(arr) do\n        local digits = 0\n\
    \        while v ~= 0 do\n            digits = digits + math.abs(v % 10)\n   \
    \         v = math.floor(v / 10)\n        end\n        if digits > 0 then\n  \
    \          total = total + 1\n        end\n    end\n    return total\nend", " \
    \   local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n\
    \        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum +\
    \ tonumber(digit)\n        end\n        if num < 0 then\n            if sum >\
    \ 1 then\n                count = count + 1\n            end\n        else\n \
    \           if sum > 0 then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "  local sum = 0\n  for i = 1,\
    \ #arr do\n    local n = arr[i]\n    local s = 0\n    if n < 0 then\n      n =\
    \ -n\n      s = -1\n    end\n    while n > 0 do\n      s = s + n % 10\n      n\
    \ = math.floor(n / 10)\n    end\n    if s > 0 then\n      sum = sum + 1\n    end\n\
    \  end\n  return sum\nend", "    local function sum_digits(n)\n        local sum\
    \ = 0\n        for i = 1, #tostring(n) do\n            sum = sum + tonumber(tostring(n):sub(i,\
    \ i))\n        end\n        return sum\n    end", "    local count = 0\n    for\
    \ _, elem in ipairs(arr) do\n        if sum_digits(elem) > 0 then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "    -- YOUR\
    \ CODE HERE\n    local count = 0\n    for _, v in ipairs(arr) do\n        local\
    \ s = 0\n        if v > 0 then\n            s = signed_digits(v)\n        else\n\
    \            s = signed_digits(-v)\n        end\n        if s > 0 then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "   \
    \ -- TODO\nend", "    local count = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i])\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for _, i in ipairs(arr) do\n        local sum\
    \ = 0\n        for j in tostring(math.abs(i)):gmatch(\"%d\") do\n            sum\
    \ = sum + tonumber(j)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    return F.foldr(function(x,\
    \ s) return s + sum_digits(x) end, 0, arr)\nend", "  local c = 0\n  for _, v in\
    \ ipairs(arr) do\n    local sum = 0\n    for d in tostring(v):gmatch('%d') do\n\
    \      sum = sum + tonumber(d)\n    end\n    if sum > 0 then\n      c = c + 1\n\
    \    end\n  end\n  return c\nend", "    return 0\nend", "    local function sum_signed_digits(num)\n\
    \        local sum = 0\n        while num ~= 0 do\n            sum = sum + math.abs(num\
    \ % 10)\n            num = math.floor(num / 10)\n        end\n        return sum\n\
    \    end", "  local count = 0\n  for i,v in ipairs(arr) do\n    if sum_digits(v)\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ if #arr == 0 then\n    return 0\n  end\n  -- TODO: Write your code here\nend",
  "  return 0\nend", "  local count = 0\n  for _, v in ipairs(arr) do\n    if signed_digits_sum(v)\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nassert(count_nums({})\
    \ == 0)\nassert(count_nums({-1, 11, -11}) == 1)\nassert(count_nums({1, 1, 2})\
    \ == 3)", end, "    local cnt = 0\n    for i = 1, #arr do\n        local sum =\
    \ 0\n        for dig in tostring(arr[i]):gmatch('[-]?%d') do\n            sum\
    \ = sum + tonumber(dig)\n        end\n        if sum > 0 then\n            cnt\
    \ = cnt + 1\n        end\n    end\n    return cnt\nend", "    local count = 0\n\
    \    for i = 1, #arr do\n        local val = arr[i]\n        local sum = 0\n \
    \       while val ~= 0 do\n            sum = sum + val % 10\n            val =\
    \ math.floor(val / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local function\
    \ is_pos(num)\n        local digits = {[0] = true, [1] = true, [2] = true, [3]\
    \ = true, [4] = true, [5] = true, [6] = true, [7] = true, [8] = true, [9] = true}\n\
    \        local n = math.abs(num)\n        while n > 0 do\n            if digits[n\
    \ % 10] == nil then\n                return false\n            end\n         \
    \   n = math.floor(n / 10)\n        end\n        return true\n    end\n    local\
    \ count = 0\n    for i = 1, #arr do\n        if is_pos(arr[i]) then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ sum = 0\n  for _, n in ipairs(arr) do\n    local num = math.abs(n)\n    while\
    \ num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n \
    \   end\n  end\n  return sum\nend", "    local count = 0\n    for _, value in\
    \ ipairs(arr) do\n        if sum_digits(value) > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor\
    \ i, v in ipairs(arr) do\n\t\tif v < 0 then\n\t\t\tv = v * -1\n\t\tend\n\t\tif\
    \ math.floor(v / 10) ~= 0 then\n\t\t\tlocal sum = 0\n\t\t\twhile v > 0 do\n\t\t\
    \t\tsum = sum + v % 10\n\t\t\t\tv = math.floor(v / 10)\n\t\t\tend\n\t\t\tif sum\
    \ > 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telse\n\t\t\tif v > 0 then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", " \
    \   local count = 0\n    for i, v in ipairs(arr) do\n        local sign = 1\n\
    \        if v < 0 then\n            sign = -1\n        end\n        local number\
    \ = math.abs(v)\n        local sum = 0\n        while number > 0 do\n        \
    \    sum = sum + number % 10\n            number = math.floor(number / 10)\n \
    \       end\n        if sign * sum > 0 then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend", "    -- Implement this function\n\
    end", end, "    local count = 0\n    for i = 1, #arr do\n        local sum = 0\n\
    \        local n = math.abs(arr[i])\n        while n > 0 do\n            sum =\
    \ sum + n % 10\n            n = math.floor(n / 10)\n        end\n        if sum\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  return null\nend", "\tlocal num = 0", "  local count = 0\n  for i = 1,\
    \ #arr do\n    if sum_digits(arr[i]) > 0 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local count = 0\n  for _, v in ipairs(arr) do\n\
    \    local v = math.abs(v)\n    local sum = 0\n    repeat\n      sum = sum + v\
    \ % 10\n      v = math.floor(v / 10)\n    until v == 0\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local count\
    \ = 0\n    for _, n in ipairs(arr) do\n        if sum_signed_digits(n) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    -- TODO: Write this function.\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
