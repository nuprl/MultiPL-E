name: HumanEval_107_even_odd_palindrome
language: lua
prompt: "-- Given a positive integer n, return a tuple that has the number of even\
  \ and odd\n-- integer palindromes that fall within the range(1, n), inclusive.\n\
  -- Example 1:\n-- Input: 3\n-- Output: (1, 2)\n-- Explanation:\n-- Integer palindrome\
  \ are 1, 2, 3. one of them is even, and two of them are odd.\n-- Example 2:\n--\
  \ Input: 12\n-- Output: (4, 6)\n-- Explanation:\n-- Integer palindrome are 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n-- Note:\n\
  -- 1. 1 <= n <= 10^3\n-- 2. returned tuple has the number of even and odd integer\
  \ palindromes respectively.\nlocal function even_odd_palindrome(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_palindrome\n\
  \    lu.assertEquals(candidate(123), {8, 13})\n    lu.assertEquals(candidate(12),\
  \ {4, 6})\n    lu.assertEquals(candidate(3), {1, 2})\n    lu.assertEquals(candidate(63),\
  \ {6, 8})\n    lu.assertEquals(candidate(25), {5, 6})\n    lu.assertEquals(candidate(19),\
  \ {4, 6})\n    lu.assertEquals(candidate(9), {4, 5})\n    lu.assertEquals(candidate(1),\
  \ {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local cnt_odd, cnt_even = 0, 0\n    for i = 1, n do\n        if\
    \ i < 10 then\n            cnt_odd = cnt_odd + 1\n        elseif (i % 11) == 0\
    \ then\n            cnt_odd = cnt_odd + 1\n        else\n            local y =\
    \ 0\n            for x = i, 1, -1 do\n                y = y * 10 + (x % 10)\n\
    \            end\n            if y == i then\n                if i % 2 == 0 then\n\
    \                    cnt_even = cnt_even + 1\n                else\n         \
    \           cnt_odd = cnt_odd + 1\n                end\n            end\n    \
    \    end\n    end\n    return cnt_even, cnt_odd\nend", "    local len = #tostring(n)\n\
    \    local even, odd = 0, 0\n    local function perm(i, j, k)\n        if i <\
    \ k and j > k then\n            local s = string.sub(tostring(n), i, j)\n    \
    \        if tonumber(s) <= n then\n                if #s % 2 == 0 then\n     \
    \               even = even + 1\n                else\n                    odd\
    \ = odd + 1\n                end\n            end\n        end\n    end\n    for\
    \ i = 1, len - 1 do\n        for j = len, i + 1, -1 do\n            perm(i, j,\
    \ (i + j) / 2)\n        end\n    end\n    local s = tostring(n)\n    for i = 1,\
    \ len - 1 do\n        perm(1, i, (i + 1) / 2)\n        perm(len - i + 1, len,\
    \ (len + len - i + 1) / 2)\n    end\n    if #s % 2 == 0 then\n        even = even\
    \ + 1\n    else\n        odd = odd + 1\n    end\n    return even, odd\nend", " \
    \   local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if math.fmod(i, 2) == 0 then\n                even = even + 1\n \
    \           else\n                odd = odd + 1\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local c1, c2 = 0, 0\n    for k = 1,\
    \ n do\n        local s = tostring(k)\n        local r = s:reverse()\n       \
    \ if s == r then\n            if k % 2 == 0 then\n                c1 = c1 + 1\n\
    \            else\n                c2 = c2 + 1\n            end\n        end\n\
    \    end\n    return c1, c2\nend", "    local c = 0\n    local r = 0\n    for\
    \ i = 1, n do\n        if i % 10 == 0 then\n            c = c + 1\n        elseif\
    \ i / 10 == math.floor(i / 10) then\n            r = r + 1\n        else\n   \
    \         local str = tostring(i)\n            local len = #str\n            local\
    \ l = 1\n            local h = len\n            while l < h do\n             \
    \   if str:sub(l, l) ~= str:sub(h, h) then\n                    break\n      \
    \          end\n                l = l + 1\n                h = h - 1\n       \
    \     end\n            if l >= h then\n                if len % 2 == 0 then\n\
    \                    c = c + 1\n                else\n                    r =\
    \ r + 1\n                end\n            end\n        end\n    end\n    return\
    \ c, r\nend", "    local function is_palindrome(number)\n        local rev = 0\n\
    \        local ori = number\n        while number > 0 do\n            rev = rev\
    \ * 10 + number % 10\n            number = math.floor(number / 10)\n        end\n\
    \        return rev == ori\n    end\n    local even, odd = 0, 0\n    for i = 1,\
    \ n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n   \
    \             even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ function is_palindrome(num)\n        local tmp = num\n        local rev = 0\n\
    \        while num > 0 do\n            rev = rev * 10 + num % 10\n           \
    \ num = math.floor(num / 10)\n        end\n        return tmp == rev\n    end\n\
    \    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local odd, even = 0, 0\n    for i =\
    \ 1, n do\n        if tostring(i) == string.reverse(tostring(i)) then\n      \
    \      if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local function is_palindrome(i)\n        local j = 0\n\
    \        local x = i\n        while x > 0 do\n            j = j * 10 + x % 10\n\
    \            x = math.floor(x / 10)\n        end\n        return i == j\n    end\n\
    \    local m = { 0, 0 }\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            m[i % 2 + 1] = m[i % 2 + 1] + 1\n        end\n    end\n    return\
    \ m\nend", "    local count = 0\n    if n % 2 == 0 then\n        count = count\
    \ + 1\n    end\n    count = count + (n - 1) / 2\n    return count, count\nend",
  "    local even = 0\n    local odd = 0\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return even, odd\nend", "    local cnt_e, cnt_o = 0,\
    \ 0\n    for i = 1, n do\n        local s = tostring(i)\n        local s_r = s:reverse()\n\
    \        if s == s_r then\n            if i % 2 == 0 then\n                cnt_e\
    \ = cnt_e + 1\n            else\n                cnt_o = cnt_o + 1\n         \
    \   end\n        end\n    end\n    return cnt_e, cnt_o\nend", "    local function\
    \ is_palindrome(m)\n        local x = m\n        local y = 0\n        while x\
    \ > 0 do\n            y = y * 10 + x % 10\n            x = math.floor(x / 10)\n\
    \        end\n        return y == m\n    end\n    local even, odd = 0, 0\n   \
    \ for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0\
    \ then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local res = {0, 0}\n    local is_palindrome = function(s)\n        local i,\
    \ j = 1, #s\n        while i < j do\n            if s:sub(i, i) ~= s:sub(j, j)\
    \ then\n                return false\n            end\n            i, j = i +\
    \ 1, j - 1\n        end\n        return true\n    end\n    for i = 1, n do\n \
    \       if is_palindrome(tostring(i)) then\n            if i % 2 == 0 then\n \
    \               res[1] = res[1] + 1\n            else\n                res[2]\
    \ = res[2] + 1\n            end\n        end\n    end\n    return unpack(res)\n\
    end", "    local even, odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n\
    \            odd = odd + 1\n        elseif i >= 10 and i < 100 then\n        \
    \    if i % 11 == 0 then\n                odd = odd + 1\n            else\n  \
    \              even = even + 1\n            end\n        elseif i >= 100 and i\
    \ < 1000 then\n            if i % 11 == 0 then\n                odd = odd + 1\n\
    \            elseif math.floor(i / 10) % 11 == 0 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local r = n\n    local\
    \ a, b = 0, 0\n    while r > 0 do\n        if n % 2 == 0 then\n            a =\
    \ a + 1\n        else\n            b = b + 1\n        end\n        n = n // 10\n\
    \        r = n\n    end\n    return a, b\nend", "    local function is_palindrome(num)\n\
    \        local s = tostring(num)\n        local b, e = 1, #s\n        while b\
    \ < e do\n            if s:sub(b, b) ~= s:sub(e, e) then\n                return\
    \ false\n            end\n            b, e = b + 1, e - 1\n        end\n     \
    \   return true\n    end\n    local function odd_palindrome(n)\n        local\
    \ res = 1\n        local r = math.floor(n / 2)\n        for i = 1, r do\n    \
    \        local a = 10 ^ i - 1\n            local b = 10 ^ (i - 1)\n          \
    \  res = res + a - b + 1\n        end\n        return res\n    end\n    local\
    \ function even_palindrome(n)\n        local res = 0\n        local r = math.floor(n\
    \ / 2)\n        for i = 1, r do\n            local a = 10 ^ i - 1\n          \
    \  local b = 10 ^ (i - 1)\n            res = res + a - b + 1\n        end\n  \
    \      return res\n    end\n    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            if i % 2 == 0 then\n          \
    \      even = even + 1\n            else\n                odd = odd + 1\n    \
    \        end\n        end\n    end\n    return even, odd\nend", "    local even_cnt,\
    \ odd_cnt = 0, 0\n    for i = 1, n do\n        if (tostring(i) == string.reverse(tostring(i)))\
    \ then\n            if (i % 2 == 0) then\n                even_cnt = even_cnt\
    \ + 1\n            else\n                odd_cnt = odd_cnt + 1\n            end\n\
    \        end\n    end\n    return even_cnt, odd_cnt\nend", "    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if i == tostring(i):reverse():tonumber()\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local even = 0\n    local odd = 0\n\
    \    for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local r, even, odd = n, 0, 0\n    while n > 0 do\n        local d = n % 10\n\
    \        if d % 2 == 0 then\n            even = even + r - n + 1\n        else\n\
    \            odd = odd + r - n + 1\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return even, odd\nend", "    local odd = 0\n    local even = 0\n\
    \    for i = 1, n do\n        if tostring(i) == string.reverse(tostring(i)) then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local function is_palindrome(num)\n        local\
    \ str = tostring(num)\n        for i = 1, math.floor(#str / 2) do\n          \
    \  if str:sub(i, i) ~= str:sub(#str - i + 1, #str - i + 1) then\n            \
    \    return false\n            end\n        end\n        return true\n    end\n\
    \    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    -- type n: int\n    -- rtype: tuple[int,\
    \ int]\n    local even = 0\n    local odd = 0\n    for i = 1, n do\n        if\
    \ i % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend", "    local count_even,\
    \ count_odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n  \
    \          if is_even(i) then\n                count_even = count_even + 1\n \
    \           else\n                count_odd = count_odd + 1\n            end\n\
    \        end\n    end\n    return count_even, count_odd\nend", "    local even_cnt,\
    \ odd_cnt = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n    \
    \        if i % 2 == 0 then\n                even_cnt = even_cnt + 1\n       \
    \     else\n                odd_cnt = odd_cnt + 1\n            end\n        end\n\
    \    end\n    return even_cnt, odd_cnt\nend", "    local even_cnt, odd_cnt = 0,\
    \ 0\n    for i = 1, n do\n        if i < 10 then\n            odd_cnt = odd_cnt\
    \ + 1\n        elseif i < 100 then\n            even_cnt = even_cnt + 1\n    \
    \    elseif i < 1000 then\n            if i % 11 == 0 then\n                odd_cnt\
    \ = odd_cnt + 1\n            else\n                even_cnt = even_cnt + 1\n \
    \           end\n        end\n    end\n    return even_cnt, odd_cnt\nend", " \
    \   local cache = {}\n    local function is_palindrome(num)\n        local str\
    \ = tostring(num)\n        local i, j = 1, #str\n        while i < j do\n    \
    \        if str:sub(i, i) ~= str:sub(j, j) then\n                return false\n\
    \            end\n            i, j = i + 1, j - 1\n        end\n        return\
    \ true\n    end\n    local function helper(num)\n        if cache[num] then\n\
    \            return cache[num]\n        end\n        if num == 1 then\n      \
    \      return 1, 0\n        end\n        local a, b = helper(num - 1)\n      \
    \  if is_palindrome(num) then\n            if num % 2 == 0 then\n            \
    \    return a + 1, b\n            else\n                return a, b + 1\n    \
    \        end\n        else\n            return a, b\n        end\n    end\n  \
    \  return helper(n)\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if i < 10 then\n            odd = odd + 1\n        elseif i % 10 == 0\
    \ then\n            -- pass\n        else\n            local si = tostring(i)\n\
    \            local sr = string.reverse(si)\n            if si == sr then\n   \
    \             if i % 2 == 0 then\n                    even = even + 1\n      \
    \          else\n                    odd = odd + 1\n                end\n    \
    \        end\n        end\n    end\n    return even, odd\nend", "    local res,\
    \ e, o = {}, 0, 0\n    for i = 1, n do\n        local s = tostring(i)\n      \
    \  if s == s:reverse() then\n            if i % 2 == 0 then\n                e\
    \ = e + 1\n            else\n                o = o + 1\n            end\n    \
    \    end\n    end\n    return e, o\nend", "    -- a palindrome number is even\
    \ if and only if the first digit and the last digit are the same\n    -- the last\
    \ digit of a palindrome number can be obtained by modulo 10\n    -- a palindrome\
    \ number with zero for the last digit is odd, otherwise even\n    local odd, even\
    \ = 0, 0\n    for i = 1, n do\n        local last = i % 10\n        if last ==\
    \ 0 then\n            odd = odd + 1\n        else\n            even = even + 1\n\
    \        end\n    end\n    return even, odd\nend", "    local even_cnt, odd_cnt\
    \ = 0, 0\n    for i = 1, n do\n        if n % 2 == 0 then\n            even_cnt\
    \ = even_cnt + 1\n        else\n            odd_cnt = odd_cnt + 1\n        end\n\
    \    end\n    return even_cnt, odd_cnt\nend", "    local even_cnt, odd_cnt = 0,\
    \ 0\n    for i = 1, n do\n        if math.tointeger(tostring(i)) == tonumber(string.reverse(tostring(i)))\
    \ then\n            if i % 2 == 0 then\n                even_cnt = even_cnt +\
    \ 1\n            else\n                odd_cnt = odd_cnt + 1\n            end\n\
    \        end\n    end\n    return even_cnt, odd_cnt\nend", "    local cnt_even,\
    \ cnt_odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n            cnt_odd\
    \ = cnt_odd + 1\n        elseif i % 10 == 0 then\n            -- pass\n      \
    \  else\n            local n1, n2 = i, 0\n            while n1 > 0 do\n      \
    \          n2 = n2 * 10 + n1 % 10\n                n1 = math.floor(n1 / 10)\n\
    \            end\n            if n2 == i then\n                if i % 2 == 0 then\n\
    \                    cnt_even = cnt_even + 1\n                else\n         \
    \           cnt_odd = cnt_odd + 1\n                end\n            end\n    \
    \    end\n    end\n    return cnt_even, cnt_odd\nend", "    local even, odd =\
    \ 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    local i = 1\n    while i <= n do\n        if i == 1 then\n \
    \           odd = odd + 1\n        elseif i < 10 then\n            even = even\
    \ + 1\n        else\n            local s = tostring(i)\n            local l =\
    \ math.floor(#s / 2)\n            local a, b = s:sub(1, l), s:sub(#s + 1 - l,\
    \ #s)\n            if a == b then\n                even = even + 1\n         \
    \   end\n        end\n        i = i + 1\n    end\n    return even, odd\nend",
  "    local count = 0\n    for i = 1, n do\n        if i < 10 then\n            count\
    \ = count + 1\n        elseif i >= 10 and i < 100 then\n            local s =\
    \ tostring(i)\n            if s:sub(1, 1) == s:sub(2, 2) then\n              \
    \  count = count + 1\n            end\n        elseif i >= 100 and i < 1000 then\n\
    \            local s = tostring(i)\n            if s:sub(1, 1) == s:sub(3, 3)\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count, n - count\nend\nreturn even_odd_palindrome", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n            odd = odd\
    \ + 1\n        elseif i % 11 == 0 then\n            even = even + 1\n        else\n\
    \            local s = tostring(i)\n            local is_even = (s:len() % 2 ==\
    \ 0)\n            local f, e = s:sub(1, s:len() // 2), s:sub((s:len() + 1) //\
    \ 2)\n            if f == e:reverse() then\n                if is_even then\n\
    \                    even = even + 1\n                else\n                 \
    \   odd = odd + 1\n                end\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    if n == 1 then\n        return 0, 1\n    end\n\
    \    if n == 2 then\n        return 1, 1\n    end\n    if n == 3 then\n      \
    \  return 1, 2\n    end\n    if n == 4 then\n        return 2, 2\n    end\n  \
    \  if n == 5 then\n        return 2, 3\n    end\n    if n == 6 then\n        return\
    \ 3, 3\n    end\n    if n == 7 then\n        return 3, 4\n    end\n    if n ==\
    \ 8 then\n        return 4, 4\n    end\n    if n == 9 then\n        return 4,\
    \ 5\n    end\n    if n == 10 then\n        return 5, 5\n    end\n    if n == 11\
    \ then\n        return 5, 6\n    end\n    if n == 12 then\n        return 6, 6\n\
    \    end\n    local odd_head = 8\n    local even_head = 4\n    local odd_tail\
    \ = 5\n    local even_tail = 1\n    local odd_num = 3\n    local even_num = 2\n\
    \    for i = 13, n do\n        local l = string.len(i)\n        local a, b = string.sub(i,\
    \ 1, l / 2), string.sub(i, math.ceil(l / 2) + 1, l)\n        if a == b then\n\
    \            odd_num = odd_num + 1\n            even_num = even_num + 1\n    \
    \    else\n            if a == even_head and b == even_tail then\n           \
    \     even_num = even_num + 1\n            end\n            if a == odd_head and\
    \ b == odd_tail then\n                odd_num = odd_num + 1\n            end\n\
    \        end\n        even_head = even_head + 1\n        even_tail = even_tail\
    \ + 1\n        odd_head = odd_head + 1\n        odd_tail = odd_tail + 1\n    end\n\
    \    return even_num, odd_num\nend\n_G.even_odd_palindrome = even_odd_palindrome",
  "    local even, odd = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n \
    \           even = even + 1\n        else\n            odd = odd + 1\n       \
    \ end\n    end\n    return even, odd\nend", "    local odd, even = 0, 0\n    for\
    \ i = 1, n do\n        if i < 10 then\n            odd = odd + 1\n        elseif\
    \ i < 100 then\n            even = even + 1\n        elseif i < 1000 then\n  \
    \          if math.floor(i / 10) == math.floor(i / 100) % 10 then\n          \
    \      even = even + 1\n            else\n                odd = odd + 1\n    \
    \        end\n        end\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if tostring(i) == string.reverse(tostring(i))\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local even_count, odd_count = 0, 0\n\
    \    for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even_count = even_count + 1\n            else\n    \
    \            odd_count = odd_count + 1\n            end\n        end\n    end\n\
    \    return even_count, odd_count\nend", "    local function is_palindrome(i)\n\
    \        local s = tostring(i)\n        for j = 1, #s / 2 do\n            if s:sub(j,\
    \ j) ~= s:sub(#s - j + 1, #s - j + 1) then\n                return false\n   \
    \         end\n        end\n        return true\n    end\n    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if\
    \ i % 2 == 0 then\n                even = even + 1\n            else\n       \
    \         odd = odd + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local cache = {[0] = 1, [1] = 1}\n    local function helper(n)\n\
    \        if cache[n] then\n            return cache[n]\n        end\n        local\
    \ p = 10 ^ (n - 1)\n        cache[n] = 9 * helper(n - 2) + p\n        return cache[n]\n\
    \    end\n    local neven, nodd = 0, 0\n    local ns = tostring(n)\n    local\
    \ digits = #ns\n    for i = 1, digits do\n        local d = tonumber(ns:sub(i,\
    \ i))\n        neven = neven + helper(digits - i)\n        if i < digits then\n\
    \            local r = math.floor(n / (10 ^ (i + 1)))\n            if d > 0 then\n\
    \                nodd = nodd + r * helper(digits - i - 1)\n            else\n\
    \                nodd = nodd + (r - 1) * helper(digits - i - 1)\n            end\n\
    \        end\n        if d % 2 == 0 then\n            neven = neven + 1\n    \
    \    else\n            nodd = nodd + 1\n        end\n    end\n    return neven,\
    \ nodd\nend", "    local cnt_even, cnt_odd = 0, 0\n    for i = 1, n do\n     \
    \   if i % 10 == 0 then goto continue end\n        local str = tostring(i)\n \
    \       local len = #str\n        local left, right = 1, len\n        while left\
    \ < right do\n            if str:sub(left, left) ~= str:sub(right, right) then\
    \ goto continue end\n            left, right = left + 1, right - 1\n        end\n\
    \        local is_even = len % 2 == 0\n        if is_even then cnt_even = cnt_even\
    \ + 1 else cnt_odd = cnt_odd + 1 end\n        ::continue::\n    end\n    return\
    \ cnt_even, cnt_odd\nend", "    local odd, even = 0, 0\n    for i = 1, n do\n\
    \        if i < 10 then\n            odd = odd + 1\n        elseif (i % 10 ==\
    \ 0) or (i >= 10 and i < 100 and i % 11 == 0) then\n            even = even +\
    \ 1\n        else\n            local s = tostring(i)\n            local sz = math.floor(#s\
    \ / 2)\n            if sz == 1 then\n                local part1, part2 = s:sub(1,\
    \ sz), s:sub(sz + 1)\n                if part1 == part2 then\n               \
    \     odd = odd + 1\n                end\n            else\n                local\
    \ part1, part2 = s:sub(1, sz), s:sub(#s - sz + 1)\n                if part1 ==\
    \ part2 then\n                    if (#s % 2 == 0) then\n                    \
    \    even = even + 1\n                    else\n                        odd =\
    \ odd + 1\n                    end\n                end\n            end\n   \
    \     end\n    end\n    return even, odd\nend", "    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if i == string.reverse(i) then\n            if i\
    \ % 2 == 0 then\n                even = even + 1\n            else\n         \
    \       odd = odd + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local function is_palindrome(n)\n        local s = tostring(n)\n\
    \        local len = #s\n        local m = math.floor(len / 2)\n        for i\
    \ = 1, m do\n            if s:sub(i, i) ~= s:sub(len - i + 1, len - i + 1) then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local even = 0\n    local odd = 0\n\
    \    for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local is_palindrome = function(a)\n        local t = {}\n        for i = 1,\
    \ #a do\n            table.insert(t, a[i])\n        end\n        for i = 1, #a\
    \ do\n            if t[i] ~= a[#a - i + 1] then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local dfs = function(n,\
    \ s, path, paths)\n        if #path > n then\n            return\n        end\n\
    \        if #path > 0 and is_palindrome(path) then\n            table.insert(paths,\
    \ path)\n        end\n        for i = s, n do\n            dfs(n, i + 1, {i, table.unpack(path)},\
    \ paths)\n        end\n    end\n    local paths = {}\n    dfs(n, 1, {}, paths)\n\
    \    local even = 0\n    local odd = 0\n    for _, path in ipairs(paths) do\n\
    \        if #path % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n    end\n    return even, odd\nend", " \
    \   local even, odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n    \
    \        odd = odd + 1\n        elseif i % 10 == 0 then\n            -- n1 n2\
    \ n3 n2 n1, where n1 ~ n3 are non-zero digits and n2 is zero\n            even\
    \ = even + 1\n        elseif i % 11 == 0 then\n            -- n1 n2 ... n2 n1\n\
    \            even = even + 1\n        else\n            -- any other palindrome\n\
    \            local t = {}\n            local j = i\n            while j > 0 do\n\
    \                table.insert(t, j % 10)\n                j = math.floor(j / 10)\n\
    \            end\n            local flag = true\n            for j = 1, #t / 2\
    \ do\n                if t[j] ~= t[#t - j + 1] then\n                    flag\
    \ = false\n                    break\n                end\n            end\n \
    \           if flag then\n                if i % 2 == 0 then\n               \
    \     even = even + 1\n                else\n                    odd = odd + 1\n\
    \                end\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local count_even, count_odd = 0, 0\n    for i = 1, n do\n  \
    \      if #(tostring(i)) % 2 == 0 then\n            count_even = count_even +\
    \ 1\n        else\n            count_odd = count_odd + 1\n        end\n    end\n\
    \    return count_even, count_odd\nend", "    local count = {}\n    count[0] =\
    \ 0\n    count[1] = 1\n    count[2] = 2\n    for i = 3, n do\n        local m\
    \ = i\n        local s = math.floor(m / 10)\n        local r = 0\n        while\
    \ m > 0 do\n            r = r * 10 + m % 10\n            m = math.floor(m / 10)\n\
    \        end\n        if r == i then\n            count[i] = count[i - 1] + 1\n\
    \        else\n            count[i] = count[i - 1]\n        end\n    end\n   \
    \ local even, odd = 0, 0\n    for i = 0, n do\n        if count[i] % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return even, odd\nend\n_G.even_odd_palindrome = even_odd_palindrome",
  "    local c1, c2 = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if i % 2 == 0 then\n                c1 = c1 + 1\n            else\n\
    \                c2 = c2 + 1\n            end\n        end\n    end\n    return\
    \ c1, c2\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if tostring(i)\
    \ == string.reverse(tostring(i)) then\n            if math.fmod(i, 2) == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return even, odd\nend", "  \
    \  local function palindrome(i)\n        local s = string.format(\"%d\", i)\n\
    \        local n = #s\n        for i = 1, n / 2 do\n            if s:sub(i, i)\
    \ ~= s:sub(n - i + 1, n - i + 1) then\n                return false\n        \
    \    end\n        end\n        return true\n    end\n    local even, odd = 0,\
    \ 0\n    for i = 1, n do\n        if palindrome(i) then\n            if i % 2\
    \ == 0 then\n                even = even + 1\n            else\n             \
    \   odd = odd + 1\n            end\n        end\n    end\n    return even, odd\n\
    end", "    local function is_palindrome(n)\n        local m = n\n        local\
    \ s = 0\n        while m > 0 do\n            s = s * 10 + m % 10\n           \
    \ m = math.floor(m / 10)\n        end\n        return s == n\n    end\n    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n  \
    \          if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    if n % 2 == 0 then\n     \
    \   even = n / 2\n        odd = n / 2\n    else\n        even = (n - 1) / 2\n\
    \        odd = (n + 1) / 2\n    end\n    return even, odd\nend", "    local function\
    \ is_palindrome(n)\n        local t = {}\n        while n > 0 do\n           \
    \ table.insert(t, n % 10)\n            n = math.floor(n / 10)\n        end\n \
    \       local i, j = 1, #t\n        while i < j do\n            if t[i] ~= t[j]\
    \ then\n                return false\n            end\n            i = i + 1\n\
    \            j = j - 1\n        end\n        return true\n    end\n    local count_even,\
    \ count_odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n  \
    \          if i % 2 == 0 then\n                count_even = count_even + 1\n \
    \           else\n                count_odd = count_odd + 1\n            end\n\
    \        end\n    end\n    return count_even, count_odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n        \
    \    if is_even(i) then\n                even = even + 1\n            else\n \
    \               odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    local a, b, div = {}, {},\
    \ 1\n    for i = 1, math.floor(math.log10(n)) do\n        a[i] = math.floor(n\
    \ / div) % 10\n        b[i] = math.floor(n / (div * 10)) % 10\n        div = div\
    \ * 10\n    end\n    for i = 1, #a do\n        if a[i] == b[i] then\n        \
    \    if a[i] == 0 then\n                odd = odd + 1\n            else\n    \
    \            even = even + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i == 1 or i == 10 then\n            even = even + 1\n        elseif i == 11\
    \ then\n            odd = odd + 1\n        else\n            local s = tostring(i)\n\
    \            local m = #s // 2\n            local head, tail = s:sub(1, m), s:sub(#s\
    \ - m + 1, #s)\n            if head == tail then\n                if #s % 2 ==\
    \ 0 then\n                    even = even + 1\n                else\n        \
    \            odd = odd + 1\n                end\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if i < 10 then\n            odd = odd + 1\n        elseif is_palindrome(i)\
    \ then\n            local last = i % 10\n            if last == 0 or last == 2\
    \ or last == 4 or last == 6 or last == 8 then\n                even = even + 1\n\
    \            else\n                odd = odd + 1\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local odd, even = 0, 0\n    for i =\
    \ 1, n do\n        if tostring(i) == string.reverse(tostring(i)) then\n      \
    \      if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i < 10 then\n            odd = odd + 1\n        elseif i % 10 == 0 then\n  \
    \          even = even + 1\n        else\n            local tmp = i\n        \
    \    local rev = 0\n            while tmp > 0 do\n                rev = rev *\
    \ 10 + tmp % 10\n                tmp = math.floor(tmp / 10)\n            end\n\
    \            if rev == i then\n                if i % 2 == 0 then\n          \
    \          even = even + 1\n                else\n                    odd = odd\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local odd, even = 0, 0\n    for i = 1, n do\n        if\
    \ i < 10 then\n            odd = odd + 1\n        elseif i % 10 == 0 then\n  \
    \          -- ignore numbers with last digit 0 (multiples of 10)\n        else\n\
    \            local rev = 0\n            local k = i\n            while k > 0 do\n\
    \                rev = rev * 10 + k % 10\n                k = math.floor(k / 10)\n\
    \            end\n            if rev == i then\n                if i % 2 == 0\
    \ then\n                    even = even + 1\n                else\n          \
    \          odd = odd + 1\n                end\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local function is_palindrome(num)\n\
    \        local s = tostring(num)\n        local n = #s\n        for i = 1, n /\
    \ 2 do\n            if s:sub(i, i) ~= s:sub(n - i + 1, n - i + 1) then\n     \
    \           return false\n            end\n        end\n        return true\n\
    \    end\n    local odd, even = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local p1, p2 = string.match(tostring(n),\
    \ \"^(1*)(.*)$\")\n    local half = string.reverse(p2)\n    local e, o = 0, 0\n\
    \    if #p1 % 2 == 0 then\n        e = e + 1\n    else\n        o = o + 1\n  \
    \  end\n    if #p2 % 2 == 0 then\n        o = o + 1\n    else\n        e = e +\
    \ 1\n    end\n    if p2 ~= \"\" then\n        local nums = 2 ^ #p2\n        e\
    \ = e + nums // 2\n        o = o + nums // 2\n    end\n    return e, o\nend",
  "    local count = 0\n    for i = 1, n do\n        if i < 10 then\n            count\
    \ = count + 1\n        elseif i % 11 == 0 then\n            count = count + 2\n\
    \        else\n            local s = tostring(i)\n            local len = #s\n\
    \            local flag = true\n            for j = 1, math.floor(len / 2) do\n\
    \                if s:sub(j, j) ~= s:sub(len - j + 1, len - j + 1) then\n    \
    \                flag = false\n                    break\n                end\n\
    \            end\n            if flag then\n                count = count + 2\n\
    \            end\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        if i < 10 then\n            count = count\
    \ + 1\n        elseif is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count, n - count\nend", "    local cnt = 0\n    for i = 1, n do\n  \
    \      if not string.match(tostring(i), '0*(.)%1$') then\n            cnt = cnt\
    \ + 1\n        end\n    end\n    return (n - cnt) / 2, cnt\nend", "    local cnt\
    \ = 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            cnt\
    \ = i % 2 == 0 and cnt + 1 or cnt\n        end\n    end\n    return cnt, n - cnt\n\
    end", "    if n < 1 or n > 10^3 then\n        return nil\n    end\n    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n        \
    \    if i % 2 == 0 then\n                even = even + 1\n            else\n \
    \               odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    if n >= 1 then\n        even,\
    \ odd = 1, 1\n    end\n    for _ = 2, n do\n        local n1, n2 = odd, even\n\
    \        even = odd\n        odd = n1 + n2\n    end\n    return even, odd\nend",
  "    local str = tostring(n)\n    local len = #str\n    local even, odd = 0, 0\n\
    \    if str[1] == str[len] then\n        odd = odd + 1\n    end\n    for i = 1,\
    \ len - 1 do\n        if str[i] == str[len + 1 - i] then\n            if i ==\
    \ len - i then\n                even = even + 1\n            else\n          \
    \      even = even + 2\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local function is_palindrome(n)\n        local x = n\n     \
    \   local y = 0\n        while x > 0 do\n            y = y * 10 + x % 10\n   \
    \         x = math.floor(x / 10)\n        end\n        return y == n\n    end\n\
    \    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local cnt = { even = 0, odd = 0 }\n\
    \    local rev\n    for i = 1, n do\n        rev = math.floor(i / 10)\n      \
    \  while i > rev do\n            i, rev = i % 10, rev * 10 + i % 10\n        end\n\
    \        if i == rev or i == math.floor(rev / 10) then\n            cnt[(math.floor(math.log10(i))\
    \ + 1) % 2 == 0 and \"even\" or \"odd\"] = cnt[(math.floor(math.log10(i)) + 1)\
    \ % 2 == 0 and \"even\" or \"odd\"] + 1\n        end\n    end\n    return cnt.even,\
    \ cnt.odd\nend", "    local res, dp = {0, 0}, {1, 2}\n    for i = 3, n do\n  \
    \      if i % 2 == 0 then\n            dp[1] = dp[1] + 1\n        else\n     \
    \       dp[2] = dp[2] + 1\n        end\n    end\n    return {dp[1], dp[2]}\nend",
  "    local even, odd = 0, 0\n    for i = 1, n do\n        if tostring(i) == string.reverse(tostring(i))\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    -- TODO\nend", "    local res = {}\n\
    \    for i = 1, n do\n        if i % 2 == 0 then\n            res[1] = (res[1]\
    \ or 0) + 1\n        else\n            res[2] = (res[2] or 0) + 1\n        end\n\
    \    end\n    return res\nend", "    local function is_palindrome(x)\n       \
    \ local y = 0\n        local n = x\n        while n > 0 do\n            y = y\
    \ * 10 + n % 10\n            n = math.floor(n / 10)\n        end\n        return\
    \ x == y\n    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ is_palindrome(i) then\n            if i % 2 == 0 then\n                even\
    \ = even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local e, o = 0, 0\n  \
    \  local i = 1\n    while i <= n do\n        if is_palindrome(i) then\n      \
    \      if is_even(i) then\n                e = e + 1\n            else\n     \
    \           o = o + 1\n            end\n        end\n        i = i + 1\n    end\n\
    \    return e, o\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n   \
    \     if i % 2 == 0 then\n            even = even + 1\n        else\n        \
    \    odd = odd + 1\n        end\n    end\n    return even, odd\nend", "    local\
    \ function isPalindrome(v)\n        local s = tostring(v)\n        local b, e\
    \ = 1, #s\n        while b < e do\n            if s:sub(b, b) ~= s:sub(e, e) then\n\
    \                return false\n            end\n            b, e = b + 1, e -\
    \ 1\n        end\n        return true\n    end\n    local even, odd = 0, 0\n \
    \   for i = 1, n do\n        if isPalindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local function is_palindrome(num)\n        local n = num\n        local d =\
    \ 0\n        while n > 0 do\n            d = d * 10 + n % 10\n            n =\
    \ math.floor(n / 10)\n        end\n        return d == num\n    end\n    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n  \
    \          if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even = 0\n    local odd = 0\n    for i = 1, n do\n\
    \        if i < 10 then\n            odd = odd + 1\n        elseif i % 11 == 0\
    \ then\n            even = even + 1\n        else\n            local x = math.floor(math.log10(i))\n\
    \            local y = math.floor(i / 10 ^ x)\n            local z = y % 10\n\
    \            if z % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if math.tointeger(i) == math.tointeger(math.reverse(i)) then\n      \
    \      if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    local i = 1\n    while i <=\
    \ n do\n        local j = 0\n        while i + j <= n do\n            if i + j\
    \ == math.floor(math.log10(i + j)) + 1 then\n                if (i + j) % 2 ==\
    \ 0 then\n                    even = even + 1\n                else\n        \
    \            odd = odd + 1\n                end\n            end\n           \
    \ j = j * 10 + 1\n        end\n        i = i * 10 + 1\n    end\n    return even,\
    \ odd\nend", "    local function is_palindrome(x)\n        local s = tostring(x)\n\
    \        local l = 1\n        local r = #s\n        while l < r do\n         \
    \   if s:sub(l, l) ~= s:sub(r, r) then\n                return false\n       \
    \     end\n            l = l + 1\n            r = r - 1\n        end\n       \
    \ return true\n    end\n    local even, odd = 0, 0\n    for i = 1, n do\n    \
    \    if is_palindrome(i) then\n            if i % 2 == 0 then\n              \
    \  even = even + 1\n            else\n                odd = odd + 1\n        \
    \    end\n        end\n    end\n    return even, odd\nend", "    local ans = {0,\
    \ 0}\n    for i = 1, n do\n        if i < 10 then\n            ans[1] = ans[1]\
    \ + 1\n        elseif i < 100 then\n            ans[2] = ans[2] + 1\n        elseif\
    \ i < 1000 then\n            local a, b, c = i // 100, i // 10 % 10, i % 10\n\
    \            if a == c then\n                ans[1] = ans[1] + 1\n           \
    \ else\n                ans[2] = ans[2] + 1\n            end\n        end\n  \
    \  end\n    return ans\nend", "    local even = 0\n    local odd = 0\n    for\
    \ i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return even, odd\nend", "  \
    \  local even, odd = 0, 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            if i % 2 == 0 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local function is_palindrome(x)\n\
    \        local y = 0\n        while x > 0 do\n            y = y * 10 + x % 10\n\
    \            x = math.floor(x / 10)\n        end\n        return y == x\n    end\n\
    \    local odd, even = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if tostring(i) == string.reverse(tostring(i)) then\n      \
    \      if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for _ = 1, n do\n        if\
    \ _ < 10 then\n            odd = odd + 1\n        elseif _ < 100 then\n      \
    \      even = even + 1\n        elseif _ < 1000 then\n            if _ % 11 ==\
    \ 0 then\n                odd = odd + 1\n            else\n                even\
    \ = even + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local even, odd = 0, 0\n    if n % 2 == 0 then\n        even = even + 1\n \
    \   else\n        odd = odd + 1\n    end\n    for i = 10, n do\n        local\
    \ s = tostring(i)\n        local m = #s\n        local half = (m - m % 2) / 2\n\
    \        local even_palindrome = true\n        for j = 1, half do\n          \
    \  if s:sub(j, j) ~= s:sub(m - j + 1, m - j + 1) then\n                even_palindrome\
    \ = false\n                break\n            end\n        end\n        if even_palindrome\
    \ then\n            if m % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local e, o = 0, 0\n    for i = 1, n\
    \ do\n        if palindrome(i) then\n            if i % 2 == 0 then\n        \
    \        e = e + 1\n            else\n                o = o + 1\n            end\n\
    \        end\n    end\n    return e, o\nend", "    local even, odd = 0, 0\n  \
    \  for i = 1, n do\n        if tostring(i) == string.reverse(tostring(i)) then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local function is_palindrome(k)\n        local\
    \ s = tostring(k)\n        local i, j = 1, #s\n        while i < j do\n      \
    \      if s:sub(i, i) ~= s:sub(j, j) then\n                return false\n    \
    \        end\n            i, j = i + 1, j - 1\n        end\n        return true\n\
    \    end\n    local function is_even(k)\n        return tostring(k):len() % 2\
    \ == 0\n    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if is_even(i) then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local c1, c2 = 0, 0\n    for i = 1,\
    \ n do\n        local s = tostring(i)\n        local len = #s\n        local first\
    \ = string.sub(s, 1, math.floor(len / 2))\n        local second = string.sub(s,\
    \ math.ceil(len / 2) + 1, len)\n        local r = first .. second\n        local\
    \ r1 = string.reverse(first) .. second\n        if s == r then\n            c1\
    \ = c1 + 1\n        elseif s == r1 then\n            c2 = c2 + 1\n        end\n\
    \    end\n    return c1, c2\nend", "    local cnt_odd, cnt_even = 0, 0\n    for\
    \ i = 1, n do\n        if i % 10 == 0 then\n            goto continue\n      \
    \  end\n        local s = tostring(i)\n        local m, n = 1, #s\n        while\
    \ m < n do\n            if s:sub(m, m) ~= s:sub(n, n) then\n                goto\
    \ continue\n            end\n            m, n = m + 1, n - 1\n        end\n  \
    \      if #s % 2 == 0 then\n            cnt_even = cnt_even + 1\n        else\n\
    \            cnt_odd = cnt_odd + 1\n        end\n        ::continue::\n    end\n\
    \    return cnt_even, cnt_odd\nend", "    local function is_palindrome(x)\n  \
    \      local t = {}\n        local c = 0\n        while x > 0 do\n           \
    \ c = c + 1\n            t[c] = x % 10\n            x = math.floor(x / 10)\n \
    \       end\n        for i = 1, math.floor(c / 2) do\n            if t[i] ~= t[c\
    \ - i + 1] then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local function count_palindrome(x)\n      \
    \  local e, o = 0, 0\n        while x > 0 do\n            if is_palindrome(x)\
    \ then\n                if x % 2 == 0 then\n                    e = e + 1\n  \
    \              else\n                    o = o + 1\n                end\n    \
    \        end\n            x = x - 1\n        end\n        return e, o\n    end\n\
    \    return count_palindrome(n)\nend", "    local count_even, count_odd = 0, 0\n\
    \    for i = 1, n do\n        if (i > 10 and math.floor(math.log10(i)) % 2 ==\
    \ 0) or i < 10 then\n            count_even = count_even + 1\n        else\n \
    \           count_odd = count_odd + 1\n        end\n    end\n    return count_even,\
    \ count_odd\nend", "    local count_even, count_odd = 0, 0\n    for i = 1, n do\n\
    \        if tostring(i) == string.reverse(tostring(i)) then\n            if i\
    \ % 2 == 0 then\n                count_even = count_even + 1\n            else\n\
    \                count_odd = count_odd + 1\n            end\n        end\n   \
    \ end\n    return count_even, count_odd\nend", "    local odd, even = 0, 0\n \
    \   for i = 1, n do\n        if math.tointeger(tonumber(tostring(i):reverse()))\
    \ == i then\n            if i % 2 == 0 then\n                even = even + 1\n\
    \            else\n                odd = odd + 1\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local function is_palindrome(i)\n \
    \       local s = tostring(i)\n        local l = #s\n        local i = 1\n   \
    \     while i <= l / 2 do\n            if s:sub(i, i) ~= s:sub(l - i + 1, l -\
    \ i + 1) then\n                return false\n            end\n            i =\
    \ i + 1\n        end\n        return true\n    end\n    local even_count, odd_count\
    \ = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if\
    \ i % 2 == 0 then\n                even_count = even_count + 1\n            else\n\
    \                odd_count = odd_count + 1\n            end\n        end\n   \
    \ end\n    return even_count, odd_count\nend", "    local even, odd = 0, 0\n \
    \   for i = 1, n do\n        if i % 2 == 0 then\n            even = even + 1\n\
    \        else\n            odd = odd + 1\n        end\n    end\n    return even,\
    \ odd\nend", "    local function is_palindrome(num)\n        local s = tostring(num)\n\
    \        local i, j = 1, #s\n        while i < j do\n            if s:sub(i, i)\
    \ ~= s:sub(j, j) then\n                return false\n            end\n       \
    \     i, j = i + 1, j - 1\n        end\n        return true\n    end\n    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n  \
    \          if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local function is_palindrome(x)\n        local s = tostring(x)\n\
    \        for i = 1, #s do\n            if s:sub(i, i) ~= s:sub(#s - i + 1, #s\
    \ - i + 1) then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local cnt_even, cnt_odd = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                cnt_even = cnt_even + 1\n            else\n                cnt_odd\
    \ = cnt_odd + 1\n            end\n        end\n    end\n    return cnt_even, cnt_odd\n\
    end", "    local function is_palindrome(num)\n        local str = tostring(num)\n\
    \        local j = #str\n        for i = 1, #str do\n            if str:sub(i,\
    \ i) ~= str:sub(j, j) then\n                return false\n            end\n  \
    \          j = j - 1\n        end\n        return true\n    end\n    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n        \
    \    if i % 2 == 0 then\n                even = even + 1\n            else\n \
    \               odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local odd = 0\n    local even = 0\n    for i = 1, n do\n\
    \        if tonumber(tostring(i):reverse()) == i then\n            if i % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local even = 0\n    local odd = 0\n    for i = 1, n do\n        if i % 10 ==\
    \ 0 then\n            even = even + 1\n        elseif (i // 10) == 0 or (i //\
    \ 10) == (i % 10) then\n            odd = odd + 1\n        end\n    end\n    return\
    \ even, odd\nend", "    if n == 1 then\n        return 1, 0\n    end\n    local\
    \ even = 0\n    local odd = 0\n    local even_left = math.floor(n / 10)\n    local\
    \ odd_left = math.floor((n - 1) / 10)\n    even = even_left * 10 + 9\n    odd\
    \ = odd_left * 10 + 9\n    return even, odd\nend", "    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local even, odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n     \
    \       odd = odd + 1\n        elseif i % 10 == 0 then\n            local s =\
    \ tostring(i)\n            local s1 = s:sub(1, (#s - 1) / 2)\n            local\
    \ s2 = s:sub((#s - 1) / 2 + 1, #s)\n            if s1 == s2:reverse() then\n \
    \               even = even + 1\n            end\n        else\n            local\
    \ s = tostring(i)\n            local s1 = s:sub(1, #s / 2)\n            local\
    \ s2 = s:sub(#s / 2 + 1, #s)\n            if s1 == s2:reverse() then\n       \
    \         even = even + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local even_count, odd_count = 0, 0\n    local prefixes = {[0]\
    \ = {[0] = true}}\n    for i = 1, math.floor(math.log10(n)) do\n        prefixes[i]\
    \ = {}\n        for j = 0, 9 do\n            for p, _ in pairs(prefixes[i - 1])\
    \ do\n                prefixes[i][p * 10 + j] = true\n            end\n      \
    \  end\n    end\n    for i = 1, n do\n        local prefix_part, suffix_part =\
    \ math.floor(i / 10), i % 10\n        while prefix_part > 0 and suffix_part >\
    \ 0 do\n            if prefix_part == suffix_part then\n                even_count\
    \ = even_count + 1\n            else\n                odd_count = odd_count +\
    \ 1\n            end\n            local prefix_suffix = prefix_part % 10\n   \
    \         prefix_part = math.floor(prefix_part / 10)\n            suffix_part\
    \ = suffix_part * 10 + prefix_suffix\n        end\n        if suffix_part > 0\
    \ then\n            if prefixes[math.floor(math.log10(i))][suffix_part] then\n\
    \                even_count = even_count + 1\n            else\n             \
    \   odd_count = odd_count + 1\n            end\n        end\n    end\n    return\
    \ even_count, odd_count\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if (i % 2 == 0) then\n            even = even + 1\n        else\n   \
    \         odd = odd + 1\n        end\n    end\n    return even, odd\nend", " \
    \   local function palindrome(x)\n        local s = tostring(x)\n        local\
    \ l = 1\n        local r = #s\n        while l < r do\n            if s:sub(l,\
    \ l) ~= s:sub(r, r) then\n                return false\n            end\n    \
    \        l = l + 1\n            r = r - 1\n        end\n        return true\n\
    \    end\n    local even = 0\n    local odd = 0\n    for i = 1, n do\n       \
    \ if palindrome(i) then\n            if i % 2 == 0 then\n                even\
    \ = even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local res = {even = 0,\
    \ odd = 0}\n    for i = 1, n do\n        if is_palindrome(i) then\n          \
    \  if #(tostring(i)) % 2 == 0 then\n                res.even = res.even + 1\n\
    \            else\n                res.odd = res.odd + 1\n            end\n  \
    \      end\n    end\n    return res\nend", "    local even, odd = 0, 0\n    for\
    \ i = 1, n do\n        if n % 2 == 0 then\n            even = even + 1\n     \
    \   else\n            odd = odd + 1\n        end\n    end\n    return even, odd\n\
    end", "    local function is_palindrome(x)\n        x = tostring(x)\n        local\
    \ i, j = 1, #x\n        while i < j do\n            if x:sub(i, i) ~= x:sub(j,\
    \ j) then\n                return false\n            end\n            i, j = i\
    \ + 1, j - 1\n        end\n        return true\n    end\n    local even, odd =\
    \ 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if\
    \ i % 2 == 0 then\n                even = even + 1\n            else\n       \
    \         odd = odd + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local even = 0\n    local odd = 0\n    for i = 1, n do\n   \
    \     if is_palindrome(i) then\n            if i % 2 == 0 then\n             \
    \   even = even + 1\n            else\n                odd = odd + 1\n       \
    \     end\n        end\n    end\n    return even, odd\nend", "    local even_palindrome,\
    \ odd_palindrome = 0, 0\n    for i = 1, n do\n        if n == 1 then\n       \
    \     even_palindrome = even_palindrome + 1\n        elseif i >= 10 then\n   \
    \         if tostring(i):reverse() == tostring(i) then\n                if i %\
    \ 2 == 0 then\n                    even_palindrome = even_palindrome + 1\n   \
    \             else\n                    odd_palindrome = odd_palindrome + 1\n\
    \                end\n            end\n        else\n            if i % 2 == 0\
    \ then\n                even_palindrome = even_palindrome + 1\n            else\n\
    \                odd_palindrome = odd_palindrome + 1\n            end\n      \
    \  end\n    end\n    return even_palindrome, odd_palindrome\nend", "    local\
    \ odd, even = 0, 0\n    local n1, n2 = n, n\n    while n1 > 0 do\n        n1,\
    \ n2 = n1 // 10, n2 % 10\n        if n1 == n2 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n    end\n    if n2\
    \ == 0 then\n        return even, odd - 1\n    else\n        return even, odd\n\
    \    end\nend", "    local function is_palindrome(n)\n        local s = tostring(n)\n\
    \        local i, j = 1, #s\n        while i < j do\n            if s:sub(i, i)\
    \ ~= s:sub(j, j) then\n                return false\n            end\n       \
    \     i, j = i + 1, j - 1\n        end\n        return true\n    end\n    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n  \
    \          if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local cnt_even, cnt_odd = 0, 0\n    for i = 1, n do\n\
    \        if i == string.reverse(i) then\n            if i % 2 == 0 then\n    \
    \            cnt_even = cnt_even + 1\n            else\n                cnt_odd\
    \ = cnt_odd + 1\n            end\n        end\n    end\n    return cnt_even, cnt_odd\n\
    end", "    local function calc(d)\n        local num = 10 ^ d\n        local half\
    \ = num // 10\n        local tot = (num - half) // 2 + half\n        local even\
    \ = num // 2\n        local odd = tot - even\n        return even, odd\n    end\n\
    \    local even, odd = 0, 0\n    local d = 1\n    while n >= 10 ^ d do\n     \
    \   local even0, odd0 = calc(d)\n        local even1, odd1 = calc(d - 1)\n   \
    \     local ones = n % 10 ^ d // 10 ^ (d - 1)\n        even = even + even0 * (ones\
    \ - 1) + even1\n        odd = odd + odd0 * (ones - 1) + odd1\n        if ones\
    \ > 0 then\n            if d > 1 then\n                even = even + 1\n     \
    \       end\n            if ones > 1 then\n                odd = odd + 1\n   \
    \         end\n        end\n        d = d + 1\n    end\n    return even, odd\n\
    end", "    local res = {}\n    for i = 1, n do\n        if (i < 10 and (i == 1\
    \ or i == 3 or i == 5 or i == 7 or i == 9)) or\n           (i >= 10 and (tostring(i)\
    \ == string.reverse(tostring(i)))) then\n            if i % 2 == 0 then\n    \
    \            res[1] = (res[1] or 0) + 1\n            else\n                res[2]\
    \ = (res[2] or 0) + 1\n            end\n        end\n    end\n    return res\n\
    end", "    local count = 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            count = count + 1\n        end\n    end\n \
    \   return count, n - count\nend", "    local even, odd = 0, 0\n    for i = 1,\
    \ n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n   \
    \             even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            if i % 2 == 0 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local odd, even = 0, 0\n\
    \    for i = 1, n do\n        if i >= 1 and i <= 9 then\n            odd = odd\
    \ + 1\n        elseif i >= 10 and i <= 99 then\n            even = even + 1\n\
    \        elseif i >= 100 and i <= 999 then\n            if is_palindrome(i) then\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ i % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if i == 1 or i % 10 == 0 then\n   \
    \         -- 1 is neither odd nor even.\n            -- It's kind of a boundary\
    \ case for number with 0 as the last digit.\n            -- For example, 10, 100\
    \ are not counted.\n        elseif n % 2 == 0 then\n            -- i is even if\
    \ the digits in the middle are all 9.\n            -- Ex: i = 99, i = 999, ...\n\
    \            even = even + 1\n        else\n            -- i is odd if it's in\
    \ the form of odd + reversed_odd + odd.\n            -- Ex: i = 101, i = 1001,\
    \ ...\n            odd = odd + 1\n        end\n    end\n    return even, odd\n\
    end", "    local even, odd = 0, 0\n    for i = 1, n do\n        if i == 1 or i\
    \ == 10 then\n            odd = odd + 1\n        elseif i % 11 == 0 then\n   \
    \         even = even + 1\n        elseif is_palindrome(i) then\n            if\
    \ i % 2 == 0 then\n                even = even + 1\n            else\n       \
    \         odd = odd + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if is_even(i) then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local even = 0\n    local odd = 0\n\
    \    if n < 10 then\n        if n % 2 == 0 then\n            even = 1\n      \
    \  else\n            odd = 1\n        end\n    else\n        local t = 0\n   \
    \     local y = n\n        local x = y\n        while y >= 10 do\n           \
    \ y = y // 10\n            t = t + 1\n        end\n        odd = 9\n        even\
    \ = 1\n        if t == 1 then\n            odd = 9\n            even = 1\n   \
    \     else\n            for i = 2, t - 1 do\n                odd = odd + 9 * 10\
    \ ^ (i - 1)\n                even = even + 9 * 10 ^ (i - 1)\n            end\n\
    \            if t % 2 == 0 then\n                local m = 10 ^ (t - 1)\n    \
    \            local h = 10 ^ t - 1\n                local j = x - h\n         \
    \       odd = odd + j + 1\n                even = even + math.floor(j / 2) + 1\n\
    \            else\n                local j = x - 10 ^ t + 1\n                odd\
    \ = odd + j + 1\n                even = even + math.floor(j / 2)\n           \
    \ end\n        end\n    end\n    return even, odd\nend", "    local count = {even\
    \ = 0, odd = 0}\n    for i = 1, n do\n        if i % 10 == 0 then goto continue\
    \ end\n        local palindrome = string.reverse(tostring(i))\n        if i %\
    \ 2 == 0 then\n            if palindrome == tostring(i) then\n               \
    \ count.even = count.even + 1\n            end\n        else\n            if palindrome\
    \ == tostring(i) then\n                count.odd = count.odd + 1\n           \
    \ end\n        end\n        ::continue::\n    end\n    return count.even, count.odd\n\
    end", "    local function is_palindrome(num)\n        local half = 10\n      \
    \  local pal = 0\n        while num >= half do\n            pal = pal * 10 + num\
    \ % 10\n            num = num // 10\n        end\n        return num == pal\n\
    \    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local odd, even = 1, 0\n    for i =\
    \ 1, n do\n        if i < 10 then\n            odd = odd + 1\n        elseif i\
    \ < 100 then\n            if i % 11 == 0 then\n                odd = odd + 1\n\
    \            else\n                even = even + 1\n            end\n        elseif\
    \ i < 1000 then\n            if i % 11 == 0 then\n                odd = odd +\
    \ 1\n            elseif i % 100 == 0 then\n                even = even + 1\n \
    \           else\n                local d = math.floor(i / 100)\n            \
    \    if math.floor(i / 10) % 10 == d then\n                    odd = odd + 1\n\
    \                else\n                    even = even + 1\n                end\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ odds, evens = 0, 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            if i % 2 == 0 then\n                evens =\
    \ evens + 1\n            else\n                odds = odds + 1\n            end\n\
    \        end\n    end\n    return evens, odds\nend", "    local e, o = 0, 0\n\
    \    for i = 1, n do\n        if i % 10 == 0 then\n            goto continue\n\
    \        end\n        local t = { }\n        local x = i\n        while x > 0\
    \ do\n            t[#t + 1] = x % 10\n            x = math.floor(x / 10)\n   \
    \     end\n        x = 0\n        for j = 1, #t do\n            x = x * 10 + t[j]\n\
    \        end\n        if x == i then\n            if i % 2 == 0 then\n       \
    \         e = e + 1\n            else\n                o = o + 1\n           \
    \ end\n        end\n        ::continue::\n    end\n    return e, o\nend", "  \
    \  local even, odd = 0, 0\n    for _ = 1, n do\n        if is_palindrome(_) then\n\
    \            if _ % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return even, odd\nend", "   \
    \ local even, odd = 0, 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            if i % 2 == 0 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local function is_palindrome(num)\n\
    \        local str = tostring(num)\n        local i, j = 1, #str\n        while\
    \ i < j do\n            if str:sub(i, i) ~= str:sub(j, j) then\n             \
    \   return false\n            end\n            i, j = i + 1, j - 1\n        end\n\
    \        return true\n    end\n    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            if i % 2 == 0 then\n          \
    \      even = even + 1\n            else\n                odd = odd + 1\n    \
    \        end\n        end\n    end\n    return even, odd\nend", "    if n == 1\
    \ then\n        return 1, 0\n    end\n    local odd = n // 2 + 1\n    if n % 2\
    \ == 0 then\n        odd = odd - 1\n    end\n    return n - odd, odd\nend", " \
    \   local even_cnt, odd_cnt = 0, 0\n    for i = 1, n do\n        if palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even_cnt = even_cnt +\
    \ 1\n            else\n                odd_cnt = odd_cnt + 1\n            end\n\
    \        end\n    end\n    return even_cnt, odd_cnt\nend", "    -- n_odd: num\
    \ of odd palindrome\n    -- n_even: num of even palindrome\n    local n_odd, n_even\
    \ = 1, 0\n    -- odd palindrome: 111, 121, ..., 989, 999\n    -- even palindrome:\
    \ 0, 1, ..., 9, 11, 22, ..., 88, 99\n    -- num of palindrome(m digits): 10^(m\
    \ - 1)\n    local m = 1\n    while true do\n        local n_palin = math.pow(10,\
    \ m - 1)\n        if m % 2 == 1 then -- odd digits\n            n_odd = n_odd\
    \ + n_palin\n        else -- even digits\n            n_even = n_even + n_palin\n\
    \        end\n        if n_palin > n then\n            break\n        end\n  \
    \      m = m + 1\n    end\n    return n_even, n_odd\nend", "    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if\
    \ i % 2 == 0 then\n                even = even + 1\n            else\n       \
    \         odd = odd + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local count = {0, 0}\n    for i = 1, n do\n        if (i ==\
    \ 1 or (i ~= 11 and tostring(i):reverse() == tostring(i))) then\n            count[i\
    \ % 2 + 1] = count[i % 2 + 1] + 1\n        end\n    end\n    return count[1],\
    \ count[2]\nend", "    local cnt_odd, cnt_even = 0, 0\n    for i = 1, n do\n \
    \       if i % 10 == 0 then\n            goto continue\n        end\n        local\
    \ digits = {}\n        local x = i\n        while x > 0 do\n            digits[#digits\
    \ + 1] = x % 10\n            x = math.floor(x / 10)\n        end\n        local\
    \ head, tail = 1, #digits\n        while head < tail do\n            if digits[head]\
    \ ~= digits[tail] then\n                goto continue\n            end\n     \
    \       head, tail = head + 1, tail - 1\n        end\n        if #digits % 2 ==\
    \ 0 then\n            cnt_even = cnt_even + 1\n        else\n            cnt_odd\
    \ = cnt_odd + 1\n        end\n        ::continue::\n    end\n    return cnt_even,\
    \ cnt_odd\nend", "    local even_count, odd_count = 0, 0\n    local i = 1\n  \
    \  while i <= n do\n        if is_palindrome(i) then\n            if i % 2 ==\
    \ 0 then\n                even_count = even_count + 1\n            else\n    \
    \            odd_count = odd_count + 1\n            end\n        end\n       \
    \ i = i + 1\n    end\n    return even_count, odd_count\nend", "    if n < 1 or\
    \ n > 1000 then\n        return false\n    end\n    local even, odd = 0, 0\n \
    \   for i = 1, n do\n        if is_palindrome(i) then\n            if math.fmod(i,\
    \ 2) == 0 then\n                even = even + 1\n            else\n          \
    \      odd = odd + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local function is_palindrome(n)\n        local t = {}\n    \
    \    local m = n\n        while m > 0 do\n            t[#t + 1] = m % 10\n   \
    \         m = math.floor(m / 10)\n        end\n        local i, j = 1, #t\n  \
    \      while i < j do\n            if t[i] ~= t[j] then\n                return\
    \ false\n            end\n            i = i + 1\n            j = j - 1\n     \
    \   end\n        return true\n    end\n    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return even, odd\nend", "  \
    \  local even_count, odd_count = 0, 0\n    for i = 1, n do\n        if (\"\" ..\
    \ i):reverse() == (\"\" .. i) then\n            if i % 2 == 0 then\n         \
    \       even_count = even_count + 1\n            else\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n    end\n    return even_count,\
    \ odd_count\nend", "    local odd, even = 0, 0\n    for i = 1, n do\n        if\
    \ i % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend", "    local count_even,\
    \ count_odd = 0, 0\n    for i = 1, n do\n        if math.tointeger(tostring(i):reverse())\
    \ == i then\n            if i % 2 == 0 then\n                count_even = count_even\
    \ + 1\n            else\n                count_odd = count_odd + 1\n         \
    \   end\n        end\n    end\n    return count_even, count_odd\nend", "    local\
    \ function is_palindrome(k)\n        local s = tostring(k)\n        local l =\
    \ #s\n        for i = 1, l // 2 do\n            if s:sub(i, i) ~= s:sub(l - i\
    \ + 1, l - i + 1) then\n                return false\n            end\n      \
    \  end\n        return true\n    end\n    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return even, odd\nend", "  \
    \  local dp = {}\n    dp[0] = {1, 0}\n    dp[1] = {1, 1}\n    for i = 2, n do\n\
    \        local even, odd = 0, 0\n        for k = 1, i do\n            local even_len\
    \ = k - 1\n            local odd_len = k\n            if (i - even_len >= 0) then\n\
    \                even = even + dp[i - even_len][1]\n            end\n        \
    \    if (i - odd_len >= 0) then\n                odd = odd + dp[i - odd_len][1]\n\
    \            end\n        end\n        dp[i] = {even, odd}\n    end\n    return\
    \ dp[n][1], dp[n][2]\nend", "    local nums = {}\n    local t = {\n        {},\n\
    \        {1}\n    }\n    local base = {1, 10, 100, 1000, 10000, 100000, 1000000,\
    \ 10000000, 100000000, 1000000000}\n    for i = 1, math.floor(math.log10(n)) do\n\
    \        local t1 = t[1]\n        local t2 = t[2]\n        t[1] = {}\n       \
    \ t[2] = {}\n        for _, v in ipairs(t1) do\n            for j = 0, 9 do\n\
    \                table.insert(t[1], v * 10 + j)\n            end\n        end\n\
    \        for _, v in ipairs(t2) do\n            for j = 0, 9 do\n            \
    \    local num = v * 10 + j\n                local cmp = num * base[i] + math.floor(num\
    \ / base[i])\n                if cmp <= n then\n                    table.insert(t[2],\
    \ num)\n                end\n            end\n        end\n    end\n    local\
    \ odd = #t[1] + #t[2]\n    local even = 0\n    local last = math.floor(math.log10(n))\n\
    \    for i = 2, last do\n        local tmp = 0\n        local base = math.floor(base[i]\
    \ / 10)\n        for j = 0, 9 do\n            local num = j * base + j\n     \
    \       if num <= n then\n                tmp = tmp + 1\n            end\n   \
    \     end\n        if i % 2 == 0 then\n            even = even + tmp\n       \
    \ else\n            odd = odd + tmp\n        end\n    end\n    return even, odd\n\
    end", "    local cnt1, cnt2 = 0, 0\n    for i = 1, n do\n        local x = tostring(i)\n\
    \        local y = string.reverse(x)\n        if x == y then\n            if i\
    \ % 2 == 0 then\n                cnt1 = cnt1 + 1\n            else\n         \
    \       cnt2 = cnt2 + 1\n            end\n        end\n    end\n    return cnt1,\
    \ cnt2\nend", "    local even_count, odd_count = 0, 0\n    for i = 1, n do\n \
    \       if math.tointeger(tostring(i):reverse()) == i then\n            i:len()\
    \ % 2 == 0 and even_count + 1 or odd_count + 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend", "    local even, odd = 0, 0\n    if n < 10 then\n\
    \        if n % 2 == 0 then\n            even = 1\n        else\n            odd\
    \ = 1\n        end\n    else\n        odd = 9\n        if n > 10 then\n      \
    \      local l, r = 1, 1\n            while true do\n                l = l * 10\n\
    \                r = r * 10 + 9\n                if l > n then\n             \
    \       break\n                end\n                odd = odd + 9\n          \
    \      if l <= n and n <= r then\n                    even = n - l + 1\n     \
    \               break\n                end\n                even = even + 9\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ function get_palindrome(n)\n        local r = 0\n        while n > 0 do\n  \
    \          r = r * 10 + n % 10\n            n = math.floor(n / 10)\n        end\n\
    \        return r\n    end\n    local function is_palindrome(n)\n        return\
    \ n == get_palindrome(n)\n    end\n    local function is_even(n)\n        return\
    \ n % 2 == 0\n    end\n    local function is_odd(n)\n        return n % 2 == 1\n\
    \    end\n    local even_count, odd_count = 0, 0\n    for i = 1, n do\n      \
    \  if is_palindrome(i) then\n            if is_even(i) then\n                even_count\
    \ = even_count + 1\n            elseif is_odd(i) then\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n    end\n    return even_count,\
    \ odd_count\nend", "    local c, d = 1, 2\n    for i = 1, n do\n        if i %\
    \ 10 == 0 then\n            c = c + 1\n        elseif i < 10 or i % 11 == 0 then\n\
    \            d = d + 1\n        end\n    end\n    return c, d\nend", "    local\
    \ even, odd = 0, 0\n    if n % 2 == 0 then\n        even = n / 2\n        odd\
    \ = n / 2\n    else\n        even = n / 2\n        odd = n / 2 + 1\n    end\n\
    \    return even, odd\nend", "    local function _is_palindrome(n)\n        local\
    \ t = {}\n        while n > 0 do\n            table.insert(t, n % 10)\n      \
    \      n = math.floor(n / 10)\n        end\n        local i, j = 1, #t\n     \
    \   while i < j do\n            if t[i] ~= t[j] then\n                return false\n\
    \            end\n            i = i + 1\n            j = j - 1\n        end\n\
    \        return true\n    end\n    local function _count_palindrome(n)\n     \
    \   local e, o = 0, 0\n        for i = 1, n do\n            if _is_palindrome(i)\
    \ then\n                if i % 2 == 0 then\n                    e = e + 1\n  \
    \              else\n                    o = o + 1\n                end\n    \
    \        end\n        end\n        return e, o\n    end\n    return _count_palindrome(n)\n\
    end", "    local function odd_palindrome(n)\n        local N = tostring(n)\n \
    \       for i = 1, #N - 1 do\n            if N:sub(i, i) ~= N:sub(#N - i + 1,\
    \ #N - i + 1) then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local even_count, odd_count = 0, 0\n    for\
    \ i = 1, n do\n        if odd_palindrome(i) then\n            odd_count = odd_count\
    \ + 1\n        else\n            even_count = even_count + 1\n        end\n  \
    \  end\n    return even_count, odd_count\nend", "    local function is_palindrome(i)\n\
    \        local x = i\n        local s = 0\n        while x > 0 do\n          \
    \  s = s * 10 + x % 10\n            x = math.floor(x / 10)\n        end\n    \
    \    return s == i\n    end\n    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            if i % 2 == 0 then\n          \
    \      even = even + 1\n            else\n                odd = odd + 1\n    \
    \        end\n        end\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return even, odd\nend", "    local even, odd = 0, 0\n    if n >= 2 then\n\
    \        even, odd = 1, 1\n    end\n    local function _is_palindrome(x)\n   \
    \     local y = 0\n        local t = x\n        while t > 0 do\n            y\
    \ = y * 10 + t % 10\n            t = math.floor(t / 10)\n        end\n       \
    \ return x == y\n    end\n    for i = 3, n do\n        if _is_palindrome(i) then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if i < 10 then\n            odd = odd + 1\n        elseif (i % 10) ==\
    \ 0 then\n            -- skip to avoid duplicate count\n        else\n       \
    \     local k = math.floor(math.log10(i))\n            local j = i\n         \
    \   local m = 0\n            local is_palindrome = true\n            while j >\
    \ 0 do\n                m = m + (j % 10) * 10 ^ k\n                j = math.floor(j\
    \ / 10)\n                k = k - 1\n            end\n            if m == i then\n\
    \                local j = i\n                local odd_found, even_found = false,\
    \ false\n                while j > 0 do\n                    if (j % 10) % 2 ==\
    \ 0 then\n                        even_found = true\n                    else\n\
    \                        odd_found = true\n                    end\n         \
    \           j = math.floor(j / 10)\n                end\n                if even_found\
    \ and odd_found then\n                    -- skip\n                elseif even_found\
    \ then\n                    even = even + 1\n                else\n          \
    \          odd = odd + 1\n                end\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local even, odd = 0, 0\n    local is_even\
    \ = false\n    while n > 0 do\n        if n % 2 == 0 then\n            even =\
    \ even + 1\n            is_even = true\n        else\n            odd = odd +\
    \ 1\n            is_even = false\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    if is_even then\n        return even, odd\n    else\n        return\
    \ even - 1, odd + 1\n    end\nend", "    local function is_palindrome(n)\n   \
    \     if n < 0 then\n            return false\n        end\n        local m =\
    \ 0\n        while n > m do\n            m = m * 10 + n % 10\n            n =\
    \ math.floor(n / 10)\n        end\n        return n == m or n == math.floor(m\
    \ / 10)\n    end\n    local e, o = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                e = e + 1\n          \
    \  else\n                o = o + 1\n            end\n        end\n    end\n  \
    \  return e, o\nend", "    local odd, even = 0, 0\n    local s = tostring(n)\n\
    \    local i, j = 1, #s\n    while i <= j do\n        if s:sub(i, j) == s:sub(j,\
    \ i) then\n            if i == j then\n                even = even + 1\n     \
    \       else\n                odd = odd + 1\n            end\n        end\n  \
    \      i, j = i + 1, j - 1\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if string.reverse(tostring(i)) == tostring(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    if n == 1 then\n        return {1, 0}\n\
    \    end\n    if n == 2 then\n        return {0, 1}\n    end\n    local even,\
    \ odd = 1, 1\n    for i = 3, n do\n        local d = tonumber(tostring(i):reverse())\n\
    \        if i % 2 == 0 then\n            if d > i / 2 then\n                even\
    \ = even + 1\n            elseif d == i / 2 then\n                even, odd =\
    \ even + 1, odd + 1\n            else\n                odd = odd + 1\n       \
    \     end\n        else\n            if d > (i + 1) / 2 then\n               \
    \ even = even + 1\n            elseif d == (i + 1) / 2 then\n                even,\
    \ odd = even + 1, odd + 1\n            else\n                odd = odd + 1\n \
    \           end\n        end\n    end\n    return {even, odd}\nend", "    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            if i % 2 == 0 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local function is_palindrome(n)\n\
    \        local t = {}\n        local m = n\n        while m > 0 do\n         \
    \   table.insert(t, m % 10)\n            m = math.floor(m / 10)\n        end\n\
    \        local i, j = 1, #t\n        while i < j do\n            if t[i] ~= t[j]\
    \ then\n                return false\n            end\n            i = i + 1\n\
    \            j = j - 1\n        end\n        return true\n    end\n    local function\
    \ is_even(n)\n        local m = n\n        while m > 0 do\n            if m %\
    \ 2 == 0 then\n                return true\n            end\n            m = math.floor(m\
    \ / 10)\n        end\n        return false\n    end\n    local even, odd = 0,\
    \ 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if is_even(i)\
    \ then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local even, odd = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n \
    \           even = even + 1\n        else\n            odd = odd + 1\n       \
    \ end\n    end\n    return even, odd\nend", "    local even, odd = 0, 0\n    for\
    \ i = 1, n do\n        if i < 10 then\n            odd = odd + 1\n        elseif\
    \ i % 10 == 0 then\n            -- pass\n        else\n            local t = 0\n\
    \            local m = i\n            while m > 0 do\n                t = t *\
    \ 10 + m % 10\n                m = math.floor(m / 10)\n            end\n     \
    \       if t == i then\n                if i % 2 == 0 then\n                 \
    \   even = even + 1\n                else\n                    odd = odd + 1\n\
    \                end\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local even, odd = 0, 0\n    local str, rev, num\n    for i =\
    \ 1, n do\n        str = tostring(i)\n        rev = str:reverse()\n        if\
    \ str == rev then\n            num = tonumber(str)\n            if num % 2 ==\
    \ 0 then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local even = 0\n    local odd = 0\n    for _ = 1, n do\n        local r = tostring(_)\n\
    \        if r == string.reverse(r) then\n            if #r % 2 == 0 then\n   \
    \             even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even_count, odd_count = 0, 0\n    for _ = 1, n do\n        local num = tostring(_)\n\
    \        if num == string.reverse(num) then\n            if #num % 2 == 0 then\n\
    \                even_count = even_count + 1\n            else\n             \
    \   odd_count = odd_count + 1\n            end\n        end\n    end\n    return\
    \ even_count, odd_count\nend", "    local function dfs(n, cnt)\n        if n >\
    \ n then\n            return cnt\n        end\n        local left, right = math.floor(n\
    \ / 10), n % 10\n        if left == right then\n            cnt[1] = cnt[1] +\
    \ 1\n        elseif left == 0 then\n            cnt[2] = cnt[2] + 1\n        else\n\
    \            return cnt\n        end\n        if left ~= 0 then\n            dfs(left,\
    \ cnt)\n        end\n        return cnt\n    end\n    local cnt = {0, 0}\n   \
    \ for i = 1, n do\n        dfs(i, cnt)\n    end\n    return cnt\nend", "    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n  \
    \          if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    -- even palindrome count\n    local ec = 0\n    -- odd\
    \ palindrome count\n    local oc = 0\n    for i = 1, n do\n        local s = string.reverse(tostring(i))\n\
    \        if s == tostring(i) then\n            if i % 2 == 0 then\n          \
    \      ec = ec + 1\n            else\n                oc = oc + 1\n          \
    \  end\n        end\n    end\n    return ec, oc\nend", "    local function is_palindrome(num)\n\
    \        local s = tostring(num)\n        local len = #s\n        for i = 1, len\
    \ // 2 do\n            if s:sub(i, i) ~= s:sub(len - i + 1, len - i + 1) then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend\n_G.even_odd_palindrome = even_odd_palindrome",
  "    local count_even, count_odd = 0, 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            if #tostring(i) % 2 == 0 then\n           \
    \     count_even = count_even + 1\n            else\n                count_odd\
    \ = count_odd + 1\n            end\n        end\n    end\n    return count_even,\
    \ count_odd\nend\nreturn even_odd_palindrome", "    local function is_palindrome(num)\n\
    \        local function is_palindrome_help(r, l)\n            if r < l then\n\
    \                return true\n            end\n            if r > l then\n   \
    \             return false\n            end\n            if string.sub(num, r,\
    \ r) == string.sub(num, l, l) then\n                return is_palindrome_help(r\
    \ - 1, l + 1)\n            else\n                return false\n            end\n\
    \        end\n        return is_palindrome_help(#num, 1)\n    end\n    local even_cnt,\
    \ odd_cnt = 0, 0\n    for i = 1, n do\n        if is_palindrome(tostring(i)) then\n\
    \            if #tostring(i) % 2 == 0 then\n                even_cnt = even_cnt\
    \ + 1\n            else\n                odd_cnt = odd_cnt + 1\n            end\n\
    \        end\n    end\n    return even_cnt, odd_cnt\nend", "    local odd = 0\n\
    \    local even = 0\n    for i = 1, n do\n        if is_palindrome(i) then\n \
    \           if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local function is_palindrome(num)\n        local str =\
    \ tostring(num)\n        local l = 1\n        local r = #str\n        while l\
    \ < r do\n            if str:sub(l, l) ~= str:sub(r, r) then\n               \
    \ return false\n            end\n            l = l + 1\n            r = r - 1\n\
    \        end\n        return true\n    end\n    local e, o = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                e = e + 1\n            else\n                o = o + 1\n    \
    \        end\n        end\n    end\n    return e, o\nend", "    local c1, c2 =\
    \ 0, 0\n    for i = 1, n do\n        local s = tostring(i)\n        if s == string.reverse(s)\
    \ then\n            if i % 2 == 0 then\n                c1 = c1 + 1\n        \
    \    else\n                c2 = c2 + 1\n            end\n        end\n    end\n\
    \    return c1, c2\nend", "    local odd, even = 0, 0\n    for i = 1, n do\n \
    \       if string.reverse(tostring(i)) == tostring(i) then\n            if i %\
    \ 2 == 0 then\n                even = even + 1\n            else\n           \
    \     odd = odd + 1\n            end\n        end\n    end\n    return even, odd\n\
    end", "    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local odd, even = 0, 0\n    for i =\
    \ 1, n do\n        if i % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
