name: HumanEval_24_largest_divisor
language: lua
results:
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local m = math.floor(math.sqrt(n))\n    while m > 1 do\n        if n % m\
    \ == 0 then\n            return m\n        end\n        m = m - 1\n    end\n \
    \   return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xf9gylg.lua:20:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp1xf9gylg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  local i = 2\n  while i < n do\n    if n % i == 0 then\n\
    \      largest = i\n    end\n    i = i + 1\n  end\n  return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local m = n / 2\n  while m > 1 do\n    if n % m == 0 then\n      return m\n\
    \    end\n    m = m - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oz58fl4.lua:18:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmp1oz58fl4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local m = math.floor(math.sqrt(n))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpttx7_d4o.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal d = math.floor(n / 2)\n\twhile (d > 1) do\n\t\tif n % d == 0 then\n\t\t\
    \treturn d\n\t\tend\n\t\td = d - 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while n % i ~= 0 do\n        i = i + 1\n    end\n    return\
    \ i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6piaergi.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6piaergi.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k6hhb4l.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp2k6hhb4l.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n-1\n    while i > 0 do\n        if n % i == 0 then\n         \
    \   return i\n        end\n        i = i - 1\n    end\n    return nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n <= 1 then\n        return 0\n    end\n    local i = 2\n    while n %\
    \ i ~= 0 do\n        i = i + 1\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdvbfgm4.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqdvbfgm4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal d = 2\n\tlocal largest = 1\n\twhile d * d <= n do\n\t\tif n % d == 0 then\n\
    \t\t\tlargest = d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0c3vfyd.lua:21:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq0c3vfyd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  return (n % 2 == 0) and (n/2) or math.floor(n/3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u6ah372.lua:12:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1u6ah372.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tif n == 0 then return 0 end\n\tfor d = n - 1, 2, -1 do\n\t\tif n % d == 0 then\
    \ return d end\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mxq8j6b.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5mxq8j6b.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = 2\n  while n > divisor do\n    if n % divisor == 0 then\n \
    \     return divisor\n    end\n    divisor = divisor + 1\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kwdokbu.lua:18:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp2kwdokbu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    local max\
    \ = math.floor(n/2)\n    local i = max\n    while i > 1 do\n        if n % i ==\
    \ 0 then return i end\n        i = i - 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Use the Euclidean algorithm.  If n is not prime, then n = a*b where\n  --\
    \ a < n and b < n.  If a > b, then a = c*d where c < a and d < a.\n  -- We reduce\
    \ the problem to finding the largest divisor of b.\n  local a = n\n  local c =\
    \ math.sqrt(n)\n  -- Check whether sqrt(n) is integral.\n  local d = math.floor(c)\n\
    \  if c == d then\n    -- sqrt(n) is integral.  So is d.\n    return d\n  end\n\
    \  -- sqrt(n) is not integral.  So is c.\n  -- Find the largest d such that n\
    \ = c*d.\n  local d = math.floor(n/c)\n  while n % d ~= 0 do\n    d = d - 1\n\
    \  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyt10tx9.lua:30:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpyyt10tx9.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 1 then\n        return 1\n    end\n    local d = 2\n    while n %\
    \ d ~= 0 do\n        d = d + 1\n    end\n    return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9encr0q4.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9encr0q4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = math.floor(n / 2)\n    while n % d ~= 0 do\n        d = d - 1\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local ld = n - 1\n    while n % ld ~= 0 do\n        ld = ld - 1\n    end\n\
    \    return ld\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest_divisor_so_far = 1\n  for i = 2, math.floor(n / 2) do\n    if\
    \ n % i == 0 then\n      largest_divisor_so_far = i\n    end\n  end\n  return\
    \ largest_divisor_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while (divisor > 0) do\n    if (n % divisor == 0)\
    \ then\n      return divisor\n    end\n    divisor = divisor - 1\n  end\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=math.floor(n/2),1,-1 do\n    if n % i == 0 then\n      return i\n   \
    \ end\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i = 1\n\twhile i < n do\n\t\ti = i + 1\n\t\tif n % i == 0 then\n\t\t\t\
    return i\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7dv8r6z.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpr7dv8r6z.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal d = 2\n\twhile d < n do\n\t\tif n % d == 0 then\n\t\t\treturn d\n\t\t\
    end\n\t\td = d + 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoglpndic.lua:20:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpoglpndic.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local result = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn_x_cfvu.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = n-1, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Note: we could try more efficiently by looping until n^2, but this is good\
    \ enough\n  -- for the purposes of this exercise\n  local result = 1\n  local\
    \ limit = n-1\n  for i=2,limit do\n    if n % i == 0 then\n      result = i\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal lim = math.sqrt(n)\n\tfor d = 2, lim do\n\t\tif n % d == 0 then\n\t\t\t\
    return n / d\n\t\tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    local d = n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkg2pf27a.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if (n % 2 == 0) then\n        return n / 2\n    end\n    local m = math.floor(math.sqrt(n))\n\
    \    for i = m, 2, -1 do\n        if (n % i == 0) then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest_divisor = 1\n  for i = 2, n - 1 do\n    if n % i == 0 then\n\
    \      largest_divisor = i\n    end\n  end\n  return largest_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for d = math.floor(n/2), 2, -1 do\n        if math.fmod(n, d) == 0 then\n\
    \            return d\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  return n/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv19wyuci.lua:11:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmpv19wyuci.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n-1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1,1,-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = math.floor(n / 2)\n    while divisor > 1 do\n        if n\
    \ % divisor == 0 then\n            return divisor\n        end\n        divisor\
    \ = divisor - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while (n % d) ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5xlbq3s.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo5xlbq3s.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = 2, (n - 1) do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16txihnt.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp16txihnt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal d = 2\n\twhile n % d ~= 0 do\n\t\td = d + 1\n\tend\n\treturn d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzrz5o0a.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppzrz5o0a.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local b = n - 1\n  while n % b ~= 0 do\n    b = b - 1\n  end\n  return b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n % 2 == 0 then\n        return n/2\n    end\n    for i = 3, math.sqrt(n),\
    \ 2 do\n        if n % i == 0 then\n            return n/i\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i\n\tfor i = n-1, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\
    \tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = 2, n - 1 do\n        if n % i == 0 then\n            return i\n \
    \       end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93o573xj.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp93o573xj.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while (n % divisor) ~= 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnul8cfd6.lua:17:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpnul8cfd6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while d < n do\n    if n % d == 0 then\n      return d\n   \
    \ end\n    d = d + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6y5z3jz.lua:20:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc6y5z3jz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1,2,-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while n % i ~= 0 do\n        i = i - 1\n    end\n  \
    \  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = math.floor(n/2), 2, -1 do\n        if n % i == 0 then\n         \
    \   return i\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    return select(2, (n):gsub('.(.)(.)*', '%1'))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmx65pb2k.lua:5:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmpmx65pb2k.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpmx65pb2k.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal largest_divisor = 1\n\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\
    \tlargest_divisor = i\n\t\tend\n\tend\n\treturn largest_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- This infinite list will include all prime numbers\n\tlocal primes = sieve(n)\n\
    \tfor _, x in pairs(primes) do\n\t\tif n % x == 0 then\n\t\t\treturn x\n\t\tend\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5jyx7652.lua:6:\
    \ attempt to call a nil value (global 'sieve')\nstack traceback:\n\t/tmp/tmp5jyx7652.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp5jyx7652.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = math.floor(n / 2)\n    while (n % d ~= 0) do\n        d = d - 1\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp63t9c7xw.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local m = 2\n    while m * m <= n do\n        if n % m == 0 then\n      \
    \      n = n / m\n        else\n            m = m + 1\n        end\n    end\n\
    \    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukwhcwz4.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpukwhcwz4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i=2,n-1 do\n        if n % i == 0 then\n            return i\n      \
    \  end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq8tmbke.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpbq8tmbke.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 1 then\n        return 1\n    end\n    local d = 1\n    while d <=\
    \ math.sqrt(n) do\n        if n % d == 0 then\n            n = n / d\n       \
    \ else\n            d = d + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i = 2\n\twhile i < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprn1a1lln.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmprn1a1lln.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n % 2 == 0 then\n        return n / 2\n    end\n    local d = 3\n    while\
    \ n % d ~= 0 do\n        d = d + 2\n    end\n    return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1w7hc25.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpb1w7hc25.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal d = 2\n\twhile d < n do\n\t\tif n % d == 0 then\n\t\t\treturn d\n\t\t\
    end\n\t\td = d + 1\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms8sadek.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpms8sadek.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1,1,-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = math.floor(n / 2)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6yg7hee8.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local ld = n - 1\n  while n % ld ~= 0 do\n    ld = ld - 1\n  end\n  return\
    \ ld\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal divisor = n-1\n\twhile divisor > 0 do\n\t\tif n % divisor == 0 then\n\t\
    \t\treturn divisor\n\t\tend\n\t\tdivisor = divisor - 1\n\tend\n\treturn 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  return math.floor(n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mw5lo10.lua:12:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9mw5lo10.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for d = math.floor(n/2), 2, -1 do\n        if n % d == 0 then\n         \
    \   return d\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tif n < 2 then\n\t\treturn 1\n\tend\n\tfor i = 2, n do\n\t\tif n % i == 0 then\n\
    \t\t\treturn n / i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = math.floor(n/2), 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\
    \tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while d <= n do\n        if n % d == 0 then\n          \
    \  n = n/d\n        else\n            d = d + 1\n        end\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuwcs68d.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpuuwcs68d.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tif n == 1 then\n\t\treturn 1\n\tend\n\tlocal m = n - 1\n\twhile n % m ~= 0 do\n\
    \t\tm = m - 1\n\tend\n\treturn m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i=n-1, 1, -1 do\n        if n % i == 0 then\n            return i\n \
    \       end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n % 2 == 0 then\n    return largest_divisor(n/2)\n  end\n  for i = 3, math.sqrt(n),\
    \ 2 do\n    if n % i == 0 then\n      return largest_divisor(n/i)\n    end\n \
    \ end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mp6q66g.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5mp6q66g.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tlocal x = n/i\n\t\t\tif x ==\
    \ 1 then\n\t\t\t\treturn x\n\t\t\telse\n\t\t\t\treturn x\n\t\t\tend\n\t\tend\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeypzba6.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkeypzba6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local ldiv = 1\n    for i = 1, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            if i > ldiv then\n                ldiv = i\n            end\n   \
    \         if n / i > ldiv then\n                ldiv = n / i\n            end\n\
    \        end\n    end\n    return ldiv\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr12uibkt.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpr12uibkt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = math.floor(n / 2), 1, -1 do\n        if math.fmod(n, i) == 0 then\n\
    \            return i\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n < 2 then\n        return 1\n    end\n    local largest = 1\n    for\
    \ i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n     \
    \   end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i=n-1, 2, -1 do\n        if n % i == 0 then\n            return i\n \
    \       end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1, 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = math.floor(n/2)\n    while n % i ~= 0 do\n        i = i - 1\n \
    \   end\n    return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n\n    while i > 0 do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i - 1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaxb3pgt.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdaxb3pgt.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tif n > 1 then\n\t\tlocal d = 2\n\t\twhile n%d > 0 do\n\t\t\td = d + 1\n\t\t\
    end\n\t\treturn d\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwdqso1f.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbwdqso1f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n % 2 == 0 then\n        return n / 2\n    end\n    local divisor = 3\n\
    \    while n % divisor ~= 0 do\n        divisor = divisor + 2\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhyqjgp9.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmhyqjgp9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal divisor = 2\n\twhile (n % divisor ~= 0) do\n\t\tdivisor = divisor + 1\n\
    \tend\n\treturn divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zxtsziq.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7zxtsziq.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  return (n//2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c0aqfa8.lua:12:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4c0aqfa8.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n-1\n  while n % divisor ~= 0 do\n    divisor = divisor - 1\n\
    \  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 1 then\n        return 1\n    end\n    local d = 2\n    while n %\
    \ d ~= 0 do\n        d = d + 1\n    end\n    return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhq3hdpy.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvhq3hdpy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal max = math.floor(n / 2)\n\tfor i = max, 2, -1 do\n\t\tif math.fmod(n,\
    \ i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n\n  while not (divisor == 1) do\n    divisor = divisor - 1\n\
    \    if n % divisor == 0 then return divisor end\n  end\n  return 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest_d = 1\n  for i = 2, n-1 do\n    if n % i == 0 then\n      largest_d\
    \ = i\n    end\n  end\n  return largest_d\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max = math.floor(n / 2)\n  for i = max, 1, -1 do\n    if n % i == 0 then\n\
    \      return i\n    end\n  end\n  return 1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = math.floor(n/2)\n    for i = max_divisor, 2, -1 do\n\
    \        if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = math.floor(n / 2)\n    while n % divisor ~= 0 do\n      \
    \  divisor = divisor - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n-1, 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal d = 1\n\twhile n % d ~= 0 do\n\t\td = d + 1\n\tend\n\treturn d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdr_ipcf.lua:17:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmppdr_ipcf.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = math.floor(n/2), 1, -1 do\n    if (n % i == 0) then\n      return i\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local result = 1\n    local i = 2\n    while i*i <= n do\n        if n %\
    \ i == 0 then\n            result = i\n        end\n        i = i + 1\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2104aok.lua:21:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpp2104aok.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = math.floor(n / 2), 1, -1 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = n - 1, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\
    end\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local half = n // 2\n    for i = half, 2, -1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while true do\n        if n % divisor == 0 then\n\
    \            return divisor\n        end\n        divisor = divisor - 1\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = 1, n do\n    if n % i == 0 then\n      n = i\n    end\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wo12zxe.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp2wo12zxe.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64dfg_tc.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp64dfg_tc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      return n / i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n-1, 1, -1 do\n    if(i % n == 0) then\n      return i\n    end\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep12w5n6.lua:15:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpep12w5n6.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t--find the largest divisor\n\tfor i = n-1, 1, -1 do\n\t\tif n % i == 0 then\n\
    \t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=2,n-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n  return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hyk_m1e.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp5hyk_m1e.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal result = 1\n\tlocal i = 2\n\twhile i <= n do\n\t\twhile n % i == 0 do\n\
    \t\t\tresult = i\n\t\t\tn = n / i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnh_6qbb.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqnh_6qbb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n-1, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tif n == 1 then\n\t\treturn 1\n\tend\n\tlocal x = n\n\twhile n%x > 0 do\n\t\t\
    x = x - 1\n\tend\n\treturn x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4embg8sr.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4embg8sr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i=n-1,2,-1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\t\
    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = math.floor(n / 2), 1, -1 do\n        if math.fmod(n, i) == 0 then\n\
    \            return i\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = n-1, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqyzfbdt.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmqyzfbdt.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for d = n - 1, 2, -1 do\n        if n % d == 0 then\n            return d\n\
    \        end\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpib_1rxyp.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpib_1rxyp.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local last_result = 0\n  for i = 2, math.floor(n/2) do\n    if n % i == 0 then\n\
    \      last_result = i\n    end\n  end\n  return last_result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7kqb0u6.lua:17:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq7kqb0u6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 2\n    while divisor < n do\n        if n % divisor == 0\
    \ then\n            return n / divisor\n        end\n        divisor = divisor\
    \ + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i054bdr.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7i054bdr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n <= 1 then\n    return 1\n  end\n  local p = 2\n  while p < n do\n    if\
    \ (n % p) == 0 then\n      return n / p\n    end\n    p = p + 1\n  end\n  return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- We only need to check up to the square root of n\n    local limit = math.sqrt(n)\n\
    \    for i = 2, limit do\n        if n % i == 0 then\n            return n / i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local n_sqrt = math.floor(math.sqrt(n))\n  local divisor = n_sqrt\n  while\
    \ divisor > 0 do\n    if n % divisor == 0 then\n      return divisor\n    end\n\
    \    divisor = divisor - 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzauju7a0.lua:21:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpzauju7a0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal d = 2\n\twhile n % d ~= 0 do\n\t\td = d + 1\n\tend\n\treturn d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qzh7yqf.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5qzh7yqf.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local result = 2\n    local sqr_n = math.sqrt(n)\n    while result <= sqr_n\
    \ do\n        if n % result == 0 then\n            n = n / result\n          \
    \  sqr_n = math.sqrt(n)\n        else\n            result = result + 1\n     \
    \   end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcf6_2hw.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqcf6_2hw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i=n-1,1,-1 do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoz0je57r.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpoz0je57r.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- if n is divisible by 2\n  if n % 2 == 0 then\n    -- divide n by 2\n   \
    \ n = n / 2\n    -- if n is divisible by 2\n    while n % 2 == 0 do\n      --\
    \ divide n by 2\n      n = n / 2\n    end\n  end\n  -- declare i, start at 3 and\
    \ increment by 2 until\n  -- it reaches the square root of n\n  for i = 3, math.sqrt(n),\
    \ 2 do\n    -- if n is divisible by i\n    if n % i == 0 then\n      -- divide\
    \ n by i\n      n = n / i\n      -- if n is divisible by i\n      while n % i\
    \ == 0 do\n        -- divide n by i\n        n = n / i\n      end\n    end\n \
    \ end\n  -- return n\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qu6z7n_.lua:36:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9qu6z7n_.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i = math.floor(n/2)\n\twhile (n % i) ~= 0 do\n\t\ti = i - 1\n\tend\n\t\
    return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n < 2 then return n end\n    local largest = 0\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            largest = i\n        end\n    end\n \
    \   return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pdyrmxi.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0pdyrmxi.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7og38z4p.lua:20:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp7og38z4p.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58n4ic1g.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp58n4ic1g.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal largest = 1\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\
    \tlargest = i\n\t\tend\n\tend\n\treturn largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sf1rjmr.lua:19:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp9sf1rjmr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local f = 2\n  while n % f ~= 0 do\n    f = f + 1\n  end\n  return f\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vwkb4px.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0vwkb4px.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = n-1,2,-1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1mlad4i.lua:16:\
    \ expected: 1, actual: -1\nstack traceback:\n\t/tmp/tmpb1mlad4i.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  return n % 2 and n or largest_divisor(n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu2yencb.lua:11:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyu2yencb.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tassert(n >= 1, \"bad argument #1 to 'largest_divisor' (out of range)\")\n\t\
    local i = 2\n\twhile n % i ~= 0 do\n\t\ti = i + 1\n\tend\n\treturn i\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx6iwkb2.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkx6iwkb2.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dpmz3tn.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8dpmz3tn.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = 2, n do\n        if(n % i == 0) then\n            return largest_divisor(n\
    \ / i)\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nxz2hog.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8nxz2hog.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local last_factor = n\n  for i = 2, n - 1 do\n    if n % i == 0 then\n    \
    \  last_factor = i\n    end\n  end\n  return last_factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03icokci.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp03icokci.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = nil\n    for i = 1, n do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xka2nq2.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0xka2nq2.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i * i <= n do\n        if n % i == 0 then\n      \
    \      return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  for i = 2, n-1 do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = 2\n  while divisor <= n do\n    if n % divisor == 0 then\n\
    \      local result = largest_divisor(n / divisor)\n      if result > divisor\
    \ then\n        return result\n      else\n        return divisor\n      end\n\
    \    end\n    divisor = divisor + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cgpfzbp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5cgpfzbp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- todo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ldp0uog.lua:11:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp5ldp0uog.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = n - 1, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while n % i ~= 0 do\n    i = i - 1\n  end\n  return i\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- assert that n is of type 'number' and integer\n\tassert(type(n) == 'number'\
    \ and n == math.floor(n),\n\t\t\"Largest divisor can only be found for integer\
    \ n.\")\n\t-- assert that n is at least 2\n\tassert(n >= 2, \"Largest divisor\
    \ can only be found for n >= 2.\")\n\t-- loop from 2 to n-1\n\tfor i = 2, n-1\
    \ do\n\t\t-- if n is evenly divisible by i\n\t\tif n % i == 0 then\n\t\t\t-- return\
    \ i\n\t\t\treturn i\n\t\tend\n\tend\n\t-- by now, if there is a largest divisor\
    \ it must be 1.\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4snss10n.lua:27:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp4snss10n.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor d = math.floor(n/2), 2, -1 do\n\t\tif n % d == 0 then\n\t\t\treturn d\n\t\
    \tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for d = n - 1, 2, -1 do\n    if n % d == 0 then\n      return d\n    end\n\
    \  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgw9b_sw.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdgw9b_sw.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 1\n  while d * d < n do\n    if n % d == 0 then\n      return n /\
    \ d\n    end\n    d = d + 1\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06c8d333.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp06c8d333.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal divisor = n-1\n\twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\
    \tend\n\treturn divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  local limit = n / 2\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeph475y_.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- If a number is divisible by 2, then it's also divisible by 2*2 = 4.\n\
    \    -- If it's divisible by 3, then it's also divisible by 3*3 = 9.\n    -- If\
    \ it's divisible by 5, then it's also divisible by 5*5 = 25.\n    -- If it's divisible\
    \ by 7, then it's also divisible by 7*7 = 49.\n    -- If it's divisible by 11,\
    \ then it's also divisible by 11*11 = 121.\n    -- If it's divisible by 13, then\
    \ it's also divisible by 13*13 = 169.\n    -- If it's divisible by 17, then it's\
    \ also divisible by 17*17 = 289.\n    -- If it's divisible by 19, then it's also\
    \ divisible by 19*19 = 361.\n    -- If it's divisible by 23, then it's also divisible\
    \ by 23*23 = 529.\n    -- If it's divisible by 29, then it's also divisible by\
    \ 29*29 = 841.\n    -- If it's divisible by 31, then it's also divisible by 31*31\
    \ = 961.\n    -- If it's divisible by 37, then it's also divisible by 37*37 =\
    \ 1369.\n    -- If it's divisible by 41, then it's also divisible by 41*41 = 1681.\n\
    \    -- If it's divisible by 43, then it's also divisible by 43*43 = 1849.\n \
    \   -- If it's divisible by 47, then it's also divisible by 47*47 = 2209.\n  \
    \  -- If it's divisible by 53, then it's also divisible by 53*53 = 2809.\n   \
    \ -- If it's divisible by 59, then it's also divisible by 59*59 = 3481.\n    --\
    \ If it's divisible by 61, then it's also divisible by 61*61 = 3721.\n    -- If\
    \ it's divisible by 67, then it's also divisible by 67*67 = 4489.\n    -- If it's\
    \ divisible by 71, then it's also divisible by 71*71 = 5041.\n    -- If it's divisible\
    \ by 73, then it's also divisible by 73*\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf7qmo6pz.lua:37: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for d = n - 1, 2, -1 do\n        if (n % d) == 0 then\n            return\
    \ d\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- Find the greatest common divisor of n and n-1\n    while n % (n-1) ~=\
    \ 0 do\n        n = n - 1\n    end\n    return n-1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppte1au4m.lua:17:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmppte1au4m.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- check if n is even or zero\n  if n > 0 and n % 2 == 0 then\n    return n\
    \ / 2\n  end\n  -- check if n is odd\n  if n > 0 and n % 2 == 1 then\n    -- try\
    \ all numbers divisible by 2 smaller than n\n    for i = n - 1, 1, -2 do\n   \
    \   if n % i == 0 then\n        return i\n      end\n    end\n  end\n  -- n was\
    \ less than or equal to zero\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87wu85nv.lua:29:\
    \ expected: 7, actual: 1\nstack traceback:\n\t/tmp/tmp87wu85nv.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n % 2 == 0 then\n        return largest_divisor(n / 2)\n    end\n    i\
    \ = 3\n    while i < n do\n        if n % i == 0 then\n            return largest_divisor(n\
    \ / i)\n        end\n        i = i + 2\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmaadv12.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpgmaadv12.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local k = math.floor(math.sqrt(n))\n    while n % k ~= 0 do\n        k =\
    \ k - 1\n    end\n    return k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30xnwmci.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp30xnwmci.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = 1,n do\n    if n % i == 0 then\n      n = i\n    end\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnurpkuca.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpnurpkuca.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1, 2, -1 do\n    if (n % i) == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 1 then\n        return n\n    end\n    for i = math.floor(n/2), 2,\
    \ -1 do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 1 then\n        return 1\n    end\n    for i = 2, n - 1 do\n    \
    \    if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w7_o_ot.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8w7_o_ot.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65wkqxpd.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp65wkqxpd.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i=n-1,1,-1 do\n\t\tif math.fmod(n,i) == 0 then\n\t\t\treturn i\n\t\tend\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while (n % d) ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptld_unvv.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptld_unvv.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while true do\n        if n%i == 0 then\n            return\
    \ i\n        end\n        i = i + 1\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4_t3kik.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpd4_t3kik.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while d < n do\n    if n % d == 0 then\n      return d\n   \
    \ end\n    d = d + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdta7pf4.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzdta7pf4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      return i\n    end\n  end\n \
    \ return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rpm8z41.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9rpm8z41.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = n - 1\n    while d > 1 do\n        if math.fmod(n, d) == 0 then\n\
    \            return d\n        end\n        d = d - 1\n    end\n    return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz25qqdvq.lua:18:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpz25qqdvq.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = math.floor(n/2), 1, -1 do\n        if math.fmod(n, i) == 0 then\n\
    \            return i\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1,2,-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while d < n do\n        if n % d == 0 then\n           \
    \ return d\n        end\n        d = d + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkuiij9_.lua:20:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpzkuiij9_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 2\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalbfk6vv.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpalbfk6vv.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n == 0 then return nil end\n  -- we need to start at the largest potential\
    \ number\n  local floor = math.floor(math.sqrt(n))\n  for i = floor, 2, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\n  return nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbedqonz5.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpbedqonz5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = math.floor(n/2), 1, -1 do\n    if n % i == 0 then\n      return i\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = math.floor(n/2)\n    while n % divisor ~= 0 do\n        divisor\
    \ = divisor - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1,2,-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i=n-1,2,-1 do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbyzqztr.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpkbyzqztr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = math.floor(n/2)\n    local largest = 0\n    while divisor\
    \ > 1 do\n        if n % divisor == 0 then\n            largest = divisor\n  \
    \          break\n        end\n        divisor = divisor - 1\n    end\n    return\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfojcha0_.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfojcha0_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 2\n    while divisor < n do\n        local rem = n % divisor\n\
    \        if rem == 0 then\n            return divisor\n        end\n        divisor\
    \ = divisor + 1\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaigfm48b.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpaigfm48b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal m = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnf41uok9.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tassert(n > 1, \"number should be greater than 1\")\n\tlocal i = 2\n\twhile (n\
    \ % i) ~= 0 do\n\t\ti = i + 1\n\tend\n\treturn i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4k9snqkj.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4k9snqkj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = n-1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw6iz91tf.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal limit = math.floor(math.sqrt(n))\n\tfor i = 2, limit do\n\t\tif math.fmod(n,\
    \ i) == 0 then\n\t\t\treturn math.floor(n / i)\n\t\tend\n\tend\n\treturn 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i = n - 1\n\tlocal flag = true\n\twhile flag do\n\t\tif n % i == 0 then\n\
    \t\t\tflag = false\n\t\t\treturn i\n\t\telse\n\t\t\ti = i - 1\n\t\tend\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53fmnc8n.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp53fmnc8n.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i = 1\n\twhile i * i < n do\n\t\tif n % i == 0 then\n\t\t\tn = i\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd_n62bl.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpxd_n62bl.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = math.floor(n / 2), 1, -1 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal divisor = 2\n\tlocal max = 1\n\twhile (divisor <= n) do\n\t\tif (n % divisor\
    \ == 0) then\n\t\t\tmax = divisor\n\t\tend\n\t\tdivisor = divisor + 1\n\tend\n\
    \treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspz93moo.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpspz93moo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
