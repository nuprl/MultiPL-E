name: HumanEval_151_double_the_difference
language: lua
results:
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    sum = 0\n    for _, n in ipairs(lst) do\n        if n % 2 == 1 and n >= 0\
    \ and math.floor(n) == n then\n            sum = sum + (n * n)\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \terror(\"to be implemented\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ysc5yeg.lua:9:\
    \ to be implemented\nstack traceback:\n\t/tmp/tmp2ysc5yeg.lua:9: in local 'candidate'\n\
    \t/tmp/tmp2ysc5yeg.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  \n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x7v1adu.lua:17:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3x7v1adu.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local res = 0\n    for i = 1, #lst do\n        local num = lst[i]\n     \
    \   if num >= 0 and math.floor(num) == num then\n            if num % 2 == 1 then\n\
    \                res = res + num * num\n            end\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tsum = 0\n\tfor i = 1, #lst do\n\t\tif lst[i] > 0 and lst[i] % 2 == 1 then\n\t\
    \t\tsum = sum + lst[i] * lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local result = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"\
    number\" and v > 0 and v % 2 == 1 then\n            result = result + v*v\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  error(\"TODO: implement double_the_difference\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcgib4xnt.lua:9:\
    \ TODO: implement double_the_difference\nstack traceback:\n\t/tmp/tmpcgib4xnt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcgib4xnt.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tlocal v = lst[i]\n\t\tif type(v) ==\
    \ \"number\" and v >= 0 and v == math.floor(v) then\n\t\t\tif v % 2 == 1 then\n\
    \t\t\t\tsum = sum + v*v\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local function is_integer(n)\n        return n % 1 == 0\n    end\n    local\
    \ sum = 0\n    for i, v in ipairs(lst) do\n        if (is_integer(v) and v > 0\
    \ and v % 2 == 1) then\n            sum = sum + v^2\n        end\n    end\n  \
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, n in ipairs(lst) do\n        if n > 0 and n % 1\
    \ == 0 and n % 2 == 1 then\n            sum = sum + n * n\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49qbyckc.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp49qbyckc.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, value in ipairs(lst) do\n        if is_integer(value)\
    \ and value > 0 then\n            sum = sum + value * value\n        end\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnlzo_wy.lua:11:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmplnlzo_wy.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplnlzo_wy.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor k,v in pairs(lst) do\n\t\tif type(v) == \"number\" and\
    \ v % 2 == 1 and v >= 0 then\n\t\t\tsum = sum + v*v\n\t\tend\n\tend\n\treturn\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tlocal i = 1\n\twhile (i <= #lst) do\n\t\tif (lst[i] % 2 ==\
    \ 1) then\n\t\t\tsum = sum + lst[i]*lst[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4x_wshl.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpd4x_wshl.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for i,v in ipairs(lst) do\n      -- YOUR CODE HERE\n   end\n\
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cj09iql.lua:20:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp8cj09iql.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return sum_odd_squares(lst) * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49gefldm.lua:9:\
    \ attempt to call a nil value (global 'sum_odd_squares')\nstack traceback:\n\t\
    /tmp/tmp49gefldm.lua:9: in local 'candidate'\n\t/tmp/tmp49gefldm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    for _,v in ipairs(lst) do\n        if type(v) == \"\
    number\" and v % 2 == 1 and v >= 0 then\n            total = total + v * v\n \
    \       end\n    end\n    return total\nend\nprint(assert(double_the_difference({1,3,2,0})\
    \ == 10))\nprint(assert(double_the_difference({-1,-2,0}) == 0))\nprint(assert(double_the_difference({9,-2})\
    \ == 81))\nprint(assert(double_the_difference({0}) == 0))\nprint(assert(double_the_difference({})\
    \ == 0))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\n.\nRan 1 tests in 0.000 seconds, 1 success,\
    \ 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptz5n1p2g.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if math.floor(lst[i]) == lst[i] and\
    \ lst[i] >= 0 then\n      if math.fmod(lst[i], 2) == 1 then\n        sum = sum\
    \ + math.pow(lst[i], 2)\n      end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- Function body here\n    error(\"Not implemented yet\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpma5kcpcf.lua:10:\
    \ Not implemented yet\nstack traceback:\n\t/tmp/tmpma5kcpcf.lua:10: in local 'candidate'\n\
    \t/tmp/tmpma5kcpcf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local i = 0\n    for _,v in ipairs(lst) do\n        if v > 0 and v % 2 ==\
    \ 1 then\n            i = i + v^2\n        end\n    end\n    return i\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    if math.floor(v) == v and v\
    \ > 0 then\n      if v % 2 == 1 then\n        sum = sum + v^2\n      end\n   \
    \ end\n  end\n  return sum\nend\n \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, item in ipairs(lst) do\n        if (item % 2 ==\
    \ 1) and (math.floor(item) == item) and (item >= 0) then\n            sum = sum\
    \ + (item ^ 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mv8541k.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp6mv8541k.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local value = 0\n   -- your code goes here\n   return value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i2tmf_l.lua:18:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp0i2tmf_l.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    local i = 1\n    while i <= #lst do\n        local v =\
    \ lst[i]\n        if v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n\
    \        end\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvvcg9vp.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpmvvcg9vp.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \treturn 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0bik7im.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpq0bik7im.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- TODO: Implement me\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzeafrigf.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpzeafrigf.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for k, v in pairs(lst) do\n    if (v >= 0 and v % 2 == 1)\
    \ then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- TODO: Write this function\n    local oddSq = {}\n    for i = 1, #lst do\n\
    \        if lst[i] % 2 == 1 and lst[i] >= 0 then\n            local value = lst[i]\
    \ * lst[i]\n            table.insert(oddSq, value)\n        end\n    end\n   \
    \ local sum = 0\n    for i = 1, #oddSq do\n        sum = sum + oddSq[i]\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  for _, num in ipairs(lst) do\n    if math.floor(num) ==\
    \ num and num > 0 then\n      total = total + num^2\n    end\n  end\n  return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv9nilih.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpzv9nilih.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local out = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 and\
    \ v % 1 == 0 then\n      out = out + v^2\n    end\n  end\n  return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \t\tlocal sum = 0\n\t\tfor i = 1, #lst do\n\t\t\tif math.fmod(lst[i], 2) ~= 0\
    \ and lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n\t\t\t\tsum = sum + math.pow(lst[i],\
    \ 2)\n\t\t\tend\n\t\tend\n\t\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, elem in ipairs(lst) do\n    if elem > 0 and math.floor(elem)\
    \ == elem then\n      sum = sum + (elem * elem)\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy4tp76e.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpqy4tp76e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9f4xc0k9.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp9f4xc0k9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for index, num in ipairs(lst) do\n      if (num % 2 == 1)\
    \ and (num > 0) then\n         sum = sum + num*num\n      end\n   end\n   return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _,v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and math.floor(v) == v then\n            sum = sum + v*v\n       \
    \ end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq33cwdo0.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpq33cwdo0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal rt = 0\n\tfor _,v in ipairs(lst) do\n\t\tif (v>0) and (v%2==1) then\n\t\
    \t\trt = rt + v*v\n\t\tend\n\tend\n\treturn rt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if (math.floor(v) == v) and\
    \ (v > 0) and (v % 2 == 1) then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v == math.floor(v)\
    \ then\n      if v % 2 == 1 then\n        total = total + v^2\n      end\n   \
    \ end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, n in ipairs(lst) do\n        if n > 0 and n % 2\
    \ == 1 then\n            sum = sum + n * n\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local result = 0\n    for i = 1, #lst do\n        if math.floor(lst[i]) ==\
    \ lst[i] and lst[i] > 0 then\n            if math.fmod(lst[i], 2) == 1 then\n\
    \                result = result + math.pow(lst[i], 2)\n            end\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    for _, n in ipairs(lst) do\n        if n == math.floor(n)\
    \ and n >= 0 and n % 2 == 1 then\n            total = total + (n * n)\n      \
    \  end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, num in ipairs(lst) do\n        local abs_num =\
    \ math.abs(num)\n        if abs_num % 2 == 1 and abs_num == num then\n       \
    \     sum = sum + num * num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local diff = 0\n    for _,v in ipairs(lst) do\n        local val = math.modf(v)\n\
    \        if val > 0 then\n            diff = diff + math.pow(val, 2)\n       \
    \ end\n    end\n    return diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhkz890b.lua:23:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpqhkz890b.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local val = 0\n  for i = 1, #lst do\n    local x = lst[i]\n    if x % 2 ==\
    \ 1 and x > 0 then\n      val = val + x * x\n    end\n  end\n  return val\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ > 0 then\n            sum = sum + lst[i]^2\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaqdyeoz.lua:22:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpmaqdyeoz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    error(\"not implemented\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4uuchn93.lua:9:\
    \ not implemented\nstack traceback:\n\t/tmp/tmp4uuchn93.lua:9: in local 'candidate'\n\
    \t/tmp/tmp4uuchn93.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp7l10zj6.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local function double_the_difference_helper(lst, sum)\n        if lst ==\
    \ nil then\n            return sum\n        elseif type(lst[1]) == \"number\"\
    \ and lst[1] >= 0 and lst[1] % 1 == 0 and lst[1] % 2 == 1 then\n            return\
    \ double_the_difference_helper(lst[2], sum + (lst[1] * lst[1]))\n        else\n\
    \            return double_the_difference_helper(lst[2], sum)\n        end\n \
    \   end\n    return double_the_difference_helper(lst, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wi0t1w5.lua:12:\
    \ attempt to index a number value (local 'lst')\nstack traceback:\n\t/tmp/tmp4wi0t1w5.lua:12:\
    \ in function </tmp/tmp4wi0t1w5.lua:9>\n\t(...tail calls...)\n\t/tmp/tmp4wi0t1w5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- add your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tgq_m5y.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp5tgq_m5y.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _,val in ipairs(lst) do\n    if val % 2 == 1 and val >\
    \ 0 then\n      sum = sum + val*val\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- add your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp2hfppu.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppp2hfppu.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + (v * v)\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ >= 0 then\n            sum = sum + lst[i]^2\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   -- Find the sum of odd numbers\n   local sum = 0\n   for k,v in pairs(lst)\
    \ do\n      if type(v) == \"number\" and v > 0 and v % 2 == 1 then\n         sum\
    \ = sum + v*v\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local n = 0\n  for _,i in ipairs(lst) do\n    if i%2 ~= 0 and math.floor(i)\
    \ == i and i > 0 then\n      n = n + i*i\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local total = 0\n   for i, v in ipairs(lst) do\n      if v > 0 and v % 2 ==\
    \ 1 then\n         total = total + v * v\n      end\n   end\n   return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if type(lst[i]) == \"number\"\
    \ and lst[i] % 2 == 1 and lst[i] >= 0 then\n            sum = sum + lst[i] * lst[i]\n\
    \        end\n    end\n    return sum\nend\nprint(double_the_difference({1, 3,\
    \ 2, 0}))\nprint(double_the_difference({-1, -2, 0}))\nprint(double_the_difference({9,\
    \ -2}))\nprint(double_the_difference({0}))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "10\n0\n81\n0\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and math.floor(v) == v then\n            sum = sum + (v % 2 == 0 and\
    \ v or v * v)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e3lnvqo.lua:22:\
    \ expected: 25, actual: 29\nstack traceback:\n\t/tmp/tmp3e3lnvqo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\n   local add = 0\n   for i = 1,\
    \ #lst do\n      if lst[i] > 0 and lst[i] % 2 == 1 then\n         add = add +\
    \ lst[i] ^ 2\n      end\n   end\n   return add\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, num in ipairs(lst) do\n    num = math.floor(num)\n\
    \    if num > 0 and num % 2 == 1 then\n      sum = sum + num * num\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- TODO: write your code here\n  return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoolbht8.lua:17:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmphoolbht8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if (math.fmod(lst[i],2) ==\
    \ 1 and lst[i] > 0) then\n            sum = sum + lst[i]^2\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxnr58oj.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpkxnr58oj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local square_sum = 0\n  for i = 1, #lst do\n    if lst[i] >= 0 and lst[i] %\
    \ 2 == 1 then\n      square_sum = square_sum + lst[i] * lst[i]\n    end\n  end\n\
    \  return square_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy03q9qy_.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tif ((v % 2 == 1) and (v > 0)\
    \ and (v % 1 == 0)) then\n\t\t\tsum = sum + v*v\n\t\tend\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dujsgu3.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp2dujsgu3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local i = 1\n  local odd_counter = 0\n  for i,v in ipairs(lst)\
    \ do\n    if v % 2 == 1 and v >= 0 and math.floor(v) == v then\n      sum = sum\
    \ + v*v\n      odd_counter = odd_counter + 1\n    end\n  end\n  if odd_counter\
    \ == 0 then return 0 end\n  return (sum - math.ceil(sum/odd_counter))*2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j3m_lij.lua:26:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp5j3m_lij.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  error(\"Not implemented yet\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_ksl9mh.lua:9:\
    \ Not implemented yet\nstack traceback:\n\t/tmp/tmph_ksl9mh.lua:9: in local 'candidate'\n\
    \t/tmp/tmph_ksl9mh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for k, v in pairs(lst) do\n    if v%2 == 1 and v >= 0 and\
    \ v == math.floor(v) then\n      sum = sum + v*v\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    sum = 0\n    for i = 1, #lst do\n        if (lst[i] > 0 and lst[i] % 2 ==\
    \ 1) then\n            sum = sum + lst[i]^2\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhg4mlho.lua:22:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpbhg4mlho.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- YOUR CODE HERE\n    local sum = 0\n    for _, v in ipairs(lst) do\n  \
    \      if v == math.floor(v) and v > 0 then\n            if v % 2 == 1 then\n\
    \                sum = sum + math.pow(v, 2)\n            end\n        end\n  \
    \  end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- Your code here\n    local output = 0\n    for k,v in pairs(lst) do\n \
    \       if v % 2 == 1 and v > 0 then\n            output = output + v*v\n    \
    \    end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, x in ipairs(lst) do\n        if math.floor(x) ==\
    \ x and x > 0 then\n            sum = sum + x * x\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm28qq8lj.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpm28qq8lj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _,v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v % 2 == 1 and v >= 0 then\n      sum = sum + v^2\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, num in ipairs(lst) do\n        if (math.floor(num)\
    \ == num) and (num > 0) and (num % 2 == 1) then\n            sum = sum + num *\
    \ num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  for _,value in ipairs(lst) do\n    if type(value) ~= \"\
    number\" or value % 1 ~= 0 or value < 0 then\n      -- number is not an integer,\
    \ not a positive integer, or not a number,\n      -- so we ignore it\n    elseif\
    \ value % 2 == 0 then\n      -- number is an even positive integer.  We double\
    \ it and add it\n      -- to the total.\n      total = total + 2 * value\n   \
    \ else\n      -- number is an odd positive integer.  We add its square to the\
    \ total.\n      total = total + value * value\n    end\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp209qd4ge.lua:30:\
    \ expected: 25, actual: 33\nstack traceback:\n\t/tmp/tmp209qd4ge.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykxbwwm9.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpykxbwwm9.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- TODO: add your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gtt9b99.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp9gtt9b99.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\t\n\tfor _, x in ipairs(lst) do\n\t\tif x > 0 and math.mod(x,\
    \ 2) ~= 0 then\n\t\t\tsum = sum + x * x\n\t\tend\n\tend\n\t\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyq4cxt7n.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpyq4cxt7n.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyq4cxt7n.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for k, v in pairs(lst) do\n        if (v % 2 ~= 0) and\
    \ (v > 0) then\n            sum = sum + v^2\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjw6qu10.lua:23:\
    \ expected: 0, actual: 0.14\nstack traceback:\n\t/tmp/tmpqjw6qu10.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst == nil then\n        return 0\n    end\n    local sum = 0\n    for\
    \ i,v in ipairs(lst) do\n        if math.type(v) == \"integer\" and v % 2 == 1\
    \ and v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ceytknk.lua:25:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp7ceytknk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local diff = 0\n  for _, v in ipairs(lst) do\n    if (math.floor(v) == v) and\
    \ (v >= 0) and (v % 2 == 1) then\n      diff = diff + v^2\n    end\n  end\n  return\
    \ diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwn4uesvx.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpwn4uesvx.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Your code here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp004g7hq0.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp004g7hq0.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if math.floor(v) == v and v\
    \ > 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvc2eixb.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmprvc2eixb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v%2 == 1 then\n            sum = sum + v*v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, num in ipairs(lst) do\n    if (type(num) == \"number\"\
    ) and (num > 0) and (math.floor(num) == num) then\n      if (num % 2) == 1 then\n\
    \        sum = sum + (num * num)\n      end\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and lst[i] > 0\
    \ then\n      sum = sum + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local function double_the_difference_helper(lst, acc)\n        if not lst\
    \ then return acc end\n        if (lst[1] % 2 == 1) and (lst[1] > 0) then\n  \
    \          acc = acc + (lst[1] * lst[1])\n        end\n        return double_the_difference_helper(rest(lst),\
    \ acc)\n    end\n    return double_the_difference_helper(lst, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcajy6epi.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcajy6epi.lua:11: in function </tmp/tmpcajy6epi.lua:9>\n\t(...tail calls...)\n\
    \t/tmp/tmpcajy6epi.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- TODO: Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsi96eyt.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpnsi96eyt.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal total = 0\n\tfor i, v in ipairs(lst) do\n\t\tif not (type(v) == \"number\"\
    \ and v > 0 and math.floor(v) == v) then\n\t\t\t-- Ignore this number because\
    \ it's not an integer or it's negative\n\t\telseif v % 2 == 0 then\n\t\t\t-- do\
    \ nothing\n\t\telse\n\t\t\ttotal = total + v * v\n\t\tend\n\tend\n\treturn total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local count = 0\n    for k, v in pairs(lst) do\n        if v > 0 and v %\
    \ 2 == 1 then\n            count = count + (v * v)\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- local res = 0\n  -- for _,x in ipairs(lst) do\n  --   if x%2 == 1 and x\
    \ >= 0 and x == math.floor(x) then\n  --     res = res + x*x\n  --   end\n  --\
    \ end\n  -- return res\n  return sum_of_squares_odd_numbers(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp998omdmx.lua:16:\
    \ attempt to call a nil value (global 'sum_of_squares_odd_numbers')\nstack traceback:\n\
    \t/tmp/tmp998omdmx.lua:16: in local 'candidate'\n\t/tmp/tmp998omdmx.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for k,v in pairs(lst) do\n        if tonumber(v) == v\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v^2\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, value in ipairs(lst) do\n    if type(value) == \"number\"\
    \ and value == math.floor(value) and value >= 0 then\n      if value % 2 == 1\
    \ then\n        sum = sum + value * value\n      end\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    return #lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26rauesi.lua:16:\
    \ expected: 25, actual: 2\nstack traceback:\n\t/tmp/tmp26rauesi.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local result = 0\n    for i = 1, #lst do\n        if not lst[i] % 2 == 0\
    \ and lst[i] > 0 then\n            result = result + lst[i] * lst[i]\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4i14lnby.lua:11:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp4i14lnby.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4i14lnby.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal  sum = 0\n\tfor i = 1, #lst do\n\t\tif (lst[i]%2 == 0) then\n\t\t\tsum\
    \ = sum + (lst[i] * lst[i])\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fj455yi.lua:22:\
    \ expected: 25, actual: 16\nstack traceback:\n\t/tmp/tmp6fj455yi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v % 1 ==\
    \ 0 and v >= 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, i in ipairs(lst) do\n        if i % 2 == 1 and\
    \ i >= 0 then\n            sum = sum + i*i\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _,v in ipairs(lst) do\n        if(v > 0 and v % 2\
    \ == 1) then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, i in ipairs(lst) do\n    if i >= 0 and i % 2 == 1 then\
    \ sum = sum + i * i end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v%2 == 1 and v > 0 then\n            sum = sum + v*v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbg1gt8ba.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpbg1gt8ba.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for _, v in ipairs(lst) do\n      if type(v) == \"number\"\
    \ and math.mod(v, 2) == 1 then\n         sum = sum + v * v\n      end\n   end\n\
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiyw06h5y.lua:11:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpiyw06h5y.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpiyw06h5y.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, n in ipairs(lst) do\n    if n > 0 and n % 2 == 1 then\n\
    \      sum = sum + n * n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ >= 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n \
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if math.floor(lst[i]) == lst[i]\
    \ and lst[i] > 0 then\n            sum = sum + lst[i]^2\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz35ddqvo.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpz35ddqvo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    --[[\n        Write a function which returns the sum of squares of the odd\
    \ numbers \n        from the list of numbers which are both positive and integers.\n\
    \        The input list should not be empty. If it is, return 0.\n    ]]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgb2ljge.lua:19:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpdgb2ljge.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local function keep_if_odd(n) return n %\
    \ 2 == 1 end\n  local function square(n) return n * n end\n  local function double(n)\
    \ return n * 2 end\n  local acc = 0\n  for _, x in ipairs(lst) do\n    if x >\
    \ 0 and x % 1 == 0 then\n      acc = acc + (keep_if_odd(x) and square(x) or 0)\n\
    \    end\n  end\n  return double(acc)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4me0v7bh.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp4me0v7bh.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- #lst is the length of the list\n  if #lst < 1 then\n    return 0\n  end\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local n = lst[i]\n    if type(n) ==\
    \ \"number\" and math.floor(n) == n and n >= 0 then\n      if math.fmod(n, 2)\
    \ == 1 then\n        sum = sum + n * n\n      end\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local ans = 0\n    for i, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            ans = ans + v*v\n        end\n    end\n    return ans\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mos9kl2.lua:22:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp7mos9kl2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, i in ipairs(lst) do\n        if type(i) == \"number\"\
    \ and i > 0 and math.floor(i) == i then\n            sum = sum + i*i\n       \
    \ end\n    end\n    return sum\nend\nassert(double_the_difference({1, 3, 2, 0})\
    \ == 10)\nassert(double_the_difference({-1, -2, 0}) == 0)\nassert(double_the_difference({9,\
    \ -2}) == 81)\nassert(double_the_difference({0}) == 0)\nassert(double_the_difference({})\
    \ == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpers177qy.lua:17: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpers177qy.lua:17: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- here you should write the code for the function\n    -- you can use the\
    \ built-in function math.abs(n) to compute the absolute value of n\n    -- and\
    \ math.mod(n, 2) to compute the remainder when dividing n by 2\n    -- numbers\
    \ are not integers when the result of mod is not 0\n    -- and negative numbers\
    \ are not integers when their absolute value is not an integer\n    -- your function\
    \ should not use any loops at all\n    -- you can use the built-in function math.sqrt(n)\
    \ to compute the square root of n\n    -- you can use the built-in function math.floor(n)\
    \ to round down n to the nearest integer\n    -- you can use the built-in function\
    \ math.ceil(n) to round up n to the nearest integer\n    -- you can use the built-in\
    \ function math.pow(a, b) to compute a raised to the power b\n    local function\
    \ double_the_difference_rec(lst, total)\n        if (#lst == 0) then\n       \
    \     return total\n        elseif (math.mod(lst[1], 2) == 0 or math.mod(math.abs(lst[1]),\
    \ 2) ~= 0) then\n            return double_the_difference_rec(table.remove(lst,\
    \ 1), total)\n        else\n            return double_the_difference_rec(table.remove(lst,\
    \ 1), total + math.pow(lst[1], 2))\n        end\n    end\n    return double_the_difference_rec(lst,\
    \ 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprkn7vbyt.lua:22:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmprkn7vbyt.lua:22:\
    \ in function </tmp/tmprkn7vbyt.lua:19>\n\t(...tail calls...)\n\t/tmp/tmprkn7vbyt.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local result = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            result = result + v * v\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wvltea_.lua:15:\
    \ expected: 0, actual: {}\nstack traceback:\n\t/tmp/tmp8wvltea_.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local function is_odd(n)\n    return n % 2 == 1\n  end\n  return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi9ctt7p.lua:18:\
    \ expected: 0, actual: -1\nstack traceback:\n\t/tmp/tmpgi9ctt7p.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal ret = 0\n\tfor k, v in pairs(lst) do\n\t\tif (math.mod(v, 2) == 1) and\
    \ (v > 0) then\n\t\t\tret = ret + (v * v)\n\t\tend\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8j4rm_28.lua:11:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp8j4rm_28.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8j4rm_28.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ math.abs(v) % 2 == 1 then\n      sum = sum + v^2\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqa2ialy.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyqa2ialy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for k,v in pairs(lst) do\n      if v % 2 == 1 and type(v)\
    \ == \"number\" and v >= 0 then\n         sum = sum + (v * v)\n      end\n   end\n\
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    sum = 0\n    for k,v in pairs(lst) do\n        if math.type(v) == \"integer\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v*v\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpostl0eqd.lua:22:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpostl0eqd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum_of_squares = 0\n  for i = 1, #lst do\n    if lst[i]%2 == 1 and lst[i]\
    \ >= 0 then\n      sum_of_squares = sum_of_squares + lst[i]^2\n    end\n  end\n\
    \  return sum_of_squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  error(\"TODO\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5yicueb.lua:9:\
    \ TODO\nstack traceback:\n\t/tmp/tmpz5yicueb.lua:9: in local 'candidate'\n\t/tmp/tmpz5yicueb.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _,i in ipairs(lst) do\n    if (math.floor(i) == i) and\
    \ (i > 0) and (i % 2 ~= 0) then\n      sum = sum + (i * i)\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if is_int(v) and v >= 0 and\
    \ v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5h7s_awq.lua:11:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmp5h7s_awq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5h7s_awq.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \terror(\"todo\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpge2mu3b2.lua:9:\
    \ todo\nstack traceback:\n\t/tmp/tmpge2mu3b2.lua:9: in local 'candidate'\n\t/tmp/tmpge2mu3b2.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local num_sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjkzq5jxq.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"number\" and\
    \ v > 0 and math.mod(v, 2) == 1 then\n\t\t\tsum = sum + v * v\n\t\tend\n\tend\n\
    \treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kpqo6rr.lua:11:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp7kpqo6rr.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7kpqo6rr.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if math.floor(v) == v and\
    \ v > 0 then\n      sum = sum + (v * v)\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj65ouq5x.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpj65ouq5x.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- your code here\n    if not lst then\n        return 0\n    end\n    local\
    \ sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and v > 0 then\n\
    \            sum = sum + v * v\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local pos_int_sq = function(e)\n    if e < 0 or e % 1 ~= 0 then\n      return\
    \ 0\n    else\n      return e * e\n    end\n  end\n  local sum = 0\n  for k, v\
    \ in pairs(lst) do\n    sum = sum + pos_int_sq(v)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmmkdgh8.lua:27:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmpjmmkdgh8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  \n  -- Finish the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1n5xik9.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpf1n5xik9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- PUT YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8o19erc.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpr8o19erc.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local diff = 0\n  for _,v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ math.floor(v) == v and v >= 0 then\n      diff = diff + v*v\n    end\n  end\n\
    \  return diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgnnfb5q.lua:22:\
    \ expected: 25, actual: 41\nstack traceback:\n\t/tmp/tmprgnnfb5q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tif (type(v) == \"number\" and\
    \ v >= 0 and math.floor(v) == v) then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tsum =\
    \ sum + v * v\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdgv_ooi.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpwdgv_ooi.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, n in ipairs(lst) do\n    if n > 0 and n % 1 == 0 and\
    \ n % 2 == 1 then\n      sum = sum + n * n\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        local x = lst[i]\n       \
    \ if x == math.floor(x) and x >= 0 and x % 2 == 1 then\n            sum = sum\
    \ + x * x\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _,x in ipairs(lst) do\n        if type(x) == \"number\"\
    \ and x > 0 and x % 2 == 1 then\n            sum = sum + x * x\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sbbe482.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp6sbbe482.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- Type check\n    if type(lst) ~= \"table\" then\n        return nil\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvjv2e72e.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local result = 0\n    for _, val in ipairs(lst) do\n        if val % 2 ==\
    \ 1 and val > 0 then\n            result = result + val * val\n        end\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjetv8ui_.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpjetv8ui_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \t-- Your code here\n\tlocal total = 0\n\tlocal max_num = 0\n\tlocal min_num =\
    \ 0\n\tfor i,v in ipairs(lst) do\n\t\tif(math.floor(v)==v and v>=0) then\n\t\t\
    \tif(v>max_num) then\n\t\t\t\tmax_num = v\n\t\t\tend\n\t\t\tif(v<min_num) then\n\
    \t\t\t\tmin_num = v\n\t\t\tend\n\t\tend\n\tend\n\treturn max_num-min_num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprwp1rvw.lua:30:\
    \ expected: 25, actual: 5\nstack traceback:\n\t/tmp/tmpprwp1rvw.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for _, val in ipairs(lst) do\n      if (type(val) == \"\
    number\") and (val >= 0) and (val % 2 ~= 0) then\n         sum = sum + (val *\
    \ val)\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i_7f4lx.lua:23:\
    \ expected: 0, actual: 0.14\nstack traceback:\n\t/tmp/tmp3i_7f4lx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- Add your code here\n    return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51x9hftr.lua:17:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp51x9hftr.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  --[[\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if math.type(v) ==\
    \ \"integer\" and v > 0 then\n      if v % 2 == 1 then\n        sum = sum + (v\
    \ * v)\n      end\n    end\n  end\n  return sum\n  --]]\n  return sum(filter(only_odd_positive_integers,\
    \ map(function(x) return x * x end, lst)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmagwitmr.lua:20:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpmagwitmr.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpmagwitmr.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4z7xvv8s.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp4z7xvv8s.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local res = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      res = res + v * v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for i = 1, #lst do\n      local item = lst[i]\n      if\
    \ item >= 0 and math.floor(item) == item then\n         local squared = item *\
    \ item\n         if squared % 2 == 1 then\n            sum = sum + squared\n \
    \        end\n      end\n   end\n   return sum\nend\nprint(double_the_difference({}))\n\
    print(double_the_difference({1, 3, 2, 0}))\nprint(double_the_difference({-1, -2,\
    \ 0}))\nprint(double_the_difference({9, -2}))\nprint(double_the_difference({0}))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "0\n10\n0\n81\n0\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\n\
    OK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rr2dt6x.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp5rr2dt6x.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- TODO: Implement this function.\n    -- Given a list of numbers, return\
    \ the sum of the first two even numbers\n    -- in the list. Ignore negative numbers\
    \ and numbers that are not integers.\n    -- double_the_difference([1, 3, 2, 0])\
    \ == 2 + 0 = 2\n    -- double_the_difference([-1, -2, 0]) == 0\n    -- double_the_difference([9,\
    \ -2]) == 0\n    -- double_the_difference([0]) == 0\n    -- If the input list\
    \ is empty, return 0.\n    local function sum_first_two_even(lst)\n        --\
    \ TODO: Implement this function.\n        local function double_the_difference(lst)\n\
    \            -- TODO: Implement this function.\n            -- Given a list of\
    \ numbers, return the sum of the first two even numbers\n            -- in the\
    \ list. Ignore negative numbers and numbers that are not integers.\n         \
    \   -- double_the_difference([1, 3, 2, 0]) == 2 + 0 = 2\n            -- double_the_difference([-1,\
    \ -2, 0]) == 0\n            -- double_the_difference([9, -2]) == 0\n         \
    \   -- double_the_difference([0]) == 0\n            -- If the input list is empty,\
    \ return 0.\n            local function sum_first_two_even(lst)\n            \
    \    -- TODO: Implement this function.\n                local sum = 0\n      \
    \          for i, n in ipairs(lst) do\n                    if n % 2 == 0 then\n\
    \                        sum = sum + n\n                        if i == 2 then\n\
    \                            break\n                        end\n            \
    \        end\n                end\n                return sum\n            end\n\
    \            return sum_first_two_even(lst) * 2\n        end\n        return double_the_difference(lst)\n\
    \    end\n    return sum_first_two_even(lst)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvgw_lnh.lua:52:\
    \ expected: 25, actual: 8\nstack traceback:\n\t/tmp/tmprvgw_lnh.lua:52: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal n = 0\n\tfor i, v in ipairs(lst) do\n\t\tif v > 0 and v % 2 == 1 then\n\
    \t\t\tn = n + v*v\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, x in ipairs(lst) do\n        if x % 2 == 1 and\
    \ x >= 0 and x == math.floor(x) then\n            sum = sum + x * x\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \t-- Complete the body of this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppybre1uk.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppybre1uk.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7qkptxw.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpa7qkptxw.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3pa5kjs.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpa3pa5kjs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if math.floor(num)\
    \ == num and num > 0 then\n      if num % 2 == 1 then\n        sum = sum + num\
    \ * num\n      end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if math.floor(v) == v and v\
    \ >= 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    return 0 -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfetddteb.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpfetddteb.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxq25uc46.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpxq25uc46.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local result = 0\n  for i,v in ipairs(lst) do\n    if v % 2 == 1 and v > 0\
    \ then\n      result = result + v * v\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj93fljlq.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpj93fljlq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8_xuowes.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    for i = 1, #lst do\n        local num = lst[i]\n   \
    \     if math.type(num) == \"integer\" and num > 0 then\n            if num %\
    \ 2 == 1 then\n                total = total + num * num\n            end\n  \
    \      end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hql1m7q.lua:25:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp9hql1m7q.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v % 2 == 1 and math.floor(v) == v and v >= 0 then\n      sum = sum\
    \ + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, i in ipairs(lst) do\n        if math.type(i) ==\
    \ \"integer\" and i > 0 then\n            if i % 2 == 1 then\n               \
    \ sum = sum + i*i\n            end\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69ewvenz.lua:24:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp69ewvenz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local function is_valid(v)\n        return v > 0 and v % 1 == 0\n    end\n\
    \    local function is_odd(v)\n        return v % 2 == 1\n    end\n    local sum\
    \ = 0\n    for _,v in ipairs(lst) do\n        if is_valid(v) then\n          \
    \  if is_odd(v) then\n                sum = sum + v * v\n            end\n   \
    \     end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj662geig.lua:15:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpj662geig.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, num in ipairs(lst) do\n        if type(num) ==\
    \ \"number\" and num % 2 == 1 and num >= 0 then\n            sum = sum + num *\
    \ num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- Your code here\n    return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy9f5nhw.lua:17:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpyy9f5nhw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    local sumOfSquares = 0\n    local sum = 0\n    if lst\
    \ ~= nil then\n        for i, v in ipairs(lst) do\n            local v = tonumber(v)\n\
    \            if v ~= nil and v % 2 == 1 and v >= 0 then\n                sumOfSquares\
    \ = sumOfSquares + v * v\n                sum = sum + v\n            end\n   \
    \     end\n        total = sumOfSquares - 2 * sum\n    end\n    return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq2bt7g9.lua:29:\
    \ expected: 25, actual: 15\nstack traceback:\n\t/tmp/tmprq2bt7g9.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local square = function(n) return n*n end\n    local isOdd = function(n)\
    \ return math.fmod(n, 2) ~= 0 end\n    local double = function(n) return n*2 end\n\
    \    local doubleSquare = compose(double, square)\n    local isOddAndPositive\
    \ = compose(isOdd, isPositive)\n    local isOddAndPositiveAndInt = compose(isOddAndPositive,\
    \ isInteger)\n    local calcSum = compose(sum,\n                            map(doubleSquare),\n\
    \                            filter(isOddAndPositiveAndInt))\n    return calcSum(lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpousyu6az.lua:12:\
    \ attempt to call a nil value (global 'compose')\nstack traceback:\n\t/tmp/tmpousyu6az.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpousyu6az.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- YOUR CODE HERE\n    local sum = 0\n    for _, num in ipairs(lst) do\n\
    \        if num % 2 == 1 and num >= 0 and num == math.floor(num) then\n      \
    \      sum = sum + num * num\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\t\n\tfor k, v in pairs(lst) do\n\t\tif type(v) == \"number\"\
    \ and math.floor(v) == v and v >= 0 then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tsum\
    \ = sum + v^2\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + (v ^ 2)\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphrlgxefl.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] >= 0 and lst[i]\
    \ % 2 == 1 then\n            sum = sum + lst[i] ^ 2\n        end\n    end\n  \
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- your code here\n    local sum = 0\n    for i,v in ipairs(lst) do\n   \
    \     if (type(v) == \"number\") and (v >= 0) and (v % 2 == 1) then\n        \
    \    sum = sum + v * v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  for i,v in ipairs(lst) do\n    if(type(v) == \"number\"\
    \ and v >= 0 and math.floor(v) == v) then\n      if(v % 2 == 1) then\n       \
    \ total = total + v * v\n      end\n    end\n  end\n  return total\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppb5ipg88.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local r = 0\n   for _,v in ipairs(lst) do\n      if math.type(v) == \"integer\"\
    \ and v >= 0 then\n         if v % 2 == 1 then\n            r = r + v*v\n    \
    \     end\n      end\n   end\n   return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl__bog85.lua:24:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpl__bog85.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- YOUR CODE HERE\n\tlocal a, b = 0, 0\n\tfor _,v in ipairs(lst) do\n\t\t\
    if type(v) == \"number\" and v%2 == 1 and v >= 0 then\n\t\t\ta = a + v\n\t\t\t\
    b = b + v * v\n\t\tend\n\tend\n\treturn b - a * a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjs92_lp.lua:24:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpsjs92_lp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for i = 1, #lst do\n      if lst[i] % 2 == 1 and lst[i]\
    \ > 0 then\n         sum = sum + lst[i] * lst[i]\n      end\n   end\n   return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   return sum(map(function(x)\n      if math.floor(x) == x and x % 2 == 1 then\n\
    \         return x*x\n      else\n         return 0\n      end\n   end, lst))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5n1k8h7w.lua:9:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp5n1k8h7w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5n1k8h7w.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 and\
    \ v % 1 == 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local res = 0\n    for _, num in ipairs(lst) do\n        if num % 2 == 1\
    \ and num >= 0 and math.floor(num) == num then\n            res = res + num *\
    \ num\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then\n        return 0\n    end\n    local sum = 0\n    for\
    \ i, v in ipairs(lst) do\n        if math.floor(v) == v and v > 0 and v % 2 ==\
    \ 1 then\n            sum = sum + v^2\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \treturn 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntovuvvn.lua:16:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpntovuvvn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n-- double_the_difference([-1,\
    \ -2, 0]) == 0\n-- double_the_difference([9, -2]) == 81\n-- double_the_difference([0])\
    \ == 0  \n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- write your code here\n    local total = 0\n    local sum = 0\n    for\
    \ i = 1, #lst do\n        if type(lst[i]) == \"number\" and lst[i] % 2 == 1 and\
    \ lst[i] >= 0 then\n            total = total + lst[i] * lst[i]\n        end\n\
    \    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
