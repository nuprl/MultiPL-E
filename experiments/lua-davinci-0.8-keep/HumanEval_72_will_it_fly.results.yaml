name: HumanEval_72_will_it_fly
language: lua
results:
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn (q[1] == q[#q]) and (sum(q) <= w)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyc33wryl.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpyc33wryl.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpyc33wryl.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\t-- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeixfrmnl.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpeixfrmnl.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if #q == 1 then return true end\n    local sum = 0\n\
    \    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum > w then\
    \ return false end\n    for i = 1, #q / 2 do\n        if q[i] ~= q[#q - i + 1]\
    \ then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local f = 0\n  local b = #q\n  while f <= b do\n    if\
    \ q[f] ~= q[b] then\n      return false\n    end\n    f = f + 1\n    b = b - 1\n\
    \  end\n  local sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n\
    \  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7h7sq__2.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7h7sq__2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i, v in ipairs(q) do\n       \
    \ sum = sum + v\n    end\n    local l = #q\n    local is_balanced = true\n   \
    \ for i = 1, math.floor(l / 2) do\n        if q[i] ~= q[l - i + 1] then\n    \
    \        is_balanced = false\n            break\n        end\n    end\n    return\
    \ is_balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  local reverse = {}\n  for i = #q, 1, -1 do\n    reverse[#reverse + 1]\
    \ = q[i]\n  end\n  if sum <= w and q == reverse then\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr70skvn.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnr70skvn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tlocal table = {}\n\tfor i = 1, #q do\n\t\ttable[i] = q[#q - i + 1]\n\t\
    end\n\tfor i = 1, #q do\n\t\tif table[i] ~= q[i] then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\tif sum <= w then\n\t\treturn true\n\telse\n\t\treturn false\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local function is_palindrome(q)\n    return q[1] == q[#q]\
    \ and (#q == 1 or is_palindrome({table.unpack(q, 2, #q - 1)}))\n  end\n  local\
    \ function sum(q)\n    local s = 0\n    for i = 1, #q do\n      s = s + q[i]\n\
    \    end\n    return s\n  end\n  return is_palindrome(q) and sum(q) <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local palindrome = true\n    for i = 1, #q do\n       \
    \ if q[i] ~= q[#q - i + 1] then\n            palindrome = false\n            break\n\
    \        end\n    end\n    return palindrome and sum <= w\nend\nassert(will_it_fly({1,\
    \ 2}, 5) == false)\nassert(will_it_fly({3, 2, 3}, 1) == false)\nassert(will_it_fly({3,\
    \ 2, 3}, 9) == true)\nassert(will_it_fly({3}, 5) == true)\nassert(will_it_fly({3,\
    \ 2, 3, 2, 3}, 9) == true)\nassert(will_it_fly({2, 3, 1, 2, 3}, 8) == true)\n\
    assert(will_it_fly({2, 3, 1, 2, 3}, 7) == false)\nassert(will_it_fly({1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 1}, 100) == true)\nassert(will_it_fly({1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 1}, 0) == false)\nassert(will_it_fly({1, 2, 3, 4, 5, 6, 7, 8, 9, 1}, 20)\
    \ == false)\nassert(will_it_fly({1, 2, 3, 4, 5, 6, 7, 8, 9, 1}, 9) == false)\n\
    assert(will_it_fly({1, 2, 3, 4, 5, 6, 7, 8, 9, 1}, 10) == true)\nassert(will_it_fly({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 1}, 11) == true)\nassert(will_it_fly({3, 2, 1, 2, 3},\
    \ 12) == true)\nassert(will_it_fly({3, 2, 1, 2, 3}, 13) == false)\nassert(will_it_fly({2,\
    \ 3, 2, 3}, 6) ==\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0w7g9q9v.lua:42: ')' expected (to close '(' at line 41) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local flag = 0\n        for i\
    \ = 1, #q do\n            if q[i] ~= q[#q-i+1] then\n                flag = 1\n\
    \                break\n            end\n        end\n        if flag == 0 then\n\
    \            return true\n        else\n            return false\n        end\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn q[1]==q[#q] and q[1]+q[#q]<=w and #q>1 or #q==1\
    \ and q[1]<=w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum=0\n\tlocal pal=false\n\tfor i=1,#q do\n\t\tsum=sum+q[i]\n\
    \tend\n\tif sum>w then\n\t\treturn false\n\tend\n\tfor i=1,#q do\n\t\tif q[i]==q[#q-i+1]\
    \ then\n\t\t\tpal=true\n\t\telse\n\t\t\tpal=false\n\t\t\tbreak\n\t\tend\n\tend\n\
    \tif pal then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal s = 0\n\tfor i = 1, #q do\n\t\ts = s + q[i]\n\tend\n\
    \treturn s <= w and #q == #q:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgmi29w2.lua:17:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmphgmi29w2.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmphgmi29w2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local l = 0\n  for i = 1, #q do\n    l = l + q[i]\n  end\n\
    \  if l <= w then\n    local b = true\n    for i = 1, #q/2 do\n      if q[i] ~=\
    \ q[#q - i + 1] then\n        b = false\n        break\n      end\n    end\n \
    \   return b\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    return w >= table.reduce(q, '+') and q == table.reverse(q)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptdi84npy.lua:13:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmptdi84npy.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmptdi84npy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return #q < 2 or (q[1] == q[#q] and will_it_fly(table.move(q,\
    \ 2, #q - 1, 1, {}), w))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcw71mahx.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcw71mahx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- isbalanced will check if the passed in q has a palindrome\
    \ or not\n  local function isbalanced(q)\n    local str=\"\"\n    local rev=\"\
    \"\n    for i=1,#q do\n      str=str..q[i]\n    end\n    for i=#q,1,-1 do\n  \
    \    rev=rev..q[i]\n    end\n    return str==rev\n  end\n  -- we will use a while\
    \ loop and reduce the weight, check if it's a palindrome and if true, return True.\n\
    \  while #q>0 do\n    if isbalanced(q) and w>=0 then\n      return true\n    else\n\
    \      w=w-q[1]\n      table.remove(q,1)\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0nycqf_.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph0nycqf_.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w and #q == #(table.reverse(q))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8nnp9n6.lua:17:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpd8nnp9n6.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpd8nnp9n6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn table.concat(q) == table.concat(q, \"\", #q, 1)\
    \ and #q == #q - #q + 1 and table.concat(q) == table.concat(q, \"\", #q, 1) and\
    \ #q == #q - #q + 1 and #q == #q - #q + 1 and table.concat(q) == table.concat(q,\
    \ \"\", #q, 1) and #q == #q - #q + 1 and #q == #q - #q + 1 and table.concat(q)\
    \ == table.concat(q, \"\", #q, 1) and #q == #q - #q + 1 and #q == #q - #q + 1\
    \ and table.concat(q) == table.concat(q, \"\", #q, 1) and #q == #q - #q + 1 and\
    \ #q == #q - #q + 1 and table.concat(q) == table.concat(q, \"\", #q, 1) and #q\
    \ == #q - #q + 1 and #q == #q - #q + 1 and table.concat(q) == table.concat(q,\
    \ \"\", #q, 1) and #q == #q - #q + 1 and #q == #q - #q + 1 and table.concat(q)\
    \ == table.concat(q, \"\", #q, 1) and #q == #q - #q + 1 and #q == #q - #q + 1\
    \ and table.concat(q) == table.concat(q, \"\", #q, 1) and #q == #q - #q + 1 and\
    \ #q == #q - #q + 1 and table.concat(q) == table.concat(q, \"\", #q, 1) and #q\
    \ == #q - #q + 1 and #q == #q - #q + 1 and table.concat(q) == table.concat(q,\
    \ \"\", #q, 1) and #q == #q - #q + 1 and #q == #q - #q + 1 and table.concat(q)\
    \ == table.concat(q, \"\", #q, 1) and #q\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9bssfgkn.lua:14: 'end' expected (to close 'function' at line\
    \ 12) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i, v in ipairs(q) do\n\t\tsum = sum\
    \ + v\n\tend\n\tif sum <= w then\n\t\tlocal s = 1\n\t\tlocal e = #q\n\t\twhile\
    \ s < e do\n\t\t\tif q[s] ~= q[e] then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\
    s = s + 1\n\t\t\te = e - 1\n\t\tend\n\t\treturn true\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local t = {}\n  local sum = 0\n  for i = 1, #q do\n   \
    \ t[i] = q[i]\n    sum = sum + q[i]\n  end\n  for i = 1, #q / 2 do\n    if t[i]\
    \ ~= t[#q - i + 1] then\n      return false\n    end\n  end\n  if sum <= w then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local str = table.concat(q)\n    local rev = str:reverse()\n\
    \    if sum <= w and str == rev then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum\
    \ + v\n\tend\n\tif sum > w then\n\t\treturn false\n\tend\n\tlocal i, j = 1, #q\n\
    \twhile i < j do\n\t\tif q[i] ~= q[j] then\n\t\t\treturn false\n\t\tend\n\t\t\
    i = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return sum(q) <= w and is_balanced(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyj4oig0f.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpyj4oig0f.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpyj4oig0f.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local c = 0\n    for k, v in ipairs(q) do\n        c\
    \ = c + v\n    end\n    if c > w then\n        return false\n    end\n    for\
    \ i = 1, #q / 2 do\n        if q[i] ~= q[#q - i + 1] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal w2 = w\n\tlocal w3 = 0\n\tlocal q2 = q\n\tlocal q3\
    \ = {}\n\tfor i, v in ipairs(q2) do\n\t\ttable.insert(q3, i, v)\n\tend\n\tfor\
    \ i, v in ipairs(q2) do\n\t\tif v > w2 then\n\t\t\treturn false\n\t\tend\n\t\t\
    w2 = w2 - v\n\t\tq3[i] = nil\n\tend\n\tfor i, v in ipairs(q3) do\n\t\tif v > w2\
    \ then\n\t\t\treturn false\n\t\tend\n\t\tw2 = w2 - v\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6l_1egx.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps6l_1egx.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn q[1] <= w and #q == #(table.reverse(q))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfp4bzv97.lua:13:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpfp4bzv97.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpfp4bzv97.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal function is_palindrome(t)\n\t\tlocal l = #t\n\t\t\
    local l2 = l / 2\n\t\tfor i = 1, l2 do\n\t\t\tif t[i] ~= t[l - i + 1] then\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal sum =\
    \ 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\treturn is_palindrome(q)\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local sum1 = 0\n    for i = 1, #q do\n        sum1 = sum1\
    \ + q[i]\n    end\n    if sum > w then\n        return false\n    elseif sum1\
    \ == sum then\n        return true\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkug_evwc.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkug_evwc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local indice = 0\n    for i = 1, #q do\n        if q[i]\
    \ == q[#q-i+1] then\n            indice = indice + 1\n        end\n    end\n \
    \   if indice == #q and sum <= w then\n        return true\n    else\n       \
    \ return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local is_balanced = true\n    local sum = 0\n    for\
    \ i = 1, #q do\n        sum = sum + q[i]\n        if q[i] ~= q[#q - i + 1] then\n\
    \            is_balanced = false\n        end\n    end\n    return is_balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local s = 0\n  for i, v in ipairs(q) do\n    s = s + v\n\
    \  end\n  return (s <= w) and is_palindrome(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cb58liz.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp2cb58liz.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp2cb58liz.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tlocal pre = 0\n\tfor k, v in ipairs(q)\
    \ do\n\t\tsum = sum + v\n\t\tif v == q[#q - k + 1] then\n\t\t\tpre = pre + 1\n\
    \t\tend\n\tend\n\tif sum <= w and pre == #q then\n\t\treturn true\n\telse\n\t\t\
    return false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local function is_pali(arr)\n        local len = #arr\n\
    \        for i = 1, len / 2 do\n            if arr[i] ~= arr[len - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return is_pali(q) and w >= #q\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    return (q[1] == q[#q]) and (w >= #q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    return sum <= w and is_palindrome(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqt9fa7l3.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpqt9fa7l3.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpqt9fa7l3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if ((q[1] + q[#q]) <= w) and (q[1] == q[#q]) then\n   \
    \ return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9a7cmfrc.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9a7cmfrc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = 0\n  for i, v in ipairs(q) do\n    max_weight\
    \ = max_weight + v\n  end\n  local str = table.concat(q)\n  local t = {}\n  for\
    \ i = 1, #str do\n    table.insert(t, string.sub(str, i, i))\n  end\n  if table.concat(t)\
    \ == str and max_weight <= w then\n    return true\n  else\n    return false\n\
    \  end\nend\nprint(will_it_fly({1, 2}, 5))\nprint(will_it_fly({3, 2, 3}, 1))\n\
    print(will_it_fly({3, 2, 3}, 9))\nprint(will_it_fly({3}, 5))\nprint(\"---------------------------\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\ntrue\ntrue\n---------------------------\nF\nFailed tests:\n\
    -------------\n1) test_humaneval\n/tmp/tmpwkebo1nz.lua:38: expected: false, actual:\
    \ true\nstack traceback:\n\t/tmp/tmpwkebo1nz.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  local length = #q\n  local check = 0\n  for i = 1, length do\n    if\
    \ q[i] == q[length] then\n      length = length - 1\n      check = check + 1\n\
    \    end\n  end\n  if check == #q and sum <= w then\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum, half = 0, math.floor(#q / 2)\n  for i = 1, half\
    \ do\n    sum = sum + q[i] + q[#q - i + 1]\n  end\n  return sum <= w and (half\
    \ * 2 == #q or half * 2 + 1 == #q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwg6uq5j.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzwg6uq5j.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i, v in ipairs(q) do\n       \
    \ sum = sum + v\n    end\n    return sum <= w and is_palindrome(q)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_e2j9ix.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp1_e2j9ix.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp1_e2j9ix.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tlocal rev = 0\n\t\tfor i = 1, #q do\n\t\t\trev\
    \ = q[i] .. rev\n\t\tend\n\t\tif rev == tostring(table.concat(q)) then\n\t\t\t\
    return true\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyxpeqg6.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqyxpeqg6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if q[1] ~= q[#q] then\n        return false\n    end\n\
    \    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n\
    \    if sum <= w then\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local p = q\n    for i = 1, #q do\n        if q[i] ==\
    \ q[#q - i + 1] then\n            --q[i] = nil\n            --q[#q - i + 1] =\
    \ nil\n            table.remove(q, i)\n            table.remove(q, #q - i + 1)\n\
    \        end\n    end\n    local t = 0\n    for _,v in ipairs(p) do\n        t\
    \ = t + v\n    end\n    if t <= w and #q == 0 then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpee4_nyjo.lua:19:\
    \ bad argument #1 to 'remove' (position out of bounds)\nstack traceback:\n\t/tmp/tmpee4_nyjo.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpee4_nyjo.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal t = 0\n\tfor i = 1, #q do\n\t\tt = t + q[i]\n\tend\n\
    \tif t > w then\n\t\treturn false\n\tend\n\tfor i = 1, #q/2 do\n\t\tif q[i] ~=\
    \ q[#q-i+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        return true\n    else\n     \
    \   return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfchikova.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfchikova.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 1 then return true end\n  return q[1] + q[#q]\
    \ <= w and will_it_fly(\n    table.remove(q, 1),\n    table.remove(q, #q),\n \
    \   w\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa8q16nsu.lua:13:\
    \ attempt to get length of a number value (local 'q')\nstack traceback:\n\t/tmp/tmpa8q16nsu.lua:13:\
    \ in upvalue 'will_it_fly'\n\t/tmp/tmpa8q16nsu.lua:14: in local 'candidate'\n\t\
    /tmp/tmpa8q16nsu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5gi0j5n.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt5gi0j5n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local q_len = #q\n    local sum = 0\n    for i = 1, q_len\
    \ do\n        sum = sum + q[i]\n    end\n    local pal = true\n    for i = 1,\
    \ math.floor(q_len / 2) do\n        if q[i] ~= q[q_len - i + 1] then\n       \
    \     pal = false\n            break\n        end\n    end\n    return pal and\
    \ sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    -- check that list is balanced, if not return false\n\
    \    -- check sum of all elements is <= w if not return false\n    -- otherwise\
    \ return true\n    -- return false\nend\nassert(will_it_fly({1, 2}, 5) == false)\n\
    assert(will_it_fly({3, 2, 3}, 1) == false)\nassert(will_it_fly({3, 2, 3}, 9) ==\
    \ true)\nassert(will_it_fly({3}, 5) == true)\nprint(\"tests passed for will_it_fly\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbdy4vua0.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpbdy4vua0.lua:18: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        return true\n    else\n     \
    \   return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q1etwca.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5q1etwca.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal mid = math.floor(#q / 2)\n\tfor i = 1, mid do\n\t\
    \tif q[i] ~= q[#q - i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ w >= table.reduce(q, function(a, b) return a + b end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2rgnxc26.lua:19:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmp2rgnxc26.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp2rgnxc26.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n    sum = sum\
    \ + v\n  end\n  if sum <= w then\n    for i, v in ipairs(q) do\n      if v ~=\
    \ q[#q - i + 1] then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  return false\nend\nprint(will_it_fly({3, 2, 3}, 9))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i,v in ipairs(q) do\n\t\tsum = sum\
    \ + v\n\tend\n\tif sum <= w then\n\t\tif #q % 2 == 0 then\n\t\t\tlocal half =\
    \ #q / 2\n\t\t\tlocal first_part = {}\n\t\t\tlocal second_part = {}\n\t\t\tfor\
    \ i=1,half do\n\t\t\t\tfirst_part[i] = q[i]\n\t\t\t\tsecond_part[i] = q[half +\
    \ i]\n\t\t\tend\n\t\t\tlocal is_palindrome = true\n\t\t\tfor i=1,half do\n\t\t\
    \t\tif first_part[i] ~= second_part[half - i + 1] then\n\t\t\t\t\tis_palindrome\
    \ = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn is_palindrome\n\
    \t\telse\n\t\t\tlocal half = math.floor(#q / 2)\n\t\t\tlocal first_part = {}\n\
    \t\t\tlocal second_part = {}\n\t\t\tfor i=1,half do\n\t\t\t\tfirst_part[i] = q[i]\n\
    \t\t\t\tsecond_part[i] = q[half + i + 1]\n\t\t\tend\n\t\t\tlocal is_palindrome\
    \ = true\n\t\t\tfor i=1,half do\n\t\t\t\tif first_part[i] ~= second_part[half\
    \ - i + 1] then\n\t\t\t\t\tis_palindrome = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\
    \t\t\tend\n\t\t\treturn is_palindrome\n\t\tend\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- sum(q) <= w and is_palindrome(q)\n  local sum = 0\n\
    \  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum > w then\n    return\
    \ false\n  end\n  local mid = math.floor(#q / 2)\n  local n = #q\n  for i = 1,\
    \ mid do\n    if q[i] ~= q[n - i + 1] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubefuyap.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpubefuyap.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 1 then return true end\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum > w then return false end\n\
    \  local j = #q\n  for i = 1, #q do\n    if q[i] ~= q[j] then return false end\n\
    \    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum, len = 0, #q\n\tfor i = 1, len do\n\t\tsum =\
    \ sum + q[i]\n\tend\n\tfor i = 1, math.floor(len / 2) do\n\t\tif q[i] ~= q[len\
    \ - i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn (sum <= w)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if w > 0 then\n        local s = 0\n        for i, v\
    \ in ipairs(q) do\n            s = s + v\n        end\n        if s <= w then\n\
    \            local success = true\n            for i = 1, #q / 2 do\n        \
    \        if q[i] ~= q[#q - i + 1] then\n                    success = false\n\
    \                    break\n                end\n            end\n           \
    \ return success\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal balanced, sum = true, 0\n\tfor i = 1, #q / 2 do\n\
    \t\tsum = sum + q[i]\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\tbalanced = false\n\
    \t\tend\n\tend\n\treturn balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local function is_balanced(tab)\n    local l, r = 1, #tab\n\
    \    while l < r do\n      if tab[l] ~= tab[r] then\n        return false\n  \
    \    end\n      l, r = l + 1, r - 1\n    end\n    return true\n  end\n  local\
    \ function sum(tab)\n    local r = 0\n    for _, v in ipairs(tab) do\n      r\
    \ = r + v\n    end\n    return r\n  end\n  return is_balanced(q) and sum(q) <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local balanced = true\n    local sum = 0\n    for i=1,\
    \ #q do\n        if (q[i] ~= q[#q-i+1]) then\n            balanced = false\n \
    \       end\n        sum = sum + q[i]\n    end\n    return balanced and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if w >= #q and #q % 2 == 0 then\n        for i = 1, #q\
    \ / 2 do\n            if q[i] ~= q[#q - i + 1] then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_9l5ea_.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy_9l5ea_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn q == reverse(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplk72lvfw.lua:13:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmplk72lvfw.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplk72lvfw.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  local reverse = {}\n  for i = #q, 1, -1 do\n    reverse[#reverse + 1]\
    \ = q[i]\n  end\n  if sum <= w and q == reverse then\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1dyx6b5.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd1dyx6b5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local len = #q\n        for i\
    \ = 1, len / 2 do\n            if q[i] ~= q[len - i + 1] then\n              \
    \  return false\n            end\n        end\n        return true\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    return sum(q) <= w and is_palindrome(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50sw1pvm.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp50sw1pvm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp50sw1pvm.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal q0, q1 = 0, 0\n\tfor i = 1, #q do\n\t\tif q[i] >\
    \ w then\n\t\t\treturn false\n\t\tend\n\t\tq0 = q0 + q[i]\n\t\tq1 = q1 + q[#q\
    \ - i + 1]\n\tend\n\treturn q0 <= w and q0 == q1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yyrvm9f.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9yyrvm9f.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    return (q[1] == q[#q]) and (q[1] <= w)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if #q == 1 then return true end\n    local sum = 0\n\
    \    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum > w then\
    \ return false end\n    for i = 1, #q / 2 do\n        if q[i] ~= q[#q - i + 1]\
    \ then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if #q == 1 then return true end\n    local l,r,m = 1,#q,math.floor(#q/2)\n\
    \    while l <= r do\n        if q[l] ~= q[r] then return false end\n        l,r\
    \ = l+1,r-1\n    end\n    local s = 0\n    for i=1,#q do s = s + q[i] end\n  \
    \  return s <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local flag = true\n    for i = 1, #q do\n        if q[i]\
    \ ~= q[#q - i + 1] then\n            flag = false\n            break\n       \
    \ end\n    end\n    if flag and sum <= w then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal balanced, sum = true, 0\n\tfor i = 1, #q do\n\t\t\
    sum = sum + q[i]\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\tbalanced = false\n\t\
    \tend\n\tend\n\treturn sum <= w and balanced\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    return w >= sum(q) and is_palindrome(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdcgs9s_f.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpdcgs9s_f.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdcgs9s_f.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal count = 0\n\tfor i = 1, #q do\n\t\tcount = count\
    \ + q[i]\n\tend\n\tif count <= w then\n\t\tlocal temp = q\n\t\tfor i = 1, #q do\n\
    \t\t\ttemp[i] = q[#q - i + 1]\n\t\tend\n\t\tif temp == q then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqflulnhv.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqflulnhv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if #q > 1 then\n        if q[1] + q[#q] == 10 then\n\
    \            table.remove(q, 1)\n            table.remove(q, #q)\n           \
    \ will_it_fly(q, w)\n        else\n            return false\n        end\n   \
    \ end\n    if #q <= 1 then\n        local sum = 0\n        for _, v in ipairs(q)\
    \ do\n            sum = sum + v\n        end\n        if sum <= w then\n     \
    \       return true\n        else\n            return false\n        end\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppla3wvl9.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppla3wvl9.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local is_palindrome = function (list)\n        local\
    \ len = #list\n        local half_len = len / 2\n        local is_palindrome =\
    \ true\n        for i = 1, half_len do\n            if list[i] ~= list[len - i\
    \ + 1] then\n                is_palindrome = false\n                break\n  \
    \          end\n        end\n        return is_palindrome\n    end\n    local\
    \ is_balanced = is_palindrome(q)\n    local sum = 0\n    for _, num in ipairs(q)\
    \ do\n        sum = sum + num\n    end\n    local is_light = sum <= w\n    return\
    \ is_balanced and is_light\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local function is_palindrome(t)\n    for i = 1, #t // 2\
    \ do\n      if t[i] ~= t[#t - i + 1] then\n        return false\n      end\n \
    \   end\n    return true\n  end\n  local total = 0\n  for _, v in ipairs(q) do\n\
    \    total = total + v\n  end\n  return total <= w and is_palindrome(q)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local t = {}\n    for i = 1, #q do\n        t[i] = q[i]\n\
    \    end\n    table.sort(t)\n    local sum = 0\n    for i = 1, #t do\n       \
    \ sum = sum + t[i]\n    end\n    if sum <= w then\n        local f = true\n  \
    \      for i = 1, #q do\n            if t[i] ~= q[i] then\n                f =\
    \ false\n                break\n            end\n        end\n        return f\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ldyds_y.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ldyds_y.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local q1 = {}\n        for i\
    \ = 1, #q do\n            q1[i] = q[#q - i + 1]\n        end\n        for i =\
    \ 1, #q do\n            if q[i] ~= q1[i] then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal s = 0\n\tfor i = 1, #q do\n\t\ts = s + q[i]\n\tend\n\
    \tlocal p = 0\n\tfor i = 1, #q / 2 do\n\t\tif q[i] == q[#q - i + 1] then\n\t\t\
    \tp = p + 1\n\t\tend\n\tend\n\tif s <= w and p == #q / 2 then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend\nreturn will_it_fly\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvtp4fgtn.lua:30: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q/2 do\n      if q[i] ~= q[#q - i\
    \ + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local l = table.pack(table.unpack(q))\n  local palindrome\
    \ = true\n  for i = 1, #l/2 do\n    if l[i] ~= l[#l-i+1] then\n      palindrome\
    \ = false\n      break\n    end\n  end\n  if palindrome then\n    local sum =\
    \ 0\n    for i = 1, #l do\n      sum = sum + l[i]\n    end\n    if sum <= w then\n\
    \      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if q[1] == q[#q] and sum <= w then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local len = #q\n  local sum = 0\n  for i = 1, len do\n\
    \    if q[i] ~= q[len - i + 1] then\n      return false\n    end\n    sum = sum\
    \ + q[i]\n  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local balanced = true\n    for i = 1, #q do\n        if\
    \ q[i] ~= q[#q - i + 1] then\n            balanced = false\n            break\n\
    \        end\n    end\n    return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    return isPalindrome(q) and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb92hnqhn.lua:17:\
    \ attempt to call a nil value (global 'isPalindrome')\nstack traceback:\n\t/tmp/tmpb92hnqhn.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpb92hnqhn.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return q[1] + q[#q] == 2 * q[#q/2] and list.reduce(function(x,\
    \ y) return x + y end, q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplkty7rw5.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmplkty7rw5.lua:13: in local 'candidate'\n\t/tmp/tmplkty7rw5.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local it_does_fly = false\n  local sum = 0\n  local weight_not_exceeded\
    \ = true\n  local palindrome = true\n  local len = #q\n  for i = 1, #q do\n  \
    \  sum = sum + q[i]\n    if sum > w then\n      weight_not_exceeded = false\n\
    \    end\n    if q[i] ~= q[len] then\n      palindrome = false\n    end\n    len\
    \ = len - 1\n  end\n  if weight_not_exceeded and palindrome then\n    it_does_fly\
    \ = true\n  end\n  return it_does_fly\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return table.concat(q) == table.concat(reverse(q)) and\
    \ sum(q) <= w;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt5svcyy1.lua:13:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpt5svcyy1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpt5svcyy1.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local n = 0\n  for i = 1, #q do\n    n = n + q[i]\n  end\n\
    \  if n <= w then\n    local h = math.floor(#q / 2)\n    for i = 1, h do\n   \
    \   if q[i] ~= q[#q - i + 1] then\n        return false\n      end\n    end\n\
    \    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return q[1] + q[#q] == 2 * q[math.ceil(#q / 2)] and #q\
    \ <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nrgvq74.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6nrgvq74.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum, max = 0, w\n\tfor i = 1, #q do\n\t\tsum = sum\
    \ + q[i]\n\t\tif sum > max then return false end\n\tend\n\tfor i = 1, #q/2 do\n\
    \t\tif q[i] ~= q[#q - i + 1] then return false end\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local q_reversed = {}\n    for i = #q, 1, -1 do\n   \
    \     table.insert(q_reversed, q[i])\n    end\n    return table.concat(q) == table.concat(q_reversed)\
    \ and table.reduce(q, function(a, b) return a + b end) <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkrs3v8z.lua:17:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpfkrs3v8z.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpfkrs3v8z.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tif #q < 2 then return true end\n\tlocal a, b = 1, #q\n\t\
    for i = 1, #q / 2 do\n\t\tif q[a] ~= q[b] then return false end\n\t\ta, b = a\
    \ + 1, b - 1\n\tend\n\tlocal s = 0\n\tfor i = 1, #q do\n\t\ts = s + q[i]\n\tend\n\
    \treturn s <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum\
    \ + v\n\tend\n\tif sum > w then\n\t\treturn false\n\tend\n\tlocal n = #q\n\tfor\
    \ i = 1, math.floor(n / 2) do\n\t\tif q[i] ~= q[n - i + 1] then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum, is_palindrome = 0, true\n\tfor i, v in ipairs(q)\
    \ do\n\t\tsum = sum + v\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\tis_palindrome\
    \ = false\n\t\tend\n\tend\n\treturn sum <= w and is_palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    return is_palindrome(q) and table.sum(q) <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1n6atbve.lua:13:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp1n6atbve.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1n6atbve.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w and true or false\nend\nprint(will_it_fly({3, 2, 3},\
    \ 1))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp000b9kuh.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp000b9kuh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn q[1] and (q[1] == q[#q] and will_it_fly(q[2] and\
    \ {unpack(q, 2, #q - 1)} or {}, w) or false) or not q[1] and q[#q] == 0 and (w\
    \ >= 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6a495swm.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp6a495swm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp6a495swm.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum, mid, rev = 0, 0, {}\n  if #q % 2 == 0 then mid\
    \ = (#q/2) else mid = (#q-1)/2 end\n  for i = 1, #q do sum = sum + q[i] end\n\
    \  for i = 1, #q do rev[i] = q[#q+1-i] end\n  return sum <= w and is_pali(q, mid,\
    \ rev)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7td4oklh.lua:17:\
    \ attempt to call a nil value (global 'is_pali')\nstack traceback:\n\t/tmp/tmp7td4oklh.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp7td4oklh.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal f, b = 0, #q\n\tfor i = 1, #q do\n\t\tif q[i] ~=\
    \ q[b] then\n\t\t\treturn false\n\t\tend\n\t\tf = f + q[i]\n\t\tb = b - 1\n\t\
    end\n\treturn f <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local is_balanced = true\n    for i = 1, #q / 2 do\n  \
    \      if q[i] ~= q[#q - i + 1] then\n            is_balanced = false\n      \
    \      break\n        end\n    end\n    return sum <= w and is_balanced\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local qrev = {table.unpack(q)}\n    table.sort(qrev)\n\
    \    local qs = table.concat(qrev, \"\")\n    local qrvs = table.concat(q, \"\"\
    )\n    if qs == qrvs then\n        local a = 0\n        for i = 1,#q do\n    \
    \        a = a + q[i]\n        end\n        if a <= w then\n            return\
    \ true\n        else\n            return false\n        end\n    else\n      \
    \  return false\n    end\nend\nprint(will_it_fly({3, 2, 3}, 1))\nprint(will_it_fly({3,\
    \ 2, 3}, 9))\nprint(will_it_fly({3}, 5))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "false\nfalse\ntrue\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpcsb0vy2h.lua:38: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcsb0vy2h.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced, sum = true, 0\n  for i = 1, math.floor(#q\
    \ / 2) do\n    if q[i] ~= q[#q - i + 1] then\n      balanced = false\n      break\n\
    \    end\n  end\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return (q[1] + q[#q]) * #q <= w and #q % 2 == 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe_l6byd.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphe_l6byd.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local reverse = {}\n    for i = #q, 1, -1 do\n\
    \      reverse[#reverse + 1] = q[i]\n    end\n    for i = 1, #q do\n      if q[i]\
    \ ~= reverse[i] then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local function palindrome(q)\n    for i = 1, math.floor(#q\
    \ / 2) do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n  end\n  return palindrome(q) and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal rev, sum = {}, 0\n\tfor i = #q, 1, -1 do\n\t\trev[#rev\
    \ + 1] = q[i]\n\t\tsum = sum + q[i]\n\tend\n\treturn sum <= w and table.concat(q)\
    \ == table.concat(rev)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tif w == 0 then return true end\n\tif #q == 0 then return\
    \ false end\n\tif #q == 1 then return q[1] <= w end\n\treturn (q[1] + q[#q]) <=\
    \ w and will_it_fly(q, w - q[1] - q[#q])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g05uliq.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9g05uliq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    -- check the first element\n    if #q % 2 == 0 then\n\
    \        return false\n    end\n    -- check sum of all elements\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum > w\
    \ then\n        return false\n    end\n    -- check the rest of elements\n   \
    \ for i = 1, #q // 2 do\n        if q[i] ~= q[#q - i + 1] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  \n  local sum = 0\n  for i,v in ipairs(q) do\n    sum =\
    \ sum + v\n  end\n  \n  if sum <= w then\n    for i=1, #q/2 do\n      if q[i]\
    \ ~= q[#q-i+1] then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  \n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n    sum = sum\
    \ + v\n  end\n  return sum <= w and table.concat(q) == table.concat(q, \"\", #q,\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1kozk4m.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf1kozk4m.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q do\n\t\t\tif q[i] ~= q[#q-i+1] then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for _, v in ipairs(q) do\n    sum = sum\
    \ + v\n  end\n  if sum <= w then\n    local i = 1\n    local j = #q\n    while\
    \ i < j do\n      if q[i] ~= q[j] then\n        return false\n      end\n    \
    \  i = i + 1\n      j = j - 1\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local function is_palindrome(arr)\n        local len\
    \ = #arr\n        for i = 1, len // 2 do\n            if arr[i] ~= arr[len - i\
    \ + 1] then\n                return false\n            end\n        end\n    \
    \    return true\n    end\n    local sum = 0\n    for i = 1, #q do\n        sum\
    \ = sum + q[i]\n    end\n    return is_palindrome(q) and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local weight = 0\n    local valid = true\n    for i =\
    \ 1, #q do\n        weight = weight + q[i]\n        if q[i] ~= q[#q - i + 1] then\n\
    \            valid = false\n        end\n    end\n    return valid and weight\
    \ <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local flag = false\n    if sum <= w then\n        for i\
    \ = 1, #q do\n            if q[i] == q[#q - i + 1] then\n                flag\
    \ = true\n            else\n                flag = false\n                break\n\
    \            end\n        end\n    end\n    return flag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local s = 0\n  for i = 1, #q do\n    s = s + q[i]\n  end\n\
    \  if s <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal weight = 0\n\tfor i = 1, #q do\n\t\tweight = weight\
    \ + q[i]\n\tend\n\tlocal i = 1\n\tlocal j = #q\n\twhile i < j do\n\t\tif q[i]\
    \ ~= q[j] then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\t\
    end\n\treturn weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local function sum(q)\n        local s = 0\n        for\
    \ i = 1, #q do\n            s = s + q[i]\n        end\n        return s\n    end\n\
    \    local function is_palindrome(q)\n        local n = #q\n        for i = 1,\
    \ math.floor(n / 2) do\n            if q[i] ~= q[n - i + 1] then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    return is_palindrome(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fz9akk0.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1fz9akk0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i, v in ipairs(q) do\n\t\tsum = sum\
    \ + v\n\tend\n\tif sum <= w then\n\t\tif #q == 1 then\n\t\t\treturn true\n\t\t\
    else\n\t\t\tlocal rev = {}\n\t\t\tfor i = #q, 1, -1 do\n\t\t\t\ttable.insert(rev,\
    \ q[i])\n\t\t\tend\n\t\t\tfor i, v in ipairs(q) do\n\t\t\t\tif q[i] ~= rev[i]\
    \ then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\t\
    end\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return q[1] and q[#q] and q[1] == q[#q] and (#q == 1 or\
    \ will_it_fly(table.move(q, 2, #q - 1, 1, {}), w)) and #q <= w / 2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i, v in ipairs(q) do\n\t\tsum = sum\
    \ + v\n\tend\n\tif sum <= w then\n\t\tfor i, v in ipairs(q) do\n\t\t\tif v ~=\
    \ q[#q - i + 1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\
    \tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local function is_palindrome(str)\n    return str == str:reverse()\n\
    \  end\n  local function is_balanced(t)\n    return is_palindrome(table.concat(t))\n\
    \  end\n  local function is_feasible(t, w)\n    local sum = 0\n    for _, v in\
    \ ipairs(t) do\n      sum = sum + v\n    end\n    return sum <= w\n  end\n  return\
    \ is_balanced(q) and is_feasible(q, w)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local palindrome = true\n    for i = 1, #q/2 do\n     \
    \   if q[i] ~= q[#q-i+1] then\n            palindrome = false\n            break\n\
    \        end\n    end\n    return sum <= w and palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tif #q == 1 then\n\t\treturn true\n\tend\n\tfor i = 1, math.floor(#q\
    \ / 2) do\n\t\tif q[i] + q[#q - i + 1] > w then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd9rawlt.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqd9rawlt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n    sum = sum\
    \ + v\n  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q\
    \ - i + 1] then\n        return false\n      end\n    end\n    return true\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local weight_q = 0\n    for i = 1, #q do\n        weight_q\
    \ = weight_q + q[i]\n    end\n    if (weight_q <= w) and (weight_q % 2 == 0) then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmlorksek.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmlorksek.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  local function is_it_balanced(q)\n    local m = math.floor(#q / 2)\n\
    \    for i = 1, m do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  if sum <= w and is_it_balanced(q)\
    \ then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w and (is_palindrome(q))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjycpbrnu.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpjycpbrnu.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpjycpbrnu.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n    sum = sum\
    \ + v\n  end\n  if sum <= w then\n    for i, v in ipairs(q) do\n      if q[i]\
    \ ~= q[#q - i + 1] then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        return true\n    else \n    \
    \    return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdikdyfu.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjdikdyfu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if is_palindrome(q) and sum <= w then\n    return true\n  else\n   \
    \ return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpthexsg9p.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpthexsg9p.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpthexsg9p.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    return isPalindrome(q)\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkgneuumo.lua:18:\
    \ attempt to call a nil value (global 'isPalindrome')\nstack traceback:\n\t/tmp/tmpkgneuumo.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpkgneuumo.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\treturn sum <= w and q[1] == q[#q]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    return w >= table.concat(q):reverse():gsub('([0-9])','%1+'):sub(1,-2)\
    \ and q == table.reverse(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpop48ijzh.lua:13:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpop48ijzh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpop48ijzh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal mirror = table.concat(q, \"\") == table.concat(table.reverse(q),\
    \ \"\")\n\tlocal total = 0\n\tfor _, i in ipairs(q) do\n\t\ttotal = total + i\n\
    \tend\n\treturn mirror and total <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgt10zb1.lua:13:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpdgt10zb1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdgt10zb1.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72fhva6l.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp72fhva6l.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local x, y = 0, 0\n    for i = 1, #q do\n        x =\
    \ x + q[i]\n        y = y + q[#q - i + 1]\n    end\n    return x <= w and x ==\
    \ y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8boo1lic.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8boo1lic.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local total = 0\n    for i = 1, #q do\n        total\
    \ = total + q[i]\n    end\n    if total <= w then\n        for i = 1, #q / 2 do\n\
    \            if q[i] ~= q[#q - i + 1] then\n                return false\n   \
    \         end\n        end\n        return true\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local bal, sum = true, 0\n  local i = 1\n  while i <= #q\
    \ / 2 do\n    bal = bal and q[i] == q[#q - i + 1]\n    sum = sum + q[i] + q[#q\
    \ - i + 1]\n    i = i + 1\n  end\n  return bal and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if (sum <= w) and (q[1] == q[#q]) then\n    return true\n  else\n  \
    \  return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tfor i = 1, #q do\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\tif sum <= w then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n    sum = sum\
    \ + v\n  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q\
    \ - i + 1] then\n        return false\n      end\n    end\n    return true\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local reverse = {}\n  local result = false\n  for i = #q,\
    \ 1, -1 do\n    reverse[#reverse + 1] = q[i]\n  end\n  local sum = 0\n  for i\
    \ = 1, #q do\n    sum = sum + q[i]\n  end\n  if #q == #reverse and sum <= w then\n\
    \    result = true\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoaxv07jm.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoaxv07jm.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local len, sum = #q, 0\n  if len == 1 then return true\
    \ end\n  for i = 1, len do\n    sum = sum + q[i]\n  end\n  if sum > w then return\
    \ false end\n  for i = 1, len // 2 do\n    if q[i] ~= q[len - i + 1] then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 1 then\n    return true\n  end\n  for i = 1, #q\
    \ do\n    local sum = 0\n    local first = q[i]\n    local last = q[#q - i + 1]\n\
    \    if #q - 1 - i <= i then\n      break\n    end\n    if first ~= last then\n\
    \      return false\n    end\n    for j = 1, #q do\n      sum = sum + q[j]\n \
    \   end\n    if sum > w then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipt03b_7.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpipt03b_7.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tlocal mid = math.floor(#q / 2)\n\t\tfor i = 1,\
    \ mid do\n\t\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for _, v in ipairs(q) do\n       \
    \ sum = sum + v\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n\
    \            if q[i] ~= q[#q - i + 1] then\n                return false\n   \
    \         end\n        end\n        return true\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        return true\n    else\n     \
    \   return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr69lt4zb.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr69lt4zb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q%2 == 0 then return false end\n  local sum = 0\n \
    \ for i = 1, #q do sum = sum + q[i] end\n  return sum <= w and q[1] == q[#q]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tlocal list = {}\n\tfor i, v in ipairs(q)\
    \ do\n\t\ttable.insert(list, v)\n\t\tsum = sum + v\n\tend\n\tlocal list2 = {}\n\
    \tfor i, v in ipairs(list) do\n\t\ttable.insert(list2, v)\n\tend\n\tlocal flag\
    \ = true\n\tfor i, v in ipairs(list) do\n\t\tif list[i] ~= list2[#list2 - i +\
    \ 1] then\n\t\t\tflag = false\n\t\tend\n\tend\n\tif sum <= w and flag then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if #q == 1 then\n        return true\n    end\n    if\
    \ q[1] + q[#q] <= w then\n        if #q == 2 then\n            return true\n \
    \       end\n        return will_it_fly(q(2, #q - 1), w)\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr6eemja8.lua:20:\
    \ attempt to call a table value (local 'q')\nstack traceback:\n\t/tmp/tmpr6eemja8.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpr6eemja8.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal t = 0\n\tlocal i = 1\n\twhile q[i] do\n\t\tt = t\
    \ + q[i]\n\t\ti = i + 1\n\tend\n\tif t <= w then\n\t\ti = 1\n\t\twhile q[i] and\
    \ q[i + 1] do\n\t\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\t\ti = i + 1\n\t\tend\n\t\treturn true\n\tend\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return table.concat(q, \"\") == table.concat(q, \"\", #q,\
    \ 1) and table.concat(q):len() <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7t5wpt0.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj7t5wpt0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local n=0\n  for i=1, #q do\n    n=n+q[i]\n  end\n  if\
    \ n<=w then\n    for i=1, #q/2 do\n      if q[i]~=q[#q-i+1] then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn (q[1]==q[#q]) and (q[1]+q[#q]<=w)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77tg9pcr.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp77tg9pcr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum,ok = 0,true\n  for i = 1, #q do\n    sum = sum\
    \ + q[i]\n    if q[i] ~= q[#q-i+1] then ok = false end\n  end\n  return ok and\
    \ sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmjl6kkr.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpbmjl6kkr.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal copy = {}\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\
    \tif q[i] ~= q[#q - i + 1] then\n\t\t\treturn false\n\t\tend\n\t\tsum = sum +\
    \ q[i]\n\tend\n\tif sum <= w then\n\t\treturn true\n\tend\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    -- your code here\n    local weight = 0\n    for i =\
    \ 1, #q do\n        weight = weight + q[i]\n    end\n    if weight <= w then\n\
    \        local palindrome = true\n        for i = 1, #q do\n            if q[i]\
    \ ~= q[#q - i + 1] then\n                palindrome = false\n                break\n\
    \            end\n        end\n        return palindrome\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local e = 0\n    for k, v in ipairs(q) do\n        e\
    \ = e + v\n    end\n    if e > w then\n        return false\n    end\n    local\
    \ p = {}\n    for k, v in ipairs(q) do\n        p[k] = v\n    end\n    table.sort(p)\n\
    \    for k, v in ipairs(p) do\n        if v ~= q[k] then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp310pimsm.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp310pimsm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return (is_pali(q) and sum(q) <= w)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp20a1xa5e.lua:13:\
    \ attempt to call a nil value (global 'is_pali')\nstack traceback:\n\t/tmp/tmp20a1xa5e.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp20a1xa5e.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if sum(q) <= w and is_balanced(q) then return true end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv2alp3ru.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpv2alp3ru.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpv2alp3ru.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return w >= (s.gsub(s.concat(q), '%D', '') and s.reverse(s.concat(q))\
    \ and q[1] == q[#q] and s.sum(q))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwfcs1vx.lua:13:\
    \ attempt to index a nil value (global 's')\nstack traceback:\n\t/tmp/tmpiwfcs1vx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpiwfcs1vx.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4f668c6.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd4f668c6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if sum(q) <= w and is_palindrome(q) then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpneouikf4.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpneouikf4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpneouikf4.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaye38nv.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwaye38nv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local c = 0\n    local ql = #q\n    local qs = 0\n  \
    \  for i = 1, ql do\n        qs = qs + q[i]\n        if q[i] ~= q[ql-i+1] then\n\
    \            c = c + 1\n        end\n    end\n    return c == 0 and qs <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        return true\n    else\n     \
    \   return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zax4ete.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zax4ete.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    if sum(q) > w then return false end\n    if #q % 2 ==\
    \ 0 then\n        local first = {}\n        local second = {}\n        for i =\
    \ 1, #q / 2 do\n            first[i] = q[i]\n            second[i] = q[#q - i\
    \ + 1]\n        end\n        return isEqual(first, second)\n    else\n       \
    \ local first = {}\n        local second = {}\n        for i = 1, math.floor(#q\
    \ / 2) do\n            first[i] = q[i]\n            second[i] = q[#q - i + 1]\n\
    \        end\n        return isEqual(first, second)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzu7tjuup.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpzu7tjuup.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzu7tjuup.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q // 2 do\n     \
    \       if q[i] ~= q[#q - i + 1] then\n                return false\n        \
    \    end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i, v in ipairs(q) do\n       \
    \ sum = sum + v\n    end\n    if sum <= w then\n        for i, v in ipairs(q)\
    \ do\n            if v ~= q[#q - i + 1] then\n                return false\n \
    \           end\n        end\n        return true\n    end\n    return false\n\
    end\nreturn will_it_fly\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv6nwf_lu.lua:28: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjqicf2r.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcjqicf2r.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local weight = 0\n  for i = 1, #q do\n    weight = weight\
    \ + q[i]\n  end\n  if weight <= w then\n    local palindrome = true\n    for i\
    \ = 1, #q / 2 do\n      if q[i] ~= q[#q - i + 1] then\n        palindrome = false\n\
    \        break\n      end\n    end\n    return palindrome\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return (q[1] == q[#q]) and (q[1] * #q <= w)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    return sum <= w and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnllop2q5.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnllop2q5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\treturn q[1] + q[#q] <= w and q[1] == q[#q]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_st0c4i1.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_st0c4i1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    return math.abs(table.sum(q)) <= w and table.is_palindrome(q)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwd964eg4.lua:13:\
    \ attempt to call a nil value (field 'sum')\nstack traceback:\n\t/tmp/tmpwd964eg4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpwd964eg4.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = table.accumulate(q,0,function(a, b) return\
    \ a + b end)\n  return sum <= w and table.is_palindrome(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi99waac1.lua:13:\
    \ attempt to call a nil value (field 'accumulate')\nstack traceback:\n\t/tmp/tmpi99waac1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpi99waac1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return q[1] + q[#q] <= w and #q <= 2 or #q < 2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cyto2ro.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_cyto2ro.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local isBalanced = true\n    for i = 1, #q/2 do\n     \
    \   if q[i] ~= q[#q - i + 1] then\n            isBalanced = false\n          \
    \  break\n        end\n    end\n    return isBalanced and sum <= w\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for _, v in ipairs(q) do\n       \
    \ sum = sum + v\n    end\n    if sum <= w then\n        local rq = table.reverse(q)\n\
    \        for i, v in ipairs(q) do\n            if v ~= rq[i] then\n          \
    \      return false\n            end\n        end\n        return true\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnlkb2y94.lua:18:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpnlkb2y94.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpnlkb2y94.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal ql, qs = #q, 0\n\tfor i=1, ql do\n\t\tqs = qs + q[i]\n\
    \tend\n\tif qs > w then\n\t\treturn false\n\tend\n\tfor i=1, ql/2 do\n\t\tif q[i]\
    \ ~= q[ql-i+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n    sum = sum\
    \ + v\n  end\n  if sum <= w then\n    if #q <= 1 then\n      return true\n   \
    \ else\n      local left = {}\n      local right = {}\n      for i, v in ipairs(q)\
    \ do\n        if i <= math.floor(#q / 2) then\n          table.insert(left, v)\n\
    \        elseif i > math.floor(#q / 2) then\n          table.insert(right, v)\n\
    \        end\n      end\n      if #q % 2 == 1 then\n        table.remove(right,\
    \ 1)\n      end\n      if table.concat(left) == table.concat(reverse(right)) then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \ else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpioueca1p.lua:33:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpioueca1p.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpioueca1p.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tlocal i = 1\n\twhile i <= #q do\n\t\t\
    if q[i] ~= q[#q - i + 1] then\n\t\t\treturn false\n\t\tend\n\t\tsum = sum + q[i]\n\
    \t\ti = i + 1\n\tend\n\treturn sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  return (q[1] == q[#q]) and (sum(q) <= w)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xvk068p.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp6xvk068p.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp6xvk068p.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- your code here\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  if\
    \ sum <= w then\n    if #q % 2 == 0 then\n      return false\n    end\n    if\
    \ #q % 2 ~= 0 then\n      for i = 1, #q do\n        if q[i] ~= q[#q - i + 1] then\n\
    \          return false\n        end\n      end\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local check1, check2, check3 = true, true, true\n  for\
    \ i = 1, #q do\n    if q[i] ~= q[#q - i + 1] then\n      check1 = false\n    end\n\
    \    if q[i] + q[i + 1] and q[i] + q[i + 1] > w then\n      check2 = false\n \
    \   end\n    if q[i] > w then\n      check3 = false\n    end\n  end\n  return\
    \ check1 and check2 and check3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8l73rdm.lua:18:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpz8l73rdm.lua:18: in local 'candidate'\n\t/tmp/tmpz8l73rdm.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local function helper(q,w)\n    if #q == 0 then\n     \
    \ return (w > 0)\n    else\n      return w < 0 and false or helper(q, w - table.remove(q,1))\n\
    \    end\n  end\n  if #q % 2 == 0 then\n    return false\n  else\n    local r\
    \ = table.remove(q, #q)\n    if helper(q, r) then\n      return true\n    else\n\
    \      return false\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc5xgw2k.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxc5xgw2k.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q < 2 then return true end\n  local f, b = 1, #q\n\
    \  while f < b do\n    if q[f] ~= q[b] then return false end\n    f, b = f + 1,\
    \ b - 1\n  end\n  local s = 0\n  for _, v in ipairs(q) do s = s + v end\n  return\
    \ s <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
