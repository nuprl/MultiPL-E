name: HumanEval_91_is_bored
language: lua
prompt: "-- You'll be given a string of words, and your task is to count the number\n\
  -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
  \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello world\"\
  )\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n-- 1\nlocal function is_bored(S)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
  \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
  \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
  \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive. will\
  \ kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a walk'),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- you code here\n  local count = 0\n  local index = 1\n  while index\
    \ <= string.len(S) do\n    local next = string.find(S, \"[.?!]\", index)\n   \
    \ if next == nil then\n      next = string.len(S) + 1\n    end\n    local sub\
    \ = string.sub(S, index, next - 1)\n    if string.find(sub, \"^I\") ~= nil then\n\
    \      count = count + 1\n    end\n    index = next + 1\n  end\n  return count\n\
    end", "\treturn 0\nend", "  local count = 0\n  for i in string.gmatch(S,\"[^%.%?!]+\"\
    ) do\n    local w = string.match(i,\"%S+\")\n    if w == \"I\" then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    return S:gsub(\"[!?%.]\
    \ ?I\", \"? I\"):gsub(\" ?[!?%.]\", \" \"):gsub(\"[!?%.]\", \"\")\n    :match(\"\
    .-I\") and 1 or 0\nend", "\tlocal count = 0\n\tfor s in S:gmatch(\"[^!.?]+\")\
    \ do\n\t\tif s:sub(1,1) == \"I\" then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "   local count = 0\n   for s in S:gmatch(\"%w+\") do\n\
    \      if s == \"I\" then\n         count = count + 1\n      end\n   end\n   return\
    \ count\nend", "  local parts = string.gmatch(S, \"[^!.?]+\")\n  local boredoms\
    \ = 0\n  for part in parts do\n    if string.match(part, \"^I\") then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend", "\t-- YOUR CODE HERE\n\
    end", "    local i = 0\n    local bored = 0\n    while i ~= nil do\n        i\
    \ = string.find(S, \"I\", i+1)\n        if i ~= nil then\n            bored =\
    \ bored + 1\n        end\n    end\n    return bored\nend", "   local count = 0\n\
    \   local _, index = S:gsub(\"I\",\" \")\n   return index\nend", "    local boredoms\
    \ = 0\n    for s in string.gmatch(S, \"%S+\") do\n        if s == \"I\" then\n\
    \            boredoms = boredoms + 1\n        end\n    end\n    return boredoms\n\
    end", "    S = S:lower()\n    local count = 0\n    for i in S:gmatch(\"[^.]+\"\
    ) do\n        if i:find(\"^%s*i\") then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend", "  -- Determine whether the string S\
    \ is boring or not.\n  -- If it is, return 1. Else, return 0.\n  return S:gsub(\"\
    I%p.*%p\",\"\")\nend", "    local boredoms = 0\n    for v in string.gmatch(S,\
    \ \"[^%.%?%!]+\") do\n        if string.find(v, \"^I\") then\n            boredoms\
    \ = boredoms + 1\n        end\n    end\n    return boredoms\nend", "    if S ==\
    \ \"\" then\n        return 0\n    end\n    local count = 0\n    local ss = string.split(S,\
    \ \"!\")\n    for i, s in ipairs(ss) do\n        local kk = string.split(s, \"\
    ?\")\n        for i, k in ipairs(kk) do\n            local b = string.split(k,\
    \ \".\")\n            for i, c in ipairs(b) do\n                if string.find(c,\
    \ \"^%s*I\") then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "  -- String.match\
    \ gives us everything that matches the string.\n  -- The '-1' means we get everything\
    \ that matches.\n  -- The '.' is a regular expression metacharacter, matching\
    \ any\n  -- character.  Here, we want to get all the sentences out.\n  -- The\
    \ '()' is a capture group, so we're actually telling lua\n  -- to give us everything\
    \ that matches the regex.\n  local sentences = string.match(S, \".-[?.!]\", -1)\n\
    \  -- We're going to count the number of sentences that start with I.\n  local\
    \ boredoms = 0\n  -- ipairs gives us a way to iterate over a table.\n  -- for\
    \ <variable>, <table> in ipairs(<table>) do\n  --   ...\n  -- end\n  for _, sentence\
    \ in ipairs(sentences) do\n    -- 'if' statements are simple conditional statements.\n\
    \    -- if <condition> then\n    --   <block>\n    -- end\n    -- The '==' operator\
    \ tests for equality.\n    -- The '%' is Lua's string interpolation operator.\n\
    \    -- This is a way to use strings as a template, and substituting\n    -- values\
    \ into it.\n    -- The 'string.sub' function gives us the substring of a string.\n\
    \    -- string.sub(<string>, <start>, <finish>)\n    -- The start and finish numbers\
    \ are one indexed (i.e. the first\n    -- character is position 1).\n    if string.sub(sentence,\
    \ 0, 1) == \"I\" then\n      boredoms = boredoms + 1\n    end\n  end\n  return\
    \ boredoms\nend", "  return select(2, string.gsub(S, \"I.-[.?!]\", \"\"))\nend",
  "    if S == nil then return -1 end\n    -- split string into sentences\n    local\
    \ sentences = {}\n    for str in string.gmatch(S, \"[^!.?]+\") do\n        table.insert(sentences,\
    \ str)\n    end\n    -- count the number of boredoms\n    local boredoms = 0\n\
    \    for i, s in ipairs(sentences) do\n        -- get the first word of the sentence\n\
    \        local fw = string.match(s, \"%a+\")\n        if fw == \"I\" then\n  \
    \          boredoms = boredoms + 1\n        end\n    end\n    return boredoms\n\
    end", "  return count_occurrences(S:lower(), \"i\")\nend", "  return S:gsub(\"\
    %s*I%s*\", \" \"):gsub(\"[.?!]%s*I%s*\", \" I \"):count(\"I\")\nend", "    local\
    \ boredoms = 0\n    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"\
    ^I%s\") then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend", "  local boredoms = 0\n  local sentence_start = true\n  for\
    \ i in string.gmatch(S, \"%S+\") do\n    if sentence_start and i == \"I\" then\n\
    \      boredoms = boredoms + 1\n    end\n    sentence_start = i:sub(-1) == \"\
    .\" or i:sub(-1) == \"?\" or i:sub(-1) == \"!\"\n  end\n  return boredoms\nend",
  "    local boredoms = 0\n    for sentence in string.gmatch(S, \"[^%.?!]+\") do\n\
    \        if string.find(sentence, \"^%s*I%s+\") then\n            boredoms = boredoms\
    \ + 1\n        end\n    end\n    return boredoms\nend", "    local boredoms =\
    \ 0\n    local s = S:gsub(\"[^%s]\", \"\")\n    local t = {}\n    for i in string.gmatch(s,\
    \ \"[^%s]+\") do\n        table.insert(t, i)\n    end\n    if t[1] == \"I\" then\n\
    \        boredoms = boredoms + 1\n    end\n    return boredoms\nend", "  if not\
    \ S then return 0 end\n  S = S:lower()\n  local boredoms = 0\n  local sentences\
    \ = S:split('[?!.]')\n  for _, s in ipairs(sentences) do\n    local words = s:split('\
    \ ')\n    local first = table.remove(words, 1)\n    if first == 'i' then\n   \
    \   boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend", "    local\
    \ boredoms = 0\n    for sentence in string.gmatch(S, \"[^%.?!]+\") do\n      \
    \  if string.find(sentence, \"^%s*I\") then\n            boredoms = boredoms +\
    \ 1\n        end\n    end\n    return boredoms\nend", "   local boredoms = 0\n\
    \   for word in S:gmatch(\"(%w+)%p\") do\n      if word == \"I\" then\n      \
    \   boredoms = boredoms + 1\n      end\n   end\n   return boredoms\nend", "  \
    \  local count = 0\n    for sentence in string.gmatch(S, '[^.!?]+') do\n     \
    \   if string.sub(sentence, 1, 2) == 'I ' then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    -- Convert the string to an\
    \ array of sentences.\n    local sentences = string.gmatch(S, \"[^.!?]+\")\n \
    \   local num_boredoms = 0\n    for sentence in sentences do\n        -- Check\
    \ if the sentence starts with the word \"I\".\n        local words = string.gmatch(sentence,\
    \ \"%S+\")\n        local first_word = words()\n        if first_word == \"I\"\
    \ then\n            num_boredoms = num_boredoms + 1\n        end\n    end\n  \
    \  return num_boredoms\nend", "    local n = 0\n    for i in string.gmatch(S,\
    \ \"%w+\") do\n        if i == \"I\" then\n            n = n + 1\n        end\n\
    \    end\n    return n\nend", "\tlocal b = 0\n\tlocal i = 0\n\tlocal c = 0\n\t\
    while i < #S do\n\t\tif S:sub(i, i) == \"I\" then\n\t\t\tb = b + 1\n\t\tend\n\t\
    \ti = i + 1\n\tend\n\treturn b\nend", "  local count = 0\n  for s in string.gmatch(S,\
    \ \"[^%.!?]+\") do\n    if string.sub(s, 1, 2) == \"I \" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "\tlocal count = 0\n\tfor w in S:gmatch('[^%!%.%?]+')\
    \ do\n\t\tif w:match('^I') then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "  local boredoms = 0\n  for sentence in S:gmatch(\"[^.!?]+\")\
    \ do\n    if sentence:find(\"^I\") then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend", "  local count = 0\n  for x in string.gmatch(S,\
    \ \"([^.!?]+)\") do\n    if string.match(x, \"^I\") then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  return S:gsub('I[%s%w]*%p',''):len()\n\
    end", "\tlocal count = 0\n\tlocal curr = nil\n\tlocal is_sentence = false\n\t\
    for w in S:gmatch(\"%S+\") do\n\t\tif w == \"I\" then\n\t\t\tif is_sentence then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tis_sentence = true\n\t\telseif is_sentence\
    \ and (w == \"!\" or w == \"?\" or w == \".\") then\n\t\t\tis_sentence = false\n\
    \t\tend\n\tend\n\treturn count\nend", "  local boredoms = 0\n  for word in S:gmatch(\"\
    %S+\") do\n    if word == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend", "  -- check the first letter of each sentence\n\
    \  -- is it \"I\"?\n  local n = 0\n  local l = S:len()\n  local i = 1\n  while\
    \ i <= l do\n    if S:sub(i, i) == \"I\" then\n      n = n + 1\n    end\n    while\
    \ i <= l and S:sub(i, i) ~= \".\" and S:sub(i, i) ~= \"?\" and S:sub(i, i) ~=\
    \ \"!\" do\n      i = i + 1\n    end\n    i = i + 1\n  end\n  return n\nend",
  "    local n = 0\n    for w in string.gmatch(S, \"%S+\") do\n        if w == \"\
    I\" then\n            n = n + 1\n        end\n    end\n    return n\nend", " \
    \   local n = 0\n    for _, m in ipairs(re.split(S, \"[.?!]\")) do\n        if\
    \ re.match(m, \"^I\") then\n            n = n + 1\n        end\n    end\n    return\
    \ n\nend", "    local b = 0\n    local words = S:split(\"%s\")\n    for _, word\
    \ in ipairs(words) do\n        if word == \"I\" then\n            b = b + 1\n\
    \        end\n    end\n    return b\nend", "  return select(2, S:gsub(\"%S+%s+I%s+\"\
    , \"\"))\nend", "  local count = 0\n  for _, sentence in ipairs(split(S, \"%.?\"\
    )) do\n    if starts_with(sentence, \"I\") then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend", "\tlocal count = 0\n\tfor word in S:gmatch(\"\
    [^.?!]+\") do\n\t\tif word:match(\"^%s*I\") then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "    local S = \" \" .. S\n    local count =\
    \ 0\n    local _, pos\n    repeat\n        _, pos = S:find(\" I\", pos)\n    \
    \    if pos then\n            count = count + 1\n            pos = pos + 1\n \
    \       end\n    until not pos\n    return count\nend", "  local count = 0\n \
    \ for word in string.gmatch(S, \"%S+\") do\n    count = (word == \"I\") and count\
    \ + 1 or count\n  end\n  return count\nend", "\tlocal boredoms = 0\n\tlocal start\
    \ = 1\n\twhile start <= #S do\n\t\tlocal start, stop = S:find(\"[.?!]\", start)\n\
    \t\tif start then\n\t\t\tif S:sub(stop - 2, stop - 2) == \"I\" then\n\t\t\t\t\
    boredoms = boredoms + 1\n\t\t\tend\n\t\t\tstart = stop + 1\n\t\telse\n\t\t\tbreak\n\
    \t\tend\n\tend\n\treturn boredoms\nend", "  local num_boredoms = 0\n  local st,\
    \ sp = s.find(S, \"! I\")\n  if sp == 1 then\n    return 1\n  end\n  while true\
    \ do\n    st, sp = s.find(S, \". I\")\n    if st == nil then\n      break\n  \
    \  end\n    num_boredoms = num_boredoms + 1\n    S = s.sub(S, sp + 1)\n  end\n\
    \  return num_boredoms\nend", "    local boredoms = 0\n    local start = string.find(S,\
    \ '%s*I')\n    while start do\n        -- Next sentence!\n        local _, stop\
    \ = string.find(S, '%s*[%.?!]', start)\n        if stop then\n            boredoms\
    \ = boredoms + 1\n            start = string.find(S, '%s*I', stop)\n        else\n\
    \            break\n        end\n    end\n    return boredoms\nend", "\tlocal\
    \ count = 0\n\tfor word in S:gmatch(\"[^.?!]+\") do\n\t\tif word:match(\"^I\"\
    ) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local\
    \ t = string.split(S, '%p')\n    local count = 0\n    for i, v in ipairs(t) do\n\
    \        if t[i] == 'I' then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend", "  local n = 0\n  for i, s in ipairs(split(S, '.?!'))\
    \ do\n    local res = match(s, '^%s*I')\n    if res ~= nil then\n      n = n +\
    \ 1\n    end\n  end\n  return n\nend", "    local n = 0\n    S = S .. \".\"\n\
    \    for word in S:gmatch(\"[^%?%.!]+\") do\n        if word:match(\"^I\") then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend", "\tlocal count\
    \ = 0\n\tfor _, sentence in ipairs(split(S, \".\")) do\n\t\tfor _, word in ipairs(split(sentence,\
    \ \" \")) do\n\t\t\tif word == \"I\" then\n\t\t\t\tcount = count + 1\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "   local result = 0\n\
    \   local idx = 1\n   while idx <= #S do\n      local st, en = S:find('[%p]',\
    \ idx)\n      if st == nil then\n         -- no more delimiters, check if the\
    \ remaining of the string\n         -- starts with \"I\".\n         if S:sub(idx,\
    \ idx + 1) == 'I' then\n            result = result + 1\n         end\n      \
    \   break\n      end\n      if S:sub(idx, idx + 1) == 'I' then\n         result\
    \ = result + 1\n      end\n      idx = en + 1\n   end\n   return result\nend",
  "    local function find_i(S)\n        local start = 1\n        local i = string.find(S,\
    \ \"I\", start)\n        return i\n    end", "    local boredoms = 0\n    for\
    \ sentence in S:gmatch(\"[^.!?]+\") do\n        local first_word = sentence:match(\"\
    %w+\")\n        if first_word == \"I\" then\n            boredoms = boredoms +\
    \ 1\n        end\n    end\n    return boredoms\nend", "    return S:gsub(\"(.-)%p*I.-%p*\"\
    , \"%1\"):len()\nend", "    local cnt = 0\n    for w in string.gmatch(S, \"[^%?%!%.]+\"\
    ) do\n        cnt = cnt + (w:match(\"^I\") and 1 or 0)\n    end\n    return cnt\n\
    end", "    -- Write your code here\n    -- 0 is initial\n    -- 1 is search I\n\
    \    -- 2 is search space\n    local state = 0\n    local r = 0\n    for i = 1,\
    \ #S do\n        if state == 0 then\n            if S:sub(i, i) == \"I\" then\n\
    \                state = 1\n            end\n        elseif state == 1 then\n\
    \            if S:sub(i, i) == \" \" then\n                state = 2\n       \
    \     else\n                state = 0\n            end\n        elseif state ==\
    \ 2 then\n            if S:sub(i, i) == \".\" or S:sub(i, i) == \"?\" or S:sub(i,\
    \ i) == \"!\" then\n                state = 0\n                r = r + 1\n   \
    \         end\n        end\n    end\n    return r\nend", "  -- Split input string\
    \ into words\n  local words = S:gmatch(\"%w+\")\n  -- Keep track of the number\
    \ of boredoms\n  local boredoms = 0\n  -- Loop through the words and see if they're\
    \ sentences starting with \"I\"\n  for word in words do\n    if word == \"I\"\
    \ then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend",
  "    local count = 0\n    for match in S:gmatch(\"%S+\") do\n        if match ==\
    \ \"I\" then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  return #S:gmatch('I[^%.?!]*[%.?!]')\nend", "    -- TODO: define\
    \ your own function body\nend", "   local function is_sentence(X)\n      return\
    \ X:match(\"^[a-zA-Z].+[.?!]$\")\n   end\n   local n = 0\n   for sentence in S:gmatch(\"\
    [^.?!]+\") do\n      if is_sentence(sentence) and is_bored(sentence) then\n  \
    \       n = n + 1\n      end\n   end\n   return n\nend", "\tlocal boredoms = 0\n\
    \tlocal pattern = \"I\"\n\tfor s in S:gmatch(\"[^!.?]+\") do\n\t\tfor w in s:gmatch(\"\
    %S+\") do\n\t\t\tif w == pattern then\n\t\t\t\tboredoms = boredoms + 1\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn boredoms\nend", "    local count\
    \ = 0\n    for sentence in S:gmatch(\"([^%.%?!]+)[%.%?!]\") do\n        local\
    \ first_word = sentence:match(\"%S+\")\n        if first_word == \"I\" then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for line in string.gmatch(S, \"[^.?!]+\") do\n       \
    \ for word in string.gmatch(line, \"[^%s]+\") do\n            if word == \"I\"\
    \ then\n                count = count + 1\n                break\n           \
    \ end\n        end\n    end\n    return count\nend", "  local boredoms = 0\n \
    \ local index = 1\n  while index <= string.len(S) do\n    -- Skip non-boredoms\n\
    \    while (index <= string.len(S))\n      and (not string.find(S, \"^I[%s%p]\"\
    , index)) do\n      index = string.find(S, \"[%s%p]\", index)\n      index = index\
    \ + 1\n    end\n    -- Count boredoms\n    while (index <= string.len(S))\n  \
    \    and (string.find(S, \"^I[%s%p]\", index)) do\n      boredoms = boredoms +\
    \ 1\n      index = string.find(S, \"[%s%p]\", index)\n      index = index + 1\n\
    \    end\n  end\n  return boredoms\nend", "    return tonumber(string.gsub(S,\
    \ \"I\", \"\"))\nend", "  local boredoms = 0\n  local sentence_starts = { '.',\
    \ '?', '!' }\n  local word_start = 1\n  local word_end = word_start\n  while word_end\
    \ <= #S do\n    if word_end ~= 1 and S:sub(word_end, word_end) == ' ' then\n \
    \     if S:sub(word_start, word_start + 1) == 'I' then\n        boredoms = boredoms\
    \ + 1\n      end\n      word_start = word_end + 1\n    elseif table.indexof(sentence_starts,\
    \ S:sub(word_end, word_end)) then\n      if S:sub(word_start, word_start + 1)\
    \ == 'I' then\n        boredoms = boredoms + 1\n      end\n      word_start =\
    \ word_end + 1\n    end\n    word_end = word_end + 1\n  end\n  return boredoms\n\
    end", "    local boredoms = 0\n    for _,s in ipairs(split(S, '!')) do\n     \
    \   for _,s in ipairs(split(s, '.')) do\n            for _,s in ipairs(split(s,\
    \ '?')) do\n                if string.match(s, '^%s*I') then\n               \
    \     boredoms = boredoms + 1\n                end\n            end\n        end\n\
    \    end\n    return boredoms\nend", "    local b = 0\n    for s in S:gmatch('[^.!?]+')\
    \ do\n        if s:match('^I ') then\n            b = b + 1\n        end\n   \
    \ end\n    return b\nend\nassert(is_bored(\"Hello world\") == 0)\nassert(is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\") == 1)\nassert(is_bored(\"\
    I love programming in Lua!\") == 1)\nassert(is_bored(\"I am a little bored.\"\
    ) == 1)\nassert(is_bored(\"I am so bored, I am loosing all my motivation.! I want\
    \ to sleep. I hate life.\") == 3)\nassert(is_bored(\"I am so bored, I am loosing\
    \ all my motivation. I want to sleep. I hate life.\") == 3)\nassert(is_bored(\"\
    I am so bored, I am loosing all my motivation. I want to sleep. I hate life. What\
    \ can I do?\") == 3)\nassert(is_bored(\"I am so bored, I am loosing all my motivation.\
    \ I want to sleep. I hate life. What can I do ?\") == 3)\nassert(is_bored(\"I\
    \ am so bored, I am loosing all my motivation. I want to sleep. I hate life. What\
    \ can I do! \") == 3)\nassert(is_bored(\"I am so bored, I am loosing all my motivation.\
    \ I want to sleep. I hate life. What can I do? \") == 3)\nassert(is_bored(\"I\
    \ am so bored, I am loosing all my motivation. I want to sleep. I hate life. What\
    \ can I do? How can I go on?\") == 4)\nassert(is_bored(\"I am so bored, I am loosing\
    \ all my motivation. I want to sleep. I hate life. What can I do? How can I go\
    \ on?\") == 4)\nassert(is_bored(\"I am so bored, I am loosing all my motivation.\
    \ I want to sleep. I hate life. What can I do? How can I go on! \") == 4)\nassert(is_bored(\"\
    I am so bored, I am loosing all my motivation.", "\tlocal count = 0\n\tfor match\
    \ in string.gmatch(S, \"[^%.%?!]*I[^%.%?!]*\") do\n\t\tcount = count + 1\n\tend\n\
    \treturn count\nend", "  local count = 0\n  for t in string.gmatch(S, \"[^.!?]+\"\
    ) do\n    if string.match(t, \"^I\") then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "\treturn select(2, S:gsub(\"[!.]%sI%s\", \"\"))\n\
    end", "  local count = 0\n  for _, word in ipairs(string.split(S, '%p')) do\n\
    \    if word == 'I' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  -- TODO\nend", "  local boredoms = 0\n  for word in S:gmatch(\"[^%.!?]+\"\
    ) do\n    if word:match(\"^%s*I[^%w]\") then\n      boredoms = boredoms + 1\n\
    \    end\n  end\n  return boredoms\nend", "  for sentence in S:gmatch(\"[^.?!]+\"\
    ) do\n    local word = sentence:match(\"[^%s]+\")\n    if word == \"I\" then\n\
    \      return 1\n    end\n  end\n  return 0\nend", "\treturn #(S:gmatch(\"I\"\
    ))\nend", "    local n = 0\n    local nbored = 0\n    local nchar = string.len(S)\n\
    \    local c\n    while n < nchar do\n        n = n + 1\n        c = string.sub(S,\
    \ n, n)\n        if string.find(\".?!\", c) then\n            nbored = nbored\
    \ + 1\n        end\n    end\n    return nbored\nend", "    if S == nil then\n\
    \        return 0\n    end\n    return S:gsub(\"%S[^%.%?%!]*I[^%.%?%!]*[%.%?%!]\"\
    , \"\")\nend", "    local count = 0\n    for word in S:gmatch(\"%S+\") do\n  \
    \      if word == \"I\" then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend", "  local res = 0\n  for s in S:gmatch(\"[^%.%?!]+\"\
    ) do\n    if s:find(\"^I[^%a]\") then\n      res = res + 1\n    end\n  end\n \
    \ return res\nend", "    local boredoms = 0\n    local s = S:gsub(\"%!%.\", \"\
    .\")\n    s = s:gsub(\"%?%.\", \".\")\n    s = s:gsub(\"%.%.\", \".\")\n    s\
    \ = s:gsub(\"[!?.]+\", \".\")\n    for str in s:gmatch(\"[^%.]+\") do\n      \
    \  if str:find(\"^I%s\") then\n            boredoms = boredoms + 1\n        end\n\
    \    end\n    return boredoms\nend", "    local boredoms = 0\n    local is_bored_flag\
    \ = false\n    for word in string.gmatch(S, \"%w+\") do\n        if is_bored_flag\
    \ == true then\n            if word == \".\" or word == \"?\" or word == \"!\"\
    \ then\n                is_bored_flag = false\n            end\n        else\n\
    \            if word == \"I\" then\n                is_boredoms = boredoms + 1\n\
    \                is_bored_flag = true\n            end\n        end\n    end\n\
    \    return boredoms\nend", "    return select(2, S:gsub(\"%b.!%.?\", \" \"))\n\
    end", "    local _, c = string.gsub(S, \"I[A-Z][^.!?]*[.!?]\", \"\")\n    return\
    \ c\nend", "  return 0\nend", "    -- given a string S, returns the number of\
    \ borings\n    -- sentences with \"I\", sentences are separated by '.', '?', '!'\n\
    \    S = S:lower()\n    local count = 0\n    for i in S:gmatch(\"I\") do\n   \
    \     count = count + 1\n    end\n    return count\nend", "   -- TODO\n   local\
    \ num = 0\n   for word in string.gmatch(S, \"[^.?!]+\") do\n      if (string.find(word,\
    \ \"^I\")) then\n         num = num + 1\n      end\n   end\n   return num\nend",
  "    -- TODO: implement me!\n    if S == nil then\n        return 0\n    end\n \
    \   local len = string.len(S)\n    if len == 0 then\n        return 0\n    end\n\
    \    local count = 0\n    local index = 1\n    while index <= len do\n       \
    \ local i = string.find(S, \"[?.!]\", index)\n        if i == nil then\n     \
    \       break\n        end\n        local sub = string.sub(S, index, i - 1)\n\
    \        local is_boring = false\n        for _, v in ipairs(string.split(sub,\
    \ \" \")) do\n            if v == \"I\" then\n                is_boring = true\n\
    \                break\n            end\n        end\n        if is_boring then\n\
    \            count = count + 1\n        end\n        index = i + 1\n    end\n\
    \    return count\nend", "  -- you know it\nend", "    -- Change this\n    return\
    \ 0\nend", "  return select(2, S:gsub(\"%w+%s*I\", \"\"))\nend", "\treturn tonumber(S:gsub(\"\
    [^I]I\", \"\"):gsub(\".\", \"\"))\nend", "    local s, _ = S:gsub(\"I \", \"I\"\
    )\n    return (S:len() - s:len()) / 2\nend", "  -- your code here\n  local count\
    \ = 0\n  local strt = 1\n  local new = \"\"\n  for i = 1, #S do\n    if S:sub(i,i)\
    \ == \"!\" or S:sub(i,i) == \".\" or S:sub(i,i) == \"?\" then\n      new = S:sub(strt,i)\n\
    \      if new:sub(1,1) == \"I\" then\n        count = count + 1\n      end\n \
    \     strt = i + 1\n    end\n  end\n  return count\nend", "  for i in string.gmatch(S,\
    \ \"%S+\") do\n    return (i == \"I\") and 1 or 0\n  end\nend", "  local function\
    \ count_boredoms(boredoms, S)\n    if not S then return boredoms end\n    local\
    \ S1, S2 = string.match(S, \"(I )(.*)\")\n    if S1 then\n      S = S2\n     \
    \ return count_boredoms(boredoms + 1, S)\n    else\n      local S1, S2 = string.match(S,\
    \ \"([^%.]*)(.*)\")\n      if S1 then\n        S = S2\n        return count_boredoms(boredoms,\
    \ S)\n      else\n        return boredoms\n      end\n    end\n  end\n  return\
    \ count_boredoms(0, S)\nend", "  local c = 0\n  for w in string.gmatch(S, '[^%.?!]+')\
    \ do\n    c = (w:match('^I ') and c + 1) or c\n  end\n  return c\nend", "    --\
    \ your code here\nend", "    local i = 0\n    local count = 0\n    while i < #S\
    \ do\n        local j = string.find(S, '[.?!]', i)\n        if j then\n      \
    \      local x = string.find(S, 'I ', i)\n            if x and x < j then\n  \
    \              count = count + 1\n            end\n            i = j + 1\n   \
    \     else\n            break\n        end\n    end\n    return count\nend", " \
    \ if S == nil then\n    return 0\n  end\n  local count = 0\n  local split_pattern\
    \ = '[!.?]'\n  local sentences = stringx.split(S, split_pattern)\n  for i = 1,\
    \ #sentences do\n    local s = sentences[i]\n    if stringx.startswith(s, 'I')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ i, c = 0, 0\n    for s in string.gmatch(S..\".\", \"[^%.!?]+\") do\n       \
    \ if s:match(\"^%s*I%s*\") then\n            c = c + 1\n        end\n    end\n\
    \    return c\nend", "    local count = 0\n    local c = re.compile([[^\\s*I\\\
    s]])\n    for s in re.gmatch(S, [[\\w+(\\.|\\?|\\!)]]) do\n        if c:match(s)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  count = 0\n  for word in string.gmatch(S, \"%S+\") do\n    if word ==\
    \ \"I\" then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ -- Replace the following code.\n  return 0\nend", "  -- Write your code here\n\
    \  local bored = 0\n  for s in S:gmatch(\"%S+\") do\n    if s == \"I\" then\n\
    \      bored = bored + 1\n    end\n  end\n  return bored\nend", "    local boredoms\
    \ = 0\n    for sentence in S:gmatch(\"[^.!?]+\") do\n        local words = sentence:split(\"\
    \ \")\n        if words[1] == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend", "   return #S:gmatch(\"I.*[.!?]\"\
    )\nend", "\tlocal i = 1\n\tlocal boredoms = 0\n\twhile i <= #S do\n\t\tif S:sub(i,\
    \ i + 1) == \"I \" then\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\t\twhile S:sub(i,\
    \ i) ~= \" \" and i <= #S do\n\t\t\ti = i + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn boredoms\nend", "  local num = 0\n  S = string.match(S, \"([^%.]+)\"\
    )\n  for i in string.gmatch(S, \"%S+\") do\n    if i == \"I\" then\n      num\
    \ = num + 1\n    end\n  end\n  return num\nend", "\t\n\tlocal count = 0\n\tlocal\
    \ cur = 1\n\t\n\tfor i = 1, #S do\n\t\tlocal c = S:sub(i, i)\n\t\t\n\t\tif c ==\
    \ \".\" or c == \"?\" or c == \"!\" then\n\t\t\tif S:sub(cur, cur + 1) == \"I\
    \ \" then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tcur = i + 2\n\t\tend\n\t\
    end\n\t\n\treturn count\nend", "  local count = 0\n  local s_start, s_end, sentence\n\
    \  repeat\n    s_start, s_end = S:find(\"[%.!?]\")\n    if s_start then\n    \
    \  sentence = S:sub(1, s_start - 1)\n      if sentence:sub(1, 2) == \"I \" then\n\
    \        count = count + 1\n      end\n      S = S:sub(s_end + 1)\n    end\n \
    \ until not s_start\n  return count\nend", "  local boredoms = 0\n  local sentence\n\
    \  for sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\"\
    ) then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend",
  "  -- TODO\nend", "\tlocal count = 0\n\tfor word in S:gmatch(\"[^%s?.!]+\") do\n\
    \t\tif word == \"I\" then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    -- TODO: Implement this function\nend", "  local counter = 0\n  local\
    \ x = S:gmatch(\"[^%?%!%.]+\")\n  for sentence in x do\n    if string.match(sentence,\
    \ \"^%s*I%s+\") then\n      counter = counter + 1\n    end\n  end\n  return counter\n\
    end", "    local num_boredoms = 0\n    local index = 0\n    while index < #S do\n\
    \        local first_letter, last_letter = S:find(\"%w+\", index)\n        if\
    \ first_letter == 1 and S:sub(first_letter, last_letter) == \"I\" then\n     \
    \       num_boredoms = num_boredoms + 1\n        end\n        index = last_letter\
    \ + 1\n    end\n    return num_boredoms\nend", "  local a, b = string.find(S,\
    \ \"I%s+\")\n  if a == nil then\n    return 0\n  else\n    local c, d = string.find(S,\
    \ \"%.%s+\")\n    if c == nil then\n      return 1\n    else\n      return 1 +\
    \ is_bored(string.sub(S, d+1))\n    end\n  end\nend", "\tlocal boredoms = 0\n\t\
    local count = 0\n\tlocal sentence = \"\"\n\tfor token in string.gmatch(S, \"[^%.!?]+\"\
    ) do\n\t\tcount = count + 1\n\t\tif count ~= 1 then\n\t\t\tsentence = sentence\
    \ .. token\n\t\tend\n\t\tif count == 1 and string.sub(token, 1, 1) == \"I\" then\n\
    \t\t\tboredoms = boredoms + 1\n\t\telseif count > 1 and string.sub(sentence, 1,\
    \ 1) == \"I\" then\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\n\
    end", "    local total = 0\n    for token in S:gmatch(\"%S+\") do\n        if\
    \ token == \"I\" then\n            total = total + 1\n        end\n    end\n \
    \   return total\nend", "  local count = 0\n  local del = '.'\n  local dels =\
    \ {'.', '?', '!'}\n  while del do\n    local start, stop = S:find(del)\n    if\
    \ start then\n      local substr = S:sub(start + 1, stop - 1)\n      if #substr\
    \ > 0 then\n        local first = substr:sub(1, 1)\n        if first == 'I' then\n\
    \          count = count + 1\n        end\n      end\n      for i,d in ipairs(dels)\
    \ do\n        if d ~= del then\n          del = d\n          break\n        end\n\
    \      end\n    else\n      del = nil\n    end\n  end\n  return count\nend", " \
    \   S = S .. \".\"\n    local count = 0\n    for s in S:gmatch(\"%a+\") do\n \
    \       if s == \"I\" then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local boredoms = 0\n    local sentence = {}\n  \
    \  for line in S:gmatch(\"[^.?!]+\") do\n        sentence = line:split(\" \")\n\
    \        if sentence[1] == \"I\" then\n            boredoms = boredoms + 1\n \
    \       end\n    end\n    return boredoms\nend", "    local count = 0\n    local\
    \ s = S\n    while true do\n        if s:sub(1, 2) == \"I \" then\n          \
    \  count = count + 1\n        end\n        s = s:sub(2)\n        if s:sub(1, 1)\
    \ == \".\" or s:sub(1, 1) == \"?\" or s:sub(1, 1) == \"!\" then\n            break\n\
    \        end\n    end\n    return count\nend", "  -- use string.match() to match\
    \ a pattern\n  return 0\nend", "    local boredoms = 0\n    local c\n    local\
    \ i = 1\n    local len = S:len()\n    while (i <= len) do\n        c = S:sub(i,\
    \ i)\n        if c == 'I' then\n            boredoms = boredoms + 1\n        end\n\
    \        if c == '.' or c == '?' or c == '!' then\n            while (i <= len)\
    \ do\n                i = i + 1\n                c = S:sub(i, i)\n           \
    \     if c == ' ' then\n                    break\n                end\n     \
    \       end\n        end\n        i = i + 1\n    end\n    return boredoms\nend\n\
    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n\
    print(is_bored(\"Hello world\"))", "  local count = 0\n  for word in string.gmatch(S,\
    \ \"[^%?%.!]+\") do\n    if string.sub(word, 1, 1) == \"I\" then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local boredoms = 0\n\
    \    local index = 1\n    while index <= #S do\n        if S:match(\"I\", index)\
    \ then\n            boredoms = boredoms + 1\n            index = index + 1\n \
    \       else\n            index = index + S:match(\"^[^.!?]+\", index):len()\n\
    \        end\n    end\n    return boredoms\nend", "    local splitted_by_dot =\
    \ split(S, '.')\n    local splitted_by_quest = split(S, '?')\n    local splitted_by_exclam\
    \ = split(S, '!')\n    local all_sentences = table.concat(splitted_by_dot, \"\"\
    )\n    all_sentences = table.concat(splitted_by_quest, \"\")\n    all_sentences\
    \ = table.concat(splitted_by_exclam, \"\")\n    local splitted_by_space = split(all_sentences,\
    \ ' ')\n    -- Iterate over all elements of splitted_by_space\n    local sum =\
    \ 0\n    for i, word in ipairs(splitted_by_space) do\n        if word == \"I\"\
    \ then\n            sum = sum + 1\n        end\n    end\n    return sum\nend",
  "  local count = 0\n  for w in string.gmatch(S, \"%a+\") do\n    if w == \"I\" then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local i =\
    \ 1\n    local n = 0\n    while i < #S do\n        local j = string.find(S, \"\
    [.?!]\", i)\n        if j == nil then\n            break\n        end\n      \
    \  local sentence = string.sub(S, i, j)\n        i = j + 1\n        if string.sub(sentence,\
    \ 1, 2) == \"I \" then\n            n = n + 1\n        end\n    end\n    return\
    \ n\nend", "    local boredoms = 0\n    for word in string.gmatch(S, \"%a+\")\
    \ do\n        if word == \"I\" then\n            boredoms = boredoms + 1\n   \
    \     end\n    end\n    return boredoms\nend", "  local n = 0\n  local i = 1\n\
    \  for s in S:gmatch(\"[^%?%.!]+\") do\n    if (i + 1 <= #s) and (s:sub(i, i+1)\
    \ == \"I \") then\n      n = n + 1\n    end\n  end\n  return n\nend", "    local\
    \ n = 0\n    local state = 0\n    for c in string.gmatch(S, '.') do\n        if\
    \ c == '.' or c == '?' or c == '!' then\n            state = 0\n        elseif\
    \ state == 0 and c == 'I' then\n            n = n + 1\n            state = 1\n\
    \        end\n    end\n    return n\nend", "   local count = 0\n   local strs\
    \ = string.split(S, \"!.\")\n   for i, str in ipairs(strs) do\n      local arr\
    \ = string.split(str, \" \")\n      if arr[1] == \"I\" then\n         count =\
    \ count + 1\n      end\n   end\n   return count\nend", "    local count = 0\n\
    \    for word in S:gmatch(\"[^.?!]+\") do\n        if word:gsub(\"^%s*(.-)%s*$\"\
    , \"%1\"):find(\"^I\") then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  -- TODO: Compute the number of boredoms in the given\
    \ sentence\n  return 0\nend", "  local boredoms = 0\n  S = string.gsub(S, \".\"\
    , function(s)\n    if s == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end)\n  return boredoms\nend", "    -- your code here\n    return nil\nend",
  "    local num = 0\n    local p1, p2 = S:find(\"I\", 1, true)\n    while p1 do\n\
    \        local found = false\n        for i = p1 - 1, 1, -1 do\n            if\
    \ S:sub(i, i) == \".\" or S:sub(i, i) == \"?\" or S:sub(i, i) == \"!\" then\n\
    \                found = true\n                break\n            end\n      \
    \  end\n        if found then\n            num = num + 1\n        end\n      \
    \  p1, p2 = S:find(\"I\", p2 + 1, true)\n    end\n    return num\nend", "  --\
    \ YOUR CODE HERE\n  local i, j = 1, 0\n  while i < string.len(S) do\n    while\
    \ i <= string.len(S) and string.sub(S, i, i) ~= \".\" and string.sub(S, i, i)\
    \ ~= \"?\" and string.sub(S, i, i) ~= \"!\" do\n      i = i + 1\n    end\n   \
    \ local tmp = string.sub(S, j + 1, i)\n    if string.sub(tmp, 1, 1) == \"I\" then\n\
    \      return 1\n    end\n    i = i + 1\n    j = i\n  end\n  return 0\nend", " \
    \  return S:gsub(\"%f[%w].-I.-[%.!?]\", \"\")\nend", "  local n = 0\n  for w in\
    \ string.gmatch(S, \"[^.?!]+\") do\n    if (w:match(\"^I\")) then\n      n = n\
    \ + 1\n    end\n  end\n  return n\nend", "  local sentences = split(S, \"[.?!]\"\
    )\n  local count = 0\n  for _, sentence in ipairs(sentences) do\n    local words\
    \ = split(sentence, \"%s+\")\n    if words[1] == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local boredoms = 0\n  for _, sentence\
    \ in pairs(S:split(\"[.?!]\")) do\n    if string.len(sentence) > 0 and string.sub(sentence,\
    \ 1, 1) == \"I\" then\n      boredoms = boredoms + 1\n    end\n  end\n  return\
    \ boredoms\nend", "    local bor = 0\n    local n = 0\n    local pat = \"^%s*\"\
    \n    local i, j = string.find(S, pat)\n    if j == 1 then\n        pat = \"[a-z]+\"\
    \n        i, j = string.find(S, pat)\n        if j ~= nil then\n            local\
    \ str = string.sub(S, i, j)\n            if str == \"I\" then\n              \
    \  bor = 1\n            end\n        end\n    end\n    return bor\nend", "  local\
    \ boredoms = 0\n  local index = 1\n  while index <= #S do\n    local word, end_index\
    \ = word(S, index)\n    if word == \"I\" then\n      local sentence, start_index\
    \ = sentence(S, index)\n      if sentence then\n        boredoms = boredoms +\
    \ 1\n        index = start_index\n      else\n        index = end_index\n    \
    \  end\n    else\n      index = end_index\n    end\n  end\n  return boredoms\n\
    end", "  local boredoms = 0\n  for sentence in string.gmatch(S, \"[^%.!%?]+\"\
    ) do\n    if string.find(sentence, \"^%s*I\") then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend", "  local N = 0\n  for _, w in\
    \ ipairs(S:split(patterns.sentence_splitter)) do\n    if w:starts_with('I') then\n\
    \      N = N + 1\n    end\n  end\n  return N\nend", "    local c = 0\n    local\
    \ s = S .. \" \"\n    for t in s:gmatch(\"(.-)%p%s\") do\n        if t:lower():match(\"\
    ^i%s\") then\n            c = c + 1\n        end\n    end\n    return c\nend",
  "    local count = 0\n    local index = 0\n    while index <= #S do\n        index\
    \ = S:find(\" I \", index + 1)\n        if index then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    -- your code goes here\n\
    \    local num = 0\n    local sentences = string.gmatch(S, \"[^%.?!]+\")\n   \
    \ for sentence in sentences do\n        local words = string.gmatch(sentence,\
    \ \"[^%s]+\")\n        local word = words()\n        if word == \"I\" then\n \
    \           num = num + 1\n        end\n    end\n    return num\nend", "    --\
    \ Write your code here:\n    local sentence = S:gmatch(\"%w+\")\n    local c =\
    \ 0\n    for word in sentence do\n        if word == \"I\" then\n            c\
    \ = c + 1\n        end\n    end\n    return c\nend", "  local boredoms = 0\n \
    \ for _, word in pairs(string.split(S, \" \")) do\n    if word == \"I\" then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend", "   \
    \ local boredoms = 0\n    for _, v in pairs(split(S, \"!\")) do\n        for _,\
    \ v in pairs(split(v, \"?\")) do\n            for _, v in pairs(split(v, \".\"\
    )) do\n                if v:sub(1, 2) == \"I \" then\n                    boredoms\
    \ = boredoms + 1\n                end\n            end\n        end\n    end\n\
    \    return boredoms\nend", "  local count = 0\n  for sentence in string.gmatch(S,\
    \ \"[^.?!]+\") do\n    local I = string.find(sentence, \"I\")\n    if (I == 1)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    --\
    \ your code here\n    sum = 0\n    for i = 1, #S do\n        if string.sub(S,\
    \ i, i) == \"I\" then\n            if string.sub(S, i-1, i-1) == \" \" then\n\
    \                sum = sum + 1\n            end\n        end\n    end\n    return\
    \ sum\nend", "  local count = 0\n  -- Count the number of sentences.\n  local\
    \ start = 1\n  while start < #S do\n    local pos = start\n    while pos <= #S\
    \ and S:sub(pos, pos) ~= '.' and S:sub(pos, pos) ~= '?' and S:sub(pos, pos) ~=\
    \ '!' do\n      pos = pos + 1\n    end\n    local sentence = S:sub(start, pos)\n\
    \    -- Check if the sentence starts with \"I\".\n    local i = 1\n    while i\
    \ <= #sentence and (sentence:sub(i, i) == ' ' or sentence:sub(i, i) == '\\t')\
    \ do\n      i = i + 1\n    end\n    if i <= #sentence and sentence:sub(i, i +\
    \ 1) == 'I ' then\n      count = count + 1\n    end\n    start = pos + 1\n  end\n\
    \  return count\nend", "    local count = 0\n    local f = string.find(S, \"I\"\
    )\n    local f2 = string.find(S, \".\")\n    local f3 = string.find(S, \"?\")\n\
    \    local f4 = string.find(S, \"!\")\n    if f and (f2 or f3 or f4) then\n  \
    \      if f2 then\n            if f > f2 then\n                count = count +\
    \ 1\n            end\n        elseif f3 then\n            if f > f3 then\n   \
    \             count = count + 1\n            end\n        elseif f4 then\n   \
    \         if f > f4 then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    return 0\nend", "  local boredoms\
    \ = 0\n  for word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend", "  local i = 0\n  for\
    \ s in S:gmatch(\"([^%.]+)\") do\n    if s:match(\"^%s*I%s\") then\n      i =\
    \ i + 1\n    end\n  end\n  return i\nend", "    local count = 0\n    local prev_idx\
    \ = 0\n    local i, s\n    while true do\n        i, s = string.find(S, \"I\"\
    , prev_idx)\n        if i == nil then\n            break\n        end\n      \
    \  if i ~= nil and (i == 1 or S:sub(i-1, i-1) == \".\" or S:sub(i-1, i-1) == \"\
    ?\" or S:sub(i-1, i-1) == \"!\") then\n            count = count + 1\n       \
    \ end\n        prev_idx = i + 1\n    end\n    return count\nend", "  local boredoms\
    \ = 0\n  for sentence in S:gmatch(\"[^.?!]+\") do\n    if sentence:sub(1,1) ==\
    \ \"I\" then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end", "  -- Split the sentence into words and check if each word is \"I\"\n  local\
    \ words = {}\n  for word in S:gmatch(\"%w+\") do\n    table.insert(words, word)\n\
    \  end\n  -- Count the sentences and check if the first word is \"I\"\n  local\
    \ sentences = 0\n  for _, word in ipairs(words) do\n    if word == \"I\" then\n\
    \      sentences = sentences + 1\n    end\n  end\n  return sentences\nend", " \
    \ local count = 0\n  -- your code here\n  -- S could be \"I am bored!\"\n  --\
    \ S could be \"I am bored. I am really bored. The cat is bored. Bored bored bored.\"\
    \n  local start = 1\n  local i = 1\n  local endS = 1\n  while i < string.len(S)\
    \ do\n    if string.sub(S, i, i) == \".\" or string.sub(S, i, i) == \"?\" or string.sub(S,\
    \ i, i) == \"!\" then\n      endS = i\n      subS = string.sub(S, start, endS)\n\
    \      if string.sub(subS, 1, 2) == \"I \" then\n        count = count + 1\n \
    \     end\n      i = i + 1\n      start = i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return count\nend", "  local boredoms = 0\n  for _, line in ipairs(utils.split(S,\
    \ \"%.|%?|!\")) do\n    if line:find(\"^%s*I\") then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend", "    if string.find(S, \"^I\"\
    ) == 1 then\n        return 1\n    else\n        return 0\n    end\nend", "  \
    \  -- Implementation goes here\n    local boredoms = 0", "    local count = 0\n\
    \    for line in S:gmatch('%w.*') do\n        if line:find('^I') then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend", "  return\
    \ #S:gmatch('%s+I%s+') + S:gmatch('^I%s+')() + S:gmatch('%s+I%.?$')()\nend", "\t\
    local sent = 0\n\tlocal bored = 0\n\tfor i = 1, string.len(S) do\n\t\tif S:sub(i,\
    \ i) == \".\" or S:sub(i, i) == \"?\" or S:sub(i, i) == \"!\" then\n\t\t\tsent\
    \ = sent + 1\n\t\t\tif sent == 1 then\n\t\t\t\tlocal a = S:sub(1, i)\n\t\t\t\t\
    local d = a:find(\"I\")\n\t\t\t\tif d ~= nil then\n\t\t\t\t\tbored = bored + 1\n\
    \t\t\t\tend\n\t\t\telse\n\t\t\t\tlocal b = S:sub(i, i + 1)\n\t\t\t\tlocal c =\
    \ b:find(\"I\")\n\t\t\t\tif c ~= nil then\n\t\t\t\t\tbored = bored + 1\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\tend\n\treturn bored\nend", "  if not S:find(\"I\"\
    ) then\n    return 0\n  end\n  local words = {}\n  for w in S:gmatch(\"%w+\")\
    \ do\n    table.insert(words, w)\n  end\n  local boredoms = 0\n  for i = 1, #words\
    \ - 1 do\n    if words[i] == \"I\" then\n      if words[i + 1] == \"am\" then\n\
    \        boredoms = boredoms + 1\n      end\n    end\n  end\n  return boredoms\n\
    end", "  local start, count = 1, 0\n  for i in S:gmatch('()%.') do\n    if S:sub(start,\
    \ i - 1):match('^[Ii] ') then\n      count = count + 1\n    end\n    start = i\
    \ + 1\n  end\n  return count\nend", "    -- your code here\n    --[[\n    local\
    \ count = 0\n    local first_part = \"\"\n    local second_part = \"\"\n    for\
    \ word in string.gmatch(S, \"[^%s]+\") do\n        if string.sub(word, 1, 1) ==\
    \ \"I\" then\n            count = count + 1\n        end\n    end\n    --]]\n\
    \    --[[\n    local count = 0\n    local first_part = \"\"\n    local second_part\
    \ = \"\"\n    for word in string.gmatch(S, \"%s*([^%s]+)%s*\") do\n        if\
    \ string.sub(word, 1, 1) == \"I\" then\n            count = count + 1\n      \
    \  end\n    end\n    --]]\n    --[[\n    local count = 0\n    local first_part\
    \ = \"\"\n    local second_part = \"\"\n    for word in string.gmatch(S, \"[^%s]+\"\
    ) do\n        if string.sub(word, 1, 1) == \"I\" then\n            count = count\
    \ + 1\n        end\n    end\n    --]]\n    --[[\n    local count = 0\n    local\
    \ first_part = \"\"\n    local second_part = \"\"\n    for word in string.gmatch(S,\
    \ \"[^%s]+\") do\n        if string.sub(word, 1, 1) == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    --]]\n    local count = 0\n  \
    \  local first_part = \"\"\n    local second_part = \"\"\n    for word in string.gmatch(S,\
    \ \"%s*([^%s]+)%s*\") do\n        if string.sub(word, 1, 1) == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", "\t\
    local nboredoms = 0\n\tlocal words = stringx.split(S)\n\tlocal nwords = #words\n\
    \tfor i = 1, nwords do\n\t\tif words[i] == \"I\" then\n\t\t\tif i == 1 then\n\t\
    \t\t\tnboredoms = nboredoms + 1\n\t\t\telseif stringx.strip(words[i-1]) == \"\
    .\" or stringx.strip(words[i-1]) == \"?\" or stringx.strip(words[i-1]) == \"!\"\
    \ then\n\t\t\t\tnboredoms = nboredoms + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ nboredoms\nend", "  local matches = {}\n  local total_boredoms = 0\n  local\
    \ counter = 0\n  local is_first_letter = true\n  for i=1,#S do\n    local char\
    \ = S:sub(i,i)\n    if is_first_letter and char == \"I\" then\n      is_first_letter\
    \ = false\n      total_boredoms = total_boredoms + 1\n    end\n    if (char ==\
    \ \".\" or char == \"?\" or char == \"!\") then\n      is_first_letter = true\n\
    \    end\n  end\n  return total_boredoms\nend", "   local boredoms = 0\n   for\
    \ word in S:gmatch(\"[^.!?]+\") do\n      if word:gsub(\"^%s*(.-)%s*$\", \"%1\"\
    ) == \"I\" then\n         boredoms = boredoms + 1\n      end\n   end\n   return\
    \ boredoms\nend", "    local counter = 0\n    local words = S:split(\"%p\")\n\
    \    for _,word in ipairs(words) do\n        if word == \"I\" then\n         \
    \   counter = counter + 1\n        end\n    end\n    return counter\nend", " \
    \   -- Write your solution here\n    local count = 0\n    for word in string.gmatch(S,\
    \ \"[^%.%?!]+\") do\n        if string.match(word, \"^I[%s%a]\") then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ boredoms = 0\n    for s in string.gmatch(S, \"[^%p]+\") do\n        if string.find(s,\
    \ \"^I%s+\") ~= nil then\n            boredoms = boredoms + 1\n        end\n \
    \   end\n    return boredoms\nend", "    local n = 0\n    local words = string.split(S,\
    \ \" \")\n    for _, w in ipairs(words) do\n        if w == \"I\" then\n     \
    \       n = n + 1\n        end\n    end\n    return n\nend", "\tlocal boredoms\
    \ = 0\n\tlocal current_sentence = S\n\twhile current_sentence ~= \"\" do\n\t\t\
    local sentence, next_sentence = current_sentence:match(\"^([^%.!%?]*)[%.?!]*()\"\
    )\n\t\tif sentence:find(\"^I \") or sentence:find(\"\\nI \") then\n\t\t\tboredoms\
    \ = boredoms + 1\n\t\tend\n\t\tcurrent_sentence = next_sentence\n\tend\n\treturn\
    \ boredoms\nend", "    local boredoms = 0\n    local sentences = string.split(S,\
    \ '!')\n    for _, sentence in ipairs(sentences) do\n        sentences = string.split(sentence,\
    \ '?')\n        for _, sentence in ipairs(sentences) do\n            sentences\
    \ = string.split(sentence, '.')\n            for _, sentence in ipairs(sentences)\
    \ do\n                if string.find(sentence, '^I') then\n                  \
    \  boredoms = boredoms + 1\n                end\n            end\n        end\n\
    \    end\n    return boredoms\nend", "   return string.gsub(S, \"^I.-[!?.]\",\
    \ \"\")\nend", "  local count = 0\n  local i = 0\n  local j = 0\n  local l = string.len(S)\n\
    \  for i = 1, l do\n    if string.sub(S, i, i) == \".\" or string.sub(S, i, i)\
    \ == \"?\" or string.sub(S, i, i) == \"!\" then\n      if string.sub(S, j, j)\
    \ == \"I\" then\n        count = count + 1\n      end\n      j = i + 1\n    end\n\
    \  end\n  return count\nend", "  -- Split S into sentences\n  local sentences\
    \ = split(S, \"[.?!]\")\n  local count = 0\n  for _, sentence in ipairs(sentences)\
    \ do\n    -- Split sentence into words\n    local words = split(sentence, \"[%s]+\"\
    )\n    if words[1] == \"I\" then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "\tlocal n = 0\n\tlocal i = 1\n\twhile i <= #S do\n\t\tif S:sub(i,\
    \ i) == 'I' then\n\t\t\ti = i + 1\n\t\t\twhile S:sub(i, i) ~= '.' and S:sub(i,\
    \ i) ~= '?' and S:sub(i, i) ~= '!' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\t\tn =\
    \ n + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn n\nend", "  local is_bored, count\
    \ = 0, 0\n  for word in S:gmatch(\"[^%s]+\") do\n    if word == \"I\" then\n \
    \     is_bored = 1\n    elseif word == \".\" or word == \"?\" or word == \"!\"\
    \ then\n      count = count + is_bored\n      is_bored = 0\n    end\n  end\n \
    \ return count\nend", "    if S:sub(1,2) == \"I \" then\n        return 1\n  \
    \  else\n        return 0\n    end\nend", "  -- :gsub(pattern, repl) substitutes\
    \ in string S all substrings matching\n  -- pattern with string repl. In the following\
    \ expression, we first separate\n  -- the string S into a list of sentences (separated\
    \ by '.', '?' or '!'), and\n  -- then we use gsub to replace all occurrences of\
    \ I by 1, and all other\n  -- words by 0. The result is a string \"01011...\"\
    \ where the 1's are the\n  -- positions of sentences starting with the word I,\
    \ and then we sum them.\n  return (S:gsub(\"[^%.%?!]+\", {\n    [\"I\"] = 1,\n\
    \    [0] = 0 -- this pair is necessary to ensure the match is replaced by 1\n\
    \  }):gsub(\"[^%.%?!]+\", \"+\"):gsub(\"[%.%?!]\", \"\")) -- substitute separators\
    \ with +\nend", "    local count = 0\n    S = string.gsub(S, \"%.%s*\", \".\"\
    )\n    local start, stop = string.find(S, \"I\")\n    while start do\n       \
    \ count = count + 1\n        start, stop = string.find(S, \"I\", stop + 1)\n \
    \   end\n    return count\nend", "  local count = 0\n  for word in string.gmatch(S,\
    \ \"%w+\") do\n    if word == \"I\" then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend", "    local num_boredom = 0\n    local _, count =\
    \ string.gsub(S, \"I\", \"\")\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
