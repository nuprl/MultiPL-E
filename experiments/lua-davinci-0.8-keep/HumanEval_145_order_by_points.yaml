name: HumanEval_145_order_by_points
language: lua
prompt: "-- Write a function which sorts the given list of integers\n-- in ascending\
  \ order according to the sum of their digits.\n-- Note: if there are several items\
  \ with similar sum of their digits,\n-- order them based on their index in original\
  \ list.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n-- >>> order_by_points([]) == []\nlocal function order_by_points(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
  \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
  \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
  \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11,\
  \ -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
  \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return {}\nend", end, "    local function get_digit_sum(number)\n\
    \        local sum = 0\n        for i = 1, string.len(number) do\n           \
    \ sum = sum + string.sub(number, i, i)\n        end\n        return sum\n    end",
  "    -- \u0434\u043E\u0441\u0442\u0430\u043D\u044C\u0442\u0435 \u0438\u0437 nums\
    \ \u0432\u0441\u0435 \u0447\u0438\u0441\u043B\u0430 \u0432 \u0432\u0438\u0434\u0435\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u0430,\n    -- \u043F\u043E\u0441\u0447\
    \u0438\u0442\u0430\u0439\u0442\u0435 \u0434\u043B\u044F \u043A\u0430\u0436\u0434\
    \u043E\u0433\u043E \u0447\u0438\u0441\u043B\u0430 \u0441\u0443\u043C\u043C\u0443\
    \ \u0435\u0433\u043E \u0446\u0438\u0444\u0440,\n    -- \u043E\u0442\u0441\u043E\
    \u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435 \u0447\u0438\
    \u0441\u043B\u0430 \u0432 \u043F\u043E\u0440\u044F\u0434\u043A\u0435 \u0432\u043E\
    \u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\u044F \u0441\u0443\u043C\u043C\
    \ \u0446\u0438\u0444\u0440\n    -- \u0438 \u043F\u0440\u0435\u043E\u0431\u0440\
    \u0430\u0437\u0443\u0439\u0442\u0435 \u0438\u0445 \u043E\u0431\u0440\u0430\u0442\
    \u043D\u043E \u0432 \u0441\u043F\u0438\u0441\u043E\u043A\n    return {2, 3, 1}\n\
    end", "    local function _is_greater(a, b)\n        local sa = string.gsub(a,\
    \ \"%s+\", \"\")\n        local sb = string.gsub(b, \"%s+\", \"\")\n        local\
    \ suma = 0\n        local sumb = 0\n        for i = 1, #sa do\n            suma\
    \ = suma + tonumber(sa:sub(i, i))\n        end\n        for i = 1, #sb do\n  \
    \          sumb = sumb + tonumber(sb:sub(i, i))\n        end\n        if suma\
    \ == sumb then\n            return a > b\n        else\n            return suma\
    \ > sumb\n        end\n    end\n    table.sort(nums, _is_greater)\n    return\
    \ nums\nend", "    if #nums == 0 then\n        return nums\n    end\n    -- Make\
    \ a map with key=sum of digits, value=list of numbers\n    local map = {}\n  \
    \  for i, n in ipairs(nums) do\n        local sum = 0\n        while n > 0 do\n\
    \            sum = sum + n % 10\n            n = math.floor(n / 10)\n        end\n\
    \        if map[sum] == nil then\n            map[sum] = {}\n        end\n   \
    \     table.insert(map[sum], i)\n    end\n    -- Use sum of digits as key for\
    \ sorting\n    table.sort(nums, function(a, b)\n        local sum_a = 0\n    \
    \    local sum_b = 0\n        while a > 0 do\n            sum_a = sum_a + a %\
    \ 10\n            a = math.floor(a / 10)\n        end\n        while b > 0 do\n\
    \            sum_b = sum_b + b % 10\n            b = math.floor(b / 10)\n    \
    \    end\n        return sum_a < sum_b\n    end)\n    -- Create a map with key=number,\
    \ value=order in original list\n    local order = {}\n    for i, n in ipairs(nums)\
    \ do\n        order[n] = i\n    end\n    -- Create a sorted list of numbers\n\
    \    local sorted = {}\n    for _, v in pairs(map) do\n        table.sort(v, function(a,\
    \ b)\n            return order[a] < order[b]\n        end)\n        for _, n in\
    \ ipairs(v) do\n            table.insert(sorted, nums[n])\n        end\n    end\n\
    \    return sorted\nend", "\tlocal sumToIndex = {}\n\tlocal ret = {}\n\tfor i,\
    \ v in ipairs(nums) do\n\t\tlocal sum = toDigits(v)\n\t\tif not sumToIndex[sum]\
    \ then\n\t\t\tsumToIndex[sum] = {}\n\t\tend\n\t\ttable.insert(sumToIndex[sum],\
    \ {idx = i, value = v})\n\tend\n\tfor k, v in pairs(sumToIndex) do\n\t\ttable.sort(v,\
    \ function(lhs, rhs) return lhs.idx < rhs.idx end)\n\t\tfor _, lhs in ipairs(v)\
    \ do\n\t\t\ttable.insert(ret, lhs.value)\n\t\tend\n\tend\n\treturn ret\nend",
  "    -- TODO: Implement your solution here.\n    if #nums == 0 then\n        return\
    \ nums\n    end\n    local result = {}\n    for i,v in ipairs(nums) do\n     \
    \   local sum = 0\n        while v ~= 0 do\n            sum = sum + v % 10\n \
    \           v = math.floor(v / 10)\n        end\n        result[i] = {value =\
    \ nums[i], sum = sum}\n    end\n    table.sort(result, function(a, b)\n      \
    \  if a.sum == b.sum then\n            return a.value < b.value\n        else\n\
    \            return a.sum < b.sum\n        end\n    end)\n    return extract_values(result)\n\
    end", "    local function _score(n)\n        local str = tostring(n)\n       \
    \ local sum = 0\n        for _, d in pairs(str:chars()) do\n            sum =\
    \ sum + tonumber(d)\n        end\n        return sum\n    end", "    -- implement\
    \ order_by_points here\n    if #nums == 0 then\n        return nums\n    end\n\
    \    local point = {}\n    for i,v in ipairs(nums) do\n        local p = 0\n \
    \       while v ~= 0 do\n            p = p + (v % 10)\n            v = math.floor(v\
    \ / 10)\n        end\n        point[i] = p\n    end\n    table.sort(point)\n \
    \   local ret = {}\n    for i,v in ipairs(point) do\n        for j,_ in ipairs(nums)\
    \ do\n            local p = 0\n            local temp = nums[j]\n            while\
    \ temp ~= 0 do\n                p = p + (temp % 10)\n                temp = math.floor(temp\
    \ / 10)\n            end\n            if p == v then\n                ret[i] =\
    \ nums[j]\n                nums[j] = nil\n                break\n            end\n\
    \        end\n    end\n    return ret\nend", "    return {}\nend", "    return\
    \ nums\nend", "    if not nums then return nil end\n    local function cmp(a,\
    \ b)\n        local s = {}\n        s[#s+1] = a; s[#s+1] = b\n        if(sum_of_digits(a)\
    \ == sum_of_digits(b)) then\n            if a < b then\n                return\
    \ s[1], s[2]\n            else\n                return s[2], s[1]\n          \
    \  end\n        elseif(sum_of_digits(a) < sum_of_digits(b)) then\n           \
    \ return s[1], s[2]\n        else\n            return s[2], s[1]\n        end\n\
    \    end\n    return insertion_sort(nums, cmp)\nend", "    local function getDigitSum(n)\n\
    \        local s = 0\n        for d in string.gmatch(string.format(\"%d\", n),\
    \ \"%d\") do\n            s = s + tonumber(d)\n        end\n        return s\n\
    \    end", "    local arr = {}\n    for i, v in ipairs(nums) do\n        local\
    \ x = v\n        local sum = 0\n        while x ~= 0 do\n            sum = sum\
    \ + (x % 10)\n            x = math.floor(x / 10)\n        end\n        arr[i]\
    \ = {idx = i, sum = sum, num = v}\n    end\n    table.sort(arr, function(a, b)\n\
    \        if a.sum == b.sum then\n            return a.idx < b.idx\n        else\n\
    \            return a.sum < b.sum\n        end\n    end)\n    local res = {}\n\
    \    for i, v in ipairs(arr) do\n        res[i] = v.num\n    end\n    return res\n\
    end", end, "  local m = {}\n  for i, v in ipairs(nums) do\n    m[i] = v\n  end\n\
    \  local function cmp(a, b)\n    if sum(a) == sum(b) then\n      return a < b\n\
    \    else\n      return sum(a) < sum(b)\n    end\n  end\n  table.sort(m, cmp)\n\
    \  return m\nend", "    if #nums == 0 then\n        return nums\n    end\n   \
    \ local function sum_of_digits(n)\n        local res = 0\n        while n > 0\
    \ do\n            res = res + n % 10\n            n = math.floor(n / 10)\n   \
    \     end\n        return res\n    end\n    local sorted = utils.sort(nums, function(x,\
    \ y)\n        return sum_of_digits(x) < sum_of_digits(y)\n    end)\n    return\
    \ sorted\nend", "  return {}\nend", "    local function compare(a, b)\n      \
    \  local a_sum, b_sum = 0, 0\n        for _, ch in ipairs(tostring(a)) do\n  \
    \          a_sum = a_sum + tonumber(ch)\n        end\n        for _, ch in ipairs(tostring(b))\
    \ do\n            b_sum = b_sum + tonumber(ch)\n        end\n        if a_sum\
    \ == b_sum then\n            return a < b\n        else\n            return a_sum\
    \ < b_sum\n        end\n    end\n    table.sort(nums, compare)\n    return nums\n\
    end", "\tlocal function sum_digits(num)\n\t\tlocal sum = 0\n\t\twhile num > 0\
    \ do\n\t\t\tsum = sum + num % 10\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\
    \treturn sum\n\tend", "    local t = {}\n    for i = 1, #nums do\n        local\
    \ sum = 0\n        for j = 1, #tostring(nums[i]) do\n            sum = sum + tonumber(tostring(nums[i]):sub(j,\
    \ j))\n        end\n        table.insert(t, sum)\n    end\n    local swap = true\n\
    \    while swap do\n        swap = false\n        for i = 1, #t do\n         \
    \   if t[i] > t[i + 1] then\n                local tmp = t[i]\n              \
    \  t[i] = t[i + 1]\n                t[i + 1] = tmp\n                tmp = nums[i]\n\
    \                nums[i] = nums[i + 1]\n                nums[i + 1] = tmp\n  \
    \              swap = true\n            end\n        end\n    end\n    return\
    \ nums\nend", "  return nums\nend", "    -- your code here\nend", "  local sums\
    \ = {}\n  for i, num in ipairs(nums) do\n    local digits = digitize(num)\n  \
    \  local sum = 0\n    for _, d in ipairs(digits) do\n      sum = sum + d\n   \
    \ end\n    table.insert(sums, { num = num, index = i, sum = sum })\n  end\n  table.sort(sums,\
    \ function(x, y)\n    if x.sum == y.sum then\n      return x.index < y.index\n\
    \    else\n      return x.sum < y.sum\n    end\n  end)\n  local ordered = {}\n\
    \  for _, x in ipairs(sums) do\n    table.insert(ordered, x.num)\n  end\n  return\
    \ ordered\nend", "    local points = {}\n    for i,v in ipairs(nums) do\n    \
    \    table.insert(points,{\n            i=i,v=v,p=sum_digits(v)\n        })\n\
    \    end\n    table.sort(points,function(a,b)\n        if a.p == b.p then\n  \
    \          return a.i < b.i\n        else\n            return a.p < b.p\n    \
    \    end\n    end)\n    local result = {}\n    for _,p in ipairs(points) do\n\
    \        table.insert(result,p.v)\n    end\n    return result\nend", "    if #nums\
    \ == 0 then\n        return nums\n    end\n    return ascending_list(list.merge(nums,\
    \ function(x, y)\n        return digit_sum(x) < digit_sum(y) or\n            \
    \   (digit_sum(x) == digit_sum(y) and x < y)\n    end))\nend", "    return nums\n\
    end", "    -- your code here\nend", "    -- TODO: Write your code here\n    return\
    \ nums\nend", "    -- Implement here\nend", "  local idx = 0\n  return _.sort(\n\
    \    nums,\n    function(a, b)\n      local res = points(a) - points(b)\n    \
    \  return res ~= 0 and res or idx - _.indexOf(nums, b)\n    end\n  )\nend", " \
    \ local points_map = {}\n  for i, n in ipairs(nums) do\n    points_map[n] = (n\
    \ < 0 and n*2 - 1 or n) + i\n  end\n  table.sort(nums, function(a, b) return points_map[a]\
    \ < points_map[b] end)\n  return nums\nend", end, "    -- your code here\nend",
  "  return {}\nend", "  return {}\nend", "  error(\"Not implemented yet\")\nend",
  "  -- your code here\nend", "\tlocal table_len = #nums\n\tlocal temp\n\tfor i =\
    \ 1, table_len do\n\t\tfor j = i + 1, table_len do\n\t\t\tif func.convert_integer_to_digit_sum(nums[i])\
    \ > func.convert_integer_to_digit_sum(nums[j]) then\n\t\t\t\ttemp = nums[i]\n\t\
    \t\t\tnums[i] = nums[j]\n\t\t\t\tnums[j] = temp\n\t\t\tend\n\t\tend\n\tend\n\t\
    return nums\nend", "    return nil\nend", "    -- your code here\nend", "    --\
    \ YOUR CODE HERE\nend", "  local function compare(x, y)\n    local x_sum = 0\n\
    \    local y_sum = 0\n    while x > 0 do\n      x_sum = x_sum + x % 10\n     \
    \ x = x // 10\n    end\n    while y > 0 do\n      y_sum = y_sum + y % 10\n   \
    \   y = y // 10\n    end\n    if x_sum == y_sum then\n      return x > y\n   \
    \ else\n      return x_sum < y_sum\n    end\n  end\n  table.sort(nums, compare)\n\
    \  return nums\nend", "    if not nums then\n        error(\"nums should be a\
    \ list of integers.\")\n    end\n    return sort_by(function(a, b)\n        return\
    \ sum_of_digits(a) < sum_of_digits(b)\n    end, nums)\nend", "  return _.sortBy(nums,\
    \ _.compose(sum_digits, _.abs))\nend", "    local sum_of_digits = {}\n    local\
    \ t_list = {}\n    local t_list_sort = {}\n    local t_list_all = {}\n    local\
    \ temp = 0\n    local k = 0\n    local l = 0\n    if (#nums > 0) then\n      \
    \  for k, v in pairs(nums) do\n            sum_of_digits[k] = 0\n            temp\
    \ = v\n            while (temp ~= 0) do\n                sum_of_digits[k] = sum_of_digits[k]\
    \ + temp % 10\n                temp = math.floor(temp / 10)\n            end\n\
    \        end\n        for k, v in pairs(sum_of_digits) do\n            if (t_list[v]\
    \ == nil) then\n                t_list[v] = {}\n            end\n            table.insert(t_list[v],\
    \ nums[k])\n        end\n        for k, v in pairs(t_list) do\n            table.insert(t_list_sort,\
    \ k)\n        end\n        table.sort(t_list_sort)\n        for k, v in pairs(t_list_sort)\
    \ do\n            for l, w in pairs(t_list[v]) do\n                table.insert(t_list_all,\
    \ w)\n            end\n        end\n    end\n    return t_list_all\nend", "  local\
    \ nums_with_points = {}\n  for k, v in ipairs(nums) do\n    nums_with_points[k]\
    \ = {\n      value = v,\n      points = sum_of_digits(v)\n    }\n  end\n  table.sort(nums_with_points,\
    \ function(a, b)\n    if a.points ~= b.points then\n      return a.points < b.points\n\
    \    else\n      return a.value < b.value\n    end\n  end)\n  local sorted_nums\
    \ = {}\n  for k, v in ipairs(nums_with_points) do\n    sorted_nums[k] = v.value\n\
    \  end\n  return sorted_nums\nend", "    return {}\nend", "    return nums\nend",
  "    local function count_digits(num)\n        local sum = 0\n        while num\
    \ > 0 do\n            sum = sum + num % 10\n            num = math.floor(num /\
    \ 10)\n        end\n        return sum\n    end", "    local p = {}\n    for i,v\
    \ in ipairs(nums) do\n        local t = {i,v}\n        local s = 0\n        for\
    \ ch in string.gmatch(tostring(v),'.') do\n            s = s + tonumber(ch)\n\
    \        end\n        t[3] = s\n        table.insert(p,t)\n    end\n    table.sort(p,function(a,b)\
    \ return a[3] < b[3] end)\n    local t = {}\n    for i,v in ipairs(p) do\n   \
    \     table.insert(t,v[2])\n    end\n    return t\nend", "    -- YOUR CODE HERE\n\
    \    return nums\nend", end, "  error('Not implemented')\nend", "  -- your code\
    \ here\nend", "    return {}\nend", "    local function helper(num)\n        return\
    \ num % 10 + math.floor(num / 10)\n    end\n    local count = #nums\n    local\
    \ index = 1\n    while index <= count do\n        local min = index\n        for\
    \ j = index + 1, count do\n            if helper(nums[j]) < helper(nums[min])\
    \ then\n                min = j\n            end\n        end\n        if min\
    \ ~= index then\n            nums[index], nums[min] = nums[min], nums[index]\n\
    \        end\n        index = index + 1\n    end\n    return nums\nend", "\t--\
    \ your code here\nend", "    -- TODO: Implementation here\nend", "  if #nums ==\
    \ 0 then\n    return nums\n  end\n  local sums = {}\n  for i, n in ipairs(nums)\
    \ do\n    sums[i] = sum_of_digits(n)\n  end\n  local orders = {}\n  for i in ipairs(nums)\
    \ do\n    orders[i] = i\n  end\n  table.sort(orders, function(a, b)\n    return\
    \ sums[a] < sums[b]\n  end)\n  local nums_sorted = {}\n  for i, j in ipairs(orders)\
    \ do\n    nums_sorted[i] = nums[j]\n  end\n  return nums_sorted\nend", "    if\
    \ not nums or #nums == 0 then\n        return nums\n    end", "    local t = {}\n\
    \    local numbers = {}\n    local index = 1\n    for _, v in ipairs(nums) do\n\
    \        t[#t + 1] = { v, v % 10 + v // 10 % 10 + v // 100 }\n    end\n    for\
    \ i = 1, #t do\n        local index = 1\n        for j = 1, #t do\n          \
    \  if t[j][2] < t[index][2] then\n                index = j\n            end\n\
    \        end\n        numbers[#numbers + 1] = t[index][1]\n        table.remove(t,\
    \ index)\n    end\n    return numbers\nend", "\ttable.sort(nums, function(a, b)\n\
    \t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a =\
    \ sum_a + tonumber(a:sub(i, i))\n\t\tend\n\t\tfor i = 1, #b do\n\t\t\tsum_b =\
    \ sum_b + tonumber(b:sub(i, i))\n\t\tend\n\t\tif sum_a ~= sum_b then\n\t\t\treturn\
    \ sum_a < sum_b\n\t\telse\n\t\t\treturn a < b\n\t\tend\n\tend)\n\treturn nums\n\
    end", "    local key_to_value = {}\n    local value_to_key = {}\n    for i, n\
    \ in ipairs(nums) do\n        local n_abs = math.abs(n)\n        local sum = 0\n\
    \        while n_abs > 0 do\n            sum = sum + n_abs % 10\n            n_abs\
    \ = math.floor(n_abs / 10)\n        end\n        key_to_value[i] = sum\n     \
    \   value_to_key[sum] = i\n    end\n    table.sort(key_to_value)\n    local result\
    \ = {}\n    for _, k in ipairs(key_to_value) do\n        table.insert(result,\
    \ nums[value_to_key[k]])\n    end\n    return result\nend", "  local sums = {}\n\
    \  for i,v in ipairs(nums) do\n    sums[i] = sum_of_digits(v)\n  end\n  return\
    \ insertion_sort(nums, sums)\nend", "    local sum_digs = {}\n    for k, v in\
    \ ipairs(nums) do\n        if not sum_digs[sum_digits(v)] then\n            sum_digs[sum_digits(v)]\
    \ = {}\n        end\n        table.insert(sum_digs[sum_digits(v)], v)\n    end\n\
    \    local sorted = {}\n    for dig_sum, vals in pairs(sum_digs) do\n        for\
    \ _, val in ipairs(vals) do\n            table.insert(sorted, val)\n        end\n\
    \    end\n    return sorted\nend", "    local digit_sums = {}\n    for i, v in\
    \ ipairs(nums) do\n        local sum = 0\n        while v > 0 do\n           \
    \ sum = sum + v % 10\n            v = math.floor(v / 10)\n        end\n      \
    \  digit_sums[i] = sum\n    end\n    return map(nums, function(i, v) return i,\
    \ digit_sums[i] end,\n        function(i1, i2) return digit_sums[i1] < digit_sums[i2]\
    \ end)\nend", "  -- your code here\nend", "\tif #nums == 0 then\n\t\treturn nums\n\
    \tend\n\ttable.sort(nums, function(a, b)\n\t\tif sum_of_digits(a) == sum_of_digits(b)\
    \ then\n\t\t\treturn a < b\n\t\tend\n\t\treturn sum_of_digits(a) < sum_of_digits(b)\n\
    \tend)\n\treturn nums\nend", "    local index_table = {}\n    local sum_table\
    \ = {}\n    local function helper(n)\n        local sum = 0\n        while n >\
    \ 0 do\n            sum = sum + n % 10\n            n = math.floor(n / 10)\n \
    \       end\n        return sum\n    end\n    for i, v in ipairs(nums) do\n  \
    \      local sum = helper(v)\n        if sum_table[sum] then\n            table.insert(sum_table[sum],\
    \ i)\n        else\n            sum_table[sum] = {i}\n        end\n    end\n \
    \   for _, v in pairs(sum_table) do\n        table.sort(v)\n        for _, v2\
    \ in ipairs(v) do\n            table.insert(index_table, v2)\n        end\n  \
    \  end\n    local result = {}\n    for _, v in ipairs(index_table) do\n      \
    \  table.insert(result, nums[v])\n    end\n    return result\nend", "    if type(nums)\
    \ ~= 'table' then\n        error('Expected a table', 2)\n    end\n    local points\
    \ = {}\n    for i, v in ipairs(nums) do\n        if type(v) ~= 'number' then\n\
    \            error('Not a number', 2)\n        end\n        local sum = 0\n  \
    \      while v > 0 do\n            sum = sum + v % 10\n            v = math.floor(v\
    \ / 10)\n        end\n        table.insert(points, {i = i, sum = sum})\n    end\n\
    \    table.sort(points, function(p1, p2)\n        if p1.sum ~= p2.sum then\n \
    \           return p1.sum < p2.sum\n        else\n            return p1.i < p2.i\n\
    \        end\n    end)\n    local result = {}\n    for _, p in ipairs(points)\
    \ do\n        table.insert(result, nums[p.i])\n    end\n    return result\nend",
  "    -- YOUR CODE HERE\n    if #nums == 0 then\n        return nums\n    end\n \
    \   local new_nums = {}\n    for i,v in ipairs(nums) do\n        new_nums[i] =\
    \ {i, v}\n    end\n    local function cmp(a, b)\n        local sum_a = 0\n   \
    \     local sum_b = 0\n        for digit in string.gmatch(tostring(a[2]), \".\"\
    ) do\n            sum_a = sum_a + tonumber(digit)\n        end\n        for digit\
    \ in string.gmatch(tostring(b[2]), \".\") do\n            sum_b = sum_b + tonumber(digit)\n\
    \        end\n        if sum_a == sum_b then\n            return a[1] < b[1]\n\
    \        else\n            return sum_a < sum_b\n        end\n    end\n    table.sort(new_nums,\
    \ cmp)\n    local ordered_nums = {}\n    for i,v in ipairs(new_nums) do\n    \
    \    ordered_nums[i] = v[2]\n    end\n    return ordered_nums\nend", "    local\
    \ function _sum(n)\n        local s = 0\n        while n ~= 0 do\n           \
    \ s = s + n % 10\n            n = math.floor(n / 10)\n        end\n        return\
    \ s\n    end\n    local function _compare(a, b)\n        local s = _sum(a) - _sum(b)\n\
    \        if s == 0 then\n            return a < b\n        else\n            return\
    \ s < 0\n        end\n    end\n    table.sort(nums, _compare)\n    return nums\n\
    end", "    local function point_sum(n)\n        local sum = 0\n        while n\
    \ > 0 do\n            sum = sum + (n % 10)\n            n = math.floor(n / 10)\n\
    \        end\n        return sum\n    end", "  local function sort_by_sum(num1,\
    \ num2)\n    return (get_sum_of_digits(num1) < get_sum_of_digits(num2))\n  end\n\
    \  table.sort(nums, sort_by_sum)\n  return nums\nend", "    local function sum_digits(n)\n\
    \        if n == 0 then\n            return 0\n        else\n            return\
    \ (n % 10) + sum_digits(math.floor(n / 10))\n        end\n    end", "\tlocal function\
    \ compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #tostring(a)\
    \ do\n\t\t\tsum_a = sum_a + tonumber(tostring(a):sub(i, i))\n\t\tend\n\t\tfor\
    \ i = 1, #tostring(b) do\n\t\t\tsum_b = sum_b + tonumber(tostring(b):sub(i, i))\n\
    \t\tend\n\t\tif sum_a ~= sum_b then\n\t\t\treturn sum_a < sum_b\n\t\telse\n\t\t\
    \treturn a < b\n\t\tend\n\tend\n\ttable.sort(nums, compare)\n\treturn nums\nend",
  "\tif (#nums == 0) then\n\t\treturn {}\n\tend\n\tlocal sort_nums = {}\n\tlocal index\
    \ = 1\n\tfor _,v in ipairs(nums) do\n\t\tlocal str = tostring(v)\n\t\tlocal sum\
    \ = 0\n\t\tfor i=1,#str do\n\t\t\tsum = sum + tonumber(str:sub(i,i))\n\t\tend\n\
    \t\tsort_nums[index] = {sum, v}\n\t\tindex = index + 1\n\tend\n\ttable.sort(sort_nums,\
    \ function(a,b)\n\t\tif (a[1] == b[1]) then\n\t\t\treturn a[2] < b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\tlocal ret = {}\n\tfor i=1,#sort_nums\
    \ do\n\t\tret[i] = sort_nums[i][2]\n\tend\n\treturn ret\nend", "  return {}\n\
    end", "    local t = {}\n    for i, v in ipairs(nums) do\n        table.insert(t,\
    \ {v, sum_of_digits(v), i})\n    end\n    table.sort(t, function(a, b)\n     \
    \   return a[2] < b[2] or (a[2] == b[2] and a[3] < b[3])\n    end)\n    for i,\
    \ v in ipairs(t) do\n        t[i] = v[1]\n    end\n    return t\nend", "    --\
    \ YOUR CODE HERE\n    nums = check_nums(nums)\n    local sum = {}\n    for k,\
    \ v in pairs(nums) do\n        sum[k] = digit_sum(nums[k])\n    end\n    local\
    \ function cmp(a, b)\n        if sum[a] < sum[b] then\n            return true\n\
    \        elseif sum[a] == sum[b] then\n            return a < b\n        else\n\
    \            return false\n        end\n    end\n    table.sort(nums, cmp)\n \
    \   return nums\nend", "\tlocal function sum_digits(num)\n\t\tlocal sum = 0\n\t\
    \twhile num ~= 0 do\n\t\t\tsum = sum + (num % 10)\n\t\t\tnum = math.floor(num\
    \ / 10)\n\t\tend\n\t\treturn sum\n\tend", "    -- your code here\nend", "    return\n\
    end", "    -- your code here\nend", "    -- your code here\nend", "    local function\
    \ sum_digits(n)\n        local total = 0\n        while n > 0 do\n           \
    \ total = total + n % 10\n            n = math.floor(n / 10)\n        end\n  \
    \      return total\n    end", "\tlocal res = {}\n\tlocal sums = {}\n\tfor i,\
    \ n in ipairs(nums) do\n\t\tlocal sum = 0\n\t\tfor d in tostring(n):gmatch(\"\
    %d\") do\n\t\t\tsum = sum + tonumber(d)\n\t\tend\n\t\ttable.insert(sums, {i =\
    \ i, sum = sum})\n\tend\n\ttable.sort(sums, function(a, b)\n\t\tif a.sum == b.sum\
    \ then\n\t\t\treturn a.i < b.i\n\t\telse\n\t\t\treturn a.sum < b.sum\n\t\tend\n\
    \tend)\n\tfor _, s in ipairs(sums) do\n\t\ttable.insert(res, nums[s.i])\n\tend\n\
    \treturn res\nend", "  local sum = {}\n  for i,v in ipairs(nums) do\n    local\
    \ s = 0\n    for j = 1, #tostring(v) do\n      s = s + tonumber(tostring(v):sub(j,j))\n\
    \    end\n    sum[i] = s\n  end\n  local t = {}\n  for i = 1, #nums do\n    local\
    \ min = math.min(unpack(sum))\n    local j = nil\n    for k,v in ipairs(sum) do\n\
    \      if v == min then\n        j = k\n        break\n      end\n    end\n  \
    \  t[i] = nums[j]\n    sum[j] = math.max(unpack(sum)) + 1\n  end\n  return t\n\
    end", "    local sums = {}\n    for i, v in ipairs(nums) do\n        sums[i] =\
    \ sum_of_digits(v)\n    end\n    local function key(i)\n        return sums[i]\n\
    \    end\n    local function swap(a, b)\n        nums[a], nums[b] = nums[b], nums[a]\n\
    \        sums[a], sums[b] = sums[b], sums[a]\n    end\n    local function bubble_down(i)\n\
    \        local left = 2 * i\n        local right = left + 1\n        local end_at\
    \ = #nums\n        while left <= end_at do\n            local smaller = left\n\
    \            if right <= end_at and key(right) < key(left) then\n            \
    \    smaller = right\n            end\n            if key(i) <= key(smaller) then\n\
    \                break\n            end\n            swap(i, smaller)\n      \
    \      i = smaller\n            left = 2 * i\n            right = left + 1\n \
    \       end\n    end\n    for i = math.floor(#nums / 2), 1, -1 do\n        bubble_down(i)\n\
    \    end\n    for i = #nums, 2, -1 do\n        swap(1, i)\n        bubble_down(1)\n\
    \    end\n    return nums\nend", "\tlocal sums = {}\n\tlocal indices = {}\n\t\
    for index, number in ipairs(nums) do\n\t\tlocal sum = 0\n\t\twhile number > 0\
    \ do\n\t\t\tsum = sum + number % 10\n\t\t\tnumber = math.floor(number / 10)\n\t\
    \tend\n\t\tindices[index] = index\n\t\tsums[index] = sum\n\tend\n\ttable.sort(indices,\
    \ function(x, y)\n\t\tif sums[x] < sums[y] then\n\t\t\treturn true\n\t\telseif\
    \ sums[x] > sums[y] then\n\t\t\treturn false\n\t\telse\n\t\t\treturn x < y\n\t\
    \tend\n\tend)\n\tlocal result = {}\n\tfor _, index in ipairs(indices) do\n\t\t\
    table.insert(result, nums[index])\n\tend\n\treturn result\nend", "  local to_points\
    \ = {}\n  for _, v in ipairs(nums) do\n    local k = 0\n    local n = v\n    while\
    \ n ~= 0 do\n      k = k + n % 10\n      n = math.floor(n / 10)\n    end\n   \
    \ to_points[v] = k\n  end\n  table.sort(nums, function(l, r)\n    if to_points[l]\
    \ == to_points[r] then\n      return l < r\n    else\n      return to_points[l]\
    \ < to_points[r]\n    end\n  end)\n  return nums\nend", "  -- your code here:\n\
    \  local copy = {}\n  local j = 1\n  local n = 0\n  local points = {}\n  local\
    \ function sum_of_digits(num)\n    local sum = 0\n    while num > 0 do\n     \
    \ local digit = num % 10\n      sum = sum + digit\n      num = math.floor(num\
    \ / 10)\n    end\n    return sum\n  end\n  for i, v in ipairs(nums) do\n    local\
    \ sum = sum_of_digits(v)\n    if points[sum] == nil then\n      points[sum] =\
    \ {v}\n    else\n      points[sum][#points[sum] + 1] = v\n    end\n  end\n  for\
    \ i, v in pairs(points) do\n    for a, b in ipairs(v) do\n      copy[j] = b\n\
    \      j = j + 1\n    end\n  end\n  return copy\nend", "  -- TODO: implement\n\
    end", "  table.sort(nums, function(x, y) return sum_of_digits(x) < sum_of_digits(y)\
    \ end)\n  return nums\nend", "    if #nums == 0 then\n        return nums\n  \
    \  end\n    local sums = {}\n    for i, v in ipairs(nums) do\n        sums[i]\
    \ = {i = i, sum = sum_of_digits(v)}\n    end\n    table.sort(sums, function(a,\
    \ b)\n        if a.sum == b.sum then\n            return a.i < b.i\n        else\n\
    \            return a.sum < b.sum\n        end\n    end)\n    local result = {}\n\
    \    for i, v in ipairs(sums) do\n        result[i] = nums[v.i]\n    end\n   \
    \ return result\nend", "    local sums = {}\n    for k,v in pairs(nums) do\n \
    \       sums[k] = v\n    end\n    for k,v in pairs(sums) do\n        sums[k] =\
    \ sum_of_digits(v)\n    end\n    local function order(a,b)\n        return sums[a]\
    \ < sums[b]\n    end\n    return sort_index(nums, order)\nend", "  return {}\n\
    end", "    -- Getting the sum of digits of each number\n    local temp = {}\n\
    \    for i, v in ipairs(nums) do\n        local digits = tostring(v):gmatch('%d')\n\
    \        local sum = 0\n        for digit in digits do\n            sum = sum\
    \ + tonumber(digit)\n        end\n        temp[i] = {v, sum}\n    end", "    --\
    \ TO BE IMPLEMENTED\n    return nil\nend", "    local function sum_of_digits(a)\n\
    \        local sum = 0\n        while a > 0 do\n            sum = sum + a % 10\n\
    \            a = math.floor(a / 10)\n        end\n        return sum\n    end\n\
    \    local function find_max(idx, nums)\n        local max_idx = idx\n       \
    \ local max_sum = sum_of_digits(nums[idx])\n        for i = idx, #nums do\n  \
    \          local sum = sum_of_digits(nums[i])\n            if sum >= max_sum then\n\
    \                max_idx = i\n                max_sum = sum\n            end\n\
    \        end\n        return max_idx\n    end\n    local res = {}\n    for i =\
    \ 1, #nums do\n        local idx = find_max(i, nums)\n        res[i] = nums[idx]\n\
    \        nums[idx] = nums[i]\n    end\n    return res\nend", "  local function\
    \ sum_digits(n)\n    local sum = 0\n    while n > 0 do\n      sum = sum + n %\
    \ 10\n      n = math.floor(n / 10)\n    end\n    return sum\n  end\n  local points\
    \ = {}\n  for i, num in ipairs(nums) do\n    local p = sum_digits(num)\n    points[i]\
    \ = {index = i, num = num, p = p}\n  end\n  table.sort(points, function(a, b)\n\
    \    if a.p < b.p then\n      return true\n    elseif a.p > b.p then\n      return\
    \ false\n    else\n      return a.index < b.index\n    end\n  end)\n  local ret\
    \ = {}\n  for i, p in ipairs(points) do\n    ret[i] = p.num\n  end\n  return ret\n\
    end", "    return List.sortBy(List.sum, nums)\nend", "\tlocal function sum_digits(n)\n\
    \t\tlocal s = 0\n\t\twhile n > 0 do\n\t\t\ts = s + n % 10\n\t\t\tn = math.floor(n\
    \ / 10)\n\t\tend\n\t\treturn s\n\tend\n\ttable.sort(nums, function(a, b)\n\t\t\
    local sum_a = sum_digits(a)\n\t\tlocal sum_b = sum_digits(b)\n\t\tif sum_a ==\
    \ sum_b then\n\t\t\treturn a < b\n\t\telse\n\t\t\treturn sum_a < sum_b\n\t\tend\n\
    \tend)\n\treturn nums\nend", "    table.sort(nums, function(x, y)\n        local\
    \ sum_x = 0\n        local sum_y = 0\n        for d in tostring(x):gmatch('%d')\
    \ do\n            sum_x = sum_x + tonumber(d)\n        end\n        for d in tostring(y):gmatch('%d')\
    \ do\n            sum_y = sum_y + tonumber(d)\n        end\n        return sum_x\
    \ < sum_y\n    end)\n    return nums\nend", "    if not nums or #nums == 0 then\n\
    \        return nums\n    end\n    local t = {}\n    for k, v in ipairs(nums)\
    \ do\n        local sum = 0\n        local n = v\n        while n ~= 0 do\n  \
    \          sum = sum + n % 10\n            n = math.floor(n / 10)\n        end\n\
    \        t[#t + 1] = { k, sum }\n    end\n    table.sort(t, function(a, b)\n \
    \       if a[2] == b[2] then\n            return a[1] < b[1]\n        else\n \
    \           return a[2] < b[2]\n        end\n    end)\n    local result = {}\n\
    \    for _, v in ipairs(t) do\n        result[#result + 1] = nums[v[1]]\n    end\n\
    \    return result\nend", "    -- YOUR CODE HERE\n    local sorted = {}\n    for\
    \ i, v in ipairs(nums) do\n        local key = 0\n        for c in tostring(v):gmatch\"\
    .\" do\n            key = key + tonumber(c)\n        end\n        table.insert(sorted,\
    \ {index = i, value = v, key = key})\n    end\n    table.sort(sorted, function(a,\
    \ b)\n        if a.key < b.key then\n            return true\n        elseif a.key\
    \ > b.key then\n            return false\n        else\n            return a.index\
    \ < b.index\n        end\n    end)\n    local result = {}\n    for _, v in ipairs(sorted)\
    \ do\n        table.insert(result, v.value)\n    end\n    return result\nend",
  "    if #nums == 0 then\n        return nums\n    end\n    local function get_sum(num)\n\
    \        local sum = 0\n        while num > 0 do\n            sum = sum + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n        return sum\n\
    \    end\n    local num_sums = {}\n    for i,num in ipairs(nums) do\n        num_sums[#num_sums\
    \ + 1] = {sum = get_sum(num), i = i}\n    end\n    table.sort(num_sums, function(a,\
    \ b)\n        if a.sum == b.sum then\n            return a.i < b.i\n        else\n\
    \            return a.sum < b.sum\n        end\n    end)\n    local res = {}\n\
    \    for i,num_sum in ipairs(num_sums) do\n        res[i] = nums[num_sum.i]\n\
    \    end\n    return res\nend", "    -- your code here\nend", end, "\ttable.sort(nums,\
    \ function(a, b)\n\t\tlocal a_sum = a % 10 + (a // 10) % 10 + a // 100\n\t\tlocal\
    \ b_sum = b % 10 + (b // 10) % 10 + b // 100\n\t\tif a_sum == b_sum then\n\t\t\
    \treturn a < b\n\t\telse\n\t\t\treturn a_sum < b_sum\n\t\tend\n\tend)\n\treturn\
    \ nums\nend", "  return {}\nend", "    local sum = function(x)\n        local\
    \ s = 0\n        for i = 1, string.len(x) do\n            s = s + string.sub(x,\
    \ i, i)\n        end\n        return s\n    end\n    local arr = {}\n    for i\
    \ = 1, #nums do\n        arr[i] = {sum(nums[i]), nums[i]}\n    end\n    table.sort(arr,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] < b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    for\
    \ i = 1, #arr do\n        arr[i] = arr[i][2]\n    end\n    return arr\nend", " \
    \ return sorted_by(function(a, b) return a[1] < b[1] end,\n                  \
    \ map(function(i, v) return {summation(digits(v)), i, v} end, nums))\nend", " \
    \   return sort(nums, function(a, b)\n        local a_score = sum_digits(a)\n\
    \        local b_score = sum_digits(b)\n        if a_score < b_score then\n  \
    \          return true\n        elseif a_score > b_score then\n            return\
    \ false\n        else\n            return a < b\n        end\n    end)\nend",
  "    if not nums or #nums == 0 then\n        return {}\n    end", "    local function\
    \ s(x)\n        if x < 0 then\n            x = -x\n        end\n        local\
    \ sum = 0\n        while x > 0 do\n            sum = sum + x % 10\n          \
    \  x = math.floor(x / 10)\n        end\n        return sum\n    end\n    local\
    \ res = {}\n    for i, v in ipairs(nums) do\n        res[i] = {sum = s(v), i =\
    \ i, v = v}\n    end\n    table.sort(res, function(a, b)\n        if a.sum ==\
    \ b.sum then\n            return a.i < b.i\n        else\n            return a.sum\
    \ < b.sum\n        end\n    end)\n    for i, v in ipairs(res) do\n        res[i]\
    \ = v.v\n    end\n    return res\nend", "    local sum_digits = function(num)\n\
    \        local sum = 0\n        while num > 0 do\n            sum = sum + (num\
    \ % 10)\n            num = math.floor(num / 10)\n        end\n        return sum\n\
    \    end", "    local nums_copy = table.copy(nums)\n    table.sort(nums_copy,\
    \ function(x, y)\n        return tostring(x):sum_of_chars() < tostring(y):sum_of_chars()\n\
    \    end)\n    return nums_copy\nend", "  if #nums == 0 then\n    return nums\n\
    \  end\n  local points = {}\n  for i, num in ipairs(nums) do\n    points[i] =\
    \ {num, sum_of_digits(num)}\n  end\n  table.sort(points, function(p1, p2)\n  \
    \  if p1[2] == p2[2] then\n      return p1[1] < p2[1]\n    else\n      return\
    \ p1[2] < p2[2]\n    end\n  end)\n  local res = {}\n  for i, p in ipairs(points)\
    \ do\n    res[i] = p[1]\n  end\n  return res\nend", "    local aux = {}\n    local\
    \ sort_by_points = function(a, b)\n        return aux[a] < aux[b]\n    end\n \
    \   for i, n in ipairs(nums) do\n        if not aux[n] then\n            aux[n]\
    \ = 0\n            local n_abs = math.abs(n)\n            while n_abs > 0 do\n\
    \                aux[n] = aux[n] + (n_abs % 10)\n                n_abs = math.floor(n_abs\
    \ / 10)\n            end\n        end\n    end\n    table.sort(nums, sort_by_points)\n\
    \    return nums\nend", "    return {}\nend", "\ttable.sort(nums, function(a,\
    \ b)\n\t\tif sumOfDigits(a) < sumOfDigits(b) then\n\t\t\treturn true\n\t\telseif\
    \ sumOfDigits(a) > sumOfDigits(b) then\n\t\t\treturn false\n\t\telse\n\t\t\treturn\
    \ indexOf(nums, a) < indexOf(nums, b)\n\t\tend\n\tend)\n\treturn nums\nend", end,
  "    table.sort(nums, function(a, b)\n        local a_sum = sum_of_digits(a)\n \
    \       local b_sum = sum_of_digits(b)\n        if a_sum == b_sum then\n     \
    \       return a < b\n        else\n            return a_sum < b_sum\n       \
    \ end\n    end)\n    return nums\nend", "    local function aux(t)\n        table.sort(t,\
    \ function(e1, e2)\n            local s1 = e1[1]\n            local s2 = e2[1]\n\
    \            if s1 ~= s2 then\n                return s1 < s2\n            else\n\
    \                return e1[2] < e2[2]\n            end\n        end)\n       \
    \ local result = {}\n        for _,e in ipairs(t) do\n            table.insert(result,\
    \ e[2])\n        end\n        return result\n    end\n    local t = {}\n    for\
    \ i,n in ipairs(nums) do\n        local sum = 0\n        for c in tostring(n):gmatch(\"\
    .\") do\n            sum = sum + tonumber(c)\n        end\n        table.insert(t,\
    \ {sum, n})\n    end\n    return aux(t)\nend", "    -- TODO\nend", "    return\
    \ nil\nend", "    -- Your code here\nend", "    local function get_sum(n)\n  \
    \      local res = 0\n        for digit in tostring(n):gmatch(\"%d\") do\n   \
    \         res = res + tonumber(digit)\n        end\n        return res\n    end",
  "    if not nums then return nil end\n    if #nums == 0 then return {} end\n   \
    \ local digits = {}\n    for i,v in ipairs(nums) do\n        local sum = 0\n \
    \       if v < 0 then\n            local t = v\n            repeat\n         \
    \       sum = sum + math.abs(math.fmod(t, 10))\n                t = math.floor(t\
    \ / 10)\n            until t == 0\n        else\n            repeat\n        \
    \        sum = sum + math.fmod(v, 10)\n                v = math.floor(v / 10)\n\
    \            until v == 0\n        end\n        digits[i] = sum\n    end\n   \
    \ table.sort(digits)\n    local out = {}\n    for i,v in ipairs(digits) do\n \
    \       for j, w in ipairs(nums) do\n            local sum = 0\n            if\
    \ w < 0 then\n                local t = w\n                repeat\n          \
    \          sum = sum + math.abs(math.fmod(t, 10))\n                    t = math.floor(t\
    \ / 10)\n                until t == 0\n            else\n                repeat\n\
    \                    sum = sum + math.fmod(w, 10)\n                    w = math.floor(w\
    \ / 10)\n                until w == 0\n            end\n            if sum ==\
    \ v then\n                table.insert(out, w)\n                table.remove(nums,\
    \ j)\n                break\n            end\n        end\n    end\n    return\
    \ out\nend", "    -- your code here\nend", end, "    local function sumOfDigits(num)\n\
    \        local sum = 0\n        while num > 0 do\n            sum = sum + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n        return sum\n\
    \    end", "    -- <YOUR IMPLEMENTATION>\n    local points_list = {}\n    for\
    \ i, num in ipairs(nums) do\n        local points = 0\n        for _, digit in\
    \ ipairs(string.split(tostring(num), \"\")) do\n            points = points +\
    \ tonumber(digit)\n        end\n        points_list[i] = {\n            num =\
    \ num,\n            points = points\n        }\n    end\n    table.sort(points_list,\
    \ function(a, b)\n        if a.points == b.points then\n            return a.num\
    \ < b.num\n        else\n            return a.points < b.points\n        end\n\
    \    end)\n    local result = {}\n    for _, data in ipairs(points_list) do\n\
    \        table.insert(result, data.num)\n    end\n    return result\nend", end,
  "  if type(nums) ~= 'table' then\n    return nil\n  end\n  for _, num in ipairs(nums)\
    \ do\n    if type(num) ~= 'number' then\n      return nil\n    end\n  end\n  local\
    \ list = {}\n  for index, num in ipairs(nums) do\n    local sum = 0\n    local\
    \ temp = num\n    while temp ~= 0 do\n      sum = sum + temp % 10\n      temp\
    \ = math.floor(temp / 10)\n    end\n    table.insert(list, {index, sum, num})\n\
    \  end\n  table.sort(list, function(a, b)\n    if a[2] == b[2] then\n      return\
    \ a[1] < b[1]\n    else\n      return a[2] < b[2]\n    end\n  end)\n  local result\
    \ = {}\n  for _, item in ipairs(list) do\n    table.insert(result, item[3])\n\
    \  end\n  return result\nend", "\tlocal t, l = {}, {}\n\tfor i,v in ipairs(nums)\
    \ do\n\t\tlocal s = tostring(v)\n\t\tlocal sum = 0\n\t\tfor c in s:gmatch\".\"\
    \ do\n\t\t\tsum = sum + tonumber(c)\n\t\tend\n\t\tt[v] = {sum, i}\n\t\tl[#l+1]\
    \ = v\n\tend\n\ttable.sort(l, function(a, b)\n\t\tlocal ta, tb = t[a], t[b]\n\t\
    \tif ta[1] == tb[1] then\n\t\t\treturn ta[2] < tb[2]\n\t\telse\n\t\t\treturn ta[1]\
    \ < tb[1]\n\t\tend\n\tend)\n\treturn l\nend", "    local sums = {}\n    for i,\
    \ num in ipairs(nums) do\n        sums[num] = sums[num] or {}\n        sums[num][1]\
    \ = num\n        sums[num][2] = num < 0 and num * -1 or num\n        sums[num][3]\
    \ = 0\n        while sums[num][2] > 0 do\n            sums[num][3] = sums[num][3]\
    \ + sums[num][2] % 10\n            sums[num][2] = sums[num][2] / 10\n        end\n\
    \        sums[num][2] = sums[num][3]\n        sums[num][3] = i\n    end\n    table.sort(sums,\
    \ function(a, b)\n        if a[2] == b[2] then\n            return a[3] < b[3]\n\
    \        else\n            return a[2] < b[2]\n        end\n    end)\n    local\
    \ res = {}\n    for i, num in ipairs(sums) do\n        res[i] = num[1]\n    end\n\
    \    return res\nend", "    return {}\nend", "    return sort(nums, function(x,\
    \ y) return sum_of_digits(x) < sum_of_digits(y) end)\nend", "  local function\
    \ sum(n)\n    local tot = 0\n    while n > 0 do\n      tot = tot + n % 10\n  \
    \    n = math.floor(n / 10)\n    end\n    return tot\n  end\n  local res = {}\n\
    \  for i, v in ipairs(nums) do\n    res[i] = {n = v, s = sum(v)}\n  end\n  table.sort(res,\
    \ function(a, b)\n    return a.s < b.s or (a.s == b.s and a.n < b.n)\n  end)\n\
    \  for i, v in ipairs(res) do\n    res[i] = v.n\n  end\n  return res\nend", " \
    \   return nums\nend", "    local function sort_by_points(a, b)\n        local\
    \ a_score = math.abs(a)\n        local b_score = math.abs(b)\n        local sum_a\
    \ = 0\n        local sum_b = 0\n        while a_score ~= 0 do\n            sum_a\
    \ = sum_a + a_score % 10\n            a_score = math.floor(a_score / 10)\n   \
    \     end\n        while b_score ~= 0 do\n            sum_b = sum_b + b_score\
    \ % 10\n            b_score = math.floor(b_score / 10)\n        end\n        if\
    \ sum_a < sum_b then\n            return true\n        elseif sum_a > sum_b then\n\
    \            return false\n        else\n            return table.indexof(nums,\
    \ a) < table.indexof(nums, b)\n        end\n    end\n    table.sort(nums, sort_by_points)\n\
    \    return nums\nend", "    local sums = {}\n    for i, n in ipairs(nums) do\n\
    \        sums[i] = {\n            index = i,\n            sum = sum_of_digits(n)\n\
    \        }\n    end\n    table.sort(sums, function(a, b)\n        if a.sum < b.sum\
    \ then\n            return true\n        elseif a.sum > b.sum then\n         \
    \   return false\n        else\n            return a.index < b.index\n       \
    \ end\n    end)\n    local ordered = {}\n    for _, pair in ipairs(sums) do\n\
    \        table.insert(ordered, nums[pair.index])\n    end\n    return ordered\n\
    end", "    if not nums or #nums == 0 then\n        return nums\n    end", "  local\
    \ sums = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    for _, c\
    \ in ipairs(tostring(num):chars()) do\n      sum = sum + tonumber(c)\n    end\n\
    \    sums[i] = sum\n  end\n  return nums:sort_by(function(a, b)\n    return sums[a]\
    \ < sums[b]\n  end)\nend", end, "    -- iterate each number\n    -- calculate\
    \ the sum of their digits\n    -- save them as (number, sum of digits) pairs in\
    \ a table\n    -- sort the table by sum of digits\n    -- return a new list of\
    \ the sorted numbers\n    local points = {}\n    for i, num in ipairs(nums) do\n\
    \        local sum = 0\n        for digit in tostring(num):gmatch(\"%d\") do\n\
    \            sum = sum + tonumber(digit)\n        end\n        table.insert(points,\
    \ {num, sum})\n    end\n    table.sort(points, function(p1, p2)\n        if p1[2]\
    \ == p2[2] then\n            return p1[1] < p2[1]\n        else\n            return\
    \ p1[2] < p2[2]\n        end\n    end)\n    local result = {}\n    for _, pair\
    \ in ipairs(points) do\n        table.insert(result, pair[1])\n    end\n    return\
    \ result\nend", "    local counter = 1\n    while counter < #nums do\n       \
    \ if sum(math.abs(nums[counter])) < sum(math.abs(nums[counter + 1])) then\n  \
    \          nums[counter], nums[counter + 1] = nums[counter + 1], nums[counter]\n\
    \            counter = 1\n        elseif sum(math.abs(nums[counter])) == sum(math.abs(nums[counter\
    \ + 1])) then\n            if nums[counter] > nums[counter + 1] then\n       \
    \         nums[counter], nums[counter + 1] = nums[counter + 1], nums[counter]\n\
    \                counter = 1\n            else\n                counter = counter\
    \ + 1\n            end\n        else\n            counter = counter + 1\n    \
    \    end\n    end\n    return nums\nend", "    local function sum_digits(num)\n\
    \        local sum = 0\n        local num = math.abs(num)\n        while num >\
    \ 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n\
    \        end\n        return sum\n    end", end, "    local sums = {}\n    for\
    \ i, num in ipairs(nums) do\n        sums[i] = sum_of_digits(num)\n    end\n \
    \   for i = 1, #nums - 1 do\n        for j = i + 1, #nums do\n            if sums[i]\
    \ == sums[j] then\n                if nums[i] > nums[j] then\n               \
    \     sums[i], sums[j] = sums[j], sums[i]\n                    nums[i], nums[j]\
    \ = nums[j], nums[i]\n                end\n            elseif sums[i] > sums[j]\
    \ then\n                sums[i], sums[j] = sums[j], sums[i]\n                nums[i],\
    \ nums[j] = nums[j], nums[i]\n            end\n        end\n    end\n    return\
    \ nums\nend", "    -- your code here\nend", "    table.sort(nums, function(a,\
    \ b)\n        local a_digits = string.gmatch(math.abs(a), \"(%d)\")\n        local\
    \ b_digits = string.gmatch(math.abs(b), \"(%d)\")\n        local a_sum = 0\n \
    \       local b_sum = 0\n        for d in a_digits do\n            a_sum = a_sum\
    \ + d\n        end\n        for d in b_digits do\n            b_sum = b_sum +\
    \ d\n        end\n        if a_sum ~= b_sum then\n            return a_sum < b_sum\n\
    \        else\n            return a < b\n        end\n    end)\n    return nums\n\
    end", "    return order_by_points(nums)\nend", "    return\nend", "    local function\
    \ sum(n)\n        n = math.abs(n)\n        local total = 0\n        while n >\
    \ 0 do\n            total = total + n % 10\n            n = math.floor(n / 10)\n\
    \        end\n        return total\n    end", "    if #nums == 0 then\n      \
    \  return nums\n    end\n    local a = {}\n    for i = 1, #nums do\n        local\
    \ c = 0\n        for j = 1, #tostring(nums[i]) do\n            c = c + tonumber(tostring(nums[i]):sub(j,\
    \ j))\n        end\n        a[i] = {num = nums[i], digit_sum = c}\n    end\n \
    \   table.sort(a, function(a, b) return a.digit_sum < b.digit_sum end)\n    local\
    \ res = {}\n    for i = 1, #a do\n        res[i] = a[i].num\n    end\n    return\
    \ res\nend", "  local dict = {}\n  for index, value in ipairs(nums) do\n    local\
    \ sum = 0\n    for i = 1, #tostring(value) do\n      sum = sum + tonumber(tostring(value):sub(i,\
    \ i))\n    end\n    if dict[sum] == nil then\n      dict[sum] = {}\n    end\n\
    \    table.insert(dict[sum], index)\n  end\n  local temp = {}\n  for key, value\
    \ in pairs(dict) do\n    table.insert(temp, {key, value})\n  end\n  table.sort(temp,\
    \ function(a, b) return a[1] < b[1] end)\n  local result = {}\n  for _, value\
    \ in ipairs(temp) do\n    for _, index in ipairs(value[2]) do\n      table.insert(result,\
    \ nums[index])\n    end\n  end\n  return result\nend", "    local function get_points(n)\n\
    \        local s = 0\n        while n > 0 do\n            s = s + n % 10\n   \
    \         n = math.floor(n / 10)\n        end\n        return s\n    end\n   \
    \ local function cmp(a, b)\n        local ap = get_points(a)\n        local bp\
    \ = get_points(b)\n        if ap == bp then\n            return a < b\n      \
    \  else\n            return ap < bp\n        end\n    end\n    table.sort(nums,\
    \ cmp)\n    return nums\nend", end, "    local points = {}\n    for i, num in\
    \ ipairs(nums) do\n        local point = 0\n        while num ~= 0 do\n      \
    \      point = point + num % 10\n            num = math.floor(num / 10)\n    \
    \    end\n        table.insert(points, {index = i, point = point})\n    end\n\
    \    table.sort(points, function(a, b)\n        if a.point ~= b.point then\n \
    \           return a.point < b.point\n        else\n            return a.index\
    \ < b.index\n        end\n    end)\n    local result = {}\n    for _, v in ipairs(points)\
    \ do\n        table.insert(result, nums[v.index])\n    end\n    return result\n\
    end", "    return {}\nend", "    local fun = function(a, b)\n        if a % 10\
    \ == b % 10 then\n            return a < b\n        else\n            return a\
    \ % 10 < b % 10\n        end\n    end\n    local temp = {}\n    for i = 1, #nums\
    \ do\n        table.insert(temp, nums[i])\n    end\n    table.sort(temp, fun)\n\
    \    return temp\nend", "    local function sum_of_digits(num)\n        local\
    \ res = 0\n        while num > 0 do\n            res = res + num % 10\n      \
    \      num = math.floor(num / 10)\n        end\n        return res\n    end",
  "    function get_key(n)\n        local s = tostring(n)\n        local key = 0\n\
    \        for i = 1, string.len(s) do\n            key = key + string.byte(s, i)\
    \ - string.byte('0')\n        end\n        return key\n    end\n    local arr\
    \ = {}\n    for i, n in ipairs(nums) do\n        local key = get_key(n)\n    \
    \    if arr[key] == nil then\n            arr[key] = {}\n        end\n       \
    \ table.insert(arr[key], i)\n    end\n    local keys = {}\n    for k, _ in pairs(arr)\
    \ do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local\
    \ res = {}\n    for _, k in ipairs(keys) do\n        for _, i in ipairs(arr[k])\
    \ do\n            table.insert(res, nums[i])\n        end\n    end\n    return\
    \ res\nend", "    local t = {}\n    for k,v in pairs(nums) do\n        local s\
    \ = 0\n        for d in tostring(v):gmatch(\"%d\") do\n            s = s + tonumber(d)\n\
    \        end\n        table.insert(t, {index = k, sum = s, value = v})\n    end\n\
    \    table.sort(t, function(a, b)\n        if a.sum == b.sum then\n          \
    \  return a.index < b.index\n        else\n            return a.sum < b.sum\n\
    \        end\n    end)\n    local res = {}\n    for _, item in ipairs(t) do\n\
    \        table.insert(res, item.value)\n    end\n    return res\nend", "    --\
    \ your code here\nend", "    local function aux(a, b)\n        local a_digit_sum\
    \ = 0\n        local b_digit_sum = 0\n        while a > 0 do\n            a_digit_sum\
    \ = a_digit_sum + a % 10\n            a = a // 10\n        end\n        while\
    \ b > 0 do\n            b_digit_sum = b_digit_sum + b % 10\n            b = b\
    \ // 10\n        end\n        if a_digit_sum == b_digit_sum then\n           \
    \ return a < b\n        else\n            return a_digit_sum < b_digit_sum\n \
    \       end\n    end\n    table.sort(nums, aux)\n    return nums\nend", "    local\
    \ sums = {}\n    for i, v in ipairs(nums) do\n        sums[i] = v\n    end\n \
    \   local function sum_digits(num)\n        local sum = 0\n        for i = 1,\
    \ #num do\n            sum = sum + tonumber(num:sub(i, i))\n        end\n    \
    \    return sum\n    end\n    table.sort(sums, function(a, b)\n        local sa\
    \ = sum_digits(tostring(a))\n        local sb = sum_digits(tostring(b))\n    \
    \    if sa ~= sb then\n            return sa < sb\n        else\n            return\
    \ a < b\n        end\n    end)\n    return sums\nend", "    local nums_sum = {}\n\
    \    for i, num in ipairs(nums) do\n        local num_list = {}\n        local\
    \ num_sum = 0\n        while num ~= 0 do\n            local n = num % 10\n   \
    \         num_sum = num_sum + n\n            num = math.floor(num / 10)\n    \
    \        table.insert(num_list, n)\n        end\n        table.insert(nums_sum,\
    \ {index = i, num = num_list, sum = num_sum})\n    end\n    table.sort(nums_sum,\
    \ function(a, b)\n        if a.sum ~= b.sum then\n            return a.sum < b.sum\n\
    \        else\n            return a.index < b.index\n        end\n    end)\n \
    \   local nums_sorted = {}\n    for _, v in ipairs(nums_sum) do\n        local\
    \ num = 0\n        for _, n in ipairs(v.num) do\n            num = num * 10 +\
    \ n\n        end\n        table.insert(nums_sorted, num)\n    end\n    return\
    \ nums_sorted\nend", "    return {}\nend", "    local function sum_of_digits(n)\n\
    \        local total = 0\n        while n > 0 do\n            total = total +\
    \ n % 10\n            n = math.floor(n / 10)\n        end\n        return total\n\
    \    end", "    local sums = {}\n    for i,v in ipairs(nums) do\n        sums[v]\
    \ = sum_digits(v)\n    end\n    local result = {}\n    for k,v in ipairs(nums)\
    \ do\n        result[k] = v\n    end\n    table.sort(result, function(a,b)\n \
    \       if sums[a] ~= sums[b] then\n            return sums[a] < sums[b]\n   \
    \     else\n            return nums[a] < nums[b]\n        end\n    end)\n    return\
    \ result\nend", "\tlocal function get_sum(num)\n\t\tlocal sum = 0\n\t\tfor i =\
    \ 1, #tostring(num) do\n\t\t\tsum = sum + tonumber(tostring(num):sub(i, i))\n\t\
    \tend\n\t\treturn sum\n\tend\n\tlocal function get_index(num)\n\t\tfor i = 1,\
    \ #nums do\n\t\t\tif nums[i] == num then\n\t\t\t\treturn i\n\t\t\tend\n\t\tend\n\
    \tend\n\tlocal sorted = {}\n\tlocal function help(nums)\n\t\tif #nums == 0 then\n\
    \t\t\treturn\n\t\tend\n\t\tlocal min = math.huge\n\t\tlocal min_sum = math.huge\n\
    \t\tlocal index\n\t\tfor i = 1, #nums do\n\t\t\tlocal sum = get_sum(nums[i])\n\
    \t\t\tif sum <= min_sum then\n\t\t\t\tmin_sum = sum\n\t\t\t\tmin = nums[i]\n\t\
    \t\t\tindex = i\n\t\t\tend\n\t\tend\n\t\ttable.insert(sorted, min)\n\t\ttable.remove(nums,\
    \ index)\n\t\thelp(nums)\n\tend\n\thelp(nums)\n\treturn sorted\nend", "    local\
    \ function sum_digits(n)\n        local sum = 0\n        while n > 0 do\n    \
    \        sum = sum + (n % 10)\n            n = math.floor(n / 10)\n        end\n\
    \        return sum\n    end", end, "    local sum = {}\n    for i, v in ipairs(nums)\
    \ do\n        sum[i] = 0\n        for n in string.gmatch(tostring(v), '%d') do\n\
    \            sum[i] = sum[i] + tonumber(n)\n        end\n    end\n    local t\
    \ = {}\n    for i = 1, #nums do\n        t[i] = i\n    end\n    table.sort(t,\
    \ function(a, b)\n        if sum[a] == sum[b] then\n            return a < b\n\
    \        else\n            return sum[a] < sum[b]\n        end\n    end)\n   \
    \ local r = {}\n    for i, v in ipairs(t) do\n        r[i] = nums[v]\n    end\n\
    \    return r\nend", "  local f = function(a, b)\n    local a_sum = sum_of_digits(a)\n\
    \    local b_sum = sum_of_digits(b)\n    return a_sum < b_sum or (a_sum == b_sum\
    \ and nums:index(a) < nums:index(b))\n  end\n  return nums:sort(f)\nend", "  \
    \  local order = {}\n    for i = 1, #nums do\n        local digits = nums[i]\n\
    \        local sum = 0\n        while digits > 0 do\n            sum = sum + digits\
    \ % 10\n            digits = math.floor(digits / 10)\n        end\n        table.insert(order,\
    \ {i, sum})\n    end\n    table.sort(order, function(a, b)\n        if a[2] ==\
    \ b[2] then\n            return a[1] < b[1]\n        else\n            return\
    \ a[2] < b[2]\n        end\n    end)\n    local result = {}\n    for i = 1, #order\
    \ do\n        table.insert(result, nums[order[i][1]])\n    end\n    return result\n\
    end", "  local sum_digits = function(n)\n    return n % 10 + math.floor(n / 10)\n\
    \  end\n  table.sort(nums, function(x, y)\n    return sum_digits(x) < sum_digits(y)\n\
    \  end)\n  return nums\nend", "    local indices = {}\n    for i, num in ipairs(nums)\
    \ do\n        indices[i] = {sum_digits(num), num}\n    end\n    table.sort(indices,\
    \ function(a, b) return a[1] < b[1] end)\n    for i, v in ipairs(indices) do\n\
    \        indices[i] = v[2]\n    end\n    return indices\nend", "    -- TODO: Your\
    \ code here\nend", "    local sums = {}\n    for i, n in ipairs(nums) do\n   \
    \     local sum = 0\n        for _, d in ipairs(tostring(n)) do\n            sum\
    \ = sum + tonumber(d)\n        end\n        sums[i] = sum\n    end\n    table.sort(sums)\n\
    \    local sorted = {}\n    for _, sum in ipairs(sums) do\n        for i, n in\
    \ ipairs(nums) do\n            local s = 0\n            for _, d in ipairs(tostring(n))\
    \ do\n                s = s + tonumber(d)\n            end\n            if s ==\
    \ sum then\n                table.insert(sorted, n)\n                table.remove(nums,\
    \ i)\n                break\n            end\n        end\n    end\n    return\
    \ sorted\nend\nassert(order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12,\
    \ 11})\nassert(order_by_points({}) == {})", "    local points = {}\n    for i,\
    \ n in ipairs(nums) do\n        points[i] = n % 10 + n // 10\n    end\n    local\
    \ function comp(x, y)\n        return points[x] < points[y]\n    end\n    local\
    \ keys = {}\n    for i, _ in ipairs(nums) do\n        keys[i] = i\n    end\n \
    \   table.sort(keys, comp)\n    local res = {}\n    for i, k in ipairs(keys) do\n\
    \        res[i] = nums[k]\n    end\n    return res\nend", "    local digits_table\
    \ = {}\n    local result = {}\n    for i, num in ipairs(nums) do\n        digits_table[i]\
    \ = num\n        local pos = 1\n        local sum = 0\n        while num > 0 do\n\
    \            sum = sum + num % 10\n            num = math.floor(num / 10)\n  \
    \      end\n        digits_table[i] = {sum, pos}\n        pos = pos + 1\n    end\n\
    \    table.sort(digits_table, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] < b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    for i, v in ipairs(digits_table) do\n        result[i]\
    \ = nums[v[2]]\n    end\n    return result\nend", "    local numbers = {}\n  \
    \  for i, n in ipairs(nums) do\n        numbers[i] = {\n            num = n,\n\
    \            sum = sum_of_digits(n)\n        }\n    end\n    table.sort(numbers,\
    \ function(a, b)\n        if a.sum == b.sum then\n            return a.num < b.num\n\
    \        else\n            return a.sum < b.sum\n        end\n    end)\n    local\
    \ ret = {}\n    for i, n in ipairs(numbers) do\n        ret[i] = n.num\n    end\n\
    \    return ret\nend", "    local copy = {}\n    for i, v in ipairs(nums) do\n\
    \        copy[i] = {v, v % 10 + math.floor(v / 10) % 10 + math.floor(v / 100)}\n\
    \    end\n    table.sort(copy, function(a, b) return a[2] < b[2] end)\n    local\
    \ ans = {}\n    for i, v in ipairs(copy) do\n        ans[i] = v[1]\n    end\n\
    \    return ans\nend", "  local function get_sum(num)\n    local sum = 0\n   \
    \ while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n\
    \    end\n    return sum\n  end", "    if #nums == 0 then\n        return nums\n\
    \    end\n    return table.sort(nums, function(a, b)\n        local da = digits_sum(a)\n\
    \        local db = digits_sum(b)\n        if da ~= db then\n            return\
    \ da < db\n        end\n        return a < b\n    end)\nend", "    local order\
    \ = {}\n    for i,v in ipairs(nums) do\n        local s = 0\n        while v >\
    \ 0 do\n            s = s + v % 10\n            v = math.floor(v / 10)\n     \
    \   end\n        order[i] = {sum = s, i = i}\n    end\n    table.sort(order, function(a,\
    \ b)\n        if a.sum == b.sum then\n            return a.i < b.i\n        else\n\
    \            return a.sum < b.sum\n        end\n    end)\n    local result = {}\n\
    \    for i,v in ipairs(order) do\n        result[i] = nums[v.i]\n    end\n   \
    \ return result\nend", "    local all_sums = {}\n    for i,v in ipairs(nums) do\n\
    \        local sum = 0\n        while v > 0 do\n            sum = sum + v % 10\n\
    \            v = math.floor(v / 10)\n        end\n        all_sums[i] = sum\n\
    \    end\n    for i = 1, #nums - 1 do\n        for j = i + 1, #nums do\n     \
    \       if all_sums[i] > all_sums[j] or (all_sums[i] == all_sums[j] and i > j)\
    \ then\n                all_sums[i], all_sums[j] = all_sums[j], all_sums[i]\n\
    \                nums[i], nums[j] = nums[j], nums[i]\n            end\n      \
    \  end\n    end\n    return nums\nend", "  local temp_nums = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    local num = nums[i]\n    while num > 0 do\n\
    \      sum = sum + num % 10\n      num = num // 10\n    end\n    temp_nums[#temp_nums\
    \ + 1] = {sum, i}\n  end\n  table.sort(temp_nums, function(i, j)\n    if i[1]\
    \ ~= j[1] then\n      return i[1] < j[1]\n    else\n      return i[2] < j[2]\n\
    \    end\n  end)\n  local new_nums = {}\n  for i = 1, #temp_nums do\n    new_nums[#new_nums\
    \ + 1] = nums[temp_nums[i][2]]\n  end\n  return new_nums\nend", "  -- write the\
    \ code here\nend", end, "    local function sum_digits(x)\n        local s = 0\n\
    \        while x > 0 do\n            s = s + (x % 10)\n            x = math.floor(x\
    \ / 10)\n        end\n        return s\n    end\n    local function sum_digits_compare(x,\
    \ y)\n        local sum_x = sum_digits(x)\n        local sum_y = sum_digits(y)\n\
    \        if sum_x == sum_y then\n            return nums.index_of(x) < nums.index_of(y)\n\
    \        else\n            return sum_x < sum_y\n        end\n    end\n    return\
    \ nums.sorted(sum_digits_compare)\nend", "    local sort_func = function(a, b)\n\
    \        local points_a = 0\n        local points_b = 0\n        local a_str =\
    \ tostring(a)\n        local b_str = tostring(b)\n        for i = 1, #a_str do\n\
    \            points_a = points_a + tonumber(a_str:sub(i, i))\n        end\n  \
    \      for i = 1, #b_str do\n            points_b = points_b + tonumber(b_str:sub(i,\
    \ i))\n        end\n        if points_a == points_b then\n            return a\
    \ < b\n        end\n        return points_a < points_b\n    end\n    table.sort(nums,\
    \ sort_func)\n    return nums\nend", "  local counter = {}\n  for i, v in ipairs(nums)\
    \ do\n    local sum = 0\n    for j = 1, string.len(tostring(v)) do\n      sum\
    \ = sum + tonumber(string.sub(tostring(v), j, j))\n    end\n    if counter[sum]\
    \ == nil then\n      counter[sum] = {}\n    end\n    table.insert(counter[sum],\
    \ v)\n  end\n  return counters_to_list(counter)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
