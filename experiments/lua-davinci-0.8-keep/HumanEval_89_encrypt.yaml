name: HumanEval_89_encrypt
language: lua
prompt: "-- Create a function encrypt that takes a string as an argument and\n-- returns\
  \ a string encrypted with the alphabet being rotated. \n-- The alphabet should be\
  \ rotated in a manner such that the letters \n-- shift down by two multiplied to\
  \ two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns 'ix'\n\
  local function encrypt(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
  \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
  \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
  \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'),\
  \ 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
  \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
  \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: [end, "  local t = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    local e = c\n    if c ~= ' ' then\n      e = string.char(c:byte() + 2 * 2)\n\
    \    end\n    table.insert(t, e)\n  end\n  return table.concat(t)\nend", "  local\
    \ function shift(ch)\n    return string.char(ch:byte() + 4)\n  end\n  return string.gsub(s,\
    \ \"%a\", shift)\nend", "\tlocal letter = {}\n\tlocal result = ''\n\tfor i = 1,\
    \ string.len(s) do\n\t\t--all the letters of the alphabet are stored in the letter\
    \ table\n\t\t--for example, letter[1] = a, letter[2] = b, letter[25] = z\n\t\t\
    letter[i] = string.sub(s, i, i)\n\tend\n\tfor i = 1, #letter do\n\t\t--if letter[i]\
    \ is uppercase and the index of that letter\n\t\t--in the alphabet is greater\
    \ than 24 and less than 27, then\n\t\t--add 'A' to the rotated index of that letter\
    \ in the alphabet\n\t\t--and add that to the string result\n\t\tif string.byte(letter[i])\
    \ > 64 and string.byte(letter[i]) < 91 then\n\t\t\tif (string.byte(letter[i])\
    \ - 65 + 2*2) > 24 and \n\t\t\t\t(string.byte(letter[i]) - 65 + 2*2) < 27 then\n\
    \t\t\t\tresult = result .. string.char(string.byte(letter[i]) - 65 + 2*2 + 65)\n\
    \t\t\tend\n\t\t\t--if letter[i] is uppercase and the index of that letter\n\t\t\
    \t--in the alphabet is greater than or equal to 0 and less than 24, then\n\t\t\
    \t--add 'A' to the rotated index of that letter in the alphabet\n\t\t\t--and add\
    \ that to the string result\n\t\t\tif (string.byte(letter[i]) - 65 + 2*2) >= 0\
    \ and \n\t\t\t\t(string.byte(letter[i]) - 65 + 2*2) < 24 then\n\t\t\t\tresult\
    \ = result .. string.char(string.byte(letter[i]) - 65 + 2*2 + 65)\n\t\t\tend\n\
    \t\t\t--if letter[i] is uppercase and the index of that letter\n\t\t\t--in the\
    \ alphabet is less than 0, then\n\t\t\t--add 'A' to the rotated index of that\
    \ letter in the alphabet\n\t\t\t--and add that to the string result\n\t\t\tif\
    \ (string.byte(letter[i]) - 65", "\nend", "  -- body\nend", "    return nil\n\
    end", "\t-- your code here\n\treturn s\nend", "\tlocal encrypted = ''\n\tlocal\
    \ code_table = {}\n\tlocal letter_table = {}\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tfor i = 1, string.len(alphabet) do\n\t\ttable.insert(letter_table, string.sub(alphabet,\
    \ i, i))\n\tend\n\tfor i = 1, string.len(s) do\n\t\tfor j = 1, string.len(alphabet)\
    \ do\n\t\t\tif string.sub(s, i, i) == letter_table[j] then\n\t\t\t\tif (string.byte(string.sub(s,\
    \ i, i))+2) > 122 then\n\t\t\t\t\tencrypted = encrypted .. string.char(96+(string.byte(string.sub(s,\
    \ i, i))+2)-122)\n\t\t\t\telse\n\t\t\t\t\tencrypted = encrypted .. string.char(string.byte(string.sub(s,\
    \ i, i))+2)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn encrypted\nend",
  "  local s = string.upper(s)\n  local i, r = 1, ''\n  for i=1, #s do\n    r = r\
    \ .. string.char(string.byte(s, i) + 2 * 2)\n  end\n  return r\nend", "\tlocal\
    \ enc = ''\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\tlocal o = 1\n\t\
    for i = 1, #s do\n\t\tif s:sub(i, i) == ' ' then\n\t\t\tenc = enc .. ' '\n\t\t\
    else\n\t\t\tfor j = 1, #alphabet do\n\t\t\t\tif s:sub(i, i) == alphabet:sub(j,\
    \ j) then\n\t\t\t\t\tenc = enc .. alphabet:sub(j+2, j+2)\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn enc\nend", "\tlocal str = ''\n\tfor i = 1, #s do\n\
    \t\tlocal c = s:sub(i, i)\n\t\tlocal char = string.byte(c)\n\t\tif char >= 65\
    \ and char <= 69 then\n\t\t\tchar = char + 16\n\t\telseif char >= 70 and char\
    \ <= 90 then\n\t\t\tchar = char - 4\n\t\telseif char >= 97 and char <= 101 then\n\
    \t\t\tchar = char + 16\n\t\telseif char >= 102 and char <= 122 then\n\t\t\tchar\
    \ = char - 4\n\t\tend\n\t\tstr = str .. string.char(char)\n\tend\n\treturn str\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local s2 = s:gsub('%a',\
    \ function(c)\n        local pos = alphabet:find(c)\n        if pos == nil then\
    \ return c end\n        return alphabet:sub((pos + 2 * 2 - 1) % #alphabet + 1,\
    \ (pos + 2 * 2) % #alphabet + 1)\n    end)\n    return s2\nend", "    local rotate\
    \ = function(c)\n        local index = string.find(alphabet, c)\n        if index\
    \ == 26 then\n            return alphabet:sub(1,1)\n        elseif index == 27\
    \ then\n            return alphabet:sub(2,2)\n        else\n            return\
    \ alphabet:sub(index + 2, index + 2)\n        end\n    end\n    local encrypted\
    \ = \"\"\n    for i = 1, string.len(s) do\n        encrypted = encrypted .. rotate(s:sub(i,i))\n\
    \    end\n    return encrypted\nend", "  return str.map(s, function(c)\n    local\
    \ a = str.charCode('a')\n    local A = str.charCode('A')\n    local z = str.charCode('z')\n\
    \    local Z = str.charCode('Z')\n    local x = str.charCode(c)\n    if x >= a\
    \ and x <= z then\n      local r = x - a + 2\n      return str.charCode('a') +\
    \ ((r * 2) % 26)\n    elseif x >= A and x <= Z then\n      local r = x - A + 2\n\
    \      return str.charCode('A') + ((r * 2) % 26)\n    else\n      return x\n \
    \   end\n  end)\nend", "\nend", "  return \"\"\nend", "\tlocal ascii_a = string.byte('a')\n\
    \tlocal ascii_z = string.byte('z')\n\tlocal output = ''\n\tfor i = 1, #s do\n\t\
    \tlocal c = string.sub(s, i, i)\n\t\tlocal ascii = string.byte(c)\n\t\tif ascii\
    \ >= ascii_a and ascii <= ascii_z then\n\t\t\tascii = ascii + 2 * 2\n\t\t\tif\
    \ ascii > ascii_z then\n\t\t\t\tascii = ascii - ascii_z + ascii_a - 1\n\t\t\t\
    end\n\t\tend\n\t\toutput = output .. string.char(ascii)\n\tend\n\treturn output\n\
    end", "  -- your code here\n  local t,r = {},{}\n  local start, finish = string.byte('a'),\
    \ string.byte('z')\n  local size = finish - start + 1\n  for i = start, finish\
    \ do\n    table.insert(t, string.char(i))\n  end\n  for c in s:gmatch\".\" do\n\
    \    local i = table.indexof(t, c)\n    if i then\n      table.insert(r, t[i+2*2])\n\
    \    else\n      table.insert(r, c)\n    end\n  end\n  return table.concat(r)\n\
    end", "\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\tlocal encrypted = ''\n\
    \tlocal ch\n\tfor i = 1, #s do\n\t\tch = s:sub(i, i)\n\t\tif ch:match('[a-z]')\
    \ then\n\t\t\tencrypted = encrypted .. alphabet:sub((alphabet:find(ch) + 4) %\
    \ 26 + 1, (alphabet:find(ch) + 4) % 26 + 1)\n\t\telse\n\t\t\tencrypted = encrypted\
    \ .. ch\n\t\tend\n\tend\n\treturn encrypted\nend", "\tlocal out, c = '', ''\n\t\
    for i = 1, #s do\n\t\tc = s:sub(i, i)\n\t\tif c == ' ' then\n\t\t\tout = out ..\
    \ ' '\n\t\telse\n\t\t\tout = out .. string.char(string.byte(c) + 2 * 2)\n\t\t\
    end\n\tend\n\treturn out\nend", "\tlocal res = \"\"\n\tfor i = 1, #s do\n\t\t\
    local c = s:sub(i,i)\n\t\tif     c == 'a' then res = res .. 'c'\n\t\telseif c\
    \ == 'b' then res = res .. 'd'\n\t\telseif c == 'c' then res = res .. 'e'\n\t\t\
    elseif c == 'd' then res = res .. 'f'\n\t\telseif c == 'e' then res = res .. 'g'\n\
    \t\telseif c == 'f' then res = res .. 'h'\n\t\telseif c == 'g' then res = res\
    \ .. 'i'\n\t\telseif c == 'h' then res = res .. 'j'\n\t\telseif c == 'i' then\
    \ res = res .. 'k'\n\t\telseif c == 'j' then res = res .. 'l'\n\t\telseif c ==\
    \ 'k' then res = res .. 'm'\n\t\telseif c == 'l' then res = res .. 'n'\n\t\telseif\
    \ c == 'm' then res = res .. 'o'\n\t\telseif c == 'n' then res = res .. 'p'\n\t\
    \telseif c == 'o' then res = res .. 'q'\n\t\telseif c == 'p' then res = res ..\
    \ 'r'\n\t\telseif c == 'q' then res = res .. 's'\n\t\telseif c == 'r' then res\
    \ = res .. 't'\n\t\telseif c == 's' then res = res .. 'u'\n\t\telseif c == 't'\
    \ then res = res .. 'v'\n\t\telseif c == 'u' then res = res .. 'w'\n\t\telseif\
    \ c == 'v' then res = res .. 'x'\n\t\telseif c == 'w' then res = res .. 'y'\n\t\
    \telseif c == 'x' then res = res .. 'z'\n\t\telseif c == 'y' then res = res ..\
    \ 'a'\n\t\telseif c == 'z' then res = res .. 'b'\n\t\telse res = res .. c\n\t\t\
    end\n", "\nend", "    -- Your code here.\n    -- Remember, you can use string.find()\
    \ and string.sub()\n    -- You may have to use string.len()\n    local encrypted\
    \ = \"\"\n    local currentChar = \"\"\n    local currentIndex = 0\n    local\
    \ newIndex = 0\n    local newIndexInAlphabet = 0\n    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for i = 1, string.len(s) do\n        currentChar = string.sub(s, i, i)\n\
    \        currentIndex = string.find(alphabet, currentChar)\n        newIndex =\
    \ (currentIndex + (2 * 2))\n        newIndexInAlphabet = newIndex % string.len(alphabet)\n\
    \        encrypted = encrypted .. string.sub(alphabet, newIndexInAlphabet, newIndexInAlphabet)\n\
    \    end\n    return encrypted\nend", "    local function rotate(c)\n        local\
    \ c = string.char(string.byte(c) + 2)\n        if c == ']' then\n            c\
    \ = '['\n        elseif c == '^' then\n            c = '_'\n        end\n    \
    \    return c\n    end\n    local s2 = ''\n    for i = 1, #s do\n        s2 =\
    \ s2 .. rotate(s:sub(i, i))\n    end\n    return s2\nend", "  local out = \"\"\
    \n  local i = 0\n  while i < #s do\n    out = out .. string.char(string.byte(s,\
    \ i) + 2 * 2)\n    i = i + 1\n  end\n  return out\nend", "\tlocal alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n\tlocal encrypted_s = \"\"\n\tfor i = 1, #s do\n\
    \t\t-- TODO: encrypt character at index i of s\n\t\tlocal char = string.sub(s,\
    \ i, i)\n\t\tlocal alphabet_char_pos = string.find(alphabet, char)\n\t\tlocal\
    \ new_char_pos = alphabet_char_pos + 2 * 2\n\t\tif new_char_pos > #alphabet then\n\
    \t\t\tnew_char_pos = new_char_pos - #alphabet\n\t\tend\n\t\tencrypted_s = encrypted_s\
    \ .. string.sub(alphabet, new_char_pos, new_char_pos)\n\tend\n\treturn encrypted_s\n\
    end", "\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\tlocal e = ''\n\tfor\
    \ i = 1, s:len() do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal ei = (alphabet:find(c)\
    \ + (2 * 2))\n\t\tif ei > 26 then\n\t\t\tei = ei - 26\n\t\tend\n\t\te = e .. alphabet:sub(ei,\
    \ ei)\n\tend\n\treturn e\nend", "\tlocal str = ''\n\tlocal letter = ''\n\tfor\
    \ i = 1, string.len(s) do\n\t\tletter = string.sub(s, i, i)\n\t\tif letter ==\
    \ 'x' then\n\t\t\tstr = str .. 'a'\n\t\telseif letter == 'y' then\n\t\t\tstr =\
    \ str .. 'b'\n\t\telseif letter == 'z' then\n\t\t\tstr = str .. 'c'\n\t\telse\n\
    \t\t\tstr = str .. string.char(string.byte(letter) + 2)\n\t\tend\n\tend\n\treturn\
    \ str\nend", "\tlocal s = string.lower(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal t = ''\n\tfor i=1, #s do\n\t\tlocal c = string.sub(s, i, i)\n\t\tlocal\
    \ index = string.find(alphabet, c)\n\t\tlocal value = string.sub(alphabet, index+4,\
    \ index+4)\n\t\tt = t .. value\n\tend\n\treturn t\nend", "    local alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz'\n    local rot = 2\n    local t = {}\n    for i\
    \ = 1, #s do\n        local c = s:sub(i, i)\n        local x = alphabet:find(c)\n\
    \        if x then\n            t[#t + 1] = alphabet:sub((x + rot) % 26 + 1, (x\
    \ + rot) % 26 + 1)\n        else\n            t[#t + 1] = c\n        end\n   \
    \ end\n    return table.concat(t)\nend", "    local new_string = \"\"\n    local\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i=1, #s do\n        local\
    \ letter = string.sub(s, i, i)\n        local index = string.find(alphabet, letter)\n\
    \        local new_index = (index + (2 * 2)) % 26\n        new_string = new_string\
    \ .. string.sub(alphabet, new_index, new_index)\n    end\n    return new_string\n\
    end", "  --TODO\n  return false\nend", "\nend", "    -- code here\nend", "\tlocal\
    \ abc = {}\n\tlocal alp = {}\n\tlocal i = 1\n\tfor j = 65,90 do\n\t\tabc[i] =\
    \ string.char(j)\n\t\ti = i + 1\n\tend\n\tfor j = 1,#s do\n\t\tif s:byte(j) >=\
    \ 65 and s:byte(j) <= 90 then\n\t\t\tlocal l = s:byte(j) - 64\n\t\t\tif l < 14\
    \ then\n\t\t\t\talp[j] = abc[l + 2]\n\t\t\telseif l == 14 then\n\t\t\t\talp[j]\
    \ = abc[1]\n\t\t\telseif l == 15 then\n\t\t\t\talp[j] = abc[2]\n\t\t\tend\n\t\t\
    else\n\t\t\talp[j] = s:sub(j,j)\n\t\tend\n\tend\n\treturn table.concat(alp)\n\
    end", "    return s\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local cipher = ''\n    for c in s:gmatch('.') do\n        local index = alphabet:find(c)\n\
    \        local offset = (index + (2 * 2)) % #alphabet\n        cipher = cipher\
    \ .. alphabet:sub(offset, offset)\n    end\n    return cipher\nend", "    local\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local n = string.len(s)\n   \
    \ local result = ''\n    for i = 1, n do\n        local c = string.sub(s, i, i)\n\
    \        local ind = string.find(alphabet, c)\n        if (ind) then\n       \
    \     local ind = (ind + 4) % 26\n            local c = string.sub(alphabet, ind,\
    \ ind)\n            result = result .. c\n        else\n            result = result\
    \ .. c\n        end\n    end\n    return result\nend", "    local t = {}\n   \
    \ for i = 1, #s do\n        local c = s:sub(i, i)\n        local n = c:byte()\n\
    \        if n >= 97 and n <= 122 then\n            n = n + 2\n            if n\
    \ > 122 then\n                n = n - 26\n            end\n        end\n     \
    \   table.insert(t, string.char(n))\n    end\n    return table.concat(t)\nend",
  "    local alphabet = {}\n    local sLength = string.len(s)\n    local encrypted\
    \ = ''\n    local ascii = 0\n    local count = 0\n    local ch = ''\n    local\
    \ ord = 0\n    for i = 1,sLength do\n        ascii = string.byte(s,i)\n      \
    \  if(ascii >= 97 and ascii <= 122) then\n            ord = (ascii - 97 + (2 *\
    \ 2)) % 26\n            ch = string.char(ord + 97)\n            encrypted = encrypted\
    \ .. ch\n        elseif(ascii >= 65 and ascii <= 90) then\n            ord = (ascii\
    \ - 65 + (2 * 2)) % 26\n            ch = string.char(ord + 65)\n            encrypted\
    \ = encrypted .. ch\n        else\n            encrypted = encrypted .. string.char(ascii)\n\
    \        end\n    end\n    return encrypted\nend", "    local r = ''\n    for\
    \ i = 1, #s do\n        local c = s:sub(i, i)\n        local v = string.byte(c)\n\
    \        local c = string.char(v + 2)\n        r = r .. c\n    end\n    return\
    \ r\nend", "  for i=1,#s do\n    if s:sub(i,i) == 'y' then\n      if s:sub(i+1,i+1)\
    \ == 'z' then\n        s = s:sub(1,i)..'b'..s:sub(i+2)\n      else\n        s\
    \ = s:sub(1,i)..s:sub(i+1,i+1)..'a'..s:sub(i+2)\n      end\n    elseif s:sub(i,i)\
    \ == 'z' then\n      s = s:sub(1,i)..'c'..s:sub(i+2)\n    else\n      s = s:sub(1,i)..s:sub(i+2,i+2)..s:sub(i+1,i+1)..s:sub(i+3)\n\
    \    end\n  end\n  return s\nend", "\nend", "    -- your code here\n    return\
    \ string.char(s:byte(1) + 2 * 2, s:byte(2) + 2 * 2)\nend", "    local chars =\
    \ {}\n    for c in s:gmatch\".\" do\n        chars[#chars+1] = c\n    end\n  \
    \  for i,c in ipairs(chars) do\n        local charset = c:lower() == c and \"\
    abcdefghijklmnopqrstuvwxyz\" or \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        local\
    \ newChar = charset:sub((charset:find(c) + 4) % 26, (charset:find(c) + 4) % 26)\n\
    \        chars[i] = newChar\n    end\n    return table.concat(chars)\nend", " \
    \   local a = {}\n    for i=1,#s do\n        local c = s:sub(i,i)\n        local\
    \ v = string.byte(c)\n        v = v + 2 * 2\n        if v > 122 then\n       \
    \     v = v - 26\n        end\n        a[i] = string.char(v)\n    end\n    return\
    \ table.concat(a)\nend", "  local rotated_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n\
    \  return string.gsub(s, '%a', function(char)\n    return string.char(string.byte(rotated_alphabet,\
    \ string.byte(char) - 96))\n  end)\nend", "\t-- Write your code here.", "  return\
    \ \nend", "  -- your code here\nend", "    local enc_str = ''\n    for i = 1,\
    \ #s do\n        local c = s:sub(i, i)\n        local n = string.byte(c)\n   \
    \     n = n + (#s * 2)\n        if n > 127 then\n            n = n - 127\n   \
    \     end\n        enc_str = enc_str .. string.char(n)\n    end\n    return enc_str\n\
    end", "\tlocal encryptedString = \"\"\n\tlocal sLength = #s\n\tlocal currentChar\n\
    \tlocal currentIndex\n\tfor i = 1, sLength do\n\t\tcurrentChar = string.sub(s,\
    \ i, i)\n\t\tcurrentIndex = string.find(alphabet, currentChar)\n\t\tif currentIndex\
    \ == nil then\n\t\t\t-- this is an invalid character\n\t\t\treturn nil\n\t\tend\n\
    \t\tcurrentIndex = (currentIndex - 2) % #alphabet\n\t\tencryptedString = encryptedString\
    \ .. string.sub(alphabet, currentIndex, currentIndex)\n\tend\n\treturn encryptedString\n\
    end", "    local t = {}\n    local n = 2*2\n    local sz = string.len(s)\n   \
    \ for i = 1, sz do\n        local c = string.byte(s, i)\n        c = c + n\n \
    \       local c1 = string.char(c)\n        t[i] = c1\n    end\n    return table.concat(t)\n\
    end\nprint('encrypt:', encrypt('asdfghjkl'))", "    local result = \"\"\n    local\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local alphalen = string.len(alphabet)\n\
    \    local i = 1\n    while i <= string.len(s) do\n        local char = string.sub(s,\
    \ i, i)\n        local cIndex = string.find(alphabet, char)\n        if cIndex\
    \ then\n            cIndex = (cIndex + (2 * 2)) % alphalen\n            result\
    \ = result .. string.sub(alphabet, cIndex, cIndex)\n        else\n           \
    \ result = result .. char\n        end\n        i = i + 1\n    end\n    return\
    \ result\nend", "  return s:gsub('[a-z]', function(c)\n    if c == 'z' then\n\
    \      return 'b'\n    elseif c == 'y' then\n      return 'a'\n    else\n    \
    \  return string.char(string.byte(c) + 2)\n    end\n  end)\nend", "    -- your\
    \ code goes here\n    local rotation = string.gsub(s, \"(.)\", function(char)\n\
    \        local dist = string.byte(char) - 97 -- 'a' is ASCII 97\n        local\
    \ newDist = ((dist + (2 * 2)) % 26) + 97\n        return string.char(newDist)\n\
    \    end)\n    return rotation\nend", end, "\tlocal str = {}\n\tfor i=1,#s do\n\
    \t\tlocal ch = string.byte(s,i)\n\t\tif ch >= 97 and ch <= 122 then\n\t\t\tch\
    \ = ch - 97\n\t\t\tch = (ch + 26) % 26\n\t\t\tch = ch -2\n\t\t\tch = (ch + 26)\
    \ % 26\n\t\t\tch = ch + 97\n\t\tend\n\t\tstr[i] = string.char(ch)\n\tend\n\treturn\
    \ table.concat(str)\nend", "  local s_ = {}\n  for c in s:gmatch('.') do\n   \
    \ table.insert(s_, c)\n  end\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local s_en = {}\n  for _, c in ipairs(s_) do\n    local c_en = c\n    for _,\
    \ c_ab in ipairs({'s', 't', 'u', 'v', 'w', 'x', 'y', 'z'}) do\n      if c == c_ab\
    \ then\n        local index = string.find(alphabet, c_ab)\n        c_en = alphabet:sub(index\
    \ - 2, index - 2)\n      end\n    end\n    table.insert(s_en, c_en)\n  end\n \
    \ return table.concat(s_en)\nend", "  -- your code here\n  local cipher = {}\n\
    \  local ascii = {}\n  local newascii = {}\n  local encrypted = {}\n  for i=1,#s\
    \ do\n    table.insert(ascii,string.byte(s,i))\n  end\n  for i=1,#ascii do\n \
    \   if ascii[i] <= 110 then\n      table.insert(newascii, ascii[i]+2*2)\n    else\n\
    \      table.insert(newascii, ascii[i]+((2*2)-26))\n    end\n  end\n  for i=1,#newascii\
    \ do\n    table.insert(cipher,string.char(newascii[i]))\n  end\n  encrypted =\
    \ table.concat(cipher)\n  return encrypted\nend", "\t-- TODO\nend", "  local result\
    \ = ''\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  for i = 1, #s do\n\
    \    local character = s:sub(i, i)\n    local index = alphabet:find(character)\n\
    \    local encryptedIndex = (index * 2 + 2) % 26\n    result = result .. alphabet:sub(encryptedIndex,\
    \ encryptedIndex)\n  end\n  return result\nend", "  local str = ''\n  for i =\
    \ 1, #s do\n    local c = s:sub(i,i)\n    local n = getLetterNumber(c)\n    n\
    \ = n + 2 * 2\n    if n > 26 then\n      n = n - 26\n    end\n    str = str ..\
    \ getLetterChar(n)\n  end\n  return str\nend", "  return s\nend", "    local map\
    \ = {}\n    local start = 97\n    local end_alphabet = 122\n    local count =\
    \ 1\n    local rotate = 2\n    local shift = end_alphabet - rotate\n    while\
    \ start <= end_alphabet do\n        map[start] = string.char(start + rotate)\n\
    \        map[shift] = string.char(end_alphabet - count)\n        start = start\
    \ + 1\n        shift = shift - 1\n        count = count + 1\n    end\n    local\
    \ result = ''\n    for i = 1, #s do\n        local c = string.byte(s, i)\n   \
    \     result = result .. map[c]\n    end\n    return result\nend", "\tlocal alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n\tlocal e = {}\n\tfor i=1, string.len(s) do\n\
    \t\tlocal c = string.lower(string.sub(s, i, i))\n\t\tlocal n = 2*i\n\t\tif n >\
    \ 26 then\n\t\t\tn = n % 26\n\t\tend\n\t\te[i] = string.sub(alphabet, (string.find(alphabet,\
    \ c) + n), (string.find(alphabet, c) + n))\n\tend\n\treturn table.concat(e)\n\
    end", "\tlocal i = 1\n\tlocal res = \"\"\n\tlocal a = {}\n\twhile i <= #s do\n\
    \t\ta[i] = string.byte(s, i) + 2*2\n\t\tres = res .. string.char(a[i])\n\t\ti\
    \ = i + 1\n\tend\n\treturn res\nend", "    -- TODO: finish this function\nend",
  "\nend", "  local result = ''\n  local len = string.len(s)\n  for i = 1, len do\n\
    \    local ascii = string.byte(s, i)\n    if (ascii < 97) then\n      result =\
    \ result .. string.char(ascii)\n    elseif (ascii > 120) then\n      result =\
    \ result .. string.char(ascii + 2 - 26)\n    else\n      result = result .. string.char(ascii\
    \ + 2)\n    end\n  end\n  return result\nend\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\n\
    print(encrypt('gf'))\nprint(encrypt('et'))", "\tlocal key = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \tlocal currentKey = {}\n\tlocal newKey = {}\n\tlocal encryptedString = \"\"\n\
    \tlocal temp\n\tfor i=1,#key do\n\t\tcurrentKey[i] = key[i]\n\tend\n\tfor i=1,#key\
    \ do\n\t\ttemp = currentKey[i]\n\t\tnewKey[i] = currentKey[i+2]\n\t\tnewKey[i+2]\
    \ = temp\n\tend\n\tfor i=1,#s do\n\t\tlocal counter = 1\n\t\twhile counter < #key\
    \ do\n\t\t\tif string.lower(s:sub(i,i)) == currentKey[counter] then\n\t\t\t\t\
    if s:sub(i,i) == s:sub(i,i):upper() then\n\t\t\t\t\tencryptedString = encryptedString\
    \ .. newKey[counter]:upper()\n\t\t\t\telse\n\t\t\t\t\tencryptedString = encryptedString\
    \ .. newKey[counter]\n\t\t\t\tend\n\t\t\tend\n\t\t\tcounter = counter + 1\n\t\t\
    end\n\tend\n\treturn encryptedString\nend", "  local encrypt_string = ''\n  local\
    \ encrypt_letter = ''\n  for i = 1, #s do\n    encrypt_letter = string.char(s:byte(i)\
    \ + 2 * 2)\n    encrypt_string = encrypt_string .. encrypt_letter\n  end\n  return\
    \ encrypt_string\nend", "    -- initialize index to 0\n    local index = 0\n \
    \   -- initialize a string to store the encrypted string\n    local encrypted\
    \ = ''\n    -- iterate through string\n    for i=1, #s do\n        -- increment\
    \ the index\n        index = index + 1\n        -- get the current character at\
    \ index\n        local c = s:sub(i,i)\n        -- get the current character's\
    \ offset in the alphabet\n        local offset = string.byte(c) - string.byte('a')\n\
    \        -- rotate the offset to the right by 2\n        local rotated = (offset\
    \ + 2) % 26\n        -- convert the offset to a character\n        local encryptedChar\
    \ = string.char(rotated + string.byte('a'))\n        -- append the character to\
    \ the encrypted string\n        encrypted = encrypted .. encryptedChar\n    end\n\
    \    -- return the encrypted string\n    return encrypted\nend", "  local result\
    \ = ''\n  local tab = {}\n  local startPos = ''\n  local pos = 0\n  local base\
    \ = 96\n  local i = 0\n  local text = s:lower()\n  if string.len(text) == 1 then\n\
    \    startPos = string.byte(text)\n    pos = startPos + 2\n    result = string.char(pos)\n\
    \  else\n    while i < string.len(text) do\n      startPos = string.byte(text,\
    \ i+1)\n      pos = (startPos + 2) * 2\n      if pos > 122 then\n        pos =\
    \ (base + pos) - 122\n      end\n      table.insert(tab, pos)\n      i = i + 1\n\
    \    end\n    for _,v in ipairs(tab) do\n      result = result .. string.char(v)\n\
    \    end\n  end\n  return result\nend", "    return string.gsub(s, '.', alph)\n\
    end", "    s = string.lower(s)\n    local chars = {}\n    for c in s:gmatch\"\
    .\" do\n        table.insert(chars, string.char(96 + ((string.byte(c) - 96 + 2)\
    \ % 26) + 1))\n    end\n    return table.concat(chars)\nend", "    local new_s\
    \ = \"\"\n    local offset = 2 * 2\n    for i = 1, string.len(s) do\n        local\
    \ letter = string.sub(s, i, i)\n        local ascii = string.byte(letter)\n  \
    \      local new_ascii = ascii + offset\n        if new_ascii > 122 then\n   \
    \         new_ascii = new_ascii - 26\n        end\n        new_s = new_s .. string.char(new_ascii)\n\
    \    end\n    return new_s\nend", "    local newString = ''\n    for letter in\
    \ s:gmatch('.') do\n        newString = newString .. string.char(string.byte(letter)\
    \ + 4)\n    end\n    return newString\nend", end, end, "\treturn my_encrypt(s,\
    \ 'abcdefghijklmnopqrstuvwxyz', 'cdefghijklmnopqrstuvwxyzab')\nend", "    local\
    \ s_lower = lower(s)\n    local s_upper = upper(s)\n    local s_enc = {}\n   \
    \ local s_enc_lower = {}\n    local s_enc_upper = {}\n    for i = 1, #s_lower\
    \ do\n        if (s_lower[i] == 'v') then\n            s_enc_lower[i] = 'x'\n\
    \        elseif (s_lower[i] == 'w') then\n            s_enc_lower[i] = 'y'\n \
    \       elseif (s_lower[i] == 'x') then\n            s_enc_lower[i] = 'z'\n  \
    \      elseif (s_lower[i] == 'y') then\n            s_enc_lower[i] = 'a'\n   \
    \     elseif (s_lower[i] == 'z') then\n            s_enc_lower[i] = 'b'\n    \
    \    else\n            s_enc_lower[i] = string.char(string.byte(s_lower[i]) +\
    \ 2)\n        end\n    end\n    for i = 1, #s_upper do\n        if (s_upper[i]\
    \ == 'V') then\n            s_enc_upper[i] = 'X'\n        elseif (s_upper[i] ==\
    \ 'W') then\n            s_enc_upper[i] = 'Y'\n        elseif (s_upper[i] == 'X')\
    \ then\n            s_enc_upper[i] = 'Z'\n        elseif (s_upper[i] == 'Y') then\n\
    \            s_enc_upper[i] = 'A'\n        elseif (s_upper[i] == 'Z') then\n \
    \           s_enc_upper[i] = 'B'\n        else\n            s_enc_upper[i] = string.char(string.byte(s_upper[i])\
    \ + 2)\n        end\n    end\n    for i = 1, #s do\n        if (lower(s[i]) ==\
    \ s[i]) then\n            s_enc[i] = s_enc_lower[i]\n        else\n          \
    \  s_enc[i] = s_enc_upper[i]\n        end", "    -- Your code here\n    return\
    \ s\nend", "    -- your code here\nend", "    local output = \"\"\n    for i =\
    \ 1, #s do\n        local charValue = string.byte(s, i)\n        if (charValue\
    \ < string.byte('g')) then\n            output = output .. string.char(charValue\
    \ + 2)\n        elseif (charValue < string.byte('s')) then\n            output\
    \ = output .. string.char(charValue + 2 + 1)\n        elseif (charValue < string.byte('y'))\
    \ then\n            output = output .. string.char(charValue + 2 + 2)\n      \
    \  elseif (charValue < string.byte('z')) then\n            output = output ..\
    \ string.char(charValue + 2 + 3)\n        else\n            output = output ..\
    \ string.char(charValue + 2 - 26)\n        end\n    end\n    return output\nend",
  "    local alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    local newString = \"\"\n\
    \    for i = 1, #s do\n        local letter = string.sub(s, i, i)\n        local\
    \ newIndex = alpha:find(letter)\n        newIndex = newIndex + 2*2\n        if\
    \ newIndex > #alpha then\n            newIndex = newIndex - #alpha\n        end\n\
    \        local newLetter = string.sub(alpha, newIndex, newIndex)\n        newString\
    \ = newString .. newLetter\n    end\n    return newString\nend", "    -- body\n\
    end", "\tlocal alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tlocal s2 = \"\"\n\t\
    for i = 1, #s do\n\t\tlocal pos = string.find(alphabet, s:sub(i,i))\n\t\tlocal\
    \ pos2 = ((pos - 1 + 2) % 26) + 1\n\t\ts2 = s2 .. alphabet:sub(pos2, pos2)\n\t\
    end\n\treturn s2\nend", "    local result = ''\n    for i = 1, #s do\n       \
    \ result = result .. string.char(s:byte(i) + 2 * 2)\n    end\n    return result\n\
    end", "    local rotate = 0\n    local string = ''\n    local start = 'a'\n  \
    \  local stop = 'z'\n    for i = 1, string.len(s) do\n        rotate = rotate\
    \ + 2 * 2\n        string = string .. string.char(string.byte(s, i) + rotate)\n\
    \    end\n    return string\nend", "  local s = s:lower()\n  local t = {}\n  for\
    \ i = 1, #s do\n    local x = s:sub(i,i)\n    if x == ' ' then\n      table.insert(t,\
    \ x)\n    else\n      local a = alphabet:find(x)\n      local b = ((a - 1) + (2\
    \ * 2)) % #alphabet\n      table.insert(t, alphabet:sub(b + 1, b + 1))\n    end\n\
    \  end\n  return table.concat(t)\nend", "\tlocal result = \"\"\n\tfor i = 1, string.len(s)\
    \ do\n\t\tlocal index = string.find(alpha, string.sub(s, i, i))\n\t\tresult =\
    \ result .. string.sub(alpha, (index + 2 * 2) % 26 + 1, (index + 2 * 2) % 26 +\
    \ 1)\n\tend\n\treturn result\nend", "  local encryptStr = ''\n  for i = 1, #s\
    \ do\n    encryptStr = encryptStr .. string.char(string.byte(s, i) + 4)\n  end\n\
    \  return encryptStr\nend", "    local alp = 'abcdefghijklmnopqrstuvwxyz'\n  \
    \  local out = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   local place = alp:find(c)\n        out = out .. alp:sub((place + (2 * i) -\
    \ 1) % 26 + 1, (place + (2 * i) - 1) % 26 + 1)\n    end\n    return out\nend",
  "    local result = \"\"\n    local x = 0\n    local y = 0\n    local count = 0\n\
    \    local one = 0\n    local two = 0\n    local three = 0\n    local four = 0\n\
    \    local a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n    local\
    \ e = 0\n    local f = 0\n    local g = 0\n    local h = 0\n    local i = 0\n\
    \    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local\
    \ n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n\
    \    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local\
    \ x = 0\n    local y = 0\n    local z = 0\n    local length = 0\n    for i in\
    \ string.gmatch(s, \".\") do\n        length = length + 1\n    end\n    for i\
    \ = 1, length do\n        local char = string.sub(s, i, i)\n        if char ==\
    \ \"a\" then\n            count = 1\n        elseif char == \"b\" then\n     \
    \       count = 2\n        elseif char == \"c\" then\n            count = 3\n\
    \        elseif char == \"d\" then\n            count = 4\n        elseif char\
    \ == \"e\" then\n            count = 5\n        elseif char == \"f\" then\n  \
    \          count = 6\n        elseif char == \"g\" then\n            count = 7\n\
    \        elseif char == \"h\" then\n            count = 8\n        elseif char\
    \ == \"i\" then\n            count = 9\n        elseif char == \"j\" then\n  \
    \          count = 10\n        elseif char == \"k\" then\n            count =\
    \ 11\n        elseif char == \"l\" then\n            count = 12\n        elseif\
    \ char == \"m\" then\n            count = 13\n        elseif char == \"n\" then\n\
    \            count = 14\n        elseif char == \"o\" then\n            count\
    \ = 15\n        elseif char == \"p\" then\n            count = 16\n        elseif\
    \ char == \"q\" then\n            count = 17\n        elseif char", "    -- Write\
    \ your code here\nend", "\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\tlocal\
    \ encrypted = ''\n\tlocal n = string.len(s)\n\tfor i = 1, n do\n\t\tlocal current_char\
    \ = string.sub(s, i, i)\n\t\tlocal index = string.find(alphabet, current_char)\n\
    \t\tif index then\n\t\t\tlocal new_index = (index + 2 * i) % 26\n\t\t\tlocal new_char\
    \ = string.sub(alphabet, new_index, new_index)\n\t\t\tencrypted = encrypted ..\
    \ new_char\n\t\telse\n\t\t\tencrypted = encrypted .. current_char\n\t\tend\n\t\
    end\n\treturn encrypted\nend", "\tif s == \"\" then\n\t\treturn \"\"\n\tend\n\t\
    return encrypt(string.sub(s, 1, 1)) .. encrypt(string.sub(s, 2))\nend", "    if\
    \ string.len(s) == 0 then\n        return \"\"\n    end\n    local a = {}\n  \
    \  for i = 1, string.len(s) do\n        if string.find(\"abcdefghijklmnopqrstuvwxyz\"\
    , string.sub(s, i, i)) then\n            a[i] = string.char(string.byte(string.sub(s,\
    \ i, i)) + 2)\n        elseif string.find(\"yz\", string.sub(s, i, i)) then\n\
    \            a[i] = string.char(string.byte(string.sub(s, i, i)) - 24)\n     \
    \   elseif string.find(\"xy\", string.sub(s, i, i)) then\n            a[i] = string.char(string.byte(string.sub(s,\
    \ i, i)) - 22)\n        else\n            a[i] = string.sub(s, i, i)\n       \
    \ end\n    end\n    return table.concat(a)\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local i = 1\n    local new_word = ''\n    for letter in s:gmatch(\".\")\
    \ do\n        local x = string.find(alphabet, letter)\n        if x then\n   \
    \         if x < 2 then\n                new_word = new_word .. alphabet:sub(x\
    \ + 25, x + 25)\n            else\n                new_word = new_word .. alphabet:sub(x\
    \ - 2, x - 2)\n            end\n        else\n            new_word = new_word\
    \ .. letter\n        end\n    end\n    return new_word\nend", "  local two = 2\n\
    \  local two_shifted = {}\n  local alphabet = {}\n  local encoded = {}\n  -- create\
    \ table of letter shifted down by 2\n  for i = 1, #s do\n    table.insert(two_shifted,\
    \ string.char(string.byte(s, i) + two))\n  end\n  -- create table of alphabet\
    \ \n  for i = 97, 122 do\n    table.insert(alphabet, string.char(i))\n  end\n\
    \  -- match characters\n  for i = 1, #s do\n    if s:byte(i) >= 97 and s:byte(i)\
    \ <= 122 then\n      for j = 1, #alphabet do\n        if s:byte(i) == alphabet[j]:byte()\
    \ then\n          table.insert(encoded, alphabet[j + two])\n        end\n    \
    \  end\n    else\n      table.insert(encoded, two_shifted[i])\n    end\n  end\n\
    \  return table.concat(encoded)\nend", "    local encrypted = ''\n    for i =\
    \ 1, #s do\n        local c = s:sub(i, i)\n        local byte = string.byte(c)\n\
    \        if byte >= 97 and byte <= 122 then\n            byte = byte + 4\n   \
    \         if byte > 122 then\n                byte = byte - 26\n            end\n\
    \        elseif byte >= 65 and byte <= 90 then\n            byte = byte + 4\n\
    \            if byte > 90 then\n                byte = byte - 26\n           \
    \ end\n        end\n        encrypted = encrypted .. string.char(byte)\n    end\n\
    \    return encrypted\nend", "\tlocal charArray = {}\n\tfor i = 1, #s do\n\t\t\
    table.insert(charArray, string.char(string.byte(s, i) + 2 * 2))\n\tend\n\treturn\
    \ table.concat(charArray)\nend", "  -- write your code here\nend", "  -- loop\
    \ over the string\n  local out = ''\n  for i = 1, string.len(s) do\n    -- find\
    \ the corresponding letter for the rotation\n    local r = string.sub(s, i, i)\n\
    \    local ind = string.find(alphabet, r)\n    if ind + 4 <= 26 then\n      out\
    \ = out .. string.sub(alphabet, ind + 4, ind + 4)\n    else\n      out = out ..\
    \ string.sub(alphabet, ind + 4 - 26, ind + 4 - 26)\n    end\n  end\n  return out\n\
    end", "\tlocal s = s:lower()\n\tlocal t = {}\n\tfor v in s:gmatch(\".\") do\n\t\
    \tlocal v = string.byte(v) - 96\n\t\tlocal c = (((v + 2) * 2) % 26) + 96\n\t\t\
    local c = string.char(c)\n\t\ttable.insert(t, c)\n\tend\n\tlocal t = table.concat(t)\n\
    \treturn t\nend", end, "    local alpha = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local new = {}\n    for i = 1, string.len(s) do\n        for j = 1, 25 do\n\
    \            if string.sub(s, i, i) == alpha[j] then\n                table.insert(new,\
    \ alpha[j+1])\n            end\n        end\n    end\n    return table.concat(new)\n\
    end", "    local letters = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local result = ''\n    for i = 1, string.len(s) do\n        local current_letter\
    \ = string.sub(s, i, i)\n        local index = 1\n        local upper = false\n\
    \        if current_letter == string.upper(current_letter) then\n            upper\
    \ = true\n        end\n        current_letter = string.lower(current_letter)\n\
    \        while index <= 26 do\n            if current_letter == letters[index]\
    \ then\n                break\n            end\n            index = index + 1\n\
    \        end\n        local new_index = index + 2 * 2\n        if new_index >\
    \ 26 then\n            new_index = new_index - 26\n        end\n        if upper\
    \ then\n            result = result .. string.upper(letters[new_index])\n    \
    \    else\n            result = result .. letters[new_index]\n        end\n  \
    \  end\n    return result\nend", "    local a = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local r = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n    \
    \    local p = a:find(c)\n        if p then\n            p = p + 2 * 2\n     \
    \       if p > #a then\n                p = p - #a\n            end\n        \
    \    r[#r + 1] = a:sub(p, p)\n        else\n            r[#r + 1] = c\n      \
    \  end\n    end\n    return table.concat(r)\nend", "\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encryption = ''\n\tfor i = 1, #s do\n\t\tfor j = 1, #alphabet do\n\t\t\
    \tif s:sub(i, i) == alphabet:sub(j, j) then\n\t\t\t\tif j > #alphabet - 2 then\n\
    \t\t\t\t\tencryption = encryption .. alphabet:sub(j - #alphabet + 2, j - #alphabet\
    \ + 2)\n\t\t\t\telse\n\t\t\t\t\tencryption = encryption .. alphabet:sub(j + 2,\
    \ j + 2)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn encryption\nend", "\t\
    local alphabet = {}\n\tfor i = 1, 26 do\n\t\talphabet[i] = string.char(96 + i)\n\
    \tend\n\tlocal encrypted = {}\n\tfor i = 1, #s do\n\t\tfor j = 1, 26 do\n\t\t\t\
    if s:sub(i, i) == alphabet[j] then\n\t\t\t\tif j + 4 > 26 then\n\t\t\t\t\tencrypted[i]\
    \ = alphabet[j + 4 - 26]\n\t\t\t\telse\n\t\t\t\t\tencrypted[i] = alphabet[j +\
    \ 4]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(encrypted)\n\
    end", "    -- your code here\nend", "  -- Your code here\n  return nil\nend",
  "  local result = \"\"\n  local len = string.len(s)\n  for i = 1, len do\n    local\
    \ c = string.sub(s, i, i)\n    local b = string.byte(c)\n    -- encrypt the letter\
    \ if it is lower case\n    if (b >= 97 and b <= 122) then\n      result = result\
    \ .. string.char(b + 4)\n    -- encrypt the letter if it is upper case\n    elseif\
    \ (b >= 65 and b <= 90) then\n      result = result .. string.char(b + 4)\n  \
    \  -- ignore all punctuation\n    else\n      result = result .. c\n    end\n\
    \  end\n  return result\nend", "    local encrypt = {}\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    for i=1, #s do\n        if s:sub(i,i) == 'z' then\n            encrypt[i]\
    \ = 'b'\n        elseif s:sub(i,i) == 'y' then\n            encrypt[i] = 'a'\n\
    \        elseif s:sub(i,i) == ' ' then\n            encrypt[i] = ' '\n       \
    \ elseif s:sub(i,i) == '!' then\n            encrypt[i] = '!'\n        else\n\
    \            encrypt[i] = alphabet:sub(alphabet:find(s:sub(i,i))+2, alphabet:find(s:sub(i,i))+2)\n\
    \        end\n    end\n    return table.concat(encrypt)\nend", "    local ret\
    \ = ''\n    for i = 1, #s do\n        if s:sub(i, i) == ' ' then\n           \
    \ ret = ret .. ' '\n        else\n            ret = ret .. string.char(string.byte(s:sub(i,\
    \ i)) + 2 * 2)\n        end\n    end\n    return ret\nend", "  local str = ''\n\
    \  for i = 1, #s do\n    local c = s:sub(i,i)\n    if c == 'z' then\n      str\
    \ = str .. 'b'\n    elseif c == 'y' then\n      str = str .. 'a'\n    else\n \
    \     str = str .. string.char(string.byte(c) + 2)\n    end\n  end\n  return str\n\
    end", "    local alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local encryptedString = ''\n    local t = table.concat(alphabet)\n    local\
    \ l = string.len(t)\n    -- pick each character of the string and convert it to\
    \ lowercase\n    for i=1,string.len(s) do\n        s = string.lower(s)\n     \
    \   local c = string.sub(s,i,i)\n        -- search for the character in the table\
    \ and get its position\n        for k=1,l do\n            if c == alphabet[k]\
    \ then\n                -- add the next two characters (shifted by two) to the\
    \ encrypted string\n                encryptedString = encryptedString .. alphabet[k+2]\n\
    \            end\n        end\n    end\n    return encryptedString\nend", "  --\
    \ You can use string.char(n) to return a string from a number n\n  -- You can\
    \ use string.byte(s) to return a number from a string s\n  -- In order to get\
    \ a number from a string, you can use math.random(n)\n  -- which returns a random\
    \ number between 1 and n\n  -- You can use math.floor(n) to round n down to the\
    \ nearest integer\n  -- Also, you can use math.ceil(n) to round n up to the nearest\
    \ integer\n  -- string.lower(s) returns s with all lowercase letters\n  -- string.upper(s)\
    \ returns s with all uppercase letters\n  -- string.len(s) returns the length\
    \ of string s\n  -- string.sub(s, i, j) returns a substring of s from the i'th\
    \ character to the j'th character\n  -- string.find(s, substr) returns the index\
    \ of the first occurence of substr in s", "    -- code here\nend", "  -- your\
    \ implementation here\n  local out=''\n  for i=1,string.len(s) do\n    local c=string.sub(s,i,i)\n\
    \    local b=string.byte(c)\n    local a=b+4\n    if b<=109 then \n      out=out..string.char(a)\n\
    \    else\n      out=out..string.char(a-26)\n    end\n  end\n  return out\nend",
  "  local function encrypt_char(c)\n    if c == 'z' then\n      return 'b'\n    elseif\
    \ c == 'y' then\n      return 'a'\n    else\n      return string.char(string.byte(c)\
    \ + 2 * 2)\n    end\n  end\n  return string.gsub(s, \".\", encrypt_char)\nend",
  "    -- TODO\nend", "  return s\nend", "\tlocal ret = \"\"\n\tfor i = 1, #s do\n\
    \t\tlocal c = s:sub(i, i)\n\t\tret = ret .. alphabet_encrypt_map[c]\n\tend\n\t\
    return ret\nend", "\tlocal s = string.lower(s)\n\tlocal retVal = \"\"\n\tlocal\
    \ letters = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\"\
    ,\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\"\
    ,\"y\",\"z\"}\n\t\n\t--loop though each letter\n\tfor i = 1, string.len(s) do\n\
    \t\tlocal index = 0\n\t\t\n\t\t--loop to find letter in alphabet table\n\t\tfor\
    \ k,v in pairs(letters) do\n\t\t\tif v == string.sub(s,i,i) then\n\t\t\t\tindex\
    \ = k\n\t\t\tend\n\t\tend\n\t\t\n\t\t--increment index\n\t\tindex = index + 2\n\
    \t\t\n\t\t--if index greater than letters\n\t\tif index > #letters then\n\t\t\t\
    index = index - #letters\n\t\tend\n\t\t\n\t\t--if letter was 'b' or 'c'\n\t\t\
    if index == 1 or index == 2 then\n\t\t\tindex = index + 2\n\t\tend\n\t\t\n\t\t\
    --add letter to return string\n\t\tretVal = retVal .. letters[index]\n\tend\n\t\
    \n\treturn retVal\nend", "    local alphabet = {\n        ['a'] = 'c',\n     \
    \   ['b'] = 'd',\n        ['c'] = 'e',\n        ['d'] = 'f',\n        ['e'] =\
    \ 'g',\n        ['f'] = 'h',\n        ['g'] = 'i',\n        ['h'] = 'j',\n   \
    \     ['i'] = 'k',\n        ['j'] = 'l',\n        ['k'] = 'm',\n        ['l']\
    \ = 'n',\n        ['m'] = 'o',\n        ['n'] = 'p',\n        ['o'] = 'q',\n \
    \       ['p'] = 'r',\n        ['q'] = 's',\n        ['r'] = 't',\n        ['s']\
    \ = 'u',\n        ['t'] = 'v',\n        ['u'] = 'w',\n        ['v'] = 'x',\n \
    \       ['w'] = 'y',\n        ['x'] = 'z',\n        ['y'] = 'a',\n        ['z']\
    \ = 'b'\n    }\n    local newString = ''\n    for i = 1, #s do\n        local\
    \ letter = s:sub(i, i)\n        newString = newString .. alphabet[letter]\n  \
    \  end\n    return newString\nend", "\tlocal alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \tlocal alphaTable = {}\n\tlocal letter = \"\"\n\tlocal index = 0\n\tlocal encrypt\
    \ = \"\"\n\tfor i = 1, string.len(s) do\n\t\tletter = string.sub(s, i, i)\n\t\t\
    --print(letter)\n\t\tfor x = 1, string.len(alphabet) do\n\t\t\tif letter == alphabet[x]\
    \ then\n\t\t\t\tindex = x\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif index >=\
    \ 22 then\n\t\t\tindex = index + 3\n\t\telseif index >= 20 then\n\t\t\tindex =\
    \ index + 2\n\t\telseif index >= 18 then\n\t\t\tindex = index + 1\n\t\telseif\
    \ index >= 13 then\n\t\t\tindex = index + 2\n\t\telseif index >= 8 then\n\t\t\t\
    index = index + 1\n\t\telseif index >= 3 then\n\t\t\tindex = index + 2\n\t\telseif\
    \ index == 2 then\n\t\t\tindex = index + 1\n\t\tend\n\t\talphaTable[i] = alphabet[index]\n\
    \tend\n\tfor i = 1, #alphaTable do\n\t\tencrypt = encrypt .. alphaTable[i]\n\t\
    end\n\treturn encrypt\nend", "  return s\nend", "    local alphabet = {}\n   \
    \ local encryption = {}\n    local encrypted = ''\n    -- create alphabet\n  \
    \  for i = 1, 26 do\n        alphabet[i] = string.char(i + 96)\n    end\n    --\
    \ convert s to array of characters\n    for i = 1, #s do\n        encryption[i]\
    \ = string.sub(s, i, i)\n    end\n    -- replace each element in encryption with\
    \ the element from alphabet\n    -- that is 2i + 2 places ahead\n    for i = 1,\
    \ #encryption do\n        for j = 1, 26 do\n            if encryption[i] == alphabet[j]\
    \ then\n                encryption[i] = alphabet[(j + (2 * i) + 2) % 26]\n   \
    \         end\n        end\n    end\n    -- convert encryption to string\n   \
    \ for i = 1, #encryption do\n        encrypted = encrypted .. encryption[i]\n\
    \    end\n    return encrypted\nend", "    local chars = {}\n    local z = string.lower(s)\n\
    \    local a = string.byte('a')\n    local z = string.byte('z')\n    local a_add_1\
    \ = a + 1\n    local z_add_1 = z + 1\n    local m_1 = z - (a + 1) + 1\n    local\
    \ m_2 = z - (a + 2) + 1\n    for i = 1, string.len(s) do\n        local c = string.byte(s,\
    \ i)\n        if c >= a and c <= z then\n            if c >= a_add_1 and c <=\
    \ z_add_1 then\n                chars[i] = string.char(c + 2)\n            elseif\
    \ c == a then\n                chars[i] = string.char(c + m_2)\n            elseif\
    \ c == a_add_1 then\n                chars[i] = string.char(c + m_1)\n       \
    \     end\n        else\n            chars[i] = string.char(c)\n        end\n\
    \    end\n    return table.concat(chars)\nend", "\t-- TODO\nend", "    local n\
    \ = #s\n    local news = \"\"\n    for i = 1, n do\n        local c = s:sub(i,\
    \ i)\n        if c == 'z' then\n            news = news .. 'b'\n        elseif\
    \ c == 'y' then\n            news = news .. 'a'\n        else\n            local\
    \ ascii = string.byte(c)\n            local ascii2 = ascii + 2 * 2\n         \
    \   local newC = string.char(ascii2)\n            news = news .. newC\n      \
    \  end\n    end\n    return news\nend", "    return s:gsub('%a',function(x) return\
    \ alphabet[(x:byte() + 2 * 2 - 1) % 26 + 1] end)\nend", "    local r = \"\"\n\
    \    for i = 1, #s do\n        local b = string.byte(s, i)\n        if b >= 97\
    \ and b <= 122 then r = r .. string.char(b + 2*2)\n        elseif b >= 65 and\
    \ b <= 90 then r = r .. string.char(b + 2*2)\n        else r = r .. string.char(b)\
    \ end\n    end\n    return r\nend", "  local s = s\n  local rs = \"\"\n  for i\
    \ = 1, #s do\n    local n = string.byte(s, i)\n    n = n + (2 * 2)\n    rs = rs\
    \ .. string.char(n)\n  end\n  return rs\nend", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local word = ''\n  local letters = {}\n  local letters_to_add = 2\n  local\
    \ index = 1\n  local j = 1\n  local word_length = string.len(s)\n  local alphabet_length\
    \ = string.len(alphabet)\n  for i = 1,alphabet_length do\n    letters[i] = string.sub(alphabet,i,i)\n\
    \  end\n  for k = 1,word_length do\n    if index == alphabet_length then\n   \
    \   index = 1\n    end\n    if string.sub(s,k,k) == string.sub(alphabet,index,index)\
    \ then\n      word = word .. string.sub(alphabet,index+letters_to_add,index+letters_to_add)\n\
    \      index = index + 1\n    else\n      for l = 1,alphabet_length do\n     \
    \   if string.sub(s,k,k) == string.sub(alphabet,l,l) then\n          word = word\
    \ .. string.sub(alphabet,l+letters_to_add,l+letters_to_add)\n        end\n   \
    \   end\n    end\n  end\n  return word\nend", "  local alphabet = string.lower('abcdefghijklmnopqrstuvwxyz')\n\
    \  local alphabet_len = string.len(alphabet)\n  local alphabet_index_dict = {}\n\
    \  for i = 1, alphabet_len do\n    alphabet_index_dict[string.sub(alphabet, i,\
    \ i)] = i\n  end\n  local new_string = ''\n  for i = 1, string.len(s) do\n   \
    \ local char = string.sub(s, i, i)\n    local char_index = alphabet_index_dict[char]\n\
    \    char_index = char_index + (2 * 2)\n    if char_index > alphabet_len then\n\
    \      char_index = char_index - alphabet_len\n    end\n    new_string = new_string\
    \ .. string.sub(alphabet, char_index, char_index)\n  end\n  return new_string\n\
    end", "    local res = {}\n    for i = 1, string.len(s) do\n        local c =\
    \ string.byte(s, i)\n        res[i] = string.char(math.fmod(c + 4, 127))\n   \
    \ end\n    return table.concat(res)\nend", "  -- if the string is empty then return\
    \ a blank string\n  if s == '' then\n    return ''\n  end\n  -- find the index\
    \ of the first character of the string in the alphabet\n  local c_index = string.find(alphabet,\
    \ string.sub(s, 1, 1))\n  -- if the character is not in the alphabet return the\
    \ string\n  if c_index == nil then\n    return s\n  end\n  -- if the character\
    \ is at the beginning of the alphabet\n  if c_index == 1 then\n    -- rotate the\
    \ character index by multiplying by 2\n    c_index = c_index * 2\n    -- if the\
    \ character index is greater than 26 then subtract 26 from the index\n    if c_index\
    \ > 26 then\n      c_index = c_index - 26\n    end\n    -- if the character index\
    \ is greater than 26 then subtract 13 from the index\n    if c_index > 26 then\n\
    \      c_index = c_index - 13\n    end\n  -- if the character is at the end of\
    \ the alphabet\n  elseif c_index == 26 then\n    -- rotate the character index\
    \ by multiplying by 2\n    c_index = c_index * 2\n    -- if the character index\
    \ is greater than 26 then subtract 26 from the index\n    if c_index > 26 then\n\
    \      c_index = c_index - 26\n    end\n    -- if the character index is greater\
    \ than 26 then subtract 13 from the index\n    if c_index > 26 then\n      c_index\
    \ = c_index - 13\n    end\n  -- for any other character\n  else\n    -- rotate\
    \ the character index by multiplying by 2\n    c_index = c_index * 2\n    -- if\
    \ the character index is greater than 26 then subtract 26 from the index\n   \
    \ if c_index > 26 then\n      c_index = c_index - 26\n    end\n  end\n  -- return\
    \ the encrypted letter\n  return string.sub(alphabet, c_index, c_index) .. encrypt(string.sub(s,\
    \ 2))\nend", "  return s\nend", "  -- s is the input string\n  local new_string\
    \ = ''\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  for i = 1, string.len(s)\
    \ do\n    local letter = string.sub(s, i, i)\n    local index = string.find(alphabet,\
    \ letter)\n    local new_index = index + (2 * 2)\n    if new_index > 26 then\n\
    \      new_index = new_index - 26\n    end\n    local new_letter = string.sub(alphabet,\
    \ new_index, new_index)\n    new_string = new_string .. new_letter\n  end\n  return\
    \ new_string\nend", "  s = s:lower()\n  local new_str = ''\n  for i = 1, s:len()\
    \ do\n    local char = s:sub(i, i)\n    local pos = string.find(alphabet, char)\n\
    \    pos = pos + offset\n    if pos > alphabet:len() then\n      pos = pos - alphabet:len()\n\
    \    end\n    new_str = new_str .. alphabet:sub(pos, pos)\n  end\n  return new_str\n\
    end", "    local abc = 'abcdefghijklmnopqrstuvwxyz'\n    local res = ''\n    for\
    \ i = 1, s:len() do\n        local l = s:sub(i, i)\n        local idx = abc:find(l)\n\
    \        local newidx = (idx+4)\n        local newl = abc:sub(newidx, newidx)\n\
    \        res = res .. newl\n    end\n    return res\nend", "\t-- Set up a loop\
    \ that will run through each index of the string.\n\tfor i = 1, #s do\n\t\t--\
    \ Store the value of the character in the string at i.\n\t\tlocal currentChar\
    \ = s:sub(i, i)\n\t\t-- Create a variable to store the value of the character\
    \ after it\n\t\t-- has been encrypted.\n\t\tlocal encryptedChar = ''\n\t\t-- Create\
    \ a variable to keep track of the character's index in the\n\t\t-- encrypted string.\n\
    \t\tlocal newIndex = 0\n\t\t-- Check if the character is a letter.\n\t\tif string.find(currentChar,\
    \ '[a-zA-Z]') then\n\t\t\t-- Check if the character is a lowercase letter.\n\t\
    \t\tif string.find(currentChar, '[a-z]') then\n\t\t\t\t-- Store the index of the\
    \ character in the alphabet string.\n\t\t\t\tlocal index = string.find(alphabet,\
    \ currentChar)\n\t\t\t\t-- Check if the index of the current character is greater\
    \ than\n\t\t\t\t-- the index of the last character in the alphabet.\n\t\t\t\t\
    if index > #alphabet - 1 then\n\t\t\t\t\t-- Set the index to the index of the\
    \ current character\n\t\t\t\t\t-- minus the index of the last character in the\
    \ alphabet.\n\t\t\t\t\tnewIndex = index - #alphabet\n\t\t\t\t\t-- Add one to the\
    \ new index.\n\t\t\t\t\tnewIndex = newIndex + 1\n\t\t\t\t\t-- Check if the new\
    \ index is greater than the index of the\n\t\t\t\t\t-- second to last character\
    \ in the alphabet.\n\t\t\t\t\tif newIndex > #alphabet - 1 then\n\t\t\t\t\t\t--\
    \ Set the new index to the new index minus the index\n\t\t\t\t\t\t-- of the second\
    \ to last character in the alphabet.\n\t\t\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\t\t\t\t-- Add one to the new index.\n\t\t\t\t\t\tnewIndex = newIndex + 1\n\
    \t\t\t\t\tend\n\t\t\t\t-- Check if the index of the current character is greater\
    \ than\n\t\t\t\t-- the index of", "    local ret = {}\n    local function encryptEach(ch)\n\
    \        -- add 97 for 'a' based index (97 is equivalent to ascii 'a')\n     \
    \   local index = ch:byte() + 97\n        local shifted = index - 2\n        local\
    \ numShift = 2\n        -- check if index is past the end of the alphabet\n  \
    \      if shifted < 1 then\n            numShift = shifted + 26\n        end\n\
    \        return string.char(index + numShift)\n    end\n    return table.concat(table.map(s,\
    \ encryptEach))\nend", "    -- YOUR CODE GOES HERE\n    local alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local result = \"\"\n    for i = 1, #s do\n        local index = alpha:find(s:sub(i,i))\n\
    \        result = result .. alpha:sub((index+2*2)%26+1,(index+2*2)%26+1)\n   \
    \ end\n    return result\nend", "    local res = {}\n    for i=1, #s do\n    \
    \    local a = s:sub(i,i)\n        local x = string.byte(a)\n        local b =\
    \ ''\n        if (x == string.byte('z')) then\n            b = 'b'\n        elseif\
    \ (x == string.byte('y')) then\n            b = 'a'\n        else\n          \
    \  b = string.char(x+2)\n        end\n        table.insert(res, b)\n    end\n\
    \    return table.concat(res)\nend", "  -- Write your code here\nend", "    local\
    \ alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local result = ''\n    for i = 1, #s do\n        local index = 1\n      \
    \  while s:sub(i,i) ~= alphabet[index] do\n            index = index + 1\n   \
    \     end\n        if s:sub(i,i) == 'x' then\n            result = result .. 'a'\n\
    \        elseif s:sub(i,i) == 'y' then\n            result = result .. 'b'\n \
    \       elseif s:sub(i,i) == 'z' then\n            result = result .. 'c'\n  \
    \      else\n            result = result .. alphabet[index + 2]\n        end\n\
    \    end\n    return result\nend", "  -- Insert your code here\n  return \"\"\n\
    end", "    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        local b = math.floor(c:byte() / 2)\n        local a = string.char(b\
    \ + 96)\n        result = result .. a\n    end\n    return result\nend", "   \
    \ local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local s = s:lower()\n \
    \   local index = 0\n    local e = \"\"\n    for i = 1, string.len(s) do\n   \
    \     index = string.find(alphabet, string.sub(s, i, i))\n        e = e .. string.sub(alphabet,\
    \ index + 2 * 2, index + 2 * 2)\n    end\n    return e\nend", "    -- validate\
    \ input\n    if not (type(s) == 'string') then\n        error(\"encrypt: expected\
    \ string\")\n    end\n    -- Get a local reference to the alphabet string.\n \
    \   local alphabet = string.lower(string.char(97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122))\n    -- Get the character position of the first character in\
    \ the string.\n    local ch_pos = string.byte(string.sub(s, 1, 1)) - 97\n    --\
    \ Get the first part of the alphabet\n    local first_chars = string.sub(alphabet,\
    \ 1, ch_pos)\n    -- Get the second part of the alphabet.\n    local second_chars\
    \ = string.sub(alphabet, ch_pos + 1, 26)\n    -- Get the character position of\
    \ the second character in the string.\n    local ch_pos2 = string.byte(string.sub(s,\
    \ 2, 2)) - 97\n    -- Rotate the alphabet string.\n    local rotated_alphabet\
    \ = second_chars .. first_chars\n    -- Return the encrypted string\n    return\
    \ string.sub(rotated_alphabet, ch_pos + 1, ch_pos + 1) .. string.sub(rotated_alphabet,\
    \ ch_pos2 + 1, ch_pos2 + 1)\nend", "    --[[\n    local e = ''\n    for i = 1,\
    \ #s do\n        local p = string.byte(s, i)\n        local e2 = p + 2 * 2\n \
    \       if e2 > 122 then\n            e2 = e2 - 26\n        end\n        e = e\
    \ .. string.char(e2)\n    end\n    return e\n    --]]\n    return string.char(string.byte(s)\
    \ + 2 * 2)\nend", "\tlocal s2 = \"\"\n\tfor i = 1, #s do\n\t\ts2 = s2 .. string.char(string.byte(s,\
    \ i)+4)\n\tend\n\treturn s2\nend", "  local function rot(n)\n    if(n >= 90) then\n\
    \      return n - 90 + 65\n    elseif(n >= 65) then\n      return n + 2\n    elseif(n\
    \ >= 122) then\n      return n - 122 + 97\n    elseif(n >= 97) then\n      return\
    \ n + 2\n    else\n      return n\n    end\n  end\n  local output = ''\n  for\
    \ i=1, #s do\n    local a = string.byte(s, i)\n    output = output .. string.char(rot(a))\n\
    \  end\n  return output\nend", "  local list = split(s, \"\")\n  local res = {}\n\
    \  for i = 1, #list do\n    if (string.byte(list[i]) < string.byte(\"a\")) then\n\
    \      table.insert(res, list[i])\n    else\n      table.insert(res, string.char(string.byte(list[i])\
    \ + 4))\n    end\n  end\n  return table.concat(res)\nend", "  local encrypted_string\
    \ = ''\n  for i = 1, string.len(s) do\n    encrypted_string = encrypted_string\
    \ ..\n                        string.char(string.byte(s, i) + 4)\n  end\n  return\
    \ encrypted_string\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = {}\n    -- loop through string\n    for i = 1, #s do\n\
    \        -- find the character in the alphabet\n        local position = string.find(alphabet,\
    \ s:sub(i, i))\n        -- add the encrypted character to encrypted\n        encrypted[i]\
    \ = alphabet:sub(position + 2, position + 2)\n    end\n    -- return the encrypted\
    \ string\n    return table.concat(encrypted)\nend", "    -- Add code here\n  \
    \  return s\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ s:gsub(\".\", function(c)\n        local i = alphabet:find(c)\n        return\
    \ i and alphabet:sub(i+4, i+4) or c\n    end)\nend", "    local newStr = ''\n\
    \    for i = 1, #s do\n        local letter = s:sub(i, i)\n        local x = string.byte(letter)\
    \ + 2 * 2\n        newStr = newStr .. string.char(x)\n    end\n    return newStr\n\
    end", "  -- We will begin by creating an alphabet table that is the values of\
    \ \n  -- the letters a to z. This will be used when shifting all the letters\n\
    \  -- in the string argument.\n  local alphabet = {}\n  for i = 1, 26 do\n   \
    \ alphabet[i] = string.char(i + 96)\n  end\n  -- We will create a new table to\
    \ store the new positions of all the \n  -- letters of the alphabet.\n  local\
    \ new_alphabet = {}\n  -- Using a modulus function, we will assign a new value\
    \ for each letter \n  -- in the alphabet table by shifting each letter down by\
    \ two.\n  for i = 1, 26 do\n    new_alphabet[i] = alphabet[(i - 2) % 26 + 1]\n\
    \  end\n  -- Next, we will loop through the letters of the string argument by\
    \ looping \n  -- through each byte of the string argument. The byte will be used\
    \ to get \n  -- the corresponding index of the letter in the alphabet table. Once\
    \ the \n  -- index is found, we will get the corresponding letter in the new alphabet\n\
    \  -- table and append it to the string to be returned.\n  local encrypted_str\
    \ = ''\n  for i = 1, #s do\n    local char = string.sub(s, i, i)\n    for j =\
    \ 1, 26 do\n      if char == alphabet[j] then\n        encrypted_str = encrypted_str\
    \ .. new_alphabet[j]\n      end\n    end\n  end\n  return encrypted_str\nend",
  end, "    local x = ''\n    for i=1,string.len(s) do\n        x = x .. string.char(string.byte(s,i)\
    \ + 2*2)\n    end\n    return x\nend", "\tlocal ret = ''\n\tfor i = 1, #s do\n\
    \t\tlocal c = s:sub(i, i)\n\t\tlocal a = c:byte()\n\t\tif a > 122 or a < 65 then\n\
    \t\t\tret = ret .. c\n\t\telseif (a + 4) > 122 then\n\t\t\ta = a + 4 - 26\n\t\t\
    \tret = ret .. string.char(a)\n\t\telse\n\t\t\ta = a + 4\n\t\t\tret = ret .. string.char(a)\n\
    \t\tend\n\tend\n\treturn ret\nend", "    local alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local encryptedString = ''\n    for i = 1, #s do\n        local currValue\
    \ = string.byte(s, i)\n        local currOffset = currValue - string.byte('a')\n\
    \        local nextOffset = (currOffset + 2) * 2\n        local nextChar = alphabet[nextOffset]\n\
    \        encryptedString = encryptedString .. nextChar\n    end\n    return encryptedString\n\
    end", "  local letters = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \  local char = {}\n  for i = 1, #s do\n    for j = 1, #letters do\n      if s:sub(i,i)\
    \ == letters[j] then\n        if j + 2 < (#letters + 1) then\n          char[i]\
    \ = letters[j + 2]\n        elseif j + 2 == (#letters + 1) then\n          char[i]\
    \ = letters[1]\n        elseif j + 2 == (#letters + 2) then\n          char[i]\
    \ = letters[2]\n        end\n      end\n    end\n  end\n  local result = ''\n\
    \  for i = 1, #char do\n    result = result .. char[i]\n  end\n  return result\n\
    end", "  local tbl = {}\n  local encryptedString = ''\n  local charCount = 0\n\
    \  for i = 1, #s do\n    tbl[i] = string.byte(s, i)\n  end\n  for i = 1, #tbl\
    \ do\n    if tbl[i] == 122 then\n      tbl[i] = 97\n    elseif tbl[i] == 90 then\n\
    \      tbl[i] = 65\n    else\n      tbl[i] = tbl[i] + 2\n    end\n    charCount\
    \ = charCount + 1\n    encryptedString = encryptedString .. string.char(tbl[i])\n\
    \  end\n  return encryptedString\nend", "  local ret = ''\n  for i = 1, #s do\n\
    \    local c = s:sub(i, i)\n    local p = string.byte(c)\n    local n = p\n  \
    \  if p >= 97 and p <= 109 then\n      n = p + 2\n    elseif p >= 110 and p <=\
    \ 122 then\n      n = p - 24\n    end\n    ret = ret .. string.char(n)\n  end\n\
    \  return ret\nend", end, "\tlocal alph = {a = 1, b = 2, c = 3, d = 4, e = 5,\
    \ f = 6, g = 7, h = 8, i = 9, j = 10, k = 11, l = 12, m = 13, n = 14, o = 15,\
    \ p = 16, q = 17, r = 18, s = 19, t = 20, u = 21, v = 22, w = 23, x = 24, y =\
    \ 25, z = 26}\n\tlocal str = {}\n\tlocal res = ''\n\tfor i = 1, #s do\n\t\tstr[i]\
    \ = string.lower(s:sub(i,i))\n\tend\n\tfor k, v in pairs(str) do\n\t\tres = res\
    \ .. alph[v]\n\tend\n\treturn res\nend", "\nend", "\tlocal s = str_to_chars(s)\n\
    \tlocal encrypted = {}\n\tfor i, v in ipairs(s) do\n\t\tencrypted[i] = chars[mod(chars_reversed[v]\
    \ + ((i-1)*2) + 1, 52)]\n\tend\n\treturn table.concat(encrypted)\nend", "\tlocal\
    \ c = s:byte(1, #s)\n\tlocal s = \"\"\n\tfor i = 1, #c do\n\t\tif c[i] > 109 then\n\
    \t\t\ts = s .. string.char(97 + c[i] - 110)\n\t\telseif c[i] > 101 then\n\t\t\t\
    s = s .. string.char(c[i] + 2)\n\t\telseif c[i] > 64 then\n\t\t\ts = s .. string.char(65\
    \ + c[i] - 67)\n\t\telse\n\t\t\ts = s .. string.char(c[i])\n\t\tend\n\tend\n\t\
    return s\nend", "    local charCount = string.len(s)\n    local encryptedString\
    \ = \"\"\n    for i = 1, charCount do\n        local char = string.sub(s, i, i)\n\
    \        encryptedString = encryptedString .. encryptedLetter(char)\n    end\n\
    \    return encryptedString\nend", "\ts = tostring(s)\n\tlocal t = string.sub(s,1,1)\n\
    \tfor i = 2,string.len(s) do\n\t\tlocal x = string.sub(s,i,i)\n\t\tx = string.byte(x)\n\
    \t\tif (x > 69) then\n\t\t\tx = x - 2\n\t\telseif (x == 69) then\n\t\t\tx = 122\n\
    \t\telseif (x == 68) then\n\t\t\tx = 121\n\t\telse\n\t\t\tx = x + 26 - 2\n\t\t\
    end\n\t\tx = string.char(x)\n\t\tt = t .. x\n\tend\n\treturn t\nend", "    local\
    \ t = {}\n    for i=1,#s do\n        if(s:sub(i,i)==' ') then\n            t[i]\
    \ = s:sub(i,i)\n        else\n            local c = s:sub(i,i)\n            c\
    \ = c:byte() - 2*2\n            if(c<97) then\n                c = c + 26\n  \
    \          end\n            t[i] = string.char(c)\n        end\n    end\n    return\
    \ table.concat(t)\nend", "  local encrypt_str = {}\n  local encrypt_table = {}\n\
    \  local encrypt_num = {}\n  local encrypt_char\n  local ascii_num\n  local new_num\n\
    \  local new_ascii_num\n  local new_char\n  local i = 1\n  for char in string.gmatch(s,\
    \ \".\") do\n    encrypt_str[i] = char\n    i = i + 1\n  end\n  for i = 1, #encrypt_str\
    \ do\n    encrypt_table[i] = encrypt_str[i]\n    encrypt_num[i] = string.byte(encrypt_table[i])\n\
    \    ascii_num = encrypt_num[i]\n    if ascii_num == 122 then\n      new_num =\
    \ 97\n    elseif ascii_num == 121 then\n      new_num = 96\n    elseif ascii_num\
    \ == 90 then\n      new_num = 65\n    elseif ascii_num == 89 then\n      new_num\
    \ = 64\n    else\n      new_num = ascii_num + 2\n    end\n    new_ascii_num =\
    \ new_num\n    new_char = string.char(new_ascii_num)\n    encrypt_char = new_char\n\
    \    encrypt_str[i] = encrypt_char\n  end\n  return table.concat(encrypt_str)\n\
    end", "    local tmp = \"\"\n    for i = 1, #s do\n        local asc = string.byte(s,\
    \ i)\n        asc = asc + (#s * 2)\n        tmp = tmp .. string.char(asc)\n  \
    \  end\n    return tmp\nend", "\tlocal out, p = \"\"\n\tfor i = 1, #s do\n\t\t\
    p = string.byte(s, i)\n\t\tif p >= 65 and p <= 90 then\n\t\t\tp = p + 2\n\t\t\t\
    if p > 90 then\n\t\t\t\tp = p - 26\n\t\t\tend\n\t\telseif p >= 97 and p <= 122\
    \ then\n\t\t\tp = p + 2\n\t\t\tif p > 122 then\n\t\t\t\tp = p - 26\n\t\t\tend\n\
    \t\tend\n\t\tout = out .. string.char(p)\n\tend\n\treturn out\nend", "    return\
    \ nil\nend", "  local res = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    local n = code[c]\n    if n ~= nil then\n      n = n + 2*2\n      if n >\
    \ 26 then\n        n = n - 26\n      end\n      res = res .. table.concat(num2alpha,\
    \ '', n, n)\n    else\n      res = res .. c\n    end\n  end\n  return res\nend",
  "    local len = string.len(s)\n    local result = \"\"\n    for i = 1, len do\n\
    \        local char = string.byte(s, i)\n        local new_char = char + 2 * 2\n\
    \        if new_char > 122 then\n            new_char = new_char - 26\n      \
    \  end\n        result = result .. string.char(new_char)\n    end\n    return\
    \ result\nend", "\nend", "  -- Implement the function here and return result.\n\
    end", "  local str_arr = {}\n  local encrypted_str = ''\n  for i = 1, #s do\n\
    \    local c = s:sub(i, i)\n    str_arr[i] = c\n  end\n  for j = 1, #str_arr do\n\
    \    local code = str_arr[j]:byte()\n    if (code >= 97 and code <= 121) then\n\
    \      encrypted_str = encrypted_str .. string.char(code + 2)\n    elseif (code\
    \ == 122) then\n      encrypted_str = encrypted_str .. string.char(code - 24)\n\
    \    elseif (code == 123) then\n      encrypted_str = encrypted_str .. string.char(code\
    \ - 25)\n    elseif (code >= 65 and code <= 89) then\n      encrypted_str = encrypted_str\
    \ .. string.char(code + 2)\n    elseif (code == 90) then\n      encrypted_str\
    \ = encrypted_str .. string.char(code - 24)\n    elseif (code == 91) then\n  \
    \    encrypted_str = encrypted_str .. string.char(code - 25)\n    else\n     \
    \ encrypted_str = encrypted_str .. string.char(code)\n    end\n  end\n  return\
    \ encrypted_str\nend", "    local ascii = {97, 98, 99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122}\n    local ascii2 = {99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\
    \ 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 97, 98}\n\
    \    local out = \"\"\n    for i = 1, s:len() do\n        for j = 1, 26 do\n \
    \           if s:byte(i) == ascii[j] then\n                out = out .. string.char(ascii2[j])\n\
    \            end\n        end\n    end\n    return out\nend", "  -- your code\
    \ here\nend", "  return 'todo'\nend", "  local result = \"\"\n  for i = 1, #s\
    \ do\n    local char = s:sub(i, i)\n    if char == 'z' then\n      result = result\
    \ .. 'b'\n    elseif char == 'y' then\n      result = result .. 'a'\n    else\n\
    \      local ascii = string.byte(char)\n      local code = string.char(ascii +\
    \ 2 * 2)\n      result = result .. code\n    end\n  end\n  return result\nend",
  "    local en = ''\n    for i = 1, string.len(s) do\n        local n = string.byte(s,\
    \ i) + 4\n        if n > 122 then\n            n = n - 26\n        end\n     \
    \   en = en .. string.char(n)\n    end\n    return en\nend", "  local answer =\
    \ ''\n  for i = 1, string.len(s) do\n    -- get the letter\n    local letter =\
    \ string.sub(s, i, i)\n    -- get the index of the letter\n    local index = string.find(alphabet,\
    \ letter)\n    -- get the index of the next two letters\n    local index = (index\
    \ + 2) * 2\n    -- if that index is greater than the length of the alphabet, minus\
    \ 26\n    if index > 26 then\n      index = index - 26\n    end\n    -- get the\
    \ new letter\n    local newLetter = string.sub(alphabet, index, index)\n    --\
    \ add the new letter to the answer\n    answer = answer .. newLetter\n  end\n\
    \  return answer\nend", "  local t = {}\n  for i = 1, #s do\n    table.insert(t,\
    \ string.byte(s, i))\n  end\n  for i = 1, #t do\n    t[i] = t[i] + 2 * 2\n  end\n\
    \  local s = ''\n  for i = 1, #t do\n    s = s .. string.char(t[i])\n  end\n \
    \ return s\nend", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local encrypted_alphabet\
    \ = 'cdefghijklmnopqrstuvwxyzab'\n  local lower_case_s = s:lower()\n  local encrypted_string\
    \ = ''\n  for i = 1, #lower_case_s do\n    local old_char = lower_case_s:sub(i,\
    \ i)\n    local old_char_index = alphabet:find(old_char)\n    local new_char =\
    \ encrypted_alphabet:sub(old_char_index, old_char_index)\n    encrypted_string\
    \ = encrypted_string .. new_char\n  end\n  return encrypted_string\nend", "  --\
    \ TODO\nend", "    -- write your solution here\n    local s_encrypt = \"\"\n \
    \   for i = 1, #s do\n        local letter = string.byte(s, i)\n        s_encrypt\
    \ = s_encrypt .. string.char(letter + 2 * 2)\n    end\n    return s_encrypt\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
