name: HumanEval_147_get_max_triples
language: lua
prompt: "-- You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i < j\
  \ < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- Input:\
  \ n = 5\n-- Output: 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The only valid\
  \ triple is (1, 7, 13).\nlocal function get_max_triples(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n\
  \    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n  \
  \  lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n\
    \    end\n    local count = 0\n    for i = 1, n do\n        for j = i + 1, n do\n\
    \            for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 then\n                    count = count + 1\n                end\n    \
    \        end\n        end\n    end\n    return count\nend", "    local a = {}\n\
    \    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local count =\
    \ 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for k = j +\
    \ 1, n do\n                if a[i] + a[j] + a[k] % 3 == 0 then\n             \
    \       count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    local a = {}\n    for i = 1, n do\n   \
    \     a[i] = i * i - i + 1\n    end\n    local function check(x, y, z)\n     \
    \   return (x + y + z) % 3 == 0\n    end\n    local function get_count(t)\n  \
    \      local count = 0\n        for i = 1, #t - 2 do\n            for j = i +\
    \ 1, #t - 1 do\n                for k = j + 1, #t do\n                    if check(t[i],\
    \ t[j], t[k]) then\n                        count = count + 1\n              \
    \      end\n                end\n            end\n        end\n        return\
    \ count\n    end\n    return get_count(a)\nend", "\tlocal triples = 0\n\tfor i\
    \ = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\
    \tif (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\t\t\t\t\t\
    triples = triples + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn triples\n\
    end", "\tlocal index\n\tlocal total = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i\
    \ + 1, n - 1 do\n\t\t\tindex = (i * i - i + 1) + (j * j - j + 1)\n\t\t\tif index\
    \ % 3 == 0 then\n\t\t\t\ttotal = total + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ total\nend", "    local primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 }\n    local m = n\n    local\
    \ triples = {}\n    local primes_count = #primes\n    for i = 1, primes_count\
    \ do\n        local prime = primes[i]\n        while m % prime == 0 do\n     \
    \       triples[#triples + 1] = prime\n            m = m / prime\n        end\n\
    \    end\n    local result = 0\n    local tn = #triples\n    for i = 1, tn do\n\
    \        for j = i + 1, tn do\n            for k = j + 1, tn do\n            \
    \    if triples[i] + triples[j] + triples[k] == n then\n                    result\
    \ = result + 1\n                end\n            end\n        end\n    end\n \
    \   return result\nend", "    local a = {}\n    for i = 1, n do\n        a[i]\
    \ = i * i - i + 1\n    end\n    local x, y, z = 0, 0, 0\n    local res = 0\n \
    \   for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k =\
    \ j + 1, n do\n                x, y, z = a[i], a[j], a[k]\n                if\
    \ (x + y + z) % 3 == 0 then\n                    res = res + 1\n             \
    \   end\n            end\n        end\n    end\n    return res\nend", "    local\
    \ max = 0\n    local triple = 0\n    local i = 1\n    local j = 2\n    local k\
    \ = 3\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n \
    \   end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n          \
    \  for k = j + 1, n do\n                if a[i] + a[j] + a[k] % 3 == 0 then\n\
    \                    triple = triple + 1\n                end\n            end\n\
    \        end\n    end\n    return triple\nend", "    local a = {}\n    for i =\
    \ 1, n do\n        a[i] = i * i - i + 1\n    end\n    local counter = 0\n    for\
    \ i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1,\
    \ n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n              \
    \      counter = counter + 1\n                end\n            end\n        end\n\
    \    end\n    return counter\nend", "  local nn = n * n\n  local cnt = 0\n  for\
    \ i = 1, n do\n    for j = i + 1, n do\n      for k = j + 1, n do\n        local\
    \ sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        if sum % 3 == 0\
    \ then\n          cnt = cnt + 1\n        end\n      end\n    end\n  end\n  return\
    \ cnt\nend", "    local res = 0\n    local a = {}\n    for i = 1, n do\n     \
    \   a[i] = i * i - i + 1\n    end\n    for i = 1, n - 2 do\n        for j = i\
    \ + 1, n - 1 do\n            for k = j + 1, n do\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 then\n                    res = res + 1\n                end\n\
    \            end\n        end\n    end\n    return res\nend", "\tlocal value =\
    \ 1\n\tfor i = 1, n-2 do\n\t\tfor j = i+1, n-1 do\n\t\t\tfor k = j+1, n do\n\t\
    \t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\tvalue = value + 1\n\t\t\
    \t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn value\nend", "\tlocal count = 0\n\
    \tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\t\
    if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 then\n\t\t\t\
    \t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n \
    \   end\n    local count = 0\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 then\n                    count = count + 1\n               \
    \ end\n            end\n        end\n    end\n    return count\nend", "    local\
    \ triples = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n    \
    \        for k = j + 1, n do\n                if ((i * i - i + 1) + (j * j - j\
    \ + 1) + (k * k - k + 1)) % 3 == 0 then\n                    triples = triples\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ triples\nend", "    local p = 1\n    local c = 1\n    local a = 0\n    for i\
    \ = 1, n do\n        c = i * i - i + 1\n        if c % 3 == 0 then\n         \
    \   a = a + p\n        end\n        p = p + 1\n    end\n    return a\nend", " \
    \   local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    -- for _, v in ipairs(a) do\n    --     print(v)\n    -- end\n    local cnt\
    \ = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for\
    \ k = j + 1, n do\n                local sum = a[i] + a[j] + a[k]\n          \
    \      if sum % 3 == 0 then\n                    -- print(a[i], a[j], a[k])\n\
    \                    cnt = cnt + 1\n                end\n            end\n   \
    \     end\n    end\n    return cnt\nend", "    local squares = {}\n    local count\
    \ = 0\n    for i = 1, n, 1 do\n        table.insert(squares, i * i - i + 1)\n\
    \    end\n    for i = 1, n, 1 do\n        for j = i + 1, n, 1 do\n           \
    \ for k = j + 1, n, 1 do\n                if ((squares[i] + squares[j] + squares[k])\
    \ % 3 == 0) then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    local cnt\
    \ = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for\
    \ k = j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0 then\n                    cnt = cnt + 1\n                end\n\
    \            end\n        end\n    end\n    return cnt\nend", "    local result\
    \ = 0\n    local sum\n    local a = {}\n    local i, j, k\n    for i = 1, n do\n\
    \        a[i] = i * i - i + 1\n    end\n    for i = 1, n - 2 do\n        for j\
    \ = i + 1, n - 1 do\n            for k = j + 1, n do\n                sum = a[i]\
    \ + a[j] + a[k]\n                if (sum % 3 == 0) then\n                    result\
    \ = result + 1\n                end\n            end\n        end\n    end\n \
    \   return result\nend", "  local a = {}\n  for i = 1, n do\n    a[i] = i * i\
    \ - i + 1\n  end\n  local result = 0\n  for i = 1, n - 2 do\n    for j = i + 1,\
    \ n - 1 do\n      if (a[i] + a[j]) % 3 == 0 then\n        for k = j + 1, n do\n\
    \          if (a[i] + a[j] + a[k]) % 3 == 0 then\n            result = result\
    \ + 1\n          end\n        end\n      end\n    end\n  end\n  return result\n\
    end", "  local t = {}\n  for i = 1, n do\n    t[i] = i * i - i + 1\n  end\n  local\
    \ max = 0\n  for i = 1, n do\n    for j = i + 1, n do\n      for k = j + 1, n\
    \ do\n        if (t[i] + t[j] + t[k]) % 3 == 0 then\n          max = max + 1\n\
    \        end\n      end\n    end\n  end\n  return max\nend", "    if n < 3 then\n\
    \        return 0\n    end\n    local a = {}\n    local s = 0\n    for i = 1,\
    \ n do\n        a[i] = i * i - i + 1\n        s = s + a[i]\n    end\n    local\
    \ c = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n          \
    \  for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    c = c + 1\n                end\n            end\n       \
    \ end\n    end\n    return c\nend", "    local index = 0\n    local sum = 0\n\
    \    local a = {}\n    for i = 1, n do\n        sum = i * i - i + 1\n        if\
    \ sum % 3 == 0 then\n            index = index + 1\n            a[index] = sum\n\
    \        end\n    end\n    local count = 0\n    for i = 1, index - 2 do\n    \
    \    for j = i + 1, index - 1 do\n            for k = j + 1, index do\n      \
    \          if a[i] + a[j] + a[k] == 0 then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i -\
    \ i + 1\n    end\n    local count = 0\n    for i = 1, n do\n        for j = i\
    \ + 1, n do\n            for k = j + 1, n do\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 then\n                    count = count + 1\n             \
    \   end\n            end\n        end\n    end\n    return count\nend", "  local\
    \ a = { 1 }\n  for i = 2, n do\n    a[i] = i * i - i + 1\n  end\n  local count\
    \ = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1,\
    \ n do\n        if (a[i] + a[j] + a[k]) % 3 == 0 then\n          count = count\
    \ + 1\n        end\n      end\n    end\n  end\n  return count\nend", "\tif n <\
    \ 3 then\n\t\treturn 0\n\tend\n\t-- the index 0 and n+1 are placeholder to make\
    \ the comparison easier\n\tlocal a = {1, -1, -1}\n\tlocal cnt = 0\n\tlocal ptr\
    \ = 1\n\tfor i = 2, n do\n\t\ta[i+1] = i * i - i + 1\n\t\twhile a[ptr] + a[ptr+1]\
    \ + a[i+1] < 3 do\n\t\t\tptr = ptr + 1\n\t\tend\n\t\twhile a[ptr] + a[ptr+1] +\
    \ a[i+1] > 3 do\n\t\t\tptr = ptr - 1\n\t\tend\n\t\tcnt = cnt + ptr\n\tend\n\t\
    return cnt\nend", "  local t = {};\n  for i = 1, n do\n    t[i] = i * i - i +\
    \ 1;\n  end\n  local count = 0;\n  for i = 1, n - 2 do\n    for j = i + 1, n -\
    \ 1 do\n      for k = j + 1, n do\n        if (t[i] + t[j] + t[k]) % 3 == 0 then\n\
    \          count = count + 1;\n        end\n      end\n    end\n  end\n  return\
    \ count;\nend", "  local ans = 0\n  local sum = 0\n  local a = {}\n  for i = 1,\
    \ n do\n    a[i] = i * i - i + 1\n    sum = sum + a[i]\n  end\n  if sum % 3 ==\
    \ 0 then\n    ans = ans + 1\n  end\n  for i = 1, n do\n    for j = i + 1, n do\n\
    \      if sum - a[i] - a[j] % 3 == 0 then\n        ans = ans + 1\n      end\n\
    \    end\n  end\n  return ans\nend", "    local c = 0\n    for i = 1, n - 2 do\n\
    \        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n          \
    \      if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n    \
    \                c = c + 1\n                end\n            end\n        end\n\
    \    end\n    return c\nend", "    local sum = 0\n    local i = 0\n    while i\
    \ < n do\n        local j = i + 1\n        while j < n do\n            local k\
    \ = j + 1\n            while k < n do\n                local a_i = i * i - i +\
    \ 1\n                local a_j = j * j - j + 1\n                local a_k = k\
    \ * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0 then\n          \
    \          sum = sum + 1\n                end\n                k = k + 1\n   \
    \         end\n            j = j + 1\n        end\n        i = i + 1\n    end\n\
    \    return sum\nend", "\tlocal res = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i\
    \ + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif i + j + k == 3 then\n\t\
    \t\t\t\tres = res + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn res\n\
    end", "    local p, t, r, i, j, k, m\n    p = n * n - n + 1\n    t = {}\n    r\
    \ = 0\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    for i =\
    \ 1, n - 2 do\n        for j = i + 1, n - 1 do\n            m = t[i] + t[j]\n\
    \            if m % 3 == 0 then\n                m = m / 3\n                for\
    \ k = j + 1, n do\n                    if t[k] == m then\n                   \
    \     r = r + 1\n                        break\n                    end\n    \
    \            end\n            end\n        end\n    end\n    return r\nend", " \
    \   if n < 3 then\n        return 0\n    end\n    local a = {}\n    for i = 1,\
    \ n do\n        a[i] = i * i - i + 1\n    end\n    local result = 0\n    for i\
    \ = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n\
    \ do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n                \
    \    result = result + 1\n                end\n            end\n        end\n\
    \    end\n    return result\nend\nreturn get_max_triples", "\tlocal a = {}\n\t\
    local cnt = 0\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i = 1,\
    \ n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif\
    \ (a[i] + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn cnt\nend", "\tlocal a = {}\n\tfor i = 1, n do\n\
    \t\ta[i] = i * i - i + 1\n\tend\n\tlocal pairs = {}\n\tlocal count = 0\n\tfor\
    \ i = 1, n - 1 do\n\t\tfor j = i + 1, n do\n\t\t\tlocal sum = a[i] + a[j]\n\t\t\
    \tif sum % 3 == 0 then\n\t\t\t\tcount = count + 1\n\t\t\t\tpairs[count] = { i,\
    \ j }\n\t\t\tend\n\t\tend\n\tend\n\t--\n\tlocal triples = {}\n\tfor i = 1, count\
    \ do\n\t\tlocal i1, i2 = pairs[i][1], pairs[i][2]\n\t\tfor j = i + 1, count do\n\
    \t\t\tlocal j1, j2 = pairs[j][1], pairs[j][2]\n\t\t\tif (i1 < j1 and i2 < j2)\
    \ or (i1 < j2 and i2 < j1) then\n\t\t\t\tcount = count + 1\n\t\t\t\ttriples[count]\
    \ = { i1, i2, pairs[j][1], pairs[j][2] }\n\t\t\tend\n\t\tend\n\tend\n\t--\n\t\
    return count\nend", "    -- Write your code here\n    -- Remember to return the\
    \ result.\n    local mod3 = n % 3\n    local triple_num = n // 3\n    if mod3\
    \ == 1 then\n        triple_num = triple_num * 2\n    elseif mod3 == 2 then\n\
    \        triple_num = triple_num * 2 + 1\n    end\n    return triple_num\nend",
  "    local cnt = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n \
    \           local sum_ij = i * i - i + 1 + j * j - j + 1\n            for k =\
    \ j + 1, n do\n                local sum_ijk = sum_ij + k * k - k + 1\n      \
    \          if sum_ijk % 3 == 0 then\n                    cnt = cnt + 1\n     \
    \           end\n            end\n        end\n    end\n    return cnt\nend",
  "    local res = 0\n    for i = 1, n - 2 do\n        local x = i * i - i + 1\n \
    \       local s = n * n - n + 1\n        local c = n - i - 1\n        local d\
    \ = c * c - c + 1\n        local e = c * c - c + 1 - x\n        local f = math.floor((s\
    \ - d - e) / 3)\n        res = res + f\n    end\n    return res\nend", "    if\
    \ n < 3 then\n        return 0\n    end\n    local triples = 0\n    local ai =\
    \ 1\n    local aj = 2\n    local ak = 3\n    while ai < n do\n        while aj\
    \ < n do\n            while ak < n do\n                if (ai + aj + ak) % 3 ==\
    \ 0 then\n                    triples = triples + 1\n                end\n   \
    \             ak = ak + 1\n            end\n            aj = aj + 1\n        \
    \    ak = aj + 1\n        end\n        ai = ai + 1\n        aj = ai + 1\n    \
    \    ak = aj + 1\n    end\n    return triples\nend", "    -- Write your code here\n\
    \    local count = 0\n    for i = 1, n do\n        for j = i + 1, n do\n     \
    \       for k = j + 1, n do\n                if (((i*i - i + 1) + (j*j - j + 1)\
    \ + (k*k - k + 1)) % 3 == 0) then\n                    count = count + 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend",
  "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local sum = 0\n    for i = 1, n do\n        for j = i + 1, n do\n       \
    \     for k = j + 1, n do\n                local s = a[i] + a[j] + a[k]\n    \
    \            if s % 3 == 0 then\n                    sum = sum + 1\n         \
    \       end\n            end\n        end\n    end\n    return sum\nend", "  \
    \  local ans = 0\n    local i = 1\n    local j = 2\n    local k = 3\n    while\
    \ i < n do\n        while j < n do\n            while k < n do\n             \
    \   if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 then\n \
    \                   ans = ans + 1\n                end\n                k = k\
    \ + 1\n            end\n            j = j + 1\n            k = j + 1\n       \
    \ end\n        i = i + 1\n        j = i + 1\n        k = j + 1\n    end\n    return\
    \ ans\nend\nreturn get_max_triples", "  local res = 0\n  for i = 1, n - 2 do\n\
    \    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if ((i * i -\
    \ i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 then\n          res = res\
    \ + 1\n        end\n      end\n    end\n  end\n  return res\nend\nprint(get_max_triples(5))\n\
    print(get_max_triples(2000))", "\t-- Function body\nend", "\tlocal count = 0\n\
    \tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i =\
    \ 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\t\
    if (a[i] + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "    if n <= 0 then\n       \
    \ return 0\n    end\n    local tb = {}\n    for i = 1, n do\n        tb[i] = i\
    \ * i - i + 1\n    end\n    local sum_tb = {}\n    local result = 0\n    for i\
    \ = 1, n do\n        for j = i + 1, n do\n            local sum = tb[i] + tb[j]\n\
    \            if sum_tb[sum] then\n                result = result + #sum_tb[sum]\n\
    \            end\n            local tmp = sum_tb[tb[j]]\n            if tmp then\n\
    \                table.insert(tmp, i)\n            else\n                sum_tb[tb[j]]\
    \ = {i}\n            end\n        end\n    end\n    return result\nend", "   \
    \ local res = 0\n    local MOD = 3\n    local dp = {}\n    for i = 0, n - 1 do\n\
    \        dp[i] = {}\n        dp[i][0] = 1\n        dp[i][1] = 0\n        dp[i][2]\
    \ = 0\n    end\n    for i = 1, n - 1 do\n        for j = i - 1, 0, -1 do\n   \
    \         local val = i * i - i + 1\n            local m = val % MOD\n       \
    \     dp[i][0] = (dp[i][0] + dp[j][m]) % MOD\n            dp[i][1] = (dp[i][1]\
    \ + dp[j][(m + 1) % MOD]) % MOD\n            dp[i][2] = (dp[i][2] + dp[j][(m +\
    \ 2) % MOD]) % MOD\n        end\n        res = (res + dp[i][0]) % MOD\n    end\n\
    \    return res\nend", "    local res = 0\n    for i = 1, n - 2 do\n        local\
    \ a = i * i - i + 1\n        for j = i + 1, n - 1 do\n            local b = j\
    \ * j - j + 1\n            for k = j + 1, n do\n                local c = k *\
    \ k - k + 1\n                if (a + b + c) % 3 == 0 then\n                  \
    \  res = res + 1\n                end\n            end\n        end\n    end\n\
    \    return res\nend", "\tlocal count = 0\n\tfor i = 1, n - 2 do\n\t\tfor j =\
    \ i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "    local a = {}\n  \
    \  for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local result =\
    \ 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for\
    \ k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n   \
    \                 result = result + 1\n                end\n            end\n\
    \        end\n    end\n    return result\nend", "\tlocal max_triples = 0\n\tfor\
    \ i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\
    \t\tif ((i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1)) % 3 == 0 then\n\t\t\t\t\
    \tmax_triples = max_triples + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ max_triples\nend", "    local a = {}\n    for i = 1, n do\n        a[i] = i\
    \ * i - i + 1\n    end\n    local count = 0\n    for i = 1, n - 2 do\n       \
    \ for j = i + 1, n - 1 do\n            for k = j + 1, n do\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 then\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local total = 0\n    local remainders = {}\n    for i = 1, n do\n \
    \       local remainder = (i * i - i + 1) % 3\n        if not remainders[remainder]\
    \ then\n            remainders[remainder] = {[0] = 0, [1] = 0, [2] = 0}\n    \
    \    end\n        remainders[remainder][0] = remainders[remainder][0] + 1\n  \
    \  end\n    local total = 0\n    for i = 1, n do\n        local remainder = (i\
    \ * i - i + 1) % 3\n        local remainders_r = remainders[remainder]\n     \
    \   local remainders_rr = remainders[3 - remainder]\n        if i <= n - 2 then\n\
    \            local p = remainders_r[0] - 1 - i\n            local n = n - p\n\
    \            total = total + remainders_rr[remainder] * n\n        end\n    end\n\
    \    return total\nend", "    local k = n // 3\n    return k * (k + 1) // 2\n\
    end", "    local res = 0\n    local sum = {}\n    for i = 1, n - 2 do\n      \
    \  for j = i + 1, n - 1 do\n            local ai = i * i - i + 1\n           \
    \ local aj = j * j - j + 1\n            local ak = (i + j) * (i + j) - (i + j)\
    \ + 1\n            if ai < aj and aj < ak and (ai + aj + ak) % 3 == 0 then\n \
    \               res = res + 1\n            end\n        end\n    end\n    return\
    \ res\nend", "  -- TODO: implement this function.\nend", "    local m = math.floor(n\
    \ / 3)\n    local cnt = 0\n    for i = 1, m do\n        local v = 3 * i\n    \
    \    for j = i + 1, m do\n            for k = j + 1, m do\n                if\
    \ v == j + k then\n                    cnt = cnt + 1\n                end\n  \
    \          end\n        end\n    end\n    return cnt\nend", "    local res = 0\n\
    \    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k =\
    \ j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1) % 3 == 0 then\n                    res = res + 1\n                end\n \
    \           end\n        end\n    end\n    return res\nend", "    local res =\
    \ 0\n    local d = {}\n    local c = {}\n    for i = 1, n do\n        local v\
    \ = i * i - i + 1\n        local key = v % 3\n        d[i] = v\n        c[key]\
    \ = c[key] or {}\n        c[key][i] = true\n    end\n    for i = 1, n - 2 do\n\
    \        local v1 = d[i]\n        for j = i + 1, n - 1 do\n            local v2\
    \ = d[j]\n            for k = j + 1, n do\n                local v3 = d[k]\n \
    \               if v1 + v2 + v3 % 3 == 0 then\n                    local k1 =\
    \ j % 3\n                    local k2 = k % 3\n                    if c[k1] and\
    \ c[k2] and c[3 - k1 - k2] then\n                        res = res + 1\n     \
    \               end\n                end\n            end\n        end\n    end\n\
    \    return res\nend", "    local sum = 0\n    local arr = {}\n    for i = 1,\
    \ n do\n        local num = i * i - i + 1\n        arr[i] = num\n        sum =\
    \ sum + num\n    end\n    if sum % 3 == 0 then\n        return arr\n    end\n\
    \    local rest = sum % 3\n    for i = 1, n do\n        local num = arr[i]\n \
    \       local val = (num % 3 + rest) % 3\n        if val ~= 0 then\n         \
    \   arr[i] = num - val\n            return arr\n        end\n    end\n    return\
    \ arr\nend", "    local sum = 0\n    local t = {}\n    for i = 1, n do\n     \
    \   t[i] = (i * i) - i + 1\n        sum = sum + t[i]\n    end\n    local res =\
    \ 0\n    if sum % 3 == 0 then\n        for i = 1, n - 2 do\n            for j\
    \ = i + 1, n - 1 do\n                for k = j + 1, n do\n                   \
    \ if t[i] + t[j] + t[k] == sum then\n                        res = res + 1\n \
    \                   end\n                end\n            end\n        end\n \
    \   end\n    return res\nend", "    local res = 0\n    local sum = 0\n    local\
    \ dp = {}\n    for i = 1, n do\n        local val = i * i - i + 1\n        sum\
    \ = sum + val\n        for m = 0, sum, 3 do\n            if dp[m] then\n     \
    \           res = res + dp[m]\n            end\n        end\n        dp[sum] =\
    \ (dp[sum] or 0) + 1\n    end\n    return res\nend", "\tlocal count = 0\n\tlocal\
    \ sum = 0\n\tlocal a = {}\n\tlocal k = 1\n\tfor i = 1, n do\n\t\ta[i] = i * i\
    \ - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor\
    \ k = j + 1, n do\n\t\t\t\tsum = a[i] + a[j] + a[k]\n\t\t\t\tif sum % 3 == 0 then\n\
    \t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ count\nend", "\tlocal cnt = 0\n\tlocal num = {}\n\tfor i = 1, n do\n\t\ttable.insert(num,\
    \ i * i - i + 1)\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor\
    \ k = j + 1, n do\n\t\t\t\tif num[i] + num[j] + num[k] % 3 == 0 then\n\t\t\t\t\
    \tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\nend", " \
    \   local result = 0\n    local idx = 1\n    local c3 = 0\n    local c1 = 0\n\
    \    local c2 = 0\n    local end_idx = n - 1\n    local arr = {}\n    for i =\
    \ 1, n do\n        local v = i * i - i + 1\n        arr[i] = v\n        if v %\
    \ 3 == 0 then\n            c3 = c3 + 1\n        elseif v % 3 == 1 then\n     \
    \       c1 = c1 + 1\n        else\n            c2 = c2 + 1\n        end\n    end\n\
    \    while idx < end_idx do\n        local v = arr[idx]\n        local num = 1\n\
    \        if v % 3 == 0 then\n            num = num + c3 - 1\n        elseif v\
    \ % 3 == 1 then\n            num = num + c1\n        else\n            num = num\
    \ + c2\n        end\n        result = result + num\n        if v % 3 == 0 then\n\
    \            c3 = c3 - 1\n        elseif v % 3 == 1 then\n            c1 = c1\
    \ - 1\n        else\n            c2 = c2 - 1\n        end\n        idx = idx +\
    \ 1\n    end\n    return result\nend", "    if n < 3 then return 0 end\n    local\
    \ a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local\
    \ count = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n      \
    \      for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    if n < 3 then\n        return\
    \ 0\n    end\n    local sum, res = 0, 0\n    for i = 1, n do\n        sum = sum\
    \ + i\n        if sum % 3 == 0 then\n            res = res + math.floor(i / 2)\
    \ - math.floor((i - 1) / 2)\n        end\n    end\n    return res\nend", "  local\
    \ max_triples = 0\n  local a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n\
    \  end\n  local n = #a\n  for i = 1, n do\n    for j = i + 1, n do\n      for\
    \ k = j + 1, n do\n        if (a[i] + a[j] + a[k]) % 3 == 0 then\n          max_triples\
    \ = max_triples + 1\n        end\n      end\n    end\n  end\n  return max_triples\n\
    end", "    local arr = {}\n    for i = 1, n do\n        arr[i] = i * i - i + 1\n\
    \    end\n    local count = 0\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 then\n                    count = count + 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend", "\t\
    local a = {}\n\tlocal m = 0\n\tlocal result = 0\n\tfor i = 1, n do\n\t\tlocal\
    \ tmp = i * i - i + 1\n\t\ta[i] = tmp\n\t\tif tmp > m then\n\t\t\tm = tmp\n\t\t\
    end\n\tend\n\tlocal b = {}\n\tfor i = 1, m do\n\t\tb[i] = 0\n\tend\n\tfor i =\
    \ 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tlocal tmp\
    \ = a[i] + a[j] + a[k]\n\t\t\t\tif tmp % 3 == 0 then\n\t\t\t\t\tb[tmp] = b[tmp]\
    \ + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, m do\n\t\tif b[i]\
    \ > result then\n\t\t\tresult = b[i]\n\t\tend\n\tend\n\treturn result\nend", " \
    \   local total = n - 1\n    local triple = total % 3\n    local res = 0\n   \
    \ if triple == 1 then\n        res = (total - 1) // 3\n    elseif triple == 2\
    \ then\n        res = total // 3\n    end\n    return res\nend", "    local res\
    \ = 0\n    local a = {1}\n    for i = 2, n do\n        a[i] = i * i - i + 1\n\
    \    end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n         \
    \   for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    res = res + 1\n                end\n            end\n   \
    \     end\n    end\n    return res\nend", "    local cnt, prev_sum = 0, 0\n  \
    \  local l, r = 1, 2\n    local a = { 1 }\n    for i = 2, n do\n        a[i] =\
    \ i * i - i + 1\n    end\n    for i = 2, n - 2 do\n        for j = i + 1, n -\
    \ 1 do\n            local sum = a[i] + a[j]\n            if prev_sum <= sum then\n\
    \                while a[r] <= sum and r <= n do\n                    r = r +\
    \ 1\n                end\n                r = r - 1\n                while l <\
    \ r and sum + a[l] < 3 do\n                    l = l + 1\n                end\n\
    \                cnt = cnt + (r - l)\n                prev_sum = sum\n       \
    \     end\n        end\n    end\n    return cnt\nend", "\t-- Build the array a\n\
    \tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\t-- Count\
    \ the triples\n\tlocal count = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n\
    \ - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif a[i] + a[j] + a[k] % 3 == 0 then\n\
    \t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ count\nend", "    local r = 0\n    for i = 1, n - 2 do\n        for j = i +\
    \ 1, n - 1 do\n            for k = j + 1, n do\n                if (i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n                    r =\
    \ r + 1\n                end\n            end\n        end\n    end\n    return\
    \ r\nend", "    local sum_mod3 = {}\n    for i = 1, n do\n        local v = i\
    \ * i - i + 1\n        local m = v % 3\n        sum_mod3[m] = (sum_mod3[m] or\
    \ 0) + 1\n    end\n    local res = 0\n    for i = 0, 2 do\n        local t = sum_mod3[i]\n\
    \        if t and t > 1 then\n            res = res + t * (t - 1) / 2\n      \
    \  end\n    end\n    return res\nend", "\tlocal a = {}\n\tfor i = 1, n do\n\t\t\
    a[i] = i * i - i + 1\n\tend\n\tlocal total = 0\n\tfor i = 1, n - 2 do\n\t\tfor\
    \ j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] + a[k])\
    \ % 3 == 0 then\n\t\t\t\t\ttotal = total + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn total\nend", "    local k = 0\n    for i = 1, n do\n        for\
    \ j = i + 1, n do\n            for _ = j + 1, n do\n                if ((i * i\
    \ - i + 1) + (j * j - j + 1) + (_ * _ - _ + 1)) % 3 == 0 then\n              \
    \      k = k + 1\n                end\n            end\n        end\n    end\n\
    \    return k\nend", "    local function check_multiple_of_3(num)\n        return\
    \ num % 3 == 0\n    end\n    local function get_triples(a, i, j, k)\n        local\
    \ triples = 0\n        if i < j and j < k then\n            local sum = a[i] +\
    \ a[j] + a[k]\n            if check_multiple_of_3(sum) then\n                triples\
    \ = triples + 1\n            end\n        end\n        return triples\n    end\n\
    \    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local triples = 0\n    for i = 1, n do\n        for j = i + 1, n do\n   \
    \         for k = j + 1, n do\n                triples = triples + get_triples(a,\
    \ i, j, k)\n            end\n        end\n    end\n    return triples\nend", " \
    \ local a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local count\
    \ = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1,\
    \ n do\n        if (a[i] + a[j] + a[k]) % 3 == 0 then\n          count = count\
    \ + 1\n        end\n      end\n    end\n  end\n  return count\nend", "    local\
    \ c = 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n\
    \    end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n         \
    \   for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    c = c + 1\n                end\n            end\n       \
    \ end\n    end\n    return c\nend", "  assert(n > 0, 'n must be positive')\n \
    \ local res = 0\n  local m = math.floor(n / 3)\n  for i = 1, m do\n    for j =\
    \ i + 1, m do\n      for k = j + 1, m do\n        if (1 + 3 * i + 7 * j + 13 *\
    \ k) % 3 == 0 then\n          res = res + 1\n        end\n      end\n    end\n\
    \  end\n  return res\nend", "  local res = 0\n  for i = 1, n - 2 do\n    for j\
    \ = i + 1, n - 1 do\n      for k = j + 1, n do\n        if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 then\n          res = res + 1\n      \
    \  end\n      end\n    end\n  end\n  return res\nend", "    local t = {}\n   \
    \ local cnt = 0\n    for i = 1, n do\n        t[i] = i * i - i + 1\n        for\
    \ j = i + 1, n do\n            for k = j + 1, n do\n                if (t[i] +\
    \ t[j] + t[k]) % 3 == 0 then\n                    cnt = cnt + 1\n            \
    \    end\n            end\n        end\n    end\n    return cnt\nend", "    local\
    \ c = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for k =\
    \ j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1) % 3 == 0 then\n                    c = c + 1\n                end\n     \
    \       end\n        end\n    end\n    return c\nend", "    local sum = 0\n  \
    \  local i = 2\n    local j = 1\n    local k = 0\n    for i = 2, n-1 do\n    \
    \    j = 1\n        k = 0\n        while (i+j) <= n do\n            k = 0\n  \
    \          while (i+j+k) <= n do\n                if (i+j+k) % 3 == 0 then\n \
    \                   sum = sum + 1\n                end\n                k = k\
    \ + 1\n            end\n            j = j + 1\n        end\n    end\n    return\
    \ sum\nend", "\tlocal r = {}\n\tlocal function triples(v)\n\t\tlocal s = 0\n\t\
    \tfor i = 1, v do\n\t\t\ts = s + r[i]\n\t\tend\n\t\treturn s\n\tend\n\tr[1] =\
    \ 1\n\tr[2] = 2\n\tr[3] = 4\n\tr[4] = 6\n\tr[5] = 9\n\tfor i = 6, n do\n\t\tr[i]\
    \ = triples(i)\n\tend\n\treturn r[n]\nend\nreturn get_max_triples", "  local res\
    \ = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1,\
    \ n do\n        if (i + j + k) % 3 == 0 then\n          res = res + 1\n      \
    \  end\n      end\n    end\n  end\n  return res\nend", "    if n < 3 then return\
    \ 0 end\n    local a = {1, 3, 7}\n    local res = 0\n    for i = 3, n - 1 do\n\
    \        a[i + 1] = i * i - i + 1\n        for j = i - 1, 1, -1 do\n         \
    \   local y = a[i] + a[j]\n            local z = y % 3\n            if z == 0\
    \ then\n                res = res + j\n            elseif z == 1 then\n      \
    \          res = res + j - 1\n            else\n                if j - 2 > 0 then\n\
    \                    res = res + j - 2\n                end\n            end\n\
    \        end\n    end\n    return res\nend", "    local count = 0\n    for i =\
    \ 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n\
    \                if i * i - i + 1 + j * j - j + 1 + k * k - k + 1 == 3 * math.floor((i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) / 3) then\n                   \
    \ count = count + 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend", "    local a = {}\n    for i = 1, n do\n        a[i]\
    \ = i * i - i + 1\n    end\n    local cnt = 0\n    for i = 1, n - 2 do\n     \
    \   for j = i + 1, n - 1 do\n            for k = j + 1, n do\n               \
    \ if a[i] + a[j] + a[k] % 3 == 0 then\n                    cnt = cnt + 1\n   \
    \             end\n            end\n        end\n    end\n    return cnt\nend",
  "  assert(type(n) == \"number\" and n > 0 and n == math.floor(n))\n  local a = {}\n\
    \  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local count = 0\n  for\
    \ i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n  \
    \      if (a[i] + a[j] + a[k]) % 3 == 0 then\n          count = count + 1\n  \
    \      end\n      end\n    end\n  end\n  return count\nend", "    local max_triples\
    \ = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for k = j\
    \ + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0 then\n                    max_triples = max_triples + 1\n         \
    \       end\n            end\n        end\n    end\n    return max_triples\nend",
  "    local cnt = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n \
    \           for k = j + 1, n do\n                if (i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0 then\n                    cnt = cnt + 1\n    \
    \            end\n            end\n        end\n    end\n    return cnt\nend",
  "    local sum = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n \
    \           for k = j + 1, n do\n                if ((i * i - i + 1) + (j * j\
    \ - j + 1) + (k * k - k + 1)) % 3 == 0 then\n                    sum = sum + 1\n\
    \                end\n            end\n        end\n    end\n    return sum\n\
    end", "  local triples = 0\n  local a = {}\n  local sum = 0\n  local i = 1\n \
    \ while i <= n do\n    a[i] = i * i - i + 1\n    i = i + 1\n  end\n  i = 1\n \
    \ while i <= n do\n    local j = i + 1\n    while j <= n do\n      local k = j\
    \ + 1\n      while k <= n do\n        if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \          triples = triples + 1\n        end\n        k = k + 1\n      end\n\
    \      j = j + 1\n    end\n    i = i + 1\n  end\n  return triples\nend", "   \
    \ local a = {1}\n    for i = 2, n do\n        table.insert(a, a[i - 1] + (i *\
    \ 2) - 1)\n    end\n    local count = 0\n    for i = 1, n - 2 do\n        for\
    \ j = i + 1, n - 1 do\n            for k = j + 1, n do\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 then\n                    count = count + 1\n      \
    \          end\n            end\n        end\n    end\n    return count\nend",
  "\tlocal function multiple_of_3(n)\n\t\treturn (n % 3) == 0\n\tend\n\tlocal function\
    \ multiple_of_3_sum(a, b, c)\n\t\treturn multiple_of_3(a + b + c)\n\tend\n\tlocal\
    \ t = {}\n\tfor i = 1, n do\n\t\tt[i] = i * i - i + 1\n\tend\n\tlocal cnt = 0\n\
    \tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\t\
    if multiple_of_3_sum(t[i], t[j], t[k]) then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\nend", "\tlocal triples = 0\n\tlocal\
    \ a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i = 1, n -\
    \ 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i]\
    \ + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\ttriples = triples + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn triples\nend", "    local a = {}\n    for\
    \ i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local count = 0\n  \
    \  for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j\
    \ + 1, n do\n                if a[i] + a[j] + a[k] % 3 == 0 then\n           \
    \         count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    local result = 0;\n    for i = 1, n - 2\
    \ do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n     \
    \           if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\
    \                    result = result + 1;\n                end\n            end\n\
    \        end\n    end\n    return result;\nend", "    if n < 3 then return 0 end\n\
    \    local cnt_mod_3 = {}\n    for i = 1, n do\n        cnt_mod_3[(i * i - i +\
    \ 1) % 3] = (cnt_mod_3[(i * i - i + 1) % 3] or 0) + 1\n    end\n    local res\
    \ = 0\n    if cnt_mod_3[0] >= 3 then res = res + cnt_mod_3[0] * (cnt_mod_3[0]\
    \ - 1) * (cnt_mod_3[0] - 2) / 6 end\n    if cnt_mod_3[1] and cnt_mod_3[2] then\n\
    \        res = res + cnt_mod_3[1] * cnt_mod_3[2] * (cnt_mod_3[1] - 1) / 2\n  \
    \      res = res + cnt_mod_3[1] * cnt_mod_3[2] * (cnt_mod_3[2] - 1) / 2\n    end\n\
    \    return res\nend", "    local res = 0\n    local arr = {}\n    for i = 1,\
    \ n do\n        arr[i] = i * i - i + 1\n    end\n    for i = 1, n - 2 do\n   \
    \     for j = i + 1, n - 1 do\n            if arr[i] + arr[j] < 3 * arr[j] then\n\
    \                res = res + n - j\n                break\n            end\n \
    \       end\n    end\n    return res\nend", "\tlocal count = 0\n\tfor i = 1, n\
    \ do\n\t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\t\t\t\t\tcount = count\
    \ + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "    local\
    \ max = 0\n    local min = 0\n    local mid = 0\n    local sum = 0\n    for i\
    \ = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n\
    \ do\n                sum = (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)\n\
    \                if sum % 3 == 0 then\n                    print(i, j, k)\n  \
    \                  max = max + 1\n                end\n            end\n     \
    \   end\n    end\n    return max\nend", "\tlocal max_triples = 0\n\tlocal a =\
    \ {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\
    \t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif a[i] + a[j]\
    \ + a[k] % 3 == 0 then\n\t\t\t\t\tmax_triples = max_triples + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn max_triples\nend", "\tlocal a = {};\n\tfor\
    \ i = 1, n do\n\t\ta[i] = i * i - i + 1;\n\tend\n\t-- print(table.concat(a, \"\
    , \"));\n\t\n\tlocal sum = 0;\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\
    \tfor k = j + 1, n do\n\t\t\t\tsum = a[i] + a[j] + a[k];\n\t\t\t\tif sum % 3 ==\
    \ 0 then\n\t\t\t\t\t-- print(a[i], a[j], a[k]);\n\t\t\t\t\tn = n + 1;\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn n;\nend", "    local a = {}\n    for\
    \ i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local count = 0\n  \
    \  for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j\
    \ + 1, n do\n                if a[i] + a[j] + a[k] % 3 == 0 then\n           \
    \         count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    local c = 0\n    local a = {}\n    for\
    \ i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    for i = 1, n do\n  \
    \      for j = i + 1, n do\n            for k = j + 1, n do\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 then\n                    c = c + 1\n        \
    \        end\n            end\n        end\n    end\n    return c\nend", "  local\
    \ count = 0\n  local i = 0\n  local j = 0\n  local k = 0\n  for i = 1, n - 2 do\n\
    \    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        local v = i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1\n        if v % 3 == 0 then\n    \
    \      count = count + 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n \
    \   end\n    local cnt = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n\
    \ - 1 do\n            for k = j + 1, n do\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 then\n                    cnt = cnt + 1\n                end\n    \
    \        end\n        end\n    end\n    return cnt\nend", "    local count = 0\n\
    \    local triple_set = {}\n    for i = 1, n do\n        for j = i + 1, n do\n\
    \            for k = j + 1, n do\n                local x = i * i - i + 1\n  \
    \              local y = j * j - j + 1\n                local z = k * k - k +\
    \ 1\n                if (x + y + z) % 3 == 0 then\n                    if not\
    \ triple_set[x..y..z] then\n                        triple_set[x..y..z] = true\n\
    \                        count = count + 1\n                    end\n        \
    \        end\n            end\n        end\n    end\n    return count\nend", "\t\
    if n < 3 then return 0 end\n\tlocal total = 0\n\tfor i = 1, n - 2 do\n\t\tlocal\
    \ ai = i * i - i + 1\n\t\tfor j = i + 1, n - 1 do\n\t\t\tlocal aj = j * j - j\
    \ + 1\n\t\t\tfor k = j + 1, n do\n\t\t\t\tlocal ak = k * k - k + 1\n\t\t\t\tif\
    \ (ai + aj + ak) % 3 == 0 then\n\t\t\t\t\ttotal = total + 1\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn total\nend", "    local sum, num, max, maxn =\
    \ 0, 0, 0, 0\n    local i, j, k = 1, 1, 1\n    while i <= n do\n        while\
    \ j <= n do\n            while k <= n do\n                sum = i * i - i + 1\
    \ + j * j - j + 1 + k * j - k + 1\n                if sum % 3 == 0 then\n    \
    \                num = num + 1\n                end\n                k = k + 1\n\
    \            end\n            k = 1\n            j = j + 1\n        end\n    \
    \    j = 1\n        i = i + 1\n    end\n    return num\nend", "    local arr =\
    \ {}\n    for i = 1, n do\n        arr[i] = i * i - i + 1\n    end\n    local\
    \ total = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for\
    \ k = j + 1, n do\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 then\n\
    \                    total = total + 1\n                end\n            end\n\
    \        end\n    end\n    return total\nend", "    local a = {}\n    for i =\
    \ 1, n do\n        a[i] = i * i - i + 1\n    end\n    local triple_count = 0\n\
    \    for i = 1, n do\n        for j = i + 1, n do\n            for k = j + 1,\
    \ n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n              \
    \      triple_count = triple_count + 1\n                end\n            end\n\
    \        end\n    end\n    return triple_count\nend", "    local sum = 0\n   \
    \ local a = {}\n    local l = {}\n    local r = {}\n    local l_size = 0\n   \
    \ local r_size = 0\n    for i = 1, n do\n        local v = i * i - i + 1\n   \
    \     if v % 3 == 0 then\n            sum = sum + 2 * l_size + 2 * r_size\n  \
    \      elseif v % 3 == 1 then\n            sum = sum + l_size + 2 * r_size\n \
    \           l_size = l_size + 1\n            l[l_size] = v\n        else\n   \
    \         sum = sum + l_size + 2 * r_size\n            r_size = r_size + 1\n \
    \           r[r_size] = v\n        end\n    end\n    return sum\nend", "    local\
    \ a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local\
    \ cnt = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n        \
    \    for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    cnt = cnt + 1\n                end\n            end\n   \
    \     end\n    end\n    return cnt\nend", "    local a = {}\n    for i = 1, n\
    \ do\n        a[i] = i * i - i + 1\n    end\n    -- for _, v in ipairs(a) do\n\
    \    --     print(v)\n    -- end\n    local cnt = 0\n    for i = 1, n do\n   \
    \     for j = i + 1, n do\n            for k = j + 1, n do\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 then\n                    cnt = cnt + 1\n    \
    \            end\n            end\n        end\n    end\n    return cnt\nend",
  "\tlocal a = {}\n\tlocal count = 0\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\
    \tend\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1,\
    \ n do\n\t\t\t\tif a[i] + a[j] + a[k] % 3 == 0 then\n\t\t\t\t\tcount = count +\
    \ 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "    local\
    \ triples = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n    \
    \        for k = j + 1, n do\n                if (i + j + k) % 3 == 0 then\n \
    \                   triples = triples + 1\n                end\n            end\n\
    \        end\n    end\n    return triples\nend", "    local nums = {}\n    for\
    \ i = 1, n do\n        nums[i] = i * i - i + 1\n    end\n    local sum, max_triples\
    \ = 0, 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n         \
    \   for k = j + 1, n do\n                sum = nums[i] + nums[j] + nums[k]\n \
    \               if sum % 3 == 0 then\n                    max_triples = max_triples\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ max_triples\nend", "  local function is_multiple_of_3(n)\n    return n % 3 ==\
    \ 0\n  end\n  local function get_nums_sum(a, b, c)\n    return a + b + c\n  end\n\
    \  local function is_triple(a, b, c)\n    return a < b and b < c\n  end\n  local\
    \ function get_arr(n)\n    local arr = {}\n    for i = 1, n do\n      arr[i] =\
    \ i * i - i + 1\n    end\n    return arr\n  end\n  local arr = get_arr(n)\n  local\
    \ count = 0\n  for i = 1, n do\n    for j = i + 1, n do\n      for k = j + 1,\
    \ n do\n        if is_triple(arr[i], arr[j], arr[k]) \n        and is_multiple_of_3(get_nums_sum(arr[i],\
    \ arr[j], arr[k])) then\n          count = count + 1\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "\tlocal c = 0\n\tfor i = 1, n do\n\t\t\
    for j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\t\t\t\t\tc = c + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn c\nend", "    local count = 0\n    local sum\
    \ = {}\n    local index = 1\n    for i = 1, n do\n        for j = i + 1, n do\n\
    \            if sum[i + j] then\n                for k = 1, #sum[i + j] do\n \
    \                   if sum[i + j][k] > j then\n                        count =\
    \ count + 1\n                    end\n                end\n            end\n \
    \           sum[i + j] = sum[i + j] or {}\n            sum[i + j][index] = i\n\
    \            index = index + 1\n        end\n    end\n    return count\nend",
  "    local triples = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                if (i + j + k) % 3 == 0 then\n\
    \                    triples = triples + 1\n                end\n            end\n\
    \        end\n    end\n    return triples\nend", "\treturn n * (n - 1) * (n -\
    \ 2) / 6\nend", "    -- TODO\nend", "\tif n < 3 then return 0 end\n\tif n == 3\
    \ then return 1 end\n\tlocal m = math.floor(n / 3)\n\treturn m * (m - 1) * (m\
    \ - 2) / 6\nend", "  local result = 0\n  for i = 1, n do\n    for j = i + 1, n\
    \ do\n      for k = j + 1, n do\n        if (i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0 then\n          result = result + 1\n        end\n   \
    \   end\n    end\n  end\n  return result\nend", "    local c = 0\n    local arr\
    \ = {}\n    for i = 1, n do\n        arr[i] = i * i - i + 1\n    end\n    for\
    \ i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1,\
    \ n do\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 then\n        \
    \            c = c + 1\n                end\n            end\n        end\n  \
    \  end\n    return c\nend", "    local a = {}\n    for i = 1, n do\n        a[i]\
    \ = i * i - i + 1\n    end\n    local count = 0\n    for i = 1, n - 2 do\n   \
    \     for j = i + 1, n - 1 do\n            for k = j + 1, n do\n             \
    \   if (a[i] + a[j] + a[k]) % 3 == 0 then\n                    count = count +\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end", "    local max_triples = 0\n    for i = 1, n - 2 do\n        for j = i +\
    \ 1, n - 1 do\n            for k = j + 1, n do\n                if (i + j + k)\
    \ % 3 == 0 then\n                    max_triples = max_triples + 1\n         \
    \       end\n            end\n        end\n    end\n    return max_triples\nend",
  "    local dp = {0,0,1}\n    for i = 3, n do\n        dp[i%3+1] = (i-1)*(i-1)-(i-1)+1\n\
    \        for j = i-1, 1, -1 do\n            if (dp[i%3+1]+dp[j%3+1])%3 == 0 then\n\
    \                dp[i%3+1] = dp[i%3+1] + 1\n            end\n        end\n   \
    \ end\n    return dp[n%3+1]\nend", "    local dp = {}\n    for i = 1, n do\n \
    \       dp[i] = i * i - i + 1\n    end\n    local cnt = 0\n    for i = 1, n -\
    \ 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n   \
    \             if (dp[i] + dp[j] + dp[k]) % 3 == 0 then\n                    cnt\
    \ = cnt + 1\n                end\n            end\n        end\n    end\n    return\
    \ cnt\nend", "\tlocal b = {}\n\tfor i = 1, n do\n\t\tb[i] = i * i - i + 1\n\t\
    end\n\tlocal cnt = 0\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor k\
    \ = j + 1, n do\n\t\t\t\tif (b[i] + b[j] + b[k]) % 3 == 0 then\n\t\t\t\t\tcnt\
    \ = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\nend", "   \
    \ local cache = {}\n    for i = 1, n do\n        local a = i * i - i + 1\n   \
    \     if a % 3 == 0 then\n            cache[a] = true\n        end\n    end\n\
    \    local function test(a, b, c)\n        return cache[a] and cache[b] and cache[c]\n\
    \    end\n    local count = 0\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            local sum = i * i - i + 1 + j * j - j + 1\n          \
    \  for k = j + 1, n do\n                if (sum + k * k - k + 1) % 3 == 0 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    local max = n * n - n + 1\n\
    \    if max % 3 == 0 then\n        local less = n - 1\n        local more = n\
    \ - 2\n        if less > 1 and more > 1 then\n            return less * more\n\
    \        end\n    end\n    return 0\nend", "    local count = 0\n    local i,\
    \ j, k\n    for i = 1, n do\n        for j = i + 1, n do\n            for k =\
    \ j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1) % 3 == 0 then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    local tbl\
    \ = {}\n    for i = 1, n do\n        tbl[i] = i * i - i + 1\n    end\n    local\
    \ count = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for\
    \ k = j + 1, n do\n                if (tbl[i] + tbl[j] + tbl[k]) % 3 == 0 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "\tlocal arr = {}\n\tfor i = 1,\
    \ n do\n\t\tarr[i] = i * i - i + 1\n\tend\n\tlocal count = 0\n\tfor i = 1, n -\
    \ 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "    if n < 3 then\n        return\
    \ 0\n    end\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i\
    \ + 1\n    end\n    local count = 0\n    for i = 1, n - 2 do\n        for j =\
    \ i + 1, n - 1 do\n            for k = j + 1, n do\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0 then\n                    count = count + 1\n        \
    \        end\n            end\n        end\n    end\n    return count\nend", " \
    \   local nums = {}\n    for i = 1, n do\n        nums[i] = i * i - i + 1\n  \
    \  end\n    local cnt = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n -\
    \ 1 do\n            for k = j + 1, n do\n                if (nums[i] + nums[j]\
    \ + nums[k]) % 3 == 0 then\n                    cnt = cnt + 1\n              \
    \  end\n            end\n        end\n    end\n    return cnt\nend", "    local\
    \ count = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n      \
    \      for k = j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0 then\n                    count = count + 1\n    \
    \            end\n            end\n        end\n    end\n    return count\nend",
  "    local result = 0\n    local _sum = 0\n    local a = {}\n    local b = {}\n\
    \    local c = {}\n    local _b = 0\n    local _c = 0\n    for i = 1, n do\n \
    \       a[i] = i * i - i + 1\n        _sum = _sum + a[i]\n        if _sum % 3\
    \ == 0 then\n            _b = _b + 1\n            b[i] = _b\n        else\n  \
    \          b[i] = _b\n        end\n    end\n    for i = n, 1, -1 do\n        if\
    \ _sum % 3 == 0 then\n            _c = _c + 1\n            c[i] = _c\n       \
    \ else\n            c[i] = _c\n        end\n        _sum = _sum - a[i]\n    end\n\
    \    for i = 1, n do\n        for j = i + 1, n do\n            if (a[i] + a[j])\
    \ % 3 == 0 then\n                result = result + c[j + 1]\n            end\n\
    \        end\n    end\n    return result\nend", "  local a = {}\n  for i = 1,\
    \ n do\n    a[i] = i * i - i + 1\n  end\n  local count = 0\n  for i = 1, n - 2\
    \ do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 then\n          count = count + 1\n        end\n   \
    \   end\n    end\n  end\n  return count\nend", "    local number_of_triples =\
    \ 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for\
    \ k = j + 1, n do\n                if ((i * i - i + 1) + (j * j - j + 1) + (k\
    \ * k - k + 1)) % 3 == 0 then\n                    number_of_triples = number_of_triples\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ number_of_triples\nend", "    local count = 0\n    local sum = 0\n    local\
    \ a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    for\
    \ i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1,\
    \ n do\n                sum = a[i] + a[j] + a[k]\n                if (sum % 3\
    \ == 0) then\n                    count = count + 1\n                end\n   \
    \         end\n        end\n    end\n    return count\nend", "    if n == 0 then\n\
    \        return 0\n    end\n    local count = 0\n    for i = 1, n do\n       \
    \ for j = i + 1, n do\n            for k = j + 1, n do\n                if (i\
    \ + j + k) % 3 == 0 then\n                    count = count + 1\n            \
    \    end\n            end\n        end\n    end\n    return count\nend", "   \
    \ local function is_multiple_of_3(v)\n        if v % 3 == 0 then\n           \
    \ return true\n        end\n        return false\n    end\n    local cnt = 0\n\
    \    for i = 1, n do\n        for j = i + 1, n do\n            for k = j + 1,\
    \ n do\n                local v = i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1\n                if is_multiple_of_3(v) then\n                    cnt = cnt\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ cnt\nend\nassert(get_max_triples(5) == 1)", "    if n == 1 then\n        return\
    \ 0\n    end\n    local set = {}\n    local res = 0\n    for i = 1, n - 2 do\n\
    \        local a = i * i - i + 1\n        for j = i + 1, n - 1 do\n          \
    \  local b = j * j - j + 1\n            for k = j + 1, n do\n                local\
    \ c = k * k - k + 1\n                if a + b + c % 3 == 0 then\n            \
    \        res = res + 1\n                end\n            end\n        end\n  \
    \  end\n    return res\nend", "\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i\
    \ * i - i + 1\n\tend\n\tlocal cnt = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i +\
    \ 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3\
    \ == 0 then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn cnt\nend", "    local a = {1}\n    for i = 2, n do\n        a[i] = a[i\
    \ - 1] + i * 2 - 1\n    end\n    local count = 0\n    for i = 1, n - 2 do\n  \
    \      for j = i + 1, n - 1 do\n            local sum = a[i] + a[j]\n        \
    \    for k = j + 1, n do\n                local sum2 = sum + a[k]\n          \
    \      if sum2 % 3 == 0 then\n                    count = count + 1\n        \
    \        end\n            end\n        end\n    end\n    return count\nend", "\t\
    local triples = 0\n\tlocal previous_triples = 0\n\tfor i = 3, n do\n\t\tlocal\
    \ number = i * i - i + 1\n\t\tif number % 3 == 0 then\n\t\t\tprevious_triples\
    \ = (i - 2) * (i - 2)\n\t\t\ttriples = triples + previous_triples\n\t\telse\n\t\
    \t\ttriples = triples + previous_triples\n\t\tend\n\tend\n\treturn triples\nend",
  "    local cnt = 0\n    for i = 1, n do\n        for j = i + 1, n do\n         \
    \   for k = j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0 then\n                    cnt = cnt + 1\n            \
    \    end\n            end\n        end\n    end\n    return cnt\nend", "    local\
    \ c = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n          \
    \  for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    c = c + 1\n                end\n            end\n       \
    \ end\n    end\n    return c\nend", "    local sum = 0\n    for i = 1, n do\n\
    \        sum = sum + (i * i - i + 1)\n    end\n    return sum\nend", "    local\
    \ max_triples = 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i\
    \ - i + 1\n    end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 then\n                    max_triples = max_triples + 1\n             \
    \   end\n            end\n        end\n    end\n    return max_triples\nend",
  "    local sum = 0\n    local dp = {}\n    local a = {}\n    for i = 1, n do\n \
    \       a[i] = i * i - i + 1\n        if a[i] % 3 == 0 then\n            sum =\
    \ sum + 1\n        end\n        dp[i] = sum\n    end\n    local cnt = 0\n    for\
    \ i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            if (a[i] + a[j])\
    \ % 3 == 0 then\n                cnt = cnt + dp[n] - dp[j]\n            end\n\
    \        end\n    end\n    return cnt\nend", "    local sum, count = 0, 0\n  \
    \  local a, b, c = 0, 0, 0\n    for i = 1, n do\n        for j = i + 1, n do\n\
    \            for k = j + 1, n do\n                sum = i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1\n                if sum % 3 == 0 then\n            \
    \        count = count + 1\n                    if count == 1 then\n         \
    \               a, b, c = i, j, k\n                    end\n                end\n\
    \            end\n        end\n    end\n    return count, a, b, c\nend", "   \
    \ local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n \
    \   local t = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n  \
    \          for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 then\n                    t = t + 1\n                end\n            end\n\
    \        end\n    end\n    return t\nend", "\tlocal res = 0\n\tfor i = 1, n do\n\
    \t\tlocal a = i * i - i + 1\n\t\tfor j = i + 1, n do\n\t\t\tlocal b = j * j -\
    \ j + 1\n\t\t\tfor k = j + 1, n do\n\t\t\t\tlocal c = k * k - k + 1\n\t\t\t\t\
    if (a + b + c) % 3 == 0 then\n\t\t\t\t\tres = res + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn res\nend", "    local cnt = 0\n    for i = 1, n do\n\
    \        for j = i + 1, n do\n            for k = j + 1, n do\n              \
    \  if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n        \
    \            cnt = cnt + 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend", "    if n < 3 then return 0 end\n    local result\
    \ = 0\n    local sum = 0\n    local seq = {}\n    for i = 1, n do\n        seq[i]\
    \ = i * i - i + 1\n        sum = sum + seq[i]\n    end\n    if sum % 3 == 0 then\
    \ result = result + 1 end\n    for i = 2, n - 1 do\n        for j = i + 1, n do\n\
    \            sum = sum - seq[i - 1] - seq[j]\n            if sum % 3 == 0 then\
    \ result = result + 1 end\n        end\n    end\n    return result\nend", "  \
    \  local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local count = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 then\n                    count = count + 1\n                end\n    \
    \        end\n        end\n    end\n    return count\nend", "    local res = 0\n\
    \    if n <= 0 then\n        return res\n    end\n    local sum, j, k = 0, 0,\
    \ 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n   \
    \ end\n    for i = 1, n do\n        j = i + 1\n        k = n\n        while j\
    \ < k do\n            sum = a[i] + a[j] + a[k]\n            if sum % 3 == 0 then\n\
    \                res = res + 1\n                j = j + 1\n                k =\
    \ k - 1\n            elseif sum < 0 then\n                j = j + 1\n        \
    \    else\n                k = k - 1\n            end\n        end\n    end\n\
    \    return res\nend\nprint(get_max_triples(10))", "\tlocal res = 0\n\tlocal idx\
    \ = 0\n\tlocal arr = {}\n\tfor i = 1, n do\n\t\tarr[i] = i * i - i + 1\n\tend\n\
    \tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\
    \t\t\t\tif arr[i] + arr[j] + arr[k] % 3 == 0 then\n\t\t\t\t\tres = res + 1\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "    local sum = 0\n\
    \    local c = 0\n    local i = 0\n    while c < n do\n        i = i + 1\n   \
    \     sum = sum + i * i - i + 1\n        if sum % 3 == 0 then\n            c =\
    \ c + 1\n        end\n    end\n    local s = i * i - i + 1\n    local t = s -\
    \ 1\n    local triples = (i * (i - 1) * (i - 2)) / 6\n    for j = i - 1, 1, -1\
    \ do\n        for k = j - 1, 1, -1 do\n            local ts = s - t + (k * k -\
    \ k + 1)\n            if ts % 3 == 0 then\n                triples = triples +\
    \ 1\n            end\n        end\n        t = t - (j * j - j + 1)\n    end\n\
    \    return triples\nend", "    local cnt = 0\n    for i = 1, n - 2 do\n     \
    \   for j = i + 1, n - 1 do\n            for k = j + 1, n do\n               \
    \ if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0) then\n \
    \                   cnt = cnt + 1\n                end\n            end\n    \
    \    end\n    end\n    return cnt\nend", "  local a = {1}\n  for i = 2, n do\n\
    \    a[i] = i * i - i + 1\n  end\n  local cnt = 0\n  for i = 1, n do\n    for\
    \ j = i + 1, n do\n      for k = j + 1, n do\n        if (a[i] + a[j] + a[k])\
    \ % 3 == 0 then\n          cnt = cnt + 1\n        end\n      end\n    end\n  end\n\
    \  return cnt\nend", "    local cnt = 0\n    local n = n\n    local e = {}\n \
    \   local a = {}\n    local max = 0\n    local r = {}\n    local rr = {}\n   \
    \ local rrr = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n        if\
    \ a[i] % 3 == 0 then\n            e[i] = 0\n        elseif a[i] % 3 == 1 then\n\
    \            e[i] = 1\n        else\n            e[i] = 2\n        end\n    end\n\
    \    for i = 1, n do\n        for j = i + 1, n do\n            for k = j + 1,\
    \ n do\n                if e[i] + e[j] + e[k] == 0 then\n                    rr[#rr\
    \ + 1] = {a[i], a[j], a[k]}\n                    r[#r + 1] = a[i] + a[j] + a[k]\n\
    \                    rrr[#rrr + 1] = {i, j, k}\n                    cnt = cnt\
    \ + 1\n                end\n            end\n        end\n    end\n    -- print(r)\n\
    \    -- print(rr)\n    -- print(rrr)\n    return cnt\nend", "    local triples\
    \ = 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n \
    \   end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n          \
    \  for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    triples = triples + 1\n                end\n            end\n\
    \        end\n    end\n    return triples\nend", "    local a = {}\n    for i\
    \ = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local count = 0\n    for\
    \ i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1,\
    \ n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n              \
    \      count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    local mod = { [0] = 0, 0, 0 }\n    local\
    \ sum = 0\n    for i = 1, n do\n        local d = i * i - i + 1\n        sum =\
    \ (sum + d) % 3\n        mod[sum] = mod[sum] + 1\n    end\n    local cnt = 0\n\
    \    for i = 0, 2 do\n        cnt = cnt + mod[i] * (mod[i] - 1) * (mod[i] - 2)\
    \ / 6\n    end\n    return cnt\nend", "    local max_triples = 0\n    for i =\
    \ 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\
    \                    max_triples = max_triples + 1\n                end\n    \
    \        end\n        end\n    end\n    return max_triples\nend", "    -- your\
    \ code goes here\n    local function nums_at_multiple_of_three(n)\n        local\
    \ sum = 0\n        for i = 1, n do\n            local num = i * i - i + 1\n  \
    \          if num % 3 == 0 then\n                sum = sum + 1\n            end\n\
    \        end\n        return sum\n    end\n    return nums_at_multiple_of_three(n)\n\
    end", "\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\t\
    local cnt = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k\
    \ = j + 1, n do\n\t\t\t\tif a[i] + a[j] + a[k] % 3 == 0 then\n\t\t\t\t\tcnt =\
    \ cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\nend", "\tlocal\
    \ count = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k =\
    \ j + 1, n do\n\t\t\t\tif (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn count\nend", "    local count = 0\n    local a = {}\n    local sum\
    \ = 0\n    local multiple_of_3 = 0\n    for i = 1, n do\n        a[i] = i * i\
    \ - i + 1\n    end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                sum = a[i] + a[j] + a[k]\n \
    \               multiple_of_3 = math.fmod(sum, 3)\n                if (multiple_of_3\
    \ == 0) then\n                    count = count + 1\n                end\n   \
    \         end\n        end\n    end\n    return count\nend", "    local i, j,\
    \ k = 1, 2, 3\n    local a = {}\n    local m = 0\n    while true do\n        local\
    \ num = i * i - i + 1\n        a[i] = num\n        if i == n then\n          \
    \  break\n        end\n        i = i + 1\n    end\n    for i = 1, n - 2 do\n \
    \       for j = i + 1, n - 1 do\n            for k = j + 1, n do\n           \
    \     if (a[i] + a[j] + a[k]) % 3 == 0 then\n                    m = m + 1\n \
    \               end\n            end\n        end\n    end\n    return m\nend",
  "    local M = {}\n    local m = {}\n    local mc = 0\n    local mi = 0\n    local\
    \ mj = 0\n    local mk = 0\n    local function get_max(i, j, k)\n        if k\
    \ == n then\n            return false\n        end\n        local max\n      \
    \  if i == j then\n            if i == k then\n                return false\n\
    \            end\n            max = math.max(M[i][j], M[i][k], M[j][k])\n    \
    \    elseif i == k then\n            max = math.max(M[i][j], M[i][k], M[j][k])\n\
    \        elseif j == k then\n            max = math.max(M[i][j], M[i][k], M[j][k])\n\
    \        else\n            max = math.max(M[i][j], M[i][k], M[j][k], M[j][i],\
    \ M[k][i], M[k][j])\n        end\n        if max == nil then\n            max\
    \ = 0\n        end\n        if max > mc then\n            mc = max\n         \
    \   mi = i\n            mj = j\n            mk = k\n        end\n        return\
    \ true\n    end\n    for i = 1, n do\n        M[i] = {}\n        for j = 1, n\
    \ do\n            M[i][j] = {}\n            for k = 1, n do\n                M[i][j][k]\
    \ = (i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1)\n                if M[i][j][k]\
    \ % 3 == 0 then\n                    m[M[i][j][k]] = m[M[i][j][k]] == nil and\
    \ 1 or m[M[i][j][k]] + 1\n                    if m[M[i][j][k]] > mc then\n   \
    \                     mc = m[M[i][j][k]]\n                        mi = i\n   \
    \                     mj = j\n                        mk = k\n               \
    \     end\n                end\n            end\n        end\n    end\n    --[[\n\
    \    while get_max(mi, mj, mk) do\n        mk =", "    local max_multiples = {0,\
    \ 0, 0}\n    local max_triples = 0\n    for i = 1, n do\n        local cur_val\
    \ = i * i - i + 1\n        local cur_sum = cur_val + max_multiples[1] + max_multiples[2]\n\
    \        if cur_sum % 3 == 0 then\n            max_triples = max_triples + max_multiples[1]\
    \ + max_multiples[2]\n        end\n        if cur_val % 3 == 0 then\n        \
    \    max_multiples[3] = max_multiples[3] + 1\n        elseif cur_val % 3 == 1\
    \ then\n            max_multiples[1] = max_multiples[1] + 1\n        else\n  \
    \          max_multiples[2] = max_multiples[2] + 1\n        end\n    end\n   \
    \ return max_triples\nend", "    local c = 0\n    local a = {}\n    for i = 1,\
    \ n do\n        a[i] = i * i - i + 1\n    end\n    for i = 1, n - 2 do\n     \
    \   for j = i + 1, n - 1 do\n            for k = j + 1, n do\n               \
    \ if (a[i] + a[j] + a[k]) % 3 == 0 then\n                    c = c + 1\n     \
    \           end\n            end\n        end\n    end\n    return c\nend", " \
    \   local count = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 then\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local function gcd(a, b)\n        if a < b then\n            a, b =\
    \ b, a\n        end\n        while b ~= 0 do\n            a, b = b, a % b\n  \
    \      end\n        return a\n    end\n    local function lcm(a, b)\n        return\
    \ a * b / gcd(a, b)\n    end\n    local max_triples = 0\n    local eps = 1e-8\n\
    \    for i = 3, n do\n        local count = math.floor(lcm(i, 6) / 6)\n      \
    \  max_triples = max_triples + count\n    end\n    return max_triples\nend", " \
    \   local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local count = 0\n    for i = 1, n do\n        for j = i + 1, n do\n     \
    \       for k = j + 1, n do\n                if a[i] + a[j] + a[k] % 3 == 0 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    local c = 0\n    for i = 1,\
    \ n do\n        for j = i + 1, n do\n            for k = j + 1, n do\n       \
    \         if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n \
    \                   c = c + 1\n                end\n            end\n        end\n\
    \    end\n    return c\nend", "    local n3 = n % 3\n    local n12 = n % 12\n\
    \    local nc = n - 1 - n3\n    local na = nc - n12\n    local nb = na - 1\n \
    \   return na + nb + nc\nend", "    local a = {}\n    for i = 1, n do\n      \
    \  a[i] = i * i - i + 1\n    end\n    local count = 0\n    for i = 1, n - 2 do\n\
    \        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n          \
    \      if (a[i] + a[j] + a[k]) % 3 == 0 then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "\tlocal cnt = 0\n\tlocal sum = 0\n\tlocal a = {}\n\tfor i = 1,\
    \ n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\t\tfor j = i\
    \ + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tsum = a[i] + a[j] + a[k]\n\
    \t\t\t\tif sum % 3 == 0 then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn cnt\nend", "    local a = {}\n    for i = 1, n do\n \
    \       a[i] = i * i - i + 1\n    end\n    local count = 0\n    for i = 1, n do\n\
    \        for j = i + 1, n do\n            for k = j + 1, n do\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 then\n                    count = count +\
    \ 1\n                end\n            end\n        end\n    end\n    return count\n\
    end", "\t-- TODO: implement get_max_triples\n\treturn 0\nend", "    local a =\
    \ {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local count\
    \ = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for\
    \ k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n   \
    \                 count = count + 1\n                end\n            end\n  \
    \      end\n    end\n    return count\nend", "    local func = function (start,\
    \ end_)\n        local tmp = 0\n        for i = start, end_ do\n            tmp\
    \ = tmp + (i * i - i + 1)\n        end\n        return tmp\n    end\n    local\
    \ start = 1\n    local end_ = n\n    local count = 0\n    while end_ >= start\
    \ do\n        local middle = math.floor((start + end_) / 2)\n        local s1\
    \ = func(start, middle)\n        local s2 = func(middle + 1, end_)\n        if\
    \ (s1 % 3 == 0) then\n            count = count + 1\n        end\n        if (s2\
    \ % 3 == 0) then\n            count = count + 1\n        end\n        if (s1 %\
    \ 3 == 0 and s2 % 3 == 0) then\n            count = count + 1\n        end\n \
    \       start = start + 1\n        end_ = end_ - 1\n    end\n    return count\n\
    end", "    local triples = 0\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if (i + j + k) %\
    \ 3 == 0 then\n                    triples = triples + 1\n                end\n\
    \            end\n        end\n    end\n    return triples\nend", "    local res\
    \ = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for k = j\
    \ + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0 then\n                    res = res + 1\n                end\n    \
    \        end\n        end\n    end\n    return res\nend", "\tlocal count = 0\n\
    \tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i =\
    \ 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i]\
    \ + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn count\nend", "  local arr = {}\n  for i = 1, n\
    \ do \n    arr[i] = i * i - i + 1\n  end\n  local count = 0\n  for i = 1, n -\
    \ 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "    -- TODO\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
