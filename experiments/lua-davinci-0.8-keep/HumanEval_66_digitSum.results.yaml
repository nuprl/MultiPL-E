name: HumanEval_66_digitSum
language: lua
results:
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1, #s do\n    if string.byte(s,\
    \ i) >= 65 and string.byte(s, i) <= 90 then\n      sum = sum + string.byte(s,\
    \ i)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1, #s do\n    if string.find(string.upper(s),\
    \ s:sub(i,i)) then\n      sum = sum + string.byte(s:sub(i,i))\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis602_j0.lua:30:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpis602_j0.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    return s:gsub(\"[^A-Z]\", \"\"):gsub(\"\
    .\", function(x) return x:byte() end):sum()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6bp8ag12.lua:12:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmp6bp8ag12.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6bp8ag12.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bc68z0r.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_bc68z0r.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9gf7r0z.lua:17:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpm9gf7r0z.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  local m = string.byte('A')\n\
    \  local M = string.byte('Z')\n  for i = 1, #s do\n    local n = string.byte(s,\
    \ i)\n    if m <= n and n <= M then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv2q3s_w.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpyv2q3s_w.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if char:find(\"%u\") then\n      table.insert(t, string.byte(char))\n\
    \    end\n  end\n  return table.reduce(t, function(memo, value) return memo +\
    \ value end, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaaimd77r.lua:19:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpaaimd77r.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpaaimd77r.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for c in s:gmatch(\".\"\
    ) do\n    if c:match(\"%u\") then\n      sum = sum + c:byte()\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local count = 0\n  for i = 1, #s do\n   \
    \ local char = s:sub(i, i)\n    if char:match(\"%u\") then\n      count = count\
    \ + string.byte(char)\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ c = s:sub(i, i)\n\t\tif c:find(\"%u\") then\n\t\t\tsum = sum + string.byte(c)\n\
    \t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    return s:upper():gsub(\"[^A-Z]\", \"\"\
    ):gsub(\".\", function(c) return string.byte(c) end):sum()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphiekq2b9.lua:12:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmphiekq2b9.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphiekq2b9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- Write your code here\n  local function\
    \ get_digit_sum(s)\n    local sum = 0\n    for c in s:gmatch(\"%a\") do\n    \
    \  if c == c:upper() then\n        sum = sum + string.byte(c)\n      end\n   \
    \ end\n    return sum\n  end\n  return get_digit_sum(s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tif #s == 0 then return 0 end\n\tlocal result\
    \ = 0\n\tfor i = 1, #s do\n\t\tif s:byte(i) >= 65 and s:byte(i) <= 90 then\n\t\
    \t\tresult = result + s:byte(i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local res = 0\n    for i = 1, string.len(s)\
    \ do\n        local ch = string.sub(s, i, i)\n        if string.byte(ch) >= 65\
    \ and string.byte(ch) <= 90 then\n            res = res + string.byte(ch)\n  \
    \      end\n    end\n    return res\nend\nprint(digitSum(\"\"))\nprint(digitSum(\"\
    abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"\
    woArBld\"))\nprint(digitSum(\"aAaaaXa\"))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "0\n131\n67\n69\n131\n153\n.\nRan 1 tests in 0.000 seconds, 1 success, 0\
    \ failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\n  local res = 0\n  for\
    \ i=1, string.len(s) do\n    local c = string.sub(s, i, i)\n    local code = string.byte(c)\n\
    \    if code >= string.byte('A') and code <= string.byte('Z') then\n      res\
    \ = res + code\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    sum = 0\n    for i = 1, #s do\n       \
    \ if s:byte(i) > 64 and s:byte(i) < 91 then\n            sum = sum + s:byte(i)\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ char = s:sub(i, i)\n\t\tif string.find(char, '%l') == nil then\n\t\t\tsum =\
    \ sum + char:byte()\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpny39j33v.lua:31:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpny39j33v.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local o = 0\n  for x in s:gmatch'.' do\n\
    \    if x:find('%u') then\n      o = o + x:byte()\n    end\n  end\n  return o\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local nums = {}\n  local sum = 0\n  local\
    \ str = ''\n  for i=1, #s do\n    table.insert(nums, s:byte(i))\n  end\n  for\
    \ i=1, #nums do\n    if nums[i] >= 65 and nums[i] <= 90 then\n      sum = sum\
    \ + nums[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local count = 0\n  for i = 1, #s do\n   \
    \ local c = s:sub(i, i)\n    if c:match(\"%u\") then\n      count = count + c:byte()\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local code = string.byte(s, i)\n        if code >= 65 and code <= 90 then\n\
    \            sum = sum + code\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for ch in s:gmatch('.')\
    \ do\n        local ch_code = string.byte(ch)\n        if ch_code >= 65 and ch_code\
    \ <= 90 then\n            sum = sum + ch_code\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for char in s:gmatch(\"\
    %a\") do\n    local code = string.byte(char)\n    if code < 97 then sum = sum\
    \ + code end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local n = 0\n    for i = 1, #s do\n   \
    \     local c = s:sub(i, i)\n        if c:match(\"%u\") then\n            n =\
    \ n + c:byte()\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tif not s then return 0 end\n\tlocal letters\
    \ = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"}\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ char = s:sub(i, i)\n\t\tif char == char:upper() then\n\t\t\tfor j = 1, #letters\
    \ do\n\t\t\t\tif char:lower() == letters[j] then\n\t\t\t\t\tsum = sum + j\n\t\t\
    \t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocx1nldg.lua:32:\
    \ expected: 131, actual: 3\nstack traceback:\n\t/tmp/tmpocx1nldg.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local res = 0\n  for i = 1, #s do\n    if\
    \ s:byte(i) >= 65 and s:byte(i) <= 90 then\n      res = res + s:byte(i)\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  --TODO\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecuq5o2z.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpecuq5o2z.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if s == nil or s == '' then return 0 end\n\
    \  local sum = 0\n  for i = 1, #s do\n    local char = s:sub(i, i)\n    local\
    \ asc = string.byte(char)\n    if asc >= 65 and asc <= 90 then\n      sum = sum\
    \ + asc\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ cur = s:sub(i, i)\n    local code = cur:byte()\n    if code >= 65 and code <=\
    \ 90 then\n      sum = sum + code\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for c in s:gmatch\"\
    .\" do\n        local num = string.byte(c)\n        if num >= 65 and num <= 90\
    \ then\n            sum = sum + num\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, s:len() do\n\
    \        local char = s:sub(i, i)\n        if (char:match(\"%u\")) then\n    \
    \        sum = sum + string.byte(char)\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    -- your code here\n    local sum = 0\n\
    \    if s == \"\" then\n        return 0\n    end\n    for i = 1, #s do\n    \
    \    if string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then\n           \
    \ sum = sum + string.byte(s, i)\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\n  local sum = 0\n  for\
    \ i=1,string.len(s) do\n    if string.byte(s,i) >= 65 and string.byte(s,i) <=\
    \ 90 then\n      sum = sum + string.byte(s,i)\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if type(s) ~= \"string\" then return nil\
    \ end\n  if s == \"\" then return 0 end\n  local sum = 0\n  for i = 1, #s do\n\
    \    if s:byte(i) >= 65 and s:byte(i) <= 90 then\n      sum = sum + s:byte(i)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return string.gsub(s, '%w', function(c)\n\
    \    local code = string.byte(c)\n    if code >= 65 and code <= 90 then\n    \
    \  return code - 64\n    end\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r4gizsd.lua:23:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmp7r4gizsd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- Good luck!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8tlkf73.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpq8tlkf73.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local result = 0\n    for i = 1, #s do\n\
    \        local code = string.byte(s, i)\n        if code >= 65 and code <= 90\
    \ then\n            result = result + code\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    if\
    \ s:byte(i) >= 65 and s:byte(i) <= 90 then\n      sum = sum + s:byte(i)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ character = s:sub(i, i)\n    local code = character:byte()\n    if string.match(character,\
    \ '[A-Z]') and code ~= nil then\n      sum = sum + code\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ c = s:sub(i, i)\n\t\tif c:byte() >= 65 and c:byte() <= 90 then\n\t\t\tsum =\
    \ sum + c:byte()\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb26ts5pz.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpb26ts5pz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i=1,#s do\n    \
    \    local charValue = string.byte(s, i)\n        if charValue >= 65 and charValue\
    \ <= 90 then\n            sum = sum + charValue\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    -- your code here\n    return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8whvbvbg.lua:20:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmp8whvbvbg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, s:len() do\n\
    \        local ch = s:sub(i, i)\n        if ch >= 'A' and ch <= 'Z' then\n   \
    \         sum = sum + ch:byte()\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local res = 0\n    for i = 1, #s do\n \
    \       local c = s:sub(i, i)\n        local asc = string.byte(c)\n        if\
    \ asc >= 65 and asc <= 90 then\n            res = res + asc\n        end\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local ascii = {65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\
    \ 90}\n    local nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}\n    local t = {}\n    local sum = 0\n\
    \    for i = 1, #s do\n        for k, v in pairs(ascii) do\n            if s:byte(i)\
    \ == v then\n                table.insert(t, nums[k])\n            end\n     \
    \   end\n    end\n    for i = 1, #t do\n        sum = sum + t[i]\n    end\n  \
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vtwowgy.lua:33:\
    \ expected: 131, actual: 3\nstack traceback:\n\t/tmp/tmp4vtwowgy.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdz37oak.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpcdz37oak.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ c = s:sub(i, i)\n\t\tif c:byte() >= 65 and c:byte() <= 90 then\n\t\t\tsum =\
    \ sum + c:byte()\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local char = s:sub(i, i)\n        if char:match(\"%u\") then\n       \
    \     sum = sum + char:byte()\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local res = 0\n  for c in s:gmatch(\"%u\"\
    ) do\n    res = res + string.byte(c)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\t-- body\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla2t5fgo.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpla2t5fgo.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code\n  local count = 0\n  for i\
    \ = 1, #s do\n    if s:byte(i) >= 65 and s:byte(i) <= 90 then\n      count = count\
    \ + s:byte(i)\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ byte = string.byte(s, i)\n    if byte >= 65 and byte <= 90 then\n      sum =\
    \ sum + byte\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1, #s do\n    local\
    \ c = s:sub(i,i)\n    if c:match(\"%u\") then\n      sum = sum + string.byte(c)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local i, sum = 0, 0\n  for j = 1, #s do\n\
    \    i = string.byte(s, j)\n    if i >= 65 and i <= 90 then\n      sum = sum +\
    \ i\n    end\n  end\n  return sum\nend\nprint(digitSum(\"abcCd\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "67\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if string.byte(c) >= 65 and string.byte(c) <= 90 then\n\
    \      sum = sum + string.byte(c)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1riv100.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpd1riv100.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local char = s:sub(i, i)\n        if string.byte(char) >= 65 and string.byte(char)\
    \ <= 90 then\n            sum = sum + string.byte(char)\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local t = {}\n  local sum = 0\n  for k,v\
    \ in pairs(s:byte(1,#s)) do\n    if v > 64 and v < 91 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  for k,v in pairs(t) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgn84vo06.lua:14:\
    \ bad argument #1 to 'pairs' (value expected)\nstack traceback:\n\t/tmp/tmpgn84vo06.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpgn84vo06.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local n = 0\n  for i=1,#s do\n    if (string.byte(s,i)\
    \ >= 65 and string.byte(s,i) <= 90) then\n      n = n + string.byte(s,i)\n   \
    \ end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local t = {}\n    for i = 1, #s do\n  \
    \      t[i] = string.byte(s, i)\n    end\n    local sum = 0\n    for i = 1, #t\
    \ do\n        if (t[i] >= 65 and t[i] <= 90) then\n            sum = sum + t[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0c78c18v.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp0c78c18v.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       if (s:byte(i) >= 65 and s:byte(i) <= 90) then\n            sum = sum +\
    \ s:byte(i)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  if type(s) == \"string\"\
    \ then\n    for i = 1, #s do\n      local c = s:sub(i, i)\n      local n = c:byte()\n\
    \      if n >= 65 and n <= 90 then\n        sum = sum + n\n      end\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for c in s:gmatch(\"%u\"\
    ) do\n    sum = sum + string.byte(c)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\n  local sum = 0\n  for\
    \ c in s:gmatch\".\" do\n    if c:match(\"%u\") then\n      sum = sum + string.byte(c)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kle_k_e.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp6kle_k_e.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local t = 0\n  local a = string.byte(s)\n\
    \  for i = 1, #s do\n    if a >= 65 and a <= 90 then\n      t = t + a\n    end\n\
    \    a = string.byte(s, i)\n  end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51d1fxap.lua:27:\
    \ expected: 131, actual: 65\nstack traceback:\n\t/tmp/tmp51d1fxap.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\n  local sum = 0\n  for\
    \ i=1, #s do\n    local str = string.sub(s, i, i)\n    local ascii = string.byte(str)\n\
    \    if ascii > 64 and ascii < 91 then\n      sum = sum + ascii\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, s:len() do\n\t\
    \tlocal char = s:sub(i, i)\n\t\tif char:byte() < 97 then\n\t\t\tsum = sum + char:byte()\n\
    \t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcjj45zs.lua:31:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpmcjj45zs.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local res = 0\n    local t = s:upper():gsub(\"\
    %a\",\"\")\n    for i = 1,#t do\n        res = res + string.byte(t,i)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7n2tg19.lua:24:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpe7n2tg19.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    sum = 0\n    for i=1, #s do\n        if\
    \ string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then\n            sum =\
    \ sum + string.byte(s, i)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, s:len() do\n\
    \    local char = s:sub(i, i)\n    if char:byte() >= 65 and char:byte() <= 90\
    \ then\n      sum = sum + char:byte()\n    end\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local count = 0\n  for i=1, #s do\n    if\
    \ string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then\n      count = count\
    \ + string.byte(s, i)\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local r = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c:match('%u') then\n      r = r + c:byte()\n    end\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local s = s:upper()\n  local sum = 0\n  for\
    \ i = 1, s:len() do\n    local char = s:sub(i, i)\n    local char_num = s:byte(i)\n\
    \    if char_num >= 65 and char_num <= 90 then\n      sum = sum + char_num\n \
    \   end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qa55tz7.lua:28:\
    \ expected: 131, actual: 262\nstack traceback:\n\t/tmp/tmp4qa55tz7.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i=1, #s do\n   \
    \     local v = string.byte(s, i)\n        if v >= 65 and v <= 90 then\n     \
    \       sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if s == \"\" then return 0 end\n  local sum\
    \ = 0\n  for i = 1, #s do\n    if string.byte(s, i) >= 65 and string.byte(s, i)\
    \ <= 90 then\n      sum = sum + string.byte(s, i)\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ n = string.byte(s, i)\n    if n >= 65 and n <= 90 then\n      sum = sum + n\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if s == nil or s == \"\" then\n    return\
    \ 0\n  end\n  local sum = 0\n  for i = 1, s:len() do\n    if s:sub(i, i):byte()\
    \ >= 65 and s:sub(i, i):byte() <= 90 then\n      sum = sum + s:sub(i, i):byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, string.len(s)\
    \ do\n    if string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then\n      sum\
    \ = sum + string.byte(s, i)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local res = 0\n    for i = 1, s:len() do\n\
    \        local ch = s:sub(i, i)\n        if ch:match(\"%u\") then\n          \
    \  res = res + string.byte(ch)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    -- your code\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzy6c8d9d.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpzy6c8d9d.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1,#s do\n    local\
    \ c = s:sub(i,i)\n    if c >= 'A' and c <= 'Z' then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return s:gsub(\"[^A-Z]\", \"\")\n    :gsub(\"\
    .\", function(ch) return string.byte(ch) end)\n    :gsub(\"..\", function(ch)\
    \ return string.byte(ch, 1) + string.byte(ch, 2) end)\n    :gsub(\"..\", function(ch)\
    \ return string.byte(ch, 1) + string.byte(ch, 2) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuap52jwh.lua:21:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpuap52jwh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local value = string.byte(s, i)\n        if value >= 65 and value <= 90\
    \ then\n            sum = sum + value\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    local cn = c:byte()\n    if cn >= 65 and cn <= 90 then\n\
    \      sum = sum + cn\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1, #s do\n    local\
    \ char = s:sub(i,i)\n    if char == char:upper() then\n      sum = sum + string.byte(char)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxf2g_9i.lua:31:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmppxf2g_9i.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1,#s do\n    local\
    \ charCode = string.byte(s, i)\n    if charCode >= 65 and charCode <= 90 then\n\
    \      sum = sum + charCode\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppg4mcugt.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppg4mcugt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal res = 0\n\tfor k in s:gmatch '.' do\n\
    \t\tif k:byte() > 64 and k:byte() < 91 then\n\t\t\tres = res + k:byte()\n\t\t\
    end\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if string.match(char, \"%u\") then\n      sum = sum\
    \ + string.byte(char)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1, #s do\n    if string.byte(s,\
    \ i) >= 65 and string.byte(s, i) <= 90 then\n      sum = sum + string.byte(s,\
    \ i)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local counter = 0\n  for i=1, string.len(s)\
    \ do\n    local c = string.sub(s, i, i)\n    if string.find(c, '%u') then\n  \
    \    counter = counter + string.byte(c)\n    end\n  end\n  return counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return (s:gsub(\"%a\", \"\"):gsub(\"[A-Z]\"\
    , function(ch) return #ch end):gsub(\".\", function(s) return tonumber(s) end))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmjodk11.lua:18:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpwmjodk11.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return s:gsub(\"%a\",function(c)\n    local\
    \ int = c:byte()\n    if int >= 65 and int <= 90 then\n      return int\n    end\n\
    \  end):gsub(\"%d+\",function(x)\n    return (x:len()>=1 and x:len() or 0)\n \
    \ end):sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpas6anzp1.lua:12:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmpas6anzp1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpas6anzp1.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdylc345.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppdylc345.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ n = string.byte(s, i)\n    if n >= 65 and n <= 90 then\n      sum = sum + n\n\
    \    end\n  end\n  return sum\nend\nprint(digitSum(\"woArBld\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "131\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local total = 0\n  local i = 1\n  while i\
    \ <= #s do\n    if string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then\n\
    \      total = total + string.byte(s, i)\n    end\n    i = i + 1\n  end\n  return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, s:len() do\n\
    \        local c = s:sub(i, i)\n        local ascii = string.byte(c)\n       \
    \ if ascii >= 65 and ascii <= 90 then\n            sum = sum + ascii\n       \
    \ end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return s:gsub(\"%l+\", \"\"):gsub(\"%a\"\
    , function(x) return x:byte() end):gsub(\"%d+\", function(x) return tonumber(x)\
    \ end):reduce(function(x, y) return x + y end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppmj2vnbr.lua:12:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmppmj2vnbr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppmj2vnbr.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local result = 0\n    for char in s:gmatch(\"\
    .\") do\n        if (char:match(\"%u\")) then\n            result = result + string.byte(char)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local code = string.byte(s, i)\n        if code > 64 and code < 91 then\n\
    \            sum = sum + code\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if s == nil or s == '' then return 0 end\n\
    \  local sum = 0\n  for i = 1, string.len(s) do\n    local c = string.sub(s, i,\
    \ i)\n    local ch = string.byte(c)\n    if ch >= 65 and ch <= 90 then\n     \
    \ sum = sum + ch\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    if not s or #s == 0 then\n        return\
    \ 0\n    end\n    local sum = 0\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c:byte() > 64 and c:byte() < 91 then\n            sum = sum +\
    \ c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tif not type(s) == \"string\" then return\
    \ -1 end\n\t\n\tlocal sum = 0\n\t\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,\
    \ i)\n\t\t\n\t\tif c:match(\"%u\") then\n\t\t\tsum = sum + c:byte()\n\t\tend\n\
    \tend\n\t\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ n = string.byte(s, i)\n\t\tif n >= 65 and n <= 90 then\n\t\t\tsum = sum + n\n\
    \t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if not s or s == \"\" then return 0 end\n\
    \  local sum = 0\n  for i = 1, #s do\n    if s:byte(i) >= 65 and s:byte(i) <=\
    \ 90 then\n      sum = sum + s:byte(i)\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    return s:gsub(\"%l\", \"\"):gsub(\"%u\"\
    , function(l) return string.byte(l) end):sum()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdh9pmzqf.lua:12:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmpdh9pmzqf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdh9pmzqf.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local c = s:sub(i, i)\n        if c == c:upper() then\n            sum\
    \ = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07b0ozvr.lua:31:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmp07b0ozvr.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if type(s) ~= \"string\" then return 0 end\n\
    \  local sum = 0\n  for i = 1, string.len(s) do\n    local strCode = string.byte(s,\
    \ i)\n    if strCode >= 65 and strCode <= 90 then\n      sum = sum + strCode\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local t = 0\n  for i=1,string.len(s) do\n\
    \    local n = string.byte(s,i)\n    if n >= 65 and n <= 90 then\n      t = t\
    \ + n\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  --your code here\n  if #s==0 then return\
    \ 0 end\n  local char_to_num = {}\n  local sum = 0\n  for i=1,#s do\n    if char_to_num[s:sub(i,i)]==nil\
    \ then\n      char_to_num[s:sub(i,i)] = s:byte(i)\n    end\n    sum = sum + char_to_num[s:sub(i,i)]\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj4d1ne8.lua:29:\
    \ expected: 131, actual: 326\nstack traceback:\n\t/tmp/tmpyj4d1ne8.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkn251y7.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpjkn251y7.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1,#s do\n    local\
    \ c = s:sub(i,i)\n    local v = string.byte(c)\n    if v >= 65 and v <= 90 then\n\
    \      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    local num = char:byte()\n    if num >= 65 and num <=\
    \ 90 then\n      sum = sum + num\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, string.len(s)\
    \ do\n    local c = string.sub(s, i, i)\n    local n = string.byte(c)\n    if\
    \ n >= 65 and n <= 90 then\n      sum = sum + n\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_voiizy.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmps_voiizy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yj7jgb0.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp5yj7jgb0.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local result = 0\n    local charCode =\
    \ 0\n    for i = 1, #s do\n        charCode = string.byte(s, i)\n        if charCode\
    \ > 64 and charCode < 91 then\n            result = result + charCode\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return (s:gsub(\"%a\", function(c) return\
    \ c:byte() end):gsub(\"[a-z]\", \"\"):gsub(\"[A-Z]\", function(c) return c:byte()\
    \ - 64 end):gsub(\"%d\", function(d) return tonumber(d) end):gsub(\"(%d)(%d)(%d)(%d)(%d)(%d)(%d)(%d)(%d)\"\
    , function(d1, d2, d3, d4, d5, d6, d7, d8, d9) return tonumber(d1)+tonumber(d2)+tonumber(d3)+tonumber(d4)+tonumber(d5)+tonumber(d6)+tonumber(d7)+tonumber(d8)+tonumber(d9)\
    \ end):gsub(\"(%d)(%d)(%d)(%d)(%d)(%d)(%d)(%d)\", function(d1, d2, d3, d4, d5,\
    \ d6, d7, d8) return tonumber(d1)+tonumber(d2)+tonumber(d3)+tonumber(d4)+tonumber(d5)+tonumber(d6)+tonumber(d7)+tonumber(d8)\
    \ end):gsub(\"(%d)(%d)(%d)(%d)(%d)(%d)(%d)\", function(d1, d2, d3, d4, d5, d6,\
    \ d7) return tonumber(d1)+tonumber(d2)+tonumber(d3)+tonumber(d4)+tonumber(d5)+tonumber(d6)+tonumber(d7)\
    \ end):gsub(\"(%d)(%d)(%d)(%d)(%d)(%d)\", function(d1, d2, d3, d4, d5, d6) return\
    \ tonumber(d1)+tonumber(d2)+tonumber(d3)+tonumber(d4)+tonumber(d5)+tonumber(d6)\
    \ end):gsub(\"(%d)(%d)(%d)(%d)(%d)\", function(d1, d2, d3, d4, d5) return tonumber(d1\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2rxmql7x.lua:13: ')' expected (to close '(' at line 12) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 65\
    \ and n <= 90 then\n            sum = sum + n\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n   local acc = 0\n   for i = 1, #s do\n   \
    \   local c = s:sub(i, i)\n      if c == c:upper() then\n         acc = acc +\
    \ c:byte()\n      end\n   end\n   return acc\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ggidq2e.lua:31:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmp_ggidq2e.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    if s ~= \"\" then\n\
    \        for i = 1, #s do\n            local ch = string.byte(s, i)\n        \
    \    if ch >= 65 and ch <= 90 then\n                sum = sum + ch\n         \
    \   end\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    if type(s) ~= \"string\"\
    \ then\n        return 0\n    end\n    for i = 1, #s do\n        local char =\
    \ string.sub(s, i, i)\n        if char:match(\"%u\") then\n            sum = sum\
    \ + string.byte(char)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local res = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if string.byte(c) >= 65 and string.byte(c) <= 90 then\n\
    \      res = res + string.byte(c)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for c in s:gmatch('.') do\n\
    \    if c:byte() > 64 and c:byte() < 91 then\n      sum = sum + c:byte()\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if string.byte(c) > 64 and string.byte(c) < 91 then\n \
    \     sum = sum + string.byte(c)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ c = s:sub(i, i)\n\t\tif c:match(\"%u\") then\n\t\t\tsum = sum + c:byte()\n\t\
    \tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local n = string.byte(s, i)\n        if n >= 65 and n <= 90 then\n   \
    \         sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i=1, #s do\n   \
    \     local c = s:sub(i,i)\n        local n = c:byte()\n        if 65 <= n and\
    \ n <= 90 then\n            sum = sum + n\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for letter in s:gmatch(\"\
    %a\") do\n        local upper = letter:upper()\n        if upper == letter then\n\
    \            sum = sum + letter:byte()\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       if s:byte(i) >= 65 and s:byte(i) <= 90 then\n            sum = sum + s:byte(i)\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local c = s:sub(i, i)\n        if c:match(\"%u\") then\n            sum\
    \ = sum + c:byte()\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i=1, #s do\n   \
    \     local char = s:sub(i,i)\n        if char:byte() >= 65 and char:byte() <=\
    \ 90 then\n            sum = sum + char:byte()\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  --your code here\n  local s_sum = 0\n  for\
    \ i = 1, #s do\n    if (s:byte(i) >= 65 and s:byte(i) <= 90) then\n      s_sum\
    \ = s_sum + s:byte(i)\n    end\n  end\n  return s_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9grtr_m2.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp9grtr_m2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local result = 0\n    for i = 1, #s do\n\
    \        if (s:byte(i) >= 65 and s:byte(i) <= 90) then\n            result = result\
    \ + s:byte(i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, s:len() do\n\
    \        if s:byte(i) >= 65 and s:byte(i) <= 90 then\n            sum = sum +\
    \ s:byte(i)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for c in s:gmatch(\"\
    %u\") do\n        sum = sum + string.byte(c)\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    local x = string.byte(c)\n    if x >= 65 and x <= 90 then\n\
    \      sum = sum + x\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, string.len(s)\
    \ do\n        local code = string.byte(s, i)\n        if code >= 65 and code <=\
    \ 90 then\n            sum = sum + code\n        end\n    end\n    return sum\n\
    end\nassert(digitSum(\"\") == 0)\nassert(digitSum(\"abAB\") == 131)\nassert(digitSum(\"\
    abcCd\") == 67)\nassert(digitSum(\"helloE\") == 69)\nassert(digitSum(\"woArBld\"\
    ) == 131)\nassert(digitSum(\"aAaaaXa\") == 153)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return s:gsub(\"%l\", \"\"):gsub(\"%L\",\
    \ function(c) return string.byte(c) end):sum()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp23mevse1.lua:12:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmp23mevse1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp23mevse1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal total = 0\n\tfor i = 1, #s do\n\t\t\
    local ascii = string.byte(s, i)\n\t\tif ascii >= 65 and ascii <= 90 then\n\t\t\
    \ttotal = total + ascii\n\t\tend\n\tend\n\treturn total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    -- Add logic here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sx9eg9j.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_sx9eg9j.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if #s == 0 then return 0 end\n  local strlen\
    \ = #s\n  local ascii_array = {}\n  local sum = 0\n  for i = 1, strlen do\n  \
    \  table.insert(ascii_array, string.byte(s, i))\n  end\n  for _, v in ipairs(ascii_array)\
    \ do\n    if v > 64 and v < 91 then\n      sum = sum + v\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i=1,#s do\n    local\
    \ c = s:sub(i,i)\n    if c:find(\"%u\") then\n      sum = sum + string.byte(c)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tif type(s) ~= \"string\" then\n\t\treturn\
    \ nil\n\tend\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal code = string.byte(s,\
    \ i)\n\t\tif code >= 65 and code <= 90 then\n\t\t\tsum = sum + code\n\t\tend\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i=1,#s do\n    \
    \    local char = s:sub(i,i)\n        if char >= 'A' and char <= 'Z' then\n  \
    \          sum = sum + string.byte(char)\n        end\n    end\n    return sum\n\
    end\nassert(digitSum(\"\") == 0)\nassert(digitSum(\"abAB\") == 131)\nassert(digitSum(\"\
    abcCd\") == 67)\nassert(digitSum(\"helloE\") == 69)\nassert(digitSum(\"woArBld\"\
    ) == 131)\nassert(digitSum(\"aAaaaXa\") == 153)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    -- your code here\n    local sum = 0\n\
    \    local a = string.byte('A')\n    local b = string.byte('Z')\n    for i = 1,\
    \ #s do\n        local char = string.byte(s, i)\n        if char >= a and char\
    \ <= b then\n            sum = sum + char\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- write your code here\n  -- local s_len\
    \ = string.len(s)\n  -- local sum = 0\n  -- for i = 1, s_len do\n  --   local\
    \ c = string.sub(s, i, i)\n  --   local code = string.byte(c)\n  --   if code\
    \ >= 65 and code <= 90 then\n  --     sum = sum + code\n  --   end\n  -- end\n\
    \  -- return sum\n  return s:gsub(\"[^A-Z]\", \"\"):byte():sum()\nend\nprint(digitSum(\"\
    woArBld\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5jj5pfhk.lua:23: attempt to index a number value\nstack traceback:\n\
    \t/tmp/tmp5jj5pfhk.lua:23: in local 'digitSum'\n\t/tmp/tmp5jj5pfhk.lua:25: in\
    \ main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ v = s:byte(i)\n    if v >= 65 and v <= 90 then\n      sum = sum + v\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    local n = c:byte()\n    if n >= 65 and n <= 90 then\n \
    \     sum = sum + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local acc = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c == c:upper() then\n      acc = acc + c:byte()\n  \
    \  end\n  end\n  return acc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdod17z67.lua:31:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpdod17z67.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for _, v in pairs(s:upper():gmatch('.'))\
    \ do\n        sum = sum + v:byte()\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrb1ckiu.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpwrb1ckiu.lua:13: in local 'candidate'\n\t/tmp/tmpwrb1ckiu.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i=1, #s do\n   \
    \     local ascii = string.byte(s, i)\n        if ascii >= 65 and ascii <= 90\
    \ then\n            sum = sum + ascii\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for char in s:gmatch\".\"\
    \ do\n    local asc = string.byte(char)\n    if asc >= 65 and asc <= 90 then\n\
    \      sum = sum + asc\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    -- Write your code here\n    local sum\
    \ = 0\n    for _, v in pairs(s:byte(1, #s)) do\n        if v >= 65 and v <= 90\
    \ then\n            sum = sum + v\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkpvqsijh.lua:14:\
    \ bad argument #1 to 'pairs' (value expected)\nstack traceback:\n\t/tmp/tmpkpvqsijh.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpkpvqsijh.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor c in s:gmatch(\"%a\"\
    ) do\n\t\tsum = sum + c:byte()\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnse3i01.lua:23:\
    \ expected: 131, actual: 326\nstack traceback:\n\t/tmp/tmpqnse3i01.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local result = 0\n    for i = 1, #s do\n\
    \        local cur = s:sub(i, i)\n        if cur:upper() == cur then\n       \
    \     result = result + cur:byte()\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn76tdo9m.lua:31:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpn76tdo9m.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\t-- TODO: implement the function\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_x5rmoc.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpi_x5rmoc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if #s < 1 then return 0 end\n  local n =\
    \ 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:match('%u') then\n\
    \      n = n + string.byte(c)\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if s == nil or s == '' then return 0 end\n\
    \  return s:gsub(\"%l+\", \"\")\n    :gsub(\"%u+\", function(s) return s:byte()\
    \ end)\n    :gsub(\"%d+\", function(n) return tonumber(n) end)\n    :gsub(\"%s+\"\
    , \"\")\n    :gsub(\"[^%d+]\", \"\")\n    :gsub(\"%d\", function(n) return tonumber(n)\
    \ end)\n    :gsub(\"([%d]+)\", function(n) return tonumber(n) end)\n    :gsub(\"\
    %d\", function(n) return tonumber(n) end)\n    :gsub(\".\", function(n) return\
    \ tonumber(n) end)\n    :gsub(\"()\", function(n) return tonumber(n) end)\n  \
    \  :gsub(\"(%d)\", function(n) return tonumber(n) end)\n    :gsub(\"([%d]+)\"\
    , function(n) return tonumber(n) end)\n    :gsub(\"([%d%s]+)\", function(n) return\
    \ tonumber(n) end)\n    :gsub(\"%d\", function(n) return tonumber(n) end)\n  \
    \  :gsub(\"%d\", function(n) return tonumber(n) end)\n    :gsub(\"%d\", function(n)\
    \ return tonumber(n) end)\n    :gsub(\"%d\", function(n) return tonumber(n) end)\n\
    \    :gsub(\"%d\", function(n) return tonumber(n) end)\n    :gsub(\"%d\", function(n)\
    \ return tonumber(n) end)\n    :gsub(\"%d\", function(n) return tonumber(n) end)\n\
    \    :gsub(\"%d\", function(n) return tonumber(n) end)\n    :gsub(\"%d\", function(n)\
    \ return tonumber(n) end)\n    :gsub(\"%d\", function(n) return tonumber(n) end)\n\
    \    :gsub(\"%d\", function(n) return tonumber(n) end)\n    :gsub(\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmt648br2.lua:37: unfinished string near '\"'\n"
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local s_len = string.len(s)\n    local\
    \ sum = 0\n    for i = 1, s_len do\n        local char = string.sub(s, i, i)\n\
    \        local char_byte = string.byte(char)\n        if char_byte >= 65 and char_byte\
    \ <= 90 then\n            sum = sum + char_byte\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  -- your code\n  local sum = 0\n  for i =\
    \ 1, #s do\n  \tif string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then\n\
    \  \t\tsum = sum + string.byte(s, i)\n  \tend\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    local ci = c:byte()\n    if ci >= 65 and ci <= 90 then\n\
    \      sum = sum + ci\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for c in s:gmatch\".\" do\n\
    \    if c:byte() > 64 and c:byte() < 91 then\n      sum = sum + c:byte()\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for c in s:gmatch(\".\"\
    ) do\n    if c:byte() >= 65 and c:byte() <= 90 then\n      sum = sum + c:byte()\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local val = 0\n    for i = 1, #s do\n \
    \       local c = s:sub(i, i)\n        if c:find(\"%u\") then\n            val\
    \ = val + string.byte(c)\n        end\n    end\n    return val\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, s:len() do\n\t\
    \tlocal c = s:sub(i, i)\n\t\tlocal code = c:byte()\n\t\tif code > 64 and code\
    \ < 91 then sum = sum + code end\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal res = 0\n\tif s == nil or s == \"\"\
    \ then\n\t\treturn res\n\tend\n\tlocal a = string.byte(s, 1, -1)\n\tfor i = 1,\
    \ #a do\n\t\tif a[i] >= 65 and a[i] <= 90 then\n\t\t\tres = res + a[i]\n\t\tend\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp90khl9b5.lua:17:\
    \ attempt to get length of a number value (local 'a')\nstack traceback:\n\t/tmp/tmp90khl9b5.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp90khl9b5.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c:match('%u') then\n      sum = sum + c:byte()\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvovp9uqj.lua:19:\
    \ expected: 131, actual: 0\nstack traceback:\n\t/tmp/tmpvovp9uqj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i=1,#s do\n    \
    \    if s:byte(i) >= 65 and s:byte(i) <= 90 then\n            sum = sum + s:byte(i)\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\treturn s:gsub('%a', ''):gsub('%A', function(c)\
    \ return string.byte(c) end):gsub('%d+', function(n) return tonumber(n) end):sum()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsh73njk1.lua:12:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmpsh73njk1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpsh73njk1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    if\
    \ (string.byte(s, i) >= 65 and string.byte(s, i) <= 90) then\n      sum = sum\
    \ + string.byte(s, i)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ sval = string.byte(s, i)\n    if sval >= 65 and sval <= 90 then\n      sum =\
    \ sum + sval\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\treturn s:gsub('[^%u]', ''):gsub('.', function(x)\
    \ return x:byte() end):sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd81bo9e1.lua:12:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmpd81bo9e1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpd81bo9e1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s do\n \
    \       local ch = s:sub(i, i)\n        if ch >= 'A' and ch <= 'Z' then\n    \
    \        sum = sum + ch:byte()\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tlocal sum = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwkkir849.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, s:len() do\n\
    \    local n = s:byte(i)\n    if n >= 65 and n <= 90 then\n      sum = sum + n\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, string.len(s)\
    \ do\n    local ascii = string.byte(s, i)\n    if ascii >= 65 and ascii <= 90\
    \ then\n      sum = sum + ascii\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if char:upper() == char then\n      sum = sum + string.byte(char)\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnluw7dwf.lua:31:\
    \ expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpnluw7dwf.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  if #s == 0 then return 0 end\n  local t =\
    \ {}\n  for i = 1, #s do\n    t[i] = string.byte(s, i)\n  end\n  local sum = 0\n\
    \  for i = 1, #t do\n    if t[i] >= 65 and t[i] <= 90 then\n      sum = sum +\
    \ t[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\tif not s or type(s) ~= \"string\" then\n\t\
    \treturn 0\n\tend\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,\
    \ i)\n\t\tif c:match(\"%u\") then\n\t\t\tsum = sum + c:byte()\n\t\tend\n\tend\n\
    \treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if char:byte() >= 65 and char:byte() <= 90 then\n  \
    \    sum = sum + char:byte()\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n    local upper = {}\n    for i = 1, string.len(s)\
    \ do\n        if string.match(s, \"[A-Z]\") then\n            local x = string.byte(s)\n\
    \            table.insert(upper, x)\n        end\n    end\n    local sum = 0\n\
    \    for i = 1, #upper do\n        sum = sum + upper[i]\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv86vj4b.lua:30:\
    \ expected: 131, actual: 388\nstack traceback:\n\t/tmp/tmplv86vj4b.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return s:gsub(\"[^A-Z]\", \"\")\n    :gsub(\"\
    %c\", function(x) return x:byte() end)\n    :gsub(\"%d+\", function(x) return\
    \ tonumber(x) end)\n    :gsub(\"(%d+)%d+\", function(x) return tonumber(x) end)\n\
    \    :gsub(\"%d+\", function(x) return tonumber(x) end)\n    :gsub(\"%d\", function(x)\
    \ return tonumber(x) end)\n    :gsub(\"%d+\", function(x) return tonumber(x) end)\n\
    \    :gsub(\"%d\", function(x) return tonumber(x) end)\n    :gsub(\"%d+\", function(x)\
    \ return tonumber(x) end)\n    :gsub(\"%d\", function(x) return tonumber(x) end)\n\
    \    :gsub(\"%d+\", function(x) return tonumber(x) end)\n    :gsub(\"%d\", function(x)\
    \ return tonumber(x) end)\n    :gsub(\"%d+\", function(x) return tonumber(x) end)\n\
    \    :gsub(\"%d\", function(x) return tonumber(x) end)\n    :gsub(\"%d+\", function(x)\
    \ return tonumber(x) end)\n    :gsub(\"%d\", function(x) return tonumber(x) end)\n\
    \    :gsub(\"%d+\", function(x) return tonumber(x) end)\n    :gsub(\"%d\", function(x)\
    \ return tonumber(x) end)\n    :gsub(\"%d+\", function(x) return tonumber(x) end)\n\
    \    :gsub(\"%d\", function(x) return tonumber(x) end)\n    :gsub(\"%d+\", function(x)\
    \ return tonumber(x) end)\n    :gsub(\"%d\", function(x) return tonumber(x) end)\n\
    \    :gsub(\"%d+\", function(x) return tonumber(x) end)\n    :gsub(\"%d\", function(x)\
    \ return tonumber(x\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp97az0h_b.lua:36: ')' expected (to close '(' at line 35) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for c in s:gmatch(\"%u\"\
    ) do\n    sum = sum + string.byte(c)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  return string.gsub(s, \"[^A-Z]\", \"\")\n\
    \    :gsub(\".\", function(c) return string.byte(c) end)\n    :gsub(\"%d+\", function(x)\
    \ return math.floor(x) end)\n    :gsub(\"%d+\", function(x) return tonumber(x)\
    \ end)\n    :gsub(\"(%d+)(%d+)\", function(x, y) return tonumber(x) + tonumber(y)\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0klwdva3.lua:22:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmp0klwdva3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    if\
    \ string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then\n      sum = sum +\
    \ string.byte(s, i)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    local n = string.byte(c)\n    if n >= 65 and n <= 90 then\n\
    \      sum = sum + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'),\
    \ 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'),\
    \ 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate('\
    \ How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local sum = 0\n  for i = 1, #s do\n    local\
    \ n = string.byte(s, i)\n    if n >= 65 and n <= 90 then\n      sum = sum + n\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n  local total = 0\n  local i = 1\n  while i\
    \ <= #s do\n    local c = s:sub(i, i)\n    if c:match(\"%u\") then\n      total\
    \ = total + c:byte()\n    end\n    i = i + 1\n  end\n  return total\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
    \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
    helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") =>\
    \ 153\nlocal function digitSum(s)\n\t-- Your code here\n\tlocal result = 0\n\t\
    for i = 1, #s do\n\t\tif string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then\n\
    \t\t\tresult = result + string.byte(s, i)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),\
    \ 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
    \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
    \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
    \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
