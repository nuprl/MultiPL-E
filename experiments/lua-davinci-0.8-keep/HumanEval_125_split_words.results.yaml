name: HumanEval_125_split_words
language: lua
results:
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local list = {}\n  for i = 1, #txt do\n\
    \    local c = txt:sub(i, i)\n    if c == ' ' then\n      list[#list + 1] = txt:sub(1,\
    \ i - 1)\n      txt = txt:sub(i + 1)\n      i = 0\n    elseif c == ',' then\n\
    \      list[#list + 1] = txt:sub(1, i - 1)\n      txt = txt:sub(i + 1)\n     \
    \ i = 0\n    end\n  end\n  local count = 0\n  if #list > 0 then\n    return list\n\
    \  else\n    for i = 1, #txt do\n      local v = txt:sub(i, i)\n      if string.byte(v)\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpci2ckh8a.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpci2ckh8a.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\" \") then return txt:split(\"\
    \ \") end\n\tif txt:find(\",\") then return txt:split(\",\") end\n\tlocal count\
    \ = 0\n\tfor i=1,#txt do\n\t\tif txt:byte(i) % 2 == 1 then count = count + 1 end\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgbpwmi1b.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpgbpwmi1b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgbpwmi1b.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result\n    if txt:find(\" \"\
    ) then\n        result = {}\n        for word in txt:gmatch(\"[^%s]+\") do\n \
    \           table.insert(result, word)\n        end\n    elseif txt:find(\",\"\
    ) then\n        result = {}\n        for word in txt:gmatch(\"[^,]+\") do\n  \
    \          table.insert(result, word)\n        end\n    else\n        result =\
    \ 0\n        for c in txt:gmatch(\"[^%s]+\") do\n            local odd_ord = string.byte(c)\
    \ % 2 == 1\n            if odd_ord then\n                result = result + 1\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa62f6ji1.lua:39:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpa62f6ji1.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") then\n    return split(txt,\
    \ \" \")\n  elseif txt:find(\",\") then\n    return split(txt, \",\")\n  else\n\
    \    local count = 0\n    for i = 1, txt:len() do\n      if txt:sub(i, i):lower():byte()\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkakk7_uq.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpkakk7_uq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpkakk7_uq.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local ret = {}\n  local txt = txt:gsub(\"\
    [%s,]\", \" \")\n  local txt_array = txt:split(\" \")\n  local lower_odd_count\
    \ = 0\n  for k, v in pairs(txt_array) do\n    if tonumber(v) ~= nil then\n   \
    \   return tonumber(v)\n    end\n    if v:len() == 1 then\n      local v_num =\
    \ string.byte(v, 1) - 96\n      if v_num % 2 == 1 then\n        lower_odd_count\
    \ = lower_odd_count + 1\n      end\n    end\n    table.insert(ret, v)\n  end\n\
    \  if lower_odd_count > 0 then\n    return lower_odd_count\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjs2f32zf.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpjs2f32zf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpjs2f32zf.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdydely34.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpdydely34.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result = {}\n    for w in txt:gmatch(\"\
    [^%s]+\") do\n        result[#result + 1] = w\n    end\n    if (#result == 0)\
    \ then\n        local count = 0\n        for c in txt:gmatch(\"[^,]+\") do\n \
    \           result[#result + 1] = c\n        end\n        if (#result == 0) then\n\
    \            for i = 1, #txt do\n                if (i % 2 ~= 0) then\n      \
    \              count = count + 1\n                end\n            end\n     \
    \       return count\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjx_libk.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpgjx_libk.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local res = {}\n    local tmp = txt:gsub(\"\
    %s\",\",\")\n    if tmp == txt then\n        tmp = txt:gsub(\",\",\"\")\n    \
    \    if tmp == txt then\n            local count = 0\n            for i = 1,#tmp\
    \ do\n                if tmp:byte(i) % 2 == 1 then\n                    count\
    \ = count + 1\n                end\n            end\n            return count\n\
    \        end\n    end\n    for str in string.gmatch(tmp, \"[^,]+\") do\n     \
    \   table.insert(res,str)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgurprey2.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Helloworld!\"}\nstack traceback:\n\
    \t/tmp/tmpgurprey2.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if not txt:find(\"%s\") then\n     \
    \   return #txt\n    end\n    local result = {}\n    for word in txt:gmatch(\"\
    %w+\") do\n        result[#result + 1] = word\n    end\n    return result\nend\n\
    assert.same({\"Hello\", \"world!\"}, split_words(\"Hello world!\"))\nassert.same({\"\
    Hello\", \"world!\"}, split_words(\"Hello,world!\"))\nassert.same(3, split_words(\"\
    abcdef\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb38mppyq.lua:18: attempt to index a function value (global\
    \ 'assert')\nstack traceback:\n\t/tmp/tmpb38mppyq.lua:18: in main chunk\n\t[C]:\
    \ in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- your code here\n  print(txt)\n  return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "Hello world!\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98y2n7xa.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmp98y2n7xa.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find('%s') then\n        return\
    \ txt:split('%s')\n    elseif txt:find(',') then\n        return txt:split(',')\n\
    \    else\n        local result = 0\n        for i = 1, txt:len() do\n       \
    \     if i % 2 == 1 and txt:sub(i, i):lower() == txt:sub(i, i) then\n        \
    \        result = result + 1\n            end\n        end\n        return result\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj8ai8qyh.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpj8ai8qyh.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpj8ai8qyh.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local wordList = {}\n  if txt:find(\"\
    %s\") then\n    for word in txt:gmatch(\"%S+\") do\n      table.insert(wordList,\
    \ word)\n    end\n  elseif txt:find(\",\") then\n    for word in txt:gmatch(\"\
    [^,]+\") do\n      table.insert(wordList, word)\n    end\n  else\n    local count\
    \ = 0\n    for c in txt:gmatch(\".\") do\n      local n = string.byte(c) - 97\n\
    \      if n % 2 == 0 then\n        count = count + 1\n      end\n    end\n   \
    \ return count\n  end\n  return wordList\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn68gwvn.lua:39:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpfn68gwvn.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local list = {}\n    for word in txt:gmatch(\"\
    %S+\") do\n        table.insert(list, word)\n    end\n    if #list == 0 then\n\
    \        list = {}\n        for word in txt:gmatch(\"%a+\") do\n            table.insert(list,\
    \ word)\n        end\n        if #list == 0 then\n            local counter =\
    \ 0\n            for i = 1, #txt do\n                if txt:sub(i, i):byte() %\
    \ 2 == 1 then\n                    counter = counter + 1\n                end\n\
    \            end\n            return counter\n        end\n    end\n    return\
    \ list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_crfifi.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp1_crfifi.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if string.find(txt, ' ') then\n    \
    \    return string.split(txt, ' ')\n    elseif string.find(txt, ',') then\n  \
    \      return string.split(txt, ',')\n    else\n        local count = 0\n    \
    \    for i = 1, #txt do\n            if string.byte(txt, i) % 2 == 1 then\n  \
    \              count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpls9h_95b.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpls9h_95b.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpls9h_95b.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t-- return string.gmatch(txt, \"[^%s]+\"\
    )\n\tlocal m = txt:match(\"%s\")\n\tif m == nil then\n\t\tm = txt:match(\",\"\
    )\n\t\tif m == nil then\n\t\t\tlocal num = 0\n\t\t\tfor i = 1, #txt do\n\t\t\t\
    \tlocal s = txt:sub(i, i)\n\t\t\t\tlocal c = s:byte()\n\t\t\t\tif c % 2 == 1 then\n\
    \t\t\t\t\tnum = num + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn num\n\t\telse\n\t\
    \t\treturn txt:gmatch(\"[^,]+\")\n\t\tend\n\telse\n\t\treturn txt:gmatch(\"[^%s]+\"\
    )\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppiotrqnd.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x2327690\nstack traceback:\n\
    \t/tmp/tmppiotrqnd.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(' ') then\n        local\
    \ res = {}\n        for s in txt:gmatch('[^%s]+') do\n            table.insert(res,\
    \ s)\n        end\n        return res\n    elseif txt:find(',') then\n       \
    \ local res = {}\n        for s in txt:gmatch('[^,]+') do\n            table.insert(res,\
    \ s)\n        end\n        return res\n    else\n        local res = 0\n     \
    \   for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if string.byte(c)\
    \ % 2 == 1 then\n                res = res + 1\n            end\n        end\n\
    \        return res\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzmr_hd2.lua:41:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpfzmr_hd2.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local tokenize = txt:gmatch(\"%S+\"\
    )\n    local first_word = tokenize()\n    if first_word then\n        return {first_word,\
    \ tokenize()}\n    end\n    tokenize = txt:gmatch(\"[^,]+\")\n    first_word =\
    \ tokenize()\n    if first_word then\n        return {first_word, tokenize()}\n\
    \    end\n    local odd_count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        if c:lower() == c then\n            odd_count = odd_count + 1\n\
    \        end\n    end\n    return odd_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph537vxap.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmph537vxap.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    return string_split(txt,\
    \ \"%s\")\n  elseif txt:find(\",\") then\n    return string_split(txt, \",\")\n\
    \  else\n    local count = 0\n    for i = 1, #txt do\n      if txt:sub(i, i):lower():find(\"\
    [abcdefghijklmnopqrstuvwxyz]\") and i % 2 == 1 then\n        count = count + 1\n\
    \      end\n    end\n    return count\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1qv5cna.lua:10:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmp_1qv5cna.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_1qv5cna.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") then\n        return\
    \ txt:split(\" \")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local sum = 0\n        for i=1,#txt do\n            local\
    \ c = txt:byte(i)\n            if c>96 and c<123 and (c+i)%2==1 then\n       \
    \         sum = sum + 1\n            end\n        end\n        return sum\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpife089cu.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpife089cu.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpife089cu.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return txt:gsub(\"%S+\", function(t)\
    \ return t:lower():match(\"^[aeiouy].*[aeiouy]$\") and #t or t end)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rpa5zhk.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmp3rpa5zhk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  if not txt:find(\"\
    %s\") then\n    if not txt:find(\",\") then\n      return txt:gsub(\"[^a-z]\"\
    , \"\"):len()\n    else\n      return txt:gsub(\"[^,]\", \" \"):split(\" \")\n\
    \    end\n  else\n    return txt:gsub(\"[^ ]\", \" \"):split(\" \")\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_ht7_8q.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0_ht7_8q.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp0_ht7_8q.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t--if has whitespace\n\tif txt:find(\"\
    %s\") then\n\t\treturn txt:split(\"%s\")\n\t--if has comma\n\telseif txt:find(\"\
    ,\") then\n\t\treturn txt:split(\",\")\n\t--if not has whitespace or comma\n\t\
    else\n\t\tlocal sum = 0\n\t\tfor i=1, #txt do\n\t\t\tif ((txt:sub(i,i):lower():byte(1)-97)%2\
    \ == 1) then\n\t\t\t\tsum = sum + 1\n\t\t\tend\n\t\tend\n\t\treturn sum\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nv4akcf.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp6nv4akcf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6nv4akcf.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    return txt:split(\"\
    %s\")\n  elseif txt:find(\",\") then\n    return txt:split(\",\")\n  else\n  \
    \  return txt:lower():gsub(\"[a-z]\", {}):count()\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplumhx072.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmplumhx072.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmplumhx072.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(' ') then\n\t\treturn txt:split('\
    \ ')\n\telseif txt:find(',') then\n\t\treturn txt:split(',')\n\telse\n\t\tlocal\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\t\tlocal result = 0\n\t\tfor i=1,\
    \ #txt do\n\t\t\tif alphabet:find(txt:sub(i,i)) % 2 == 1 then\n\t\t\t\tresult\
    \ = result + 1\n\t\t\tend\n\t\tend\n\t\treturn result\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpro6xo39u.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpro6xo39u.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpro6xo39u.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local function sum(n, arr)\n    for _,\
    \ v in ipairs(arr) do\n      n = n + v\n    end\n    return n\n  end\n  local\
    \ function get_cnt(txt)\n    local res = {}\n    for i = 1, #txt do\n      local\
    \ ch = txt:sub(i, i)\n      local n = 0\n      if ch:find(\"[%a]\") then\n   \
    \     n = 1\n      end\n      table.insert(res, n)\n    end\n    return res\n\
    \  end\n  local function split(txt, sep)\n    local res = {}\n    local s = \"\
    \"\n    for i = 1, #txt do\n      local ch = txt:sub(i, i)\n      if ch == sep\
    \ then\n        table.insert(res, s)\n        s = \"\"\n      else\n        s\
    \ = s .. ch\n      end\n    end\n    table.insert(res, s)\n    return res\n  end\n\
    \  local splitted = split(txt, \" \")\n  if #splitted == 1 then\n    splitted\
    \ = split(txt, \",\")\n  end\n  if #splitted == 1 then\n    local cnt = sum(0,\
    \ get_cnt(txt))\n    if cnt == 0 then\n      cnt = nil\n    end\n    return cnt\n\
    \  end\n  return splitted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppax1xgfk.lua:63:\
    \ expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmppax1xgfk.lua:63: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local hasWhitespace = string.find(txt,\
    \ \" \") ~= nil\n    local hasComma = string.find(txt, \",\") ~= nil\n    if hasWhitespace\
    \ then\n        return txt:split(\" \")\n    elseif hasComma then\n        return\
    \ txt:split(\",\")\n    else\n        local count = 0\n        for i = 1, #txt\
    \ do\n            local ord = string.byte(txt, i) - string.byte(\"a\")\n     \
    \       if ord % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9f0t7u3.lua:12:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpx9f0t7u3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpx9f0t7u3.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local ret = {}\n    for i, v in ipairs(string.split(txt,\
    \ \" \")) do\n        if v ~= \"\" then\n            table.insert(ret, v)\n  \
    \      end\n    end\n    if #ret == 0 then\n        local ret = {}\n        for\
    \ i, v in ipairs(string.split(txt, \",\")) do\n            if v ~= \"\" then\n\
    \                table.insert(ret, v)\n            end\n        end\n        if\
    \ #ret == 0 then\n            local count = 0\n            for i = 1, #txt do\n\
    \                if string.find(\"abcdefghijklmnopqrstuvwxyz\", string.sub(txt,\
    \ i, i)) then\n                    local val = string.lower(string.sub(txt, i,\
    \ i))\n                    local val = string.byte(val) - string.byte(\"a\")\n\
    \                    if val % 2 == 1 then\n                        count = count\
    \ + 1\n                    end\n                end\n            end\n       \
    \     return count\n        else\n            return ret\n        end\n    else\n\
    \        return ret\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqcp_92ke.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpqcp_92ke.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpqcp_92ke.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0jzzny7.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpv0jzzny7.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk6jogcx.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpvk6jogcx.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(' ') then\n    return txt:gmatch('%S+')\n\
    \  elseif txt:find(',') then\n    return txt:gmatch('%S+')\n  else\n    return\
    \ txt:gsub('[^a-z]', ''):len() % 2\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudbmy6zs.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x210d3b0\nstack traceback:\n\
    \t/tmp/tmpudbmy6zs.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if string.find(txt, \" \") then\n    return\
    \ string.split(txt, \" \")\n  elseif string.find(txt, \",\") then\n    return\
    \ string.split(txt, \",\")\n  else\n    local odd_nums = 0\n    for n = 1, string.len(txt)\
    \ do\n      local letter = string.sub(txt, n, n)\n      local asc = string.byte(letter)\n\
    \      if (asc % 2 == 1) then\n        odd_nums = odd_nums + 1\n      end\n  \
    \  end\n    return odd_nums\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtsuwhah.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpbtsuwhah.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpbtsuwhah.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    for word in txt:gmatch('%w+')\
    \ do table.insert(words, word) end\n    if #words > 0 then return words end\n\
    \    for word in txt:gmatch('[^,]+') do table.insert(words, word) end\n    if\
    \ #words > 0 then return words end\n    local count = 0\n    for word in txt:gmatch('[a-z]')\
    \ do count = count + math.fmod(word:byte() - 97, 2) end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk72mjxzh.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpk72mjxzh.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t-- TODO: implement\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xad4mcs.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp9xad4mcs.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(' ') then\n        return\
    \ txt:split(' ')\n    elseif txt:find(',') then\n        return txt:split(',')\n\
    \    else\n        local res = 0\n        for i=1, #txt do\n            if txt:sub(i,\
    \ i):lower():byte() % 2 == 1 then\n                res = res + 1\n           \
    \ end\n        end\n        return res\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6681qkrx.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp6681qkrx.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6681qkrx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local list = {}\n  local w\n  if txt:find(\"\
    \ \") then\n    for w in txt:gmatch(\"[^ ]+\") do\n      list[#list+1] = w\n \
    \   end\n  elseif txt:find(\",\") then\n    for w in txt:gmatch(\"[^,]+\") do\n\
    \      list[#list+1] = w\n    end\n  else\n    local i = 1\n    local count =\
    \ 0\n    while i <= #txt do\n      local c = txt:sub(i,i)\n      local char =\
    \ c:byte()\n      if char >= 97 and char <= 122 and char % 2 == 1 then\n     \
    \   count = count + 1\n      end\n      i = i + 1\n    end\n    return count\n\
    \  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr8ury25.lua:43:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpwr8ury25.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t-- your code here\n\tlocal word, wordList\
    \ = '', {}\n\tlocal comma, notWhiteSpace = false, false\n\tfor i = 1, string.len(txt)\
    \ do\n\t\tif txt:sub(i, i) == ' ' then\n\t\t\tnotWhiteSpace = true\n\t\t\tif comma\
    \ then comma = false end\n\t\t\ttable.insert(wordList, word)\n\t\t\tword = ''\n\
    \t\telseif txt:sub(i, i) == ',' then\n\t\t\tcomma = true\n\t\t\tif notWhiteSpace\
    \ then notWhiteSpace = false end\n\t\t\ttable.insert(wordList, word)\n\t\t\tword\
    \ = ''\n\t\telse\n\t\t\tword = word .. txt:sub(i, i)\n\t\tend\n\tend\n\ttable.insert(wordList,\
    \ word)\n\tif notWhiteSpace or comma then\n\t\treturn wordList\n\telse\n\t\tlocal\
    \ n = 0\n\t\tfor i = 1, string.len(txt) do\n\t\t\tif string.byte(txt:sub(i, i))\
    \ % 2 == 1 then\n\t\t\t\tn = n + 1\n\t\t\tend\n\t\tend\n\t\treturn n\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx3ycotp.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpzx3ycotp.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(' ') then\n        return\
    \ txt:split(' ')\n    elseif txt:find(',') then\n        return txt:split(',')\n\
    \    else\n        return txt:gsub('%l', ''):len()\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplkxlslq4.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmplkxlslq4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmplkxlslq4.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local counter = 0\n        for k = 1, #txt do\n      \
    \      if k % 2 == 1 then\n                counter = counter + 1\n           \
    \ end\n        end\n        return counter\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphzbaf8_f.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmphzbaf8_f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphzbaf8_f.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return (txt:match'%S+') and (txt:match('%S+')\
    \ and string.match(txt, '[,%s]')) and (txt:match'[%a]') and (txt:match'[%a]')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lt2ali7.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"H\"\nstack traceback:\n\t/tmp/tmp9lt2ali7.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqjt1h4_.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpgqjt1h4_.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(' ') then\n    return {txt:match(\"\
    ([^ ]+) +(.*)\")}\n  elseif txt:find(',') then\n    return {txt:match(\"([^,]+),(.*)\"\
    )}\n  else\n    local count = 0\n    for i=1,#txt do\n      if txt:byte(i) > 96\
    \ and txt:byte(i) < 123 and (txt:byte(i) - 97) % 2 == 1 then\n        count =\
    \ count + 1\n      end\n    end\n    return count\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\"%s\") then\n\t\treturn txt:split(\"\
    %s\")\n\telseif txt:find(\",\") then\n\t\treturn txt:split(\",\")\n\telse\n\t\t\
    local cnt = 0\n\t\tfor c in txt:gmatch(\".\") do\n\t\t\tif string.byte(c) % 2\
    \ == 1 then\n\t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\t\treturn cnt\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k8ri1qr.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp7k8ri1qr.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp7k8ri1qr.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local t = {}\n    local char = txt:find(\"\
    %s\")\n    if char then\n        t[1] = txt:sub(1, char-1)\n        t[2] = txt:sub(char)\n\
    \    else\n        char = txt:find(\",\")\n        if char then\n            t[1]\
    \ = txt:sub(1, char-1)\n            t[2] = txt:sub(char)\n        else\n     \
    \       t = 0\n            for i = 1, #txt do\n                local ch = txt:sub(i,\
    \ i)\n                if i % 2 ~= 0 and string.lower(ch) == ch then\n        \
    \            t = t + 1\n                end\n            end\n        end\n  \
    \  end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_5pm_7h.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \" world!\"}\nstack traceback:\n\
    \t/tmp/tmp2_5pm_7h.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6znh5x7s.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp6znh5x7s.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if #txt == 0 then return 0 end\n  local\
    \ has_white = txt:find(\"%s\")\n  local has_comma = txt:find(\",\")\n  if has_white\
    \ ~= nil then\n    return string.split(txt, \"%s\")\n  elseif has_comma ~= nil\
    \ then\n    return string.split(txt, \",\")\n  else\n    local result = 0\n  \
    \  local txt = txt:lower()\n    for i = 1, #txt do\n      local char = txt:sub(i,\
    \ i)\n      local n = string.byte(char) - string.byte(\"a\")\n      if n % 2 ==\
    \ 1 then\n        result = result + 1\n      end\n    end\n    return result\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzyi6anm4.lua:13:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpzyi6anm4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzyi6anm4.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local lst\n  lst = {}\n  for w in txt:gmatch(\"\
    %S+\") do\n    lst[#lst + 1] = w\n  end\n  if #lst > 0 then\n    return lst\n\
    \  end\n  lst = {}\n  for w in txt:gmatch(\"[^,]+\") do\n    lst[#lst + 1] = w\n\
    \  end\n  if #lst > 0 then\n    return lst\n  end\n  local cnt = 0\n  for c in\
    \ txt:gmatch(\"[a-z]\") do\n    if (c:byte() - 97) % 2 == 1 then\n      cnt =\
    \ cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7lmtc39.lua:37:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpp7lmtc39.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local function split(text, sep)\n  \
    \      local result = {}\n        for i in text:gmatch(\"[^\" .. sep .. \"]+\"\
    ) do\n            table.insert(result, i)\n        end\n        return result\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq3lndvam.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local ret = {}\n    local function split_on_comma(s)\n\
    \        local i = s:find(',')\n        if i then\n            return s:sub(1,\
    \ i - 1), s:sub(i + 1)\n        end\n        return s\n    end\n    if txt:find('\
    \ ') then\n        for s in txt:gmatch('%S+') do\n            table.insert(ret,\
    \ s)\n        end\n    else\n        local s, remainder = split_on_comma(txt)\n\
    \        table.insert(ret, s)\n        if remainder then\n            table.insert(ret,\
    \ remainder)\n        end\n    end\n    if #ret == 1 then\n        local ret2\
    \ = 0\n        for c in ret[1]:gmatch('.') do\n            if c:byte() - ord('a')\
    \ % 2 == 1 then\n                ret2 = ret2 + 1\n            end\n        end\n\
    \        return ret2\n    end\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrgnn1z6.lua:31:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpzrgnn1z6.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpzrgnn1z6.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") ~= nil then\n   \
    \     return txt:split(\" \")\n    elseif txt:find(\",\") ~= nil then\n      \
    \  return txt:split(\",\")\n    else\n        local count = 0\n        for i =\
    \ 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8v7x_cyi.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp8v7x_cyi.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8v7x_cyi.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") ~= nil then\n    return\
    \ txt:split(\" \")\n  elseif txt:find(\",\") ~= nil then\n    return txt:split(\"\
    ,\")\n  else\n    return txt:gsub(\"[^a-z]\", \"\"):len()\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsuvqr57r.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpsuvqr57r.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpsuvqr57r.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local sep = txt:find(\"%s\") and \"\
    %s\" or txt:find(\",\") and \",\" or \"\"\n    if #sep == 0 then\n        local\
    \ res = 0\n        for i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 ==\
    \ 1 then\n                res = res + 1\n            end\n        end\n      \
    \  return res\n    end\n    return txt:split(sep)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuc2ra1hs.lua:19:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpuc2ra1hs.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpuc2ra1hs.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    return txt:split(\"\
    %s\")\n  elseif txt:find(\",\") then\n    return txt:split(\",\")\n  else\n  \
    \  local count = 0\n    for i = 1, #txt do\n      if txt:byte(i) % 2 == 1 then\n\
    \        count = count + 1\n      end\n    end\n    return count\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb83306q1.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpb83306q1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpb83306q1.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxz6hrjn.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpwxz6hrjn.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return #txt:lower():gsub(\"[^a-z]\"\
    , \"\"):gsub(\"(.).?\", \"%1\"):gsub(\".\",\"%1?\"):gsub(\"?\",\"\")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkixyqxe.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 5\nstack traceback:\n\t/tmp/tmpjkixyqxe.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local re = rex.new(\"[a-z]+\")\n   \
    \ local re2 = rex.new(\"[a-z]\")\n    local re3 = rex.new(\"[ ,]\")\n    local\
    \ re4 = rex.new(\"[a-z]\")\n    local a,b,c\n    a = re:match(txt)\n    b = re2:match(txt)\n\
    \    c = re3:match(txt)\n    if a then return a end\n    if b then return b end\n\
    \    if c then return tonumber(c) end\n    if not a and not b and not c then return\
    \ re4:match(txt) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdi4c42c.lua:9:\
    \ attempt to index a nil value (global 'rex')\nstack traceback:\n\t/tmp/tmpwdi4c42c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwdi4c42c.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local res = {}\n    local re1 = (\"\
    ([^%s]+)\")\n    local re2 = (\"([^,]+)\")\n    local re3 = \"[a-z]\"\n    if\
    \ string.find(txt, \" \") ~= nil then\n        for w in string.gmatch(txt, re1)\
    \ do\n            table.insert(res, w)\n        end\n    elseif string.find(txt,\
    \ \",\") ~= nil then\n        for w in string.gmatch(txt, re2) do\n          \
    \  table.insert(res, w)\n        end\n    else\n        for i = 1, string.len(txt)\
    \ do\n            local w = string.sub(txt, i, i)\n            if string.find(w,\
    \ re3) ~= nil then\n                table.insert(res, w)\n            end\n  \
    \      end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykutihgj.lua:39:\
    \ expected: 3, actual: {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}\nstack traceback:\n\
    \t/tmp/tmpykutihgj.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    for w in txt:gmatch(\"\
    %S+\") do\n        table.insert(words, w)\n    end\n    return #words > 0 and\
    \ words or txt:gsub(\"[^a-z]\", \"\"):len()\nend\nassert(split_words(\"Hello world!\"\
    )[1] == \"Hello\")\nassert(split_words(\"Hello world!\")[2] == \"world!\")\nassert(split_words(\"\
    Hello,world!\")[1] == \"Hello\")\nassert(split_words(\"Hello,world!\")[2] == \"\
    world!\")\nassert(split_words(\"abcdef\") == 3)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxmp5t9jn.lua:17: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpxmp5t9jn.lua:17: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal a = 1\n\tlocal b = 1\n\tlocal c\
    \ = {}\n\tlocal d = 1\n\tlocal e = 1\n\tlocal f = 1\n\tfor a = 1, #txt do\n\t\t\
    if txt:sub(a, a) == \" \" then\n\t\t\tb = 1\n\t\t\tc[#c + 1] = txt:sub(d, a -\
    \ 1)\n\t\t\td = a + 1\n\t\telseif txt:sub(a, a) == \",\" then\n\t\t\tb = 2\n\t\
    \t\tc[#c + 1] = txt:sub(d, a - 1)\n\t\t\td = a + 1\n\t\telseif b == 1 and txt:sub(a,\
    \ a) >= \"a\" and txt:sub(a, a) <= \"z\" then\n\t\t\tif math.fmod(e, 2) == 1 then\n\
    \t\t\t\tf = f + 1\n\t\t\tend\n\t\t\te = e + 1\n\t\tend\n\tend\n\tif b == 1 then\n\
    \t\treturn f\n\telse\n\t\tc[#c + 1] = txt:sub(d, #txt)\n\t\treturn c\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprv057_f.lua:42:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 6\nstack traceback:\n\t/tmp/tmpprv057_f.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        return txt:lower():count(\"[acegikmoqsuwy]\")\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkike0811.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpkike0811.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpkike0811.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local word = ''\n\
    \  local letters = {}\n  local has_comma = false\n  local has_whitespace = false\n\
    \  for char in txt:gmatch('%w') do\n    if char == ',' then\n      has_comma =\
    \ true\n      break\n    end\n    if char == ' ' then\n      has_whitespace =\
    \ true\n      break\n    end\n    table.insert(letters, char)\n  end\n  if has_whitespace\
    \ then\n    for char in txt:gmatch('%S+') do\n      table.insert(words, char)\n\
    \    end\n  elseif has_comma then\n    for char in txt:gmatch('%S+') do\n    \
    \  table.insert(words, char)\n    end\n  else\n    local letter_cnt = 0\n    for\
    \ i, letter in ipairs(letters) do\n      if (i % 2 == 0) then\n        letter_cnt\
    \ = letter_cnt + 1\n      end\n    end\n    return letter_cnt\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep3qyobx.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 5\nstack traceback:\n\t/tmp/tmpep3qyobx.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local odd = 0\n        for i = 1, #txt do\n          \
    \  if txt:byte(i) % 2 == 1 then\n                odd = odd + 1\n            end\n\
    \        end\n        return odd\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6ay0qww.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpi6ay0qww.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpi6ay0qww.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    for i = 1, #txt do\n        if string.match(txt[i],\
    \ \"%S\") then\n            local index_of_whitespace = string.find(txt, \"%s\"\
    )\n            if index_of_whitespace then\n                local words = string.split(txt,\
    \ \"%s\")\n                return words\n            else\n                local\
    \ index_of_comma = string.find(txt, \",\")\n                if index_of_comma\
    \ then\n                    local words = string.split(txt, \",\")\n         \
    \           return words\n                else\n                    local counter\
    \ = 0\n                    for i = 1, #txt do\n                        if string.byte(txt,\
    \ i) % 2 == 1 then\n                            counter = counter + 1\n      \
    \                  end\n                    end\n                    return counter\n\
    \                end\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6v9q2z5.lua:10:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpe6v9q2z5.lua:10: in local 'candidate'\n\t/tmp/tmpe6v9q2z5.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local pattern = string.match(txt, \"\
    ^%s+\") and \"%s+\" or \"[,]+\"\n    local words = {}\n    for word in string.gmatch(txt,\
    \ \"[^\" .. pattern .. \"]+\") do\n        words[#words + 1] = word\n    end\n\
    \    return #words == 0 and string.len(txt) or words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mg92u_4.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmp7mg92u_4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if string.find(txt, '%s') then\n    local\
    \ out = {}\n    local i = 1\n    for word in string.gmatch(txt, '%S+') do\n  \
    \    out[i] = word\n      i = i + 1\n    end\n    return out\n  elseif string.find(txt,\
    \ ',') then\n    local out = {}\n    local i = 1\n    for word in string.gmatch(txt,\
    \ '[^,]+') do\n      out[i] = word\n      i = i + 1\n    end\n    return out\n\
    \  else\n    local count = 0\n    for i = 1, string.len(txt) do\n      local letter\
    \ = string.sub(txt, i, i)\n      local index = string.byte(letter) - string.byte('a')\n\
    \      if index % 2 == 1 then\n        count = count + 1\n      end\n    end\n\
    \    return count\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ehe77g8.lua:47:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3ehe77g8.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local result = {}\n\
    \  local last_word = nil\n  local is_word = false\n  local word_length = 0\n \
    \ local char_count = 0\n  for i=1, string.len(txt) do\n    local char = string.sub(txt,\
    \ i, i)\n    if char == ' ' or char == ',' then\n      if is_word then\n     \
    \   table.insert(words, {last_word, word_length})\n        is_word = false\n \
    \       word_length = 0\n      end\n    else\n      if is_word then\n        word_length\
    \ = word_length + 1\n      else\n        is_word = true\n        last_word = char\n\
    \        word_length = 1\n      end\n    end\n  end\n  if is_word then\n    table.insert(words,\
    \ {last_word, word_length})\n  end\n  if #words == 0 then\n    for i=1, string.len(txt)\
    \ do\n      local char = string.sub(txt, i, i)\n      local index = string.byte(char)\
    \ - 97\n      if index % 2 == 0 then\n        char_count = char_count + 1\n  \
    \    end\n    end\n    return char_count\n  end\n  for i=1, #words do\n    local\
    \ word = words[i]\n    table.insert(result, word[1])\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qb_06f2.lua:56:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"H\", \"w\"}\nstack traceback:\n\
    \t/tmp/tmp4qb_06f2.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local last = 1\n \
    \ local spaces = txt:find(\"%s\")\n  local commas = txt:find(\",\")\n  if spaces\
    \ then\n    for i in txt:gmatch(\"%S+\") do\n      words[#words+1] = i\n    end\n\
    \  elseif commas then\n    for i in txt:gmatch(\"[^,]+\") do\n      words[#words+1]\
    \ = i\n    end\n  else\n    local n = 0\n    for i = 1,#txt do\n      local c\
    \ = txt:sub(i,i)\n      if not(c:find(\"%u\")) then\n        if (string.byte(c)\
    \ - 96) % 2 == 1 then\n          n = n + 1\n        end\n      end\n    end\n\
    \    return n\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69gkoj9z.lua:44:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp69gkoj9z.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        return string.lower(txt):gsub(\"[^a-z]\", \"\"):len()\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0l1skqh.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpu0l1skqh.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpu0l1skqh.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    return txt:split(\"\
    %s\")\n  elseif txt:find(\",\") then\n    return txt:split(\",\")\n  else\n  \
    \  return #txt:gsub(\"[^a-z]\", \"\")\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpve8berh2.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpve8berh2.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpve8berh2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local cnt = 0\n        for i = 1, #txt do\n          \
    \  if i % 2 == 1 then\n                if txt:sub(i, i):byte() > 96 and txt:sub(i,\
    \ i):byte() < 123 then\n                    cnt = cnt + 1\n                end\n\
    \            end\n        end\n        return cnt\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e7k4hc4.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp_e7k4hc4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_e7k4hc4.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\"%s\") then\n\t\tlocal t\
    \ = {};\n\t\tfor w in txt:gmatch(\"%S+\") do\n\t\t\ttable.insert(t, w);\n\t\t\
    end\n\t\treturn t;\n\telseif txt:find(\",\") then\n\t\tlocal t = {};\n\t\tfor\
    \ w in txt:gmatch(\"[^,]+\") do\n\t\t\ttable.insert(t, w);\n\t\tend\n\t\treturn\
    \ t;\n\telse\n\t\tlocal t = 0;\n\t\tfor i = 1, #txt do\n\t\t\tif txt:sub(i, i):byte()\
    \ % 2 == 1 then\n\t\t\t\tt = t + 1;\n\t\t\tend\n\t\tend\n\t\treturn t;\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm57nq2t.lua:40:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpzm57nq2t.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyxnvs08.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmppyxnvs08.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result = {}\n    local start =\
    \ 0\n    local _, stop = txt:find(\"[%s,]\")\n    if not stop then\n        local\
    \ counter = 0\n        for i = 1, txt:len() do\n            if txt:byte(i) % 2\
    \ == 1 then\n                counter = counter + 1\n            end\n        end\n\
    \        return counter\n    end\n    while stop do\n        result[#result +\
    \ 1] = txt:sub(start, stop - 1)\n        start = stop + 1\n        _, stop = txt:find(\"\
    [%s,]\", start)\n    end\n    result[#result + 1] = txt:sub(start)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94icu8k1.lua:35:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp94icu8k1.lua:35: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if #txt:gsub(\" \", \"\") > 0 then\n \
    \   return txt:split(\" \")\n  elseif #txt:gsub(\",\", \"\") > 0 then\n    return\
    \ txt:split(\",\")\n  else\n    local lower_count = 0\n    for i=1,26 do\n   \
    \   if txt:lower():count(string.char(i+96)) % 2 == 1 then\n        lower_count\
    \ = lower_count + 1\n      end\n    end\n    return lower_count\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprtarotcm.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmprtarotcm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprtarotcm.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local res = {}\n    if txt:find(' ')\
    \ then\n        res = txt:split(' ')\n    elseif txt:find(',') then\n        res\
    \ = txt:split(',')\n    else\n        local odd_count = 0\n        for i = 1,\
    \ txt:len() do\n            local c = txt:sub(i, i)\n            local o = c:lower():byte()\
    \ - 97\n            if o % 2 == 1 then\n                odd_count = odd_count\
    \ + 1\n            end\n        end\n        res = {odd_count}\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxhd4r4tq.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpxhd4r4tq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxhd4r4tq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    if txt:find(\"\
    %S\") then\n        for word in txt:gmatch(\"%S+\") do\n            table.insert(words,\
    \ word)\n        end\n    elseif txt:find(\",\") then\n        for word in txt:gmatch(\"\
    [^,]+\") do\n            table.insert(words, word)\n        end\n    else\n  \
    \      return string.len(txt:gsub(\"[^a-z]\", \"\"))\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vas04jo.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp4vas04jo.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local i = 1\n  for\
    \ w in txt:gmatch(\"%S+\") do\n    words[i] = w\n    i = i + 1\n  end\n  if next(words)\
    \ == nil then\n    for w in txt:gmatch(\"%a\") do\n      words[i] = w\n      i\
    \ = i + 1\n    end\n  end\n  if next(words) == nil then\n    words[1] = txt:gsub(\"\
    %s+\", \"\")\n  end\n  if #words == 0 then\n    return txt:len()\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe87shal.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpfe87shal.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if string.find(txt, ' ') then\n    \
    \    return split(txt, ' ')\n    elseif string.find(txt, ',') then\n        return\
    \ split(txt, ',')\n    else\n        local count = 0\n        for i = 1, string.len(txt)\
    \ do\n            if string.lower(string.sub(txt, i, i)) == string.char(96 + i)\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsz9jrg1.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpvsz9jrg1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpvsz9jrg1.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal t = {}\n\tlocal s = txt:gsub(\"\
    [,%s]+\", \",\")\n\tfor v in s:gmatch(\"%S+\") do\n\t\ttable.insert(t, v)\n\t\
    end\n\treturn #t == 1 and (s:match(\"%a\") and #s:match(\"(%a)%1*\") or s:match(\"\
    %d+\") and tonumber(s)) or t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnxchq_hi.lua:14:\
    \ attempt to get length of a nil value\nstack traceback:\n\t/tmp/tmpnxchq_hi.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpnxchq_hi.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t-- code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdu1w1m6w.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpdu1w1m6w.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    if string.find(txt,\
    \ \"%s\") then\n        local i = 1\n        for word in string.gmatch(txt, \"\
    %w+\") do\n            words[i] = word\n            i = i + 1\n        end\n \
    \   elseif string.find(txt, \",\") then\n        local i = 1\n        for word\
    \ in string.gmatch(txt, \"%w+\") do\n            words[i] = word\n           \
    \ i = i + 1\n        end\n    else\n        words = {}\n        local i = 1\n\
    \        for word in string.gmatch(txt, \"%w+\") do\n            words[i] = word\n\
    \            i = i + 1\n        end\n        local odds = 0\n        for _, v\
    \ in pairs(words) do\n            if string.find(v, \"a\") then\n            \
    \    odds = odds + 1\n            end\n            if string.find(v, \"c\") then\n\
    \                odds = odds + 1\n            end\n            if string.find(v,\
    \ \"e\") then\n                odds = odds + 1\n            end\n            if\
    \ string.find(v, \"g\") then\n                odds = odds + 1\n            end\n\
    \            if string.find(v, \"i\") then\n                odds = odds + 1\n\
    \            end\n            if string.find(v, \"k\") then\n                odds\
    \ = odds + 1\n            end\n            if string.find(v, \"m\") then\n   \
    \             odds = odds + 1\n            end\n            if string.find(v,\
    \ \"o\") then\n                odds = odds + 1\n            end\n            if\
    \ string.find(v, \"q\") then\n                odds = odds + 1\n            end\n\
    \            if string.find(v, \"s\") then\n                odds = odds + 1\n\
    \            end\n            if string.find(v, \"u\") then\n                odds\
    \ = odds + 1\n            end\n            if string.find(v, \"w\") then\n   \
    \             odds = odds + 1\n            end\n            if string.find(v,\
    \ \"y\") then\n                odds = odds + 1\n            end\n        end\n\
    \        return odds\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3p7nsiz.lua:79:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpu3p7nsiz.lua:79: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(' ') then\n    return txt:split('\
    \ ')\n  elseif txt:find(',') then\n    return txt:split(',')\n  else\n    local\
    \ count = 0\n    for i = 1, #txt do\n      if txt:sub(i, i):lower():byte() % 2\
    \ == 1 then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnesdclq0.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpnesdclq0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnesdclq0.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif #txt:gsub(\"%s+\", \"\") == #txt then\n\
    \t\tif #txt:gsub(\"%p+\", \"\") == #txt then\n\t\t\tlocal res = 0\n\t\t\tfor i\
    \ = 1, #txt do\n\t\t\t\tif ((string.byte(txt, i) - 96) % 2) == 1 then\n\t\t\t\t\
    \tres = res + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn res\n\t\telse\n\t\t\treturn\
    \ txt:split(\",\")\n\t\tend\n\telse\n\t\treturn txt:split(\" \")\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvblx1o0.lua:22:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpsvblx1o0.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpsvblx1o0.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local split_chars = txt:match('[,%s]')\n\
    \  local result = {}\n  if split_chars == nil then\n    for i = 1, #txt do\n \
    \     local ch = txt:sub(i, i)\n      local num = string.byte(ch) - string.byte('a')\n\
    \      if num % 2 == 1 then\n        table.insert(result, ch)\n      end\n   \
    \ end\n  else\n    local list = split(txt, split_chars)\n    for i = 1, #list\
    \ do\n      table.insert(result, list[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbxpbeug.lua:20:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpfbxpbeug.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpfbxpbeug.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return select(2, txt:gsub(\"[ ,]+\"\
    , \" \")) == 0 and (txt:gsub(\"%l\", \"\"):len() % 2 == 1 and 1 or 0) or txt:split(\"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp44nfls92.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp44nfls92.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp44nfls92.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    local t\
    \ = {}\n    for w in txt:gmatch(\"%S+\") do\n      table.insert(t, w)\n    end\n\
    \    return t\n  elseif txt:find(\",\") then\n    local t = {}\n    for w in txt:gmatch(\"\
    [^,]+\") do\n      table.insert(t, w)\n    end\n    return t\n  else\n    local\
    \ num = 0\n    for i = 1, #txt do\n      if txt:sub(i, i):byte() % 2 == 1 then\n\
    \        num = num + 1\n      end\n    end\n    return num\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4j5ia6x.lua:40:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpk4j5ia6x.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygnpca3t.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpygnpca3t.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if string.find(txt, \" \") then\n    return\
    \ {txt:match(\"([^%s]+) ([^%s]+)\")}\n  elseif string.find(txt, \",\") then\n\
    \    return {txt:match(\"([^,]+),([^,]+)\")}\n  else\n    local sum = 0\n    for\
    \ i = 1, #txt do\n      if (string.byte(txt, i) - 96) % 2 == 1 then\n        sum\
    \ = sum + 1\n      end\n    end\n    return sum\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph60vcwxi.lua:32:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmph60vcwxi.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") ~= nil then\n  \
    \      return txt:split(\"%s\")\n    elseif txt:find(\",\") ~= nil then\n    \
    \    return txt:split(\",\")\n    else\n        local letter_count = 0\n     \
    \   for i=1, string.len(txt) do\n            if string.byte(txt, i) % 2 == 1 then\n\
    \                letter_count = letter_count + 1\n            end\n        end\n\
    \        return letter_count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6o2mws2v.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp6o2mws2v.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6o2mws2v.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        local\
    \ words = {}\n        for word in txt:gmatch(\"%S+\") do\n            table.insert(words,\
    \ word)\n        end\n        return words\n    elseif txt:find(\",\") then\n\
    \        local words = {}\n        for word in txt:gmatch(\"[^,]+\") do\n    \
    \        table.insert(words, word)\n        end\n        return words\n    else\n\
    \        local odd_count = 0\n        for char in txt:gmatch(\"%l\") do\n    \
    \        if char:byte() % 2 == 1 then\n                odd_count = odd_count +\
    \ 1\n            end\n        end\n        return odd_count\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xvf6jh9.lua:40:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp4xvf6jh9.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if string.find(txt, ' ') then\n    return\
    \ string.split(txt, ' ')\n  elseif string.find(txt, ',') then\n    return string.split(txt,\
    \ ',')\n  else\n    local letters = string.split(txt, '')\n    local result =\
    \ 0\n    for k, v in pairs(letters) do\n      local i = string.lower(v)\n    \
    \  if string.byte(i) % 2 ~= 0 then\n        result = result + 1\n      end\n \
    \   end\n    return result\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxlxvikpy.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpxlxvikpy.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpxlxvikpy.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%S\") then\n        return\
    \ {txt:match(\"([^%s]+)%s*([^%s]*)\")}\n    elseif txt:find(\",\") then\n    \
    \    return {txt:match(\"([^,]+),%s*([^,]*)\")}\n    else\n        local count\
    \ = 0\n        for i = 1, txt:len() do\n            local letter = txt:sub(i,\
    \ i)\n            if letter ~= letter:upper() and string.byte(letter) % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0vrabjk.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\", \"\"}\nstack traceback:\n\
    \t/tmp/tmpv0vrabjk.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local function count(s)\n    local c =\
    \ 0\n    for i = 1, #s do\n      local o = ord(sub(s, i, i))\n      if o % 2 ==\
    \ 1 then\n        c = c + 1\n      end\n    end\n    return c\n  end\n  if find(txt,\
    \ ' ') then\n    return split(txt, ' ')\n  elseif find(txt, ',') then\n    return\
    \ split(txt, ',')\n  else\n    return count(txt)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fcyk204.lua:19:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmp1fcyk204.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp1fcyk204.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if not txt:find(\"%s\") then\n     \
    \   if not txt:find(\",\") then\n            local result = 0\n            for\
    \ c in txt:gmatch(\".\") do\n                if c:byte() - 97 % 2 == 1 then\n\
    \                    result = result + 1\n                end\n            end\n\
    \            return result\n        else\n            return { txt:match(\"([^,]+)\"\
    ) }\n        end\n    else\n        return { txt:match(\"([^%s]+)\") }\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs784lx9.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpvs784lx9.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") then\n    return txt:split(\"\
    \ \")\n  elseif txt:find(\",\") then\n    return txt:split(\",\")\n  else\n  \
    \  local out = 0\n    for c in txt:gmatch(\".\") do\n      if (c:byte()-96)%2\
    \ == 1 then\n        out = out + 1\n      end\n    end\n    return out\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptivx2zye.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmptivx2zye.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptivx2zye.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    return txt:split(\"\
    %s\")\n  elseif txt:find(\",\") then\n    return txt:split(\",\")\n  else\n  \
    \  local count = 0\n    for i = 1, #txt do\n      if txt:sub(i, i):lower():byte()\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_a76yjv.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpa_a76yjv.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpa_a76yjv.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal function no_whitespaces(txt)\n\t\
    \treturn #txt\n\tend\n\tlocal function split_on_whitespaces(txt)\n\t\tlocal output\
    \ = {}\n\t\tfor word in txt:gmatch(\"%S+\") do\n\t\t\ttable.insert(output, word)\n\
    \t\tend\n\t\treturn output\n\tend\n\tlocal function split_on_commas(txt)\n\t\t\
    local output = {}\n\t\tfor word in txt:gmatch(\"[^,]+\") do\n\t\t\ttable.insert(output,\
    \ word)\n\t\tend\n\t\treturn output\n\tend\n\tif txt:find(\"%s\") then\n\t\treturn\
    \ split_on_whitespaces(txt)\n\telseif txt:find(\",\") then\n\t\treturn split_on_commas(txt)\n\
    \telse\n\t\treturn no_whitespaces(txt)\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7418jacf.lua:42:\
    \ expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmp7418jacf.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(' ') then\n\t\treturn ssplit(txt,'\
    \ ')\n\telseif txt:find(',') then\n\t\treturn ssplit(txt,',')\n\telse\n\t\tlocal\
    \ count = 0\n\t\tfor i=1,#txt do\n\t\t\tif txt:sub(i,i):byte()%2 == 1 then\n\t\
    \t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprg45_sin.lua:10:\
    \ attempt to call a nil value (global 'ssplit')\nstack traceback:\n\t/tmp/tmprg45_sin.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprg45_sin.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if not txt:find(\" \") then\n    return\
    \ txt:find(\",\") and txt:split(\",\") or {}\n  end\n  local res = {}\n  for w\
    \ in txt:gmatch(\"%S+\") do\n    res[#res+1] = w\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsu28y0j5.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpsu28y0j5.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpsu28y0j5.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal a, t = {}, 0\n\tif txt:find(\" \"\
    ) then\n\t\tfor _, i in ipairs(txt:split(\" \")) do\n\t\t\ttable.insert(a, i)\n\
    \t\tend\n\telseif txt:find(\",\") then\n\t\tfor _, i in ipairs(txt:split(\",\"\
    )) do\n\t\t\ttable.insert(a, i)\n\t\tend\n\telse\n\t\tfor i = 1, txt:len() do\n\
    \t\t\tif txt:sub(i, i):byte() % 2 == 1 then\n\t\t\t\tt = t + 1\n\t\t\tend\n\t\t\
    end\n\t\treturn t\n\tend\n\treturn a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpye70y6zu.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpye70y6zu.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpye70y6zu.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local c = string.gmatch(txt, '%S+')\n\
    \  local count = 0\n  for word in c do\n    count = count + 1\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_oq4935.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpy_oq4935.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\treturn txt:gsub(\"[%s,]\", \" \"):gsub(\"\
    %s+\", \" \"):match(\"[^%s]*\") and txt:gsub(\"[%s,]\", \" \"):gsub(\"%s+\", \"\
    \ \"):split() or txt:match(\"^[a-z]*$\") and #txt:gsub(\"([a-z])\", \"%1\"):gsub(\"\
    (%a)(%a)\", \"%1%2\"):gsub(\"(%a)(%a)(%a)\", \"%1%2%3\"):gsub(\"(%a)(%a)(%a)(%a)\"\
    , \"%1%2%3%4\"):gsub(\"(%a)(%a)(%a)(%a)(%a)\", \"%1%2%3%4%5\"):gsub(\"(%a)(%a)(%a)(%a)(%a)(%a)\"\
    , \"%1%2%3%4%5%6\"):gsub(\"(%a)(%a)(%a)(%a)(%a)(%a)(%a)\", \"%1%2%3%4%5%6%7\"\
    ):gsub(\"(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)\", \"%1%2%3%4%5%6%7%8\"):gsub(\"(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)\"\
    , \"%1%2%3%4%5%6%7%8%9\"):gsub(\"(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)\", \"\
    %1%2%3%4%5%6%7%8%9%a\"):gsub(\"(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)\"\
    , \"%1%2%3%4%5%6%7%8%9%a%b\"):gsub(\"(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6u0e077z.lua:9: unfinished string near '\"(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a)(%a'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local function helper(fst, ...)\n  \
    \      if not fst then return end\n        if ... then\n            return fst,\
    \ helper(...)\n        else\n            return fst\n        end\n    end\n  \
    \  local function g(text)\n        local ptn = text:match(\"^%s*$\") and \"[^,]+\"\
    \ or \"[^%s,]+\"\n        return helper(text:match(ptn))\n    end\n    local words\
    \ = {}\n    for x in g, txt do\n        words[#words + 1] = x\n    end\n    if\
    \ #words > 0 then\n        return words\n    else\n        local c = 0\n     \
    \   for i = 1, #txt do\n            local ch = txt:sub(i, i)\n            local\
    \ n = ch:lower():byte() - 97\n            if n % 2 == 0 then\n               \
    \ c = c + 1\n            end\n        end\n        return c\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local ret = {};\n    for word in txt:gmatch(\"\
    %w+\") do\n        table.insert(ret, word);\n    end\n    if #ret == 0 then\n\
    \        for char in txt:gmatch(\"%a\") do\n            table.insert(ret, char);\n\
    \        end\n    end\n    return ret;\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytonv0n7.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpytonv0n7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local cnt = 0\n        for i=1,#txt do\n            if\
    \ i % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        return cnt\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprvgqpr5s.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmprvgqpr5s.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprvgqpr5s.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local r = {}\n  for e in txt:gmatch('[%w]+')\
    \ do\n    r[#r+1] = e\n  end\n  if #r > 0 then\n    return r\n  end\n  local n\
    \ = 0\n  for i=1,#txt do\n    if txt:sub(i,i):lower() == string.char(97 + i-1)\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_3s_h17.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmp0_3s_h17.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") then\n        return\
    \ string.explode(txt, \" \")\n    elseif txt:find(\",\") then\n        return\
    \ string.explode(txt, \",\")\n    else\n        local count = 0\n        for i\
    \ = 1, txt:len() do\n            if txt:byte(i) % 2 == 1 then\n              \
    \  count = count + 1\n            end\n        end\n        return count\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_88eh_a2.lua:10:\
    \ attempt to call a nil value (field 'explode')\nstack traceback:\n\t/tmp/tmp_88eh_a2.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_88eh_a2.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if not txt:find(' ') then\n    return\
    \ txt:find(',') and txt:split(',') or txt:gsub('[^%a]', ''):len()\n  end\n  return\
    \ txt:split(' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj1jsygv.lua:12:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpqj1jsygv.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpqj1jsygv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local res = {}\n  local found = false\n\
    \  local cnt = 0\n  for i = 1, #txt do\n    local ch = txt:sub(i, i)\n    if ch\
    \ == ' ' then\n      found = true\n      if #res > 0 then\n        table.insert(res,\
    \ table.concat(res))\n        res = {}\n      end\n    elseif ch == ',' then\n\
    \      found = true\n      if #res > 0 then\n        table.insert(res, table.concat(res))\n\
    \        res = {}\n      end\n    else\n      if not found then\n        if string.lower(ch)\
    \ == ch then\n          cnt = cnt + 1\n        end\n      end\n      table.insert(res,\
    \ ch)\n    end\n  end\n  if #res > 0 then\n    table.insert(res, table.concat(res))\n\
    \  end\n  if found then\n    return res\n  else\n    return cnt\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3hidej2.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"w\", \"o\", \"r\", \"l\", \"d\"\
    , \"!\", \"world!\"}\nstack traceback:\n\t/tmp/tmpf3hidej2.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return (txt:find(' ') and txt:find(',')\
    \ and txt:find('[%a]')) and txt:gmatch('%w+') or (txt:match('%a') and txt:find('[^%a]'))\
    \ and txt:gmatch('%w+') or txt:gmatch('%a')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvk8hws1.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0xe594e0\nstack traceback:\n\
    \t/tmp/tmphvk8hws1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local count = 0\n        for i = 1, #txt do\n        \
    \    if (string.byte(txt, i) - 96) % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp25k9hfjy.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp25k9hfjy.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp25k9hfjy.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") then\n        return\
    \ txt:split(\" \")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local n = 0\n        for i = 1, txt:len() do\n       \
    \     if txt:sub(i, i):byte() % 2 == 1 then\n                n = n + 1\n     \
    \       end\n        end\n        return n\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjaebqdgg.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpjaebqdgg.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjaebqdgg.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") ~= nil then\n    return\
    \ txt:split()\n  elseif txt:find(\",\") ~= nil then\n    return txt:split(\",\"\
    )\n  else\n    local sum = 0\n    for i = 1, txt:len() do\n      local index =\
    \ i % 2 == 0 and i or -i\n      if txt:sub(index, index):match(\"%a\") then\n\
    \        sum = sum + 1\n      end\n    end\n    return sum\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvzi4_eo.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpjvzi4_eo.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjvzi4_eo.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local word = ''\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' '\
    \ or c == ',' then\n            table.insert(words, word)\n            word =\
    \ ''\n        else\n            word = word .. c\n        end\n    end\n    if\
    \ #word > 0 then\n        table.insert(words, word)\n    end\n    if #words ==\
    \ 0 then\n        local count = 0\n        for i = 1, #txt do\n            local\
    \ c = txt:sub(i, i)\n            local j = c:byte() - 'a':byte()\n           \
    \ if j >= 0 and j < 26 and j % 2 == 0 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyxxb1axg.lua:27: unexpected symbol near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    return txt:gmatch(\"\
    [^%s]+\")\n  elseif txt:find(\",\") then\n    return txt:gmatch(\"[^,]+\")\n \
    \ else\n    local count = 0\n    for _,v in pairs(txt:lower():gmatch(\"[a-z]\"\
    )) do\n      if \"aeiou\":find(v) then\n        count = count +1\n      end\n\
    \    end\n    return count\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbvvbv4m8.lua:16: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    return string.split(txt,\
    \ \"%s\")\n  elseif txt:find(\",\") then\n    return string.split(txt, \",\")\n\
    \  else\n    local s = 0\n    for i = 1, #txt do\n      if string.byte(txt, i)\
    \ - string.byte(\"a\") % 2 == 1 then\n        s = s + 1\n      end\n    end\n\
    \    return s\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2trss2yc.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp2trss2yc.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2trss2yc.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if string.find(txt, \"%s\") then\n \
    \       return split(txt, \"%s\")\n    elseif string.find(txt, \",\") then\n \
    \       return split(txt, \",\")\n    else\n        local odds = 0\n        for\
    \ c in string.gmatch(txt, \".\") do\n            local ascii = string.byte(c)\n\
    \            if ascii % 2 == 1 then\n                odds = odds + 1\n       \
    \     end\n        end\n        return odds\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0irvvlv.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpq0irvvlv.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq0irvvlv.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9_yrjcw.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpu9_yrjcw.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\" \") then\n\t\treturn txt:split(\"\
    \ \")\n\telseif txt:find(\",\") then\n\t\treturn txt:split(\",\")\n\telse\n\t\t\
    local n = 0\n\t\tfor c in txt:gmatch(\".\") do\n\t\t\tlocal o = string.byte(c)\
    \ - string.byte(\"a\")\n\t\t\tif o % 2 == 1 then\n\t\t\t\tn = n + 1\n\t\t\tend\n\
    \t\tend\n\t\treturn n\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2a3bc_jk.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2a3bc_jk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2a3bc_jk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local _, comma_count = txt:gsub(',',\
    \ ',')\n    local _, white_space_count = txt:gsub(' ', ' ')\n    if white_space_count\
    \ == 0 and comma_count == 0 then\n        local count = 0\n        for i = 1,\
    \ txt:len() do\n            local ord = txt:byte(i) - 96\n            if ord %\
    \ 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    elseif white_space_count == 0 then\n        return\
    \ txt:split(',')\n    else\n        return txt:split(' ')\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgl3gme8p.lua:23:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpgl3gme8p.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpgl3gme8p.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ txt:split(\"%s\")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local t = {}\n        for i = 1, txt:len() do\n      \
    \      if (string.byte(txt, i) - 96) % 2 == 1 then\n                table.insert(t,\
    \ i)\n            end\n        end\n        return t\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77mm9iyz.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp77mm9iyz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp77mm9iyz.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:find(' ') and { txt:match('(%S+)%s*(.*)')\
    \ } or\n    txt:find(',') and { txt:match('(%S+),%s*(.*)') } or\n    #txt:gsub('[^a-z]',\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmrp3f75.lua:21:\
    \ expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpfmrp3f75.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(' ') then\n        local\
    \ result = {}\n        for w in txt:gmatch('%w+') do table.insert(result, w) end\n\
    \        return result\n    elseif txt:find(',') then\n        local result =\
    \ {}\n        for w in txt:gmatch('%w+') do table.insert(result, w) end\n    \
    \    return result\n    else\n        local counter = 0\n        for ch in txt:gmatch('.')\
    \ do\n            local pos = ch:byte() - 97\n            if pos % 2 == 1 then\
    \ counter = counter + 1 end\n        end\n        return counter\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qlb4cuh.lua:30:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmp_qlb4cuh.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result = {}\n    if txt:find('\
    \ ') then\n        for word in txt:gmatch('%w+') do\n            table.insert(result,\
    \ word)\n        end\n    elseif txt:find(',') then\n        for word in txt:gmatch('%w+')\
    \ do\n            table.insert(result, word)\n        end\n    else\n        local\
    \ count = 0\n        for letter in txt:gmatch('%w') do\n            if math.fmod(string.byte(letter)-97,\
    \ 2) == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_qzf90t.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmph_qzf90t.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local text = ''\n\
    \  local p = txt:match('%s+') and txt:match('%s+') or txt:match(',+') and txt:match(',+')\
    \ or ' '\n  for word in txt:gmatch('%S+') do\n    if word ~= p then\n      words[#words+1]\
    \ = word\n    end\n  end\n  if #words == 0 then\n    for ch in txt:gmatch('.')\
    \ do\n      if ch:lower() == ch then\n        local a = ch:byte()-97\n       \
    \ if a % 2 == 1 then\n          text = text..ch\n        end\n      end\n    end\n\
    \    words[1] = #text\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34d7baio.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp34d7baio.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") then\n    return txt:split(\"\
    \ \")\n  elseif txt:find(\",\") then\n    return txt:split(\",\")\n  else\n  \
    \  local s = 0\n    for i = 1, #txt do\n      local c = txt:sub(i, i)\n      local\
    \ n = c:byte() - string.byte(\"a\")\n      if n % 2 == 1 then\n        s = s +\
    \ 1\n      end\n    end\n    return s\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17cf9acj.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp17cf9acj.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp17cf9acj.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if not string.find(txt, \"%s\") then\n\
    \    if not string.find(txt, \",\") then\n      local sum = 0\n      for i = 1,\
    \ #txt do\n        if string.byte(txt, i) % 2 == 1 then\n          sum = sum +\
    \ 1\n        end\n      end\n      return sum\n    else\n      local t = {}\n\
    \      for w in string.gmatch(txt, \"([^,]+)\") do\n        table.insert(t, w)\n\
    \      end\n      return t\n    end\n  else\n    local t = {}\n    for w in string.gmatch(txt,\
    \ \"([^%s]+)\") do\n      table.insert(t, w)\n    end\n    return t\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhroqqu8.lua:42:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpuhroqqu8.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    for v in txt:gmatch('%S+')\
    \ do\n        table.insert(words, v)\n    end\n    if #words == 0 then\n     \
    \   local cnt = 0\n        for i = 1, #txt do\n            if txt:byte(i) - 0x61\
    \ & 1 ~= 0 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        return cnt\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqddgcl03.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpqddgcl03.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(' ') then\n    local str_tbl\
    \ = {}\n    for w in txt:gmatch('%S+') do\n      table.insert(str_tbl, w)\n  \
    \  end\n    return str_tbl\n  elseif txt:find(',') then\n    local str_tbl = {}\n\
    \    for w in txt:gmatch('%S+') do\n      table.insert(str_tbl, w)\n    end\n\
    \    return str_tbl\n  else\n    local cnt = 0\n    for i = 1, #txt do\n     \
    \ if txt:sub(i, i):lower():byte() % 2 == 1 then\n        cnt = cnt + 1\n     \
    \ end\n    end\n    return cnt\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhoqm96z.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpmhoqm96z.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif (txt:find(\"%s\")) then\n\t\treturn\
    \ txt:split(\"%s\")\n\telseif (txt:find(\",\")) then\n\t\treturn txt:split(\"\
    ,\")\n\telse\n\t\tlocal counter = 0\n\t\tfor i = 1, #txt do\n\t\t\tif (i % 2 ==\
    \ 1) then\n\t\t\t\tif (txt:sub(i, i):lower() == txt:sub(i, i)) then\n\t\t\t\t\t\
    counter = counter + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn counter\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7elssf6.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpv7elssf6.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpv7elssf6.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    if string.find(txt,\
    \ \" \") then\n        words = string.split(txt, \" \")\n    elseif string.find(txt,\
    \ \",\") then\n        words = string.split(txt, \",\")\n    else\n        local\
    \ count = 0\n        for i = 1, string.len(txt) do\n            local c = string.sub(txt,\
    \ i, i)\n            local cv = string.byte(c) - 97\n            if cv % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \      words = {count}\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwc014ts.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmplwc014ts.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplwc014ts.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = string.split(txt)\n  if\
    \ words[1] == nil then\n    if string.find(txt, ',') then\n      return string.split(txt,\
    \ ',')\n    else\n      local alphabet = {}\n      for i = 1, 26 do\n        alphabet[i]\
    \ = string.char(96 + i)\n      end\n      local count = 0\n      for i = 1, #txt\
    \ do\n        for j = 1, 26 do\n          if string.sub(txt, i, i) == alphabet[j]\
    \ then\n            if j % 2 == 1 then\n              count = count + 1\n    \
    \        end\n          end\n        end\n      end\n      return count\n    end\n\
    \  else\n    return words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84w3bh64.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp84w3bh64.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp84w3bh64.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- TODO: Implement\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppapu8k1i.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmppapu8k1i.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") then\n        return\
    \ txt:split(\" \")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local cnt = 0\n        for i = 1, #txt do\n          \
    \  if txt:lower():byte(i) % 2 == 1 then\n                cnt = cnt + 1\n     \
    \       end\n        end\n        return cnt\n    end\nend\nassert(same_elements(split_words(\"\
    Hello world!\"), { \"Hello\", \"world!\" }))\nassert(same_elements(split_words(\"\
    Hello,world!\"), { \"Hello\", \"world!\" }))\nassert(split_words(\"abcdef\") ==\
    \ 3)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyorgpoal.lua:10: attempt to call a nil value (method 'split')\n\
    stack traceback:\n\t/tmp/tmpyorgpoal.lua:10: in local 'split_words'\n\t/tmp/tmpyorgpoal.lua:23:\
    \ in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") then\n    return split(txt,\
    \ \" \")\n  elseif txt:find(\",\") then\n    return split(txt, \",\")\n  else\n\
    \    local ct = 0\n    for i = 1, txt:len() do\n      local c = txt:sub(i, i)\n\
    \      if c:byte() >= 97 and c:byte() <= 122 and math.fmod(c:byte() - 96, 2) ==\
    \ 1 then\n        ct = ct + 1\n      end\n    end\n    return ct\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdsw6frc2.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpdsw6frc2.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpdsw6frc2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\
    \"\n    local splitter = nil\n    for c in txt:gmatch(\".\") do\n        if splitter\
    \ and c == splitter then\n            splitter = nil\n            word = word\
    \ .. c\n            table.insert(words, word)\n            word = \"\"\n     \
    \   elseif c == \" \" or c == \",\" then\n            splitter = c\n         \
    \   if #word > 0 then\n                table.insert(words, word)\n           \
    \     word = \"\"\n            end\n        else\n            word = word .. c\n\
    \        end\n    end\n    if #word > 0 then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local i = 0\n        for c in txt:gmatch(\"\
    .\") do\n            if string.lower(c) == c and string.byte(c) - string.byte(\"\
    a\") % 2 == 1 then\n                i = i + 1\n            end\n        end\n\
    \        return i\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xedc0qh.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4xedc0qh.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if not txt:find(\"%s\") then\n    return\
    \ #txt\n  end\n  local res = {}\n  for i in txt:gmatch(\"%w+\") do\n    res[#res+1]\
    \ = i\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppeab9plk.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmppeab9plk.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\" \") then\n\t\treturn txt:split(\"\
    \ \")\n\telseif txt:find(\",\") then\n\t\treturn txt:split(\",\")\n\telse\n\t\t\
    local function odd_chars(s)\n\t\t\tlocal count = 0\n\t\t\tfor i = 1, s:len() do\n\
    \t\t\t\tif s:sub(i, i):byte() % 2 == 1 then\n\t\t\t\t\tcount = count + 1\n\t\t\
    \t\tend\n\t\t\tend\n\t\t\treturn count\n\t\tend\n\t\treturn odd_chars(txt)\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5zu9mfx.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpz5zu9mfx.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpz5zu9mfx.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local res = {}\n    local idx, idx2\
    \ = 0, 0\n    if txt:find(\" \") then\n        while true do\n            idx\
    \ = txt:find(\" \", idx + 1)\n            if idx then\n                res[#res\
    \ + 1] = txt:sub(idx2 + 1, idx - 1)\n                idx2 = idx\n            else\n\
    \                res[#res + 1] = txt:sub(idx2 + 1)\n                break\n  \
    \          end\n        end\n    elseif txt:find(\",\") then\n        while true\
    \ do\n            idx = txt:find(\",\", idx + 1)\n            if idx then\n  \
    \              res[#res + 1] = txt:sub(idx2 + 1, idx - 1)\n                idx2\
    \ = idx\n            else\n                res[#res + 1] = txt:sub(idx2 + 1)\n\
    \                break\n            end\n        end\n    else\n        local\
    \ odd = 0\n        for i = 1, #txt do\n            if txt:byte(i) - string.byte(\"\
    a\") % 2 == 1 then\n                odd = odd + 1\n            end\n        end\n\
    \        return odd\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcorxl62.lua:52:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpfcorxl62.lua:52: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local res = {}\n  local words = txt:split(\"\
    %s+\")\n  if #words == 1 then\n    words = txt:split(\",\")\n    if #words ==\
    \ 1 then\n      local count = 0\n      for i = 1, #txt do\n        if txt:sub(i,\
    \ i):match(\"[a-z]\") and i % 2 == 1 then\n          count = count + 1\n     \
    \   end\n      end\n      return count\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0xeyg_1d.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0xeyg_1d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp0xeyg_1d.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") then\n    local result\
    \ = {}\n    for word in txt:gmatch(\"%S+\") do\n      table.insert(result, word)\n\
    \    end\n    return result\n  elseif txt:find(\",\") then\n    local result =\
    \ {}\n    for word in txt:gmatch(\"[^,]+\") do\n      table.insert(result, word)\n\
    \    end\n    return result\n  else\n    local sum = 0\n    for i = 1, #txt do\n\
    \      if (string.byte(txt, i) % 2 == 1) then\n        sum = sum + 1\n      end\n\
    \    end\n    return sum\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppds9v4_x.lua:40:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmppds9v4_x.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local function split_string(s, d)\n\
    \        local t = {}\n        local i = 0\n        local f\n        local match\
    \ = '(.-)' .. d .. '()'\n        if string.find(s, d) == nil then\n          \
    \  return {s}\n        end\n        for sub, j in string.gmatch(s, match) do\n\
    \            i = i + 1\n            t[i] = sub\n            f = j\n        end\n\
    \        if i ~= 0 then\n            t[i + 1] = string.sub(s, f)\n        end\n\
    \        return t\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptrw16jax.lua:41: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if not txt then\n        return nil\n\
    \    end\n    local res = {}\n    local splitter = ' '\n    if not string.find(txt,\
    \ ' ') then\n        splitter = ','\n        if not string.find(txt, ',') then\n\
    \            return txt:lower():gsub('[^abcdefghijklmnopqrstuvwxyz]', ''):len()\
    \ % 2\n        end\n    end\n    for i in string.gmatch(txt, '[^' .. splitter\
    \ .. ']+') do\n        res[#res + 1] = i\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q3cmbp5.lua:33:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp4q3cmbp5.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") then\n    return string.split(txt,\
    \ \" \")\n  elseif txt:find(\",\") then\n    return string.split(txt, \",\")\n\
    \  else\n    local count = 0\n    for i = 1, #txt do\n      if (i % 2 == 1) and\
    \ (string.lower(txt:sub(i, i)) == txt:sub(i, i)) then\n        count = count +\
    \ 1\n      end\n    end\n    return count\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6yx5lcl5.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp6yx5lcl5.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6yx5lcl5.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\" \") then\n\t\treturn txt:split(\"\
    \ \")\n\telseif txt:find(\",\") then\n\t\treturn txt:split(\",\")\n\telse\n\t\t\
    return txt:gsub(\"[^a-z]\", \"\"):gsub(\"[a-z]\",function(x)if x:byte()%2~=0 then\
    \ return x end end):len()\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa9zq18dq.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpa9zq18dq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpa9zq18dq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- check if empty string\n  if txt ==\
    \ \"\" then\n    return 0\n  end\n  -- split by whitespace\n  local arr = string.split(txt,\
    \ \" \")\n  -- check if whitespace exists\n  if #arr > 1 then\n    return arr\n\
    \  end\n  -- split by comma\n  arr = string.split(txt, \",\")\n  -- check if comma\
    \ exists\n  if #arr > 1 then\n    return arr\n  end\n  -- split by lower case\
    \ char\n  arr = string.split(txt, \"[%l]\")\n  -- check if char exists\n  if #arr\
    \ > 1 then\n    -- get all odd characters from the string\n    local odd = ''\n\
    \    for i = 1, #txt do\n      if i % 2 == 1 then\n        odd = odd .. txt:sub(i,\
    \ i)\n      end\n    end\n    return #odd\n  end\n  -- no matching splitting rule,\
    \ return 0\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkog8qhzj.lua:14:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpkog8qhzj.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpkog8qhzj.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\" \") then\n\t\treturn split(txt,\
    \ \" \")\n\telseif txt:find(\",\") then\n\t\treturn split(txt, \",\")\n\telse\n\
    \t\tlocal c = 0\n\t\tfor i = 1, #txt do\n\t\t\tlocal c = string.byte(txt, i)\n\
    \t\t\tif c % 2 ~= 0 then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\tend\n\t\treturn c\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6z24do_n.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp6z24do_n.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6z24do_n.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") ~= nil then\n   \
    \     return txt:split(\" \")\n    elseif txt:find(\",\") ~= nil then\n      \
    \  return txt:split(\",\")\n    else\n        local result = 0\n        for i\
    \ = 1, txt:len() do\n            if txt:lower():byte(i) % 2 == 1 then\n      \
    \          result = result + 1\n            end\n        end\n        return result\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb6j0lkkp.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpb6j0lkkp.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpb6j0lkkp.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") then\n        return\
    \ table.from(txt:split(\" \"))\n    elseif txt:find(\",\") then\n        return\
    \ table.from(txt:split(\",\"))\n    else\n        local c = 0\n        for i =\
    \ 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n                c = c\
    \ + 1\n            end\n        end\n        return c\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnl9gebep.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpnl9gebep.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnl9gebep.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") then\n    return txt:split(\"\
    \ \")\n  elseif txt:find(\",\") then\n    return txt:split(\",\")\n  else\n  \
    \  local r = 0\n    for i=1,#txt do\n      local c = txt:sub(i,i)\n      if c:byte()\
    \ % 2 == 1 then\n        r = r + 1\n      end\n    end\n    return r\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptgf6peks.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmptgf6peks.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptgf6peks.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(' ') then\n        return\
    \ string_split(txt, ' ')\n    elseif txt:find(',') then\n        return string_split(txt,\
    \ ',')\n    else\n        local t = {}\n        for i = 1, 26 do\n           \
    \ if i % 2 == 1 then t[#t + 1] = string.char(string.byte('a') + i - 1) end\n \
    \       end\n        local c = 0\n        for i = 1, #txt do\n            if txt:find(txt:sub(i,\
    \ i), 1, true) then c = c + 1 end\n        end\n        return c\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2hran395.lua:10:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmp2hran395.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2hran395.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find('%s') then\n        return\
    \ txt:split()\n    elseif txt:find(',') then\n        return txt:split(',')\n\
    \    else\n        local t = {}\n        for i = 1, #txt do\n            local\
    \ idx = txt:byte(i) - 96\n            if idx % 2 == 1 then\n                table.insert(t,\
    \ idx)\n            end\n        end\n        return t\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc10z1v4c.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpc10z1v4c.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpc10z1v4c.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\" \") then\n    return split(txt,\"\
    \ \")\n  elseif txt:find(\",\") then\n    return split(txt,\",\")\n  else\n  \
    \  local count = 0\n    for i=1,#txt do\n      if (txt:byte(i) % 2 == 1) then\n\
    \        count = count + 1\n      end\n    end\n    return count\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvllvf2f.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpzvllvf2f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzvllvf2f.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5khn2j1_.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp5khn2j1_.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local lst = {}\n    local first = string.find(txt,\
    \ \" \")\n    if first then\n        local rest = string.sub(txt, first + 1)\n\
    \        lst[1] = string.sub(txt, 1, first - 1)\n        lst[2] = rest\n     \
    \   return lst\n    end\n    first = string.find(txt, \",\")\n    if first then\n\
    \        local rest = string.sub(txt, first + 1)\n        lst[1] = string.sub(txt,\
    \ 1, first - 1)\n        lst[2] = rest\n        return lst\n    end\n    local\
    \ count = 0\n    for i = 1, #txt do\n        local ch = string.sub(txt, i, i)\n\
    \        local asc = string.byte(ch)\n        if asc >= 97 and asc <= 122 and\
    \ asc % 2 == 1 then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp274n5kv_.lua:43:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp274n5kv_.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif string.find(txt,\" \") then\n\t\treturn\
    \ string.split(txt,\" \")\n\telseif string.find(txt,\",\") then\n\t\treturn string.split(txt,\"\
    ,\")\n\telse\n\t\tlocal ct = 0\n\t\tfor i=1,#txt do\n\t\t\tif tonumber(string.byte(txt,i)-96)%2==1\
    \ then\n\t\t\t\tct = ct + 1\n\t\t\tend\n\t\tend\n\t\treturn ct\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81j6vl5q.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp81j6vl5q.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp81j6vl5q.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if not txt:find(\" \") and not txt:find(\"\
    ,\") then\n    local n = 0\n    for i = 1, #txt do\n      if txt:sub(i, i):lower():byte()\
    \ % 2 == 1 then\n        n = n + 1\n      end\n    end\n    return n\n  elseif\
    \ not txt:find(\" \") then\n    return txt:split(\",\")\n  else\n    return txt:split(\"\
    \ \")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppf3x0krh.lua:20:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmppf3x0krh.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmppf3x0krh.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\" \") then\n\t\treturn txt:split(\"\
    \ \")\n\telseif txt:find(\",\") then\n\t\treturn txt:split(\",\")\n\telse\n\t\t\
    local odd = 0\n\t\tfor i = 1, #txt do\n\t\t\tlocal char = txt:sub(i, i)\n\t\t\t\
    if odd % 2 == 0 and char:find(\"[a-z]\") then\n\t\t\t\todd = odd + 1\n\t\t\tend\n\
    \t\tend\n\t\treturn odd\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfumjss8f.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpfumjss8f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfumjss8f.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local delimiter\
    \ = txt:find(' ') and ' ' or txt:find(',') and ',' or ''\n    if delimiter ~=\
    \ '' then\n        for word in txt:gmatch('[^' .. delimiter .. ']+') do\n    \
    \        table.insert(words, word)\n        end\n    else\n        return sum(1\
    \ for c in txt:lower():gmatch('[a-z]') if (txt:lower():find(c) - 1) % 2 == 0)\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpznvuici2.lua:16: ')' expected near 'for'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local tbl = {}\n  if txt:find(\" \") ~=\
    \ nil then\n    tbl = txt:split(\" \")\n  elseif txt:find(\",\") ~= nil then\n\
    \    tbl = txt:split(\",\")\n  else\n    local i = 0\n    for s in txt:gmatch(\"\
    .\") do\n      local idx = string.byte(s) - string.byte(\"a\")\n      if idx %\
    \ 2 == 1 then\n        i = i + 1\n      end\n    end\n    tbl = { i }\n  end\n\
    \  return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphc865tls.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmphc865tls.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphc865tls.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find('%s') then\n\t\treturn txt:gmatch('%S+')\n\
    \telseif txt:find(',') then\n\t\treturn txt:gmatch('%a+')\n\telse\n\t\tlocal len\
    \ = txt:len()\n\t\tlocal rt = 0\n\t\tfor i = 1, len do\n\t\t\tif txt:byte(i) %\
    \ 2 == 1 then\n\t\t\t\trt = rt + 1\n\t\t\tend\n\t\tend\n\t\treturn rt\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp061xutkr.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x17494e0\nstack traceback:\n\
    \t/tmp/tmp061xutkr.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndj1qmml.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpndj1qmml.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\treturn (txt:match(\"[%s,]\") and txt:gmatch(\"\
    %S+\")) or string.len(txt:match(\"[a-z]*\"))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgl5pu9qo.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x823440\nstack traceback:\n\
    \t/tmp/tmpgl5pu9qo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- TODO: Program me\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8vtf8_u.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpk8vtf8_u.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local result = nil\n  if txt:find(\"%S\"\
    ) == nil then\n    result = {}\n  elseif txt:find(\"%s\") == nil then\n    if\
    \ txt:find(\",\") == nil then\n      local num = 0\n      for i = 1, #txt do\n\
    \        local char = txt:sub(i, i)\n        if char >= \"a\" and char <= \"z\"\
    \ and (i % 2) == 1 then\n          num = num + 1\n        end\n      end\n   \
    \   result = num\n    else\n      result = {}\n      for i in txt:gmatch(\"%w+\"\
    ) do\n        table.insert(result, i)\n      end\n    end\n  else\n    result\
    \ = {}\n    for i in txt:gmatch(\"%S+\") do\n      table.insert(result, i)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcge0qtrs.lua:41:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpcge0qtrs.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local res = {}\n  local i = 1\n  local\
    \ count = 0\n  while i <= #txt do\n    local symbol = txt:sub(i, i)\n    if symbol\
    \ == ' ' then\n      if res[1] == nil then\n        res[1] = txt:sub(1, i - 1)\n\
    \      else\n        res[2] = txt:sub(i + 1, #txt)\n      end\n      break\n \
    \   elseif symbol == ',' then\n      if res[1] == nil then\n        res[1] = txt:sub(1,\
    \ i - 1)\n      else\n        res[2] = txt:sub(i + 1, #txt)\n      end\n     \
    \ break\n    else\n      if symbol:byte() >= 97 and symbol:byte() <= 122 then\n\
    \        if (symbol:byte() - 96) % 2 == 1 then\n          count = count + 1\n\
    \        end\n      end\n    end\n    i = i + 1\n  end\n  if res[1] == nil then\n\
    \    return count\n  else\n    return res\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjp5iu72w.lua:47:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpjp5iu72w.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return string.find(txt, \" \") and string.split(txt,\
    \ \" \") or\n            string.find(txt, \",\") and string.split(txt, \",\")\
    \ or\n            string.gsub(txt, \"%l\", \"\"):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi5fzqm3g.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpi5fzqm3g.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi5fzqm3g.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result = {}\n    if txt:find('\
    \ ') then\n        for word in txt:gmatch('%S+') do\n            table.insert(result,\
    \ word)\n        end\n    elseif txt:find(',') then\n        for word in txt:gmatch('%w+')\
    \ do\n            table.insert(result, word)\n        end\n    else\n        local\
    \ num = 0\n        for i = 1, txt:len() do\n            if txt:sub(i, i):byte()\
    \ % 2 == 1 then\n                num = num + 1\n            end\n        end\n\
    \        return num\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jm4ry1n.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmp1jm4ry1n.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(\"%s\") then\n    return txt:split(\"\
    %s\")\n  elseif txt:find(\",\") then\n    return txt:split(\",\")\n  else\n  \
    \  return txt:lower():gsub(\"[^%w]\", \"\"):gsub(\"([%l])(%l)\", function(a, b)\
    \ return a:byte() % 2 ~= 0 and b or \"\" end):len()\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo99im9tu.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpo99im9tu.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpo99im9tu.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  for w in txt:gmatch(\"\
    %S+\") do\n    table.insert(words, w)\n  end\n  if #words == 0 then\n    local\
    \ num_odd_letters = 0\n    for c in txt:gmatch(\".\") do\n      local n = string.byte(c)\
    \ - string.byte(\"a\")\n      if n >= 0 and n <= 25 and n % 2 == 1 then\n    \
    \    num_odd_letters = num_odd_letters + 1\n      end\n    end\n    return num_odd_letters\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jpn5jqz.lua:30:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp8jpn5jqz.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local str = txt\n  local val, _\n  local\
    \ array = {}\n  if #txt == #txt:gsub(\"%s\", \"\") then\n    str = txt:gsub(\"\
    %s\", \",\")\n  end\n  for _, val in ipairs(str:split(\",\")) do\n    table.insert(array,\
    \ val)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5wsfv_qm.lua:15:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp5wsfv_qm.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp5wsfv_qm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local r = {}\n    local i = 0\n    for\
    \ _, v in pairs(string.split(txt, \"%s\")) do\n        r[i] = v\n        i = i\
    \ + 1\n    end\n    if #r == 0 then\n        local j = 0\n        for _, v in\
    \ pairs(string.split(txt, \",\")) do\n            r[j] = v\n            j = j\
    \ + 1\n        end\n        if #r == 0 then\n            local l = 0\n       \
    \     for k = 1, #txt do\n                if (k % 2) == 1 then\n             \
    \       l = l + string.byte(txt, k) - string.byte(\"a\")\n                end\n\
    \            end\n            r[0] = l\n        end\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mfuwjdb.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp4mfuwjdb.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4mfuwjdb.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local res = {}\n    local word = \"\"\
    \n    local count = 0\n    for i = 1, #txt do\n        local ch = txt:sub(i, i)\n\
    \        if ch == \" \" or ch == \",\" then\n            if #word > 0 then\n \
    \               res[#res + 1] = word\n                word = \"\"\n          \
    \  end\n        else\n            word = word .. ch\n        end\n    end\n  \
    \  if #word > 0 then\n        res[#res + 1] = word\n    end\n    if #res == 0\
    \ then\n        for i = 1, #txt do\n            local ch = txt:sub(i, i)\n   \
    \         if ch:byte() - \"a\":byte() % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpenmcjxsh.lua:29: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wqbiea7.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp8wqbiea7.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:find(' ') and txt:split(' ')\
    \ or txt:find(',') and txt:split(',') or txt:lower():gsub('(.)',function(c)\n\
    \    return c:ord()%2~=0 and ' ' or c\n  end):split(' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvg89zig3.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpvg89zig3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvg89zig3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\" \") then\n\t\treturn string.split(txt,\
    \ \" \")\n\telseif txt:find(\",\") then\n\t\treturn string.split(txt, \",\")\n\
    \telse\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\tif math.fmod(txt:byte(i)\
    \ - 0x61, 2) == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn\
    \ count\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe351y0rf.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpe351y0rf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpe351y0rf.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local function find(str, c)\n      \
    \  for i=1,#str do\n            if str:sub(i,i) == c then\n                return\
    \ i\n            end\n        end\n        return nil\n    end\n    local function\
    \ count_odd(str)\n        local sum = 0\n        for i=1,#str do\n           \
    \ local c = str:sub(i,i)\n            if (string.byte(c) - 97) % 2 == 1 then\n\
    \                sum = sum + 1\n            end\n        end\n        return sum\n\
    \    end\n    local idx_whitespace = find(txt, ' ')\n    if idx_whitespace ~=\
    \ nil then\n        return {txt:sub(1, idx_whitespace-1), txt:sub(idx_whitespace+1)}\n\
    \    end\n    local idx_comma = find(txt, ',')\n    if idx_comma ~= nil then\n\
    \        return {txt:sub(1, idx_comma-1), txt:sub(idx_comma+1)}\n    end\n   \
    \ return count_odd(txt)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w3n55k4.lua:47:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4w3n55k4.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local function is_lower_case(c)\n    return\
    \ (c:byte() >= 97 and c:byte() <= 122)\n  end\n  local function get_count_lower_case_letters_with_odd_order_in_alphabet(txt)\n\
    \    local count = 0\n    for i = 1, #txt do\n      if is_lower_case(txt:sub(i,\
    \ i)) and math.fmod(txt:sub(i, i):byte() - 97, 2) == 1 then\n        count = count\
    \ + 1\n      end\n    end\n    return count\n  end\n  if txt:find(\" \") ~= nil\
    \ then\n    return txt:split(\" \")\n  elseif txt:find(\",\") ~= nil then\n  \
    \  return txt:split(\",\")\n  else\n    return get_count_lower_case_letters_with_odd_order_in_alphabet(txt)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoav201ol.lua:22:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpoav201ol.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpoav201ol.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local out = {}\n    if txt:find(\"%s\"\
    ) then\n        for v in txt:gmatch(\"%S+\") do\n            table.insert(out,\
    \ v)\n        end\n    elseif txt:find(\",\") then\n        for v in txt:gmatch(\"\
    [^,]+\") do\n            table.insert(out, v)\n        end\n    else\n       \
    \ local count = 0\n        for c in txt:gmatch(\".\") do\n            if c:byte()\
    \ % 2 ~= 0 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1m_z_sm0.lua:38:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp1m_z_sm0.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if string.find(txt, \" \") then\n  \
    \      return string.split(txt, \" \")\n    elseif string.find(txt, \",\") then\n\
    \        return string.split(txt, \",\")\n    else\n        local tbl = {}\n \
    \       for i=1, 26 do\n            local ch = string.char(i + ord('a') - 1)\n\
    \            if string.find(txt, ch) then\n                table.insert(tbl, ch)\n\
    \            end\n        end\n        return #tbl\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7nz88f0.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpr7nz88f0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpr7nz88f0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local split_on_whitespace = false\n\
    \    local split_on_comma = false\n    local words = {}\n    local odd_chars =\
    \ 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c ==\
    \ ' ' then\n            split_on_whitespace = true\n        elseif c == ',' then\n\
    \            split_on_comma = true\n        elseif c:find('[a-z]') then\n    \
    \        local n = c:byte() - ('a'):byte()\n            if n % 2 == 1 then\n \
    \               odd_chars = odd_chars + 1\n            end\n        end\n    end\n\
    \    if split_on_whitespace then\n        words = txt:split('%s+')\n    elseif\
    \ split_on_comma then\n        words = txt:split(',')\n    else\n        return\
    \ odd_chars\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_hib9c9.lua:27:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpl_hib9c9.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpl_hib9c9.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local split1 = string.gmatch(txt, \"%S+\"\
    )\n  local split2 = string.gmatch(txt, \"%S+,%S+\")\n  local split3 = string.gmatch(txt,\
    \ \"%a\")\n  if split1() then\n    return {split1()}\n  elseif split2() then\n\
    \    return {split2()}\n  else\n    local count = 0\n    for i in split3 do\n\
    \      if tonumber(i) % 2 ~= 0 then\n        count = count + 1\n      end\n  \
    \  end\n    return count\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfqg29rj.lua:30:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"world!\"}\nstack traceback:\n\t\
    /tmp/tmphfqg29rj.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find(' ') then\n    local ret =\
    \ {}\n    for w in txt:gmatch('%S+') do\n      table.insert(ret, w)\n    end\n\
    \    return ret\n  elseif txt:find(',') then\n    local ret = {}\n    for w in\
    \ txt:gmatch('[^,]+') do\n      table.insert(ret, w)\n    end\n    return ret\n\
    \  else\n    local ret = 0\n    for c in txt:gmatch('.') do\n      local n = c:byte()\
    \ - 97\n      if n % 2 == 0 then\n        ret = ret + 1\n      end\n    end\n\
    \    return ret\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcwgamjb.lua:41:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgcwgamjb.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") then\n        return\
    \ txt:split(\" \")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local count = 0\n        for i = 1, #txt do\n        \
    \    if string.byte(txt, i) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmik4pho.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpjmik4pho.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjmik4pho.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return to_array(txt:gsub(\"%S+\", \"%1,\
    \ \"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk2e4ec78.lua:9:\
    \ attempt to call a nil value (global 'to_array')\nstack traceback:\n\t/tmp/tmpk2e4ec78.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpk2e4ec78.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftwt_1m7.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpftwt_1m7.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local s,_, f = txt:find(\"%S+\")\n  local\
    \ e = txt:find(\"%S+\", s+1)\n  if e then\n    return {txt:sub(s, f), txt:sub(e,\
    \ -1)}\n  elseif s then\n    return {txt:sub(s, f)}\n  else\n    local a = 0\n\
    \    for v in txt:gmatch(\"[a-z]\") do\n      a = a + (v:byte() % 2)\n    end\n\
    \    return a\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8x2_fn7v.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello world!\", \"ello world!\"\
    }\nstack traceback:\n\t/tmp/tmp8x2_fn7v.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\" \") then\n        return\
    \ txt:split(\" \")\n    elseif txt:find(\",\") then\n        return txt:split(\"\
    ,\")\n    else\n        local ans = 0\n        for i = 1, txt:len() do\n     \
    \       local lower_ch = txt:sub(i, i):lower()\n            local order = (lower_ch:byte()\
    \ - string.byte(\"a\"))\n            if order % 2 == 1 then\n                ans\
    \ = ans + 1\n            end\n        end\n        return ans\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2nfetdni.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2nfetdni.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2nfetdni.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if not string.find(txt, \",\") and not\
    \ string.find(txt, \" \") then\n    local c = 0\n    for i = 1, string.len(txt)\
    \ do\n      if string.lower(string.sub(txt, i, i)) == string.char(97 + i % 2)\
    \ then\n        c = c + 1\n      end\n    end\n    return c\n  elseif not string.find(txt,\
    \ \",\") then\n    return string.split(txt, \" \")\n  else\n    return string.split(txt,\
    \ \",\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaniek85y.lua:18:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaniek85y.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpaniek85y.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal i,len,c,wrds,wrd = 0,0,0\n\twhile\
    \ i<#txt do\n\t\tif txt:sub(i,i)==' ' or txt:sub(i,i)==',' then\n\t\t\twrd = txt:sub(i+1,len-1)\n\
    \t\t\tlen,i = 0,i+1\n\t\t\twrds[#wrds+1] = wrd\n\t\telseif i == #txt then\n\t\t\
    \twrd = txt:sub(len-1,i)\n\t\t\twrds[#wrds+1] = wrd\n\t\t\ti = i+1\n\t\telse\n\
    \t\t\tlen,i = len+1,i+1\n\t\tend\n\tend\n\treturn wrds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsywubu4i.lua:14:\
    \ attempt to get length of a nil value (local 'wrds')\nstack traceback:\n\t/tmp/tmpsywubu4i.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpsywubu4i.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(' ') then\n        return\
    \ txt:split(' ')\n    elseif txt:find(',') then\n        return txt:split(',')\n\
    \    else\n        local cnt = 0\n        for i = 1, 26 do\n            if txt:find(string.char(i\
    \ + 96)) and i % 2 == 1 then\n                cnt = cnt + 1\n            end\n\
    \        end\n        return cnt\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp556vagq.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpp556vagq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpp556vagq.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(\"%s\") then\n        return\
    \ split(txt, \"%s\")\n    elseif txt:find(\",\") then\n        return split(txt,\
    \ \",\")\n    else\n        local ret = 0\n        for i = 1, #txt do\n      \
    \      if (string.byte(txt, i) - 96) % 2 == 1 then\n                ret = ret\
    \ + 1\n            end\n        end\n        return ret\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppf1sbu1l.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmppf1sbu1l.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppf1sbu1l.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\ttxt = txt:lower()\n\tif txt:find(\" \"\
    ) then\n\t\treturn txt:split(\" \")\n\telseif txt:find(\",\") then\n\t\treturn\
    \ txt:split(\",\")\n\telse\n\t\tlocal count = 0\n\t\tfor i=1, #txt do\n\t\t\t\
    if i % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn\
    \ count\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1py75gq7.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp1py75gq7.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1py75gq7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local result = {}\n  for w in txt:gmatch(\"\
    %w+\") do\n    table.insert(result, w)\n  end\n  if #result == 0 then\n    for\
    \ w in txt:gmatch(\"[,]\") do\n      table.insert(result, w)\n    end\n  end\n\
    \  if #result == 0 then\n    local i = 0\n    for w in txt:gmatch(\"[a-z]\") do\n\
    \      i = i + 1\n    end\n    return i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgecfy0k.lua:31:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpcgecfy0k.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if not txt:find(\"%s\") then\n    if not\
    \ txt:find(\",\") then\n      local res = {}\n      for i = 1, #txt do\n     \
    \   local char = txt:sub(i, i)\n        if (string.byte(char) - string.byte(\"\
    a\")) % 2 == 1 then\n          table.insert(res, char)\n        end\n      end\n\
    \      return #res\n    else\n      local res = {}\n      for word in txt:gmatch(\"\
    %S+\") do\n        table.insert(res, word)\n      end\n      return res\n    end\n\
    \  else\n    local res = {}\n    for word in txt:gmatch(\"%S+\") do\n      table.insert(res,\
    \ word)\n    end\n    return res\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0joros0.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpv0joros0.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- TODO: implement function\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpond3l8tv.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpond3l8tv.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if not txt:find(\" \") then\n      \
    \  if not txt:find(\",\") then\n            local count = 0\n            for i\
    \ = 1, #txt do\n                if (i - 1) % 2 == 0 then\n                   \
    \ if txt:sub(i, i) == txt:sub(i, i):lower() then\n                        count\
    \ = count + 1\n                    end\n                end\n            end\n\
    \            return count\n        else\n            local list = {}\n       \
    \     for i in txt:gmatch(\"[^,]+\") do\n                table.insert(list, i)\n\
    \            end\n            return list\n        end\n    else\n        local\
    \ list = {}\n        for i in txt:gmatch(\"[^ ]+\") do\n            table.insert(list,\
    \ i)\n        end\n        return list\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kidxzfa.lua:44:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp2kidxzfa.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local alph = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local count = 0\n  for i = 1, #txt do\n    if alph:find(txt:sub(i, i)) then\n\
    \      count = count + 1\n    end\n  end\n  if count == #txt then\n    local num\
    \ = 0\n    for i = 1, #txt do\n      local char = txt:sub(i, i)\n      if math.fmod(alph:find(char),\
    \ 2) == 1 then\n        num = num + 1\n      end\n    end\n    return num\n  end\n\
    \  if txt:find(\" \") then\n    return txt:split(\" \")\n  end\n  if txt:find(\"\
    ,\") then\n    return txt:split(\",\")\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeaq2agrm.lua:27:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpeaq2agrm.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpeaq2agrm.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:match('%S+') and txt:gmatch('%S+')\
    \ or txt:match(',') and txt:gmatch(',') or txt:match('a-z') and txt:gmatch('a-z')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwf5mjmw0.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x25e33f0\nstack traceback:\n\
    \t/tmp/tmpwf5mjmw0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local len = string.len(txt)\n  if len\
    \ == 0 then return end\n  local split_char = ' '\n  local start = 1\n  local res\
    \ = {}\n  local word_count = 0\n  local odd_count = 0\n  for i = 1, len do\n \
    \   local char = string.sub(txt, i, i)\n    if char == split_char then\n     \
    \ if word_count == 0 then\n        res[1] = string.sub(txt, start, i - 1)\n  \
    \      word_count = word_count + 1\n      else\n        res[2] = string.sub(txt,\
    \ start, i - 1)\n        break\n      end\n      start = i + 1\n    elseif i ==\
    \ len then\n      if word_count == 0 then\n        res[1] = string.sub(txt, start,\
    \ i)\n        word_count = word_count + 1\n      else\n        res[2] = string.sub(txt,\
    \ start, i)\n        break\n      end\n    end\n  end\n  if word_count < 2 then\n\
    \    split_char = ','\n    start = 1\n    word_count = 0\n    for i = 1, len do\n\
    \      local char = string.sub(txt, i, i)\n      if char == split_char then\n\
    \        if word_count == 0 then\n          res[1] = string.sub(txt, start, i\
    \ - 1)\n          word_count = word_count + 1\n        else\n          res[2]\
    \ = string.sub(txt, start, i - 1)\n          break\n        end\n        start\
    \ = i + 1\n      elseif i == len then\n        if word_count == 0 then\n     \
    \     res[1] = string.sub(txt, start, i)\n          word_count = word_count +\
    \ 1\n        else\n          res[2] = string.sub(txt, start, i)\n          break\n\
    \        end\n      end\n    end\n  end\n  if word_count < 2 then\n    for i =\
    \ 1, len do\n      local char = string.sub(txt, i, i)\n      local code = string.byte(char)\n\
    \      if code >= 97 and code <= 122 then\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfmyvrtc1.lua:82: 'end' expected (to close 'if' at line 67)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if string.find(txt, ' ') then\n    \
    \    return string.split(txt, ' ')\n    elseif string.find(txt, ',') then\n  \
    \      return string.split(txt, ',')\n    else\n        local i = 0\n        for\
    \ j = 1, string.len(txt) do\n            if string.find(string.lower(txt), j %\
    \ 2 ~= 0) then\n                i = i + 1\n            end\n        end\n    \
    \    return i\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_2fszzvy.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp_2fszzvy.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_2fszzvy.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
