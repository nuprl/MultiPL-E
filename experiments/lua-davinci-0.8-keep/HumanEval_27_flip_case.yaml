name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal new_string = ''\n\tfor char in gmatch(string, '.') do\n\t\t\
    local new_char = lower(char)\n\t\tif new_char == char then\n\t\t\tnew_char = upper(char)\n\
    \t\tend\n\t\tnew_string = new_string .. new_char\n\tend\n\treturn new_string\n\
    end", "\tlocal ret = {}\n\tfor char in string:gmatch\".\" do\n\t\tif char:match\"\
    %u\" then\n\t\t\ttable.insert(ret, char:lower())\n\t\telseif char:match\"%l\"\
    \ then\n\t\t\ttable.insert(ret, char:upper())\n\t\telse\n\t\t\ttable.insert(ret,\
    \ char)\n\t\tend\n\tend\n\treturn table.concat(ret)\nend", "    local chars =\
    \ string.split(string)\n    for i = 1, #chars do\n        local char = chars[i]\n\
    \        if char:isupper() then\n            chars[i] = char:lower()\n       \
    \ elseif char:islower() then\n            chars[i] = char:upper()\n        end\n\
    \    end\n    return table.concat(chars)\nend", "  return (string:gsub('(%a)',\
    \ { ['a'] = 'A', ['A'] = 'a', ['b'] = 'B', ['B'] = 'b', ['c'] = 'C', ['C'] = 'c',\
    \ ['d'] = 'D', ['D'] = 'd', ['e'] = 'E', ['E'] = 'e', ['f'] = 'F', ['F'] = 'f',\
    \ ['g'] = 'G', ['G'] = 'g', ['h'] = 'H', ['H'] = 'h', ['i'] = 'I', ['I'] = 'i',\
    \ ['j'] = 'J', ['J'] = 'j', ['k'] = 'K', ['K'] = 'k', ['l'] = 'L', ['L'] = 'l',\
    \ ['m'] = 'M', ['M'] = 'm', ['n'] = 'N', ['N'] = 'n', ['o'] = 'O', ['O'] = 'o',\
    \ ['p'] = 'P', ['P'] = 'p', ['q'] = 'Q', ['Q'] = 'q', ['r'] = 'R', ['R'] = 'r',\
    \ ['s'] = 'S', ['S'] = 's', ['t'] = 'T', ['T'] = 't', ['u'] = 'U', ['U'] = 'u',\
    \ ['v'] = 'V', ['V'] = 'v', ['w'] = 'W', ['W'] = 'w', ['x'] = 'X', ['X'] = 'x',\
    \ ['y'] = 'Y', ['Y'] = 'y', ['z'] = 'Z', ['Z'] = 'z' }))\nend", "    return string:gsub(\"\
    %a\", {[\"%l\"] = \"%u\", [\"%u\"] = \"%l\"})\nend", "    local new = {}\n   \
    \ for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:lower()\
    \ == char then\n            new[i] = char:upper()\n        else\n            new[i]\
    \ = char:lower()\n        end\n    end\n    return table.concat(new)\nend", " \
    \ local s_len = #string\n  local result = ''\n  for i = 1, s_len do\n    local\
    \ c = string:sub(i, i)\n    if c:isupper() then\n      result = result .. c:lower()\n\
    \    elseif c:islower() then\n      result = result .. c:upper()\n    else\n \
    \     result = result .. c\n    end\n  end\n  return result\nend", "    local\
    \ res = \"\"\n    for c in string:gmatch(\".\") do\n        if c:match(\"%u\"\
    ) then\n            res = res .. c:lower()\n        elseif c:match(\"%l\") then\n\
    \            res = res .. c:upper()\n        else\n            res = res .. c\n\
    \        end\n    end\n    return res\nend", "\treturn string:gsub('.', {\n\t\t\
    [0] = string.upper,\n\t\t[1] = string.lower,\n\t})\nend", "  return (string:gsub(\"\
    %a\", function(c)\n    if c:lower() == c then\n      return c:upper()\n    else\n\
    \      return c:lower()\n    end\n  end))\nend", "  local result = {}\n  for i=1,#string\
    \ do\n    local char = string:sub(i,i)\n    if char:find('%u') then\n      result[i]\
    \ = char:lower()\n    elseif char:find('%l') then\n      result[i] = char:upper()\n\
    \    else\n      result[i] = char\n    end\n  end\n  return table.concat(result)\n\
    end", "\treturn string:gsub(\"(%a)\",function(c)\n\t\tif c == c:lower() then\n\
    \t\t\treturn c:upper()\n\t\telse\n\t\t\treturn c:lower()\n\t\tend\n\tend)\nend",
  "\tlocal string_flipped = ''\n\tfor i = 1, string.len(string) do\n\t\tif string.sub(string,\
    \ i, i) == string.upper(string.sub(string, i, i)) then\n\t\t\tstring_flipped =\
    \ string_flipped .. string.lower(string.sub(string, i, i))\n\t\telse\n\t\t\tstring_flipped\
    \ = string_flipped .. string.upper(string.sub(string, i, i))\n\t\tend\n\tend\n\
    \treturn string_flipped\nend", "  local flipped = {}\n  for i = 1, #string do\n\
    \    local char = string:sub(i, i)\n    if char:match('%l') then\n      flipped[i]\
    \ = char:upper()\n    elseif char:match('%u') then\n      flipped[i] = char:lower()\n\
    \    else\n      flipped[i] = char\n    end\n  end\n  return table.concat(flipped)\n\
    end", "    return (string:gsub(\"%a\", { [\"a\"] = \"A\", [\"b\"] = \"B\", [\"\
    c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"\
    G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"\
    ] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\"\
    , [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"]\
    \ = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\"\
    , [\"z\"] = \"Z\", [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"]\
    \ = \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\"\
    , [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"]\
    \ = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\"\
    , [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"]\
    \ = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\"\
    \ }))\nend", "  return string:gsub('%a', function(char)\n    return char:upper()\
    \ == char and char:lower() or char:upper()\n  end)\nend", "  return string:gsub('.',\
    \ function(c)\n    return not c:match('%l') and c:lower() or c:upper()\n  end)\n\
    end", "  return string:gsub('%a', function(char)\n    return char:lower() == char\
    \ and char:upper() or char:lower()\n  end)\nend", "    local result = ''\n   \
    \ for _, char in ipairs({string.byte(string, 1, -1)}) do\n        if char >= 65\
    \ and char <= 90 then\n            result = result .. string.char(char + 32)\n\
    \        elseif char >= 97 and char <= 122 then\n            result = result ..\
    \ string.char(char - 32)\n        else\n            result = result .. string.char(char)\n\
    \        end\n    end\n    return result\nend", "  local new_string = {}\n  for\
    \ i = 1, string.len(string) do\n    local char = string.sub(string, i, i)\n  \
    \  if char == char:lower() then\n      new_string[i] = char:upper()\n    else\n\
    \      new_string[i] = char:lower()\n    end\n  end\n  return table.concat(new_string)\n\
    end", "    local flipped = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if c:lower() == c then\n            flipped[i] = c:upper()\n   \
    \     else\n            flipped[i] = c:lower()\n        end\n    end\n    return\
    \ table.concat(flipped)\nend", "    return string:gsub(\"%a\", function(c)\n \
    \       return lume.iflag(c:lower() == c, c:upper(), c:lower())\n    end)\nend",
  "  return string:gsub(\"[%a]\", function(char)\n    if char:match(\"%u\") then\n\
    \      return char:lower()\n    else\n      return char:upper()\n    end\n  end)\n\
    end", "    local result = ''\n    for i=1,#string do\n        local c = string:sub(i,i)\n\
    \        if c:match('%u') then\n            result = result .. c:lower()\n   \
    \     elseif c:match('%l') then\n            result = result .. c:upper()\n  \
    \      else\n            result = result .. c\n        end\n    end\n    return\
    \ result\nend", "\treturn (string:gsub('%l', function(character) return character:upper()\
    \ end):gsub('%u', function(character) return character:lower() end))\nend", " \
    \ string = string:gsub(\"%a\",function(c) return c:upper() == c and c:lower()\
    \ or c:upper() end)\n  return string\nend", "    return string:gsub('.', function(char)\n\
    \        if char:match('%l') then\n            return char:upper()\n        elseif\
    \ char:match('%u') then\n            return char:lower()\n        else\n     \
    \       return char\n        end\n    end)\nend", "  return string:gsub('%a',\
    \ function(letter)\n    return letter:upper() == letter and letter:lower() or\
    \ letter:upper()\n  end)\nend", "  string = string.gsub(string, \"%a\",\n    function(letter)\n\
    \      if letter == letter:lower() then\n        return letter:upper()\n     \
    \ else\n        return letter:lower()\n      end\n    end\n  )\n  return string\n\
    end", "  local flipped = {}\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if char:match('%l') then\n      flipped[i] = char:upper()\n    elseif\
    \ char:match('%u') then\n      flipped[i] = char:lower()\n    else\n      flipped[i]\
    \ = char\n    end\n  end\n  return table.concat(flipped)\nend", "    local buffer\
    \ = ''\n    for i = 1, string.len(string) do\n        local char = string.sub(string,\
    \ i, i)\n        if string.match(char, '%l') then\n            buffer = buffer\
    \ .. string.upper(char)\n        elseif string.match(char, '%u') then\n      \
    \      buffer = buffer .. string.lower(char)\n        else\n            buffer\
    \ = buffer .. char\n        end\n    end\n    return buffer\nend", "  return string:gsub(\"\
    %a\",\n    function(char)\n      if char:match(\"%u\") then\n        return char:lower()\n\
    \      else\n        return char:upper()\n      end\n    end\n  )\nend", "\tlocal\
    \ flipped = ''\n\tfor i = 1, #string do\n\t\tlocal c = string:sub(i, i)\n\t\t\
    local new = c:lower()\n\t\tif c == new then\n\t\t\tnew = c:upper()\n\t\tend\n\t\
    \tflipped = flipped .. new\n\tend\n\treturn flipped\nend", "    return string:gsub('%a',\
    \ function(character)\n        return character:lower() == character and character:upper()\
    \ or character:lower()\n    end)\nend", "    -- Since Lua does not have a built-in\
    \ string method for case flipping,\n    -- we'll use this thing for now.\n   \
    \ return string:gsub(\"%a\", function(c)\n        return c == c:lower() and c:upper()\
    \ or c:lower()\n    end)\nend", "\treturn string:gsub('(%a)', function(c) return\
    \ c == c:lower() and c:upper() or c:lower() end)\nend", "    local flip = {}\n\
    \    for char in string:gmatch(\".\") do\n        if char:isupper() then\n   \
    \         table.insert(flip, char:lower())\n        else\n            table.insert(flip,\
    \ char:upper())\n        end\n    end\n    return table.concat(flip)\nend", " \
    \ return string:gsub('(%a)', flip_case_replacer)\nend", "    local flip = {}\n\
    \    for char in string:gmatch(\".\") do\n        flip[#flip+1] = (char:lower()\
    \ == char) and char:upper() or char:lower()\n    end\n    return table.concat(flip)\n\
    end", "\tlocal flipped = ''\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i,\
    \ i)\n\t\tif char == char:upper() then\n\t\t\tflipped = flipped .. char:lower()\n\
    \t\telse\n\t\t\tflipped = flipped .. char:upper()\n\t\tend\n\tend\n\treturn flipped\n\
    end", "  local str = string:gsub('%a', function(char)\n    if char:match('%a')\
    \ then\n      if char:match('%u') then\n        return char:lower()\n      else\n\
    \        return char:upper()\n      end\n    end\n  end)\n  return str\nend",
  "    local string_flipped = ''\n    for char in string:gmatch('.') do\n        if\
    \ char:match('%l') then\n            string_flipped = string_flipped .. char:upper()\n\
    \        elseif char:match('%u') then\n            string_flipped = string_flipped\
    \ .. char:lower()\n        else\n            string_flipped = string_flipped ..\
    \ char\n        end\n    end\n    return string_flipped\nend", "\treturn string:gsub(\"\
    %a\", flips[char])\nend", "    return string:gsub('%a', function(letter)\n   \
    \     return letter:upper() == letter and letter:lower() or letter:upper()\n \
    \   end)\nend", "    string = string:gsub('%a', function(char)\n        return\
    \ char:lower() == char and char:upper() or char:lower()\n    end)\n    return\
    \ string\nend", "    local new_string = ''\n    for c in string:gmatch('.') do\n\
    \        if c:match('%l') then\n            new_string = new_string .. c:upper()\n\
    \        elseif c:match('%u') then\n            new_string = new_string .. c:lower()\n\
    \        else\n            new_string = new_string .. c\n        end\n    end\n\
    \    return new_string\nend", "    local new_string = ''\n    for i = 1, #string\
    \ do\n        if string:sub(i, i):lower() == string:sub(i, i) then\n         \
    \   new_string = new_string .. string:sub(i, i):upper()\n        else\n      \
    \      new_string = new_string .. string:sub(i, i):lower()\n        end\n    end\n\
    \    return new_string\nend", "    local flip = string:gsub('.', function(character)\n\
    \        if character:match('%u') then\n            return character:lower()\n\
    \        elseif character:match('%l') then\n            return character:upper()\n\
    \        else\n            return character\n        end\n    end)\n    return\
    \ flip\nend", "  return string:gsub('(%w)', function(char)\n    return char:lower()\
    \ == char and char:upper() or char:lower()\n  end)\nend", "    return string:gsub(\"\
    %a\", function(char)\n        if char:lower() == char then\n            return\
    \ char:upper()\n        else\n            return char:lower()\n        end\n \
    \   end)\nend", "\tlocal flipped = {}\n\tfor i = 1, #string do\n\t\tlocal char\
    \ = string:sub(i, i)\n\t\tif char:lower() == char then\n\t\t\tflipped[i] = char:upper()\n\
    \t\telse\n\t\t\tflipped[i] = char:lower()\n\t\tend\n\tend\n\treturn table.concat(flipped)\n\
    end", "  local s = \"\"\n  for c in string:gmatch(\".\") do\n    if c:find(\"\
    %a\") then\n      s = s .. c:lower() == c and c:upper() or c:lower()\n    else\n\
    \      s = s .. c\n    end\n  end\n  return s\nend", "    local out_string = ''\n\
    \    for i=1,#string do\n        local char = string:sub(i,i)\n        if char:match('%a')\
    \ then\n            if char:match('%u') then\n                out_string = out_string\
    \ .. char:lower()\n            else\n                out_string = out_string ..\
    \ char:upper()\n            end\n        else\n            out_string = out_string\
    \ .. char\n        end\n    end\n    return out_string\nend\nM.flip_case = flip_case",
  "    local flipped = string:gsub('%a', function(c)\n        if c:match('%u') then\n\
    \            return c:lower()\n        else\n            return c:upper()\n  \
    \      end\n    end)\n    return flipped\nend", "  local flipped = string.gsub(string,\
    \ \"(%a)\",\n    function(char)\n      if char == char:lower() then\n        return\
    \ char:upper()\n      else\n        return char:lower()\n      end\n    end\n\
    \  )\n  return flipped\nend", "    return string:gsub(\"%a\", {[\"a\"] = \"A\"\
    , [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\", [\"f\"]\
    \ = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"] = \"J\"\
    , [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\", [\"o\"]\
    \ = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\"\
    , [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"]\
    \ = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\", [\"A\"] = \"a\", [\"B\"] = \"b\"\
    , [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\", [\"G\"]\
    \ = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"] = \"k\"\
    , [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\", [\"P\"]\
    \ = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\"\
    , [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"]\
    \ = \"y\", [\"Z\"] = \"z\"})\nend", "  local r = \"\"\n  for i = 1, #string do\n\
    \    local c = string:sub(i, i)\n    if c:lower() == c then\n      r = r .. c:upper()\n\
    \    else\n      r = r .. c:lower()\n    end\n  end\n  return r\nend", "    local\
    \ result = ''\n    for i = 1, #string do\n        local char = string:sub(i, i)\n\
    \        if char == char:upper() then\n            result = result .. char:lower()\n\
    \        else\n            result = result .. char:upper()\n        end\n    end\n\
    \    return result\nend", "  return string:gsub(\"%l\", string.upper):gsub(\"\
    %u\", string.lower)\nend", "    return string:gsub('%a', function(letter)\n  \
    \      return (letter == letter:lower()) and letter:upper() or letter:lower()\n\
    \    end)\nend", "\treturn (string:gsub(\"%a\", function(char)\n\t\treturn (char\
    \ == char:lower()) and char:upper() or char:lower()\n\tend))\nend", "  string\
    \ = string.gsub(string, \"[a-z]\", function(s) return string.upper(s) end)\n \
    \ string = string.gsub(string, \"[A-Z]\", function(s) return string.lower(s) end)\n\
    \  return string\nend", "  return string:gsub('.', function(ch)\n    return ch\
    \ == ch:lower() and ch:upper() or ch:lower()\n  end)\nend", "    return string:gsub(\"\
    %a\", function(ch)\n        if ch:lower() == ch then\n            return ch:upper()\n\
    \        else\n            return ch:lower()\n        end\n    end)\nend", " \
    \ local out = ''\n  for char in string:gmatch('.') do\n    if char:find('%u')\
    \ then\n      out = out .. char:lower()\n    elseif char:find('%l') then\n   \
    \   out = out .. char:upper()\n    else\n      out = out .. char\n    end\n  end\n\
    \  return out\nend", "  local t, i = {}\n  for i = 1, #string do\n    local c\
    \ = string:sub(i, i)\n    if c == c:lower() then\n      t[i] = c:upper()\n   \
    \ else\n      t[i] = c:lower()\n    end\n  end\n  return table.concat(t)\nend",
  "    -- Note that this is _not_ replacing alphabetic characters. That's simply\n\
    \    -- too expensive.\n    return string:gsub('.', \n        function(x)\n  \
    \          if x:find('%a') then\n                if x:lower() == x then\n    \
    \                return x:upper()\n                else\n                    return\
    \ x:lower()\n                end\n            else\n                return x\n\
    \            end\n        end\n    )\nend", "    local result = \"\"\n    for\
    \ c in string:gmatch(\".\") do\n        if c == c:lower() then\n            result\
    \ = result .. c:upper()\n        else\n            result = result .. c:lower()\n\
    \        end\n    end\n    return result\nend", "  if not string or string ==\
    \ '' then return string end\n  return (string:gsub('.', function(ch)\n    if ch:match('%a')\
    \ then\n      if ch:match('%l') then\n        return ch:upper()\n      else\n\
    \        return ch:lower()\n      end\n    else\n      return ch\n    end\n  end))\n\
    end", "    local result = {}\n    for i = 1, string.len(string) do\n        local\
    \ letter = string.sub(string, i, i)\n        if letter:lower() == letter then\n\
    \            table.insert(result, letter:upper())\n        else\n            table.insert(result,\
    \ letter:lower())\n        end\n    end\n    return table.concat(result)\nend",
  "    return string:gsub(\"%a\", function(s)\n        return s == s:lower() and s:upper()\
    \ or s:lower()\n    end)\nend", "    return string:gsub('%a', flip_letter)\nend",
  "  local new_string = ''\n  for i = 1,#string do\n    if string:sub(i,i):lower()\
    \ == string:sub(i,i) then\n      new_string = new_string .. string:sub(i,i):upper()\n\
    \    else\n      new_string = new_string .. string:sub(i,i):lower()\n    end\n\
    \  end\n  return new_string\nend", "    local new_string = {}\n    for i = 1,\
    \ string.len(string) do\n        local char = string.sub(string, i, i)\n     \
    \   if char == char:lower() then\n            new_string[i] = char:upper()\n \
    \       else\n            new_string[i] = char:lower()\n        end\n    end\n\
    \    return table.concat(new_string)\nend", "    return string:gsub('%a', function(char)\n\
    \        if char:lower() == char then\n            return char:upper()\n     \
    \   else\n            return char:lower()\n        end\n    end)\nend", "\tlocal\
    \ len = #string\n\tlocal new_string = \"\"\n\tfor i = 1, len do\n\t\tlocal char\
    \ = string:sub(i, i)\n\t\tlocal char_code = char:byte()\n\t\tif char_code >= 65\
    \ and char_code <= 90 then\n\t\t\tchar = char:lower()\n\t\telseif char_code >=\
    \ 97 and char_code <= 122 then\n\t\t\tchar = char:upper()\n\t\tend\n\t\tnew_string\
    \ = new_string .. char\n\tend\n\treturn new_string\nend", "  return string:gsub(\"\
    .\",\n    function(c)\n      if c:lower() == c then\n        return c:upper()\n\
    \      else\n        return c:lower()\n      end\n    end)\nend", "    local flipped\
    \ = ''\n    for _, char in ipairs{string:byte(1, -1)} do\n        if char >= 97\
    \ and char <= 122 then\n            char = char - 32\n        elseif char >= 65\
    \ and char <= 90 then\n            char = char + 32\n        end\n        flipped\
    \ = flipped .. string.char(char)\n    end\n    return flipped\nend", "    local\
    \ flipped = {}\n    for i = 1,#string do\n        local char = string:sub(i,i)\n\
    \        if char:match('%u') then\n            flipped[i] = char:lower()\n   \
    \     elseif char:match('%l') then\n            flipped[i] = char:upper()\n  \
    \      else\n            flipped[i] = char\n        end\n    end\n    return table.concat(flipped)\n\
    end", "  return gsub(string, \"[%a]\", function(c)\n    return string.lower(c)\
    \ == c and string.upper(c) or string.lower(c)\n  end)\nend", "  local is_lower\
    \ = string.gmatch(string, \"[a-z]\")\n  local is_upper = string.gmatch(string,\
    \ \"[A-Z]\")\n  if is_lower() == nil and is_upper() == nil then\n    return string\n\
    \  else\n    return string.gsub(string, \"[a-z]\", string.upper):gsub(string.upper(string),\
    \ string.lower)\n  end\nend", "    local output = ''\n    for character in string:gmatch('.')\
    \ do\n        if character:match('%l') then\n            output = output .. character:upper()\n\
    \        elseif character:match('%u') then\n            output = output .. character:lower()\n\
    \        else\n            output = output .. character\n        end\n    end\n\
    \    return output\nend", "    local flipped = {}\n    for c in string:gmatch('.')\
    \ do\n        if c:find('%l') then\n            table.insert(flipped, c:upper())\n\
    \        elseif c:find('%u') then\n            table.insert(flipped, c:lower())\n\
    \        else\n            table.insert(flipped, c)\n        end\n    end\n  \
    \  return table.concat(flipped)\nend", "    local result = \"\"\n    for i = 1,\
    \ #string do\n        local c = string:sub(i, i)\n        if c == c:lower() then\n\
    \            result = result .. c:upper()\n        else\n            result =\
    \ result .. c:lower()\n        end\n    end\n    return result\nend", "    return\
    \ string:gsub(\"%a\", function(c)\n        return lpeg.R(\"az\") / lpeg.R(\"AZ\"\
    ) + lpeg.R(\"AZ\") / lpeg.R(\"az\")\n    end)\nend", "    return string:gsub('%a',\
    \ flip_mapping)\nend", "\treturn string:gsub('(%a)', function(char)\n\t\tif char:match('%u')\
    \ then\n\t\t\treturn char:lower()\n\t\telse\n\t\t\treturn char:upper()\n\t\tend\n\
    \tend)\nend", "    return string:gsub('%a', function(c)\n        return c == c:upper()\
    \ and c:lower() or c:upper()\n    end)\nend", "\treturn string:gsub('.', function(c)\
    \ return (c:find('%u') and c:lower() or c:upper()) end)\nend", "    local new_string\
    \ = \"\"\n    for i=1, #string do\n        local char = string:sub(i,i)\n    \
    \    if char:upper() == char then\n            new_string = new_string .. char:lower()\n\
    \        else\n            new_string = new_string .. char:upper()\n        end\n\
    \    end\n    return new_string\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        local b = string:byte(i)\n        if b >= 65 and b <= 90 then\n\
    \            t[i] = string.char(b + 32)\n        elseif b >= 97 and b <= 122 then\n\
    \            t[i] = string.char(b - 32)\n        else\n            t[i] = string.char(b)\n\
    \        end\n    end\n    return table.concat(t)\nend", "  local out = \"\"\n\
    \  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char:lower()\
    \ == char then\n      out = out .. char:upper()\n    else\n      out = out ..\
    \ char:lower()\n    end\n  end\n  return out\nend", "  local out = ''\n  for char\
    \ in string:gmatch '.' do\n    if char:match '%u' then\n      out = out .. char:lower()\n\
    \    elseif char:match '%l' then\n      out = out .. char:upper()\n    else\n\
    \      out = out .. char\n    end\n  end\n  return out\nend", "  local result\
    \ = {}\n  for i = 1,#string do\n    if string.sub(string,i,i) == string.upper(string.sub(string,i,i))\
    \ then\n      result[i] = string.lower(string.sub(string,i,i))\n    else\n   \
    \   result[i] = string.upper(string.sub(string,i,i))\n    end\n  end\n  return\
    \ table.concat(result)\nend", "  local swapped = {}\n  for i = 1, #string do\n\
    \    local char = string:sub(i, i)\n    if char:match('[%a]') then\n      swapped[i]\
    \ = char:lower() == char and char:upper() or char:lower()\n    else\n      swapped[i]\
    \ = char\n    end\n  end\n  return table.concat(swapped)\nend", "    return string:gsub('%a',\
    \ char_fixer)\nend", "    return string:gsub(\"%a\", function(c)\n        if c:match(\"\
    %u\") then\n            return c:lower()\n        else\n            return c:upper()\n\
    \        end\n    end)\nend", "\treturn string:gsub('(%a)', {\n\t\t[lower] = upper,\n\
    \t\t[upper] = lower,\n\t})\nend", "  local new_string = \"\"\n  for i = 1, #string\
    \ do\n    local char = string:sub(i, i)\n    if char == char:lower() then\n  \
    \    new_string = new_string .. char:upper()\n    else\n      new_string = new_string\
    \ .. char:lower()\n    end\n  end\n  return new_string\nend", "    return string:gsub('%a',\
    \ function(c)\n        return (c:upper() == c) and c:lower() or c:upper()\n  \
    \  end)\nend", "    local flipped = {}\n    for index = 1, #string do\n      \
    \  local character = string:sub(index, index)\n        if character:match('%l')\
    \ then\n            flipped[index] = character:upper()\n        elseif character:match('%u')\
    \ then\n            flipped[index] = character:lower()\n        else\n       \
    \     flipped[index] = character\n        end\n    end\n    return table.concat(flipped)\n\
    end", "    return string:gsub(\"%a\", {\n        [string.lower(string)] = string.upper,\n\
    \        [string.upper(string)] = string.lower,\n    })\nend", "    return string:gsub(\"\
    %a\", function(c)\n        if c:find(\"%u\") then\n            return c:lower()\n\
    \        else\n            return c:upper()\n        end\n    end)\nend", "  return\
    \ (string:gsub('%l', function(c) return (c:upper() == c) and c:lower() or c:upper()\
    \ end))\nend", "\tlocal string_flipped = ''\n\tfor i = 1, string.len(string) do\n\
    \t\tlocal current_char = string.sub(string, i, i)\n\t\tif string.match(current_char,\
    \ '[a-z]') then\n\t\t\tstring_flipped = string_flipped .. string.upper(current_char)\n\
    \t\telseif string.match(current_char, '[A-Z]') then\n\t\t\tstring_flipped = string_flipped\
    \ .. string.lower(current_char)\n\t\telse\n\t\t\tstring_flipped = string_flipped\
    \ .. current_char\n\t\tend\n\tend\n\treturn string_flipped\nend", "  local result\
    \ = {}\n  for i = 1, #string do\n    local c = string:sub(i, i)\n    if c:match('[a-z]')\
    \ then\n      result[i] = c:upper()\n    elseif c:match('[A-Z]') then\n      result[i]\
    \ = c:lower()\n    else\n      result[i] = c\n    end\n  end\n  return table.concat(result)\n\
    end", "    return string:gsub('%l', lcase):gsub('%u', ucase)\nend", "    return\
    \ string:gsub('%a', function(c)\n        if c:lower() == c then\n            return\
    \ c:upper()\n        else\n            return c:lower()\n        end\n    end)\n\
    end", "  local function flip(c)\n    if c >= 'a' and c <= 'z' then\n      return\
    \ c:upper()\n    elseif c >= 'A' and c <= 'Z' then\n      return c:lower()\n \
    \   else\n      return c\n    end\n  end\n  return string:gsub('%a', flip)\nend",
  "  return string:gsub(\"%a\", function(ch)\n    if ch:lower() == ch then\n     \
    \ return ch:upper()\n    else\n      return ch:lower()\n    end\n  end)\nend",
  "  local flipped = {}\n  for i = 1, #string do\n    local ch = string:sub(i, i)\n\
    \    local is_up = ch:find('[A-Z]')\n    if is_up then\n      ch = ch:lower()\n\
    \    else\n      ch = ch:upper()\n    end\n    flipped[i] = ch\n  end\n  return\
    \ table.concat(flipped)\nend", "    local flipped = \"\"\n    for char in string:gmatch('.')\
    \ do\n        if char:lower() == char then\n            flipped = flipped .. char:upper()\n\
    \        else\n            flipped = flipped .. char:lower()\n        end\n  \
    \  end\n    return flipped\nend", "  local new_string = ''\n  for i = 1, #string\
    \ do\n    local char = string:sub(i, i)\n    if char:match('%a') then\n      if\
    \ char:match('%l') then\n        new_string = new_string .. char:upper()\n   \
    \   else\n        new_string = new_string .. char:lower()\n      end\n    else\n\
    \      new_string = new_string .. char\n    end\n  end\n  return new_string\n\
    end", "    local result = \"\"\n    for i = 1, #string do\n        local ch =\
    \ string:sub(i, i)\n        local uch = ch:upper()\n        if ch == uch then\n\
    \            result = result .. ch:lower()\n        else\n            result =\
    \ result .. uch\n        end\n    end\n    return result\nend", "  return string:gsub(\"\
    %a\", function(letter)\n    return letter == letter:lower() and letter:upper()\
    \ or letter:lower()\n  end)\nend", "    return (string:gsub(\"%a\", function(x)\n\
    \        if x:lower() == x then\n            return x:upper()\n        else\n\
    \            return x:lower()\n        end\n    end))\nend", "    return string:gsub('%l',\
    \ function(char)\n        return char:upper()\n    end):gsub('%u', function(char)\n\
    \        return char:lower()\n    end)\nend", "  return string:gsub(\"%a\", function(char)\n\
    \    return (char == char:lower()) and char:upper() or char:lower()\n  end)\n\
    end", "  local t = {}\n  for char in string:gmatch(\".\") do\n    if char:match(\"\
    %u\") then\n      t[#t+1] = char:lower()\n    elseif char:match(\"%l\") then\n\
    \      t[#t+1] = char:upper()\n    else\n      t[#t+1] = char\n    end\n  end\n\
    \  return table.concat(t)\nend", "    local flipped = ''\n    for char in string:gmatch('.')\
    \ do\n        if char:match('%u') then\n            flipped = flipped .. char:lower()\n\
    \        elseif char:match('%l') then\n            flipped = flipped .. char:upper()\n\
    \        else\n            flipped = flipped .. char\n        end\n    end\n \
    \   return flipped\nend", "    return (string:gsub(\"%a\", function(c)\n     \
    \   return lpeg.P(c):match(lpeg.R(\"az\")+lpeg.R(\"AZ\"))\n    end))\nend", " \
    \ return string:gsub(\"%a\", function(s)\n                             return\
    \ lpeg.P(s:lower())\n                                    + lpeg.P(s:upper())\n\
    \                           end)\nend", "  return string:gsub('%a', function(char)\n\
    \    if char:match('%u') then\n      return char:lower()\n    else\n      return\
    \ char:upper()\n    end\n  end)\nend", "  return string:gsub('%a', function(char)\n\
    \    return char:lower() == char and char:upper() or char:lower()\n  end)\nend",
  "\tlocal flipped = {}\n\tfor i=1, #string do\n\t\tlocal ch = string:sub(i,i)\n\t\
    \tlocal lower = ch:lower()\n\t\tlocal upper = ch:upper()\n\t\tif ch == lower then\n\
    \t\t\ttable.insert(flipped, upper)\n\t\telse\n\t\t\ttable.insert(flipped, lower)\n\
    \t\tend\n\tend\n\treturn table.concat(flipped)\nend", "  return string:gsub('%a',\
    \ function(char)\n    return uppercase[char] or lowercase[char]\n  end)\nend",
  "  return string:gsub('%a', {\n    a = 'A',\n    b = 'B',\n    c = 'C',\n    d =\
    \ 'D',\n    e = 'E',\n    f = 'F',\n    g = 'G',\n    h = 'H',\n    i = 'I',\n\
    \    j = 'J',\n    k = 'K',\n    l = 'L',\n    m = 'M',\n    n = 'N',\n    o =\
    \ 'O',\n    p = 'P',\n    q = 'Q',\n    r = 'R',\n    s = 'S',\n    t = 'T',\n\
    \    u = 'U',\n    v = 'V',\n    w = 'W',\n    x = 'X',\n    y = 'Y',\n    z =\
    \ 'Z',\n    A = 'a',\n    B = 'b',\n    C = 'c',\n    D = 'd',\n    E = 'e',\n\
    \    F = 'f',\n    G = 'g',\n    H = 'h',\n    I = 'i',\n    J = 'j',\n    K =\
    \ 'k',\n    L = 'l',\n    M = 'm',\n    N = 'n',\n    O = 'o',\n    P = 'p',\n\
    \    Q = 'q',\n    R = 'r',\n    S = 's',\n    T = 't',\n    U = 'u',\n    V =\
    \ 'v',\n    W = 'w',\n    X = 'x',\n    Y = 'y',\n    Z = 'z',\n  })\nend", " \
    \ local result = \"\"\n  for i = 1, #string do\n    local c = string:sub(i, i)\n\
    \    if c:find(\"%l\") then\n      result = result .. c:upper()\n    elseif c:find(\"\
    %u\") then\n      result = result .. c:lower()\n    else\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "    local flipped = \"\"\n   \
    \ for i = 1, #string do\n        local ch = string:sub(i, i)\n        local low\
    \ = ch:lower()\n        if ch == low then\n            flipped = flipped .. ch:upper()\n\
    \        else\n            flipped = flipped .. low\n        end\n    end\n  \
    \  return flipped\nend", "  if string.lower(string) == string then\n    return\
    \ string.upper(string)\n  else\n    return string.lower(string)\n  end\nend",
  "  string = string:gsub('%a', function(c) return char.flip_case(c) end)\n  return\
    \ string\nend", "    return string:gsub('%a', function(char)\n        if char:lower()\
    \ == char then\n            return char:upper()\n        else\n            return\
    \ char:lower()\n        end\n    end)\nend", "    return string:gsub('%a', function(char)\n\
    \        return char:match('%u') and char:lower() or char:upper()\n    end)\n\
    end", "  local flipped = {}\n  for i=1, #string do\n    local char = string:sub(i,i)\n\
    \    local flipped_char = (char == char:lower()) and char:upper() or char:lower()\n\
    \    table.insert(flipped, flipped_char)\n  end\n  return table.concat(flipped)\n\
    end", "  local flipped = string.gsub(string, '[%a]', function(c)\n    return string.char(c:byte()^flip_mask)\n\
    \  end)\n  return flipped\nend", "\treturn string:gsub('(%a)', function(c)\n\t\
    \treturn (c == c:lower()) and c:upper() or c:lower()\n\tend)\nend", "    -- Convert\
    \ string to table so we can index with square brackets\n    local string_table\
    \ = utils.string_to_table(string)\n    local flipped_string = {}\n    -- Characters\
    \ are indexed by ascii code, so we only have to add 32 to uppercase\n    -- characters\
    \ to make them lowercase.\n    for i = 1, utils.length(string_table) do\n    \
    \    local char = string_table[i]\n        if utils.is_lowercase(char) then\n\
    \            flipped_string[i] = utils.uppercase(char)\n        elseif utils.is_uppercase(char)\
    \ then\n            flipped_string[i] = utils.lowercase(char)\n        else\n\
    \            flipped_string[i] = char\n        end\n    end\n    return utils.table_to_string(flipped_string)\n\
    end", "  local flipped = \"\"\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if char:match(\"%u\") then\n      flipped = flipped .. char:lower()\n\
    \    elseif char:match(\"%l\") then\n      flipped = flipped .. char:upper()\n\
    \    else\n      flipped = flipped .. char\n    end\n  end\n  return flipped\n\
    end", "    return string:gsub('%a', function(ch)\n        if ch:lower() == ch\
    \ then\n            return ch:upper()\n        else\n            return ch:lower()\n\
    \        end\n    end)\nend", "\tlocal function is_lowercase(char)\n\t\treturn\
    \ char >= 'a' and char <= 'z'\n\tend\n\tlocal function is_uppercase(char)\n\t\t\
    return char >= 'A' and char <= 'Z'\n\tend\n\tlocal function uppercase(char)\n\t\
    \treturn char:upper()\n\tend\n\tlocal function lowercase(char)\n\t\treturn char:lower()\n\
    \tend\n\t\n\tlocal result = {}\n\tfor char in string:gmatch('.') do\n\t\tif is_lowercase(char)\
    \ then\n\t\t\ttable.insert(result, uppercase(char))\n\t\telseif is_uppercase(char)\
    \ then\n\t\t\ttable.insert(result, lowercase(char))\n\t\telse\n\t\t\ttable.insert(result,\
    \ char)\n\t\tend\n\tend\n\treturn table.concat(result)\nend", "  return (string:gsub(\"\
    %a\", function(c) return c == c:lower() and c:upper() or c:lower() end))\nend",
  "    return (string:gsub(\"%a\", function(char)\n        if char:lower() == char\
    \ then\n            return char:upper()\n        else\n            return char:lower()\n\
    \        end\n    end))\nend", "    local result = {}\n    for i=1, #string do\n\
    \        local char = string:sub(i,i)\n        if char:match('%a') then\n    \
    \        local lower = char:lower()\n            if char == lower then\n     \
    \           table.insert(result, char:upper())\n            else\n           \
    \     table.insert(result, lower)\n            end\n        else\n           \
    \ table.insert(result, char)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local new_string = \"\"\n    for i = 1, string.len(string) do\n   \
    \     local ch = string.sub(string, i, i)\n        if ch == ch:lower() then\n\
    \            new_string = new_string .. ch:upper()\n        else\n           \
    \ new_string = new_string .. ch:lower()\n        end\n    end\n    return new_string\n\
    end", "    return string:gsub('%a', function(a)\n        return a:lower() == a\
    \ and a:upper() or a:lower()\n    end)\nend", "    return string:gsub('%a', function(c)\n\
    \        return lc[c] or uc[c]\n    end)\nend", "  return string:gsub('%a', function(character)\n\
    \    if character:match('%u') then\n      return character:lower()\n    else\n\
    \      return character:upper()\n    end\n  end)\nend", "  return string:gsub('%a',\
    \ function(c)\n    return c == c:upper() and c:lower() or c:upper()\n  end)\n\
    end", "  return string:gsub(\"%a\", function(s)\n    return s == s:lower() and\
    \ s:upper() or s:lower()\n  end)\nend", "  local result = ''\n  for char in string:gmatch('.')\
    \ do\n    result = result .. (is_upper(char) and char:lower() or char:upper())\n\
    \  end\n  return result\nend", "    local result = ''\n    for char in string:gmatch('.')\
    \ do\n        if char:match('%l') then\n            result = result .. char:upper()\n\
    \        elseif char:match('%u') then\n            result = result .. char:lower()\n\
    \        else\n            result = result .. char\n        end\n    end\n   \
    \ return result\nend", "    local s = ''\n    for c in string:gmatch('.') do\n\
    \        s = s .. (c:isupper() and c:lower() or c:upper())\n    end\n    return\
    \ s\nend", "  return string:gsub('%a', function(char)\n    return char:lower()\
    \ == char and char:upper() or char:lower()\n  end)\nend", "    return string:gsub(\"\
    %a\", {\n        [string.lower(string)] = string.upper,\n        [string.upper(string)]\
    \ = string.lower,\n    })\nend", "  if #string == 0 then\n    return \"\"\n  else\n\
    \    local first_char = string:sub(1, 1)\n    local first_char_flipped = first_char:upper()\
    \ == first_char and first_char:lower() or first_char:upper()\n    return first_char_flipped\
    \ .. flip_case(string:sub(2))\n  end\nend", "    local result = \"\"\n    for\
    \ i = 1, #string do\n        local ascii = string.byte(string, i)\n        if\
    \ ascii >= 65 and ascii <= 90 then\n            result = result .. string.char(ascii\
    \ + 32)\n        elseif ascii >= 97 and ascii <= 122 then\n            result\
    \ = result .. string.char(ascii - 32)\n        else\n            result = result\
    \ .. string.char(ascii)\n        end\n    end\n    return result\nend", "  return\
    \ string:gsub(\".\", {\n    [\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\"\
    , [\"d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"]\
    \ = \"H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\"\
    , [\"m\"] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"]\
    \ = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\"\
    , [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"]\
    \ = \"Z\",\n    [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"\
    d\", [\"E\"] = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"\
    ] = \"i\", [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\"\
    , [\"N\"] = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"]\
    \ = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\"\
    , [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\",\n  })\n\
    end", "    return string:gsub(\"%a\", function(x)\n        if x:lower() == x then\n\
    \            return x:upper()\n        else\n            return x:lower()\n  \
    \      end\n    end)\nend", "  return string:gsub(\"%a\",\n    function(c)\n \
    \     if (c:lower() == c) then\n        return c:upper()\n      else\n       \
    \ return c:lower()\n      end\n    end\n  )\nend", "  return lpeg.C(lpeg.R('az')\
    \ + lpeg.R('AZ')) / string.lower * lpeg.P(1)\n         + lpeg.C(lpeg.R('az') +\
    \ lpeg.R('AZ')) / string.upper * lpeg.P(1)\nend", "    return string:gsub('%a',\
    \ function(char)\n        return char:lower() == char and char:upper() or char:lower()\n\
    \    end)\nend", "    return string:gsub('(%a)', string.lower)\nend", "    return\
    \ string:gsub(\"%a\", function(char)\n        if char:find(\"%a\") then\n    \
    \        return char:lower() == char and char:upper() or char:lower()\n      \
    \  end\n    end)\nend", "    local new_string = ''\n    for i = 1, string.len(string)\
    \ do\n        local char = string.sub(string, i, i)\n        if char == char:lower()\
    \ then\n            new_string = new_string .. char:upper()\n        else\n  \
    \          new_string = new_string .. char:lower()\n        end\n    end\n   \
    \ return new_string\nend", "    return string:gsub('%a', function(letter)\n  \
    \      if letter:lower() == letter then\n            return letter:upper()\n \
    \       else\n            return letter:lower()\n        end\n    end)\nend",
  "    return string:gsub(\"%a\", function(char)\n        return char:lower() == char\
    \ and char:upper() or char:lower()\n    end)\nend", "  local new_string = ''\n\
    \  for char in string:gmatch('.') do\n    if char:lower() == char then\n     \
    \ new_string = new_string .. char:upper()\n    else\n      new_string = new_string\
    \ .. char:lower()\n    end\n  end\n  return new_string\nend", "\tlocal flipped\
    \ = ''\n\tfor i = 1,#string do\n\t\tif string.find(string, string.sub(string,\
    \ i, i), 1, true) then\n\t\t\tflipped = flipped .. string.upper(string.sub(string,\
    \ i, i))\n\t\telse\n\t\t\tflipped = flipped .. string.lower(string.sub(string,\
    \ i, i))\n\t\tend\n\tend\n\treturn flipped\nend", "    return string:gsub(\"%a\"\
    , flip_char)\nend", "  local out = ''\n  for char in string:gmatch('.') do\n \
    \   if char:match('%l') then\n      out = out .. char:upper()\n    elseif char:match('%u')\
    \ then\n      out = out .. char:lower()\n    else\n      out = out .. char\n \
    \   end\n  end\n  return out\nend", "    local res = {}\n    for c in string:gmatch('.')\
    \ do\n        local t = lowercase[c]\n        if t then res[#res+1] = t else res[#res+1]\
    \ = uppercase[c] end\n    end\n    return table.concat(res)\nend", "\treturn string:gsub(\"\
    (%w)\", function(char) return char:lower() == char and char:upper() or char:lower()\
    \ end)\nend", "  local nstring = ''\n  for c in string:gmatch('.') do\n    if\
    \ c:match('%l') then\n      nstring = nstring .. c:upper()\n    elseif c:match('%u')\
    \ then\n      nstring = nstring .. c:lower()\n    else\n      nstring = nstring\
    \ .. c\n    end\n  end\n  return nstring\nend", "    local formatted = ''\n  \
    \  for char in string:gmatch('.') do\n        if char:find('%a') then\n      \
    \      formatted = formatted .. char:gsub('%a', function(c)\n                return\
    \ c == c:lower() and c:upper() or c:lower()\n            end)\n        else\n\
    \            formatted = formatted .. char\n        end\n    end\n    return formatted\n\
    end", "  if string then\n    return string:gsub('(%a)', \n      function(s) \n\
    \        if s == s:lower() then\n          return s:upper()\n        else\n  \
    \        return s:lower()\n        end\n      end)\n  end\nend", "\tlocal char_array\
    \ = {}\n\tfor c in string:gmatch('.') do\n\t\tif lower_case[c] then\n\t\t\tchar_array[#char_array\
    \ + 1] = lower_case[c]\n\t\telseif upper_case[c] then\n\t\t\tchar_array[#char_array\
    \ + 1] = upper_case[c]\n\t\telse\n\t\t\tchar_array[#char_array + 1] = c\n\t\t\
    end\n\tend\n\treturn table.concat(char_array)\nend", "  return string:gsub(\"\
    %a\",\n    function(s)\n      return s == s:lower() and s:upper() or s:lower()\n\
    \    end\n  )\nend", "\tlocal output = \"\"\n\tfor i = 1, string.len(string) do\n\
    \t\tlocal current_character = string.sub(string, i, i)\n\t\tif current_character\
    \ == current_character:upper() then\n\t\t\toutput = output .. current_character:lower()\n\
    \t\telse\n\t\t\toutput = output .. current_character:upper()\n\t\tend\n\tend\n\
    \treturn output\nend", "    local flipped = {}\n    for i = 1, #string do\n  \
    \      local char = string:sub(i, i)\n        if char:find('%l') then\n      \
    \      flipped[i] = char:upper()\n        elseif char:find('%u') then\n      \
    \      flipped[i] = char:lower()\n        else\n            flipped[i] = char\n\
    \        end\n    end\n    return table.concat(flipped)\nend", "    local result\
    \ = {}\n    for c in string:gmatch\".\" do\n        if c:isupper() then\n    \
    \        result[#result+1] = c:lower()\n        elseif c:islower() then\n    \
    \        result[#result+1] = c:upper()\n        else\n            result[#result+1]\
    \ = c\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ flipped = ''\n    for c in string:gmatch('.') do\n        if c:isupper() then\n\
    \            flipped = flipped .. c:lower()\n        elseif c:islower() then\n\
    \            flipped = flipped .. c:upper()\n        else\n            flipped\
    \ = flipped .. c\n        end\n    end\n    return flipped\nend", "  local function\
    \ flip(char)\n    local ascii = string.byte(char)\n    if ascii >= 65 and ascii\
    \ <= 90 then\n      return string.char(ascii + 32)\n    elseif ascii >= 97 and\
    \ ascii <= 122 then\n      return string.char(ascii - 32)\n    else\n      return\
    \ char\n    end\n  end\n  return string.gsub(string, '%a', flip)\nend", "    return\
    \ string:gsub('%l', string.upper):gsub('%u', string.lower)\nend", "  return string:gsub('%a',\
    \ function(letter)\n    return letter:lower() == letter and letter:upper() or\
    \ letter:lower()\n  end)\nend", "    return string:gsub('%a', function(character)\n\
    \        return character:lower() == character and character:upper() or character:lower()\n\
    \    end)\nend", "  local result = {}\n  for i=1,string.len(string) do\n    local\
    \ byte = string.byte(string, i)\n    if byte >= 97 and byte <= 122 then\n    \
    \  byte = byte - 32\n    elseif byte >= 65 and byte <= 90 then\n      byte = byte\
    \ + 32\n    end\n    result[i] = string.char(byte)\n  end\n  return table.concat(result)\n\
    end", "    local result = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if c:match('[a-z]') then\n            result[i] = c:upper()\n  \
    \      elseif c:match('[A-Z]') then\n            result[i] = c:lower()\n     \
    \   else\n            result[i] = c\n        end\n    end\n    return table.concat(result)\n\
    end", "    string:gsub('%a', function(char)\n        if char:lower() == char then\n\
    \            return char:upper()\n        else\n            return char:lower()\n\
    \        end\n    end)\nend", "  return string:gsub(\"%a\", flip_case_char)\n\
    end", "  return string:gsub(\"%a\", function(c) return c:upper() == c and c:lower()\
    \ or c:upper() end)\nend", "    local output = \"\"\n    for i = 1, string.len(string)\
    \ do\n        local char = string.sub(string, i, i)\n        local ord = string.byte(char)\n\
    \        if (ord >= 65 and ord <= 90) then\n            char = string.char(ord\
    \ + 32)\n        elseif (ord >= 97 and ord <= 122) then\n            char = string.char(ord\
    \ - 32)\n        end\n        output = output .. char\n    end\n    return output\n\
    end", "  local result = ''\n  for char in string:gmatch('.') do\n    if char:match('%l')\
    \ then\n      result = result .. char:upper()\n    elseif char:match('%u') then\n\
    \      result = result .. char:lower()\n    else\n      result = result .. char\n\
    \    end\n  end\n  return result\nend", "  return string:gsub('%a', function(c)\n\
    \    return c == c:upper() and c:lower() or c:upper()\n  end)\nend", "    local\
    \ flipped = \"\"\n    for i=1, #string do\n        local char = string:sub(i,i)\n\
    \        if char:match(\"%a\") then\n            if char:match(\"%u\") then\n\
    \                flipped = flipped .. char:lower()\n            else\n       \
    \         flipped = flipped .. char:upper()\n            end\n        else\n \
    \           flipped = flipped .. char\n        end\n    end\n    return flipped\n\
    end", "  return string:gsub('%a', flip_table)\nend", "  if not string then return\
    \ '' end\n  local new_string = ''\n  for i=1, #string do\n    local char = string:sub(i,i)\n\
    \    if char:match('%a') then\n      if char:lower() == char then\n        new_string\
    \ = new_string .. char:upper()\n      else\n        new_string = new_string ..\
    \ char:lower()\n      end\n    else\n      new_string = new_string .. char\n \
    \   end\n  end\n  return new_string\nend", "    local result = \"\"\n    for character\
    \ in string:gmatch(\".\") do\n        local upper = character:match(\"%u\")\n\
    \        local lower = character:match(\"%l\")\n        if upper then\n      \
    \      result = result .. lower\n        elseif lower then\n            result\
    \ = result .. upper\n        else\n            result = result .. character\n\
    \        end\n    end\n    return result\nend", "    local new_string = \"\"\n\
    \    for i = 1, #string do\n        local char = string:sub(i, i)\n        if\
    \ char == char:lower() then\n            new_string = new_string .. char:upper()\n\
    \        else\n            new_string = new_string .. char:lower()\n        end\n\
    \    end\n    return new_string\nend", "    return string:gsub('(%a)', function(letter)\n\
    \        return letter:lower() == letter and letter:upper() or letter:lower()\n\
    \    end)\nend", "    local result = \"\"\n    for i = 1, #string do\n       \
    \ local byte = string:byte(i)\n        if byte >= 65 and byte <= 90 then\n   \
    \         result = result .. string.char(byte + 32)\n        elseif byte >= 97\
    \ and byte <= 122 then\n            result = result .. string.char(byte - 32)\n\
    \        else\n            result = result .. string.char(byte)\n        end\n\
    \    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
