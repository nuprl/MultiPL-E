name: HumanEval_134_check_if_last_char_is_a_letter
language: lua
prompt: "-- Create a function that returns True if the last character\n-- of a given\
  \ string is an alphabetical character and is not\n-- a part of a word, and False\
  \ otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n--\
  \ Examples:\n-- check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n-- check_if_last_char_is_a_letter(\"\
  apple pi e\") \u279E True\n-- check_if_last_char_is_a_letter(\"apple pi e \") \u279E\
  \ False\n-- check_if_last_char_is_a_letter(\"\") \u279E False\nlocal function check_if_last_char_is_a_letter(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
  \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
  \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
  \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
  \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return false\nend", "    if txt:sub(-1) == \" \" then\n       \
    \ return false\n    else\n        return txt:sub(-1):match(\"%a\") and true or\
    \ false\n    end\nend", "  -- code here\nend", "    local last = txt:sub(-1, -1)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    if last == \" \" then\n\
    \        return false\n    elseif alphabet:find(last) then\n        return true\n\
    \    else\n        return false\n    end\nend", end, "  return string.match(txt,\
    \ \"%w%s*$\") == nil\nend", "  return string.find(txt:sub(-1), '%a') and not string.find(txt:sub(-1),\
    \ '%w')\nend", "  local last_char = txt:sub(-1, -1)\n  return last_char:match(\"\
    %a\") and not last_char:match(\"%w\")\nend\nprint(check_if_last_char_is_a_letter(\"\
    apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"\
    apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))\nprint(\"==================\"\
    )", "  local is_space = (txt:find('%s+$') == #txt)\n  local is_letter = (txt:find('%a$')\
    \ == #txt)\n  return not is_space and is_letter\nend", "    local letters = string.gmatch(txt,\
    \ \"[a-zA-Z]\")\n    local last_char\n    for c in letters do\n        last_char\
    \ = c\n    end\n    return last_char == string.sub(txt, -1)\nend", "    local\
    \ lastchar = txt:sub(-1)\n    local charIndex = lastchar:find(\"%a\")\n    return\
    \ charIndex and charIndex == 1\nend", "    local last_char = txt:sub(-1)\n   \
    \ return last_char:match(\"%a\") and not last_char:match(\"%s\")\nend", "  return\
    \ string.find(txt, \"%a$\") and not string.find(txt, \"%s%a$\")\nend", "  return\
    \ false\nend", "  local last_char = txt:sub(-1)\n  return last_char:match(\"%a\"\
    ) and not last_char:match(\"%a%a\")\nend", "  if txt:sub(-1):match(\"%W\") then\n\
    \    return true\n  else\n    return false\n  end\nend", "    local first_letter\
    \ = string.sub(txt, 1, 1)\n    local last_letter = string.sub(txt, -1)\n    return\
    \ last_letter == \" \" and first_letter ~= \" \" or false\nend", "  -- your code\
    \ here\nend", "  -- code here\nend", "    -- code here\nend", "\tif #txt == 0\
    \ then return false end\n\tlocal char = txt:sub(-1)\n\treturn char:match(\"%a\"\
    ) and not char:match(\"%w\")\nend", "    -- code here\nend", "    return #txt\
    \ ~= 0 and txt:match(\"%S+%s*$\") == txt:sub(-1)\nend", "    if txt == '' then\n\
    \        return false\n    end\n    local last = txt:sub(-1)\n    return not txt:match('%s%w+$')\
    \ and last:match('%a')\nend", "    if txt == \"\" then\n        return false\n\
    \    end\n    if txt:match('[%a]$') and not txt:match('[%a] ') then\n        return\
    \ true\n    end\n    return false\nend", "    -- your code here\nend", "  -- code\
    \ here\nend", "  return txt:match'[a-zA-Z]$' and not txt:match'[a-zA-Z]%s$' or\
    \ false\nend", "    -- body\nend", end, "\treturn string.match(txt,\"%a$\") ~=\
    \ nil\nend", "  if txt == '' then return false end\n  return txt:find('%l%s*$')\
    \ ~= nil\nend", "    -- body\nend", "\tif txt:match('%S*$'):match('[%a]') and\
    \ not txt:match('%S* %S*$') then\n\t\treturn true\n\telse\n\t\treturn false\n\t\
    end\nend", "  return nil\nend", "    local lastChar = txt:sub(-1, -1)\n    return\
    \ lastChar:match(\"%a\") and not txt:sub(-2, -2):match(\"%a\")\nend", "  if txt:match(\"\
    %a%a%a%a%a%a%a$\") or txt:match(\"%a%a%a%a%a%a$\") or txt:match(\"%a%a%a%a%a$\"\
    ) or txt:match(\"%a%a%a%a$\") or txt:match(\"%a%a%a$\") or txt:match(\"%a%a$\"\
    ) or txt:match(\"%a$\") then\n    return false\n  elseif txt:match(\"%a%a%a%a%a%a%a%a$\"\
    ) or txt:match(\"%a%a%a%a%a%a%a%a%a$\") or txt:match(\"%a%a%a%a%a%a%a%a%a%a$\"\
    ) or txt:match(\"%a%a%a%a%a%a%a%a%a%a%a$\") or txt:match(\"%a%a%a%a%a%a%a%a%a%a%a%a$\"\
    ) or txt:match(\"%a%a%a%a%a%a%a%a%a%a%a%a%a$\") or txt:match(\"%a%a%a%a%a%a%a%a%a%a%a%a%a%a$\"\
    ) or txt:match(\"%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a$\") or txt:match(\"%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a$\"\
    ) or txt:match(\"%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a$\") or txt:match(\"%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a$\"\
    ) or txt:match(\"%a%a%a%a%a", "    return txt:sub(-1):match(\"[%l]\") ~= nil and\
    \ txt:sub(-1):match(\"%S\") ~= nil\nend", "  if string.len(txt) == 0 then\n  \
    \  return false\n  end\n  local last = string.sub(txt, -1)\n  if string.match(last,\
    \ \"%A\") then\n    return true\n  end\n  return false\nend", "    if #txt ==\
    \ 0 then\n        return false\n    end\n    if not txt:match('%s') then\n   \
    \     return false\n    end\n    return txt:match('%w%s$') == nil\nend", "   \
    \ return false\nend", "  if txt:sub(-1):match('%a') and not txt:sub(-1):match('%w')\
    \ then\n    return true\n  else\n    return false\n  end\nend", "    -- body\n\
    end", "  if not txt:find('%s[%a]$') then return false end\n  return txt:match('%s([%a])$')\
    \ == txt:match('^(%s?[%a])')\nend", "  if #txt > 0 then\n    if txt:sub(-1):match(\"\
    %a\") then\n      if not txt:sub(-2):match(\"%s\") then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    return txt:match(\"%a$\"\
    )\nend", "    -- check if string is empty\n    if txt == \"\" then\n        return\
    \ false\n    end\n    -- get last character of string\n    local last_char = txt:sub(-1)\n\
    \    -- check if last character is a letter (alphabetical character)\n    if last_char:match(\"\
    %a\") then\n        -- check if last character is not a part of a word\n     \
    \   if last_char:match(\"%s\") then\n            return false\n        else\n\
    \            return true\n        end\n    else\n        return false\n    end\n\
    end\nprint(check_if_last_char_is_a_letter(\"apple pie\")) -- \u279E False\nprint(check_if_last_char_is_a_letter(\"\
    apple pi e\")) -- \u279E True\nprint(check_if_last_char_is_a_letter(\"apple pi\
    \ e \")) -- \u279E False\nprint(check_if_last_char_is_a_letter(\"\")) -- \u279E\
    \ False\nprint(check_if_last_char_is_a_letter(\"a\")) -- \u279E True\nprint(check_if_last_char_is_a_letter(\"\
    a \")) -- \u279E False", "  -- body\nend", "  return txt:match(\"[%a][%a]+$\"\
    ) and not txt:match(\"[%a]%s*$\")\nend", "  local lst_chr = txt:sub(-1)\n  return\
    \ lst_chr ~= \" \" and lst_chr:match(\"%a\")\nend", "  return txt:sub(-1):match(\"\
    %a\") and not txt:sub(-1):match(\"%w\")\nend", "  --\nend", '    local s = txt:sub(-1)',
  "    local t = txt:sub(-1)\n    if (t >= \"a\" and t <= \"z\") or (t >= \"A\" and\
    \ t <= \"Z\") then\n        return true\n    else\n        return false\n    end\n\
    end", "  local match = txt:match(\"%a$\")\n  return match and not txt:match(\"\
    %a%s+%a$\")\nend", "  -- Code here\nend", "    -- code goes here\nend", "  return\
    \ false\nend", "    return txt:match(\"%l$\") and not txt:match(\"%l \")\nend",
  "  if txt:sub(-1):match('%a') and not txt:sub(-1):match('%w') then\n    return true\n\
    \  else\n    return false\n  end\nend", "    -- use strlen from utf8.lua\n   \
    \ -- get last char from string using strlen, and see if its alphabetical\n   \
    \ -- if it is, see if the next char to it is a space, if so return true\n    --\
    \ if not return false\nend", "  local last_char = txt:sub(-1)\n  if string.find(last_char,\
    \ \"%a\") then\n    return true\n  else\n    return false\n  end\nend", end, " \
    \ if not txt or #txt == 0 then return false end\n  return txt:find('%a$') and\
    \ not txt:find('%a%s$')\nend", "    local last_char = txt:sub(-1)\n    if last_char:match(\"\
    %w\") then\n        return false\n    else\n        return true\n    end\nend",
  "  if txt == \"\" then return false end\n  local txt = string.gsub(txt, \" \", \"\
    \")\n  local last_char = string.sub(txt, #txt, #txt)\n  local first_char = string.sub(txt,\
    \ 1, 1)\n  local char_list = \"abcdefghijklmnopqrstuvwxyz\"\n  if last_char ==\
    \ \" \" then return false end\n  if last_char == \"'\" then return false end\n\
    \  if last_char == \"-\" then return false end\n  if first_char == \"'\" then\
    \ return false end\n  if first_char == \"-\" then return false end\n  for i =\
    \ 1, #char_list do\n    if last_char == string.sub(char_list, i, i) then\n   \
    \   return true\n    end\n  end\n  return false\nend", "  if txt == \"\" then\
    \ return false end\n  local last = txt:sub(-1)\n  return last:match(\"%a\") and\
    \ not txt:match(\"%S%S$\")\nend", "    return string.sub(txt, -1):match(\"%a\"\
    ) and not string.sub(txt, -1):match(\"%s\")\nend", "    if #txt == 0 then\n  \
    \      return false\n    end\n    local final_char = txt:sub(-1)\n    local final_char_preceding\
    \ = txt:sub(-2)\n    return final_char_preceding == \" \" and not final_char:match(\"\
    %a\")\nend", "  local ends_with_letter = txt:sub(-1):match(\"%a\")\n  local ends_with_space\
    \ = txt:sub(-1):match(\"%s\")\n  if ends_with_letter and not ends_with_space then\n\
    \    return true\n  else\n    return false\n  end\nend", "    return string.match(txt,\
    \ \"%a$\") ~= nil\nend", "  local last_char = txt:sub(-1)\n  return (last_char:match('%a')\
    \ and last_char:match('%s') == nil)\nend", "  return string.find(txt, \"[a-zA-Z]$\"\
    ) ~= nil\nend", "  if txt:sub(-1):match(\"[a-zA-Z]\") and txt:sub(-1):match(\"\
    \ \") then\n    return true\n  else\n    return false\n  end\nend\nprint(check_if_last_char_is_a_letter(\"\
    apple pie\")) -- false\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\
    \ -- true\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) -- false\nprint(check_if_last_char_is_a_letter(\"\
    \")) -- false", "    return txt:match('([%a])([^%a])$') ~= nil\nend", "    local\
    \ last_char = txt:sub(-1)\n    local last_char_is_a_letter = last_char:match(\"\
    %a\") ~= nil\n    local last_char_is_not_a_part_of_a_word = last_char:match(\"\
    %s\") ~= nil\n    return last_char_is_a_letter and last_char_is_not_a_part_of_a_word\n\
    end", "    local lastChar = txt:sub(-1)\n    if lastChar == ' ' then\n       \
    \ return false\n    else\n        return lastChar:match('%a') ~= nil\n    end\n\
    end", "    if txt:len() == 0 then\n        return false\n    end\n    local sub\
    \ = txt:sub(txt:len(), txt:len())\n    if sub:match(\"%a\") and not txt:sub(txt:len()\
    \ - 1, txt:len() - 1):match(\"%a\") then\n        return true\n    end\n    return\
    \ false\nend", "  if txt:sub(-1):match(\"[%a]\") and not txt:sub(-1):match(\"\
    %S\") then\n    return true\n  else\n    return false\n  end\nend", "  local lastChar\
    \ = txt:sub(-1)\n  return #txt > 0 and lastChar ~= ' ' and not lastChar:match('%W')\n\
    end", "  -- check if last character is a letter and check if last\n  -- character\
    \ is not part of a word\n  return txt:sub(-1):match(\"%a\") and not txt:sub(-1):match(\"\
    %w\")\nend", "\tif txt:find(\"%a$\") then\n\t\tif txt:find(\" %a$\") then\n\t\t\
    \treturn false\n\t\telse\n\t\t\treturn true\n\t\tend\n\telse\n\t\treturn false\n\
    \tend\nend", "    return type(txt) == \"string\" and txt:match(\"[%w]%s\") ~=\
    \ nil\nend", "    local last_char = txt:sub(-1)\n    return not last_char:match(\"\
    %a\")\nend", "  local last_ch = txt:sub(-1)\n  if last_ch:match(\"%w\") then\n\
    \    return false\n  else\n    return true\n  end\nend", "  -- code here\nend",
  "  return string.find(txt:sub(-1), \"%w\") == nil\nend", "  if txt:sub(-1):match(\"\
    [a-zA-Z]\") and not txt:sub(-1):match(\"%a%a\") then\n    return true\n  else\n\
    \    return false\n  end\nend", "    -- a bit tricky...\n    -- we want to check\
    \ if the last character is a letter,\n    -- and that it is not part of a word.\n\
    \    -- we do this by splitting the string into words,\n    -- and then check\
    \ if the last character of the last word\n    -- is a letter, and if there is\
    \ a space after it.\n    --\n    -- the full string minus the last word minus\
    \ the last\n    -- character of the last word.\n    local lhs = txt:sub(1, -(#txt:match(\"\
    [^ ]+$\") + 1))\n    -- the last word of the string.\n    local rhs = txt:match(\"\
    [^ ]+$\")\n    -- its last character.\n    local last_char = rhs:sub(-1)\n   \
    \ -- there is a space after the last word and its last\n    -- character is a\
    \ letter?\n    return #lhs > 0 and last_char:match(\"%a\")\nend", "  return #txt\
    \ > 0 and string.match(txt, \"%a$\") and not string.match(txt, \"%a%s$\")\nend",
  "    if #txt == 0 then\n        return false\n    end\n    return not txt:find(\"\
    [%a]%s$\")\nend", "    --your code here\nend", end, "  if txt:match(\"[%a]$\"\
    ) and not txt:match(\"[%a] $\") then\n    return true\n  else\n    return false\n\
    \  end\nend", "  local last = txt:sub(-1)\n  return not last:match(\"%s\") and\
    \ last:match(\"%a\")\nend", "  return false\nend", "    return (txt:match(\"%w*%s(%w)\"\
    ) or txt:match(\"(%w)$\")) and true or false\nend", "  --local str = string.sub(txt,\
    \ string.len(txt))\n  --if not str:match(\"%w\") then\n  --  return true\n  --end\n\
    \  if string.match(txt, \"[a-zA-Z]%s$\") then\n    return true\n  end\n  return\
    \ false\nend", "  return not string.find(txt, '%s') and string.find(txt, '%w$')\
    \ and\n    not string.find(txt, '$')\nend", "    return txt:match(\"%a$\") ~=\
    \ nil and txt:match(\"%a%s%a$\") == nil\nend", "    if #txt == 0 then\n      \
    \  return false\n    end\n    local last_char = txt:sub(-1)\n    if last_char:match(\"\
    %a\") and not last_char:match(\"%w\") then\n        return true\n    end\n   \
    \ return false\nend", "  local last = txt:sub(-1)\n  local space = txt:sub(-2,\
    \ -2) == \" \"\n  return space and last:match(\"%a\") and true or false\nend",
  "    if #txt == 0 then\n        return false\n    end\n    if txt:sub(-1):match(\"\
    %a\") then\n        if txt:sub(-2, -2):match(\"%s\") then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  return txt:gsub(\"%s\"\
    ,\"\"):len() ~= txt:len()\nend", "  -- code here\nend", "  if txt == '' then return\
    \ false end\n  local txt = txt:gsub('%s', '')\n  local last_char = txt:sub(-1,\
    \ -1)\n  return not last_char:match('%a')\nend", "  return false\nend", "    local\
    \ last_char = txt:sub(-1)\n    local next_char = txt:sub(-2, -2)\n    local is_last_char_a_letter\
    \ = last_char:match(\"%a\") ~= nil\n    local is_next_char_a_letter = next_char:match(\"\
    %a\") ~= nil\n    return is_last_char_a_letter and not is_next_char_a_letter\n\
    end", "  -- your code here\nend", "    local char = txt:sub(-1)\n    return char\
    \ >= 'a' and char <= 'z'\nend", "  return string.match(txt, \"%w+$\") == nil\n\
    end", "    if txt:sub(-1):match(\"%a\") then\n        if not txt:sub(-2):match(\"\
    %a\") then\n            return true\n        end\n    end\n    return false\n\
    end", "    return txt:match(\".*%s([%a])$\") and true or false\nend", "  return\
    \ txt:match(\".$\") == txt:match(\".$\"):gsub(\"%s\",\"\")\nend", "\treturn string.find(txt,\
    \ \"[%w]$\") == nil\nend", "\tlocal lastchar = txt:sub(-1)\n\tlocal penultimatechar\
    \ = txt:sub(-2, -2)\n\tif penultimatechar == \" \" then\n\t\treturn false\n\t\
    elseif lastchar:match(\"%a\") then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend", "  local c = txt:sub(-1)\n  return c:match(\"%a\") and c:match(\"\
    %S\")\nend", "  -- code here\nend", "    --TODO: implement this function\nend",
  "\t-- code here\nend", "  -- body\nend", "  --\nend", "    local i = txt:match(\"\
    .$\")\n    return i ~= \" \" and i:match(\"%a\") and true or false\nend", "  --\
    \ check if there are more than 0 characters\n  if #txt > 0 then\n    -- take the\
    \ last letter, check if it is between A and Z\n    local lastChar = txt:sub(-1)\n\
    \    local isLetter = false\n    for i = 65, 90 do\n      if string.char(i) ==\
    \ lastChar then\n        isLetter = true\n      end\n    end\n    -- if it is\
    \ between A and Z, it's a letter\n    if isLetter then\n      -- check if it is\
    \ a part of a word\n      local isPartOfWord = false\n      local chars = {}\n\
    \      for char in txt:gmatch\".\" do\n        table.insert(chars, char)\n   \
    \   end\n      for i = #chars - 1, 1, -1 do\n        if chars[i] == \" \" then\n\
    \          isPartOfWord = true\n        end\n      end\n      -- if it is not\
    \ a part of a word, return true\n      if not isPartOfWord then\n        return\
    \ true\n      end\n    end\n  end\n  -- if it is not a letter or is a part of\
    \ a word, return false\n  return false\nend", "    return txt:sub(-1, -1):match(\"\
    %a\") and not txt:sub(-1, -1):match(\"%w\")\nend", "\t-- body\nend", "    if txt\
    \ == \"\" then\n        return false\n    end\n    local f = string.sub(txt, 1,\
    \ 1)\n    local l = string.sub(txt, -1)\n    if f:match(\"%W\") and l:match(\"\
    %w\") then\n        return true\n    end\n    return false\nend", "    return\
    \ string.find(txt:sub(-1), \"[a-zA-Z]\") ~= nil and\n        string.find(txt:sub(-2,\
    \ -2), \"[%s]\") ~= nil\nend", "  local lastchar = txt:sub(-1, -1)\n  return (lastchar:find(\"\
    %a\") and not lastchar:find(\"%w\")) and true or false\nend", "  if txt == \"\"\
    \ then return false end\n  return txt:sub(-1):match(\"%a\") and not txt:sub(-2):match(\"\
    %a\")\nend", "    -- code here\nend", "    if #txt > 0 then\n        if txt:sub(-1):match(\"\
    %u\") then\n            if txt:sub(-2,-2):match(\"%s\") then\n               \
    \ return true\n            end\n        end\n    end\n    return false\nend",
  "  local last_char = txt:sub(-1)\n  return last_char:match(\"%a\") ~= nil and not\
    \ last_char:match(\"%s\")\nend", "    return txt:match('%l$') ~= nil\nend", "\t\
    -- TODO: implement this function\nend", "    -- your code here\nend", "    --\
    \ body\nend", "  local last = txt:sub(-1)\n  return last:match(\"%a\") and txt:match(\"\
    %s$\") == nil\nend", "    -- TODO: handle edge cases, number, spaces and empty\
    \ string\n    local lastChar = txt:sub(-1)\n    local isLetter = lastChar:match(\"\
    %a\")\n    local isSpace = lastChar:match(\"%s\")\n    if isLetter and not isSpace\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \ return string.find(txt, \".*[a-zA-Z]$\") ~= nil\nend", "  -- check the length\
    \ of the string\n  if #txt == 0 then\n    return false\n  end\n  -- check if the\
    \ last character is a letter\n  local last = txt:sub(-1)\n  if last:match(\"%a\"\
    ) then\n    -- make sure that the last character is not a part of a word\n   \
    \ -- get a list of words from the string\n    local words = txt:split(\" \")\n\
    \    -- check the last word in the list of words\n    local last_word = words[#words]\n\
    \    -- check if last character of the string equals to last character of the\
    \ last word\n    if last == last_word:sub(-1) then\n      return false\n    else\n\
    \      return true\n    end\n  else\n    return false\n  end\nend", "  if txt:match(\"\
    %S$\") then\n    return txt:match(\"%S$\"):match(\"[a-zA-Z]\")\n  end\n  return\
    \ false\nend", "    -- body\nend", "    return false\nend", "  return string.match(txt,\
    \ \"([%a%s])(%a)$\")\nend", "\t-- body\nend", "    return txt:match(\"%a$\") and\
    \ not txt:match(\"%w%a$\")\nend", "  return txt:sub(-1):match('%a') and not txt:sub(-1):match('%w')\n\
    end", "  -- body\nend", "    -- body\nend", "\tlocal last = txt:sub(-1)\n\treturn\
    \ last:match(\"%a\") and not txt:match(\"%a%s+%a+%s+%a+%s+$\")\nend", "  local\
    \ prevIsSpace = true\n  for i=1,#txt do\n    local c = txt:sub(i,i)\n    if c:match(\"\
    %s\") then\n      prevIsSpace = true\n    elseif prevIsSpace then\n      prevIsSpace\
    \ = false\n    else\n      return false\n    end\n  end\n  return true\nend",
  "  return txt:match('[a-zA-Z]$') and not txt:match(' [a-zA-Z]$')\nend", "  return\
    \ txt:match(\"[%a]$\") and not txt:match(\"[%a][%s]$\")\nend", "    if txt ==\
    \ \"\" then\n        return false\n    end\n    if string.match(txt, \".*%S%S\"\
    ) then\n        if not string.match(txt, \".*%S$\") then\n            return true\n\
    \        end\n    end\n    return false\nend\nassert(check_if_last_char_is_a_letter(\"\
    apple pie\") == false)\nassert(check_if_last_char_is_a_letter(\"apple pi e\")\
    \ == true)\nassert(check_if_last_char_is_a_letter(\"apple pi e \") == false)\n\
    assert(check_if_last_char_is_a_letter(\"\") == false)", "    local len = #txt\n\
    \    if len == 0 then\n        return false\n    end\n    if not is_alpha(txt:sub(len,\
    \ len)) then\n        return false\n    end\n    if len == 1 then\n        return\
    \ true\n    end\n    if is_alpha(txt:sub(len - 1, len - 1)) then\n        return\
    \ false\n    end\n    return true\nend", "  if #txt == 0 then return false end\n\
    \  local last = txt:sub(-1)\n  return not last:match(\"%s\") and not last:match(\"\
    %p\")\nend", "\tlocal last_char = txt:sub(-1)\n\treturn string.match(last_char,\
    \ \"%a\") ~= nil and not string.match(txt, \" \" .. last_char .. \"$\")\nend",
  "  if txt:match(\"%a$\") then\n    return true\n  else\n    return false\n  end\n\
    end", "  if txt:sub(-1) == \" \" then\n    return false\n  else\n    return true\n\
    \  end\nend", "  local last_char = txt:sub(-1)\n  local is_letter = (last_char:match(\"\
    %a\") == last_char)\n  local is_part_of_word = txt:sub(-2, -2):match(\"%a\")",
  "    if (txt:find(\"%S+%s*$\")) then return false end\n    return (txt:find(\"%a$\"\
    )) and true or false\nend", "  local txt = txt or \"\"\n  local last_word = txt:match(\"\
    %s*(.-)%s*$\")\n  if last_word == \"\" then return false end\n  return not last_word:match(\"\
    %a+%s\")\nend", "    -- return txt:len() > 0 and txt:sub(-1):match(\"[a-zA-Z]\"\
    ) and txt:sub(-2, -2) ~= \" \"\n    -- return txt:len() > 0 and txt:sub(-1):match(\"\
    [a-zA-Z]\") and not txt:sub(-2, -2):match(\"[a-zA-Z]\")\n    -- return txt:len()\
    \ > 0 and txt:sub(-1):match(\"[a-zA-Z]\") and txt:sub(-2, -2):match(\"%s\")\n\
    \    return txt:len() > 0 and txt:sub(-1):match(\"[a-zA-Z]\") and txt:sub(-2,\
    \ -2):match(\"[^a-zA-Z]\")\nend", "  if string.len(txt) == 0 then\n    return\
    \ false\n  end\n  local last_char = string.sub(txt, -1)\n  if last_char == ' '\
    \ then\n    return false\n  end\n  return not string.find(txt, ' ' .. last_char\
    \ .. ' ')\nend", end, "  local sl = txt:len()\n  if sl == 0 then return false\
    \ end\n  local lc = txt:sub(sl, sl)\n  if lc:match(\"%a\") then\n    if lc:match(\"\
    %s\") then return false end\n    return true\n  end\n  return false\nend", " \
    \   if txt:match(\"%a$\") and txt:match(\"%a%s%a$\") == nil then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local t = txt:gsub(\"\
    %a\", \"\")\n    local last_char = txt:sub(#t+1, #t+1)\n    local c = string.find(\"\
    abcdefghijklmnopqrstuvwxyz\", last_char)", "    -- body\nend", "    return #txt\
    \ ~= 0 and not txt:match('%s') and string.match(txt, '[a-zA-Z]$')\nend", "   \
    \ local flag = false\n    local last = txt:sub(-1)\n    local word = txt:match(\"\
    %S+%s\")\n    if word == nil then\n        return flag\n    end\n    local lastchar\
    \ = word:sub(-1)\n    if last ~= lastchar then\n        flag = true\n    end\n\
    \    return flag\nend", "  if #txt == 0 then return false end\n  local last_char\
    \ = txt:sub(-1)\n  if last_char:match(\"%a\") and not last_char:match(\"%w\")\
    \ then\n    return true\n  end\n  return false\nend", "    return txt:find(\"\
    %w%p%w$\") == nil\nend", "    return txt:find(\"%p%w*$\")\nend", "    return string.match(txt,\"\
    %a$\") and not string.match(txt,\"%w$\")\nend", "  return string.match(txt, \"\
    ^.*%s[a-zA-Z].*$\")\nend", "  local lastChar = txt:sub(-1)\n  local i = string.len(txt)\
    \ - 1\n  while i > 0 do\n    if txt:sub(i, i) == \" \" then\n      return string.match(lastChar,\
    \ \"[a-zA-Z]\")\n    end\n    i = i - 1\n  end\n  return false\nend", "  return\
    \ txt:find(\"[%a]%s$\") ~= nil\nend", "  return false\nend", "    if txt:len()\
    \ == 0 then\n        return false\n    end\n    if string.find(txt, \" \", txt:len())\
    \ then\n        return false\n    end\n    if txt:len() == 1 then\n        return\
    \ true\n    end\n    if string.find(txt, \" \", txt:len() - 1) then\n        return\
    \ true\n    end\n    return false\nend", "  return (txt:match(\".$\") ~= \" \"\
    ) and not txt:match(\".%a.$\")\nend", "  local last_char = txt:sub(-1)\n  return\
    \ last_char:match(\"[a-zA-Z]\") and txt:sub(-2,-2) ~= \" \"\nend", "    return\
    \ string.match(txt, \"[%a]$\") and not string.match(txt, \"%a%s\")\nend", "  local\
    \ last = txt:sub(-1)\n  return last:match('%a') and not txt:sub(-2):match('%a')\n\
    end", "  if #txt==0 then return false end\n  local last = txt:sub(-1,-1)\n  if\
    \ last:match(\"%w\") and not txt:sub(-2,-2):match(\"%w\") then\n    return true\n\
    \  else\n    return false\n  end\nend", "\treturn txt:sub(-1):match('%a') and\
    \ not txt:sub(-1):match('%A')\nend", "  -- body\nend", "  -- your code here\n\
    end", "  return txt:match(\"[%a]%s*$\") and true or false\nend", "  -- code here\n\
    end", "    local lastChr = txt:sub(-1)\n    if string.match(lastChr, \"%a\") ==\
    \ nil then\n        return false\n    else\n        if string.match(txt, \"%a%s$\"\
    ) ~= nil then\n            return false\n        else\n            return true\n\
    \        end\n    end\nend", "    -- body\nend", "    local last = txt:sub(-1)\n\
    \    if last:match(\"%a\") and txt:sub(-2,-2) == \" \" then\n        return true\n\
    \    else\n        return false\n    end\nend", "\tlocal l = string.sub(txt, -1)\n\
    \tif string.match(l, '%w') == nil then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend", "\t-- code here\nend", "    local tbl = split(txt, \" \")\n    local\
    \ last = tbl[#tbl]\n    return #last == 1 and last:find(\"%a\") and txt:sub(-1)\
    \ ~= \" \"\nend", "    return txt:sub(-1):match(\"%a\") and txt:sub(-1):match(\"\
    %A\")\nend", "    -- body\nend", "  local ln = string.len(txt)\n  local lc = string.sub(txt,\
    \ ln, ln)\n  if ln == 0 then\n    return false\n  elseif string.match(lc, \"%w\"\
    ) then\n    return false\n  else\n    return true\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
