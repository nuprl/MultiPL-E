name: HumanEval_58_common
language: lua
results:
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, val in ipairs(l1) do\n        if inlist(l2, val) then\n     \
    \       res[#res + 1] = val\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcnyqmi4n.lua:9:\
    \ attempt to call a nil value (global 'inlist')\nstack traceback:\n\t/tmp/tmpcnyqmi4n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcnyqmi4n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    if not l1 or\
    \ not l2 then return {} end\n    local res = {}\n    local d2 = dict(l2)\n   \
    \ for _, v in ipairs(l1) do\n        if d2[v] then table.insert(res, v) end\n\
    \    end\n    return unique(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1au0x7d.lua:9:\
    \ attempt to call a nil value (global 'dict')\nstack traceback:\n\t/tmp/tmpc1au0x7d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpc1au0x7d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local set = {}\n\
    \  for _, v in ipairs(l1) do\n    set[v] = true\n  end\n  local res = {}\n  for\
    \ _, v in ipairs(l2) do\n    if set[v] then\n      res[#res + 1] = v\n    end\n\
    \  end\n  sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61qzzn8b.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp61qzzn8b.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp61qzzn8b.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i] == l2[j]\
    \ then\n                t[#t + 1] = l1[i]\n            end\n        end\n    end\n\
    \    return utils.unique(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpanx5bk88.lua:15:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpanx5bk88.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpanx5bk88.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, v in ipairs(l1) do\n    t[v] = true\n  end\n  local r = {}\n  for _,\
    \ v in ipairs(l2) do\n    if t[v] then\n      r[#r + 1] = v\n    end\n  end\n\
    \  return sort_keys(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1d554guy.lua:17:\
    \ attempt to call a nil value (global 'sort_keys')\nstack traceback:\n\t/tmp/tmp1d554guy.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp1d554guy.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, n in ipairs(l1) do\n    t[n] = (t[n] or 0) + 1\n  end\n  for _, n in\
    \ ipairs(l2) do\n    t[n] = (t[n] or 0) + 1\n  end\n  local o = {}\n  for k, v\
    \ in pairs(t) do\n    if v == 2 then\n      o[#o + 1] = k\n    end\n  end\n  sort(o)\n\
    \  return o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9gmxy4qy.lua:20:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp9gmxy4qy.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp9gmxy4qy.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal t1 = {}\n\
    \tlocal t2 = {}\n\tlocal res = {}\n\tfor _, v in ipairs(l1) do\n\t\tt1[v] = true\n\
    \tend\n\tfor _, v in ipairs(l2) do\n\t\tt2[v] = true\n\tend\n\tfor v, _ in pairs(t1)\
    \ do\n\t\tif t2[v] then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\ttable.sort(res)\n\
    \treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local set = {}\n  for _, v in ipairs(l1) do\n    if not set[v] then\n\
    \      set[v] = true\n      table.insert(common, v)\n    end\n  end\n  for _,\
    \ v in ipairs(l2) do\n    if set[v] then\n      set[v] = nil\n      table.insert(common,\
    \ v)\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kzvk7p1.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 5, 1, 653}\nstack traceback:\n\
    \t/tmp/tmp2kzvk7p1.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local l3 =\
    \ {}\n    local l4 = {}\n    for k,v in pairs(l1) do l3[v] = v end\n    for k,v\
    \ in pairs(l2) do if l3[v] then l4[v] = v end end\n    l3 = {}\n    for k,v in\
    \ pairs(l4) do l3[#l3+1] = v end\n    return l3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8p9t9bo.lua:19:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmpf8p9t9bo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i = 1, #l1 do\n        t[l1[i]] = true\n    end\n    local common = {}\n\
    \    for i = 1, #l2 do\n        if t[l2[i]] then\n            common[#common +\
    \ 1] = l2[i]\n        end\n    end\n    sort(common)\n    return common\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qpvs4i9.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp0qpvs4i9.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp0qpvs4i9.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    local rl1 = reverse(l1)\n    local rl2 = reverse(l2)\n    local len1\
    \ = #rl1\n    local len2 = #rl2\n    local i = 1\n    local j = 1\n    while i\
    \ <= len1 and j <= len2 do\n        if rl1[i] == rl2[j] then\n            res[#res\
    \ + 1] = rl1[i]\n            i = i + 1\n            j = j + 1\n        elseif\
    \ rl1[i] < rl2[j] then\n            i = i + 1\n        else\n            j = j\
    \ + 1\n        end\n    end\n    return reverse(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgk6m3gv.lua:8:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmprgk6m3gv.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmprgk6m3gv.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local contained = {}\n  for _, el in ipairs(l1) do\n    if not contained[el]\
    \ then\n      contained[el] = {}\n    end\n    contained[el][#contained[el] +\
    \ 1] = l1\n  end\n  for _, el in ipairs(l2) do\n    if contained[el] then\n  \
    \    contained[el][#contained[el] + 1] = l2\n    end\n  end\n  for el, lists in\
    \ pairs(contained) do\n    if #lists == 2 then\n      common[#common + 1] = el\n\
    \    end\n  end\n  table.sort(common)\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e6h06gr.lua:32:\
    \ expected: {1, 5, 653}\nactual: {1, 653}\nstack traceback:\n\t/tmp/tmp5e6h06gr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for k, v in pairs(l1) do table.insert(t, v) end\n  for k, v in pairs(l2) do\
    \ table.insert(t, v) end\n  table.sort(t)\n  local last = nil\n  local i = 1\n\
    \  while i <= #t do\n    if t[i] == last then\n      table.remove(t, i)\n    else\n\
    \      last = t[i]\n      i = i + 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y4avmc7.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 7, 9, 34, 121, 653}\nstack traceback:\n\
    \t/tmp/tmp8y4avmc7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local s1 = {}\n\
    \  local s2 = {}\n  local res = {}\n  for _, l in ipairs{l1, l2} do\n    for _,\
    \ v in ipairs(l) do\n      s1[v] = (s1[v] or 0) + 1\n    end\n  end\n  for _,\
    \ v in ipairs(l1) do\n    if s1[v] > 1 then\n      s2[v] = true\n    end\n  end\n\
    \  for _, v in ipairs(l2) do\n    if s2[v] then\n      res[#res+1] = v\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51tb76ox.lua:31:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmp51tb76ox.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local r = {}\n\
    \    for _, v in ipairs(l1) do\n        if list.contains(l2, v) then\n       \
    \     table.insert(r, v)\n        end\n    end\n    return unique(r)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoa0ohfya.lua:9:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpoa0ohfya.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpoa0ohfya.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local new = {}\n\
    \  if l1 == nil then return new end\n  for _, item in ipairs(l1) do\n    if find(l2,\
    \ item) then\n      table.insert(new, item)\n    end\n  end\n  return sort_unique(new)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpva_kus62.lua:10:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmpva_kus62.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpva_kus62.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal c = {}\n\
    \tlocal s = {}\n\tfor _, v in ipairs(l1) do\n\t\tc[v] = true\n\tend\n\tfor _,\
    \ v in ipairs(l2) do\n\t\tif c[v] then\n\t\t\tc[v] = nil\n\t\t\ts[#s + 1] = v\n\
    \t\tend\n\tend\n\tsort(s)\n\treturn s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxb1s2nb.lua:18:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmphxb1s2nb.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmphxb1s2nb.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local map = {}\n\
    \  for _, n in ipairs(l1) do\n    map[n] = true\n  end\n  local map2 = {}\n  for\
    \ _, n in ipairs(l2) do\n    if map[n] then\n      map2[n] = true\n    end\n \
    \ end\n  local ret = {}\n  for k, _ in pairs(map2) do\n    ret[#ret + 1] = k\n\
    \  end\n  return sort(ret)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp526y63m5.lua:21:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp526y63m5.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp526y63m5.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for i = 1, #l1 do\n    local j = binsearch(l2, l1[i])\n    if j ~= nil then\n\
    \      l3[#l3 + 1] = l1[i]\n    end\n  end\n  return sort(l3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkdgb10q3.lua:9:\
    \ attempt to call a nil value (global 'binsearch')\nstack traceback:\n\t/tmp/tmpkdgb10q3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkdgb10q3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal tmp = {}\n\
    \tlocal c = {}\n\tfor _, v in ipairs(l1) do\n\t\tif not tmp[v] then\n\t\t\ttmp[v]\
    \ = 1\n\t\tend\n\tend\n\tfor _, v in ipairs(l2) do\n\t\tif tmp[v] then\n\t\t\t\
    c[#c + 1] = v\n\t\t\ttmp[v] = nil\n\t\tend\n\tend\n\treturn sort(c)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdzzmotzb.lua:20:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpdzzmotzb.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpdzzmotzb.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local l = {}\n\
    \    for _, item in ipairs(l1) do\n        if lua_util.table_find(l2, item) then\n\
    \            table.insert(l, item)\n        end\n    end\n    return uniq(l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp10vksiii.lua:9:\
    \ attempt to index a nil value (global 'lua_util')\nstack traceback:\n\t/tmp/tmp10vksiii.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp10vksiii.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local n = {}\n\
    \    for _, v in ipairs(l1) do\n        if in_table(v, l2) then\n            n[#n\
    \ + 1] = v\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl634memc.lua:9:\
    \ attempt to call a nil value (global 'in_table')\nstack traceback:\n\t/tmp/tmpl634memc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl634memc.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local table\
    \ = {}\n    for i, v in ipairs(l1) do\n        if l2[v] then\n            table[v]\
    \ = v\n        end\n    end\n    return values(table)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph11c8k6v.lua:13:\
    \ attempt to call a nil value (global 'values')\nstack traceback:\n\t/tmp/tmph11c8k6v.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmph11c8k6v.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  -- TODO: implement\
    \ this\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp973uzqa8.lua:13:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp973uzqa8.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  -- Sorting unique\
    \ elements of both list in ascending order.\n  local s1 = ordered(l1)\n  local\
    \ s2 = ordered(l2)\n  local ls = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp14j0swi6.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    return keys(intersect(l1,\
    \ l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpwiume7.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpnpwiume7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnpwiume7.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _, x in ipairs(l1) do\n        t[x] = t[x] and t[x] + 1 or 1\n    end\n\
    \    for _, x in ipairs(l2) do\n        t[x] = t[x] and t[x] + 1 or 1\n    end\n\
    \    local res = {}\n    for x, _ in pairs(t) do\n        if t[x] == 2 then\n\
    \            table.insert(res, x)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv98yqzg.lua:26:\
    \ expected: {1, 5, 653}\nactual: {1, 653}\nstack traceback:\n\t/tmp/tmpdv98yqzg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local intersection\
    \ = {}\n  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n\
    \        intersection[#intersection + 1] = l1[i]\n      end\n    end\n  end\n\
    \  return unique(intersection)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2kqwsl2.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpc2kqwsl2.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpc2kqwsl2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    for _, v in ipairs(l1) do\n        set[v] = true\n    end\n    local\
    \ r = {}\n    for _, v in ipairs(l2) do\n        if set[v] then\n            table.insert(r,\
    \ v)\n        end\n    end\n    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4_kzf69.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpr4_kzf69.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal t = {}\n\
    \tfor i,v in ipairs(l1) do\n\t\tt[v] = true\n\tend\n\tlocal r = {}\n\tfor i,v\
    \ in ipairs(l2) do\n\t\tif t[v] then\n\t\t\tr[#r+1] = v\n\t\tend\n\tend\n\treturn\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmscqign.lua:23:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmptmscqign.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local s1 =\
    \ table.sort(l1)\n    local s2 = table.sort(l2)\n    local i, j = 1, 1\n    local\
    \ result = {}\n    while i <= #s1 and j <= #s2 do\n        if s1[i] == s2[j] then\n\
    \            table.insert(result, s1[i])\n            i = i + 1\n            j\
    \ = j + 1\n        elseif s1[i] < s2[j] then\n            i = i + 1\n        else\n\
    \            j = j + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvvx8wtc9.lua:11:\
    \ attempt to get length of a nil value (local 's1')\nstack traceback:\n\t/tmp/tmpvvx8wtc9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpvvx8wtc9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    return unique(sort(intersect(l1,\
    \ l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0u67x0q.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpe0u67x0q.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe0u67x0q.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ or #l2 == 0 then\n        return {}\n    end\n    -- sort list\n    local sl1\
    \ = l1:sort()\n    local sl2 = l2:sort()\n    -- find index of first common element\n\
    \    local idx = 1\n    while sl1[idx] ~= sl2[idx] do\n        idx = idx + 1\n\
    \        if idx > #sl1 or idx > #sl2 then\n            return {}\n        end\n\
    \    end\n    -- find index of last common element\n    local idx2 = idx\n   \
    \ while sl1[idx2] == sl2[idx2] do\n        idx2 = idx2 + 1\n        if idx2 >\
    \ #sl1 or idx2 > #sl2 then\n            break\n        end\n    end\n    idx2\
    \ = idx2 - 1\n    return {table.unpack(sl1, idx, idx2)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpemnytt5v.lua:11:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpemnytt5v.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpemnytt5v.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local map = {}\n\
    \  for i = 1, #l1 do\n    map[l1[i]] = true\n  end\n  local res = {}\n  for i\
    \ = 1, #l2 do\n    if map[l2[i]] then\n      table.insert(res, l2[i])\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ok2pjde.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp8ok2pjde.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local u = union(l1,\
    \ l2)\n  local t = {}\n  for _, v in ipairs(u) do\n    t[v] = (t[v] or 0) + 1\n\
    \  end\n  local c = {}\n  for _, v in ipairs(u) do\n    if t[v] > 1 then\n   \
    \   c[#c + 1] = v\n    end\n  end\n  return sorted(c)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexji4_wx.lua:7:\
    \ attempt to call a nil value (global 'union')\nstack traceback:\n\t/tmp/tmpexji4_wx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpexji4_wx.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local u = {}\n\
    \    for _,v in ipairs(l1) do\n        if contains(l2, v) then\n            table.insert(u,\
    \ v)\n        end\n    end\n    table.sort(u)\n    return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxph5d91s.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpxph5d91s.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxph5d91s.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    for _, i in ipairs(l1) do\n        for _, j in ipairs(l2) do\n   \
    \         if i == j then\n                result[#result + 1] = i\n          \
    \  end\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j9td_br.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp3j9td_br.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    -- Make a set\
    \ from second list\n    local set = Set.new(l2)\n    -- Find common elements and\
    \ return\n    return table.sorted_unique(filter(l1, function(x) return set:contains(x)\
    \ end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bbl2m9g.lua:8:\
    \ attempt to index a nil value (global 'Set')\nstack traceback:\n\t/tmp/tmp2bbl2m9g.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp2bbl2m9g.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local tbl = {}\n\
    \  for _, num in ipairs(l1) do\n    if contains(l2, num) then\n      tbl[#tbl\
    \ + 1] = num\n    end\n  end\n  return unique(tbl)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppuitpo_j.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmppuitpo_j.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppuitpo_j.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local h = {}\n\
    \  for i = 1, #l1 do\n    h[l1[i]] = true\n  end\n  local r = {}\n  for i = 1,\
    \ #l2 do\n    if h[l2[i]] then\n      r[#r + 1] = l2[i]\n    end\n  end\n  if\
    \ #r > 0 then\n    table.sort(r)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggxdsxzx.lua:26:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpggxdsxzx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    return sorted(unique(l1),\
    \ function(a, b) return a < b end)\n          :filter(function(x) return contains(l2,\
    \ x) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpya_430gm.lua:7:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpya_430gm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpya_430gm.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local m = map(set(l1),\
    \ set(l2))\n    return sort(m[1] & m[2])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkslmb3qk.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpkslmb3qk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkslmb3qk.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    return sort(unique(intersect(l1,\
    \ l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpckdh7j1n.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpckdh7j1n.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpckdh7j1n.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal result\
    \ = {}\n\tlocal is_seen = {}\n\tfor i=1, #l1 do\n\t\tis_seen[l1[i]] = 1\n\tend\n\
    \tfor i=1, #l2 do\n\t\tif is_seen[l2[i]] == 1 then\n\t\t\tresult[#result+1] =\
    \ l2[i]\n\t\t\tis_seen[l2[i]] = nil\n\t\tend\n\tend\n\ttable.sort(result)\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local list\
    \ = {}\n    for _, v in ipairs(l1) do\n        list[v] = true\n    end\n    for\
    \ _, v in ipairs(l2) do\n        if list[v] then\n            list[v] = nil\n\
    \            table.insert(list, v)\n        end\n    end\n    table.sort(list)\n\
    \    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local set = {}\n\
    \  for _, v in ipairs(l1) do\n    set[v] = true\n  end\n  local t = {}\n  for\
    \ _, v in ipairs(l2) do\n    if set[v] then\n      t[#t+1] = v\n    end\n  end\n\
    \  sort(t)\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4m2sw4c5.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp4m2sw4c5.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp4m2sw4c5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local s = {}\n\
    \    local res = {}\n    for _, v in ipairs(l1) do\n        s[v] = true\n    end\n\
    \    for _, v in ipairs(l2) do\n        if s[v] then\n            res[#res+1]\
    \ = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwso70eu.lua:23:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmpxwso70eu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local tbl = {}\n\
    \  local i = 1\n  for _,v in ipairs(l1) do\n    for _,v2 in ipairs(l2) do\n  \
    \    if v == v2 then\n        tbl[i] = v\n        i = i + 1\n      end\n    end\n\
    \  end\n  sort(tbl)\n  return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yns3c8q.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp_yns3c8q.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp_yns3c8q.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local n1 =\
    \ #l1\n    local n2 = #l2\n    local j = 0\n    local s = {}\n    for i = 1, n1\
    \ do\n        local v = l1[i]\n        for k = 1, n2 do\n            if v == l2[k]\
    \ then\n                s[j + 1] = v\n                j = j + 1\n            \
    \    break\n            end\n        end\n    end\n    if j > 0 then\n       \
    \ sort(s)\n        local j = 1\n        local m = 1\n        local n = #s\n  \
    \      while j < n do\n            if s[j] == s[j + 1] then\n                s[j]\
    \ = nil\n            else\n                s[m] = s[j]\n                m = m\
    \ + 1\n            end\n            j = j + 1\n        end\n        s[m] = s[j]\n\
    \        for i = n, m + 1, -1 do\n            s[i] = nil\n        end\n    end\n\
    \    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxl2w8uka.lua:22:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpxl2w8uka.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpxl2w8uka.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal function\
    \ oneInTwo(el)\n\t\tfor _, el2 in ipairs(l2) do\n\t\t\tif el == el2 then\n\t\t\
    \t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\tlocal ret = {}\n\
    \tfor _, el in ipairs(l1) do\n\t\tif oneInTwo(el) then\n\t\t\ttable.insert(ret,\
    \ el)\n\t\tend\n\tend\n\treturn table.unpack(merge_sort(ret))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm21eedox.lua:21:\
    \ attempt to call a nil value (global 'merge_sort')\nstack traceback:\n\t/tmp/tmpm21eedox.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpm21eedox.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal function\
    \ build_set(list)\n\t\tlocal set = {}\n\t\tfor _, value in ipairs(list) do\n\t\
    \t\tset[value] = true\n\t\tend\n\t\treturn set\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgnts7cwl.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal l = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif indexOf(l2, v) then\n\t\t\tinsertSorted(l,\
    \ v)\n\t\tend\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7a3c9_0o.lua:9:\
    \ attempt to call a nil value (global 'indexOf')\nstack traceback:\n\t/tmp/tmp7a3c9_0o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7a3c9_0o.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal s = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\ts[v] = true\n\tend\n\tlocal c = {}\n\tfor _,\
    \ v in ipairs(l2) do\n\t\tif s[v] then\n\t\t\ttable.insert(c, v)\n\t\tend\n\t\
    end\n\treturn c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7645pl0z.lua:23:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmp7645pl0z.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n     \
    \       common[#common + 1] = v\n        end\n    end\n    table.sort(common)\n\
    \    return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp995gvp3q.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp995gvp3q.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp995gvp3q.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    local cmp = {}\n    for _, l in ipairs({l1, l2}) do\n        for _,\
    \ v in ipairs(l) do\n            cmp[v] = (cmp[v] or 0) + 1\n        end\n   \
    \ end\n    for k, v in pairs(cmp) do\n        if v > 1 then\n            table.insert(ret,\
    \ k)\n        end\n    end\n    return sort(ret)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9d85o7es.lua:19:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp9d85o7es.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp9d85o7es.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local l2_map = {}\n  for _, v in ipairs(l2) do\n    l2_map[v] = true\n\
    \  end\n  for _, v in ipairs(l1) do\n    if l2_map[v] then\n      common[#common\
    \ + 1] = v\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j_u5h37.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp2j_u5h37.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local n1 =\
    \ {}\n    local n2 = {}\n    local n3 = {}\n    local m1 = #l1\n    local m2 =\
    \ #l2\n    for i = 1, m1 do\n        n1[l1[i]] = i\n    end\n    for i = 1, m2\
    \ do\n        if n1[l2[i]] then\n            n2[#n2 + 1] = l2[i]\n        end\n\
    \    end\n    for i = 1, #n2 do\n        n3[n2[i]] = i\n    end\n    table.sort(n2)\n\
    \    return n2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcfyfrcr.lua:30:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmppcfyfrcr.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local hash =\
    \ {}\n  local ret = {}\n  for i,v in ipairs(l1) do\n    hash[v] = true\n  end\n\
    \  for i,v in ipairs(l2) do\n    if hash[v] then\n      ret[#ret+1] = v\n    end\n\
    \  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6jfgy77.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpo6jfgy77.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local res = {}\n\
    \  local m = map()\n  for i = 1, #l1 do\n    m[l1[i]] = 1\n  end\n  for i = 1,\
    \ #l2 do\n    if m[l2[i]] then\n      res[#res + 1] = l2[i]\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67427it1.lua:8:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp67427it1.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp67427it1.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local tab =\
    \ {}\n    local result = {}\n    for _, v in ipairs(l1) do tab[v] = true end\n\
    \    for _, v in ipairs(l2) do\n        if tab[v] == true then table.insert(result,\
    \ v) end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nxdnh7m.lua:20:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp6nxdnh7m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local memo =\
    \ {}\n  for _, elem in ipairs(l1) do\n    memo[elem] = true\n  end\n  local res\
    \ = {}\n  for _, elem in ipairs(l2) do\n    if memo[elem] then table.insert(res,\
    \ elem) end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk8ym178.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpyk8ym178.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _, e in ipairs(l1) do\n    if list.find(l2, e) then\n      table.insert(t,\
    \ e)\n    end\n  end\n  return list.sort(t)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe87z97ra.lua:9:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpe87z97ra.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe87z97ra.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local l, n\
    \ = {}, 0\n    for _, v in ipairs(l1) do\n        if List.Contains(l2, v) then\n\
    \            n = n + 1\n            l[n] = v\n        end\n    end\n    sort(l)\n\
    \    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ivenis0.lua:9:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmp1ivenis0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1ivenis0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    local l3 = {}\n    for i, v in ipairs(l1) do\n        t[v] = true\n    end\n\
    \    for i, v in ipairs(l2) do\n        if t[v] then\n            table.insert(l3,\
    \ v)\n        end\n    end\n    table.sort(l3)\n    return l3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqnikgud.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpmqnikgud.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t1 = {}\n\
    \  local t2 = {}\n  for _, v in ipairs(l1) do\n    t1[v] = true\n  end\n  for\
    \ _, v in ipairs(l2) do\n    t2[v] = true\n  end\n  local c = {}\n  for k, _ in\
    \ pairs(t1) do\n    if t2[k] then\n      c[#c + 1] = k\n    end\n  end\n  table.sort(c)\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal r = {}\n\
    \tlocal s = {}\n\tfor _, v in ipairs(l1) do\n\t\tr[v] = true\n\tend\n\tfor _,\
    \ v in ipairs(l2) do\n\t\tif r[v] then\n\t\t\ts[v] = true\n\t\tend\n\tend\n\t\
    r = {}\n\tfor k in pairs(s) do\n\t\tr[#r + 1] = k\n\tend\n\tsort(r)\n\treturn\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyg10dbu7.lua:21:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpyg10dbu7.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpyg10dbu7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i,v in ipairs(l1) do\n        for ii,vv in ipairs(l2) do\n          \
    \  if v == vv then\n                table.insert(t, v)\n            end\n    \
    \    end\n    end\n    return table.unpack(sort(t))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppv2pbikn.lua:15:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmppv2pbikn.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppv2pbikn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        common[#common + 1] = v\n      end\n    end\n  end\n \
    \ table.sort(common)\n  return unique(common)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpur2xxa0z.lua:16:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpur2xxa0z.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpur2xxa0z.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  return make_set(unpack(intersect(l1,\
    \ l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04shdhxm.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmp04shdhxm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp04shdhxm.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local keys =\
    \ {}\n  local ret = {}\n  for _, v in ipairs(l1) do\n    if not keys[v] then\n\
    \      keys[v] = true\n    end\n  end\n  for _, v in ipairs(l2) do\n    if keys[v]\
    \ then\n      ret[#ret + 1] = v\n    end\n  end\n  table.sort(ret)\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm8gs432.lua:26:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpxm8gs432.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    return s_uniq(s_sort(l1),\
    \ s_sort(l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkveqv91p.lua:7:\
    \ attempt to call a nil value (global 's_sort')\nstack traceback:\n\t/tmp/tmpkveqv91p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkveqv91p.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal t1 = {}\n\
    \tlocal t2 = {}\n\tfor _, v in ipairs(l1) do\n\t\tt1[v] = true\n\tend\n\tfor _,\
    \ v in ipairs(l2) do\n\t\tt2[v] = true\n\tend\n\tlocal t = {}\n\tfor k, _ in pairs(t1)\
    \ do\n\t\tif t2[k] then\n\t\t\tt[#t + 1] = k\n\t\tend\n\tend\n\ttable.sort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    if not l1 or\
    \ not l2 then return nil end\n    local l1_len = #l1\n    local l2_len = #l2\n\
    \    if l1_len == 0 or l2_len == 0 then return {} end\n    if l1_len < l2_len\
    \ then\n        l1, l2 = l2, l1\n        l1_len, l2_len = l2_len, l1_len\n   \
    \ end\n    -- Now l1_len >= l2_len\n    -- A list to store the results\n    local\
    \ set = {}\n    -- Loop over the smaller list\n    for i = 1, l2_len do\n    \
    \    local v = l2[i]\n        -- If the value is in the larger list, then the\
    \ value is a common element\n        if idx(l1, v) then\n            -- Store\
    \ the value in the set\n            set[#set + 1] = v\n        end\n    end\n\
    \    -- Sort the set if needed\n    if options.common_sort then\n        sort(set)\n\
    \    end\n    return set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvlu4cn_.lua:22:\
    \ attempt to call a nil value (global 'idx')\nstack traceback:\n\t/tmp/tmpsvlu4cn_.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpsvlu4cn_.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for _,v in ipairs(l1) do\n    if contains(l2, v) then\n      r[#r+1] = v\n\
    \    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn90yi9_3.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpn90yi9_3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpn90yi9_3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local d = {}\n\
    \  for _, i in ipairs(l1) do\n    if table.has(l2, i) then\n      table.insert(d,\
    \ i)\n    end\n  end\n  return set(d)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvcu2u4w.lua:9:\
    \ attempt to call a nil value (field 'has')\nstack traceback:\n\t/tmp/tmpbvcu2u4w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbvcu2u4w.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    for _, v in ipairs(l1) do\n        set[v] = (set[v] or 0) + 1\n    end\n\
    \    local common = {}\n    for _, v in ipairs(l2) do\n        if set[v] and set[v]\
    \ > 0 then\n            set[v] = set[v] - 1\n            table.insert(common,\
    \ v)\n        end\n    end\n    table.sort(common)\n    return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal tmp = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif table.contains(l2, v) then\n\t\t\ttable.insert(tmp,\
    \ v)\n\t\tend\n\tend\n\treturn table.unique(tmp)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3hn9kuhi.lua:9:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp3hn9kuhi.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3hn9kuhi.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _, n in ipairs(l1) do\n        if sort.binsearch(l2, n) ~= nil then\n\
    \            t[#t + 1] = n\n        end\n    end\n    return sort.uniq(t)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpafxart5n.lua:9:\
    \ attempt to index a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpafxart5n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpafxart5n.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    for _, v in ipairs(l1) do\n        set[v] = true\n    end\n    local\
    \ ret = {}\n    for _, v in ipairs(l2) do\n        if set[v] then\n          \
    \  set[v] = nil\n            table.insert(ret, v)\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_t9qzmh8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 653}\nstack traceback:\n\t/tmp/tmp_t9qzmh8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local r = {}\n\
    \    for i, v in ipairs(l1) do\n        if contains(l2, v) then r[#r + 1] = v\
    \ end\n    end\n    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ur6zvpt.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp2ur6zvpt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2ur6zvpt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local seen\
    \ = {}\n    local k, v, i\n    local result = {}\n    local unique = {}\n    for\
    \ i, v in ipairs(l1) do\n        seen[v] = true\n    end\n    for i, v in ipairs(l2)\
    \ do\n        if seen[v] then\n            if not unique[v] then\n           \
    \     unique[v] = true\n                table.insert(result, v)\n            end\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal rs = {}\n\
    \tfor _,v in ipairs(l1) do\n\t\tfor _,v2 in ipairs(l2) do\n\t\t\tif v == v2 then\n\
    \t\t\t\trs[#rs+1] = v\n\t\t\tend\n\t\tend\n\tend\n\treturn sort_unique(rs)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzavvqh34.lua:15:\
    \ attempt to call a nil value (global 'sort_unique')\nstack traceback:\n\t/tmp/tmpzavvqh34.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpzavvqh34.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for _,v in ipairs(l1) do\n    if contains(l2, v) then\n      table.insert(t,\
    \ v)\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpohtvpdt_.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpohtvpdt_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpohtvpdt_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local function append_unique(t, l)\n    for i = 1, #l do\n      if not\
    \ t[l[i]] then\n        t[l[i]] = true\n        table.insert(common, l[i])\n \
    \     end\n    end\n  end\n  append_unique(common, l1)\n  append_unique(common,\
    \ l2)\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv3q4h9x.lua:24:\
    \ expected: {1, 5, 653}\nactual: {true, 1, true, true, 4, 3, 34, 653, true, 9,\
    \ 121, 34=true, 121=true, 653=true}\nstack traceback:\n\t/tmp/tmpcv3q4h9x.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local r = {}\n\
    \  for _, v in ipairs(l1) do\n    if contains(l2, v) then r[#r + 1] = v end\n\
    \  end\n  return sort_unique(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm0orhbus.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpm0orhbus.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpm0orhbus.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local common_elements\
    \ = {}\n    local l1_elements = {}\n    local l2_elements = {}\n    for _, value\
    \ in ipairs(l1) do\n        l1_elements[value] = true\n    end\n    for _, value\
    \ in ipairs(l2) do\n        l2_elements[value] = true\n    end\n    for value,\
    \ _ in pairs(l1_elements) do\n        if l2_elements[value] then\n           \
    \ table.insert(common_elements, value)\n        end\n    end\n    table.sort(common_elements)\n\
    \    return common_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    for _, x in ipairs(l1) do\n        for _, y in ipairs(l2) do\n     \
    \       if x == y then\n                table.insert(ret, x)\n            end\n\
    \        end\n    end\n    return unique(ret)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9wplwio.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpt9wplwio.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpt9wplwio.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local out = {}\n\
    \  for _, val in ipairs(l1) do\n    if elem(val, l2) then\n      out[#out + 1]\
    \ = val\n    end\n  end\n  sort(out)\n  return unique(out)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ba25stl.lua:9:\
    \ attempt to call a nil value (global 'elem')\nstack traceback:\n\t/tmp/tmp9ba25stl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9ba25stl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local c = {}\n\
    \    local o = {}\n    for _, v in ipairs(l1) do\n        c[v] = true\n    end\n\
    \    for _, v in ipairs(l2) do\n        if c[v] then\n            o[#o + 1] =\
    \ v\n        end\n    end\n    return sort(unique(o))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzl20j7dl.lua:17:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpzl20j7dl.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpzl20j7dl.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t1 = {}\n\
    \  local t2 = {}\n  for _, v in ipairs(l1) do\n    t1[v] = true\n  end\n  for\
    \ _, v in ipairs(l2) do\n    t2[v] = true\n  end\n  local t = {}\n  for k, _ in\
    \ pairs(t1) do\n    if t2[k] then\n      t[#t + 1] = k\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    local l1_keys = {}\n    local l2_keys = {}\n    for i,v in ipairs(l1)\
    \ do\n        l1_keys[v] = i\n    end\n    for i,v in ipairs(l2) do\n        l2_keys[v]\
    \ = i\n    end\n    for i,v in ipairs(l1) do\n        if l2_keys[v] then table.insert(ret,\
    \ v) end\n    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal l_common\
    \ = {}\n\tfor _, el in ipairs(l1) do\n\t\tif contains(l2, el) then\n\t\t\tinsert_ordered(l_common,\
    \ el)\n\t\tend\n\tend\n\treturn l_common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15xowbo0.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp15xowbo0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp15xowbo0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local c = {}\n\
    \    for _, v in ipairs(l1) do if l2[v] then c[v] = true end end\n    local c2\
    \ = {}\n    for k in pairs(c) do table.insert(c2, k) end\n    table.sort(c2)\n\
    \    return c2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcidllkl.lua:18:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmphcidllkl.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local s = {}\n\
    \  for _, v in ipairs(l1) do\n    if table.array_member(l2, v) then s[#s+1] =\
    \ v end\n  end\n  table.sort(s)\n  return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp982y3bls.lua:9:\
    \ attempt to call a nil value (field 'array_member')\nstack traceback:\n\t/tmp/tmp982y3bls.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp982y3bls.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local a, b\
    \ = {}, {}\n    for _, v in ipairs(l1) do a[v] = true end\n    for _, v in ipairs(l2)\
    \ do if a[v] then b[#b+1] = v end end\n    return sort(b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq664rgb7.lua:10:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpq664rgb7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq664rgb7.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local ret = {}\n\
    \  for _, x in ipairs(l1) do\n    for _, y in ipairs(l2) do\n      if x == y then\n\
    \        ret[#ret + 1] = x\n      end\n    end\n  end\n  return sort(unique(ret))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprtucgmdw.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmprtucgmdw.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmprtucgmdw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal s = {}\n\
    \tfor _, l in ipairs{l1, l2} do\n\t\tfor _, v in ipairs(l) do\n\t\t\ts[v] = (s[v]\
    \ or 0) + 1\n\t\tend\n\tend\n\tlocal r = {}\n\tfor k, v in pairs(s) do\n\t\tif\
    \ v > 1 then\n\t\t\ttable.insert(r, k)\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local l = {}\n\
    \    for k, v in pairs(l1) do\n        for k2, v2 in pairs(l2) do\n          \
    \  if v == v2 then\n                l[#l + 1] = v\n            end\n        end\n\
    \    end\n    return sorted(uniq(l))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizq_mg38.lua:15:\
    \ attempt to call a nil value (global 'uniq')\nstack traceback:\n\t/tmp/tmpizq_mg38.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpizq_mg38.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    for _, l in ipairs({l1, l2}) do\n        for _, v in ipairs(l) do\n\
    \            set[v] = (set[v] or 0) + 1\n        end\n    end\n    local common\
    \ = {}\n    for k, v in pairs(set) do\n        if v == 2 then\n            table.insert(common,\
    \ k)\n        end\n    end\n    table.sort(common)\n    return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2d6a6dt.lua:26:\
    \ expected: {1, 5, 653}\nactual: {1, 653}\nstack traceback:\n\t/tmp/tmpz2d6a6dt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  if #l1 == 0 or\
    \ #l2 == 0 then return {} end\n  return list.unique(list.sort(list.intersect(l1,\
    \ l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rmsb7yp.lua:8:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp7rmsb7yp.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7rmsb7yp.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, n in ipairs(l1) do\n        for _, m in ipairs(l2) do\n     \
    \       if n == m then\n                table.insert(res, n)\n            end\n\
    \        end\n    end\n    table.sort(res)\n    return uniq(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_vv6bwe.lua:16:\
    \ attempt to call a nil value (global 'uniq')\nstack traceback:\n\t/tmp/tmpr_vv6bwe.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpr_vv6bwe.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    if type(l1)\
    \ ~= 'table' or type(l2) ~= 'table' then\n        error('expected tables as arguments',\
    \ 2)\n    end\n    local s = {}\n    for i = 1, #l1 do\n        s[l1[i]] = true\n\
    \    end\n    local res = {}\n    for i = 1, #l2 do\n        if s[l2[i]] then\n\
    \            res[#res + 1] = l2[i]\n        end\n    end\n    sort(res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmply5mwkae.lua:20:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmply5mwkae.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmply5mwkae.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local unique\
    \ = unique(cat(l1, l2))\n    local res = {}\n    for i, v in ipairs(unique) do\n\
    \        if index_of(l1, v) and index_of(l2, v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpck7cud6y.lua:7:\
    \ attempt to call a nil value (global 'cat')\nstack traceback:\n\t/tmp/tmpck7cud6y.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpck7cud6y.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local n = {}\n\
    \    for _, v in ipairs(l1) do\n        if in_table(v, l2) then\n            n[#n\
    \ + 1] = v\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cnfag34.lua:9:\
    \ attempt to call a nil value (global 'in_table')\nstack traceback:\n\t/tmp/tmp2cnfag34.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2cnfag34.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local unique\
    \ = unique(union(l1, l2))\n  local vals = {}\n  for _, val in ipairs(unique) do\n\
    \    if has(l1, val) and has(l2, val) then\n      vals[#vals + 1] = val\n    end\n\
    \  end\n  return vals\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsauwt2st.lua:7:\
    \ attempt to call a nil value (global 'union')\nstack traceback:\n\t/tmp/tmpsauwt2st.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsauwt2st.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  local n = #l1\n  for i = 1, n do\n    t[l1[i]] = i\n  end\n  local r = {}\n\
    \  n = #l2\n  for i = 1, n do\n    if t[l2[i]] then\n      r[#r + 1] = l2[i]\n\
    \    end\n  end\n  table.sort(r)\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj8r8j0k.lua:26:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpqj8r8j0k.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    for _, v in ipairs(l1) do\n        for _, w in ipairs(l2) do\n   \
    \         if v == w then\n                result[#result + 1] = v\n          \
    \  end\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyr502cm5.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpyr502cm5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal t = {}\n\
    \tlocal r = {}\n\tfor i = 1, #l1 do\n\t\tt[l1[i]] = true\n\tend\n\tfor i = 1,\
    \ #l2 do\n\t\tif t[l2[i]] then\n\t\t\tr[#r + 1] = l2[i]\n\t\tend\n\tend\n\treturn\
    \ sorted(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp44dc689f.lua:17:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmp44dc689f.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp44dc689f.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local set = {}\n\
    \  local res = {}\n  for _, l in ipairs({l1, l2}) do\n    for _, v in ipairs(l)\
    \ do\n      if not set[v] then\n        set[v] = true\n        table.insert(res,\
    \ v)\n      end\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmh2oev1.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 7, 9, 34, 121, 653}\nstack traceback:\n\
    \t/tmp/tmpbmh2oev1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local result\
    \ = {}\n  for _, i in ipairs(l1) do\n    if utils.contains(l2, i) then\n     \
    \ table.insert(result, i)\n    end\n  end\n  return utils.sort_unique(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgy0vjcyk.lua:9:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpgy0vjcyk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgy0vjcyk.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local s = {}\n\
    \    for _, v in ipairs(l1) do\n        s[v] = true\n    end\n    local res =\
    \ {}\n    for _, v in ipairs(l2) do\n        if s[v] then\n            res[#res+1]\
    \ = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdqio9x7.lua:23:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmpxdqio9x7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    for _, v in ipairs(l1) do\n        if is_in(v, l2) then\n        \
    \    if not is_in(v, result) then\n                table.insert(result, v)\n \
    \           end\n        end\n    end\n    table.sort(result)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpguqntfjn.lua:9:\
    \ attempt to call a nil value (global 'is_in')\nstack traceback:\n\t/tmp/tmpguqntfjn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpguqntfjn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal ret = {}\n\
    \tlocal i, j = 1, 1\n\tlocal len1, len2 = #l1, #l2\n\twhile i <= len1 and j <=\
    \ len2 do\n\t\tif l1[i] == l2[j] then\n\t\t\ttable.insert(ret, l1[i])\n\t\t\t\
    i = i + 1\n\t\t\tj = j + 1\n\t\telseif l1[i] < l2[j] then\n\t\t\ti = i + 1\n\t\
    \telse\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j6n8lzj.lua:27:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmp7j6n8lzj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, v in ipairs(l1) do\n        if not res[v] and exists(v, l2) then\n\
    \            res[v] = true\n        end\n    end\n    local ret = {}\n    for\
    \ k, _ in pairs(res) do\n        table.insert(ret, k)\n    end\n    table.sort(ret)\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ug0q8dg.lua:9:\
    \ attempt to call a nil value (global 'exists')\nstack traceback:\n\t/tmp/tmp4ug0q8dg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4ug0q8dg.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    for _, v in ipairs(l1) do\n        if table.hasvalue(l2, v) then\n\
    \            table.insert(common, v)\n        end\n    end\n    return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptanpib33.lua:9:\
    \ attempt to call a nil value (field 'hasvalue')\nstack traceback:\n\t/tmp/tmptanpib33.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptanpib33.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal t = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tt[v] = (t[v] or 0) + 1\n\tend\n\tlocal ret =\
    \ {}\n\tfor _, v in ipairs(l2) do\n\t\tif t[v] and t[v] > 0 then\n\t\t\tt[v] =\
    \ t[v] - 1\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\ttable.sort(ret)\n\t\
    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    return unique(sort(intersect(l1,\
    \ l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphy2iqgj_.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmphy2iqgj_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphy2iqgj_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t1 = list.table(l1)\n\
    \  local t2 = list.table(l2)\n  local t3 = {}\n  for k, v in pairs(t1) do\n  \
    \  if t2[v] then\n      t3[v] = true\n    end\n  end\n  local ret = {}\n  for\
    \ k, v in pairs(t3) do\n    table.insert(ret, k)\n  end\n  table.sort(ret)\n \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjpf8repd.lua:7:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpjpf8repd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjpf8repd.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    -- Initialize\
    \ common list.\n    local common = {}\n    -- Iterate through all items in first\
    \ list.\n    for _, i in ipairs(l1) do\n        -- Check if item exist in second\
    \ list.\n        for _, j in ipairs(l2) do\n            -- Add new unique item\
    \ to common list.\n            if i == j and not util.table.hasitem(common, i)\
    \ then\n                table.insert(common, i)\n            end\n        end\n\
    \    end\n    -- Return sorted common list.\n    return util.table.sort(common)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpic6bqgox.lua:14:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpic6bqgox.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpic6bqgox.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    local m = map(l1)\n    for i = 1, #l2 do\n        local v = l2[i]\n\
    \        if m[v] then\n            result[#result + 1] = v\n        end\n    end\n\
    \    return sort_uniq(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn92_9tkl.lua:8:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpn92_9tkl.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpn92_9tkl.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local l3 =\
    \ {}\n    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n       \
    \     l3[#l3 + 1] = v\n        end\n    end\n    table.sort(l3)\n    return l3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03thoh0.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpz03thoh0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpz03thoh0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local s = {}\n\
    \  for _, v in ipairs(l1) do\n    if has(l2, v) then\n      s[#s + 1] = v\n  \
    \  end\n  end\n  return sorted(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb6c1kj2b.lua:9:\
    \ attempt to call a nil value (global 'has')\nstack traceback:\n\t/tmp/tmpb6c1kj2b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpb6c1kj2b.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local d1, d2\
    \ = {}, {}\n  for _, v in ipairs(l1) do d1[v] = true end\n  for _, v in ipairs(l2)\
    \ do d2[v] = true end\n  local res = {}\n  for k, _ in pairs(d1) do\n    if d2[k]\
    \ then\n      table.insert(res, k)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local tmp = {}\n\
    \  local res = {}\n  for i = 1, #l1 do\n    tmp[l1[i]] = true\n  end\n  for i\
    \ = 1, #l2 do\n    if tmp[l2[i]] then\n      table.insert(res, l2[i])\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy7tldk6.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpyy7tldk6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local table\
    \ = {}\n    for _, l in ipairs({l1, l2}) do\n        for _, v in ipairs(l) do\n\
    \            table[v] = (table[v] or 0) + 1\n        end\n    end\n    local result\
    \ = {}\n    for k, v in pairs(table) do\n        if v == 2 then table.insert(result,\
    \ k) end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpapusphy3.lua:15:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpapusphy3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpapusphy3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _, v in ipairs(l1) do\n        t[v] = 1\n    end\n    for _, v in ipairs(l2)\
    \ do\n        if t[v] then\n            t[v] = nil\n            table.insert(t,\
    \ v)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6033zk2.lua:23:\
    \ expected: {1, 5, 653}\nactual: {2=1, 3=1, 4=1, 6=1, 7=5, 8=653, 34=1}\nstack\
    \ traceback:\n\t/tmp/tmpl6033zk2.lua:23: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal s = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif contains(l2, v) then s[#s+1] = v end\n\tend\n\
    \ttable.sort(s)\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvk3ar9rh.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpvk3ar9rh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvk3ar9rh.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    for _, v in ipairs(l1) do\n        if list.has(l2, v) then\n       \
    \     res[#res + 1] = v\n        end\n    end\n    return sort(res)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5dci4zs.lua:9:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpb5dci4zs.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpb5dci4zs.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for i = 1, #l1 do\n    local elem = l1[i]\n    if indexOf(l2, elem) then\n\
    \      t[#t + 1] = elem\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwa1gor2z.lua:10:\
    \ attempt to call a nil value (global 'indexOf')\nstack traceback:\n\t/tmp/tmpwa1gor2z.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpwa1gor2z.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    local i1, i2 = 1, 1\n    while i1 <= #l1 and i2 <= #l2 do\n        if\
    \ l1[i1] == l2[i2] then\n            res[#res + 1] = l1[i1]\n            i1 =\
    \ i1 + 1\n            i2 = i2 + 1\n        elseif l1[i1] < l2[i2] then\n     \
    \       i1 = i1 + 1\n        else\n            i2 = i2 + 1\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52x0kxn_.lua:26:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmp52x0kxn_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal ret = {}\n\
    \tlocal set = {}\n\tfor _, v in ipairs(l1) do\n\t\tset[v] = true\n\tend\n\tfor\
    \ _, v in ipairs(l2) do\n\t\tif set[v] then\n\t\t\ttable.insert(ret, v)\n\t\t\
    end\n\tend\n\treturn sort(ret)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2h525vb.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpp2h525vb.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpp2h525vb.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local u = {}\n\
    \    local r = {}\n    local v\n    for _, v in ipairs(l1) do\n        u[v] =\
    \ true\n    end\n    for _, v in ipairs(l2) do\n        if u[v] then\n       \
    \     u[v] = nil\n            r[#r + 1] = v\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5u6k9y8d.lua:25:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 653}\nstack traceback:\n\t/tmp/tmp5u6k9y8d.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local res = {}\n\
    \  local set = {}\n  local list = merge(l1, l2)\n  for i = 1, #list do\n    if\
    \ not set[list[i]] then\n      res[#res + 1] = list[i]\n      set[list[i]] = true\n\
    \    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppc2eoru5.lua:9:\
    \ attempt to call a nil value (global 'merge')\nstack traceback:\n\t/tmp/tmppc2eoru5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppc2eoru5.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local h = {}\n\
    \    for _, e in ipairs(l1) do\n        h[e] = 1\n    end\n    for _, e in ipairs(l2)\
    \ do\n        if h[e] then\n            h[e] = h[e] + 1\n        end\n    end\n\
    \    local res = {}\n    for k, v in pairs(h) do\n        if v > 1 then\n    \
    \        table.insert(res, k)\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal out = {}\n\
    \tfor k, v in pairs(l1) do\n\t\tif contains(l2, v) then out[#out + 1] = v end\n\
    \tend\n\treturn sort(out)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9wmi_bep.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp9wmi_bep.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9wmi_bep.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for _, v in ipairs(l1) do\n        if table.has_value(l2, v) then\n     \
    \       table.insert(t, v)\n        end\n    end\n    if #t == 0 then\n      \
    \  return t\n    end\n    return unique(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvagwv08.lua:9:\
    \ attempt to call a nil value (field 'has_value')\nstack traceback:\n\t/tmp/tmpbvagwv08.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbvagwv08.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  return set(l1,\
    \ l2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp95lkwvk1.lua:7:\
    \ attempt to call a nil value (global 'set')\nstack traceback:\n\t/tmp/tmp95lkwvk1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp95lkwvk1.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    if type(l1)\
    \ ~= \"table\" or type(l2) ~= \"table\" then\n        return {}\n    end\n   \
    \ local h = {}\n    for _, v in ipairs(l1) do\n        h[v] = true\n    end\n\
    \    local ret = {}\n    for _, v in ipairs(l2) do\n        if h[v] then\n   \
    \         table.insert(ret, v)\n        end\n    end\n    table.sort(ret)\n  \
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnq1jsd6.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmprnq1jsd6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local lookup\
    \ = {}\n    for _, val in ipairs(l1) do\n        lookup[val] = true\n    end\n\
    \    local result = {}\n    for _, val in ipairs(l2) do\n        if lookup[val]\
    \ then\n            lookup[val] = nil\n            result[#result + 1] = val\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    local ret_count = 0\n    for _, i in ipairs(l1) do\n        for _, j\
    \ in ipairs(l2) do\n            if i == j then\n                ret_count = ret_count\
    \ + 1\n                ret[ret_count] = i\n            end\n        end\n    end\n\
    \    return sort(ret)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj3d4lolu.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpj3d4lolu.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpj3d4lolu.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    local u = {}\n    local dup = 0\n    local dup2 = 0\n    local c = 0\n  \
    \  for _, v in ipairs(l1) do\n        t[v] = t[v] and t[v] + 1 or 1\n    end\n\
    \    for _, v in ipairs(l2) do\n        u[v] = u[v] and u[v] + 1 or 1\n    end\n\
    \    for k, v in pairs(t) do\n        if u[k] and v <= u[k] then\n           \
    \ dup = dup + 1\n            if v == u[k] then\n                dup2 = dup2 +\
    \ 1\n            end\n        end\n    end\n    for k, v in pairs(u) do\n    \
    \    if t[k] and v <= t[k] then\n            dup = dup + 1\n            if v ==\
    \ t[k] then\n                dup2 = dup2 + 1\n            end\n        end\n \
    \   end\n    local r = {}\n    for k, v in pairs(t) do\n        if u[k] and v\
    \ <= u[k] then\n            table.insert(r, k)\n        end\n    end\n    for\
    \ k, v in pairs(u) do\n        if t[k] and v <= t[k] then\n            table.insert(r,\
    \ k)\n        end\n    end\n    if dup ~= dup2 then\n        return table.sort(r)\n\
    \    else\n        return r\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0fiadpa.lua:55:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpn0fiadpa.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local c = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        if not contains(c, v) then table.insert(c, v) end\n      end\n\
    \    end\n  end\n  table.sort(c)\n  return c\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1ha9ick.lua:11:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpc1ha9ick.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpc1ha9ick.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local res = {}\n\
    \  for _,i in ipairs(l1) do\n    for _,j in ipairs(l2) do\n      if i == j then\
    \ table.insert(res, i) end\n    end\n  end\n  return table.sort(res)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ipcvxfm.lua:19:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp4ipcvxfm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    return unique(sort(intersect(l1,\
    \ l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8_4i3hr.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpz8_4i3hr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpz8_4i3hr.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local s = {}\n\
    \    for _,v in ipairs(l1) do\n        s[v] = true\n    end\n    local res = {}\n\
    \    for _,v in ipairs(l2) do\n        if s[v] then\n            res[#res+1] =\
    \ v\n        end\n    end\n    return sort(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ja139rl.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp5ja139rl.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp5ja139rl.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    local tmp = {}\n    local l1_len = #l1\n    local l2_len = #l2\n   \
    \ local i = 1\n    local j = 1\n    local e\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpll816v5b.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for i,v in ipairs(l1) do\n    if isin(v, l2) then t[#t+1] = v end\n  end\n\
    \  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yxhbiwe.lua:9:\
    \ attempt to call a nil value (global 'isin')\nstack traceback:\n\t/tmp/tmp4yxhbiwe.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4yxhbiwe.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local out =\
    \ {}\n    local elements = {}\n    for i, v in ipairs(l1) do\n        elements[v]\
    \ = 1\n    end\n    for i, v in ipairs(l2) do\n        if elements[v] then\n \
    \           elements[v] = elements[v] + 1\n        else\n            elements[v]\
    \ = 1\n        end\n    end\n    for i, v in pairs(elements) do\n        if v\
    \ > 1 then\n            out[#out + 1] = i\n        end\n    end\n    table.sort(out)\n\
    \    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal t = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif not t[v] then\n\t\t\tt[v] = true\n\t\tend\n\
    \tend\n\tlocal c = {}\n\tfor _, v in ipairs(l2) do\n\t\tif t[v] then\n\t\t\tc[#c\
    \ + 1] = v\n\t\tend\n\tend\n\treturn sort(c)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2n5vhl78.lua:19:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp2n5vhl78.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp2n5vhl78.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  return unique(sort(intersect(l1,\
    \ l2)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqb_9ue1b.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpqb_9ue1b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqb_9ue1b.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local r = {}\n\
    \    local f = {}\n    local s = {}\n    if type(l1) == 'table' and type(l2) ==\
    \ 'table' then\n        for _, v in ipairs(l1) do\n            r[v] = true\n \
    \       end\n        for _, v in ipairs(l2) do\n            if r[v] then\n   \
    \             table.insert(f, v)\n            end\n        end\n        for _,\
    \ v in ipairs(f) do\n            s[v] = true\n        end\n        for _, v in\
    \ ipairs(f) do\n            if s[v] then\n                table.insert(s, v)\n\
    \                s[v] = nil\n            end\n        end\n        return s\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ibw1n9q.lua:35:\
    \ expected: {1, 5, 653}\nactual: {2=5, 3=1, 4=653}\nstack traceback:\n\t/tmp/tmp7ibw1n9q.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  return sorted_unique(intersect(l1,\
    \ l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmuvtv0gy.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpmuvtv0gy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmuvtv0gy.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal out = {}\n\
    \tlocal count = 0\n\tfor i = 1, #l1 do\n\t\tfor j = 1, #l2 do\n\t\t\tif l1[i]\
    \ == l2[j] then\n\t\t\t\ttable.insert(out, l1[i])\n\t\t\t\tcount = count + 1\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbok8y_wx.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmpbok8y_wx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local m = {};\n\
    \  for i, v in ipairs(l1) do\n    if contains(l2, v) then\n      m[v] = true;\n\
    \    end\n  end\n  return sorted(keys(m));\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp406__hqa.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp406__hqa.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp406__hqa.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    if #l1 == 0\
    \ or #l2 == 0 then\n        return {}\n    end\n    if #l1 == 1 then\n       \
    \ for _, v in ipairs(l2) do\n            if v == l1[1] then\n                return\
    \ { v }\n            end\n        end\n        return {}\n    end\n    if #l2\
    \ == 1 then\n        for _, v in ipairs(l1) do\n            if v == l2[1] then\n\
    \                return { v }\n            end\n        end\n        return {}\n\
    \    end\n    local mid1 = math.floor(#l1 / 2)\n    local mid2 = math.floor(#l2\
    \ / 2)\n    if l1[mid1] < l2[mid2] then\n        return common(slice(l1, mid1),\
    \ l2)\n    elseif l1[mid1] > l2[mid2] then\n        return common(l1, slice(l2,\
    \ mid2))\n    else\n        return append(\n            common(slice(l1, mid1),\
    \ slice(l2, mid2)),\n            l1[mid1])\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7evk_br8.lua:31:\
    \ attempt to call a nil value (global 'slice')\nstack traceback:\n\t/tmp/tmp7evk_br8.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp7evk_br8.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    local isCommon = function(el)\n        for _, e in ipairs(l2) do\n\
    \            if el == e then\n                return true\n            end\n \
    \       end\n        return false\n    end\n    for _, el in ipairs(l1) do\n \
    \       if isCommon(el) then\n            table.insert(result, el)\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local list =\
    \ {}\n  for k, v in pairs(l1) do\n    if l2[v] then\n      list[v] = v\n    end\n\
    \  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuc5puqy.lua:19:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpnuc5puqy.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local tab =\
    \ {}\n    local res = {}\n    for _, v in ipairs(l1) do tab[v] = true end\n  \
    \  for _, v in ipairs(l2) do if tab[v] then tab[v] = nil; table.insert(res, v)\
    \ end end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t1 = {}\n\
    \  local t2 = {}\n  for _,v in ipairs(l1) do\n    t1[v] = true\n  end\n  for _,v\
    \ in ipairs(l2) do\n    t2[v] = true\n  end\n  local common = {}\n  for k,_ in\
    \ pairs(t1) do\n    if t2[k] then\n      table.insert(common, k)\n    end\n  end\n\
    \  table.sort(common)\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    -- Checks if\
    \ a list contains the element at index i in l2.\n    local function contains(l1,\
    \ l2, i)\n        for j = 1, #l1 do\n            if l1[j] == l2[i] then\n    \
    \            return true\n            end\n        end\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1jhkvob9.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local result\
    \ = {}\n    local keys = {}\n    for _, v in ipairs(l1) do\n        if exists(v,\
    \ l2) then\n            if not keys[v] then\n                table.insert(result,\
    \ v)\n                keys[v] = true\n            end\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzlxn75df.lua:10:\
    \ attempt to call a nil value (global 'exists')\nstack traceback:\n\t/tmp/tmpzlxn75df.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzlxn75df.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tif l1 == nil\
    \ or l2 == nil then\n\t\treturn\n\tend\n\tlocal t = {}\n\tfor _, v in ipairs(l1)\
    \ do\n\t\tt[v] = true\n\tend\n\tlocal r = {}\n\tfor _, v in ipairs(l2) do\n\t\t\
    if t[v] then\n\t\t\tr[#r + 1] = v\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6amwr2ss.lua:26:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmp6amwr2ss.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local l3 =\
    \ {}\n    for _, v in ipairs(l1) do\n        if includes(l2, v) then\n       \
    \     table.insert(l3, v)\n        end\n    end\n    sort(l3)\n    local i = 1\n\
    \    while i < #l3 do\n        if l3[i] == l3[i + 1] then\n            table.remove(l3,\
    \ i)\n        else\n            i = i + 1\n        end\n    end\n    return l3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv2yrkig3.lua:9:\
    \ attempt to call a nil value (global 'includes')\nstack traceback:\n\t/tmp/tmpv2yrkig3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpv2yrkig3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    -- TODO: Implement\
    \ it.\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_0upd0e.lua:14:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmph_0upd0e.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local h = {}\n\
    \    for _, v in ipairs(l1) do\n        h[v] = true\n    end\n    local l = {}\n\
    \    for _, v in ipairs(l2) do\n        if h[v] then\n            l[#l + 1] =\
    \ v\n        end\n    end\n    table.sort(l)\n    return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp445xo6xy.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmp445xo6xy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal c = {}\n\
    \tfor i, v in ipairs(l1) do\n\t\tif table.ifind(l2, v) then\n\t\t\ttable.insert(c,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(c)\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmi5l5sb0.lua:9:\
    \ attempt to call a nil value (field 'ifind')\nstack traceback:\n\t/tmp/tmpmi5l5sb0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmi5l5sb0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local common\
    \ = {}\n    local hash = {}\n    for _, v in ipairs(l1) do\n        hash[v] =\
    \ true\n    end\n    for _, v in ipairs(l2) do\n        if hash[v] then\n    \
    \        common[#common + 1] = v\n        end\n    end\n    if #common > 0 then\n\
    \        table.sort(common)\n    end\n    return common\nend\n_M.common = common\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnyttmca7.lua:22: attempt to index a nil value (global '_M')\n\
    stack traceback:\n\t/tmp/tmpnyttmca7.lua:22: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local tmp =\
    \ {}\n    for _, v in ipairs(l1) do\n        tmp[v] = true\n    end\n    local\
    \ result = {}\n    for _, v in ipairs(l2) do\n        if tmp[v] then\n       \
    \     table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmeah1rtj.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpmeah1rtj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local res = {}\n\
    \  local a1 = {}\n  local a2 = {}\n  for _, v in ipairs(l1) do\n    a1[v] = true\n\
    \  end\n  for _, v in ipairs(l2) do\n    a2[v] = true\n  end\n  for k, _ in pairs(a1)\
    \ do\n    if a2[k] then\n      res[#res + 1] = k\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    local ix = 1\n    local n1 = #l1\n    local n2 = #l2\n    local t1 =\
    \ l1\n    local t2 = l2\n    if n1 > n2 then\n        t1 = l2\n        t2 = l1\n\
    \    end\n    -- n1 < n2\n    for i = 1, n1 do\n        local e = t1[i]\n    \
    \    if elem(e, t2) then\n            res[ix] = e\n            ix = ix + 1\n \
    \       end\n    end\n    sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd1x4exx4.lua:20:\
    \ attempt to call a nil value (global 'elem')\nstack traceback:\n\t/tmp/tmpd1x4exx4.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpd1x4exx4.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local r = {}\n\
    \    for _, e in ipairs(l1) do\n        if find(l2, e) then\n            r[#r\
    \ + 1] = e\n        end\n    end\n    sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwiurl21_.lua:9:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmpwiurl21_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwiurl21_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local u = union(l1,\
    \ l2)\n    local r = {}\n    for i, v in ipairs(u) do\n        if l1[v] and l2[v]\
    \ then\n            r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv5fzc42n.lua:7:\
    \ attempt to call a nil value (global 'union')\nstack traceback:\n\t/tmp/tmpv5fzc42n.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpv5fzc42n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    if in_list(v, l2) then\n      table.insert(common,\
    \ v)\n    end\n  end\n  return unique(common)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjf68czh.lua:9:\
    \ attempt to call a nil value (global 'in_list')\nstack traceback:\n\t/tmp/tmpkjf68czh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkjf68czh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    for i = 1, #l1 do\n        set[l1[i]] = true\n    end\n    local out\
    \ = {}\n    for i = 1, #l2 do\n        if set[l2[i]] then\n            out[#out\
    \ + 1] = l2[i]\n        end\n    end\n    table.sort(out)\n    return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe42y67_0.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpe42y67_0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local rv =\
    \ {}\n    for _, v in ipairs(l1) do\n        for _, v2 in ipairs(l2) do\n    \
    \        if v == v2 then\n                table.insert(rv, v)\n            end\n\
    \        end\n    end\n    return uniq(rv)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7ab5a94.lua:15:\
    \ attempt to call a nil value (global 'uniq')\nstack traceback:\n\t/tmp/tmpu7ab5a94.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpu7ab5a94.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  return unique(intersect(l1,\
    \ l2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbda0e7uk.lua:7:\
    \ attempt to call a nil value (global 'intersect')\nstack traceback:\n\t/tmp/tmpbda0e7uk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbda0e7uk.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i] == l2[j]\
    \ then\n                t[#t + 1] = l1[i]\n            end\n        end\n    end\n\
    \    return sort_unique(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjc6o36ks.lua:15:\
    \ attempt to call a nil value (global 'sort_unique')\nstack traceback:\n\t/tmp/tmpjc6o36ks.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpjc6o36ks.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    if #l1 > #l2\
    \ then\n        local tmp = l1\n        l1 = l2\n        l2 = tmp\n    end\n \
    \   local u_l2 = unique(l2)\n    local res = {}\n    for _, v in ipairs(l1) do\n\
    \        if contains(u_l2, v) then\n            table.insert(res, v)\n       \
    \ end\n    end\n    return sort(res)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfk_96ix8.lua:12:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmpfk_96ix8.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpfk_96ix8.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local seen =\
    \ {}\n  local res = {}\n  local op = #l1 < #l2 and ipairs or pairs\n  for _, v\
    \ in op(l1) do\n    seen[v] = true\n  end\n  for _, v in pairs(l2) do\n    if\
    \ seen[v] then\n      res[#res + 1] = v\n    end\n  end\n  return sort_unique(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg62i91tg.lua:18:\
    \ attempt to call a nil value (global 'sort_unique')\nstack traceback:\n\t/tmp/tmpg62i91tg.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpg62i91tg.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local ret =\
    \ {}\n    for _, v in ipairs(l1) do\n        for _, v2 in ipairs(l2) do\n    \
    \        if v == v2 then\n                ret[#ret + 1] = v\n                break\n\
    \            end\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskdd0jwm.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmpskdd0jwm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local t = {}\n  if #l1 == 0 or #l2 == 0 then\n    return common\n  end\n\
    \  for _,v in ipairs(l1) do\n    t[v] = true\n  end\n  for _,v in ipairs(l2) do\n\
    \    if t[v] then\n      common[#common+1] = v\n    end\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36umg2wf.lua:26:\
    \ expected: {1, 5, 653}\nactual: {5, 1, 5, 653}\nstack traceback:\n\t/tmp/tmp36umg2wf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    local u = {}\n    local i1 = 1\n    local i2 = 1\n    local l1l = #l1\n \
    \   local l2l = #l2\n    while i1 <= l1l and i2 <= l2l do\n        if l1[i1] ==\
    \ l2[i2] then\n            t[#t + 1] = l1[i1]\n            i1 = i1 + 1\n     \
    \       i2 = i2 + 1\n        elseif l1[i1] < l2[i2] then\n            i1 = i1\
    \ + 1\n        else\n            i2 = i2 + 1\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8af093i.lua:30:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmpn8af093i.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local l = {}\n\
    \  local m = {}\n  local lu = {}\n  local mn = math.min\n  local mx = math.max\n\
    \  local f = function(v)\n    local a = l[v]\n    local b = m[v]\n    if a and\
    \ b then\n      table.insert(lu, v)\n    end\n  end\n  for i, v in ipairs(l1)\
    \ do\n    l[v] = true\n  end\n  for i, v in ipairs(l2) do\n    m[v] = true\n \
    \ end\n  for i, v in ipairs(l1) do\n    f(v)\n  end\n  for i, v in ipairs(l2)\
    \ do\n    f(v)\n  end\n  table.sort(lu)\n  return lu\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9swhsig.lua:38:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 5, 5, 5, 653, 653}\nstack traceback:\n\
    \t/tmp/tmpe9swhsig.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n\
    \    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i] == l2[j]\
    \ then\n                t[#t + 1] = l1[i]\n            end\n        end\n    end\n\
    \    table.sort(t)\n    local i = 1\n    while i < #t do\n        if t[i] == t[i\
    \ + 1] then\n            table.remove(t, i)\n        else\n            i = i +\
    \ 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local set = {}\n\
    \  for _, v in ipairs(l1) do\n    set[v] = true\n  end\n  local ret = {}\n  for\
    \ _, v in ipairs(l2) do\n    if set[v] then\n      table.insert(ret, v)\n    end\n\
    \  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxt95yy9.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpfxt95yy9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal result\
    \ = {}\n\tfor _,v in ipairs(l1) do\n\t\tfor _,v2 in ipairs(l2) do\n\t\t\tif v2\
    \ == v then\n\t\t\t\tresult[#result+1] = v\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \tend\n\tif #result == 0 then\n\t\treturn result\n\tend\n\ttable.sort(result)\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local res =\
    \ {}\n    local m = #l1\n    local n = #l2\n    local i = 1\n    local j = 1\n\
    \    while i <= m and j <= n do\n        if l1[i] == l2[j] then\n            res[#res\
    \ + 1] = l1[i]\n            i = i + 1\n            j = j + 1\n        elseif l1[i]\
    \ < l2[j] then\n            i = i + 1\n        else\n            j = j + 1\n \
    \       end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68uokna6.lua:29:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmp68uokna6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t1 = {}\n\
    \  local t2 = {}\n  local sorted = {}\n  local c = {}\n  local i = 1\n  local\
    \ c_i = 1\n  for k, v in pairs(l1) do\n    t1[i] = v\n    i = i + 1\n  end\n \
    \ for k, v in pairs(l2) do\n    t2[i] = v\n    i = i + 1\n  end\n  table.sort(t1)\n\
    \  table.sort(t2)\n  for i, v in ipairs(t1) do\n    for j, k in ipairs(t2) do\n\
    \      if v == k then\n        c[c_i] = v\n        c_i = c_i + 1\n      end\n\
    \    end\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb30b15ux.lua:37:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpb30b15ux.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local r = {}\n\
    \    local s = {}\n    for _, v in ipairs(l1) do r[v] = true end\n    for _, v\
    \ in ipairs(l2) do if r[v] then s[v] = true end end\n    return sort_unique(keys(s))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8bd56fe.lua:11:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpd8bd56fe.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpd8bd56fe.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local r = {}\n\
    \  local l = {}\n  for i, v in ipairs(l1) do\n    r[v] = (r[v] or 0) + 1\n  end\n\
    \  for i, v in ipairs(l2) do\n    if r[v] then\n      l[#l + 1] = v\n      r[v]\
    \ = nil\n    end\n  end\n  return sort(l)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyq9yz3c2.lua:18:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpyq9yz3c2.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpyq9yz3c2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local inter\
    \ = {}\n    local uniq = {}\n    for _, v in ipairs(l1) do\n        if index_of(l2,\
    \ v) ~= nil then\n            table.insert(inter, v)\n        end\n    end\n \
    \   for _, v in ipairs(inter) do\n        if index_of(uniq, v) == nil then\n \
    \           table.insert(uniq, v)\n        end\n    end\n    table.sort(uniq)\n\
    \    return uniq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpceuel88n.lua:10:\
    \ attempt to call a nil value (global 'index_of')\nstack traceback:\n\t/tmp/tmpceuel88n.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpceuel88n.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local l = merge(l1,\
    \ l2)\n  l = unique(l)\n  l = sort(l)\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_de0dp1.lua:7:\
    \ attempt to call a nil value (global 'merge')\nstack traceback:\n\t/tmp/tmpw_de0dp1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpw_de0dp1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local set =\
    \ {}\n    local res = {}\n    for _, l in ipairs({l1, l2}) do\n        for _,\
    \ v in ipairs(l) do\n            if not set[v] then\n                set[v] =\
    \ true\n                table.insert(res, v)\n            end\n        end\n \
    \   end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2_ae_r7.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 2, 3, 4, 5, 7, 9, 34, 121, 653}\nstack traceback:\n\
    \t/tmp/tmpc2_ae_r7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local t = {}\n\
    \  for k, v in pairs(l1) do\n    t[v] = true\n  end\n  for k, v in pairs(l2) do\n\
    \    if t[v] then\n      t[v] = nil\n      t[#t + 1] = v\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwuzg7z.lua:23:\
    \ expected: {1, 5, 653}\nactual: {2=true, 3=true, 4=true, 6=1, 7=5, 8=653, 34=true}\n\
    stack traceback:\n\t/tmp/tmpctwuzg7z.lua:23: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local unique\
    \ = unique(l1)\n    local diff = {}\n    for i = 1, #unique do\n        if not\
    \ list_contains(l2, unique[i]) then\n            table.insert(diff, unique[i])\n\
    \        end\n    end\n    return list_diff(unique, diff)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps98fnz5c.lua:7:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmps98fnz5c.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps98fnz5c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal t = {}\n\
    \tfor _, v in ipairs(l1) do\n\t\tif contains(l2, v) then\n\t\t\tif not contains(t,\
    \ v) then\n\t\t\t\tt[#t + 1] = v\n\t\t\tend\n\t\tend\n\tend\n\treturn sort(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpep4xg3wh.lua:9:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpep4xg3wh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpep4xg3wh.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local hash\
    \ = {}\n    local result = {}\n    local i\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptn1wng43.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n\tlocal common_list\
    \ = {}\n\tlocal unique_list = {}\n\tif #l1 >= #l2 then\n\t\tbig_list = l1\n\t\t\
    small_list = l2\n\telse\n\t\tbig_list = l2\n\t\tsmall_list = l1\n\tend\n\tfor\
    \ _,v in ipairs(small_list) do\n\t\tfor _,v2 in ipairs(big_list) do\n\t\t\tif\
    \ v == v2 then\n\t\t\t\tif unique(v, unique_list) then\n\t\t\t\t\ttable.insert(common_list,\
    \ v)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(common_list)\n\treturn\
    \ common_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_bk7e0sd.lua:19:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmp_bk7e0sd.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp_bk7e0sd.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local cl = {}\n\
    \  for i = 1, #l1 do\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n  \
    \      cl[#cl + 1] = l1[i]\n      end\n    end\n  end\n  return unique(cl)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49b3wm0c.lua:15:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmp49b3wm0c.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp49b3wm0c.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local m = {}\n\
    \    for _, v in ipairs(l1) do\n        m[v] = true\n    end\n    local l = {}\n\
    \    for _, v in ipairs(l2) do\n        if m[v] then\n            table.insert(l,\
    \ v)\n        end\n    end\n    table.sort(l)\n    return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdq9wqy3.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 5, 5, 653}\nstack traceback:\n\t/tmp/tmpgdq9wqy3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
