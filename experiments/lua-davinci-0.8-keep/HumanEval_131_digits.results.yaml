name: HumanEval_131_digits
language: lua
results:
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  return 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstqif4g5.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpstqif4g5.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    return n % 2 * digits(n\
    \ // 10) + digits(n // 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0h79vkti.lua:8:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp0h79vkti.lua:8: in upvalue 'digits'\n\
    \t/tmp/tmp0h79vkti.lua:8: in upvalue 'digits'\n\t/tmp/tmp0h79vkti.lua:8: in upvalue\
    \ 'digits'\n\t/tmp/tmp0h79vkti.lua:8: in upvalue 'digits'\n\t/tmp/tmp0h79vkti.lua:8:\
    \ in upvalue 'digits'\n\t/tmp/tmp0h79vkti.lua:8: in upvalue 'digits'\n\t/tmp/tmp0h79vkti.lua:8:\
    \ in upvalue 'digits'\n\t/tmp/tmp0h79vkti.lua:8: in upvalue 'digits'\n\t/tmp/tmp0h79vkti.lua:8:\
    \ in upvalue 'digits'\n\t...\n\t/tmp/tmp0h79vkti.lua:8: in local 'candidate'\n\
    \t/tmp/tmp0h79vkti.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.180\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n ~= 0 do\n    local r = n % 10\n    if r % 2 ~= 0 then\n      sum = sum * r\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx52cq8i9.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx52cq8i9.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal pro = 1\n\tlocal\
    \ i\n\tfor i = 1, #tostring(n) do\n\t\tif tonumber(string.sub(tostring(n), i,\
    \ i)) % 2 ~= 0 then\n\t\t\tpro = pro * tonumber(string.sub(tostring(n), i, i))\n\
    \t\tend\n\tend\n\treturn pro\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36_2tym0.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp36_2tym0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local t = {}\n  \
    \  for i in string.gmatch(tostring(n), \"%d\") do\n        if tonumber(i) % 2\
    \ ~= 0 then\n            table.insert(t, i)\n        end\n    end\n    return\
    \ tonumber(table.concat(t))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovfv627b.lua:23:\
    \ expected: 5, actual: 51\nstack traceback:\n\t/tmp/tmpovfv627b.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    -- if n <= 0 then\n\
    \    --     return 0\n    -- end\n    -- local first_num = n % 10\n    -- if (first_num\
    \ % 2) == 0 then\n    --     return digits(math.floor(n / 10))\n    -- else\n\
    \    --     return first_num * digits(math.floor(n / 10))\n    -- end\n    return\
    \ n <= 0 and 0 or\n            (n % 10 % 2 == 0 and digits(math.floor(n / 10))\
    \ or\n                    n % 10 * digits(math.floor(n / 10)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkd4t39e.lua:25:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmplkd4t39e.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  local\
    \ tmp = 0\n  for i = 1, #tostring(n) do\n    tmp = n % 10\n    if tmp % 2 ~= 0\
    \ then\n      prod = prod * tmp\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpv2a5tp.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmpv2a5tp.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   if n == 0 then\n        return 0\n    end\n    while n > 0 do\n        local\
    \ digit = n % 10\n        if digit % 2 ~= 0 then\n            res = res * digit\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos12z05v.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpos12z05v.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- solution goes here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_psm9hh.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpa_psm9hh.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local m = 1\n  while\
    \ n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      m = m * r\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi_sa75y.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxi_sa75y.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local dig = n % 10\n    if dig % 2 == 1 then\n      prod = prod\
    \ * dig\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8d4_w_x.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj8d4_w_x.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppurjwixl.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmppurjwixl.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local p = 1\n   \
    \ for i in tostring(n):gmatch('%d') do\n        if i % 2 ~= 0 then\n         \
    \   p = p * i\n        end\n    end\n    return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e4a4dhi.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8e4a4dhi.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local s = 0\n  for\
    \ d in (tostring(n)):gmatch('.') do\n    d = tonumber(d)\n    if d % 2 ~= 0 then\n\
    \      s = s + d\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_w3a7y0.lua:24:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpy_w3a7y0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    n = math.abs(n)\n\
    \    local res = 1\n    while n > 0 do\n        local d = n % 10\n        if d\
    \ % 2 == 1 then\n            res = res * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4nzva0f.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpv4nzva0f.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local sum = 1\n \
    \   while n > 0 do\n        local x = n % 10\n        if x % 2 == 1 then\n   \
    \         sum = sum * x\n        end\n        n = (n - x) / 10\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn231i38.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmn231i38.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local d = 0\n   \
    \ for c in tostring(n):gmatch(\"%d\") do\n        if tonumber(c) % 2 ~= 0 then\n\
    \            d = d + tonumber(c)\n        end\n    end\n    return d\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc11uix3.lua:23:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpnc11uix3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local i = n % 10\n    if i % 2 == 1 then\n      result\
    \ = result * i\n    end\n    n = math.floor(n / 10)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5clnlkpk.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5clnlkpk.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local x = n % 10\n    if x % 2 ~= 0 then\n      res = res * x\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8wve9xo.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpp8wve9xo.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local r = 1\n   \
    \ for i = 0, #tostring(n) do\n        local c = tostring(n):sub(i, i)\n      \
    \  if (tonumber(c) % 2 ~= 0) then\n            r = r * tonumber(c)\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8zlkkcis.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8zlkkcis.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8zlkkcis.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local result = 0\n  for i = 1, #tostring(n) do\n    local v = tonumber(string.sub(tostring(n),\
    \ i, i))\n    if v % 2 ~= 0 then\n      product = product * v\n    end\n  end\n\
    \  if product == 1 then\n    result = 0\n  else\n    result = product\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsrdn0js.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnsrdn0js.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- Write your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7ipxdrb.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpt7ipxdrb.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdutb2i6v.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdutb2i6v.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    return 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi3ymao.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmposi3ymao.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  for\
    \ d in tostring(n):gmatch('%d') do\n    d = tonumber(d)\n    if d % 2 == 1 then\n\
    \      res = res * d\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso0nredd.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpso0nredd.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal res = 1\n\twhile\
    \ n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tres = res * d\n\
    \t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaqunlsc.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmaqunlsc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    n = n or -1\n   \
    \ local sum = 1\n    for i = 1, #tostring(n) do\n        local num = tonumber(tostring(n):sub(i,\
    \ i))\n        if num % 2 ~= 0 then\n            sum = sum * num\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnj_vw6j.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwnj_vw6j.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then return\
    \ 0 end\n  local res = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit\
    \ % 2 == 1 then\n      res = res * digit\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8n3xyxp.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj8n3xyxp.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for digit in tostring(n):gmatch(\"%d\") do\n    digit = tonumber(digit)\n \
    \   if digit % 2 == 1 then\n      product = product * digit\n    end\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4w_n8w2.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpw4w_n8w2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n ~= 0 do\n    local digit = n % 10\n    if digit % 2 ~= 0 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoimv2uhu.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpoimv2uhu.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local prod = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            prod = prod * (n\
    \ % 10)\n        end\n        n = n // 10\n    end\n    return prod\nend\nassert(digits(1)\
    \ == 1)\nassert(digits(4) == 0)\nassert(digits(235) == 15)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2drqktu9.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp2drqktu9.lua:18: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    if (n < 0) then\n\
    \        n = -n\n    end\n    local product = 1\n    for d in tostring(n):gmatch('%d')\
    \ do\n        local d = tonumber(d)\n        if (d % 2 == 1) then\n          \
    \  product = product * d\n        end\n    end\n    return product\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaeqnw7b3.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpaeqnw7b3.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  for\
    \ d in tostring(n):gmatch('%d') do\n    local digit = tonumber(d)\n    if digit\
    \ % 2 == 1 then\n      res = res * digit\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprp2kq9dk.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprp2kq9dk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    for i = 1, #tostring(n) do\n        local num = tonumber(tostring(n):sub(i,\
    \ i))\n        if num % 2 ~= 0 then\n            result = result * num\n     \
    \   end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvm_sz8c.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptvm_sz8c.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local s = 0\n   \
    \ while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            s = s + digit\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta66t3xa.lua:25:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpta66t3xa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal res = 1\n\twhile\
    \ n ~= 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 ~= 0 then\n\t\t\tres = res * d\n\
    \t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn0xux3x.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcn0xux3x.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local acc = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      acc = acc * d\n\
    \    end\n    n = (n - d) / 10\n  end\n  return acc\nend\nprint(digits(235)) -->\
    \ 15\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "15.0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz5rkems.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmppz5rkems.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local p = 1\n  for\
    \ d in tostring(n):gmatch('%d') do\n    d = tonumber(d)\n    if d % 2 ~= 0 then\n\
    \      p = p * d\n    end\n  end\n  return p\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg9me0ib.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxg9me0ib.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- fail fast, we don't\
    \ care about non-positive integers\n  if n <= 0 then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph9somzxq.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   for d in tostring(n):gmatch(\"%d\") do\n        local d = tonumber(d)\n  \
    \      if d % 2 == 1 then\n            res = res * d\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgoo582li.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgoo582li.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local p = 1\n  for\
    \ d in n:gmatch('%d') do\n    d = tonumber(d)\n    if d % 2 == 1 then\n      p\
    \ = p * d\n    end\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79xjtv2o.lua:9:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmp79xjtv2o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp79xjtv2o.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local last\n    local\
    \ res = 1\n    while n > 0 do\n        last = n % 10\n        if last % 2 == 1\
    \ then\n            res = res * last\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpreb54hbq.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpreb54hbq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            res = res * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdc2bwc7.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpbdc2bwc7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      product\
    \ = product * d\n    end\n    n = (n - d) / 10\n  end\n  return product\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgva1tc44.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgva1tc44.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        if n % 2 == 1 then\n            res = res * (n % 10)\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u2jcoly.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3u2jcoly.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local sum = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if (digit % 2) == 1\
    \ then\n            sum = sum * digit\n        end\n        n = (n - digit) /\
    \ 10\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5u3bejeg.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5u3bejeg.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local accum = 1\n\
    \    for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            accum = accum * digit\n   \
    \     end\n    end\n    return accum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghyocvtw.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpghyocvtw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local p = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       p = p * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81s00dsc.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp81s00dsc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      prod =\
    \ prod * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz87py7mp.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz87py7mp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n ~= 0 do\n        local digit = n % 10\n        if digit % 2 ~= 0\
    \ then\n            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpymj_gd.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfpymj_gd.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local s = 0\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      s = s * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq0hykka.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppq0hykka.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    if n <= 0 then\n\
    \        return 0\n    end\n    return n % 10 % 2 ~= 0 and n % 10 * digits(n /\
    \ 10) or digits(n / 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkchrr_yf.lua:17:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpkchrr_yf.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then return\
    \ 0 end\n  local last_digit = n % 10\n  if last_digit % 2 == 1 then\n    return\
    \ last_digit * digits(math.floor(n / 10))\n  else\n    return digits(math.floor(n\
    \ / 10))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwc9eq2k.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphwc9eq2k.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- fill here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv3sxj_i.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpuv3sxj_i.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n  \
    \          result = result * d\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_jzvzqj.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpn_jzvzqj.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = n % 10\n    if digit % 2 ~= 0\
    \ then\n      result = result * digit\n    end\n    n = (n - digit) / 10\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps31g92e4.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmps31g92e4.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n   return n % 10 * digits(n\
    \ / 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplftlmda7.lua:8:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplftlmda7.lua:8: in upvalue 'digits'\n\
    \t/tmp/tmplftlmda7.lua:8: in upvalue 'digits'\n\t/tmp/tmplftlmda7.lua:8: in upvalue\
    \ 'digits'\n\t/tmp/tmplftlmda7.lua:8: in upvalue 'digits'\n\t/tmp/tmplftlmda7.lua:8:\
    \ in upvalue 'digits'\n\t/tmp/tmplftlmda7.lua:8: in upvalue 'digits'\n\t/tmp/tmplftlmda7.lua:8:\
    \ in upvalue 'digits'\n\t/tmp/tmplftlmda7.lua:8: in upvalue 'digits'\n\t/tmp/tmplftlmda7.lua:8:\
    \ in upvalue 'digits'\n\t...\n\t/tmp/tmplftlmda7.lua:8: in local 'candidate'\n\
    \t/tmp/tmplftlmda7.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.180\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local ret = 1\n \
    \   while n ~= 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n  \
    \          ret = ret * d\n        end\n        n = (n - d) / 10\n    end\n   \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilvygyme.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpilvygyme.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    -- insert your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy6bahm5.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpgy6bahm5.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    -- TODO\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_p5u13d.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmp5_p5u13d.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local p = 1\n   \
    \ while n ~= 0 do\n        local r = n % 10\n        if r % 2 ~= 0 then\n    \
    \        p = p * r\n        end\n        n = (n - r) / 10\n    end\n    return\
    \ p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fk6z3_i.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7fk6z3_i.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local m = 1\n   \
    \ for d in tostring(n):gmatch('%d') do\n        if math.mod(tonumber(d), 2) ~=\
    \ 0 then\n            m = m * tonumber(d)\n        end\n    end\n    return m\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0sta4fv.lua:10:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpc0sta4fv.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpc0sta4fv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  for\
    \ i = 1, #tostring(n) do\n    local d = tonumber(tostring(n):sub(i, i))\n    if\
    \ d % 2 ~= 0 then\n      r = r * d\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazii7mqa.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpazii7mqa.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local ret = 1\n \
    \   local str = tostring(n)\n    for i = 1, #str do\n        local ch = tonumber(str:sub(i,\
    \ i))\n        if ch % 2 == 1 then\n            ret = ret * ch\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm56k30dr.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm56k30dr.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  return 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcs_p7zk.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwcs_p7zk.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(string.sub(tostring(n),\
    \ i, i))\n    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bm38c18.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4bm38c18.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvhyjzsz.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyvhyjzsz.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8f75k8z.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpc8f75k8z.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = (n - d) / 10\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dbez4yg.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5dbez4yg.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local ret = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         ret = ret * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph945k6d8.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmph945k6d8.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  return n % 2 == 0 and\
    \ 0 or (n % 10) * digits(math.floor(n / 10))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbup67f2.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpsbup67f2.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  for\
    \ d in tostring(n):gmatch(\"%d\") do\n    d = tonumber(d)\n    if d % 2 == 1 then\n\
    \      res = res * d\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyff33bc.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeyff33bc.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  n = math.abs(n)\n \
    \ local res = 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n\
    \      res = res * r\n    end\n    n = math.floor(n / 10)\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazdd7ejj.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpazdd7ejj.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local t={}\n  local\
    \ k=1\n  local p=1\n  local result=0\n  local last=0\n  while n>=1 do\n    t[k]=n%10\n\
    \    n=math.floor(n/10)\n    k=k+1\n  end\n  for i=1,k-1 do\n    last=t[i]\n \
    \   if last%2==1 then\n      result=result+last*p\n      p=p*10\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkk_a6uw.lua:34:\
    \ expected: 5, actual: 51\nstack traceback:\n\t/tmp/tmplkk_a6uw.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for c in tostring(n):gmatch\"%d\" do\n    if tonumber(c) % 2 == 1 then\n  \
    \    product = product * tonumber(c)\n    end\n  end\n  return product\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8c7ii9eb.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8c7ii9eb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local prod = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            prod = prod * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5z46kgk.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk5z46kgk.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  return tonumber(n:gsub(\"\
    [13579]\", \"\") or 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1gg2wdce.lua:8:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmp1gg2wdce.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1gg2wdce.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local prods = 1\n\
    \    for i in tostring(n):gmatch(\"%d\") do\n        if i:find(\"[13579]\") then\n\
    \            prods = prods * i\n        end\n    end\n    return prods\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mu9bcrf.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0mu9bcrf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  for\
    \ c in tostring(n):gmatch(\".\") do\n    if tonumber(c) % 2 ~= 0 then\n      sum\
    \ = sum * tonumber(c)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nsq0gtk.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5nsq0gtk.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40yrm054.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp40yrm054.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal r = 1\n\twhile\
    \ n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tr = r * d\n\t\t\
    end\n\t\tn = n // 10\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph77yzyu9.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmph77yzyu9.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  if n < 0 then n = -n end\n  while n > 0 do\n    local digit = n % 10\n    if\
    \ digit % 2 == 1 then\n      product = product * digit\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxmafr_6.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuxmafr_6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local function helper(n,\
    \ p)\n    if n == 0 then return p else\n      local r = n % 10\n      if r % 2\
    \ == 1 then\n        return helper(math.floor(n / 10), p * r)\n      else\n  \
    \      return helper(math.floor(n / 10), p)\n      end\n    end\n  end\n  return\
    \ helper(n, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mgy_1qy.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1mgy_1qy.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local function odd(x)\n\
    \    return x % 2 == 1\n  end\n  local product = 1\n  while n > 0 do\n    local\
    \ digit = n % 10\n    if odd(digit) then\n      product = product * digit\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvisoglj.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqvisoglj.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local m = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       m = m * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25o07goi.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp25o07goi.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local s = 0\n  while\
    \ n ~= 0 do\n    local k = n % 10\n    if k % 2 == 1 then\n      s = s * 10 +\
    \ k\n    end\n    n = math.floor(n / 10)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1gcf09_.lua:25:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmpb1gcf09_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nn = 0\n  for\
    \ i in string.gmatch(n, \"%d\") do\n    local j = tonumber(i)\n    if j%2 ~= 0\
    \ then\n      nn = nn + i\n    end\n  end\n  return nn\nend\nprint(\"\\nOdd digits\
    \ product\")\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\nprint(digits(12345678901234567890))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "\nOdd digits product\n1.0\n0\n8.0\n44.0\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpx7j6fbr8.lua:29: expected: 5, actual: 6\nstack traceback:\n\
    \t/tmp/tmpx7j6fbr8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjesf_oa6.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjesf_oa6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local i = n % 10\n        if i % 2 == 1 then\n  \
    \          result = result * i\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmphjrka0.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmphjrka0.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local mult = 1\n  for\
    \ digit in tostring(n):gmatch(\"%d\") do\n    digit = tonumber(digit)\n    if\
    \ digit % 2 ~= 0 then\n      mult = mult * digit\n    end\n  end\n  return mult\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gs9rdet.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8gs9rdet.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local r = n % 10\n        if r % 2 == 1 then\n   \
    \         res = res * r\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vpdl163.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9vpdl163.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n  \
    \          product = product * d\n        end\n        n = (n - d) / 10\n    end\n\
    \    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwchdvste.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwchdvste.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, #tostring(n) do\n    if tonumber(tostring(n):sub(i, i)) % 2 ~= 0\
    \ then\n      product = product * tonumber(tostring(n):sub(i, i))\n    end\n \
    \ end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c809g2l.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4c809g2l.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79rzezx9.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp79rzezx9.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- for the given number\
    \ n\n  local r = 0;\n  while n > 0 do\n    -- extract the rightmost digit of n\n\
    \    local d = n % 10;\n    -- if d is odd\n    if d % 2 ~= 0 then\n      -- multiply\
    \ d with r and set the result to r\n      r = r * d;\n    end\n    -- truncate\
    \ n by removing the rightmost digit\n    n = (n - d) / 10;\n  end\n  return r;\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctlsnmxs.lua:27:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpctlsnmxs.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n <= 0 then return\
    \ 0 end\n  local prod = 1\n  while n > 0 do\n    local digit = n % 10\n    if\
    \ digit % 2 == 1 then\n      prod = prod * digit\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrwp_dds.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplrwp_dds.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local t={}\n  local\
    \ i=1\n  local sum=0\n  while n>0 do\n    table.insert(t,n%10)\n    n=math.floor(n/10)\n\
    \  end\n  while t[i] do\n    if t[i]%2~=0 then\n      sum=sum+t[i]\n    end\n\
    \    i=i+1\n  end\n  return sum\nend\nassert(digits(123)==6)\nassert(digits(123456)==21)\n\
    assert(digits(963852741)==189)\nassert(digits(2468)==0)\nassert(digits(1357)==35)\n\
    assert(digits(13579)==45)\nassert(digits(24680)==0)\nassert(digits(0)==0)\nassert(digits(1)==1)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfm4gszg2.lua:23: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpfm4gszg2.lua:23: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local t = {}\n  \
    \  for c in tostring(n):gmatch(\".\") do\n        local n = tonumber(c)\n    \
    \    if n % 2 == 1 then\n            table.insert(t, n)\n        end\n    end\n\
    \    if #t == 0 then\n        return 0\n    end\n    return table.reduce(t, function(acc,\
    \ v) return acc * v end, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf2a9b4a5.lua:18:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpf2a9b4a5.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpf2a9b4a5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    local digit = 0\n    while n > 0 do\n        digit = n % 10\n        if digit\
    \ % 2 ~= 0 then\n            product = product * digit\n        end\n        n\
    \ = math.floor(n / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tcjss1e.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7tcjss1e.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local s = tostring(n)\n\
    \    local p = 1\n    for i = 1, #s do\n        local d = tonumber(s:sub(i, i))\n\
    \        if d % 2 == 1 then\n            p = p * d\n        end\n    end\n   \
    \ return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw46ur_5e.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpw46ur_5e.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then return\
    \ 0 end\n  return (n % 10 % 2 == 1 and n % 10 or 1) * digits(math.floor(n / 10))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zo1o2yt.lua:15:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3zo1o2yt.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- TODO: Implement\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwqnfkri.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpiwqnfkri.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = (n - digit) / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nfrcbaz.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3nfrcbaz.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for digit in tostring(n):gmatch(\"%d\") do\n    digit = tonumber(digit)\n \
    \   if digit % 2 == 1 then\n      product = product * digit\n    end\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplisxb9bx.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplisxb9bx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then return\
    \ 0 end\n  local r = n % 10\n  if r % 2 == 0 then\n    return digits(math.floor(n\
    \ / 10))\n  else\n    return r * digits(math.floor(n / 10))\n  end\nend\nprint(digits(1))\n\
    print(digits(4))\nprint(digits(235))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "0\n0\n0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5khajyl.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpk5khajyl.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvuz1wdu.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqvuz1wdu.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n   local result = 1\n\
    \   for d in tostring(n):gmatch(\"%d\") do\n      d = tonumber(d)\n      if d\
    \ % 2 == 1 then\n         result = result * d\n      end\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptffcre6i.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptffcre6i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local t = {}\n  while\
    \ n ~= 0 do\n    table.insert(t, n % 10)\n    n = math.floor(n / 10)\n  end\n\
    \  local res = 1\n  for _, num in ipairs(t) do\n    if num % 2 ~= 0 then\n   \
    \   res = res * num\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfuh8m8f.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcfuh8m8f.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local p = 1\n  while\
    \ n > 0 do\n    local k = n % 10\n    if k % 2 == 1 then\n      p = p * k\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4f9omoi8.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4f9omoi8.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local odd = 0\n \
    \   local even = 0\n    while n > 0 do\n        if n % 2 == 1 then\n         \
    \   odd = odd + 1\n        else\n            even = even + 1\n        end\n  \
    \      n = math.floor(n / 10)\n    end\n    return odd * even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5uf_2pv.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpa5uf_2pv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    -- body\n    local\
    \ res = 1\n    while n > 0 do\n        local _, r = math.modf(n / 10)\n      \
    \  local d = r * 10\n        if d % 2 == 1 then\n            res = res * d\n \
    \       end\n        n = r\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_ai14uv.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmps_ai14uv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local i, result = 0,\
    \ 1\n  for d in tostring(n):gmatch(\"%d\") do\n    i = tonumber(d)\n    if i %\
    \ 2 == 1 then\n      result = result * i\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw969cqm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsw969cqm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local a = n % 10\n\
    \  local b = n % 100 / 10\n  local c = n % 1000 / 100\n  local d = n % 10000 /\
    \ 1000\n  local e = n % 100000 / 10000\n  local f = n % 1000000 / 100000\n  local\
    \ g = n % 10000000 / 1000000\n  local h = n % 100000000 / 10000000\n  local i\
    \ = n % 1000000000 / 100000000\n  local j = n % 10000000000 / 1000000000\n  local\
    \ k = n % 100000000000 / 10000000000\n  local l = n % 1000000000000 / 100000000000\n\
    \  local m = n % 10000000000000 / 1000000000000\n  local o = n % 100000000000000\
    \ / 10000000000000\n  local p = n % 1000000000000000 / 100000000000000\n  local\
    \ q = n % 10000000000000000 / 1000000000000000\n  local r = n % 100000000000000000\
    \ / 10000000000000000\n  local s = n % 1000000000000000000 / 100000000000000000\n\
    \  local t = n % 10000000000000000000 / 1000000000000000000\n  local u = n % 100000000000000000000\
    \ / 10000000000000000000\n  local v = n % 1000000000000000000000 / 100000000000000000000\n\
    \  return n - a + a % 2 * (n - a) - b + b % 2 * (n - b) - c + c % 2 * (n - c)\
    \ - d + d % 2 * (n - d) - e + e % 2 * (n - e) - f + f % 2 * (n - f) - g + g %\
    \ 2 * (n - g) - h + h % 2 * (n - h) - i + i % 2 * (n - i) - j + j % 2 * (n - j)\
    \ - k + k % 2 * (n - k) - l + l % 2 * (n - l) - m + m % 2 * (n - m) - o + o %\
    \ 2 * (n - o) - p + p % 2 * (n - p) - q + q % 2 * (n - q) - r + r % 2 * (n - r)\
    \ - s + s % 2 * (n - s) - t + t % 2 * (n - t) - u + u % 2 * (n - u) - v + v %\
    \ 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph8vygwsa.lua:30: 'end' expected (to close 'function' at line\
    \ 7) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   for i = 1, #tostring(n) do\n        local digit = tonumber(string.sub(tostring(n),\
    \ i, i))\n        if digit % 2 ~= 0 then\n            res = res * digit\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6obqvjrx.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6obqvjrx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tn=string.format(\"\
    %d\",n)\n\tlocal product=1\n\tfor c in n:gmatch(\"%d\") do\n\t\tlocal d=tonumber(c)\n\
    \t\tif d%2==1 then\n\t\t\tproduct=product*d\n\t\tend\n\tend\n\treturn product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m4o7z50.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6m4o7z50.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  if\
    \ n == 0 then\n    return 0\n  end\n  for i = 0, math.floor(math.log10(n)) do\n\
    \    local tmp = n % 10\n    if tmp % 2 ~= 0 then\n      sum = sum * tmp\n   \
    \ end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrwj9woe.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplrwj9woe.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    if n < 10 then\n\
    \        return n % 2 == 1 and n or 0\n    end\n    return n % 10 % 2 == 1 and\
    \ n % 10 * digits(math.floor(n / 10)) or digits(math.floor(n / 10))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    return (n < 10 and\
    \ n % 2 ~= 0) and n or (n % 10 % 2 ~= 0 and digits(n / 10) * (n % 10) or digits(n\
    \ / 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9igl7dk8.lua:15:\
    \ expected: 5, actual: 5.4\nstack traceback:\n\t/tmp/tmp9igl7dk8.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    n = math.abs(n)\n\
    \    local prod = 1\n    while n > 0 do\n        local d = n % 10\n        if\
    \ d % 2 == 1 then\n            prod = prod * d\n        end\n        n = (n -\
    \ d) / 10\n    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8pae5lg.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpw8pae5lg.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal p = 1\n\tlocal\
    \ n = math.abs(n)\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\
    \t\t\tp = p * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsborv8_0.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsborv8_0.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal result = 1\n\t\
    if n < 0 then n = -n end\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit\
    \ % 2 == 1 then\n\t\t\tresult = result * digit\n\t\tend\n\t\tn = math.floor(n\
    \ / 10)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_d3j8jn.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq_d3j8jn.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local value = 1\n \
    \ if n ~= 0 then\n    if n % 2 == 0 then\n      value = 0\n    else\n      value\
    \ = n % 10\n    end\n    return value * digits(math.floor(n / 10))\n  end\n  return\
    \ value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyteud5d5.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpyteud5d5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    if (n < 0) then return\
    \ 0 end\n    local ret = 1\n    while (n > 0) do\n        local a = n % 10\n \
    \       if (a % 2 == 1) then\n            ret = ret * a\n        end\n       \
    \ n = math.floor(n / 10)\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00cmoe5a.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00cmoe5a.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local m = n % 10\n    if m % 2 == 1 then\n      sum = sum * m\n\
    \    end\n    n = (n - m) / 10\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuql7nlqe.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuql7nlqe.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal ret = 1\n\twhile\
    \ n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tret = ret * d\n\
    \t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkzqspbu.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprkzqspbu.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    if n < 10 then\n\
    \        return n % 2 == 1 and n or 0\n    end\n    local num = n % 10\n    local\
    \ result = num % 2 == 1 and num or 0\n    return result * digits(math.floor(n\
    \ / 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdhmyxkz.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphdhmyxkz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n   if n < 0 then n =\
    \ -n end\n   local prod = 1\n   for i = 1, string.len(tostring(n)) do\n      local\
    \ c = tonumber(string.sub(tostring(n), i, i))\n      if c % 2 == 1 then prod =\
    \ prod * c end\n   end\n   return prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpui4cibt1.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpui4cibt1.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  res = 1\n  while n\
    \ ~= 0 do\n    local d = n % 10\n    if d % 2 ~= 0 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprer4m6ww.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprer4m6ww.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1iohr37k.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmp1iohr37k.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n  \
    \          result = result * d\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzc_m7av.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvzc_m7av.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbl7u35rm.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpbl7u35rm.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local s = tostring(n)\n\
    \    local acc = 1\n    for i = 1, #s do\n        local digit = s:sub(i, i)\n\
    \        if tonumber(digit) % 2 == 1 then\n            acc = acc * tonumber(digit)\n\
    \        end\n    end\n    return acc\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8s_k_k1.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpe8s_k_k1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i in string.gmatch(tostring(n), \"%d\") do\n    i = tonumber(i)\n    if\
    \ i % 2 == 1 then\n      result = result * i\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya4wdt20.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpya4wdt20.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if not n then return\
    \ 0 end\n  local sum = 1\n  for i = 1, #tostring(n) do\n    local x = tonumber(tostring(n):sub(i,\
    \ i))\n    if x % 2 ~= 0 then\n      sum = sum * x\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltbh0js4.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpltbh0js4.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal sum = 1\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphen1chjq.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local prod = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            prod = prod * digit\n        end\n        n = (n - digit) / 10\n\
    \    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp151jhlif.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp151jhlif.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hs7blc6.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5hs7blc6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local lsd = n % 10\n        if lsd % 2 == 1 then\n\
    \            res = res * lsd\n        end\n        n = (n - lsd) / 10\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ne5kuuh.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_ne5kuuh.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local t = {}\n  local\
    \ res = 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n  \
    \    table.insert(t, r)\n    end\n    n = (n - r) / 10\n  end\n  for i = 1, #t\
    \ do\n    res = res * t[i]\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvha55n7u.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvha55n7u.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   local s = tostring(n)\n    for i = 1, #s do\n        local d = tonumber(s:sub(i,\
    \ i))\n        if d % 2 == 1 then\n            res = res * d\n        end\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04loks0q.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp04loks0q.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcuhdcmj.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwcuhdcmj.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmt6vma7.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmppmt6vma7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal product = 1\n\
    \tfor i = 1, #tostring(n) do\n\t\tlocal d = tonumber(tostring(n):sub(i, i))\n\t\
    \tif d % 2 ~= 0 then\n\t\t\tproduct = product * d\n\t\tend\n\tend\n\treturn product\n\
    end\nassert(digits(1)  == 1)\nassert(digits(4)  == 0)\nassert(digits(235) == 15)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpym7tebj0.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpym7tebj0.lua:18: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n   if n==0 then return\
    \ 0 end\n   local d,r = math.floor(n/10), n%10\n   if r%2==0 then return digits(d)\
    \ else return r*digits(d) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nhbm8uw.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp5nhbm8uw.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local t = {}\n  \
    \  while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n    \
    \        table.insert(t, d)\n        end\n        n = math.floor(n / 10)\n   \
    \ end\n    if #t == 0 then\n        return 0\n    end\n    local p = 1\n    for\
    \ i = 1, #t do\n        p = p * t[i]\n    end\n    return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr80b6uz.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjr80b6uz.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n   local odd = 1\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphavh94lh.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then return\
    \ 0 end\n  local digit = n % 10\n  if (digit % 2) == 0 then return digits(n //\
    \ 10) end\n  return digit * digits(n // 10)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_hs81k3.lua:17:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpw_hs81k3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fbknyi6.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_fbknyi6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local modulo = n % 10\n        if modulo % 2 == 1\
    \ then\n            result = result * modulo\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xodchxq.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9xodchxq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2 ==\
    \ 1 then\n      product = product * digit\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8bnya82.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi8bnya82.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local output = 1\n\
    \  local nums = {}\n  for k,v in pairs(n) do\n    table.insert(nums, tonumber(v))\n\
    \  end\n  for i,v in ipairs(nums) do\n    if v % 2 ~= 0 then\n      output = output\
    \ * v\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp99ueuc.lua:10:\
    \ bad argument #1 to 'for iterator' (table expected, got number)\nstack traceback:\n\
    \t/tmp/tmprp99ueuc.lua:10: in local 'candidate'\n\t/tmp/tmprp99ueuc.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local x = tostring(n)\n\
    \  local sum = 1\n  for i = 1,#x do\n    local digit = tonumber(x:sub(i,i))\n\
    \    if digit % 2 == 1 then\n      sum = sum * digit\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bgjee42.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2bgjee42.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local ret = 1\n \
    \   while n > 0 do\n        local last_digit = n % 10\n        if last_digit %\
    \ 2 == 1 then\n            ret = ret * last_digit\n        end\n        n = (n\
    \ - last_digit) / 10\n    end\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_dcqfdt.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6_dcqfdt.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local s = tostring(n)\n\
    \  local p = 1\n  for d in s:gmatch('%d') do\n    d = tonumber(d)\n    if d %\
    \ 2 == 1 then\n      p = p * d\n    end\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdih8hifg.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdih8hifg.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm059vom.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpzm059vom.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal prod = 1\n\t\
    while n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit % 2 == 1 then\n\t\t\tprod\
    \ = prod * digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn prod\n\
    end\nassert(digits(1) == 1)\nassert(digits(4) == 0)\nassert(digits(235) == 15)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpedye7ten.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpedye7ten.lua:19: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local a = n % 10\n        if a % 2 == 1 then\n   \
    \         res = res * a\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sr9uuuf.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5sr9uuuf.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local sum = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            sum = sum * digit\n        end\n        n = (n - digit) / 10\n  \
    \  end\n    return sum\nend\nprint(digits(1))   -- 1\nprint(digits(4))   -- 0\n\
    print(digits(235)) -- 15\nprint(digits(0))   -- 0\nprint(digits(1232))-- 8\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "1\n1\n15.0\n1\n3.0\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpm00zj5wd.lua:33: expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm00zj5wd.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nassert(digits(1) == 1)\nassert(digits(4)\
    \ == 0)\nassert(digits(235) == 15)\nassert(digits(0) == 0)\nassert(digits(8) ==\
    \ 0)\nassert(digits(1111111111) == 1)\nassert(digits(3456789) == 105)\nassert(digits(13579)\
    \ == 135)\nassert(digits(2468642) == 4)\nassert(digits(42424242) == 16)\nassert(digits(2468642)\
    \ == 4)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsa7qco6k.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpsa7qco6k.lua:19: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = (n - digit) / 10\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqkx8jl2.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphqkx8jl2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = n % 10\n    if digit % 2 ~= 0\
    \ then\n      result = result * digit\n    end\n    n = (n - digit) / 10\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_v0e2k6.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq_v0e2k6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tif n < 10 then\n\t\t\
    return n % 2 == 1 and n or 0\n\tend\n\treturn n % 10 % 2 == 1 and n % 10 * digits(math.floor(n\
    \ / 10)) or digits(math.floor(n / 10))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn14lgt21.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpn14lgt21.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 10 then\n  \
    \  return n % 2 ~= 0 and n or 0\n  end\n  return (n % 10 % 2 ~= 0 and n % 10 or\
    \ 1) * digits(math.floor(n / 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    n = math.abs(n)\n\
    \    local res = 1\n    while n > 0 do\n        local d = n % 10\n        if d\
    \ % 2 == 1 then\n            res = res * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpary_lpd8.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpary_lpd8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_wzfi3.lua:15:\
    \ expected: 5, actual: 54\nstack traceback:\n\t/tmp/tmp6b_wzfi3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  for\
    \ d in tostring(n):gmatch('%d') do\n    local d = tonumber(d)\n    if (d % 2 ==\
    \ 1) then\n      r = r * d\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qybueb9.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7qybueb9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local sum = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            sum = sum * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog3e7v_g.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpog3e7v_g.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local sum = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            sum = sum * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d7bs6i6.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9d7bs6i6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local p = 1\n   \
    \ for i = 1, #tostring(n) do\n        local s = tonumber(tostring(n):sub(i, i))\n\
    \        if s%2 == 1 then\n            p = p * s\n        end\n    end\n    return\
    \ p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9cutnuw.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj9cutnuw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nassert(digits(1) == 1)\nassert(digits(4) == 0)\nassert(digits(235)\
    \ == 15)\nassert(digits(345) == 5)\nassert(digits(222) == 0)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8wjn_4dp.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp8wjn_4dp.lua:19: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local p = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      p = p * d\n  \
    \  end\n    n = (n - d) / 10\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0vkbz4_.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy0vkbz4_.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local p = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       p = p * d\n        end\n        n = (n - d) / 10\n    end\n    return\
    \ p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmnh57ou.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptmnh57ou.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local sum = 1\n \
    \   for i = 1, #tostring(n) do\n        if (n % 10) % 2 ~= 0 then\n          \
    \  sum = sum * (n % 10)\n        end\n        n = n / 10\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9mj5rqn.lua:22:\
    \ expected: 5, actual: 5.4\nstack traceback:\n\t/tmp/tmpj9mj5rqn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    n = n .. \"\"\n \
    \   local t = {}\n    for i = 1, #n do\n        t[i] = n:sub(i, i)\n    end\n\
    \    local product = 1\n    for i = 1, #t do\n        if t[i] % 2 ~= 0 then\n\
    \            product = product * t[i]\n        end\n    end\n    return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9brdh8t7.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9brdh8t7.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k7em34y.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5k7em34y.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then return\
    \ 0 end\n  local m = n % 10\n  if m % 2 == 1 then\n    return m * digits(math.floor(n\
    \ / 10))\n  else\n    return digits(math.floor(n / 10))\n  end\nend\nprint(digits(235))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca3uaqj8.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpca3uaqj8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- Your code here\n\
    \  local sum = 1\n  for i = 1, #tostring(n) do\n    if tostring(n):sub(i,i) %\
    \ 2 ~= 0 then\n      sum = sum * tostring(n):sub(i,i)\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph3zmaqj.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpph3zmaqj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n\tlocal t = {}\n\twhile\
    \ n ~= 0 do\n\t\tt[#t+1] = n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\tlocal\
    \ prod = 1\n\tfor i = 1, #t do\n\t\tif t[i] % 2 == 1 then\n\t\t\tprod = prod *\
    \ t[i]\n\t\tend\n\tend\n\treturn prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lsfnoo9.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6lsfnoo9.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local r = 1\n   \
    \ while n > 0 do\n        if (n % 2) ~= 0 then\n            r = r * (n % 10)\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknmbz43h.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpknmbz43h.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n  \
    \          result = result * d\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "1\n1\n15\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi7momk9.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqi7momk9.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local mult = 1\n\
    \    local last_digit\n    for i = 1, #n do\n        last_digit = tonumber(n:sub(i,\
    \ i))\n        if last_digit % 2 ~= 0 then\n            mult = mult * last_digit\n\
    \        end\n    end\n    return mult\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxm3qu5t2.lua:10:\
    \ attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpxm3qu5t2.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpxm3qu5t2.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmogwpb_z.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmogwpb_z.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if digit % 2 ~= 0 then\n\
    \            res = res * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd8esdox.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptd8esdox.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  -- your code goes here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu82hn_j2.lua:14:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpu82hn_j2.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n ~= 0 do\n    local d = n % 10\n    if d % 2 ~= 0 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpieftduu7.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpieftduu7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  for\
    \ c in tostring(n):gmatch(\"%d\") do\n    c = tonumber(c)\n    if c % 2 == 1 then\n\
    \      res = res * c\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zf2v_t9.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2zf2v_t9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local r = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       r = r * d\n        end\n        n = (n - d) / 10\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoqt10gi.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuoqt10gi.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local p = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       p = p * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h907sqo.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9h907sqo.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for _,i in ipairs(split(tostring(n))) do\n    if tonumber(i) % 2 ~= 0 then\n\
    \      product = product * tonumber(i)\n    end\n  end\n  return product\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1r8fmbio.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp1r8fmbio.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1r8fmbio.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local accum = 1\n\
    \    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n  \
    \          accum = accum * d\n        end\n        n = math.floor(n / 10)\n  \
    \  end\n    return accum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjtu88u9.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgjtu88u9.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = (n - digit) / 10\n  end\n  return\
    \ product\nend\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\nprint(digits(236))\n\
    print(digits(23523))\nprint(digits(235232646))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "1\n1\n15.0\n3.0\n45.0\n45.0\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpa_uwwnyd.lua:34: expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa_uwwnyd.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t9_n99l.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6t9_n99l.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for d in string.gmatch(tostring(n), '%d') do\n    d = tonumber(d)\n    if d\
    \ % 2 == 1 then\n      product = product * d\n    end\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ngkjkqr.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9ngkjkqr.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local last = n % 10\n    if last % 2 ~= 0 then\n      product\
    \ = product * last\n    end\n    n = (n - last) / 10\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx1z66t1.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgx1z66t1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   for d in tostring(n):gmatch(\"%d\") do\n        local i = tonumber(d)\n  \
    \      if (i % 2 == 1) then\n            res = res * i\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uurqnvs.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3uurqnvs.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local ret = 1\n \
    \   for d in tostring(n):gmatch(\"%d\") do\n        local d = tonumber(d)\n  \
    \      if d % 2 == 1 then\n            ret = ret * d\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4ey4yli.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa4ey4yli.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  assert(n>=0, \"n must\
    \ be positive\")\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0__wcrk.lua:15:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpt0__wcrk.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local odd = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         odd = odd * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_ykwybj.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpo_ykwybj.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
