name: HumanEval_10_make_palindrome
language: lua
results:
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest postfix\
    \ of a string that is a palindrome.\n    local function find_suffix(string)\n\
    \        local longest = ''\n        for suffix_length = 1, string:len() do\n\
    \            local suffix = string:sub(string:len() - suffix_length + 1)\n   \
    \         if is_palindrome(suffix) then\n                longest = suffix\n  \
    \          end\n        end\n        return longest\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpndcpfjsc.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local len = #string\n  local\
    \ suffix = string:sub(1, len)\n  local i = 1\n  local j = len\n  local ok, patch_idx\n\
    \  while i < j do\n    ok, patch_idx = true, 0\n    while i < j and ok do\n  \
    \    if string:sub(i, i) ~= string:sub(j, j) then\n        ok = false\n      end\n\
    \      i = i + 1\n      j = j - 1\n      patch_idx = patch_idx + 1\n    end\n\
    \    if ok then\n      return string .. reverse(string:sub(1, patch_idx - 1))\n\
    \    end\n    if i < j then\n      suffix = string:sub(1, len - patch_idx)\n \
    \     j = len - patch_idx\n    end\n  end\n  return string .. reverse(suffix)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy11el603.lua:35:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpy11el603.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmpy11el603.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reverse_string =\
    \ reverse(string)\n    local index = string:len() - find_longest_suffix_palindrome(string)\n\
    \    return string .. reverse_string:sub(index)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxo0ijpyj.lua:12:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpxo0ijpyj.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxo0ijpyj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local function is_palindrome(substring)\n\
    \        local i = 1\n        local j = #substring\n        while i < j do\n \
    \           if substring:sub(i, i) ~= substring:sub(j, j) then\n             \
    \   return false\n            end\n            i = i + 1\n            j = j -\
    \ 1\n        end\n        return true\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpztcpvtxj.lua:35: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local function reverse(s)\n\
    \        return s:reverse()\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1q72f9ju.lua:26: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local length = string:len()\n\
    \    if length == 0 then\n        return string\n    end\n    local buffer = {}\n\
    \    local start = math.ceil(length / 2)\n    local end_ = start\n    if length\
    \ % 2 == 0 then\n        end_ = start - 1\n    end\n    while start > 0 and end_\
    \ < length do\n        if string:sub(start, start) == string:sub(end_, end_) then\n\
    \            start = start - 1\n            end_ = end_ + 1\n        else\n  \
    \          break\n        end\n    end\n    local i = length\n    while i > start\
    \ do\n        buffer[#buffer + 1] = string:sub(i, i)\n        i = i - 1\n    end\n\
    \    return string .. table.concat(buffer)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h29seaa.lua:43:\
    \ expected: \"xyzyx\"\nactual: \"xyzzy\"\nstack traceback:\n\t/tmp/tmp6h29seaa.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome_end\
    \ = find_longest_palindrome_end(string)\n  local prefix = string:sub(1, #string\
    \ - longest_palindrome_end)\n  return string .. string:reverse():sub(1, #prefix)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimw7rbsy.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome_end')\nstack traceback:\n\
    \t/tmp/tmpimw7rbsy.lua:12: in local 'candidate'\n\t/tmp/tmpimw7rbsy.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = reverse(string:sub(1, #string - #suffix))\n    return string\
    \ .. prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl70sd4ch.lua:12:\
    \ attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmpl70sd4ch.lua:12: in local 'candidate'\n\t/tmp/tmpl70sd4ch.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = longest_palindromic_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(postfix))\n\
    \    return string .. string.reverse(prefix)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx55lodm4.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\
    \t/tmp/tmpx55lodm4.lua:12: in local 'candidate'\n\t/tmp/tmpx55lodm4.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest palindromic\
    \ suffix.\n    local i = #string + 1\n    while not is_palindrome(string:sub(1,\
    \ i - 1)) do\n        i = i - 1\n    end\n    -- Append the reverse of the prefix\
    \ that comes before the palindromic suffix.\n    return string .. string:sub(1,\
    \ #string - i):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyqkgwse.lua:14:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpgyqkgwse.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpgyqkgwse.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local len = string:len()\n\
    \  if len == 0 then\n    return ''\n  end\n  local o, err = is_palindrome(string)\n\
    \  if o then\n    return string\n  end\n  local k = string:match('^(.*)()' ..\
    \ string:reverse() .. '$')\n  if k then\n    return string .. string:sub(1, #k):reverse()\n\
    \  end\n  local longest_palindrome_suffix = string:match('^.*()' .. string:reverse()\
    \ .. '$')\n  if not longest_palindrome_suffix then\n    error('Cannot find any\
    \ palindrome in the string')\n  end\n  return string .. string:sub(1, len - longest_palindrome_suffix\
    \ + 1):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpufsr9wi4.lua:16:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpufsr9wi4.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpufsr9wi4.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local length = #string\n\
    \    if length <= 1 then\n        return string\n    end\n    local suffix = suffix_table(string)\n\
    \    local index = length - suffix[length]\n    return string .. string:sub(1,\
    \ index):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ng7gw6j.lua:16:\
    \ attempt to call a nil value (global 'suffix_table')\nstack traceback:\n\t/tmp/tmp3ng7gw6j.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp3ng7gw6j.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the last index\
    \ of string suffix equal to its prefix.\n    local function last_prefix_idx(s)\n\
    \        local i = 1\n        local j = #s\n        while i < j do\n         \
    \   if s:sub(i, i) ~= s:sub(j, j) then\n                return -1\n          \
    \  end\n            i = i + 1\n            j = j - 1\n        end\n        return\
    \ i - 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3doxt901.lua:36: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local n = #string\n  local\
    \ longest_palindrome_len, longest_palindrome_start\n  for i = 1, n do\n    local\
    \ l = math.min(i - 1, n - i)\n    local prefix_len = 0\n    for j = 1, l do\n\
    \      if string:sub(i - j, i - j) == string:sub(i + j, i + j) then\n        prefix_len\
    \ = prefix_len + 1\n      else\n        break\n      end\n    end\n    if prefix_len\
    \ > longest_palindrome_len then\n      longest_palindrome_len = prefix_len\n \
    \     longest_palindrome_start = i - prefix_len\n    end\n  end\n  local prefix\
    \ = string:sub(1, longest_palindrome_start - 1)\n  return string .. string:reverse():sub(1,\
    \ n - longest_palindrome_start + 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4bvvv_a.lua:29:\
    \ attempt to perform arithmetic on a nil value (local 'longest_palindrome_start')\n\
    stack traceback:\n\t/tmp/tmpk4bvvv_a.lua:29: in local 'candidate'\n\t/tmp/tmpk4bvvv_a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local result\n  if not string\
    \ then\n    result = ''\n  else\n    local suffix_length = find_longest_palindromic_suffix(string)\n\
    \    local prefix = string:sub(1, #string - suffix_length)\n    result = string\
    \ .. prefix:reverse()\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6t_nqa_.lua:16:\
    \ attempt to call a nil value (global 'find_longest_palindromic_suffix')\nstack\
    \ traceback:\n\t/tmp/tmpy6t_nqa_.lua:16: in local 'candidate'\n\t/tmp/tmpy6t_nqa_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if #string <= 1 then\n\
    \        return string\n    end\n    local longestsuffix = string\n    while not\
    \ is_palindrome(longestsuffix) do\n        longestsuffix = longestsuffix:sub(2)\n\
    \    end\n    local prefix = string:sub(1, #string - #longestsuffix)\n    return\
    \ prefix .. string:reverse() .. longestsuffix\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnomsy9l3.lua:16:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpnomsy9l3.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpnomsy9l3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local n = string:len()\n\
    \  if n == 0 then\n    return string\n  end\n  for i = n - 1, -1, -1 do\n    if\
    \ string:sub(i + 1) == reverse(string:sub(1, i)) then\n      return string ..\
    \ reverse(string:sub(1, i))\n    end\n  end\n  return string .. reverse(string:sub(1,\
    \ i))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphnk8ntcg.lua:17:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmphnk8ntcg.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmphnk8ntcg.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix_length = longest_palindromic_suffix(string)\n\
    \  local prefix = string:sub(1, string:len() - postfix_length)\n  return string\
    \ .. string:reverse():sub(1, prefix:len())\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppxxmkdl3.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\
    \t/tmp/tmppxxmkdl3.lua:12: in local 'candidate'\n\t/tmp/tmppxxmkdl3.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = longest_palindromic_postfix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(postfix))\n\
    \    local reverse_prefix = string.reverse(prefix)\n    return prefix .. reverse_prefix\
    \ .. postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeui2ea1x.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_postfix')\nstack traceback:\n\
    \t/tmp/tmpeui2ea1x.lua:12: in local 'candidate'\n\t/tmp/tmpeui2ea1x.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local len = string:len()\n\
    \    local loop_max = math.floor(len / 2)\n    local i = 1\n    local is_palindrome\
    \ = true\n    while i <= loop_max do\n        if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n            is_palindrome = false\n            break\n\
    \        end\n        i = i + 1\n    end\n    if is_palindrome then\n        return\
    \ string\n    end\n    local prefix = string:sub(1, i - 1)\n    return string\
    \ .. prefix:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5r6kosf.lua:35:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpm5r6kosf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local length = string:len()\n\
    \    local match, rev = 0, \"\"\n    while match < length do\n        rev = string:sub(match\
    \ + 1, length) .. rev\n        if string:find(rev, 1, true) then\n           \
    \ break\n        end\n        match = match + 1\n    end\n    return string ..\
    \ rev\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g0hkrms.lua:28:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp7g0hkrms.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local pstring = find_longest_postfix_palindrome(string)\n\
    \    local prefix = string:sub(1, #string - #pstring)\n    return pstring .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpummg7g9x.lua:12:\
    \ attempt to call a nil value (global 'find_longest_postfix_palindrome')\nstack\
    \ traceback:\n\t/tmp/tmpummg7g9x.lua:12: in local 'candidate'\n\t/tmp/tmpummg7g9x.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = {}\n\
    \  local rev_palindrome = {}\n  local palindrome_chars = 0\n  local rev_palindrome_chars\
    \ = 0\n  local rev_string = reverse(string)\n  local string_length = #string\n\
    \  local rev_string_length = #rev_string\n  local first_index = 1\n  local last_index\
    \ = string_length\n  local i, j\n  if string_length > 0 then\n    for i = 1, string_length\
    \ do\n      for j = 1, i do\n        if string:sub(i - j + 1, i) == rev_string:sub(rev_string_length\
    \ - i + j, rev_string_length - i + 1) then\n          if j > palindrome_chars\
    \ then\n            palindrome_chars = j\n            first_index = i - j + 1\n\
    \            last_index = i\n          end\n        else\n          break\n  \
    \      end\n      end\n    end\n    for i = string_length, 1, -1 do\n      for\
    \ j = 1, string_length - i + 1 do\n        if string:sub(i, i + j - 1) == rev_string:sub(rev_string_length\
    \ - i - j + 2, rev_string_length - i + 1) then\n          if j > rev_palindrome_chars\
    \ then\n            rev_palindrome_chars = j\n            first_index = i\n  \
    \          last_index = i + j - 1\n          end\n        else\n          break\n\
    \        end\n      end\n    end\n    if palindrome_chars > rev_palindrome_chars\
    \ then\n      for i = first_index, last_index do\n        table.insert(palindrome,\
    \ string:sub(i, i))\n      end\n      for i = 1, string_length - last_index do\n\
    \        table.insert(rev_palindrome, string:sub(i, i))\n      end\n    else\n\
    \      for i = first_index, last_index do\n        table.insert(rev_palindrome,\
    \ string:sub(i, i))\n      end\n      for i = string_length, last_index + 1, -1\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv6k93fqh.lua:61: 'do' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local rstring = string:reverse()\n\
    \  for i = #string, 1, -1 do\n    if string:sub(1, i) == rstring:sub(1, i) then\n\
    \      return string .. rstring:sub(i + 1)\n    end\n  end\n  return string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gdducfj.lua:26:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp1gdducfj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- 1. Find the largest palindromic\
    \ suffix.\n  local suffix = string\n  local half, reverse = '', ''\n  local palindrome\
    \ = false\n  local n = #string\n  for i = n, 1, -1 do\n    -- Try to find the\
    \ longest palindromic suffix.\n    half = string:sub(i, n)\n    reverse = half:reverse()\n\
    \    if half == reverse then\n      palindrome = true\n      break\n    end\n\
    \  end\n  -- 2. Return string, or append the reverse of prefix to the end of the\
    \ string.\n  if palindrome then\n    return string\n  else\n    local prefix =\
    \ string:sub(1, n - #half)\n    return string .. prefix:reverse()\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_qg_k2o.lua:40:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpo_qg_k2o.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = longest_palindromic_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(postfix))\n\
    \    return string.sub(string, 1, string.len(string) - string.len(postfix)) ..\
    \ string.reverse(prefix)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ev9xznv.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\
    \t/tmp/tmp1ev9xznv.lua:12: in local 'candidate'\n\t/tmp/tmp1ev9xznv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest postfix\
    \ of the string that is a palindrome.\n    local longest_postfix_palindrome_end\
    \ = 0\n    local longest_postfix_palindrome_len = 0\n    for palindrome_len=1,string:len()\
    \ do\n        local postfix_len = string:len() - palindrome_len + 1\n        local\
    \ prefix_len = palindrome_len - 1\n        local postfix = string:sub(postfix_len)\n\
    \        local prefix = string:sub(1, prefix_len)\n        if postfix == string.reverse(prefix)\
    \ then\n            longest_postfix_palindrome_end = postfix_len\n           \
    \ longest_postfix_palindrome_len = palindrome_len\n        end\n    end\n    --\
    \ Add reversed prefix to the end of the string.\n    local prefix_reverse = string.reverse(string:sub(1,\
    \ string:len() - longest_postfix_palindrome_len))\n    local palindrome = string\
    \ .. prefix_reverse\n    return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp_ktxrg.lua:35:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpxp_ktxrg.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome\
    \ = find_longest_palindrome(string)\n  if longest_palindrome == string then\n\
    \    return string\n  end\n  local prefix = string:sub(1, string:len() - longest_palindrome:len())\n\
    \  return prefix .. reverse(prefix) .. longest_palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1gl55yod.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\
    \t/tmp/tmp1gl55yod.lua:12: in local 'candidate'\n\t/tmp/tmp1gl55yod.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- The longest postfix that\
    \ is a palindrome\n  local longest_prefix_length = longest_palindromic_prefix(string)\n\
    \  -- Compute the length of the prefix to reverse and append.\n  local prefix_length\
    \ = #string - longest_prefix_length\n  local prefix = string:sub(1, prefix_length)\n\
    \  local reversed_prefix = string_reverse(prefix)\n  return string .. reversed_prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphz12ektz.lua:13:\
    \ attempt to call a nil value (global 'longest_palindromic_prefix')\nstack traceback:\n\
    \t/tmp/tmphz12ektz.lua:13: in local 'candidate'\n\t/tmp/tmphz12ektz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local res = longest_postfix_palindrome(string)\n\
    \    local res_len = #res\n    for i = 1, #string - res_len do\n        res =\
    \ res .. string:sub(i, i)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5s3nmkh.lua:12:\
    \ attempt to call a nil value (global 'longest_postfix_palindrome')\nstack traceback:\n\
    \t/tmp/tmpc5s3nmkh.lua:12: in local 'candidate'\n\t/tmp/tmpc5s3nmkh.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  if is_palindrome(string)\
    \ then\n    return string\n  end\n  -- Find the longest suffix that is a palindrome.\n\
    \  local suffix_palindrome = longest_palindrome(string)\n  -- Prefix that comes\
    \ before the palindromic suffix.\n  local prefix = string:sub(1, string:len()\
    \ - suffix_palindrome:len())\n  -- Reverse prefix.\n  local prefix_reversed =\
    \ prefix:reverse()\n  -- return the string with reversed prefix appended.\n  return\
    \ string .. prefix_reversed\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqn0lpuq.lua:12:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpcqn0lpuq.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpcqn0lpuq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix_len = get_palindrome_postfix_len(string)\n\
    \  local prefix = string:sub(1, #string - postfix_len)\n  return string .. reverse(prefix)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4rnfi89.lua:12:\
    \ attempt to call a nil value (global 'get_palindrome_postfix_len')\nstack traceback:\n\
    \t/tmp/tmps4rnfi89.lua:12: in local 'candidate'\n\t/tmp/tmps4rnfi89.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = ''\n \
    \   local length = string.len(string)\n    for i = length, 1, -1 do\n        if\
    \ is_palindrome(string .. postfix) then\n            local prefix = string.sub(string,\
    \ 1, i - 1)\n            return string .. string.reverse(prefix)\n        end\n\
    \        postfix = string.sub(string, i, i) .. postfix\n    end\n    return string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjodicbk.lua:15:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmppjodicbk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppjodicbk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = find_max_postfix(string)\n\
    \    local prefix = string:sub(1, string:len() - postfix:len())\n    return string\
    \ .. prefix:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuvo_krf1.lua:12:\
    \ attempt to call a nil value (global 'find_max_postfix')\nstack traceback:\n\t\
    /tmp/tmpuvo_krf1.lua:12: in local 'candidate'\n\t/tmp/tmpuvo_krf1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local result\n    local\
    \ reverse_suffix = get_reverse_suffix(string)\n    if reverse_suffix then\n  \
    \      result = string .. reverse_suffix\n    else\n        result = string ..\
    \ reverse(string)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7pgjicls.lua:13:\
    \ attempt to call a nil value (global 'get_reverse_suffix')\nstack traceback:\n\
    \t/tmp/tmp7pgjicls.lua:13: in local 'candidate'\n\t/tmp/tmp7pgjicls.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- We will store the length\
    \ of the longest palindromic postfix of the supplied string, along with the\n\
    \  -- index of the substring that has that palindromic postfix.\n  local postfix_length\
    \ = 1\n  local postfix_index = #string\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpko9tupey.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local rev_string = string:reverse()\n\
    \    local lps = find_lps(string .. '#' .. rev_string)\n    local prefix = string:sub(1,\
    \ #string - lps)\n    return string .. prefix:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnyw9dxhf.lua:13:\
    \ attempt to call a nil value (global 'find_lps')\nstack traceback:\n\t/tmp/tmpnyw9dxhf.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpnyw9dxhf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reverse = string.reverse(string)\n\
    \  local result = string .. reverse\n  local pref = longest_prefix(string, reverse)\n\
    \  local pref_len = string.len(pref)\n  local string_len = string.len(string)\n\
    \  if pref_len < string_len then\n    result = string .. string.sub(reverse, pref_len+1)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe16ot4oo.lua:14:\
    \ attempt to call a nil value (global 'longest_prefix')\nstack traceback:\n\t\
    /tmp/tmpe16ot4oo.lua:14: in local 'candidate'\n\t/tmp/tmpe16ot4oo.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local len = #string\n\
    \    local ls, le = 0, len\n    for i = 1, len do\n        if is_palindrome(string,\
    \ 1, i) then\n            ls, le = i, len\n        end\n    end\n    local tail\
    \ = string:sub(ls, le)\n    local i = le - 1\n    while i >= 1 do\n        tail\
    \ = tail .. string:sub(i, i)\n        i = i - 1\n    end\n    return tail\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiviquxgb.lua:15:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpiviquxgb.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpiviquxgb.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local s = string\n  local\
    \ rev = reverse(s)\n  local l, r = 0, #s\n  while r > 0 do\n    local prefix =\
    \ s:sub(1, r)\n    if rev:find(prefix, 1, true) then\n      l = r\n      break\n\
    \    end\n    r = r - 1\n  end\n  return s .. rev:sub(l + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6ge5e3l.lua:13:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpp6ge5e3l.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpp6ge5e3l.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = find_palindrome_postfix(string)\n\
    \  return string .. string.reverse(string.sub(string, 1, #string - #postfix))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5vbqc4r_.lua:12:\
    \ attempt to call a nil value (global 'find_palindrome_postfix')\nstack traceback:\n\
    \t/tmp/tmp5vbqc4r_.lua:12: in local 'candidate'\n\t/tmp/tmp5vbqc4r_.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return prefix .. longest_palindrome_suffix\
    \ .. string:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprfgqk4qv.lua:12:\
    \ attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmprfgqk4qv.lua:12: in local 'candidate'\n\t/tmp/tmprfgqk4qv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if #string == 0 then\n\
    \        return string\n    end\n    local suffix = find_longest_palindromic_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptc2q4633.lua:15:\
    \ attempt to call a nil value (global 'find_longest_palindromic_suffix')\nstack\
    \ traceback:\n\t/tmp/tmptc2q4633.lua:15: in local 'candidate'\n\t/tmp/tmptc2q4633.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local r_end, m, r_start\
    \ = find_longest_palindrome(string)\n    return string:sub(1, r_start) .. string:sub(r_end\
    \ + 1, #string):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprx0wbj9n.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\
    \t/tmp/tmprx0wbj9n.lua:12: in local 'candidate'\n\t/tmp/tmprx0wbj9n.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local length = #string\n\
    \    local a,b = length,length\n    while a > 0 do\n        while string[a] ==\
    \ string[b] do\n            a = a - 1\n            b = b + 1\n        end\n  \
    \      if a == 0 then break end\n        a = a + 1\n        b = b - 1\n    end\n\
    \    return string .. string:sub(length, a-1):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local longest_palindrome\
    \ = longest_palindrome_suffix(string)\n    return string .. string:sub(1, string:len()\
    \ - longest_palindrome:len()):reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3br2105q.lua:12:\
    \ attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmp3br2105q.lua:12: in local 'candidate'\n\t/tmp/tmp3br2105q.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_suffix = longest_palindromic_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #longest_suffix)\n  return string ..\
    \ reverse(prefix)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4co__vza.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\
    \t/tmp/tmp4co__vza.lua:12: in local 'candidate'\n\t/tmp/tmp4co__vza.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local function is_palindrome(string)\n\
    \        local len = #string\n        local half_len = math.floor(len / 2)\n \
    \       for i = 1, half_len do\n            if string:sub(i, i) ~= string:sub(len\
    \ + 1 - i, len + 1 - i) then\n                return false\n            end\n\
    \        end\n        return true\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2n2ysov2.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome_end = longest_palindrome_postfix(string)\n\
    \  return string .. string:sub(1, #string - palindrome_end):reverse()\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp649r23wg.lua:12:\
    \ attempt to call a nil value (global 'longest_palindrome_postfix')\nstack traceback:\n\
    \t/tmp/tmp649r23wg.lua:12: in local 'candidate'\n\t/tmp/tmp649r23wg.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- get the longest postfix\
    \ that is a palindrome\n    local long_prefix = longest_prefix(string)\n    --\
    \ reverse the rest of the string\n    local rest = reverse(string:sub(1, #string\
    \ - #long_prefix))\n    -- append\n    return string .. rest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpte474h5r.lua:13:\
    \ attempt to call a nil value (global 'longest_prefix')\nstack traceback:\n\t\
    /tmp/tmpte474h5r.lua:13: in local 'candidate'\n\t/tmp/tmpte474h5r.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local x = make_suffix_array(string\
    \ .. string[string.reverse()])\n    local length = x[#x]\n    local y = make_suffix_array(string)\n\
    \    local z = y[#y]\n    if z == length then\n        return string\n    else\n\
    \        return string .. string.sub(string, 1, length - z)\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi55k3fzc.lua:12:\
    \ bad argument #1 to 'reverse' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpi55k3fzc.lua:12: in local 'candidate'\n\t/tmp/tmpi55k3fzc.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local longest_suffix =\
    \ find_longest_palindromic_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_suffix)\n    local rev_prefix = prefix:reverse()\n    return prefix\
    \ .. rev_prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfe5ivroo.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindromic_suffix')\nstack\
    \ traceback:\n\t/tmp/tmpfe5ivroo.lua:12: in local 'candidate'\n\t/tmp/tmpfe5ivroo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- generate reverse of\
    \ a string\n    local reversed = string:reverse()\n    -- find the shortest postfix\
    \ that is a palindrome\n    local idx = reversed:find(string, 1, true)\n    local\
    \ end_string\n    if idx then\n        -- found a palindromic postfix\n      \
    \  -- append the reverse of prefix to the end of the string\n        end_string\
    \ = reversed:sub(1, idx - 1)\n    else\n        -- no palindromic postfix was\
    \ found\n        -- append the whole reversed string to the end of the supplied\
    \ string\n        end_string = reversed\n    end\n    return string .. end_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0j4jx1q.lua:34:\
    \ expected: \"xyzyx\"\nactual: \"xyzzyx\"\nstack traceback:\n\t/tmp/tmpb0j4jx1q.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome_len\
    \ = 0\n  for i = 1, string.len(string) do\n    if string:sub(1, i) == string:sub(i\
    \ + 1, -1):reverse() then\n      longest_palindrome_len = i\n    end\n  end\n\
    \  return string .. string:sub(1, -(longest_palindrome_len + 1)):reverse()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ui3mm85.lua:25:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp3ui3mm85.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = longest_postfix_palindrome(string)\n\
    \    local prefix = string:sub(1, string:len() - suffix:len())\n    return string\
    \ .. prefix:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvwgbct9o.lua:12:\
    \ attempt to call a nil value (global 'longest_postfix_palindrome')\nstack traceback:\n\
    \t/tmp/tmpvwgbct9o.lua:12: in local 'candidate'\n\t/tmp/tmpvwgbct9o.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find first mismatching\
    \ characters from the begin and the end of the string.\n    local limit = math.floor(#string\
    \ / 2)\n    local begin, end_ = 1, #string\n    while begin <= limit and string:sub(begin,\
    \ begin) == string:sub(end_, end_) do\n        begin = begin + 1\n        end_\
    \ = end_ - 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7mwbnwhg.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if #string == 0 then\n\
    \        return ''\n    end\n    if #string == 1 then\n        return string ..\
    \ string\n    end\n    local suffix = get_palindromic_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #suffix)\n    local palindrome = string ..\
    \ prefix:reverse()\n    return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdet_m65q.lua:28:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpdet_m65q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome\
    \ = find_longest_palindrome(string)\n  local string_length = string.len(string)\n\
    \  local palindrome_length = string.len(longest_palindrome)\n  local prefix =\
    \ string.sub(string, 1, string_length - palindrome_length)\n  local reversed_prefix\
    \ = string.reverse(prefix)\n  return string .. reversed_prefix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2ypn6e9.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\
    \t/tmp/tmpx2ypn6e9.lua:12: in local 'candidate'\n\t/tmp/tmpx2ypn6e9.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local string_len = string.len(string)\n\
    \    local postfix_len = longest_palindromic_substring(string)\n    local prefix\
    \ = string.sub(string, 1, string_len - postfix_len)\n    local result = string\
    \ .. string.reverse(prefix)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc7rx4q9i.lua:13:\
    \ attempt to call a nil value (global 'longest_palindromic_substring')\nstack\
    \ traceback:\n\t/tmp/tmpc7rx4q9i.lua:13: in local 'candidate'\n\t/tmp/tmpc7rx4q9i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local prefix_length = is_palindrome(string)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0exrxody.lua:24: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Algorithm stops at the\
    \ first palindrome found and does not ensure the shortest palindrome.\n  for i\
    \ = 0, #string - 1 do\n    if is_palindrome(string:sub(1, i)) then\n      return\
    \ string .. string:sub(1, i):reverse()\n    end\n  end\n  return string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9x6navee.lua:14:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp9x6navee.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp9x6navee.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome_end =\
    \ find_palindrome_end(string)\n    local palindrome_begin = string:sub(1, string:len()\
    \ - palindrome_end)\n    local reversed_palindrome_begin = string:reverse():sub(1,\
    \ palindrome_end)\n    return palindrome_begin .. reversed_palindrome_begin\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvit9w52r.lua:12:\
    \ attempt to call a nil value (global 'find_palindrome_end')\nstack traceback:\n\
    \t/tmp/tmpvit9w52r.lua:12: in local 'candidate'\n\t/tmp/tmpvit9w52r.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local len = #string\n  local\
    \ start = 0\n  local k = math.floor(len / 2)\n  for i = 0, k do\n    if string:sub(1,\
    \ i) == string:sub(len - i + 1, len):reverse() then\n      start = i\n    end\n\
    \  end\n  return string .. string:sub(1, len - start):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_brjhl4.lua:27:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp9_brjhl4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local prefix = string:sub(1,\
    \ math.floor(#string / 2))\n  local palindrome = make_palindrome_longest_prefix(prefix)\n\
    \  return string .. palindrome:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2n0vzzil.lua:13:\
    \ attempt to call a nil value (global 'make_palindrome_longest_prefix')\nstack\
    \ traceback:\n\t/tmp/tmp2n0vzzil.lua:13: in local 'candidate'\n\t/tmp/tmp2n0vzzil.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    assert(type(string) ==\
    \ 'string')\n    local begin = 1\n    local last = #string\n    while last > begin\
    \ do\n        if string:sub(begin, last) == reverse(string:sub(begin, last)) then\n\
    \            break\n        end\n        last = last - 1\n    end\n    return\
    \ string .. reverse(string:sub(1, begin - 1))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpicw7bk_g.lua:21:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpicw7bk_g.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpicw7bk_g.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local s = reverse(string)\n\
    \    return string .. s:sub(#string+2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4ei23tn.lua:12:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpz4ei23tn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpz4ei23tn.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local n = #string\n  \
    \  local v = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp19enc_0u.lua:25: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reverse = function(s)\n\
    \        local result = {}\n        for i = string.len(s), 1, -1 do\n        \
    \    table.insert(result, string.sub(s, i, i))\n        end\n        return table.concat(result)\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe1rgsk9j.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local suffix = longest_suffix_palindrome(string)\n\
    \  local extra = string:sub(1, -#suffix-1):reverse()\n  return string .. extra\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1t6dm_m.lua:12:\
    \ attempt to call a nil value (global 'longest_suffix_palindrome')\nstack traceback:\n\
    \t/tmp/tmpe1t6dm_m.lua:12: in local 'candidate'\n\t/tmp/tmpe1t6dm_m.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local function reverse(str)\n\
    \    return str:reverse()\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu6vnq4ab.lua:26: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = suffix_palindrome(string)\n\
    \    local prefix = string:sub(1, string:len() - suffix:len())\n    return string\
    \ .. string.reverse(prefix)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotzfqszm.lua:12:\
    \ attempt to call a nil value (global 'suffix_palindrome')\nstack traceback:\n\
    \t/tmp/tmpotzfqszm.lua:12: in local 'candidate'\n\t/tmp/tmpotzfqszm.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the index of first\
    \ char of the longest palindromic suffix.\n  local function find_palindromic_suffix(string)\n\
    \    local last_index = #string\n    local first_index = last_index\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu38ac5zz.lua:27: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local longest_suffix =\
    \ longest_suffix_palindrome(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_suffix)\n    return string .. string:reverse():sub(1, #prefix)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbr6apxkg.lua:12:\
    \ attempt to call a nil value (global 'longest_suffix_palindrome')\nstack traceback:\n\
    \t/tmp/tmpbr6apxkg.lua:12: in local 'candidate'\n\t/tmp/tmpbr6apxkg.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome\
    \ = { l, r }\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzhtmr0or.lua:24: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local offset = find_max_palindrome_offset(string)\n\
    \    if offset == 0 then\n        return string\n    end\n    return string ..\
    \ string:sub(1, offset):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphk0c9fhp.lua:12:\
    \ attempt to call a nil value (global 'find_max_palindrome_offset')\nstack traceback:\n\
    \t/tmp/tmphk0c9fhp.lua:12: in local 'candidate'\n\t/tmp/tmphk0c9fhp.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string:reverse()\n  for i = 1, #string do\n    if reversed_string:sub(i) ==\
    \ string:sub(1, #string - i + 1) then\n      return string .. reversed_string:sub(1,\
    \ i - 1)\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp448bupld.lua:26:\
    \ expected: \"xyzyx\"\nactual: \"xyzzy\"\nstack traceback:\n\t/tmp/tmp448bupld.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local max_len = 0\n  \
    \  local max_pos = 0\n    local max_left = 0\n    for i = 1, #string do\n    \
    \    -- Check if the postfix is a palindrome.\n        local pos = i\n       \
    \ local len = 0\n        for j = 1, i do\n            if string:sub(pos - j +\
    \ 1, pos - j + 1) == string:sub(i + j, i + j) then\n                len = len\
    \ + 1\n            else\n                break\n            end\n        end\n\
    \        if len > max_len then\n            max_len = len\n            max_pos\
    \ = pos\n            max_left = i - len\n        end\n    end\n    return string\
    \ .. string:sub(1, max_left):reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6urpqfv.lua:40:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpz6urpqfv.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Create reverse string.\n\
    \    local reverse = utils.reverse(string)\n    -- Search for the longest palindromic\
    \ suffix in the given string.\n    local palindrome = lps(string, reverse)\n \
    \   -- Remove the longest palindromic suffix from the string.\n    string = string:sub(1,\
    \ -palindrome.length - 1)\n    -- Append reverse of the palindromic prefix to\
    \ the end of the string.\n    string = string .. reverse:sub(1, palindrome.length)\n\
    \    return string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbgyz4cds.lua:13:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpbgyz4cds.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbgyz4cds.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local string_length =\
    \ #string\n    local reversed_string = string:reverse()\n    local reverse_substring\n\
    \    for i = string_length, 1, -1 do\n        reverse_substring = reversed_string:sub(1,\
    \ i)\n        if string:sub(string_length + 1 - i) == reverse_substring then\n\
    \            return string .. reverse_substring:sub(2)\n        end\n    end\n\
    \    return string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_th_m1wp.lua:29:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp_th_m1wp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local string_len = string.len(string)\n\
    \  local suffix_len = suffix_length(string)\n  return string .. string.reverse(string):sub(1,\
    \ string_len - suffix_len)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpllqkekrp.lua:13:\
    \ attempt to call a nil value (global 'suffix_length')\nstack traceback:\n\t/tmp/tmpllqkekrp.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpllqkekrp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local string_len = #string\n\
    \    local suffix_end = string_len\n    while suffix_end > 0 do\n        local\
    \ suffix_len = string_len - suffix_end + 1\n        local suffix = string:sub(suffix_end,\
    \ string_len)\n        local prefix = string:sub(1, suffix_len)\n        if suffix\
    \ == prefix then\n            return string .. string:sub(1, suffix_end - 1):reverse()\n\
    \        end\n        suffix_end = suffix_end - 1\n    end\n    return string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyhzduga.lua:31:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpsyhzduga.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix = string:sub(1,\
    \ #string - palindrome_length(string))\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqtbll3dy.lua:12:\
    \ attempt to call a nil value (global 'palindrome_length')\nstack traceback:\n\
    \t/tmp/tmpqtbll3dy.lua:12: in local 'candidate'\n\t/tmp/tmpqtbll3dy.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest palindromic\
    \ postfix.\n    local postfix = 0\n    for i = 1, #string do\n        if is_palindrome(string,\
    \ i, #string) then\n            postfix = i\n        end\n    end\n    -- Append\
    \ the reverse of the prefix to the end of the string.\n    return string .. string:sub(1,\
    \ #string - postfix):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89y8yg1r.lua:15:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp89y8yg1r.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp89y8yg1r.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local string_prefix =\
    \ string:sub(1, #string - find_longest_palindrome_suffix(string))\n    return\
    \ string .. string_prefix:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvitlo99.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack\
    \ traceback:\n\t/tmp/tmpcvitlo99.lua:12: in local 'candidate'\n\t/tmp/tmpcvitlo99.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n    local pal_prefix = make_palindrome_postfix(string)\n\
    \    -- Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    local prefix = string:sub(1, #string - #pal_prefix)\n\
    \    return prefix .. reverse(prefix) .. pal_prefix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tw0dgul.lua:13:\
    \ attempt to call a nil value (global 'make_palindrome_postfix')\nstack traceback:\n\
    \t/tmp/tmp3tw0dgul.lua:13: in local 'candidate'\n\t/tmp/tmp3tw0dgul.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local max_len = 0\n  \
    \  local max_i = 0\n    for i = 1, #string do\n        local l = get_palindrome_len(string,\
    \ i)\n        if l > max_len then\n            max_len = l\n            max_i\
    \ = i\n        end\n    end\n    local result = string:sub(1, max_i - 1)\n   \
    \ result = result .. string:sub(max_i + max_len, #string)\n    result = result\
    \ .. result:reverse()\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzh5gcal3.lua:15:\
    \ attempt to call a nil value (global 'get_palindrome_len')\nstack traceback:\n\
    \t/tmp/tmpzh5gcal3.lua:15: in local 'candidate'\n\t/tmp/tmpzh5gcal3.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest palindromic\
    \ suffix in a string.\n    local function find_palindromic_suffix(string)\n  \
    \      local function compare_strings(string1, string2)\n            if #string1\
    \ ~= #string2 then\n                return false\n            end\n          \
    \  for i = 1, #string1 do\n                if string1:sub(i, i) ~= string2:sub(i,\
    \ i) then\n                    return false\n                end\n           \
    \ end\n            return true\n        end\n        -- compare string to itself\
    \ reversed\n        for i = #string, 1, -1 do\n            local prefix = string:sub(1,\
    \ i)\n            local suffix = string:sub(i + 1, #string)\n            if compare_strings(prefix,\
    \ utils.reverse(suffix)) then\n                return string:sub(i + 1, #string)\n\
    \            end\n        end\n        return ''\n    end\n    local suffix =\
    \ find_palindromic_suffix(string)\n    if #suffix == 0 then\n        return string\n\
    \    end\n    local prefix = string:sub(1, #string - #suffix)\n    return string\
    \ .. utils.reverse(prefix)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd712p0zc.lua:29:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpd712p0zc.lua:29:\
    \ in local 'find_palindromic_suffix'\n\t/tmp/tmpd712p0zc.lua:35: in local 'candidate'\n\
    \t/tmp/tmpd712p0zc.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome\
    \ = find_longest_palindrome(string)\n  local prefix = string:sub(1, string:len()\
    \ - longest_palindrome:len())\n  return string .. prefix:reverse()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwul81t1.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\
    \t/tmp/tmplwul81t1.lua:12: in local 'candidate'\n\t/tmp/tmplwul81t1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if #string == 0 then\n\
    \        return ''\n    end\n    local reverse = string:reverse()\n    local full_str\
    \ = string .. '$' .. reverse\n    local longest_suffix = kmp(full_str)\n    local\
    \ prefix = string:sub(1, #string - #longest_suffix)\n    return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4e_phs0.lua:17:\
    \ attempt to call a nil value (global 'kmp')\nstack traceback:\n\t/tmp/tmpm4e_phs0.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpm4e_phs0.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if string == '' then\n\
    \        return ''\n    end\n    local longest_palindrome = ''\n    for i = #string,\
    \ 1, -1 do\n        local front = string:sub(1, i)\n        local back = string:sub(i\
    \ + 1, #string)\n        if front == back then\n            longest_palindrome\
    \ = front\n            break\n        end\n    end\n    return string .. string:reverse():sub(#longest_palindrome\
    \ + 1, #string)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03hi3s_n.lua:31:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp03hi3s_n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome_suffix\
    \ = ''\n  local palindrome_length = 0\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(1, i)\n    local reverse_prefix = prefix:reverse()\n    if prefix\
    \ == reverse_prefix then\n      palindrome_suffix = string:sub(i + 1)\n      palindrome_length\
    \ = i\n    end\n  end\n  return string .. palindrome_suffix:reverse()\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwq6rjmr.lua:30:\
    \ expected: \"xyzyx\"\nactual: \"xyzzy\"\nstack traceback:\n\t/tmp/tmpnwq6rjmr.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix = string:sub(1,\
    \ #string-find_longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplk3fg_o4.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack\
    \ traceback:\n\t/tmp/tmplk3fg_o4.lua:12: in local 'candidate'\n\t/tmp/tmplk3fg_o4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local suffix = find_longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5wo24ww.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack\
    \ traceback:\n\t/tmp/tmph5wo24ww.lua:12: in local 'candidate'\n\t/tmp/tmph5wo24ww.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local longest_postfix\
    \ = longest_palindromic_postfix(string)\n    return string .. string.reverse(string.sub(string,\
    \ 1, #string - #longest_postfix))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqsopfey9.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_postfix')\nstack traceback:\n\
    \t/tmp/tmpqsopfey9.lua:12: in local 'candidate'\n\t/tmp/tmpqsopfey9.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local suffix_len = 0\n \
    \ local prefix_len = 0\n  local palindrome_len = 0\n  local len = string.len(string)\n\
    \  local palindrome = string\n  local char = ''\n  for i = 0, len - 1 do\n   \
    \ suffix_len = longest_palindrome_suffix(string, i)\n    prefix_len = i + 1 -\
    \ suffix_len\n    palindrome_len = 2 * suffix_len + prefix_len\n    if palindrome_len\
    \ == len then\n      return palindrome\n    end\n    if palindrome_len > len then\n\
    \      for j = i + 1, len - 1 do\n        char = string.sub(string, j, j)\n  \
    \      palindrome = palindrome .. char\n      end\n      return palindrome\n \
    \   end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp57xtfu0q.lua:19:\
    \ attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmp57xtfu0q.lua:19: in local 'candidate'\n\t/tmp/tmp57xtfu0q.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local suffix = longest_common_postfix(string,\
    \ string:reverse())\n  local prefix = string:sub(1, #string - #suffix)\n  return\
    \ string .. prefix:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5319xmvs.lua:12:\
    \ attempt to call a nil value (global 'longest_common_postfix')\nstack traceback:\n\
    \t/tmp/tmp5319xmvs.lua:12: in local 'candidate'\n\t/tmp/tmp5319xmvs.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local prefix = get_prefix(string)\n\
    \  local postfix = get_postfix(string)\n  local reverse_prefix = string.reverse(prefix)\n\
    \  return string .. reverse_prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqauj8te.lua:12:\
    \ attempt to call a nil value (global 'get_prefix')\nstack traceback:\n\t/tmp/tmpxqauj8te.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxqauj8te.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local first_index = 1\n\
    \    local last_index = len(string)\n    -- Try each possible palindromic suffix\
    \ and find the longest one.\n    while last_index > first_index do\n        local\
    \ left_index = first_index\n        local right_index = last_index\n        while\
    \ string[left_index] == string[right_index] do\n            left_index = left_index\
    \ + 1\n            right_index = right_index - 1\n            if left_index >\
    \ right_index then\n                break\n            end\n        end\n    \
    \    if left_index > right_index then\n            break\n        end\n      \
    \  last_index = last_index - 1\n    end\n    -- Append the reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    local sub = string.sub\n\
    \    return string .. sub(string, 1, first_index - 1):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9iytclim.lua:13:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp9iytclim.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp9iytclim.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed = table.concat(utilities.reverse_in_place(utilities.string_to_table(string)))\n\
    \  local reversed_first_half = table.concat(utilities.reverse_in_place(utilities.string_to_table(reversed)))\n\
    \  local longest_prefix = reversed_first_half\n  for i = 2, #string do\n    longest_prefix\
    \ = string.sub(longest_prefix, 2)\n    if string.sub(string, i) == longest_prefix\
    \ then\n      return string .. string.sub(reversed, 1, #string - i + 1)\n    end\n\
    \  end\n  return string .. reversed_first_half\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy4zlc4ar.lua:12:\
    \ attempt to index a nil value (global 'utilities')\nstack traceback:\n\t/tmp/tmpy4zlc4ar.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpy4zlc4ar.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local longest_pos_palindrome\
    \ = string:sub(1, 1)\n    for pos = 2, #string do\n        local end_index = #string\n\
    \        local success = true\n        for offset = 0, math.floor(pos / 2) do\n\
    \            if string:sub(pos - offset, pos - offset) ~= string:sub(end_index\
    \ - offset, end_index - offset) then\n                success = false\n      \
    \          break\n            end\n        end\n        if success then\n    \
    \        longest_pos_palindrome = string:sub(1, pos)\n        end\n    end\n \
    \   local string_before_the_palindrome = string:sub(#longest_pos_palindrome +\
    \ 1, #string)\n    local reverse_string_before_the_palindrome = string_before_the_palindrome:reverse()\n\
    \    return string .. reverse_string_before_the_palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvpctwoz.lua:36:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpsvpctwoz.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reverse = string.reverse(string)\n\
    \    local prefix = reverse:sub(1, #string - longest_palindromic_suffix(string))\n\
    \    return string .. prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq54fqa1s.lua:13:\
    \ attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\
    \t/tmp/tmpq54fqa1s.lua:13: in local 'candidate'\n\t/tmp/tmpq54fqa1s.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome_prefix\
    \ = find_palindrome_prefix(string)\n  local prefix_len = #string - #palindrome_prefix\n\
    \  local prefix = string:sub(1, prefix_len)\n  local prefix_rev = prefix:reverse()\n\
    \  return prefix_rev .. string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9j38xbz.lua:12:\
    \ attempt to call a nil value (global 'find_palindrome_prefix')\nstack traceback:\n\
    \t/tmp/tmpz9j38xbz.lua:12: in local 'candidate'\n\t/tmp/tmpz9j38xbz.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local substring_length\
    \ = longest_palindrome_substring_length(string)\n    return string .. reverse(substring(string,\
    \ 1, substring_length))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfmjo49l.lua:12:\
    \ attempt to call a nil value (global 'longest_palindrome_substring_length')\n\
    stack traceback:\n\t/tmp/tmpmfmjo49l.lua:12: in local 'candidate'\n\t/tmp/tmpmfmjo49l.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    return string .. reverse(string:sub(1,\
    \ #string - length_of_longest_postfix_palindrome(string)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpve1iczcq.lua:12:\
    \ attempt to call a nil value (global 'length_of_longest_postfix_palindrome')\n\
    stack traceback:\n\t/tmp/tmpve1iczcq.lua:12: in local 'candidate'\n\t/tmp/tmpve1iczcq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local n = string:len()\n\
    \  for i = n - 1, 1, -1 do\n    if string:sub(1, i) == string:sub(n - i + 1, n):reverse()\
    \ then\n      return string .. string:sub(1, i):reverse()\n    end\n  end\n  return\
    \ string .. string:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02qk_7md.lua:25:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp02qk_7md.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local longest_palindrome\
    \ = find_longest_palindrome(string)\n    local reverse_prefix = string.reverse(string.sub(string,\
    \ 1, #string - #longest_palindrome))\n    return string.format('%s%s', string,\
    \ reverse_prefix)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxy_hpv4.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\
    \t/tmp/tmpxxy_hpv4.lua:12: in local 'candidate'\n\t/tmp/tmpxxy_hpv4.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local s = string\n   \
    \ local n = #s\n    local function is_palindrome(i, j)\n        while i < j do\n\
    \            if s[i] ~= s[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    for k = n, 1, -1 do\n        if is_palindrome(1, k) then\n     \
    \       return s .. s:sub(1, n - k):reverse()\n        end\n    end\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy4sxazl.lua:37:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpqy4sxazl.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if string == string:reverse()\
    \ then\n        return string\n    end\n    local max_len = 0\n    local max_pos\
    \ = 0\n    local str_len = #string\n    local start = math.floor(str_len / 2)\n\
    \    local i = start\n    while i < str_len do\n        i = i + 1\n        local\
    \ l = i\n        local r = i\n        while l > 0 and r < str_len and string:sub(l,\
    \ l) == string:sub(r, r) do\n            l = l - 1\n            r = r + 1\n  \
    \      end\n        l = l + 1\n        r = r - 1\n        if r - l > max_len then\n\
    \            max_len = r - l\n            max_pos = l\n        end\n        l\
    \ = i\n        r = i + 1\n        while l > 0 and r < str_len and string:sub(l,\
    \ l) == string:sub(r, r) do\n            l = l - 1\n            r = r + 1\n  \
    \      end\n        l = l + 1\n        r = r - 1\n        if r - l > max_len then\n\
    \            max_len = r - l\n            max_pos = l\n        end\n    end\n\
    \    local prefix = string:sub(1, max_pos - 1)\n    return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwteh103.lua:56:\
    \ expected: \"xyzyx\"\nactual: \"xyzzyx\"\nstack traceback:\n\t/tmp/tmplwteh103.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local s = string\n   \
    \ local l = s:len()\n    local rev = s:reverse()\n    local suffix = ''\n    for\
    \ i = 1, l do\n        if (s:sub(1, l - i + 1) == rev:sub(i, l)) then\n      \
    \      suffix = s:sub(1, l - i + 1)\n            break\n        end\n    end\n\
    \    local prefix = s:sub(l - suffix:len() + 1, l)\n    return s .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzdjuedh.lua:30:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmppzdjuedh.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local n = #string\n  local\
    \ l, r = 1, n\n  -- Find the longest postfix of string that is a palindrome.\n\
    \  while l <= r do\n    if string:sub(l, r) == string:sub(l, r):reverse() then\n\
    \      break\n    end\n    l = l + 1\n  end\n  -- Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n  return\
    \ string .. string:sub(1, l - 1):reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if #string == 0 then\n\
    \        return ''\n    end\n    local prefix = rsub(string, '.*(.*)', '%1')\n\
    \    local postfix = rsub(string, '(.*).*', '%1')\n    if prefix == postfix then\n\
    \        return string\n    end\n    local string_rev = string.reverse(string)\n\
    \    local prefix_rev = string.reverse(prefix)\n    local string_rest = rsub(string,\
    \ prefix, '')\n    return prefix_rev .. make_palindrome(string_rest) .. prefix_rev\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_276q_3.lua:15:\
    \ attempt to call a nil value (global 'rsub')\nstack traceback:\n\t/tmp/tmpi_276q_3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpi_276q_3.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local length = #string\n\
    \    local palindrome_size = length\n    local rev = reverse(string)\n    for\
    \ i = 1, length do\n        local postfix = string:sub(i, length)\n        local\
    \ prefix = string:sub(1, i - 1)\n        local rev_prefix = rev:sub(palindrome_size\
    \ + 1, length)\n        if postfix == rev_prefix then\n            palindrome_size\
    \ = i - 1\n        end\n    end\n    local palindrome = string .. rev:sub(palindrome_size\
    \ + 1, length)\n    return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1eiqu0ya.lua:14:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmp1eiqu0ya.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp1eiqu0ya.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reversed_string\
    \ = string:reverse()\n    local prefix = string:sub(0, string:len() - 1)\n   \
    \ local palindrome_suffix = find_palindrome_suffix(prefix)\n    return string\
    \ .. reversed_string:sub(string:len() - palindrome_suffix + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf04_wv8c.lua:14:\
    \ attempt to call a nil value (global 'find_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmpf04_wv8c.lua:14: in local 'candidate'\n\t/tmp/tmpf04_wv8c.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local len = string:len()\n\
    \    local prefix_len = 0\n    local mr = Manacher(string)\n    for i = 1, len\
    \ do\n        if i + mr[i] == len + 1 then\n            prefix_len = mr[i]\n \
    \           break\n        end\n    end\n    return string .. string:sub(1, len\
    \ - prefix_len):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7kndoi1.lua:14:\
    \ attempt to call a nil value (global 'Manacher')\nstack traceback:\n\t/tmp/tmpf7kndoi1.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpf7kndoi1.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = string:sub(1,\
    \ 1)\n    local longsuffix = string:sub(1, 1)\n    local last_index = 1\n    local\
    \ index = 1\n    while index ~= #string do\n        index = index + 1\n      \
    \  if string:sub(index, index) == suffix:sub(1, 1) then\n            local suflen\
    \ = string:len() - index + 1\n            if string:sub(index, index + suflen\
    \ - 1) == suffix then\n                longsuffix = suffix\n                last_index\
    \ = index\n            end\n        end\n        suffix = string:sub(index, index)\
    \ .. suffix\n    end\n    return string .. string:sub(1, last_index - 1):reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome_suffix\
    \ = find_palindrome_suffix(string)\n  local prefix = string:sub(1, -palindrome_suffix\
    \ - 1)\n  return string .. reverse(prefix)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphnhc_nln.lua:12:\
    \ attempt to call a nil value (global 'find_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmphnhc_nln.lua:12: in local 'candidate'\n\t/tmp/tmphnhc_nln.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix = longest_common_prefix(string,\
    \ reverse(string))\n    local result = string .. reverse(string:sub(1, -prefix\
    \ - 1))\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphh8rubm_.lua:12:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmphh8rubm_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphh8rubm_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local function make_palindrome_rec(first,\
    \ lp, tail)\n        -- first - beginning of the string\n        -- lp - length\
    \ of the longest palindrome starting at the beginning of the string\n        --\
    \ tail - string that is being built up\n        if first > #string then return\
    \ tail end\n        -- continue with the next character from the input string\n\
    \        return make_palindrome_rec(first + 1, lp, tail .. string.sub(string,\
    \ first, first))\n    end\n    return make_palindrome_rec(#string - lps(string),\
    \ lps(string), '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk_njk46q.lua:20:\
    \ attempt to call a nil value (global 'lps')\nstack traceback:\n\t/tmp/tmpk_njk46q.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpk_njk46q.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local length = #string\n\
    \    if length < 2 then\n        return string\n    end\n    local longest_palindrome_length,\n\
    \        i = get_longest_palindrome_length(string)\n    if longest_palindrome_length\
    \ == length then\n        return string\n    end\n    return string .. reverse(string:sub(1,\
    \ i - 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfjn22iy9.lua:17:\
    \ attempt to call a nil value (global 'get_longest_palindrome_length')\nstack\
    \ traceback:\n\t/tmp/tmpfjn22iy9.lua:17: in local 'candidate'\n\t/tmp/tmpfjn22iy9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local function _make_palindrome(string,\
    \ i, acc)\n        i = i or #string + 1\n        acc = acc or ''\n        local\
    \ t = string:sub(1, i - 1)\n        local u = string:sub(i, #string)\n       \
    \ if is_palindrome(t) then\n            return t .. acc\n        else\n      \
    \      return _make_palindrome(string, i - 1, string:sub(i, i) .. acc)\n     \
    \   end\n    end\n    return _make_palindrome(string)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3olqg1t.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpz3olqg1t.lua:17:\
    \ in function </tmp/tmpz3olqg1t.lua:12>\n\t(...tail calls...)\n\t/tmp/tmpz3olqg1t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if #string <= 1 then\n\
    \        return string\n    end\n    local prefix = {}\n    for i = 1, #string\
    \ do\n        local sub = string:sub(1, i)\n        if is_palindrome(sub) then\n\
    \            prefix[#prefix + 1] = sub\n        end\n    end\n    prefix = prefix[#prefix]\n\
    \    local result = string .. reverse(string:sub(1, #string - #prefix))\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1ayvre7.lua:18:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpq1ayvre7.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpq1ayvre7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local shortest_palindrome = string\
    \ .. string.reverse(string:sub(1, #string - #longest_palindrome_suffix))\n   \
    \ return shortest_palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqb1ymz1h.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack\
    \ traceback:\n\t/tmp/tmpqb1ymz1h.lua:12: in local 'candidate'\n\t/tmp/tmpqb1ymz1h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local prefix = string\n\
    \  local suffix = string\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpabpd0b3m.lua:25: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix_length =\
    \ math.floor(#string / 2)\n    local prefix = string:sub(1, prefix_length)\n \
    \   local prefix_is_palindrome = is_palindrome(prefix)\n    local postfix = string:sub(#string\
    \ - prefix_length + 1, #string)\n    local postfix_is_palindrome = is_palindrome(postfix)\n\
    \    if prefix_is_palindrome and postfix_is_palindrome then\n        return string\n\
    \    elseif postfix_is_palindrome then\n        return make_palindrome(prefix)\
    \ .. postfix\n    else\n        return string .. string:reverse()\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9f9i5tg.lua:14:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpk9f9i5tg.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpk9f9i5tg.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local i = find_last_palindrome_index(string)\n\
    \  local reverse_prefix = string.reverse(string:sub(1, i))\n  return string ..\
    \ reverse_prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppt1npvqj.lua:12:\
    \ attempt to call a nil value (global 'find_last_palindrome_index')\nstack traceback:\n\
    \t/tmp/tmppt1npvqj.lua:12: in local 'candidate'\n\t/tmp/tmppt1npvqj.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome\
    \ = ''\n  for i = 1, string.len(string) do\n    local string_prefix = string.sub(string,\
    \ 1, i)\n    local string_postfix = string.sub(string, i + 1, string.len(string))\n\
    \    if string_prefix == string_postfix:reverse() then\n      longest_palindrome\
    \ = string_prefix\n    end\n  end\n  return string .. string.reverse(string.sub(string,\
    \ string.len(longest_palindrome) + 1, string.len(string)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhloz4vu.lua:27:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpkhloz4vu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local sl = string:len()\n\
    \    local palindrome_length = 0\n    local prefix_len = 0\n    local suffix_len\
    \ = sl\n    while suffix_len > 0 do\n        if string:sub(1, prefix_len) == string:sub(suffix_len,\
    \ sl) then\n            palindrome_length = prefix_len\n        end\n        prefix_len\
    \ = prefix_len + 1\n        suffix_len = suffix_len - 1\n    end\n    if palindrome_length\
    \ == 0 then\n        return string\n    end\n    return string .. string:sub(1,\
    \ sl - palindrome_length):reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36v8hciw.lua:34:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp36v8hciw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  assert(type(string) == 'string')\n\
    \  -- Find the longest postfix of supplied string that is a palindrome.\n  local\
    \ i = string:len()\n  while i > 0 do\n    local prefix = string:sub(1, i)\n  \
    \  if prefix == reverse(prefix) then\n      break\n    end\n    i = i - 1\n  end\n\
    \  -- Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  local palindrome = string .. reverse(string:sub(1,\
    \ i - 1))\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5x25trrb.lua:23:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmp5x25trrb.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp5x25trrb.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local len = #string\n  local\
    \ suffix_length = 0\n  for suffix_length = len, 1, -1 do\n    local start = len\
    \ - suffix_length + 1\n    local stop = len\n    local substr = string:sub(start,\
    \ stop)\n    if is_palindrome(substr) then\n      break\n    end\n  end\n  local\
    \ prefix = string:sub(1, len - suffix_length)\n  return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp435rmpg.lua:18:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpp435rmpg.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpp435rmpg.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if (string == '') then\n\
    \        return ''\n    end\n    local str_size = string.len(string)\n    local\
    \ string_rev = string.reverse(string)\n    local j = str_size\n    for i = 1,\
    \ str_size do\n        if (string.sub(string, 1, i) == string.sub(string_rev,\
    \ j)) then\n            j = j - 1\n        end\n    end\n    return string ..\
    \ string.sub(string_rev, 1, str_size - j)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1muuotfx.lua:30:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp1muuotfx.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local length = #string\n\
    \    local palindrome_indices = {[0] = -1}\n    local palindrome_length = 0\n\
    \    local i = 0\n    while i < length do\n        while i + palindrome_length\
    \ + 1 < length and string[i - palindrome_length] == string[i + palindrome_length\
    \ + 1] do\n            palindrome_length = palindrome_length + 1\n           \
    \ palindrome_indices[i] = palindrome_length\n        end\n        local j = 1\n\
    \        while i + j < length and j <= palindrome_length do\n            if palindrome_indices[i\
    \ - j] == palindrome_length - j then\n                palindrome_length = palindrome_length\
    \ - j\n                break\n            end\n            j = j + 1\n       \
    \ end\n        palindrome_indices[i] = palindrome_length\n        i = i + 1\n\
    \    end\n    local j = 0\n    while j <= palindrome_length do\n        if palindrome_indices[length\
    \ - j] == j then\n            return string .. string:sub(1, length - j - 1):reverse()\n\
    \        end\n        j = j + 1\n    end\n    return string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36qf5aqj.lua:47:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp36qf5aqj.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local l = #string\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr95eao1b.lua:24: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local suffix_start = 0\n\
    \  local suffix_length = 0\n  local i = 1\n  local j = #string\n  while i <= j\
    \ do\n    if string:sub(i, j) == string:sub(j, i) then\n      local len = j -\
    \ i + 1\n      if len > suffix_length then\n        suffix_start = i\n       \
    \ suffix_length = len\n      end\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  local prefix = string:sub(1, suffix_start - 1)\n  return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vg6k06f.lua:36:\
    \ expected: \"xyzyx\"\nactual: \"xyzx\"\nstack traceback:\n\t/tmp/tmp5vg6k06f.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    assert(type(string) ==\
    \ 'string')\n    if #string <= 1 then\n        return string\n    end\n    local\
    \ suffix = longest_palindromic_suffix(string)\n    if #suffix == #string then\n\
    \        return string\n    end\n    return string .. reverse(sub(string, 1, #string\
    \ - #suffix))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptp57thhx.lua:16:\
    \ attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\
    \t/tmp/tmptp57thhx.lua:16: in local 'candidate'\n\t/tmp/tmptp57thhx.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix = string:sub(1,\
    \ -#(find_longest_palindrome(string)) - 1)\n    return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fme5iv6.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\
    \t/tmp/tmp1fme5iv6.lua:12: in local 'candidate'\n\t/tmp/tmp1fme5iv6.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local pos = table.remove(longest_palindromic_suffixes(string))\n\
    \  local prefix = string:sub(1, pos - 1)\n  local suffix = string:sub(pos, -1)\n\
    \  return string .. prefix:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptqspiucy.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_suffixes')\nstack traceback:\n\
    \t/tmp/tmptqspiucy.lua:12: in local 'candidate'\n\t/tmp/tmptqspiucy.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local function substring(s,\
    \ i, j)\n        return s:sub(i, j)\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuphhfhqd.lua:26: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest palindromic\
    \ suffix.\n    local suffix_len = 1\n    while string.sub(string, 1, suffix_len)\
    \ == string.sub(string, -suffix_len, -1) do\n        suffix_len = suffix_len +\
    \ 1\n    end\n    suffix_len = suffix_len - 1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjek9srr7.lua:29: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  if not string then return\
    \ '' end\n  local i = 0\n  while not is_palindrome(string, 1, #string - i) do\n\
    \    i = i + 1\n  end\n  return string .. reverse(string, 1, #string - i)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptowusm1v.lua:14:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmptowusm1v.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmptowusm1v.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reversed = string.reverse(string)\n\
    \    local prefix_length = longest_common_prefix(string, reversed)\n    local\
    \ prefix = string.sub(string, 1, prefix_length)\n    local suffix = string.sub(string,\
    \ prefix_length + 1)\n    local result = string.concat({string, string.reverse(suffix),\
    \ prefix})\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6by1agba.lua:13:\
    \ attempt to call a nil value (global 'longest_common_prefix')\nstack traceback:\n\
    \t/tmp/tmp6by1agba.lua:13: in local 'candidate'\n\t/tmp/tmp6by1agba.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local new_string = string\
    \ .. string_reverse(string)\n    local postfix_pos = string_find(new_string, string,\
    \ true)\n    return new_string:sub(postfix_pos)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp095rh1qk.lua:12:\
    \ attempt to call a nil value (global 'string_reverse')\nstack traceback:\n\t\
    /tmp/tmp095rh1qk.lua:12: in local 'candidate'\n\t/tmp/tmp095rh1qk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- find the longest palindromic\
    \ suffix in the string\n    local suffix = match_longest_suffix(string, function(s)\
    \ return is_palindrome(s) end)\n    -- find the length of the prefix that comes\
    \ before the palindromic suffix\n    local prefix_length = string.len(string)\
    \ - string.len(suffix)\n    -- create the palindrome: the prefix plus the reverse\
    \ of the prefix\n    return string .. string.reverse(string.sub(string, 1, prefix_length))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ulmvbp7.lua:13:\
    \ attempt to call a nil value (global 'match_longest_suffix')\nstack traceback:\n\
    \t/tmp/tmp1ulmvbp7.lua:13: in local 'candidate'\n\t/tmp/tmp1ulmvbp7.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local length = #string\n\
    \    if length == 0 then\n        return ''\n    end\n    local suffix = reverse(string)\n\
    \    local pos = length\n    while pos > 0 do\n        if string:sub(1, pos) ==\
    \ suffix:sub(length - pos + 1, length) then\n            break\n        end\n\
    \        pos = pos - 1\n    end\n    return string .. suffix:sub(length - pos\
    \ + 2, length)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyu48fp5q.lua:16:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpyu48fp5q.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpyu48fp5q.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local prefix = string:sub(1,\
    \ (string:len() - longest_palindromic_suffix(string)))\n  return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq55kmwb.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\
    \t/tmp/tmpkq55kmwb.lua:12: in local 'candidate'\n\t/tmp/tmpkq55kmwb.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local function append_reverse(string,\
    \ prefix)\n        local len = #prefix\n        if len == 0 then\n           \
    \ return string\n        end\n        local string_prefix = string:sub(1, len)\n\
    \        -- We skip the first symbol of the prefix because it is already in the\
    \ string\n        -- (because of the fact that we found the longest palindromic\
    \ suffix of the string).\n        local reverse_prefix = string_prefix:reverse():sub(2)\n\
    \        return string .. reverse_prefix\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8aisv9s1.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix = string.reverse(string)\n\
    \    local suffix = string.reverse(string)\n    local prefix_len = utf8.len(prefix)\n\
    \    local suffix_len = utf8.len(suffix)\n    for i = prefix_len, 1, -1 do\n \
    \       local prefix_suffix = string.sub(prefix, 1, i)\n        if string.find(suffix,\
    \ prefix_suffix, suffix_len - i + 1) then\n            return string .. string.sub(prefix,\
    \ i + 1)\n        end\n    end\n    return string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfj7e6v9.lua:30:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpmfj7e6v9.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local rev_string = string:reverse()\n\
    \    local x = 2\n    while x < #string do\n        if string:sub(x) == rev_string:sub(1,\
    \ #string - x + 1) then\n            return string .. rev_string:sub(#string -\
    \ x + 2)\n        end\n        x = x + 1\n    end\n    return string .. rev_string:sub(2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu02x6gq0.lua:29:\
    \ expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmpu02x6gq0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local result = string\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5eynwdfy.lua:24: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix = string:sub(1,\
    \ #string - find_palindrome_length(string))\n    return string .. reverse(prefix)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6j8i841.lua:12:\
    \ attempt to call a nil value (global 'find_palindrome_length')\nstack traceback:\n\
    \t/tmp/tmpk6j8i841.lua:12: in local 'candidate'\n\t/tmp/tmpk6j8i841.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local max_postfix_size =\
    \ find_max_palindrome_size(string)\n  local prefix = string:sub(1, string:len()\
    \ - max_postfix_size)\n  return string .. prefix:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqrig36pb.lua:12:\
    \ attempt to call a nil value (global 'find_max_palindrome_size')\nstack traceback:\n\
    \t/tmp/tmpqrig36pb.lua:12: in local 'candidate'\n\t/tmp/tmpqrig36pb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ palindrome:\n  local suffix = string:gsub('.*(.+)', '%1')\n  local pal_suffix_len\
    \ = 0\n  while (suffix ~= string.reverse(suffix)) do\n    pal_suffix_len = pal_suffix_len\
    \ + 1\n    suffix = suffix:sub(2)\n  end\n  return string .. string.reverse(string):sub(1,\
    \ #string - pal_suffix_len)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1e33co9.lua:26:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpi1e33co9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix = ''\n  \
    \  local suffix = ''\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if not is_palindrome(prefix .. c .. suffix) then\n            prefix\
    \ = prefix .. c\n        else\n            suffix = c .. suffix\n        end\n\
    \    end\n    return string .. suffix:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp113zdbyg.lua:16:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp113zdbyg.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp113zdbyg.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local rev = strrev(string)\n\
    \  local string_len = string:len()\n  local string_matcher = str_matcher.new(string)\n\
    \  local longest_match_len = 0\n  local longest_match_end = string_len\n  while\
    \ string_matcher:at_end() == false do\n    local pos, len = string_matcher:find_next()\n\
    \    if pos == 1 then\n      longest_match_len = len\n      longest_match_end\
    \ = string_len - pos\n    end\n  end\n  return string .. rev:sub(string_len -\
    \ longest_match_end + 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2wtvv5sk.lua:12:\
    \ attempt to call a nil value (global 'strrev')\nstack traceback:\n\t/tmp/tmp2wtvv5sk.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2wtvv5sk.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if string == '' then\n\
    \        return ''\n    end\n    local idx = string:find(reverse(string), 1, true)\n\
    \    if idx == 1 then\n        return string\n    end\n    if idx == nil then\n\
    \        return string .. reverse(string:sub(1, -2))\n    end\n    return string\
    \ .. reverse(string:sub(1, idx - 1))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11zu20ze.lua:15:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmp11zu20ze.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp11zu20ze.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local strlen = string.len(string)\n\
    \  local function make_longest_palindrome(string, prefix_pos, postfix_pos)\n \
    \   if prefix_pos >= postfix_pos then\n      return string\n    end\n    local\
    \ prefix_char = string.sub(string, prefix_pos, prefix_pos)\n    local postfix_char\
    \ = string.sub(string, postfix_pos, postfix_pos)\n    if prefix_char == postfix_char\
    \ then\n      return make_longest_palindrome(string, prefix_pos + 1, postfix_pos\
    \ - 1)\n    else\n      return make_longest_palindrome(string, prefix_pos, postfix_pos\
    \ - 1)\n    end\n  end\n  local longest_palindrome = make_longest_palindrome(string,\
    \ 1, strlen)\n  local prefix = string.sub(string, 1, strlen - string.len(longest_palindrome))\n\
    \  return string.format('%s%s%s', prefix, string.reverse(prefix), longest_palindrome)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxyrmhkf.lua:35:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpoxyrmhkf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local longest_palindrome = longest_suffix_palindrome(string)\n    if #longest_palindrome\
    \ < #string then\n        local prefix = string.sub(string, 1, #string - #longest_palindrome)\n\
    \        local prefix_rev = string.reverse(prefix)\n        palindrome = palindrome\
    \ .. prefix_rev\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaohm3r15.lua:13:\
    \ attempt to call a nil value (global 'longest_suffix_palindrome')\nstack traceback:\n\
    \t/tmp/tmpaohm3r15.lua:13: in local 'candidate'\n\t/tmp/tmpaohm3r15.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if string == '' then\n\
    \        return ''\n    end\n    local longest_palindrome = longest_palindrome_substring(string)\n\
    \    local common_prefix = string:sub(1, string:len() - longest_palindrome:len())\n\
    \    local common_prefix_reversed = string_reverse(common_prefix)\n    return\
    \ string .. common_prefix_reversed\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni6oa8xc.lua:15:\
    \ attempt to call a nil value (global 'longest_palindrome_substring')\nstack traceback:\n\
    \t/tmp/tmpni6oa8xc.lua:15: in local 'candidate'\n\t/tmp/tmpni6oa8xc.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local lps, prefix = longest_palindromic_suffix(string)\n\
    \  if lps:len() == string:len() then\n    return string\n  end\n  return string\
    \ .. prefix:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfjk91a1t.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_suffix')\nstack traceback:\n\
    \t/tmp/tmpfjk91a1t.lua:12: in local 'candidate'\n\t/tmp/tmpfjk91a1t.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local l = string:len()\n\
    \    local postfix_length = l - find_longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, l - postfix_length)\n    return string .. string:reverse():sub(1,\
    \ postfix_length)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02fft_ed.lua:13:\
    \ attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack\
    \ traceback:\n\t/tmp/tmp02fft_ed.lua:13: in local 'candidate'\n\t/tmp/tmp02fft_ed.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome_suffix\
    \ = find_palindrome_suffix(string)\n  local string_prefix = string:sub(1, string:len()\
    \ - palindrome_suffix:len())\n  return string .. string_prefix:reverse()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpue1oifgw.lua:12:\
    \ attempt to call a nil value (global 'find_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmpue1oifgw.lua:12: in local 'candidate'\n\t/tmp/tmpue1oifgw.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome_suffix_idx\
    \ = longest_palindrome_suffix(string)\n  return string..reverse(string:sub(1,\
    \ #string - longest_palindrome_suffix_idx))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3khtjs6b.lua:12:\
    \ attempt to call a nil value (global 'longest_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmp3khtjs6b.lua:12: in local 'candidate'\n\t/tmp/tmp3khtjs6b.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local n = #string\n  for\
    \ i = 0, n do\n    if string:sub(1, n - i) == string:sub(n - i + 1, n):reverse()\
    \ then\n      return string .. string:sub(1, n - i):reverse()\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ozbwyuv.lua:24:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmp4ozbwyuv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    assert(type(string) ==\
    \ 'string')\n    if #string == 0 then\n        return ''\n    end\n    local lsp\
    \ = longest_substring_palindrome(string)\n    local prefix = string:sub(1, #string\
    \ - #lsp)\n    return prefix .. string:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vi3ivqy.lua:16:\
    \ attempt to call a nil value (global 'longest_substring_palindrome')\nstack traceback:\n\
    \t/tmp/tmp8vi3ivqy.lua:16: in local 'candidate'\n\t/tmp/tmp8vi3ivqy.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local p = {}\n    local\
    \ i = 1\n    local j = 1\n    while string[i] do\n        while string[i+j] and\
    \ string[i+j] == string[i-j] do\n            p[i+j] = j\n            j = j + 1\n\
    \        end\n        i = i + j\n        j = 1\n    end\n    local l = p[#string]\n\
    \    if l then\n        return string .. string:sub(#string - l + 2):reverse()\n\
    \    else\n        return string\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpx4htln.lua:36:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpnpx4htln.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local is_palindrome =\
    \ function(substring)\n        return substring == string.reverse(substring)\n\
    \    end\n    local length = #string\n    for i = length, 1, -1 do\n        local\
    \ substring = string.sub(string, i)\n        if is_palindrome(substring) then\n\
    \            local prefix = string.sub(string, 1, i - 1)\n            return string\
    \ .. string.reverse(prefix)\n        end\n    end\n    return string\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19voct_5.lua:32:\
    \ expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmp19voct_5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local len = #string\n  local\
    \ i = 0\n  while i < len do\n    if string:sub(i + 1, len) == string:sub(1, len\
    \ - i):reverse() then\n      break\n    end\n    i = i + 1\n  end\n  return string\
    \ .. string:sub(1, i):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphx66qqvm.lua:28:\
    \ expected: \"xyzyx\"\nactual: \"xyzzyx\"\nstack traceback:\n\t/tmp/tmphx66qqvm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local prefix_length = palindrome_prefix_length(string)\n\
    \  return string .. reverse(string:sub(1, #string - prefix_length))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe3rmmmb5.lua:12:\
    \ attempt to call a nil value (global 'palindrome_prefix_length')\nstack traceback:\n\
    \t/tmp/tmpe3rmmmb5.lua:12: in local 'candidate'\n\t/tmp/tmpe3rmmmb5.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = longest_postfix_palindrome(string)\n\
    \  local prefix = postfix:reverse()\n  if prefix == string then\n    return string\n\
    \  end\n  return string .. prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3hd3b9am.lua:12:\
    \ attempt to call a nil value (global 'longest_postfix_palindrome')\nstack traceback:\n\
    \t/tmp/tmp3hd3b9am.lua:12: in local 'candidate'\n\t/tmp/tmp3hd3b9am.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest_palindrome\
    \ = longest_palindrome_postfix(string)\n  local string_prefix = string:sub(1,\
    \ string:len() - longest_palindrome:len())\n  local string_prefix_reversed = reverse(string_prefix)\n\
    \  return string .. string_prefix_reversed\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkrhyv728.lua:12:\
    \ attempt to call a nil value (global 'longest_palindrome_postfix')\nstack traceback:\n\
    \t/tmp/tmpkrhyv728.lua:12: in local 'candidate'\n\t/tmp/tmpkrhyv728.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local max_idx = max_index(string)\n\
    \    local prefix = string:sub(1, max_idx)\n    local suffix = string:sub(max_idx\
    \ + 1, -1)\n    return string .. suffix:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxb5jufji.lua:12:\
    \ attempt to call a nil value (global 'max_index')\nstack traceback:\n\t/tmp/tmpxb5jufji.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxb5jufji.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if string == '' then\n\
    \        return ''\n    end\n    local n = #string\n    for i = n, 1, -1 do\n\
    \        if is_palindrome(string, 1, i) then\n            return string .. reverse(string,\
    \ i + 1, n)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_nq7fhh.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp4_nq7fhh.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp4_nq7fhh.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    return string .. reverse(prefix(string,\
    \ 1, size(string)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg8du6sp6.lua:12:\
    \ attempt to call a nil value (global 'size')\nstack traceback:\n\t/tmp/tmpg8du6sp6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpg8du6sp6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local prefix = string:sub(1,\
    \ #string - palindrome_postfix_length(string))\n  return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6kr9rnx.lua:12:\
    \ attempt to call a nil value (global 'palindrome_postfix_length')\nstack traceback:\n\
    \t/tmp/tmpp6kr9rnx.lua:12: in local 'candidate'\n\t/tmp/tmpp6kr9rnx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- find the longest palindromic\
    \ suffix of the supplied string\n    local i = 1\n    local prefix_len = 0\n \
    \   while i <= string:len() do\n        local suffix = string:sub(i)\n       \
    \ if is_palindrome(suffix) then\n            prefix_len = string:len() - i\n \
    \           break\n        end\n        i = i + 1\n    end\n    -- append reversed\
    \ prefix of the string that comes before the palindromic suffix\n    local prefix\
    \ = string:sub(1, prefix_len)\n    return string .. prefix:reverse()\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptdggi0mk.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmptdggi0mk.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmptdggi0mk.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest postfix\
    \ that is a palindrome.\n    local postfix_length = longest_palindrome_substring(string)\n\
    \    -- Append reverse of a string prefix that comes before the palindromic suffix.\n\
    \    local prefix = string:sub(1, string:len() - postfix_length)\n    local reverse_prefix\
    \ = prefix:reverse()\n    return string .. reverse_prefix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmc08z3c.lua:13:\
    \ attempt to call a nil value (global 'longest_palindrome_substring')\nstack traceback:\n\
    \t/tmp/tmpjmc08z3c.lua:13: in local 'candidate'\n\t/tmp/tmpjmc08z3c.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local suffix = 0\n  local\
    \ prefix = string.reverse(string)\n  -- Find the longest palindromic suffix of\
    \ the string.\n  while string:sub(#string - suffix, #string - suffix) == prefix:sub(1,\
    \ 1) do\n    suffix = suffix + 1\n  end\n  -- Append the reverse of the prefix.\n\
    \  return string .. prefix:sub(2, -1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    return string .. string:reverse():sub(1,\
    \ #string - #make_suffix(string))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph1w3gtlu.lua:12:\
    \ attempt to call a nil value (global 'make_suffix')\nstack traceback:\n\t/tmp/tmph1w3gtlu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmph1w3gtlu.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local _, length = string:gsub('%a',\
    \ '')\n    if length == 0 then\n        return string\n    end\n    local suffix_length\
    \ = prefix_longest_palindrome(string)\n    local prefix = string:sub(1, length\
    \ - suffix_length)\n    return string .. prefix:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps7z0bwzd.lua:16:\
    \ attempt to call a nil value (global 'prefix_longest_palindrome')\nstack traceback:\n\
    \t/tmp/tmps7z0bwzd.lua:16: in local 'candidate'\n\t/tmp/tmps7z0bwzd.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = suffix_palindrome(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpla_d0ffg.lua:12:\
    \ attempt to call a nil value (global 'suffix_palindrome')\nstack traceback:\n\
    \t/tmp/tmpla_d0ffg.lua:12: in local 'candidate'\n\t/tmp/tmpla_d0ffg.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local length = #string\n\
    \  local palindrome_suffix = find_palindrome_suffix(string)\n  return string ..\
    \ string:sub(1, length - palindrome_suffix):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsavihbfh.lua:13:\
    \ attempt to call a nil value (global 'find_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmpsavihbfh.lua:13: in local 'candidate'\n\t/tmp/tmpsavihbfh.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix_length =\
    \ 0\n    local suffix_length = 1\n    local chars = string:reverse():chars()\n\
    \    local reverse_index = 1\n    for index, char in string:chars() do\n     \
    \   if index > 0 and char == chars[reverse_index] then\n            prefix_length\
    \ = prefix_length + 1\n            suffix_length = suffix_length + 1\n       \
    \     reverse_index = reverse_index + 1\n        else\n            break\n   \
    \     end\n    end\n    return string .. string:sub(1, prefix_length):reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnfo9f1vs.lua:14:\
    \ attempt to call a nil value (method 'chars')\nstack traceback:\n\t/tmp/tmpnfo9f1vs.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpnfo9f1vs.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local pal_suffix = find_longest_palindrome(string)\n\
    \    local pal_prefix = string.reverse(string.sub(string, 1, #string - #pal_suffix))\n\
    \    return string .. pal_prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_ahlt22.lua:12:\
    \ attempt to call a nil value (global 'find_longest_palindrome')\nstack traceback:\n\
    \t/tmp/tmpe_ahlt22.lua:12: in local 'candidate'\n\t/tmp/tmpe_ahlt22.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- find the position of\
    \ first character of a longest palindromic suffix\n    local last_idx = get_last_palindrome_idx(string)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6t7ruf2_.lua:25: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local len = #string\n\
    \    for i = 1, math.floor(len / 2) do\n        local ch_begin = string:sub(1,\
    \ i)\n        local ch_end = string:sub(len - i + 1, len)\n        if ch_begin\
    \ == ch_end then\n            return string .. string:sub(i + 1, len - i):reverse()\n\
    \        end\n    end\n    return string .. string:reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdoczg3e.lua:27:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpqdoczg3e.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = find_largest_palindrome(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_v08jlpm.lua:12:\
    \ attempt to call a nil value (global 'find_largest_palindrome')\nstack traceback:\n\
    \t/tmp/tmp_v08jlpm.lua:12: in local 'candidate'\n\t/tmp/tmp_v08jlpm.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome_length\
    \ = 0\n  local string_length = #string\n  local reversed_string = utils.reverse(string)\n\
    \  local prefix_length = string_length\n  while palindrome_length == 0 and prefix_length\
    \ > 0 do\n    local prefix = utils.substring(string, 0, prefix_length)\n    local\
    \ prefix_to_append = utils.substring(reversed_string, string_length - prefix_length\
    \ + 1)\n    if utils.is_suffix(prefix, prefix_to_append) then\n      palindrome_length\
    \ = prefix_length\n    end\n    prefix_length = prefix_length - 1\n  end\n  local\
    \ prefix_to_append = utils.substring(reversed_string, string_length - palindrome_length\
    \ + 1)\n  return string .. prefix_to_append\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprdwtmdan.lua:14:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmprdwtmdan.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmprdwtmdan.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local prefix_len = string_len(string)\
    \ - longest_palindrome_suffix_len(string)\n  local prefix = string_sub(string,\
    \ 1, prefix_len)\n  return string .. string_reverse(prefix)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8i8btflb.lua:12:\
    \ attempt to call a nil value (global 'string_len')\nstack traceback:\n\t/tmp/tmp8i8btflb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8i8btflb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local ss = string\n  \
    \  local prefix = string:sub(1, (string:len() + 1) / 2)\n    local plen = longest_palindrome_suffix(prefix)\n\
    \    if plen < prefix:len() then\n        ss = ss .. string:sub(string:len() -\
    \ plen):reverse()\n    end\n    return ss\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp06f5_5ar.lua:13:\
    \ bad argument #2 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmp06f5_5ar.lua:13: in local 'candidate'\n\t/tmp/tmp06f5_5ar.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    if string == '' then\n\
    \        return ''\n    end\n    local prefix = postfix_to_prefix(string)\n  \
    \  local _, tail = find_longest_palindrome(string)\n    local tail_length = string.len(tail)\n\
    \    local head = string.sub(string, 1, string.len(string) - tail_length)\n  \
    \  local result = string.format('%s%s%s', head, tail, prefix)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhyv9hne.lua:15:\
    \ attempt to call a nil value (global 'postfix_to_prefix')\nstack traceback:\n\
    \t/tmp/tmpvhyv9hne.lua:15: in local 'candidate'\n\t/tmp/tmpvhyv9hne.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local prefix_string =\
    \ string:sub(1, math.floor(#string / 2))\n    local postfix_string = prefix_string:reverse()\n\
    \    -- If we have odd-length string, add to the end of the prefix string the\
    \ middle character of the original string.\n    if #string % 2 == 1 then\n   \
    \     prefix_string = prefix_string .. string:sub(math.floor(#string / 2) + 1,\
    \ math.floor(#string / 2) + 1)\n    end\n    return prefix_string .. postfix_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu82aokm.lua:26:\
    \ expected: \"xyzyx\"\nactual: \"xyx\"\nstack traceback:\n\t/tmp/tmpgu82aokm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  assert(type(string) == 'string')\n\
    \  local n = string:len()\n  if n <= 1 then\n    return string\n  end\n  local\
    \ prefix = string:sub(1, n - 1)\n  local suffix = string:sub(n)\n  if is_palindrome(suffix)\
    \ then\n    return string\n  end\n  return make_palindrome(prefix) .. suffix:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsmj6_bnv.lua:19:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpsmj6_bnv.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpsmj6_bnv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Return given string if\
    \ it's empty.\n  if string == \"\" then\n    return string\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmmslo5dv.lua:27: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n    local suffix_begin, suffix_end\
    \ = find_longest_palindrome_suffix(string)\n    local suffix = string:sub(suffix_begin,\
    \ suffix_end)\n    -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    local prefix = string:sub(1,\
    \ suffix_begin - 1)\n    return prefix .. suffix .. string.reverse(prefix)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoc7tu03e.lua:13:\
    \ attempt to call a nil value (global 'find_longest_palindrome_suffix')\nstack\
    \ traceback:\n\t/tmp/tmpoc7tu03e.lua:13: in local 'candidate'\n\t/tmp/tmpoc7tu03e.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_prefix =\
    \ string:reverse()\n  local reversed_suffix = string:reverse()\n  -- Find the\
    \ longest palindromic suffix.\n  while not is_palindrome(string .. reversed_suffix)\
    \ do\n    reversed_suffix = reversed_suffix:sub(2)\n  end\n  return string ..\
    \ reversed_prefix:sub(#reversed_suffix + 1)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1hefdqfq.lua:15:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp1hefdqfq.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1hefdqfq.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome_suffix\
    \ = find_palindrome_suffix(string)\n    local prefix = string:sub(1, #string -\
    \ #palindrome_suffix)\n    local palindrome = string .. reverse(prefix)\n    return\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzjvzxerj.lua:12:\
    \ attempt to call a nil value (global 'find_palindrome_suffix')\nstack traceback:\n\
    \t/tmp/tmpzjvzxerj.lua:12: in local 'candidate'\n\t/tmp/tmpzjvzxerj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix_length = get_max_postfix_palindrome_length(string)\n\
    \  local palindrome_length = utf8.len(string)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg0jqx3df.lua:25: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local i = #string\n  while\
    \ i > 0 do\n    local substring = string:sub(i)\n    if substring == substring:reverse()\
    \ then\n      return string .. string:sub(1, #string - i):reverse()\n    end\n\
    \    i = i - 1\n  end\n  return string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5184rybm.lua:28:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp5184rybm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = longest_palindromic_postfix(string)\n\
    \    return string .. string.reverse(string):sub(1, #string - #postfix)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphaporm3w.lua:12:\
    \ attempt to call a nil value (global 'longest_palindromic_postfix')\nstack traceback:\n\
    \t/tmp/tmphaporm3w.lua:12: in local 'candidate'\n\t/tmp/tmphaporm3w.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local function palindrome_suffix(string)\n\
    \    local suffix = ''\n    local prefix = string\n    while #prefix > 0 do\n\
    \      local first_char = prefix:sub(1, 1)\n      local last_char = prefix:sub(-1)\n\
    \      if first_char == last_char then\n        suffix = first_char .. suffix\n\
    \        prefix = prefix:sub(2, -2)\n      else\n        break\n      end\n  \
    \  end\n    return suffix\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx8a7ycpf.lua:38: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local last_pos = 0\n  local\
    \ is_palindrome = true\n  local reversed_prefix = ''\n  while (is_palindrome)\
    \ do\n    local last_char = string:sub(last_pos + 1, last_pos + 1)\n    reversed_prefix\
    \ = reversed_prefix .. last_char\n    local pos = 1\n    local prefix_pos = 1\n\
    \    while (pos <= last_pos) do\n      local char = string:sub(pos, pos)\n   \
    \   local prefix_char = reversed_prefix:sub(prefix_pos, prefix_pos)\n      if\
    \ (char ~= prefix_char) then\n        is_palindrome = false\n        break\n \
    \     end\n      pos = pos + 1\n      prefix_pos = prefix_pos + 1\n    end\n \
    \   if (is_palindrome) then\n      last_pos = last_pos + 1\n    end\n  end\n \
    \ return string .. reversed_prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
