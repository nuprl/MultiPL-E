name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute\
  \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
  \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
  \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
  \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"0b11010\"\
  \nlocal function rounded_avg(n, m)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
  \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
  \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n   \
  \ lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
  \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
  \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
  \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
  \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
  \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- your code here\nend", "\tif n > m then\n\t\treturn -1\n\tend\n\
    \treturn string.format(\"0b%s\", string.reverse(num2bin(math.floor((n + m) / 2))))\n\
    end", "  return n > m and -1 or ('0b' .. tostring(math.floor((n + m) / 2):int2bin()))\n\
    end", "  if n > m then return -1 end\n  local avg = math.floor((n + m) / 2)\n\
    \  return \"0b\" .. string.format(\"%b\", avg)\nend", "  if n > m then\n    return\
    \ -1\n  end\n  local a = n + m\n  a = math.floor(a / 2)\n  return string.format(\"\
    0b%b\", a)\nend", "  if n > m then return -1 end\n  return string.format(\"0b%b\"\
    , math.floor((n + m) / 2))\nend", "  local sum = 0\n  local count = 0\n  for i\
    \ = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if n > m then\n\
    \    return -1\n  end\n  local result = math.floor(sum / count)\n  return \"0b\"\
    \ .. string.format(\"%b\", result)\nend", "  local sum, cnt = 0, 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    cnt = cnt + 1\n  end\n  if cnt == 0 then return\
    \ -1 end\n  return bit32.lshift(bit32.arshift(sum, 1) + bit32.band(sum, 1), 1)\n\
    end", "    if n > m then return -1 end\n    local avg = math.floor((n + m) / 2)\n\
    \    return string.format(\"0b%s\", tostring(avg))\nend", "    if n > m then\n\
    \        return -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum\
    \ = sum + i\n    end\n    local average = sum / (m - n + 1)\n    local rounded_average\
    \ = math.floor(average + 0.5)\n    return \"0b\" .. tostring(rounded_average)\n\
    end", "    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n\
    \    local avg = math.floor(sum / (m - n + 1))\n    if avg == 0 then\n       \
    \ return avg\n    else\n        return string.format(\"0b%s\", bit.tobinary(avg))\n\
    \    end\nend", "    if n > m then\n        return -1\n    end\n    local result\
    \ = math.floor((n + m) / 2)\n    return string.format(\"0b%s\", result:base(2))\n\
    end", "    if n > m then\n        return -1\n    end\n    local avg = math.floor((n\
    \ + m) / 2)\n    return string.format(\"0b%s\", dec2bin(avg))\nend", "  if n >\
    \ m then return -1 end\n  local sum = n\n  for i = n + 1, m do\n    sum = sum\
    \ + i\n  end\n  local avg = sum / (m - n + 1)\n  avg = avg + 0.5\n  avg = math.floor(avg)\n\
    \  return \"0b\" .. tostring(base(avg, 2))\nend", "\tif n > m then\n\t\treturn\
    \ -1\n\tend\n\tlocal avg = math.ceil((n + m) / 2)\n\treturn string.format(\"0b%d\"\
    , math.tointeger(avg))\nend", "\t-- your code here\nend", "  \n  -- if n is greater\
    \ than m return -1\n  if n > m then\n    return -1\n  end\n  \n  -- initializing\
    \ the variable 'result' with the value of n + m divided by 2\n  local result =\
    \ (n + m) / 2\n  \n  -- initializing the variable 'string' with a rounded value\
    \ of 'result'\n  local string = math.floor(result + 0.5)\n  \n  -- return a stringified\
    \ version of a result in binary\n  return '0b' .. string.format('%x', string)\n\
    \  \nend", "  -- your code here\nend", "    -- your code here\n    local sum =\
    \ 0\n    if (n > m) then\n        return -1\n    end\n    for i = n, m do\n  \
    \      sum = sum + i\n    end\n    local avg = sum / (m - n + 1)\n    avg = math.floor(avg\
    \ + 0.5)\n    return \"0b\" .. string.format(\"%b\", avg)\nend", "  local count\
    \ = 0\n  local sum = 0\n  if n > m then return -1 end\n  for i = n, m do\n   \
    \ count = count + 1\n    sum = sum + i\n  end\n  local avg = math.floor(sum /\
    \ count)\n  return string.format(\"0b%s\", string.format(\"%d\", avg))\nend",
  "    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1))\n    if n > m then\n        return -1\n\
    \    else\n        return \"0b\" .. to_binary(avg)\n    end\nend", "    if n >\
    \ m then\n        return -1\n    end\n    local sum = 0\n    for i = n, m do\n\
    \        sum = sum + i\n    end\n    local avg = math.floor(sum / (m - n + 1)\
    \ + 0.5)\n    return \"0b\" .. string.format(\"%b\", avg)\nend", "    if n > m\
    \ then return -1 end\n    return string.format(\"0b%s\", string.sub(string.format(\"\
    %x\", math.floor((n + m) / 2)), -1))\nend", "  -- TODO: Implement me!\nend", " \
    \ if n > m then\n    return -1\n  end\n  return string.format(\"0b%s\",\n    string.from(\n\
    \      math.floor(\n        math.avg(\n          m,\n          n\n        )\n\
    \      )\n    ):bin()\n  )\nend", "    local count = 0\n    local sum = 0\n  \
    \  if n > m then\n        return -1\n    end\n    for i = n, m do\n        count\
    \ = count + 1\n        sum = sum + i\n    end\n    local ans = math.floor(sum\
    \ / count)\n    return string.format(\"0b%s\", string.format(\"%d\", ans):reverse():gsub(\"\
    (...)\", \"%1 \"):reverse():gsub(\"%s+\", \"\"))\nend", "    local result = math.floor((n\
    \ + m) / 2)\n    if n > m then\n        return -1\n    else\n        return \"\
    0b\" .. string.format(\"%o\", result)\n    end\nend", "  -- your code here\nend",
  "    local sum = 0\n    local count = 0\n    if n > m then return -1 end\n    for\
    \ i = n, m do\n        sum = sum + i\n        count = count + 1\n    end\n   \
    \ local avg = math.floor(sum / count)\n    return string.format(\"0b%d\", avg)\n\
    end", "    local avg = (n + m) / 2\n    return math.floor(avg) == avg and string.format(\"\
    0b%b\", avg) or string.format(\"0b%b\", math.floor(avg + 0.5))\nend", "  local\
    \ avg = math.floor((n + m) / 2)\n  return (n > m) and -1 or \"0b\" .. string.format(\"\
    %b\", avg)\nend", "  -- your code here\n  if n>m then return -1 end\n  local sum\
    \ = 0\n  for i=n,m do\n    sum = sum + i\n  end\n  sum = math.floor(sum/(m-n+1))\n\
    \  return '0b'..string.format('%x', sum)\nend", "    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"\
    0b%b\", avg)\nend", "  -- Your code here\nend", "\treturn n > m and -1 or \"0b\"\
    \ .. dec2bin(\n\t\tbit32.bnot(bit32.band(n + m, 1))\n\t\t* (bit32.rshift(n + m,\
    \ 1) + bit32.rshift(bit32.bnot(n + m), 31))\n\t)\nend", end, "    if n > m then\n\
    \        return -1\n    end\n    return ('0b%d'):format(math.floor((n + m) / 2))\n\
    end", "  -- your code here\nend", "    -- write your code here\nend", "    if\
    \ n > m then return -1 end\n    local sum = 0\n    for i = n, m do\n        sum\
    \ = sum + i\n    end\n    local avg = sum / (m - n + 1)\n    local rounded = math.floor(avg\
    \ + 0.5)\n    return \"0b\" .. base2(rounded)\nend", "  if n>m then return -1\
    \ end\n  local sum=0\n  for i=n,m do\n    sum=sum+i\n  end\n  local avg=sum/(m-n+1)\n\
    \  avg=math.floor(avg+0.5)\n  return string.format(\"0b%x\",avg)\nend", "    local\
    \ sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    sum = sum\
    \ / (m - n + 1)\n    sum = math.floor(sum + 0.5)\n    if n > m then return -1\
    \ end\n    return math.floor(sum)\nend", "  -- your code here\nend", "  if (n\
    \ > m) then\n    return -1\n  end\n  local s = 0\n  for i = n, m do\n    s = s\
    \ + i\n  end\n  local a = math.floor(s / (m - n + 1))\n  return '0b' .. string.format('%b',\
    \ a)\nend", end, "    if n > m then\n        return -1\n    end\n    local sum\
    \ = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local avg = sum\
    \ / (m - n + 1)\n    return '0b' .. math.floor(avg + 0.5)\nend", "    local min,\
    \ max = math.min(n, m), math.max(n, m)\n    if min == max then\n        return\
    \ \"0b\" .. string.format(\"%x\", max)\n    end\n    local sum = 0\n    for i\
    \ = min, max do\n        sum = sum + i\n    end\n    local avg = math.floor(sum\
    \ / (max - min + 1) + 0.5)\n    return \"0b\" .. string.format(\"%x\", avg)\n\
    end", "  local avg = math.floor((n + m) / 2)\n  return avg >= n and avg <= m and\
    \ string.format(\"0b%s\", avg) or -1\nend", "\tif n > m then\n\t\treturn -1\n\t\
    end\n\tlocal a = math.floor((n + m) / 2)\n\treturn \"0b\" .. string.format(\"\
    %b\", a)\nend", "  -- insert your code here\nend", "    if n > m then\n      \
    \  return -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum\
    \ + i\n    end\n    local avg = sum / (m - n + 1)\n    return (\"0b%b\"):format(math.floor(avg\
    \ + 0.5))\nend", "   -- Remove this line and add your code here.\n   local sum\
    \ = 0\n   if n > m then\n      return -1\n   end\n   for i = n, m do\n      sum\
    \ = sum + i\n   end\n   local avg = sum / (m - n + 1)\n   local rounded_avg =\
    \ math.floor(avg + 0.5)\n   local binary = string.format(\"%x\", rounded_avg)\n\
    \   binary = \"0b\" .. binary\n   return binary\nend", "    if n > m then\n  \
    \      return -1\n    end\n    return '0b' .. bit32.tobinary(math.floor((n + m)\
    \ / 2))\nend", "  if n > m then return -1 end\n  return string.format(\"0b%s\"\
    , tostring(bit32.rshift(bit32.band(bit32.rshift(n, 1) + bit32.rshift(m, 1), 0xFFFE),\
    \ 1)))\nend", "  -- your code here\nend", "  if n > m then return -1 end\n  local\
    \ sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local average = sum\
    \ / (m - n + 1)\n  local result = string.format(\"%0.0f\", average)\n  return\
    \ \"0b\" .. result\nend", "    if n > m then\n        return -1\n    end\n   \
    \ return string.format(\"0b%s\", string.format(\"%b\", math.floor((n + m) / 2)))\n\
    end", "\treturn (n+m)/2\nend", "    if n > m then\n        return -1\n    end\n\
    \    local average = math.floor((n + m) / 2)\n    return string.format(\"0b%b\"\
    , average)\nend", "    -- Check for valid input\n    if (n > m) then\n       \
    \ return -1\n    end\n    -- Calculate average of n and m\n    local avg = (n\
    \ + m) / 2\n    -- Convert to an integer rounded up to the nearest integer\n \
    \   avg = math.ceil(avg)\n    -- Convert to binary\n    avg = tonumber(avg, 2)\n\
    \    -- Return formatted binary number\n    return string.format(\"0b%s\", avg)\n\
    end", "\tif n > m then return -1 end\n\treturn string.format(\"0b%s\", math.tointeger(math.floor((n\
    \ + m) / 2)))\nend", "    -- Write your code here\n    return nil\nend", "   \
    \ if n > m then\n        return -1\n    end\n    local avg = math.floor((n + m)\
    \ / 2)\n    return \"0b\" .. math.tointeger(avg)\nend", "  if n > m then return\
    \ -1 end\n  local avg = (n + m) / 2\n  local avg_int = math.floor(avg + 0.5)\n\
    \  return \"0b\" .. to_binary(avg_int)\nend", "    if n > m then\n        return\
    \ -1\n    end\n    local res = n\n    for i = n + 1, m do\n        res = res +\
    \ i\n    end\n    return math.tointeger(res / (m - n + 1))\nend", "   -- write\
    \ your code here\n   return \"\"\nend", "    local sum = 0\n    for i = n, m do\n\
    \        sum = sum + i\n    end\n    local avg = math.floor(sum / (m - n + 1))\n\
    \    return \"0b\" .. math.tointeger(avg)\nend", "  return (n + m) % 2 == 0 and\n\
    \         math.floor((n + m) / 2) == 0 and\n         m > n and\n         string.format(\"\
    0b%s\", dec2bin(math.floor((n + m) / 2))) or\n         m < n and\n         -1\
    \ or\n         ''\nend", "\tif n > m then return -1 end\n\treturn math.floor((n\
    \ + m) / 2)\nend", "  local sum = 0\n  if n > m then return -1 end\n  for i =\
    \ n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n + 1))\n\
    \  local bin = ''\n  while avg > 0 do\n    bin = tostring(avg % 2) .. bin\n  \
    \  avg = math.floor(avg / 2)\n  end\n  return '0b' .. bin\nend", "  if n > m then\
    \ return -1 end\n  local avg = (n + m) / 2\n  local avg_int = math.floor(avg +\
    \ 0.5)\n  return string.format(\"0b%s\", tostring(avg_int))\nend", "    local\
    \ avg = math.floor((n + m) / 2)\n    if n <= m then\n        return string.format(\"\
    0b%s\", convert_to_binary(avg))\n    else\n        return -1\n    end\nend", " \
    \   if n > m then\n        return -1\n    end\n    local sum = 0\n    for i =\
    \ n, m do\n        sum = sum + i\n    end\n    local avg = math.floor(sum / (m\
    \ - n + 1) + 0.5)\n    return string.format(\"0b%x\", avg)\nend", "  if n > m\
    \ then return -1 end\n  return string.format(\"0b%s\", string.sub(string.format(\"\
    %o\", math.floor((n + m) / 2 + 0.5)), 2))\nend", "  if (n > m) then\n    return\
    \ -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ string.format(\"0b%s\", tostring(sum/(m-n+1)))\nend", "    if n > m then\n \
    \       return -1\n    end\n    local c = math.floor((n + m) / 2)\n    return\
    \ string.format(\"0b%s\", c % 2 == 0 and string.rep(\"1\", c / 2) or string.rep(\"\
    1\", c / 2 + 1))\nend", "  -- your code here\nend", "  if n > m then\n    return\
    \ -1\n  end\n  return string.format(\"0b%d\", math.floor((n + m) / 2))\nend",
  "  -- your code here\nend", "  local avg = math.floor((n + m) / 2)\n  return ((n\
    \ <= m) and (\"0b\" .. to_binary(avg))) or -1\nend", "  if n > m then return -1\
    \ end\n  local res = 0\n  for i = n, m do\n    res = res + i\n  end\n  res = math.floor(res\
    \ / (m - n + 1))\n  return string.format(\"0b%s\", toBinary(res))\nend", "   \
    \ local function avg(a, b)\n        return math.floor((a + b) / 2)\n    end\n\
    \    if n > m then\n        return -1\n    end\n    return string.format(\"0b%s\"\
    , tostring(avg(n, m)))\nend", "  if n > m then return -1 end\n  local sum = 0\n\
    \  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"0b%b\"\
    , math.floor(sum / (m - n + 1) + 0.5))\nend", "    -- Write your code here.\n\
    end", "    -- TODO: Implement\nend", "    local sum = 0\n    if n > m then return\
    \ -1 end\n    for i = n, m do\n        sum = sum + i\n    end\n    return \"0b\"\
    \ .. dec2bin(math.floor(sum / ((m - n) + 1)))\nend", "  return n > m and -1 or\
    \ string.format(\"0b%s\", string.sub(string.format(\"%x\", math.floor((n + m)\
    \ / 2 + 0.5)), 2))\nend", "  if n > m then\n    return -1\n  end\n  return \"\
    0b\" .. tonumber(string.format(\"%x\", math.floor((n + m) / 2)), 16)\nend", " \
    \   if n > m then\n        return -1\n    end\n    local avg = math.floor((n +\
    \ m) / 2)\n    return '0b' .. string.format('%b', avg)\nend", "    -- compute\
    \ the average of n and m\n    -- round it to the nearest integer\n    -- convert\
    \ the answer to binary\n    -- return the answer", "  if n > m then return -1\
    \ end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ \"0b\" .. string.format(\"%b\", math.floor(sum / (m - n + 1) + 0.5))\nend",
  "  if n > m then\n    return -1\n  end\n  return \"0b\" .. tostring(math.floor((n\
    \ + m) / 2))\nend", end, "  local avg = math.floor((n + m) / 2)\n  return avg\
    \ >= n and avg <= m and \"0b\" .. to_binary(avg) or -1\nend", "  if n > m then\
    \ return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n\
    \  local avg = math.floor(sum / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\n\
    end", "  if n > m then return -1 end\n  local sum = 0\n  for i = n, m do\n   \
    \ sum = sum + i\n  end\n  return string.format(\"0b%b\", math.floor(sum / (m -\
    \ n + 1) + 0.5))\nend", "   local sum = 0\n   for i = n, m do\n      sum = sum\
    \ + i\n   end\n   local avg = math.floor(sum / (m - n + 1) + 0.5)\n   return string.format(\"\
    0b%x\", avg)\nend", "\treturn ((m + n) / 2) & (0xFFFFFFFF)\nend", "    if n >\
    \ m then\n        return -1\n    end\n    local avg = math.floor((n + m) / 2)\n\
    \    return \"0b\" .. string.format(\"%b\", avg)\nend", "  local v = math.floor((n\
    \ + m) / 2)\n  if n > m then\n    return -1\n  end\n  return string.format(\"\
    0b%s\", bin(v))\nend", "  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  local avg = math.floor(sum / (m - n + 1))\n  if n > m then\n    return\
    \ -1\n  else\n    return \"0b\" .. tostring(avg)\n  end\nend", "  if n > m then\
    \ return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n\
    \  return string.format(\"0b%s\",tonumber(tostring(sum / (m - n + 1)), 10):sub(1,\
    \ -3))\nend", "    if n > m then\n        return -1\n    end\n    local sum =\
    \ 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return \"0b\" ..\
    \ tonumber(tostring(math.floor(sum / (m - n + 1))), 10):reverse():gsub(\".\",\
    \ {[\"0\"] = \"000\", [\"1\"] = \"001\", [\"2\"] = \"010\", [\"3\"] = \"011\"\
    , [\"4\"] = \"100\", [\"5\"] = \"101\", [\"6\"] = \"110\", [\"7\"] = \"111\"}):reverse()\n\
    end", "    -- Your code here!\nend", "  -- your code here\nend", "  return n >\
    \ m and -1 or string.format(\"0b%s\", bit32.lshift(math.floor((n + m) / 2 + 0.5),\
    \ 1))\nend", "  -- you code here\n  local avg = 0\n  local result = \"\"\n  if\
    \ n > m then\n    return -1\n  end\n  for i = n, m do\n    avg = avg + i\n  end\n\
    \  avg = math.floor(avg / (m - n + 1))\n  while avg > 0 do\n    result = result\
    \ .. (avg % 2)\n    avg = math.floor(avg / 2)\n  end\n  return \"0b\" .. result\n\
    end", "    if n > m then\n        return -1\n    end\n    return string.format(\"\
    0b%s\", tostring(math.floor((n + m) / 2)))\nend", "\t-- body\nend", "    if n\
    \ > m then\n        return -1\n    end\n    -- Calculate the average and round\
    \ it\n    local average = math.floor((n + m) / 2)\n    -- Convert the average\
    \ to binary, then convert that binary number to a string and output it\n    return\
    \ string.format(\"0b%s\", bit.tobinary(average))\nend", "    -- Your code here\n\
    \    if n > m then\n        return -1\n    end\n    local average = math.floor((n\
    \ + m) / 2)\n    local result = \"\"\n    local count = 0\n    while average ~=\
    \ 0 do\n        result = tostring(average % 2) .. result\n        average = math.floor(average\
    \ / 2)\n        count = count + 1\n    end\n    return \"0b\" .. result\nend",
  "\tif n > m then\n\t\treturn -1\n\tend\n\tlocal sum = n + m\n\tlocal howMany = 2\n\
    \tlocal avg = sum / howMany\n\tlocal rounded = math.floor(avg + 0.5)\n\treturn\
    \ \"0b\" .. tostring(string.format(\"%x\", rounded))\nend", "\tif n > m then return\
    \ -1 end\n\tlocal avg = math.floor((n + m) / 2)\n\treturn \"0b\" .. tostring(avg)\n\
    end", "    if n > m then return -1 end\n    local sum = 0\n    for i = n, m do\n\
    \        sum = sum + i\n    end\n    local avg = sum / (m - n + 1)\n    local\
    \ answer = math.floor(avg + 0.5)\n    return \"0b\" .. string.format(\"%b\", answer)\n\
    end", "  return (m < n) and -1 or ((m + n) / 2)\nend", "    local average = math.floor((n\
    \ + m) / 2)\n    if (n > m) then\n        return -1\n    else\n        return\
    \ \"0b\" .. average\n    end\nend", "    if n > m then\n        return -1\n  \
    \  end\n    return string.format(\"0b%s\", tostring(dec2bin(math.floor((n + m)\
    \ / 2))))\nend", "  -- your code here\nend", "  local sum = 0\n  for i = n, m\
    \ do\n    sum = sum + i\n  end\n  local avg = sum / (m - n + 1)\n  local int,\
    \ frac = math.modf(avg)\n  if frac >= 0.5 then\n    int = int + 1\n  end\n  return\
    \ string.format(\"0b%s\", string.format(\"%o\", int))\nend", "\t-- Write your\
    \ code here.\nend", "  -- YOUR CODE HERE\nend", "    local sum, cnt = 0, 0\n \
    \   if n > m then return -1 end\n    for i = n, m do\n        sum = sum + i\n\
    \        cnt = cnt + 1\n    end\n    return string.format(\"0b%0.f\", math.floor(sum\
    \ / cnt + 0.5))\nend", "    if n > m then\n        return -1\n    end\n    local\
    \ count = 0\n    local sum = 0\n    for i = n, m do\n        count = count + 1\n\
    \        sum = sum + i\n    end\n    local avg = math.floor(sum / count + 0.5)\n\
    \    return \"0b\" .. tobin(avg)\nend", "    local tot = 0\n    for i = n, m do\n\
    \        tot = tot + i\n    end\n    local rounded = math.floor(tot / (m - n +\
    \ 1) + 0.5)\n    return string.format(\"0b%x\", rounded)\nend", "  if n > m then\
    \ return -1 end\n  local c = (n + m) / 2\n  return string.format(\"0b%s\", math.floor(c\
    \ + 0.5))\nend", "  if n > m then return -1 end\n  local sum = 0\n  for i = n,\
    \ m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n + 1) +\
    \ 0.5)\n  return string.format(\"0b%s\", tostring(tonumber(avg, 10)))\nend", " \
    \ if (n > m) then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  local avg = math.ceil(sum / (m - n + 1))\n  return string.format(\"\
    0b%s\", tobin(avg))\nend", "\tif n > m then\n\t\treturn -1\n\tend\n\tlocal s =\
    \ 0\n\tfor i = n, m do\n\t\ts = s + i\n\tend\n\tlocal a = s / (m - n + 1)\n\t\
    return \"0b\" .. tostring(bit32.bor(math.floor(a + 0.5), 0xffffffff))\nend", end,
  "  local avg = math.floor((n + m) / 2)\n  if (n > m) then return -1 end\n  return\
    \ \"0b\" .. string.format(\"%b\", avg)\nend", "  if n > m then\n    return -1\n\
    \  end\n  local avg = (n + m) / 2\n  return \"0b\" .. string.format(\"%b\", math.floor(avg\
    \ + 0.5))\nend", "    local avg = math.floor((n + m) / 2)\n    return (n > m)\
    \ and -1 or (\"0b\" .. tostring(avg))\nend", "    if n > m then\n        return\
    \ -1\n    end\n    local avg = math.ceil((n + m) / 2)\n    return string.format(\"\
    0b%x\", avg)\nend", "    if n > m then\n        return -1\n    end\n    local\
    \ sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return string.format(\"\
    0b%b\", bit32.rshift(sum, m - n))\nend", "  if n > m then return -1 end\n  local\
    \ sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = sum / (m\
    \ - n + 1)\n  return string.format(\"0b%d\", avg)\nend", "    local r = math.floor((n\
    \ + m) / 2 + 0.5)\n    if r < n then\n        return -1\n    end\n    return '0b'\
    \ .. string.format('%X', r)\nend", "  -- YOUR CODE HERE\nend", "    if n > m then\
    \ return -1 end\n    local x = math.floor((n + m) / 2)\n    return \"0b\" .. string.format(\"\
    %b\", x)\nend", "  if n > m then return -1 end\n  local r = 0\n  for i = n, m\
    \ do\n    r = r + i\n  end\n  return \"0b\" .. string.format(\"%b\", r/(m-n+1))\n\
    end", "  if n>m then\n    return -1\n  end\n  local avg = math.floor((n+m)/2)\n\
    \  return string.format(\"0b%s\", tostring(avg))\nend", "  local res = math.ceil((n\
    \ + m) / 2)\n  return res > m and -1 or (string.format(\"0b%s\", tostring(res)))\n\
    end", "  if n > m then\n    return -1\n  end\n  local avg = math.floor((m + n)\
    \ / 2)\n  return string.format(\"0b%s\", tostring(tonumber(avg)))\nend", "   \
    \ local avg = math.floor((n + m) / 2)\n    if n <= m then\n        return string.format(\"\
    0b%d\", avg)\n    else\n        return -1\n    end\nend", "    if n > m then\n\
    \        return -1\n    end\n    local total = 0\n    for i = n, m do\n      \
    \  total = total + i\n    end\n    local average = math.floor(total / (m - n +\
    \ 1))\n    return (\"0b%x\"):format(average)\nend", "    -- your code here\nend",
  "  if n > m then return -1 end\n  return string.format(\"0b%x\", math.floor((n +\
    \ m) / 2))\nend", "  if n > m then\n    return -1\n  end\n  return string.format(\"\
    0b%b\", math.floor((n + m) / 2))\nend", "  return \"\"\nend", "    local sum =\
    \ 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local num = sum\
    \ / (m - n + 1)\n    local t = math.floor(num + 0.5)\n    if n > m then\n    \
    \    return -1\n    else\n        return (\"0b\" .. to_binary(t))\n    end\nend",
  "  -- YOUR CODE HERE\nend", "  local av = math.floor((n + m) / 2)\n  return m >=\
    \ n and string.format(\"0b%b\", av) or -1\nend", "    local avg = math.ceil((n\
    \ + m) / 2)\n    if n > m then\n        return -1\n    else\n        return \"\
    0b\" .. tostring(avg)\n    end\nend", "    local x = math.floor((n + m) / 2)\n\
    \    return x == -1 and -1 or \"0b\" .. tostring(base10_to_base2(x))\nend", " \
    \   if n > m then return -1 end\n    local sum = 0\n    for i = n, m do\n    \
    \    sum = sum + i\n    end\n    return \"0b\" .. string.format(\"%0b\", math.floor(sum\
    \ / (m - n + 1)))\nend", "    -- Compute the average and round to the nearest\
    \ integer\n    local r = n >= m and -1 or math.floor((n + m) / 2)\n    -- Convert\
    \ the rounded average to binary and return it\n    return string.format(\"0b%s\"\
    , bit.tohex(r))\nend", "\t-- Your code here\nend", "\tif n > m then\n\t\treturn\
    \ -1\n\tend\n\tlocal sum = 0\n\tfor i = n, m do\n\t\tsum = sum + i\n\tend\n\t\
    return string.format(\"0b%s\", dec2bin(math.floor(sum / (m - n + 1) + 0.5)))\n\
    end", "  local avg = math.floor((n + m) / 2)\n  if avg < m then\n    return string.format(\"\
    0b%s\", string.format(\"%b\", avg))\n  else\n    return -1\n  end\nend", "  return\
    \ \nend", "  local avg = math.floor((n + m) / 2)\n  if avg <= 0 then return -1\
    \ end\n  return \"0b\" .. string.format(\"%b\", avg)\nend", "  -- your code here\n\
    end", "    if n>m then return -1 end\n    return (string.format(\"%x\", math.floor((m+n)/2))):gsub(\"\
    ^0x\", \"0b\")\nend", "  if n > m then\n    return -1\n  end\n  return string.format(\"\
    0b%s\", string.format(\"%x\", math.floor((n + m) / 2)))\nend", "    local sum\
    \ = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    sum = sum / (m\
    \ - n + 1)\n    if sum - math.floor(sum) >= 0.5 then\n        sum = math.ceil(sum)\n\
    \    else\n        sum = math.floor(sum)\n    end\n    return '0b' .. sum:binary()\n\
    end", "    -- your code here\nend", "  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n\
    \  if sum == 0 then\n    return -1\n  end\n  local avg = math.floor(sum / count)\n\
    \  return \"0b\" .. dec_to_bin(avg)\nend", "  if n > m then return -1 end\n  local\
    \ avg = math.floor((n + m) / 2)\n  return \"0b\" .. string.format(\"%b\", avg)\n\
    end", "  -- your solution here\nend", "   if n > m then return -1 end\n   local\
    \ sum = 0\n   for i = n, m do\n      sum = sum + i\n   end\n   return string.format(\"\
    0b%s\", toBinary(math.floor(sum / (m - n + 1))))\nend", "\tif n > m then\n\t\t\
    return -1\n\tend\n\treturn string.format(\"0b%d\", math.floor((n + m) / 2))\n\
    end", "    --..\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
