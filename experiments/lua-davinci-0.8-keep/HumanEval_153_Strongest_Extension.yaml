name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a list of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal classes = {}\n\tlocal strength\n\tlocal strongest_class\n\t\
    for i, v in ipairs(extensions) do\n\t\tlocal cap, sm = 0, 0\n\t\tfor i in v:gmatch\"\
    %u\" do cap = cap + 1 end\n\t\tfor i in v:gmatch\"%l\" do sm = sm + 1 end\n\t\t\
    strength = cap - sm\n\t\tclasses[v] = strength\n\tend\n\tlocal strongest_strength\
    \ = 0\n\tfor k, v in pairs(classes) do\n\t\tif v > strongest_strength then\n\t\
    \t\tstrongest_strength = v\n\t\t\tstrongest_class = k\n\t\tend\n\tend\n\treturn\
    \ class_name .. \".\" .. strongest_class\nend", "  -- iterate the list\n  local\
    \ strongest = extensions[1]\n  local strongest_strength = -1\n  for i, v in ipairs(extensions)\
    \ do\n    local cap = 0\n    local sm = 0\n    for c in v:gmatch\".\" do\n   \
    \   if c:find\"%u\" then\n        cap = cap + 1\n      else\n        sm = sm +\
    \ 1\n      end\n    end\n    local strength = cap - sm\n    if strength > strongest_strength\
    \ then\n      strongest = v\n      strongest_strength = strength\n    end\n  end\n\
    \  return class_name .. \".\" .. strongest\nend", "  local best_ext, best_strength\
    \ = nil, 0\n  for i, ext in ipairs(extensions) do\n    local strength = (ext:upper():gsub('[^A-Z]',\
    \ ''):len() - ext:lower():gsub('[^a-z]', ''):len())\n    if strength >= best_strength\
    \ then\n      best_ext, best_strength = ext, strength\n    end\n  end\n  return\
    \ class_name .. '.' .. best_ext\nend", "    -- your code here\n    local s = {}\n\
    \    local cap = function(str)\n        local cap = 0\n        for i = 1, #str\
    \ do\n            if string.match(str:sub(i, i), \"%u\") then\n              \
    \  cap = cap + 1\n            end\n        end\n        return cap\n    end\n\
    \    local sm = function(str)\n        local sm = 0\n        for i = 1, #str do\n\
    \            if string.match(str:sub(i, i), \"%l\") then\n                sm =\
    \ sm + 1\n            end\n        end\n        return sm\n    end\n    local\
    \ strong = function(a, b)\n        return cap(a) - sm(a) < cap(b) - sm(b)\n  \
    \  end\n    for i = 1, #extensions do\n        s[#s + 1] = extensions[i]\n   \
    \ end\n    table.sort(s, strong)\n    return class_name .. \".\" .. s[1]\nend",
  "\tlocal strongest = ''\n\tlocal strength = -10", "  local strongest = \"\"\n  local\
    \ strength = 0\n  for i, ext in ipairs(extensions) do\n    local cap = ext:gsub(\"\
    [^A-Z]\", \"\")\n    local sm = ext:gsub(\"[^a-z]\", \"\")\n    if strength <\
    \ #cap - #sm then\n      strength = #cap - #sm\n      strongest = ext\n    end\n\
    \  end\n  return class_name .. \".\" .. strongest\nend", "    -- Your code here\n\
    end", "   local strongest = 0\n   local strngstr = ''\n   for k, v in ipairs(extensions)\
    \ do\n      local A = v:lower():gsub('[^A-Z]', '')\n      local a = v:lower():gsub('[^a-z]',\
    \ '')\n      local s = #A - #a\n      if s > strongest then\n         strongest\
    \ = s\n         strngstr = v\n      end\n   end\n   return class_name .. '.' ..\
    \ strngstr\nend", "    local strongest_name, strongest_strength = nil, -100\n\
    \    for _, ext in ipairs(extensions) do\n        local strength = Count_Upper(ext)\
    \ - Count_Lower(ext)\n        if strength > strongest_strength then\n        \
    \    strongest_name, strongest_strength = ext, strength\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_name\nend", "    --[[ your code here\
    \ --]]\nend", "  local _,ext = math.max(unpack(ut.tmap(extensions, function(e)\
    \ \n    local uppercase, lowercase = string.match(e, '%u+'), string.match(e, '%l+')\n\
    \    return #uppercase - #lowercase, e\n  end)))\n  return class_name .. '.' ..\
    \ ext\nend", "   local strength = 0\n   local strongest = 'no_extensions'\n  \
    \ for _, v in ipairs(extensions) do\n      local sm = #v:gsub('[^a-z]', '')\n\
    \      local cap = #v:gsub('[^A-Z]', '')\n      local tmp = cap - sm\n      if\
    \ strength < tmp then\n         strength = tmp\n         strongest = v\n     \
    \ end\n   end\n   return class_name .. '.' .. strongest\nend", "  -- get the class\
    \ strength\n  local class_cap = #class_name:match(\"([%u]+)\")\n  local class_sm\
    \ = #class_name:match(\"([%l]+)\")\n  local class_strength = class_cap - class_sm\n\
    \  -- get the extensions strength\n  local ext_strength = {}\n  for _,ext in ipairs(extensions)\
    \ do\n    local ext_cap = #ext:match(\"([%u]+)\")\n    local ext_sm = #ext:match(\"\
    ([%l]+)\")\n    ext_strength[ext] = ext_cap - ext_sm\n  end\n  -- find the strongest\
    \ extension\n  local strongest_ext\n  for ext,strength in pairs(ext_strength)\
    \ do\n    if strength >= class_strength then\n      if strongest_ext then\n  \
    \      -- compare to current strongest\n        if strength > ext_strength[strongest_ext]\
    \ then\n          strongest_ext = ext\n        end\n      else\n        strongest_ext\
    \ = ext\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_ext\n\
    end", "    local strongest_extension_name = \"\"\n    local strongest_extension_strength\
    \ = 0\n    local capper_strength = 0\n    local smoller_strength = 0\n    for\
    \ index, extension in ipairs(extensions) do\n        capper_strength = 0\n   \
    \     smoller_strength = 0\n        for i = 1, string.len(extension) do\n    \
    \        if string.sub(extension, i, i) == string.upper(string.sub(extension,\
    \ i, i)) then\n                capper_strength = capper_strength + 1\n       \
    \     else\n                smoller_strength = smoller_strength + 1\n        \
    \    end\n        end\n        if strongest_extension_strength < (capper_strength\
    \ - smoller_strength) then\n            strongest_extension_strength = capper_strength\
    \ - smoller_strength\n            strongest_extension_name = extension\n     \
    \   end\n    end\n    return class_name .. \".\" .. strongest_extension_name\n\
    end\nprint(Strongest_Extension('I', ['Am', 'A', 'man', 'n']))", "\tlocal strongest_ext\
    \ = ''\n\tlocal min = -math.huge\n\tfor i = 1, #extensions do\n\t\tlocal ext =\
    \ extensions[i]\n\t\tlocal CAP, SM = 0, 0\n\t\tfor i = 1, #ext do\n\t\t\tlocal\
    \ char = ext:sub(i, i)\n\t\t\tif char == char:upper() then\n\t\t\t\tCAP = CAP\
    \ + 1\n\t\t\telse\n\t\t\t\tSM = SM + 1\n\t\t\tend\n\t\tend\n\t\tlocal strength\
    \ = CAP - SM\n\t\tif strength >= min then\n\t\t\tmin = strength\n\t\t\tstrongest_ext\
    \ = ext\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_ext\nend", " \
    \ -- your code here\nend", "    local strongest_extension = {name = nil, strength\
    \ = -math.huge}\n    for _, extension in ipairs(extensions) do\n        local\
    \ strength = 0\n        for _, letter in ipairs(extension) do\n            if\
    \ letter:match('%l') then strength = strength - 1\n            elseif letter:match('%u')\
    \ then strength = strength + 1 end\n        end\n        if strength > strongest_extension.strength\
    \ then\n            strongest_extension.name = extension\n            strongest_extension.strength\
    \ = strength\n        end\n    end\n    return string.format('%s.%s', class_name,\
    \ strongest_extension.name)\nend", end, "    local result = ''\n    local strongest\
    \ = 0\n    for i, v in ipairs(extensions) do\n        local strength = 0\n   \
    \     for i = 1, #v do\n            local c = v:sub(i, i)\n            if c:find('%u')\
    \ then\n                strength = strength + 1\n            elseif c:find('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest then\n            strongest = strength\n    \
    \        result = class_name .. '.' .. v\n        end\n    end\n    return result\n\
    end", "    -- your code here\n    local max = 0\n    local str = class_name\n\
    \    for key, ext in pairs(extensions) do\n        local a = ext:gsub(\"%l\",\
    \ \"\")\n        local b = ext:gsub(\"%u\", \"\")\n        local val = #a - #b\n\
    \        if val > max then\n            max = val\n            str = str .. \"\
    .\" .. ext\n        end\n    end\n    return str\nend", "\terror('Not implemented')\n\
    end", "  -- Your code here\nend", "   local strongest_strength, strongest_class\n\
    \   for _, ext in ipairs(extensions) do\n      local strength = 0\n      for char\
    \ in ext:gmatch(\"%w\") do\n         if char:find(\"%u\") then strength = strength\
    \ + 1\n         else strength = strength - 1 end\n      end\n      if not strongest_strength\
    \ or strength > strongest_strength then\n         strongest_strength = strength\n\
    \         strongest_class = ext\n      end\n   end\n   return strongest_class\
    \ and (class_name .. \".\" .. strongest_class) or \"\"\nend", "    local strength\
    \ = 0\n    local strongest = ''\n    for _, ext in ipairs(extensions) do\n   \
    \     local cap = 0\n        local sm = 0\n        for ch in ext:gmatch(\"%a\"\
    ) do\n            if ch == ch:upper() then\n                cap = cap + 1\n  \
    \          else\n                sm = sm + 1\n            end\n        end\n \
    \       local st = cap - sm\n        if math.abs(st) > strength then\n       \
    \     strength = math.abs(st)\n            strongest = ext\n        end\n    end\n\
    \    return class_name .. '.' .. strongest\nend", "    local best_strength = -math.huge\n\
    \    local best_extension = nil\n    for _,extension in ipairs(extensions) do\n\
    \        local strength = 0\n        for i = 1,#extension do\n            local\
    \ c = extension:sub(i,i)\n            if c:match(\"%u\") then\n              \
    \  strength = strength + 1\n            elseif c:match(\"%l\") then\n        \
    \        strength = strength - 1\n            end\n        end\n        if strength\
    \ > best_strength then\n            best_strength = strength\n            best_extension\
    \ = extension\n        end\n    end\n    return class_name .. \".\" .. best_extension\n\
    end", "  local cap = 0\n  local sm = 0\n  local best = nil\n  for _, ext in ipairs(extensions)\
    \ do\n    local cap = ext:gsub('[^A-Z]', ''):len()\n    local sm = ext:gsub('[^a-z]',\
    \ ''):len()\n    if best == nil or cap - sm > (best:gsub('[^A-Z]', ''):len() -\
    \ best:gsub('[^a-z]', ''):len()) then\n      best = ext\n    end\n  end\n  return\
    \ class_name .. '.' .. best\nend", "  local strong\n  local strong_score = 0\n\
    \  for _, v in ipairs(extensions) do\n    local upper = v:gsub('[^A-Z]', '')\n\
    \    local lower = v:gsub('[^a-z]', '')\n    local score = #upper - #lower\n \
    \   if score > strong_score then\n      strong = v\n      strong_score = score\n\
    \    end\n  end\n  return class_name .. '.' .. strong\nend", "\t-- your code goes\
    \ here\nend", "  local max = {name = class_name, strength = 0}\n  for _, ext in\
    \ ipairs(extensions) do\n    local strength = 0\n    for i = 1, #ext do\n    \
    \  if ext:sub(i, i):match('%u') then\n        strength = strength + 1\n      elseif\
    \ ext:sub(i, i):match('%l') then\n        strength = strength - 1\n      end\n\
    \    end\n    if strength > max.strength then\n      max.name = ext\n      max.strength\
    \ = strength\n    end\n  end\n  return class_name .. '.' .. max.name\nend", " \
    \ local max_cap = 0\n  local max_sm = 0\n  local strongest = ''\n  for i = 1,\
    \ #extensions do\n    local word = extensions[i]\n    local cap = 0\n    local\
    \ sm = 0\n    for j = 1, #word do\n      local ch = word:sub(j, j)\n      if ch:find('[A-Z]')\
    \ then\n        cap = cap + 1\n      elseif ch:find('[a-z]') then\n        sm\
    \ = sm + 1\n      end\n    end\n    local strength = cap - sm\n    if strength\
    \ > max_cap - max_sm then\n      max_cap = cap\n      max_sm = sm\n      strongest\
    \ = word\n    end\n  end\n  return class_name .. '.' .. strongest\nend", "\tlocal\
    \ strongest = {class = class_name, ext = '', str = 0}\n\tfor i, v in ipairs(extensions)\
    \ do\n\t\tlocal strength = v:upper():len() - v:lower():len()\n\t\tif strength\
    \ > strongest.str then\n\t\t\tstrongest.ext = v\n\t\t\tstrongest.str = strength\n\
    \t\tend\n\tend\n\treturn strongest.class .. '.' .. strongest.ext\nend", "    local\
    \ strongest_ext = extensions[1]\n    local strongest_ext_strength = get_strength(strongest_ext)\n\
    \    for i, ext in ipairs(extensions) do\n        local strength = get_strength(ext)\n\
    \        if strength > strongest_ext_strength then\n            strongest_ext\
    \ = ext\n            strongest_ext_strength = strength\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_ext\nend", "   \n    if not class_name\
    \ or not extensions then return class_name end", "    -- This is a regular expression\
    \ that will match an all-uppercase string\n    local uppercase_regex = \"[%u]+\"\
    \n    -- This is a regular expression that will match an all-lowercase string\n\
    \    local lowercase_regex = \"[%l]+\"\n    -- We will now calculate the strength\
    \ of each extension, so we'll create a\n    -- variable to hold the results:\n\
    \    local results = {}\n    -- We will loop through the extensions and check\
    \ their strengths, saving\n    -- the results in the results table:\n    for i,\
    \ extension in ipairs(extensions) do\n        -- First, we get the number of uppercase\
    \ characters in the extension,\n        -- matching the uppercase_regex pattern:\n\
    \        local n_uppercase = extension:match(uppercase_regex)\n        -- Then,\
    \ we get the number of lowercase characters in the extension,\n        -- matching\
    \ the lowercase_regex pattern:\n        local n_lowercase = extension:match(lowercase_regex)\n\
    \        -- We now have all the information to calculate the strength of the\n\
    \        -- extension. We save the results in the results table, adding the class\n\
    \        -- name to the extension to make the name complete:\n        results[i]\
    \ = {\n            strength = (n_uppercase or 0) - (n_lowercase or 0),\n     \
    \       name = class_name .. \".\" .. extension\n        }\n    end\n    -- We\
    \ now sort the results, sorting by strength first, and then by name in\n    --\
    \ case the strengths are equal (which is a rare case, but we'll cover it\n   \
    \ -- just in case):\n    table.sort(results, function(a, b) \n        if a.strength\
    \ == b.strength then\n            return a.name < b.name\n        else\n     \
    \       return a.strength > b.strength\n        end\n    end)\n    -- We will\
    \ now return the strongest extension in the results table:\n    return results[1].name\n\
    end", "   local num_upper = 0\n   local num_lower = 0\n   local first_upper =\
    \ 1\n   local strength = 0\n   local strongest = ''\n   local strongest_strength\
    \ = 0\n   for k,v in ipairs(extensions) do\n      num_upper = string.match(v,\
    \ \"%u\")\n      num_lower = string.match(v, \"%l\")\n      strength = num_upper\
    \ - num_lower\n      if strength > strongest_strength then\n         strongest_strength\
    \ = strength\n         strongest = v\n      end\n   end\n   return class_name\
    \ .. '.' .. strongest\nend", "    assert(type(class_name) == 'string')\n    assert(type(extensions)\
    \ == 'table')\n    local maxStrength = 0\n    local maxStrengthStr = ''\n    for\
    \ i,extension in ipairs(extensions) do\n        local strength = 0\n        for\
    \ i = 1, #extension do\n            if extension:sub(i,i):lower() == extension:sub(i,i)\
    \ then\n                strength = strength - 1\n            else\n          \
    \      strength = strength + 1\n            end\n        end\n        if strength\
    \ > maxStrength then\n            maxStrength = strength\n            maxStrengthStr\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. maxStrengthStr\n\
    end", end, "\tlocal strength = 0\n\tlocal best = \"\"\n\tfor i = 1, #extensions\
    \ do\n\t\tlocal ext = extensions[i]\n\t\tlocal cap = 0\n\t\tlocal sm = 0\n\t\t\
    for j = 1, #ext do\n\t\t\tlocal s = string.sub(ext, j, j)\n\t\t\tif string.upper(s)\
    \ == s then\n\t\t\t\tcap = cap + 1\n\t\t\telse\n\t\t\t\tsm = sm + 1\n\t\t\tend\n\
    \t\tend\n\t\tif cap - sm > strength then\n\t\t\tstrength = cap - sm\n\t\t\tbest\
    \ = ext\n\t\tend\n\tend\n\treturn class_name .. \".\" .. best\nend", "   local\
    \ strength, strongest_extension = 0, ''\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap, sm = 0, 0\n      for letter in extension:gmatch('%a') do\n\
    \         if letter:upper() == letter then\n            cap = cap + 1\n      \
    \   else\n            sm = sm + 1\n         end\n      end\n      local strength_\
    \ = cap - sm\n      if strength_ > strength then\n         strength, strongest_extension\
    \ = strength_, extension\n      end\n   end\n   return class_name .. '.' .. strongest_extension\n\
    end", "  local best_score = -1\n  local best_extension = nil\n  for _, extension\
    \ in ipairs(extensions) do\n    local capitals = 0\n    local small = 0\n    for\
    \ c in extension:gmatch(\"%a\") do\n      if c:match(\"%u\") then\n        capitals\
    \ = capitals + 1\n      else\n        small = small + 1\n      end\n    end\n\
    \    local score = capitals - small\n    if score > best_score then\n      best_score\
    \ = score\n      best_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. best_extension\nend", "  local best_extension = ''\n  local strength_min\
    \   = -2\n  for i, extension in ipairs(extensions) do\n    local CAP, SM = 0,\
    \ 0\n    for j = 1, #extension do\n      local ch = extension:sub(j, j)\n    \
    \  if     ch:byte() >= 65 and ch:byte() <= 90 then\n        CAP = CAP + 1\n  \
    \    elseif ch:byte() >= 97 and ch:byte() <= 122 then\n        SM  = SM  + 1\n\
    \      end\n    end\n    local strength = CAP - SM\n    if strength > strength_min\
    \ then\n      strength_min = strength\n      best_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. best_extension\nend", "    local strongest_extension,\
    \ str_length = \"\", 0\n    local n, a = #extensions, 1\n    while n >= a do\n\
    \        local extension, upper, lower = extensions[a], 0, 0\n        local i,\
    \ l = 1, #extension\n        while l >= i do\n            local c = extension:sub(i,\
    \ i)\n            if c:find(\"%u\") then upper = upper + 1\n            elseif\
    \ c:find(\"%l\") then lower = lower + 1 end\n            i = i + 1\n        end\n\
    \        local strength = upper - lower\n        if strength > str_length then\n\
    \            str_length = strength\n            strongest_extension = extension\n\
    \        end\n        a = a + 1\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end", "   local strength = 0\n   local index = 0\n   for i,extension in ipairs(extensions)\
    \ do\n      local cap = string.len(extension:gsub(\"%L\", \"\"))\n      local\
    \ sm = string.len(extension:gsub(\"%u\", \"\"))\n      local str = cap - sm\n\
    \      if str > strength then\n         strength = str\n         index = i\n \
    \     end\n   end\n   return class_name .. \".\" .. extensions[index]\nend", " \
    \ local strongest = 0\n  local strongest_ext = nil\n  for _,ext in ipairs(extensions)\
    \ do\n    local s = string.len(ext) - string.len(ext:gsub(\"[A-Z]\", \"\")) -\
    \ string.len(ext:gsub(\"[a-z]\", \"\"))\n    if s > strongest then\n      strongest\
    \ = s\n      strongest_ext = ext\n    end\n  end\n  return class_name .. \".\"\
    \ .. strongest_ext\nend", end, "\tlocal max_strength = 0\n\tlocal strongest_extension\
    \ = nil\n\tfor k, extension in ipairs(extensions) do\n\t\tlocal strength = 0\n\
    \t\tfor i = 1, extension:len() do\n\t\t\tlocal c = extension:sub(i, i)\n\t\t\t\
    if c:upper() == c then\n\t\t\t\tstrength = strength + 1\n\t\t\telse\n\t\t\t\t\
    strength = strength - 1\n\t\t\tend\n\t\tend\n\t\tif strength > max_strength then\n\
    \t\t\tmax_strength = strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\
    \tend\n\treturn class_name .. '.' .. strongest_extension\nend", "  local strength\
    \ = 0\n  local ext_name = \"\"\n  local num_caps = 0\n  local num_sm = 0\n  for\
    \ i, ext in ipairs(extensions) do\n    num_caps = 0\n    num_sm = 0\n    for j\
    \ = 1, string.len(ext) do\n      if string.byte(ext, j) >= 65 and string.byte(ext,\
    \ j) <= 90 then\n        num_caps = num_caps + 1\n      elseif string.byte(ext,\
    \ j) >= 97 and string.byte(ext, j) <= 122 then\n        num_sm = num_sm + 1\n\
    \      end\n    end\n    if strength < num_caps - num_sm then\n      strength\
    \ = num_caps - num_sm\n      ext_name = ext\n    end\n  end\n  return class_name\
    \ .. \".\" .. ext_name\nend", "    -- your code here\nend", "    local strongest_extension_name\
    \ = '-'\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n\
    \        local tmp_strength = 0\n        for letter in extension:gmatch('%u')\
    \ do\n            tmp_strength = tmp_strength + 1\n        end\n        for letter\
    \ in extension:gmatch('%l') do\n            tmp_strength = tmp_strength - 1\n\
    \        end\n        if tmp_strength > strength then\n            strength =\
    \ tmp_strength\n            strongest_extension_name = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension_name\nend", "  local\
    \ strongest = {strength = -math.huge, index = -1}\n  for i = 1, #extensions do\n\
    \    local caps = extensions[i]:gsub('[^A-Z]', '')\n    local lowers = extensions[i]:gsub('[^a-z]',\
    \ '')\n    local strength = (#caps - #lowers) / #extensions[i]\n    if strength\
    \ > strongest.strength then\n      strongest.strength = strength\n      strongest.index\
    \ = i\n    end\n  end\n  return class_name .. '.' .. extensions[strongest.index]\n\
    end", "  local result = class_name\n  local strength = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local str_extension = 0\n    for i=1, #extension\
    \ do\n      local code = extension:byte(i)\n      if code >= 65 and code <= 90\
    \ then\n        str_extension = str_extension + 1\n      elseif code >= 97 and\
    \ code <= 122 then\n        str_extension = str_extension - 1\n      end\n   \
    \ end\n    if str_extension > strength then\n      strength = str_extension\n\
    \      result = result .. '.' .. extension\n    end\n  end\n  return result\n\
    end", "  return class_name..\".\"..extensions[1]\nend", "\tlocal cap = function(extension)\
    \ return string.len(extension:match('%u+')) end\n\tlocal sm = function(extension)\
    \ return string.len(extension:match('%l+')) end\n\tlocal strength = function(extension)\
    \ return cap(extension) - sm(extension) end\n\tlocal strongest_extension = extensions[1]\n\
    \tfor _, extension in ipairs(extensions) do\n\t\tif strength(extension) > strength(strongest_extension)\
    \ then\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn string.format('%s.%s',\
    \ class_name, strongest_extension)\nend", "    local best_strength = 0\n    local\
    \ best_extension = \"\"\n    for _, ext in ipairs(extensions) do\n        local\
    \ strength = 0\n        for k = 1, #ext do\n            if ext:byte(k) >= string.byte('A')\
    \ and ext:byte(k) <= string.byte('Z') then\n                strength = strength\
    \ + 1\n            else\n                strength = strength - 1\n           \
    \ end\n        end\n        if strength > best_strength then\n            best_strength\
    \ = strength\n            best_extension = ext\n        end\n    end\n    return\
    \ class_name .. \".\" .. best_extension\nend", "\tlocal strongest = {name = '',\
    \ strength = 0}\n\tlocal strength = 0\n\tfor _, ext in ipairs(extensions) do\n\
    \t\tlocal cap, sm = ext:gsub('[A-Z]', ''), ext:gsub('[a-z]', '')\n\t\tstrength\
    \ = cap - sm\n\t\tif strength > strongest.strength then\n\t\t\tstrongest.name\
    \ = ext\n\t\t\tstrongest.strength = strength\n\t\tend\n\tend\n\treturn class_name\
    \ .. '.' .. strongest.name\nend", "   -- your code here\nend", "    local result\
    \ = class_name..'.'..extensions[1]\n    local strongest = 0\n    for i = 1, #extensions\
    \ do\n        local extension = extensions[i]\n        local strength = 0\n  \
    \      for char in extension:gmatch('%a') do\n            if char:match('[A-Z]')\
    \ then\n                strength = strength + 1\n            else\n          \
    \      strength = strength - 1\n            end\n        end\n        if strength\
    \ > strongest then\n            strongest = strength\n            result = class_name..'.'..extension\n\
    \        end\n    end\n    return result\nend", "    local maxStrength, maxExtension\
    \ = -math.huge, \"\"\n    for _, extension in ipairs(extensions) do\n        local\
    \ strength = extension:gsub(\"[A-Z]\", \"\"):len() - extension:gsub(\"[a-z]\"\
    , \"\"):len()\n        if strength > maxStrength then\n            maxStrength,\
    \ maxExtension = strength, extension\n        end\n    end\n    return class_name\
    \ .. \".\" .. maxExtension\nend", "    local CAP = require 'utility'", "\tlocal\
    \ str, strong_name, strong_strength = 0, nil, 0\n\tfor _, ext in ipairs(extensions)\
    \ do\n\t\tlocal cap, sm = string.upper(ext), string.lower(ext)\n\t\tfor _, letter\
    \ in ipairs({cap, sm}) do\n\t\t\tstr = (letter == cap) and (str + 1) or (str -\
    \ 1)\n\t\tend\n\t\tif str > strong_strength then\n\t\t\tstrong_strength = str\n\
    \t\t\tstrong_name = ext\n\t\tend\n\tend\n\treturn string.format('%s.%s', class_name,\
    \ strong_name)\nend", "\tlocal strongest_extension = \"\"\n\tlocal strongest_strength\
    \ = 0\n\tfor _,v in ipairs(extensions) do\n\t\tlocal uppercase_count = 0\n\t\t\
    local lowercase_count = 0\n\t\tlocal current_strength = 0\n\t\tfor i=1,#v do\n\
    \t\t\tif tonumber(v:sub(i,i)) ~= nil then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tif\
    \ v:sub(i,i):upper() == v:sub(i,i) then\n\t\t\t\tuppercase_count = uppercase_count\
    \ + 1\n\t\t\telse\n\t\t\t\tlowercase_count = lowercase_count + 1\n\t\t\tend\n\t\
    \tend\n\t\tcurrent_strength = uppercase_count - lowercase_count\n\t\tif current_strength\
    \ > strongest_strength then\n\t\t\tstrongest_strength = current_strength\n\t\t\
    \tstrongest_extension = v\n\t\tend\n\tend\n\tif strongest_extension == \"\" then\n\
    \t\treturn class_name\n\telse\n\t\treturn class_name .. \".\" .. strongest_extension\n\
    \tend\nend", "  local extension_str = ''\n  local strength = 0\n  for _,extension\
    \ in ipairs(extensions) do\n    local ext_upper = 0\n    local ext_lower = 0\n\
    \    for i = 1, #extension do\n      if (string.match(extension:sub(i,i), '[A-Z]'))\
    \ then\n        ext_upper = ext_upper + 1\n      else\n        ext_lower = ext_lower\
    \ + 1\n      end\n    end\n    if (ext_upper - ext_lower) > strength then\n  \
    \    strength = ext_upper - ext_lower\n      extension_str = extension\n    end\n\
    \  end\n  return class_name .. '.' .. extension_str\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local maxStrength = 0\n\
    \    local strength\n    local maxStrengthName = \"\"\n    local cap\n    local\
    \ sm\n    for i,v in ipairs(extensions) do\n        cap = string.len(v:match(\"\
    %u+\"))\n        sm = string.len(v:match(\"%l+\"))\n        strength = cap - sm\n\
    \        if strength > maxStrength then\n            maxStrength = strength\n\
    \            maxStrengthName = v\n        end\n    end\n    return class_name\
    \ .. \".\" .. maxStrengthName\nend", "  local strongest_extension, strongest_strength\
    \ = '', -1", "    -- your code goes here\nend", "  -- your code here\nend", " \
    \   local strength_of_extension = function(extension)\n        local strength\
    \ = 0\n        for i = 1, string.len(extension) do\n            if string.find(extension,\
    \ \"[%l]\") then\n                strength = strength - 1\n            elseif\
    \ string.find(extension, \"[%u]\") then\n                strength = strength +\
    \ 1\n            end\n        end\n        return strength\n    end\n    local\
    \ strongest_extension = extensions[1]\n    local strongest_strength = strength_of_extension(extensions[1])\n\
    \    for i = 2, #extensions do\n        local strength = strength_of_extension(extensions[i])\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extensions[i]\n        end\n \
    \   end\n    return class_name .. \".\" .. strongest_extension\nend", "    --\
    \ Your code\nend", "    local strongest_extension = \"\"\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local uppercase_count\
    \ = extension:gsub(\"[^A-Z]\", \"\"):len()\n        local lowercase_count = extension:gsub(\"\
    [^a-z]\", \"\"):len()\n        local strength = uppercase_count - lowercase_count\n\
    \        if (strength > strongest_strength) then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return string.format(\"%s.%s\", class_name, strongest_extension)\nend", " \
    \   -- your code here\n    local highest_extension = nil\n    local highest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in pairs(extension) do\n            if string.match(char,\
    \ \"%u\") then\n                extension_strength = extension_strength + 1\n\
    \            elseif string.match(char, \"%l\") then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if highest_strength\
    \ < extension_strength then\n            highest_strength = extension_strength\n\
    \            highest_extension = extension\n        end\n    end\n    return class_name\
    \ .. \".\" .. highest_extension\nend", "    local numerator = 0\n    local denominator\
    \ = 0\n    local best_numerator = 0\n    local best_denominator = 0\n    local\
    \ best_name = \"\"\n    for i, name in ipairs(extensions) do\n        numerator\
    \ = 0\n        denominator = 0\n        for j = 1, string.len(name) do\n     \
    \       local c = string.sub(name, j, j)\n            if string.byte(c) > 96 then\n\
    \                denominator = denominator + 1\n            else\n           \
    \     numerator = numerator + 1\n            end\n        end\n        if numerator\
    \ > best_numerator then\n            best_numerator = numerator\n            best_denominator\
    \ = denominator\n            best_name = name\n        elseif numerator == best_numerator\
    \ then\n            if denominator < best_denominator then\n                best_numerator\
    \ = numerator\n                best_denominator = denominator\n              \
    \  best_name = name\n            end\n        end\n    end\n    return class_name\
    \ .. \".\" .. best_name\nend", "  \n  -- write your code here\n  return nil\n\
    end", "    -- we will count the fraction by creating a list of fractions, and\
    \ then we \n    -- will sort the list, and take the strongest extension (the first\
    \ one)\n    local fractions = {}\n    for i = 1, #extensions do\n        local\
    \ extension = extensions[i]\n        local CAP = 0\n        local SM = 0\n   \
    \     for j = 1, string.len(extension) do\n            if string.find(extension,\
    \ \"[A-Z]\") then\n                CAP = CAP + 1\n            elseif string.find(extension,\
    \ \"[a-z]\") then\n                SM = SM + 1\n            end\n        end\n\
    \        local fraction = CAP - SM\n        fractions[i] = {extension, fraction}\n\
    \    end\n    -- now that we have a list of fractions, sort them according to\
    \ the fraction\n    -- and get the first one.\n    table.sort(fractions, function(a,\
    \ b) return a[2] > b[2] end)\n    return class_name .. \".\" .. fractions[1][1]\n\
    end", "  local strength = 0\n  local pos = 1\n  for i, extension in ipairs(extensions)\
    \ do\n    local CAP = 0\n    local SM = 0\n    for j = 1, #extension do\n    \
    \  if extension:byte(j) < 97 then CAP = CAP + 1\n      else SM = SM + 1 end\n\
    \    end\n    if CAP - SM > strength then \n      strength = CAP - SM\n      pos\
    \ = i\n    end\n  end\n  return class_name .. '.' .. extensions[pos]\nend", " \
    \   local cap, sm, strength = 0, 0, 0\n    local strongest_extension = extensions[1]\n\
    \    for _, ext in ipairs(extensions) do\n        cap, sm = string.len(ext:gsub('[^A-Z]',\
    \ '')),\n                  string.len(ext:gsub('[^a-z]', ''))\n        if (cap\
    \ - sm) > strength then\n            strength = cap - sm\n            strongest_extension\
    \ = ext\n        end\n    end\n    return string.format('%s.%s', class_name, strongest_extension)\n\
    end", "\tlocal strongest_extension = extensions[1]\n\tlocal strongest_strength\
    \ = 0\n\tlocal count_upper = 0\n\tlocal count_lower = 0\n\tfor extension in extensions\
    \ do\n\t\tfor i=1, #extension do\n\t\t\tif extension:sub(i,i):find(\"%u\") then\
    \ count_upper = count_upper + 1\n\t\t\telseif extension:sub(i,i):find(\"%l\")\
    \ then count_lower = count_lower + 1 end\n\t\tend\n\t\tstrength = count_upper\
    \ - count_lower\n\t\tif strength > strongest_strength then\n\t\t\tstrongest_strength\
    \ = strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\t\tcount_upper\
    \ = 0\n\t\tcount_lower = 0\n\tend\n\treturn class_name .. \".\" .. strongest_extension\n\
    end", end, "  local strongest, strongest_strength = '', 0\n  for _, extension\
    \ in ipairs(extensions) do\n    local strength = string.upper(extension):len()\
    \ - extension:len()\n    if strength > strongest_strength then\n      strongest,\
    \ strongest_strength = extension, strength\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest\nend", "   local max_strength = -100\n   local strongest_extension\
    \ = 'none'\n   for _, extension in ipairs(extensions) do\n      local strength\
    \ = 0\n      for char in extension:gmatch(\"%u\") do strength = strength + 1 end\n\
    \      for char in extension:gmatch(\"%l\") do strength = strength - 1 end\n \
    \     if strength > max_strength then\n         max_strength = strength\n    \
    \     strongest_extension = extension\n      end\n   end\n   return class_name\
    \ .. '.' .. strongest_extension\nend", "  -- your code here\n  return ''\nend",
  "  local strenght, strong_ext = 0, \"\"\n  for i, ext in ipairs(extensions) do\n\
    \    local ext_strenght = ext:gsub(\"[^A-Z]\", \"\"):len() - ext:gsub(\"[^a-z]\"\
    , \"\"):len()\n    if ext_strenght > strenght then\n      strenght, strong_ext\
    \ = ext_strenght, ext\n    end\n  end\n  return class_name .. \".\" .. strong_ext\n\
    end", "  local strongest_cap = 0\n  local strongest_sm = 0\n  local extension\
    \ = ''\n  for k, v in ipairs(extensions) do\n    local cap = 0\n    local sm =\
    \ 0\n    for i = 1, #v do\n      if v:sub(i, i):match('%u') then\n        cap\
    \ = cap + 1\n      elseif v:sub(i, i):match('%l') then\n        sm = sm + 1\n\
    \      end\n    end\n    if cap - sm > strongest_cap - strongest_sm then\n   \
    \   strongest_cap = cap\n      strongest_sm = sm\n      extension = v\n    end\n\
    \  end\n  return class_name .. '.' .. extension\nend", "\t--[[\n\t-- Count the\
    \ letters of 'AA' and 'Be'\n\tlocal aa_cap = 0\n\tlocal aa_sm = 0\n\tfor k, v\
    \ in pairs('AA') do\n\t\tif string.match(v, '[A-Z]') then\n\t\t\taa_cap = aa_cap\
    \ + 1\n\t\telseif string.match(v, '[a-z]') then\n\t\t\taa_sm = aa_sm + 1\n\t\t\
    end\n\tend\n\tlocal be_cap = 0\n\tlocal be_sm = 0\n\tfor k, v in pairs('Be') do\n\
    \t\tif string.match(v, '[A-Z]') then\n\t\t\tbe_cap = be_cap + 1\n\t\telseif string.match(v,\
    \ '[a-z]') then\n\t\t\tbe_sm = be_sm + 1\n\t\tend\n\tend\n\t-- Calculate strength\n\
    \tlocal aa_strength = aa_cap - aa_sm\n\tlocal be_strength = be_cap - be_sm\n\t\
    -- Find the strongest\n\tlocal strongest = ''\n\tif aa_strength >= be_strength\
    \ then\n\t\tstrongest = 'AA'\n\telse\n\t\tstrongest = 'Be'\n\tend\n\t--]]\n\t\
    -- Find the strongest\n\tlocal strongest = extensions[1]\n\tlocal strongest_strength\
    \ = 0\n\tfor k, v in pairs(extensions) do\n\t\tlocal cap = 0\n\t\tlocal sm = 0\n\
    \t\tfor index, char in pairs(v) do\n\t\t\tif string.match(char, '[A-Z]') then\n\
    \t\t\t\tcap = cap + 1\n\t\t\telseif string.match(char, '[a-z]') then\n\t\t\t\t\
    sm = sm + 1\n\t\t\tend\n\t\tend\n\t\tif (cap - sm) > strongest_strength then\n\
    \t\t\tstrongest = v\n\t\t\tstrongest_strength = cap - sm\n\t\tend\n\tend\n\t--\
    \ Return\n\treturn class_name .. '.' .. strongest\nend", "  if #extensions ==\
    \ 0 then\n    return class_name\n  end\n  local strength, best_extension = 0,\
    \ nil\n  for k, v in ipairs(extensions) do\n    local count = v:gsub('[%a]', '')\n\
    \    local length = #v\n    local s = count - (length - count)\n    if s > strength\
    \ then\n      strength = s\n      best_extension = v\n    end\n  end\n  return\
    \ class_name .. '.' .. best_extension\nend", "    local strongest = 0\n    local\
    \ strong_ext = ''\n    for k,v in pairs(extensions) do\n        local cap, sm\
    \ = 0, 0\n        for i=1,#v do\n            if string.find(v:sub(i,i),'%a') then\n\
    \                if string.find(v:sub(i,i),'%u') then\n                    cap\
    \ = cap + 1\n                else\n                    sm = sm + 1\n         \
    \       end\n            end\n        end\n        local diff = cap - sm\n   \
    \     if diff < strongest then\n            strongest = diff\n            strong_ext\
    \ = v\n        end\n    end\n    return class_name .. '.' .. strong_ext\nend",
  "    -- your code here\n    local max_strength = -math.huge\n    local strongest_extension\
    \ = class_name\n    for i, extension in ipairs(extensions) do\n        local uppercase_count\
    \ = 0\n        local lowercase_count = 0\n        for j, char in ipairs(extension)\
    \ do\n            if char:find(\"%u\") then\n                uppercase_count =\
    \ uppercase_count + 1\n            elseif char:find(\"%l\") then\n           \
    \     lowercase_count = lowercase_count + 1\n            end\n        end\n  \
    \      local strength = uppercase_count - lowercase_count\n        if strength\
    \ > max_strength then\n            max_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end", "  local result = ''\n  local strength = -math.huge\n  for i,ext in ipairs(extensions)\
    \ do\n    local CAP = ext:gsub('[^A-Z]', ''):len()\n    local SM = ext:gsub('[^a-z]',\
    \ ''):len()\n    local strength2 = CAP - SM\n    if strength2 > strength then\n\
    \      strength = strength2\n      result = class_name..'.'..ext\n    end\n  end\n\
    \  return result\nend", "  local strongest_ext, strongest_score = '', 0\n  for\
    \ _, ext in ipairs(extensions) do\n    local score = string.len(ext:gsub('[a-z]',\
    \ '')) - string.len(ext:gsub('[A-Z]', ''))\n    if score > strongest_score then\n\
    \      strongest_score = score\n      strongest_ext = ext\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_ext\nend", "  local extension_name = ''\n  local\
    \ strongest_strength = -999999\n  for _, extension in ipairs(extensions) do\n\
    \    local strength = Extension_Strength(extension)\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      extension_name = extension\n\
    \    end\n  end\n  return string.format('%s.%s', class_name, extension_name)\n\
    end", "    local strongest, strength = '', -1", "  -- your code here\nend", "\t\
    local strongest_ext, strength = '', 0\n\tfor _, ext in ipairs(extensions) do\n\
    \t\tlocal new_strength = (ext:gsub('[^A-Z]', ''):len() - ext:gsub('[^a-z]', ''):len())\n\
    \t\tif new_strength > strength then\n\t\t\tstrongest_ext, strength = ext, new_strength\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_ext\nend", "  if #extensions\
    \ == 0 then\n    return class_name\n  end\n  local ext_strength = {}\n  for _,ext\
    \ in ipairs(extensions) do\n    local num_lower = 0\n    local num_upper = 0\n\
    \    for letter in ext:gmatch(\".\") do\n      if letter:match(\"%l\") then\n\
    \        num_lower = num_lower + 1\n      elseif letter:match(\"%u\") then\n \
    \       num_upper = num_upper + 1\n      end\n    end\n    local strength = num_upper\
    \ - num_lower\n    table.insert(ext_strength, {ext, strength})\n  end\n  table.sort(ext_strength,\
    \ function(a,b) return a[2] > b[2] end)\n  return class_name .. \".\" .. ext_strength[1][1]\n\
    end", "    local strong_name = ''\n    local cur_strength = 0\n    for i,v in\
    \ ipairs(extensions) do\n        local s = 0\n        for j=1,#v do\n        \
    \    if string.sub(v,j,j) == string.upper(string.sub(v,j,j)) then\n          \
    \      s = s + 1\n            else\n                s = s - 1\n            end\n\
    \        end\n        if s > cur_strength then\n            cur_strength = s\n\
    \            strong_name = v\n        end\n    end\n    return class_name .. '.'\
    \ .. strong_name\nend", "\t\nend", "  -- your code here\n  local temp = 0\n  local\
    \ result = 0\n  local strongest = \"\"\n  for i = 1, #extensions do\n    result\
    \ = 0\n    for j = 1, #extensions[i] do\n      if extensions[i]:sub(j,j):match(\"\
    %u\") then\n        result = result + 1\n      elseif extensions[i]:sub(j,j):match(\"\
    %l\") then\n        result = result - 1\n      end\n    end\n    if temp < result\
    \ then\n      temp = result\n      strongest = extensions[i]\n    end\n  end\n\
    \  return class_name .. \".\" .. strongest\nend", "    extensions = extensions\
    \ or {}\n    local best_strength = 0\n    local best_extension = nil\n    for\
    \ _,extension in ipairs(extensions) do\n        local n_caps = (extension:gsub(\"\
    [^A-Z]\", \"\"):len())\n        local n_small = (extension:gsub(\"[^a-z]\", \"\
    \"):len())\n        local strength = n_caps - n_small\n        if strength > best_strength\
    \ then\n            best_strength = strength\n            best_extension = extension\n\
    \        end\n    end\n    if best_extension then\n        return class_name ..\
    \ \".\" .. best_extension\n    else\n        return class_name\n    end\nend",
  "  -- body\n  local strongest_cap = 0\n  local strongest_sm = 0\n  local strongest_name\
    \ = \"\"\n  for i = 1, #extensions do\n    local sm = 0\n    local cap = 0\n \
    \   for j = 1, #extensions[i] do\n      if extensions[i]:sub(j, j):match(\"%u\"\
    ) then\n        cap = cap + 1\n      elseif extensions[i]:sub(j, j):match(\"%l\"\
    ) then\n        sm = sm + 1\n      end\n    end\n    if (cap - sm) > (strongest_cap\
    \ - strongest_sm) then\n      strongest_cap = cap\n      strongest_sm = sm\n \
    \     strongest_name = extensions[i]\n    end\n  end\n  return class_name .. \"\
    .\" .. strongest_name\nend", "    local function strength(extension)\n       \
    \ local upcase = string.gsub(extension, '[^A-Z]', '')\n        local lowcase =\
    \ string.gsub(extension, '[^a-z]', '')\n        return #upcase - #lowcase\n  \
    \  end\n    local strongest_strength = 0\n    local strongest_name = nil\n   \
    \ for _, extension in ipairs(extensions) do\n        local s = strength(extension)\n\
    \        if s > strongest_strength then\n            strongest_strength = s\n\
    \            strongest_name = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_name\nend", "\tlocal strongest_ext = extensions[1]\n\tlocal\
    \ strength = 0\n\tfor i, ext in ipairs(extensions) do\n\t\tlocal uppercase = 0\n\
    \t\tlocal lowercase = 0\n\t\tfor j = 1, #ext do\n\t\t\tlocal letter = ext:sub(j,\
    \ j)\n\t\t\tif letter:byte() >= 65 and letter:byte() <= 90 then\n\t\t\t\tuppercase\
    \ = uppercase + 1\n\t\t\telseif letter:byte() >= 97 and letter:byte() <= 122 then\n\
    \t\t\t\tlowercase = lowercase + 1\n\t\t\tend\n\t\tend\n\t\tif uppercase - lowercase\
    \ > strength then\n\t\t\tstrength = uppercase - lowercase\n\t\t\tstrongest_ext\
    \ = ext\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_ext\nend", "\t\
    local strongest_extension_strength = -math.huge\n\tlocal strongest_extension_name\
    \ = nil\n\tfor i,extension in ipairs(extensions) do\n\t\tlocal strength = extension:gsub(\"\
    [^A-Z]\",\"\"):len() - extension:gsub(\"[^a-z]\",\"\"):len()\n\t\tif strength\
    \ > strongest_extension_strength then\n\t\t\tstrongest_extension_strength = strength\n\
    \t\t\tstrongest_extension_name = extension\n\t\tend\n\tend\n\treturn class_name\
    \ .. \".\" .. strongest_extension_name\nend", "\tlocal strongest_extension = {}\n\
    \tlocal strength = -100\n\tfor i = 1, #extensions do\n\t\tlocal extension_strength\
    \ = 0\n\t\tfor j = 1, #extensions[i] do\n\t\t\tif string.match(extensions[i]:sub(j,\
    \ j), '[A-Z]') then\n\t\t\t\textension_strength = extension_strength + 1\n\t\t\
    \telseif string.match(extensions[i]:sub(j, j), '[a-z]') then\n\t\t\t\textension_strength\
    \ = extension_strength - 1\n\t\t\tend\n\t\tend\n\t\tif extension_strength > strength\
    \ then\n\t\t\tstrongest_extension = {}\n\t\t\tstrongest_extension[1] = extensions[i]\n\
    \t\t\tstrength = extension_strength\n\t\telseif extension_strength == strength\
    \ then\n\t\t\ttable.insert(strongest_extension, extensions[i])\n\t\tend\n\tend\n\
    \tif #strongest_extension > 1 then\n\t\ttable.sort(strongest_extension)\n\tend\n\
    \treturn class_name .. '.' .. strongest_extension[1]\nend", "  local result =\
    \ { name = '', strength = 0 }\n  for i,v in ipairs(extensions) do\n    local s\
    \ = count_upper(v) - count_lower(v)\n    if s > result.strength then\n      result.name\
    \ = v\n      result.strength = s\n    end\n  end\n  return class_name .. '.' ..\
    \ result.name\nend", "  local strengths = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local CAPS = 0\n    local small = 0\n    for i = 1, #extension do\n\
    \      local char = extension:sub(i, i)\n      if char == char:upper() then\n\
    \        CAPS = CAPS + 1\n      else\n        small = small + 1\n      end\n \
    \   end\n    strengths[extension] = CAPS - small\n  end\n  local strength = -math.huge\n\
    \  local strongest = nil\n  for extension, curr_strength in pairs(strengths) do\n\
    \    if curr_strength > strength then\n      strength = curr_strength\n      strongest\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest\nend",
  "    local strength = -1\n    local strongest_extension = \"\"\n    for _, extension\
    \ in ipairs(extensions) do\n        local cap, sm = 0, 0\n        for i = 1, #extension\
    \ do\n            if string.find(extension, string.char(string.byte(extension,\
    \ i)), i, true) then\n                cap = cap + 1\n            else\n      \
    \          sm = sm + 1\n            end\n        end\n        local tmp_strength\
    \ = cap - sm\n        if tmp_strength > strength then\n            strength =\
    \ tmp_strength\n            strongest_extension = extension\n        end\n   \
    \ end\n    return string.format(\"%s.%s\", class_name, strongest_extension)\n\
    end", "    local strength = 0\n    local extension_name = ''\n    for _,v in ipairs(extensions)\
    \ do\n        local cap = 0\n        local sm = 0\n        for c in v:gmatch'.'\
    \ do\n            if c:match'%u' then\n                cap = cap + 1\n       \
    \     elseif c:match'%l' then\n                sm = sm + 1\n            end\n\
    \        end\n        local s = cap - sm\n        if s > strength then\n     \
    \       strength = s\n            extension_name = v\n        end\n    end\n \
    \   return class_name .. '.' .. extension_name\nend", "  local strength = -math.huge\n\
    \  local strongest_extension = \"\"\n  for i, extension in ipairs(extensions)\
    \ do\n    local CAP = 0\n    local SM = 0\n    for i = 1, #extension do\n    \
    \  if extension:sub(i, i):match(\"%u\") then\n        CAP = CAP + 1\n      elseif\
    \ extension:sub(i, i):match(\"%l\") then\n        SM = SM + 1\n      end\n   \
    \ end\n    local current_strength = CAP - SM\n    if current_strength > strength\
    \ then\n      strength = current_strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension\nend", " \
    \   local strength = {}\n    local largest_strength = 0\n    local strongest_extension\
    \ = ''\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = extension:gsub('%a', ''):len() - extension:gsub('%l', ''):len()\n        if\
    \ extension_strength > largest_strength then\n            largest_strength = extension_strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\nend", "  return \nend", "    local\
    \ best_extension = {}\n    local best_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for c in extension:gmatch(\"[A-Z]\"\
    ) do\n            strength = strength + 1\n        end\n        for c in extension:gmatch(\"\
    [a-z]\") do\n            strength = strength - 1\n        end\n        if strength\
    \ >= best_strength then\n            best_strength = strength\n            best_extension\
    \ = extension\n        end\n    end\n    return class_name .. \".\" .. best_extension\n\
    end", "    local strongest_extension = ''\n    local strongest_strength = 0\n\
    \    for i = 1, #extensions do\n        local caps = 0\n        local smalls =\
    \ 0\n        for j = 1, string.len(extensions[i]) do\n            local letter\
    \ = string.sub(extensions[i], j, j)\n            if string.find(letter, \"[A-Z]\"\
    ) then\n                caps = caps + 1\n            elseif string.find(letter,\
    \ \"[a-z]\") then\n                smalls = smalls + 1\n            end\n    \
    \    end\n        local strength = caps - smalls\n        if strength >= strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extensions[i]\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "   local strongest_extension_name = nil\n   local strongest_extension_strength\
    \ = nil\n   for i, e in ipairs(extensions) do\n      local caps = e:gsub('[^A-Z]',\
    \ '')\n      local smalls = e:gsub('[^a-z]', '')\n      local strength = caps:len()\
    \ - smalls:len()\n      if strongest_extension_strength == nil or strength > strongest_extension_strength\
    \ then\n         strongest_extension_name = e\n         strongest_extension_strength\
    \ = strength\n      end\n   end\n   return class_name .. '.' .. strongest_extension_name\n\
    end", "    -- YOUR CODE HERE\n    local count=0\n    local extension=\"\"\n  \
    \  for i,v in ipairs(extensions) do\n        if checker(v)>count then\n      \
    \      count=checker(v)\n            extension=v\n        end\n    end\n    return\
    \ class_name..\".\"..extension\nend", "  -- Write your code here\nend", "    extensions\
    \ = append({class_name}, extensions)\n    extensions = map(string.upper, extensions)\n\
    \    extensions = sort(extensions, function(a, b) return a < b end)\n    local\
    \ strongest_extension = extensions[1]\n    local max_strength = math.abs(Strength(strongest_extension))\n\
    \    for i = 2, #extensions do\n        local strength = math.abs(Strength(extensions[i]))\n\
    \        if strength > max_strength then\n            max_strength = strength\n\
    \            strongest_extension = extensions[i]\n        end\n    end\n    return\
    \ strongest_extension\nend", "    local strongest_extension = nil\n    local strongest_strength\
    \ = -math.huge\n    for _, ext in ipairs(extensions) do\n        local strength\
    \ = 0\n        for _, letter in ipairs(ext) do\n            if letter:isupper()\
    \ then\n                strength = strength + 1\n            else\n          \
    \      strength = strength - 1\n            end\n        end\n        if strength\
    \ > strongest_strength then\n            strongest_strength = strength\n     \
    \       strongest_extension = ext\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend", "    -- get the list of strength values\
    \ for each extension\n    local strengths = {}\n    for i, ext in ipairs(extensions)\
    \ do\n        strengths[i] = Strength(ext)\n    end\n    -- find the maximum in\
    \ the list of strength values and\n    -- get the index of the maximum\n    local\
    \ max = 0\n    local max_index = 0\n    for i, x in ipairs(strengths) do\n   \
    \     if x > max then\n            max = x\n            max_index = i\n      \
    \  end\n    end\n    -- return the class name concatenated with the extension\n\
    \    -- for the index of the maximum strength value\n    return class_name ..\
    \ '.' .. extensions[max_index]\nend", "  local strongest_strength = 0\n  local\
    \ strongest_extension = nil\n  for _, ext in ipairs(extensions) do\n    local\
    \ strength = 0\n    for c in ext:gmatch('%u') do strength = strength + 1 end\n\
    \    for c in ext:gmatch('%l') do strength = strength - 1 end\n    if strength\
    \ > strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = ext\n    end\n  end\n  return class_name .. '.' .. strongest_extension\nend",
  "    local function strength(s)\n        local c, l = 0, 0\n        for i = 1, #s\
    \ do\n            if s:sub(i, i):match(\"%u\") then\n                c = c + 1\n\
    \            else\n                l = l + 1\n            end\n        end\n \
    \       return c - l\n    end\n    local strongest, str = 0, 0\n    for i = 1,\
    \ #extensions do\n        if strength(extensions[i]) > str then\n            strongest\
    \ = i\n            str = strength(extensions[i])\n        end\n    end\n    return\
    \ class_name .. \".\" .. extensions[strongest]\nend", "  -- Your code here\nend",
  "  local max = -math.huge\n  local max_extension = ''\n  for _, extension in ipairs(extensions)\
    \ do\n    local caps = 0\n    local lowers = 0\n    for char in extension:gmatch('.')\
    \ do\n      if char:match('%u') then\n        caps = caps + 1\n      elseif char:match('%l')\
    \ then\n        lowers = lowers + 1\n      end\n    end\n    local strength =\
    \ caps - lowers\n    if strength > max then\n      max = strength\n      max_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. max_extension\nend",
  end, "    return ''\nend", "    local extension = ''\n    local strength = 0\n \
    \   for _, ext in ipairs(extensions) do\n        local cap = 0\n        local\
    \ sm = 0\n        for i = 1, string.len(ext) do\n            local c = string.sub(ext,\
    \ i, i)\n            if c >= 'A' and c <= 'Z' then\n                cap = cap\
    \ + 1\n            elseif c >= 'a' and c <= 'z' then\n                sm = sm\
    \ + 1\n            end\n        end\n        local s = cap - sm\n        if s\
    \ > strength then\n            strength = s\n            extension = ext\n   \
    \     end\n    end\n    return class_name .. '.' .. extension\nend", "\tlocal\
    \ strongest, strength = '', -10000\n\tfor i = 1, #extensions do\n\t\tlocal cap\
    \ = extensions[i]:len() - extensions[i]:lower():len()\n\t\tlocal sm = extensions[i]:len()\
    \ - extensions[i]:upper():len()\n\t\tlocal str = cap - sm\n\t\tif str > strength\
    \ then\n\t\t\tstrongest = extensions[i]\n\t\t\tstrength = str\n\t\tend\n\tend\n\
    \treturn class_name .. '.' .. strongest\nend", "  local fn = function(ext)\n \
    \   local cap = (ext:gsub('[A-Z]', ''))\n    local sm = (ext:gsub('[a-z]', ''))\n\
    \    return #cap - #sm\n  end\n  local sorted = {names = {}, strength = {}}\n\
    \  local max = 0\n  for _,ext in ipairs(extensions) do\n    local strength = fn(ext)\n\
    \    if strength > max then\n      max = strength\n    end\n    table.insert(sorted.names,\
    \ ext)\n    table.insert(sorted.strength, strength)\n  end\n  for i, v in ipairs(sorted.strength)\
    \ do\n    if v == max then\n      return string.format('%s.%s', class_name, sorted.names[i])\n\
    \    end\n  end\nend", "    local highest_strength, highest_strength_extension\
    \ = 0, nil\n    for _, ext in ipairs(extensions) do\n        local strength =\
    \ 0\n        for c in ext:gmatch('%u') do\n            strength = strength + 1\n\
    \        end\n        for c in ext:gmatch('%l') do\n            strength = strength\
    \ - 1\n        end\n        if strength > highest_strength then\n            highest_strength\
    \ = strength\n            highest_strength_extension = ext\n        end\n    end\n\
    \    return class_name .. '.' .. highest_strength_extension\nend", "    local\
    \ caps, smalls, fractions = {}, {}, {}\n    for i, ext in ipairs(extensions) do\n\
    \        -- TODO: calculate the strength of the extension.\n        local strength\
    \ = 0.0", "  local strongest_extension = ''\n  local strongest_strength = 0",
  "\tlocal extension_name = \"\"\n\tlocal strength = -1\n\tfor i = 1, #extensions\
    \ do\n\t\tlocal max, min = extensions[i]:match('([A-Z]*)[a-z]*')\n\t\tlocal new_strength\
    \ = #max - #min\n\t\tif new_strength > strength then\n\t\t\tstrength = new_strength\n\
    \t\t\textension_name = extensions[i]\n\t\tend\n\tend\n\treturn class_name .. \"\
    .\" .. extension_name\nend", "   local strongest_extension, strongest_strength\n\
    \   for _, extension in ipairs(extensions) do\n      local strength = 0\n    \
    \  for i = 1, #extension do\n         local c = extension:sub(i, i)\n        \
    \ if c:find('%u') then strength = strength + 1\n         elseif c:find('%l') then\
    \ strength = strength - 1 end\n      end\n      if not strongest_strength or strength\
    \ > strongest_strength then\n         strongest_strength = strength\n        \
    \ strongest_extension = extension\n      end\n   end\n   return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest_name = \"\"\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local c = extension:sub(i, i)\n      strength\
    \ = strength + (c:upper() == c and 1 or -1)\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_name = extension\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_name\nend", "  -- Your\
    \ code here\nend", "\t-- your code here\nend", "   local strongest_extension =\
    \ extensions[1]\n   local strongest_extension_strength = 0\n   for _, ext in ipairs(extensions)\
    \ do\n      local strength = 0\n      for i = 1, #ext do\n         local c = ext:sub(i,\
    \ i)\n         strength = strength + (c:upper() == c and 1 or -1)\n      end\n\
    \      if strength > strongest_extension_strength then\n         strongest_extension_strength\
    \ = strength\n         strongest_extension = ext\n      end\n   end\n   return\
    \ class_name .. '.' .. strongest_extension\nend", "    local strongest_extension_strength\
    \ = 0\n    local strongest_extension_name = ''\n    for i, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for c in extension:gmatch('%u') do\n\
    \            strength = strength + 1\n        end\n        for c in extension:gmatch('%l')\
    \ do\n            strength = strength - 1\n        end\n        if strength >\
    \ strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension_name = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension_name\nend", "  --\
    \ Your code here\n  local strength = 0\n  local chosen_one = ''\n  for i = 1,\
    \ #extensions do\n    local ext = extensions[i]\n    local this_strength = 0\n\
    \    for letter in ext:gmatch(\"[A-Z]\") do\n      this_strength = this_strength\
    \ + 1\n    end\n    for letter in ext:gmatch(\"[a-z]\") do\n      this_strength\
    \ = this_strength - 1\n    end\n    if this_strength > strength then\n      strength\
    \ = this_strength\n      chosen_one = ext\n    end\n  end\n  return class_name\
    \ .. '.' .. chosen_one\nend\nStrongest_Extension('Slices', {'SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'})", "\t-- your code here\nend", "    local strongest_name, strongest_strength\n\
    \    for i,extension in ipairs(extensions) do\n        local count_upper = extension:gsub('[^%u]',\
    \ ''):len()\n        local count_lower = extension:gsub('[^%l]', ''):len()\n \
    \       local strength = count_upper - count_lower\n        if not strongest_strength\
    \ or strength > strongest_strength then\n            strongest_name = extension\n\
    \            strongest_strength = strength\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_name\nend", "    local strength, extension = 0, ''\n   \
    \ for _, extension in ipairs(extensions) do\n        local new_strength = 0\n\
    \        for _, char in ipairs({extension:byte(1, #extension)}) do\n         \
    \   if 65 <= char and char <= 90 then\n                new_strength = new_strength\
    \ + 1\n            elseif 97 <= char and char <= 122 then\n                new_strength\
    \ = new_strength - 1\n            end\n        end\n        if new_strength >\
    \ strength then\n            strength, extension = new_strength, extension\n \
    \       end\n    end\n    return class_name .. '.' .. extension\nend", "    local\
    \ strongest_extension = nil\n    local strongest_extension_strength = 0\n    for\
    \ _, extension in ipairs(extensions) do\n        local cap = 0\n        local\
    \ sm = 0\n        for char in extension:gmatch(\"%a\") do\n            if char:find(\"\
    %u\") then\n                cap = cap + 1\n            else\n                sm\
    \ = sm + 1\n            end\n        end\n        local current_strength = cap\
    \ - sm\n        if current_strength > strongest_extension_strength then\n    \
    \        strongest_extension = extension\n            strongest_extension_strength\
    \ = current_strength\n        end\n    end\n    return class_name .. \".\" ..\
    \ strongest_extension\nend", "\tlocal strength = 0\n\tlocal extension = ''\n\t\
    for i,v in ipairs(extensions) do\n\t\tlocal cap,sm = v:gsub('[^%u]',''),v:gsub('[^%l]','')\n\
    \t\tlocal s = cap - sm\n\t\tif s > strength then\n\t\t\tstrength = s\n\t\t\textension\
    \ = v\n\t\tend\n\tend\n\treturn string.format('%s.%s',class_name,extension)\n\
    end", "  return ''\nend", "\tlocal function strength(ext)\n\t\tlocal cap, sm =\
    \ 0, 0\n\t\tfor c in ext:gmatch('%a') do\n\t\t\tif c:find('%u') then cap = cap\
    \ + 1\n\t\t\telse sm = sm + 1 end\n\t\tend\n\t\treturn cap - sm\n\tend\n\tlocal\
    \ best = ''\n\tlocal best_str = -math.huge\n\tfor i, ext in ipairs(extensions)\
    \ do\n\t\tlocal str = strength(ext)\n\t\tif str > best_str then best_str = str\
    \ best = ext end\n\tend\n\treturn string.format('%s.%s', class_name, best)\nend",
  end, "  local strength, strongest = -1, \"\"\n  for _, ext in ipairs(extensions)\
    \ do\n    local CAP = #ext:gsub(\"[^A-Z]\", \"\")\n    local SM = #ext:gsub(\"\
    [^a-z]\", \"\")\n    local s = CAP - SM\n    if s > strength then\n      strength\
    \ = s\n      strongest = ext\n    end\n  end\n  return class_name .. \".\" ..\
    \ strongest\nend", "    local maxStrength = -math.huge\n    local strongestExtension\n\
    \    for _, extension in ipairs(extensions) do\n        local strength = count_upper(extension)\
    \ - count_lower(extension)\n        if strength > maxStrength then\n         \
    \   maxStrength = strength\n            strongestExtension = extension\n     \
    \   end\n    end\n    return string.format('%s.%s', class_name, strongestExtension)\n\
    end", "  local max_strength = 0\n  local strongest_extension = \"\"\n  for _,\
    \ extension in ipairs(extensions) do\n    local strength = extension:gsub(\"[^A-Z]\"\
    , \"\"):len() - extension:gsub(\"[^a-z]\", \"\"):len()\n    if strength > max_strength\
    \ then\n      max_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension\nend", " \
    \   local strongest_extension_index = 1\n    local strongest_extension_strength\
    \ = -math.huge\n    for i, extension in ipairs(extensions) do\n        local lowercase_count\
    \ = 0\n        local uppercase_count = 0\n        for _, char in ipairs(extension)\
    \ do\n            if string.match(char, '[a-z]') then\n                lowercase_count\
    \ = lowercase_count + 1\n            elseif string.match(char, '[A-Z]') then\n\
    \                uppercase_count = uppercase_count + 1\n            end\n    \
    \    end\n        local strength = uppercase_count - lowercase_count\n       \
    \ if strength > strongest_extension_strength then\n            strongest_extension_index\
    \ = i\n            strongest_extension_strength = strength\n        end\n    end\n\
    \    return class_name .. '.' .. extensions[strongest_extension_index]\nend",
  "  -- your code here\nend", "\tlocal function cap_and_sm(extension)\n\t\tlocal cap,\
    \ sm = 0, 0\n\t\tfor i = 1, #extension do\n\t\t\tif (extension:sub(i, i):find(\"\
    %l\")) then\n\t\t\t\tsm = sm + 1\n\t\t\telse\n\t\t\t\tcap = cap + 1\n\t\t\tend\n\
    \t\tend\n\t\treturn cap, sm\n\tend\n\tlocal strongest_name = \"\"\n\tlocal strongest_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap, sm = cap_and_sm(extension)\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > strongest_strength then\n\t\t\
    \tstrongest_name = extension\n\t\t\tstrongest_strength = strength\n\t\tend\n\t\
    end\n\treturn class_name .. \".\" .. strongest_name\nend", "    local strongest_extension\
    \ = \"\"\n    local strongest_strength = 0\n    for i = 1, #extensions do\n  \
    \      local extension = extensions[i]\n        local strength = extension:len()\
    \ - extension:gsub(\"%u\", \"\"):len()\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return string.format(\"%s.%s\", class_name,\
    \ strongest_extension)\nend", "  local strongest_extension_name, max_strength\
    \ = '', -1\n  for _, extension_name in ipairs(extensions) do\n    local strength\
    \ = 0\n    for c in extension_name:gmatch('%u') do\n      strength = strength\
    \ + 1\n    end\n    for c in extension_name:gmatch('%l') do\n      strength =\
    \ strength - 1\n    end\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension_name = extension_name\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension_name\nend", "    local strongest\
    \ = 0\n    local index = 0\n    for i, ext in ipairs(extensions) do\n        local\
    \ cap = ext:match(\"%u\")\n        local sm = ext:match(\"%l\")\n        local\
    \ strength = (cap and #cap or 0) - (sm and #sm or 0)\n        if strength > strongest\
    \ then\n            strongest = strength\n            index = i\n        end\n\
    \    end\n    return class_name .. \".\" .. extensions[index]\nend", "  -- body\n\
    \  local strengths = {}\n  for _, e in ipairs(extensions) do\n    local CAP, SM\
    \ = 0, 0\n    for _, c in ipairs(e) do\n      if c:find('%u') then CAP = CAP +\
    \ 1\n      elseif c:find('%l') then SM = SM + 1 end\n    end\n    local strength\
    \ = CAP - SM\n    table.insert(strengths, { strength, e })\n  end\n  table.sort(strengths,\
    \ function(a, b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] < b[2])\n \
    \ end)\n  return table.concat({ class_name, strengths[1][2] }, '.')\nend", " \
    \ local strongest_class = ''\n  local strongest_strength = 0\n  for i, extension\
    \ in ipairs(extensions) do\n    local upper = {}\n    local lower = {}\n    for\
    \ char in extension:gmatch('%a') do\n      if char:match('[A-Z]') then\n     \
    \   table.insert(upper, char)\n      else\n        table.insert(lower, char)\n\
    \      end\n    end\n    local strength = #upper - #lower\n    if strength >=\
    \ strongest_strength then\n      strongest_class = extension\n      strongest_strength\
    \ = strength\n    end\n  end\n  return class_name .. '.' .. strongest_class\n\
    end", "    -- TODO: Write the function Strongest_Extension.\n    local str\n \
    \   local strength = 0\n    for _, ext in ipairs(extensions) do\n        local\
    \ s = 0\n        for i = 1, #ext do\n            if ext:sub(i, i):match(\"%u\"\
    ) then\n                s = s + 1\n            elseif ext:sub(i, i):match(\"%l\"\
    ) then\n                s = s - 1\n            end\n        end\n        if s\
    \ > strength then\n            strength = s\n            str = ext\n        end\n\
    \    end\n    return class_name .. \".\" .. str\nend", "    local count = 0\n\
    \    local ext = \"\"\n    for i = 1, #extensions do\n        local ln = #extensions[i]\n\
    \        local cap = 0\n        local sm = 0\n        for j = 1, ln do\n     \
    \       local c = extensions[i]:sub(j, j)\n            if c:match(\"%u\") then\n\
    \                cap = cap + 1\n            elseif c:match(\"%l\") then\n    \
    \            sm = sm + 1\n            end\n        end\n        local nc = cap\
    \ - sm\n        if nc > count then\n            count = nc\n            ext =\
    \ extensions[i]\n        end\n    end\n    return class_name .. \".\" .. ext\n\
    end", "   local strongest, strength = '', 0\n   for i,ext in ipairs(extensions)\
    \ do\n      local cap, sm = ext:gsub('%u', ''), ext:gsub('%l', '')\n      local\
    \ ext_strength = (cap - sm) / (#ext)\n      if (ext_strength > strength) then\n\
    \         strongest, strength = ext, ext_strength\n      end\n   end\n   return\
    \ (class_name .. '.' .. strongest)\nend", "    -- Code here\n    local strength\
    \ = 0\n    local strongest = \"\"\n    for i = 1, #extensions do\n        local\
    \ cap = 0\n        local sm = 0\n        for v in string.gmatch(extensions[i],\
    \ \"%u\") do\n            cap = cap + 1\n        end\n        for v in string.gmatch(extensions[i],\
    \ \"%l\") do\n            sm = sm + 1\n        end\n        local temp = cap -\
    \ sm\n        if strength < temp then\n            strength = temp\n         \
    \   strongest = extensions[i]\n        end\n    end\n    return class_name ..\
    \ \".\" .. strongest\nend", "  -- your code goes here\n  local strongest_extension\
    \ = ''\n  local max_strength = 0\n  for i = 1, #extensions do\n    local cap =\
    \ 0\n    local sm = 0\n    for j = 1, #extensions[i] do\n      if string.find(extensions[i]:sub(j,\
    \ j), '%u') then\n        cap = cap + 1\n      else\n        sm = sm + 1\n   \
    \   end\n    end\n    local strength = cap - sm\n    if strength > max_strength\
    \ then\n      max_strength = strength\n      strongest_extension = extensions[i]\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend", "  local\
    \ highest = {}\n  local strength = {}\n  local cap = {}\n  local sm = {}\n  local\
    \ str = ''\n  local class = ''\n  local ext = ''\n  local i = 1\n  for idx,extension\
    \ in ipairs(extensions) do\n    --print('extension: ' .. extension)\n    for idx1,char\
    \ in ipairs(extension) do\n      --print('char: ' .. char)\n      if char == string.upper(char)\
    \ then\n        cap[idx] = cap[idx] + 1\n      else\n        sm[idx] = sm[idx]\
    \ + 1\n      end\n    end\n    strength[idx] = cap[idx] - sm[idx]\n    --print('cap:\
    \ ' .. cap[idx])\n    --print('sm: ' .. sm[idx])\n    --print('strength: ' ..\
    \ strength[idx])\n    if strength[idx] > strength[i] then\n      i = idx\n   \
    \ end\n  end\n  return class_name .. '.' .. extensions[i]\nend", "   if not class_name\
    \ or type(class_name) ~= 'string' or\n      not extensions or type(extensions)\
    \ ~= 'table' then\n      return\n   end\n   -- This iterator function is called\
    \ for each item in the array\n   local function iterator(ext, i)\n      local\
    \ sm = ext:lower():gsub('[^a-z]', '')\n      local cap = ext:upper():gsub('[^A-Z]',\
    \ '')\n      -- This is added to the 'strength' array\n      return {'_', cap:len()\
    \ - sm:len(), i}\n   end\n   -- Using the iterator function, creates an array\
    \ where the first\n   -- item is the strength. The item with the highest strength\
    \ is\n   -- the first element in the array.\n   local strengthes = {}\n   for\
    \ ext, i in pairs(extensions) do\n      table.insert(strengthes, {iterator(ext,\
    \ i)})\n   end\n   -- Sort the array, from highest strength to lowest\n   table.sort(strengthes,\
    \ function(a, b)\n      return a[1] > b[1]\n   end)\n   -- Return the extension\
    \ with the highest strength\n   return class_name .. '.' .. extensions[strengthes[1][3]]\n\
    end", "    local class = class_name\n    local exts = extensions\n    local ext_strength\
    \ = 0\n    local strongest_ext = ''\n    for _, ext in ipairs(exts) do\n     \
    \   local cap = string.len(ext:gsub('[^A-Z]', ''))\n        local sm = string.len(ext:gsub('[^a-z]',\
    \ ''))\n        local strength = cap - sm\n        if strength > ext_strength\
    \ then\n            ext_strength = strength\n            strongest_ext = ext\n\
    \        end\n    end\n    return class .. '.' .. strongest_ext\nend", "    --\
    \ your code here\n    local maxStrength = 0\n    local maxName = \"\"\n    for\
    \ k, v in pairs(extensions) do\n        local upper, lower = 0, 0\n        for\
    \ n = 1, string.len(v) do\n            if string.find(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    , string.sub(v, n, n)) then\n                upper = upper + 1\n            else\n\
    \                lower = lower + 1\n            end\n        end\n        local\
    \ strength = upper - lower\n        if strength > maxStrength then\n         \
    \   maxStrength = strength\n            maxName = v\n        end\n    end\n  \
    \  return class_name .. \".\" .. maxName\nend", "    local strongest_extension\
    \ = {strength = -1, name = nil}\n    for i = 1, #extensions do\n        local\
    \ extension = extensions[i]\n        local strength = 0\n        for j = 1, #extension\
    \ do\n            if extension:sub(j, j):match('%u') then\n                strength\
    \ = strength + 1\n            elseif extension:sub(j, j):match('%l') then\n  \
    \              strength = strength - 1\n            end\n        end\n       \
    \ if strength > strongest_extension.strength then\n            strongest_extension.strength\
    \ = strength\n            strongest_extension.name = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension.name\nend", end,
  "  return class_name .. \".\" .. table.sort(extensions, function(a, b)\n    local\
    \ uppercase_a = a:gsub(\"[^A-Z]\", \"\")\n    local lowercase_a = a:gsub(\"[^a-z]\"\
    , \"\")\n    local uppercase_b = b:gsub(\"[^A-Z]\", \"\")\n    local lowercase_b\
    \ = b:gsub(\"[^a-z]\", \"\")\n    return uppercase_a - lowercase_a < uppercase_b\
    \ - lowercase_b\n  end)[1]\nend", "  local strongest_name = \"\"\n  local strongest_strength\
    \ = -math.huge\n  for _,ext in ipairs(extensions) do\n    local ca, sm = 0, 0\n\
    \    for i = 1, #ext do\n      local c = ext:sub(i,i)\n      if c:match(\"%l\"\
    ) then\n        sm = sm + 1\n      elseif c:match(\"%u\") then\n        ca = ca\
    \ + 1\n      end\n    end\n    local strength = ca - sm\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_name = ext\n    end\n\
    \  end\n  return class_name .. \".\" .. strongest_name\nend", "  -- your code\
    \ goes here\n  --local c = class_name\n  local c = {}\n  local length = #extensions\n\
    \  for i = 1, length do\n    c[i] = {\n        name = extensions[i],\n       \
    \ strength = 0,\n        size = 0\n    }\n    for j = 1, #extensions[i] do\n \
    \       c[i].size = c[i].size + 1\n        if c[i].name:sub(j,j):find(\"%u\")\
    \ then\n            c[i].strength = c[i].strength + 1\n        elseif c[i].name:sub(j,j):find(\"\
    %l\") then\n            c[i].strength = c[i].strength - 1\n        end\n    end\n\
    \  end\n  local max = c[1].strength\n  local index = 1\n  for i = 2, length do\n\
    \    if c[i].strength > max then\n        max = c[i].strength\n        index =\
    \ i\n    elseif c[i].strength == max then\n        if c[i].size < c[index].size\
    \ then\n            max = c[i].strength\n            index = i\n        end\n\
    \    end\n  end\n  return class_name .. \".\" .. c[index].name\nend", "\t-- do\
    \ your thing\nend", "  -- your code here\nend", "    local class_name = class_name\n\
    \    local strongest_extension = ''\n    local strongest_strength = 0", "  --\
    \ TODO: Implement!\n  local strength = 0\n  local my_class = \"\"\n  for i,v in\
    \ ipairs(extensions) do\n    local cap = 0\n    local sm = 0\n    for j, u in\
    \ ipairs(v) do\n      if string.match(string.sub(u, j, j), \"%u\") then\n    \
    \    cap = cap + 1\n      else\n        sm = sm + 1\n      end\n    end\n    if\
    \ (cap - sm) > strength then\n      strength = cap - sm\n      my_class = v\n\
    \    end\n  end\n  return class_name .. \".\" .. my_class\nend", "    local strongest_extension\
    \ = ''\n    local strength = -math.huge\n    for i,extension in ipairs(extensions)\
    \ do\n        local cap = extension:gsub('[^A-Z]', ''):len()\n        local sm\
    \ = extension:gsub('[^a-z]', ''):len()\n        local s = cap - sm\n        if\
    \ s > strength then\n            strength = s\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local class = string.upper(class_name)\n    local extension_name =\
    \ \"\"\n    local strength = 0\n    for i, v in ipairs(extensions) do\n      \
    \  local upper_letters = 0\n        local lower_letters = 0\n        for j, k\
    \ in ipairs(v) do\n            if k:match(\"%u\") then\n                upper_letters\
    \ = upper_letters + 1\n            elseif k:match(\"%l\") then\n             \
    \   lower_letters = lower_letters + 1\n            end\n        end\n        local\
    \ current_strength = upper_letters - lower_letters\n        if current_strength\
    \ > strength then\n            strength = current_strength\n            extension_name\
    \ = v\n        end\n    end\n    return class .. \".\" .. extension_name\nend",
  "  local class_name_lc = string.lower(class_name)\n  local strongest_ext = \"\"\n\
    \  local strength = -1\n  for _, ext in ipairs(extensions) do\n    local ext_lc\
    \ = string.lower(ext)\n    local ext_cap = #string.gsub(ext, '[^A-Z]', '')\n \
    \   local ext_sm = #string.gsub(ext, '[^a-z]', '')\n    local str = ext_cap -\
    \ ext_sm\n    if str > strength then\n      strength = str\n      strongest_ext\
    \ = ext\n    end\n  end\n  return class_name .. \".\" .. strongest_ext\nend",
  "  local best = {name = '', strength = 0}\n  for i = 1, #extensions do\n    local\
    \ current = extensions[i]\n    local caps = 0\n    local smalls = 0\n    for j\
    \ = 1, #current do\n      local c = current:sub(j, j)\n      if c:match('%u')\
    \ then\n        caps = caps + 1\n      elseif c:match('%l') then\n        smalls\
    \ = smalls + 1\n      end\n    end\n    local current_strength = caps - smalls\n\
    \    if current_strength > best.strength then\n      best.name = current\n   \
    \   best.strength = current_strength\n    end\n  end\n  return class_name .. '.'\
    \ .. best.name\nend", "    -- Write you code here\n    local strength = 0\n  \
    \  local uppercase = 0\n    local lowercase = 0\n    local strong_ext = ''\n \
    \   for i, v in ipairs(extensions) do\n        uppercase = #v:gsub('[^A-Z]', '')\n\
    \        lowercase = #v:gsub('[^a-z]', '')\n        if strength < uppercase -\
    \ lowercase then\n            strength = uppercase - lowercase\n            strong_ext\
    \ = v\n        end\n    end\n    return class_name .. '.' .. strong_ext\nend",
  "    local strongest = 0\n    local extension = ''\n    for _, e in ipairs(extensions)\
    \ do\n        local strength = 0\n        for c in e:gmatch('%u') do\n       \
    \     strength = strength + 1\n        end\n        for c in e:gmatch('%l') do\n\
    \            strength = strength - 1\n        end\n        if strength > strongest\
    \ then\n            strongest = strength\n            extension = e\n        end\n\
    \    end\n    return class_name .. '.' .. extension\nend", "  local strongest\
    \ = nil\n  local max_strength = 0\n  for i = 1, #extensions do\n    local cap,\
    \ sm = 0, 0\n    for j = 1, #extensions[i] do\n      if string.match(extensions[i],\
    \ '%u') then\n        cap = cap + 1\n      else\n        sm = sm + 1\n      end\n\
    \    end\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest = extensions[i]\n    end\n  end\n\
    \  return class_name .. '.' .. strongest\nend", "    local cap_count, small_count,\
    \ name_count, count, strongest_extension = 0, 0, 0, 0, ''\n    for i = 1, #extensions\
    \ do\n        for j = 1, #extensions[i] do\n            if string.find(extensions[i],\
    \ \"%u\") then\n                cap_count = cap_count + 1\n            elseif\
    \ string.find(extensions[i], \"%l\") then\n                small_count = small_count\
    \ + 1\n            end\n        end\n        name_count = cap_count - small_count\n\
    \        if name_count > count then\n            count = name_count\n        \
    \    strongest_extension = extensions[i]\n        end\n        cap_count, small_count,\
    \ name_count = 0, 0, 0\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "  -- your code here\n  --local CAP\n  --local SM\n  local num1,num2\n \
    \ local a\n  local value = 0\n  for i,v in ipairs(extensions) do\n    num1,num2\
    \ = 0,0\n    for a in v:gmatch(\"%u\") do\n      num1 = num1 + 1\n    end\n  \
    \  for a in v:gmatch(\"%l\") do\n      num2 = num2 + 1\n    end\n    if num1 -\
    \ num2 > value then\n      value = num1 - num2\n      name = v\n    end\n  end\n\
    \  return class_name..\".\"..name\nend", "    local strongest_ext = extensions[1]\n\
    \    local strongest_strength = 0\n    for _, ext in ipairs(extensions) do\n \
    \       local strength = 0\n        for char in ext:gmatch('[A-Z]') do\n     \
    \       strength = strength + 1\n        end\n        for char in ext:gmatch('[a-z]')\
    \ do\n            strength = strength - 1\n        end\n        if strength >\
    \ strongest_strength then\n            strongest_strength = strength\n       \
    \     strongest_ext = ext\n        end\n    end\n    return class_name .. '.'\
    \ .. strongest_ext\nend", end, "    local class_name = class_name\n    local strongest_strength\
    \ = 0\n    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for i = 1, #extension do\n         \
    \   if string.match(extension:sub(i, i), '[A-Z]') then\n                strength\
    \ = strength + 1\n            elseif string.match(extension:sub(i, i), '[a-z]')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = {extension}\n        elseif strength\
    \ == strongest_strength then\n            table.insert(strongest_extension, extension)\n\
    \        end\n    end\n    table.sort(strongest_extension)\n    class_name = class_name\
    \ .. '.' .. strongest_extension[1]\n    return class_name\nend", "  local class_name\
    \ = class_name\n  local extension_strength = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local strength = 0\n    for i = 1, #extension do\n      local letter\
    \ = extension:sub(i, i)\n      if letter == letter:upper() then\n        strength\
    \ = strength + 1\n      else\n        strength = strength - 1\n      end\n   \
    \ end\n    extension_strength[extension] = strength\n  end\n  local max_strength,\
    \ strongest_extension = 0, \"\"\n  for extension, strength in pairs(extension_strength)\
    \ do\n    if strength > max_strength then\n      max_strength = strength\n   \
    \   strongest_extension = extension\n    end\n  end\n  return string.format(\"\
    %s.%s\", class_name, strongest_extension)\nend", "    local strongest = nil\n\
    \    local strength = 0\n    for i, ext in ipairs(extensions) do\n        local\
    \ cap = ext:gsub('[^A-Z]', ''):len()\n        local sm = ext:gsub('[^a-z]', ''):len()\n\
    \        local str = cap - sm\n        if str > strength then\n            strongest\
    \ = ext\n            strength = str\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest\nend", "  local ext = '', strength = 0,\n        count_upper\
    \ = function(s) return #(s:gsub('[^%u]', '')) end,\n        count_lower = function(s)\
    \ return #(s:gsub('[^%l]', '')) end\n  for _, s in ipairs(extensions) do\n   \
    \ local tmp = (count_upper(s) - count_lower(s))\n    if tmp > strength then\n\
    \      ext = s\n      strength = tmp\n    end\n  end\n  return class_name .. '.'\
    \ .. ext\nend", "  local strongest_extension = \"\"\n  local strongest_extension_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local extension_strength\
    \ = (extension:match(\"%u\") or \"\"):len() - (extension:match(\"%l\") or \"\"\
    ):len()\n    if extension_strength > strongest_extension_strength then\n     \
    \ strongest_extension = extension\n      strongest_extension_strength = extension_strength\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension\nend", end,
  "    local function strength(extension)\n        local cap, sm = 0, 0\n        for\
    \ i = 1, extension:len() do\n            local c = extension:sub(i, i)\n     \
    \       if c:match('%u') then\n                cap = cap + 1\n            elseif\
    \ c:match('%l') then\n                sm = sm + 1\n            end\n        end\n\
    \        return cap - sm\n    end\n    local max = -math.huge\n    local chosen_extension\
    \ = nil\n    for i = 1, #extensions do\n        local s = strength(extensions[i])\n\
    \        if s > max then\n            max = s\n            chosen_extension =\
    \ extensions[i]\n        end\n    end\n    return class_name .. '.' .. chosen_extension\n\
    end", "  local strength, name, caps, smalls\n  strength = 0\n  name = class_name\n\
    \  for _,v in ipairs(extensions) do\n    caps = 0\n    smalls = 0\n    for i =\
    \ 1,#v do\n      if v:sub(i,i):match('%u') then\n        caps = caps + 1\n   \
    \   elseif v:sub(i,i):match('%l') then\n        smalls = smalls + 1\n      end\n\
    \    end\n    if (caps - smalls) > strength then\n      strength = caps - smalls\n\
    \      name = class_name .. '.' .. v\n    end\n  end\n  return name\nend", " \
    \ local best_ext = \"\"\n  local best_strength = 0", "    -- Use a simple counter\
    \ to measure the strength.\n    local strength = 0\n    local strongest_extension\
    \ = ''\n    for _, ext in ipairs(extensions) do\n        local ext_strength =\
    \ 0\n        for _, char in ipairs(ext) do\n            if char:match('[A-Z]')\
    \ then\n                ext_strength = ext_strength + 1\n            elseif char:match('[a-z]')\
    \ then\n                ext_strength = ext_strength - 1\n            end\n   \
    \     end\n        if ext_strength > strength then\n            strength = ext_strength\n\
    \            strongest_extension = ext\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend", "    local strongest_extension = extensions[1]\n\
    \    local strength = get_strength(strongest_extension)\n    for i = 2, #extensions\
    \ do\n        local tmp_strength = get_strength(extensions[i])\n        if strength\
    \ < tmp_strength then\n            strength = tmp_strength\n            strongest_extension\
    \ = extensions[i]\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest_extension = {\n        strength = -math.huge,\n   \
    \     name = class_name\n    }\n    for _, extension in ipairs(extensions) do\n\
    \        local extension_strength = 0\n        for char in extension:upper():gmatch('%w')\
    \ do\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            else\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension.strength then\n            strongest_extension.strength\
    \ = extension_strength\n            strongest_extension.name = extension\n   \
    \     end\n    end\n    return strongest_extension.name\nend", "  -- body\n  local\
    \ strg_ext\n  local strg_diff = -1\n  for i, v in ipairs(extensions) do\n    local\
    \ pos_let = 0\n    local neg_let = 0\n    for i2, v2 in ipairs(v) do\n      if\
    \ v2 >= 'A' and v2 <= 'Z' then\n        pos_let = pos_let + 1\n      elseif v2\
    \ >= 'a' and v2 <= 'z' then\n        neg_let = neg_let + 1\n      end\n    end\n\
    \    if (pos_let - neg_let) > strg_diff then\n      strg_diff = pos_let - neg_let\n\
    \      strg_ext = v\n    end\n  end\n  return class_name .. '.' .. strg_ext\n\
    end", "  for i = 1, #extensions do\n    local b, e = string.find(extensions[i],\
    \ '[A-Z]')\n    local cap = #string.gsub(extensions[i], '[^A-Z]', '')\n    local\
    \ sm = #string.gsub(extensions[i], '[^a-z]', '')\n    extensions[i] = {extensions[i],\
    \ cap - sm}\n  end\n  table.sort(extensions, function(a, b) return a[2] > b[2]\
    \ end)\n  return class_name .. '.' .. extensions[1][1]\nend", "    local strongest_extension\
    \ = extensions[1]\n    local highest_strength = math.abs(string.upper(strongest_extension):len()\
    \ - string.lower(strongest_extension):len())\n    for i = 2, #extensions do\n\
    \        local extension = extensions[i]\n        local strength = math.abs(string.upper(extension):len()\
    \ - string.lower(extension):len())\n        if strength > highest_strength then\n\
    \            strongest_extension = extension\n            highest_strength = strength\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
