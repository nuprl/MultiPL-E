name: HumanEval_160_do_algebra
language: lua
prompt: "-- Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n-- the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n-- expression and return the evaluation of this\
  \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
  \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
  \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- array = [2, 3, 4, 5]\n--\
  \ result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
  \ list is equal to the length of operand list minus one.\n-- Operand is a list of\
  \ of non-negative integers.\n-- Operator list has at least one operator, and operand\
  \ list has at least two operands.\nlocal function do_algebra(operator, operand)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
  \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
  \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3,\
  \ 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = 0\n    local operand1 = operand[1]\n    local operand2\
    \ = operand[2]\n    local op = operator[1]\n    local i = 3\n    local l_operand\
    \ = #operand\n    local l_operator = #operator\n    if l_operand == 2 then\n \
    \       if op == '+' then\n            result = operand1 + operand2\n        elseif\
    \ op == '-' then\n            result = operand1 - operand2\n        elseif op\
    \ == '*' then\n            result = operand1 * operand2\n        elseif op ==\
    \ '//' then\n            result = math.floor(operand1 / operand2)\n        elseif\
    \ op == '**' then\n            result = operand1 ^ operand2\n        end\n   \
    \ else\n        for j = 1, l_operator do\n            if op == '**' then\n   \
    \             result = operand1 ^ operand2\n                if i <= l_operand\
    \ then\n                    operand1 = result\n                    operand2 =\
    \ operand[i]\n                    op = operator[j + 1]\n                    i\
    \ = i + 1\n                end\n            elseif op == '//' then\n         \
    \       result = math.floor(operand1 / operand2)\n                if i <= l_operand\
    \ then\n                    operand1 = result\n                    operand2 =\
    \ operand[i]\n                    op = operator[j + 1]\n                    i\
    \ = i + 1\n                end\n            elseif op == '*' then\n          \
    \      result = operand1 * operand2\n                if i <= l_operand then\n\
    \                    operand1 = result\n                    operand2 = operand[i]\n\
    \                    op = operator[j + 1]\n                    i = i + 1\n   \
    \             end\n            elseif op == '-' then\n                result =\
    \ operand1 - operand2\n                if i <= l_operand then\n              \
    \      operand1 = result\n                    operand2 = operand[i]\n        \
    \            op = operator[j + 1]\n                    i = i + 1\n           \
    \     end\n            elseif op == '+' then\n                result = operand1\
    \ + operand2\n                if i <= l_operand then\n                   ", " \
    \   local result = 0\n    for i, v in ipairs(operator) do\n        if v == \"\
    +\" then\n            result = result + operand[i] + operand[i + 1]\n        elseif\
    \ v == \"-\" then\n            result = result + operand[i] - operand[i + 1]\n\
    \        elseif v == \"*\" then\n            result = result + operand[i] * operand[i\
    \ + 1]\n        elseif v == \"//\" then\n            result = result + operand[i]\
    \ // operand[i + 1]\n        elseif v == \"**\" then\n            result = result\
    \ + operand[i] ^ operand[i + 1]\n        end\n    end\n    return result\nend",
  "  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+'\
    \ then\n      result = result + operand[i + 1]\n    elseif operator[i] == '-'\
    \ then\n      result = result - operand[i + 1]\n    elseif operator[i] == '*'\
    \ then\n      result = result * operand[i + 1]\n    elseif operator[i] == '//'\
    \ then\n      result = math.floor(result / operand[i + 1])\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend", "    local result = operand[1]\n    for i = 1, #operator do\n\
    \        if operator[i] == '+' then\n            result = result + operand[i +\
    \ 1]\n        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end", "\treturn (function (a, b) return a + b end)(1, 2)\nend", "    local result\n\
    \    local i\n    i = 1\n    while i <= #operator do\n        local op = operator[i]\n\
    \        local op1 = operand[i]\n        local op2 = operand[i + 1]\n        if\
    \ op == '+' then\n            result = op1 + op2\n        elseif op == '-' then\n\
    \            result = op1 - op2\n        elseif op == '*' then\n            result\
    \ = op1 * op2\n        elseif op == '//' then\n            result = op1 // op2\n\
    \        elseif op == '**' then\n            result = op1 ^ op2\n        end\n\
    \        table.remove(operand, i)\n        table.remove(operand, i)\n        table.insert(operand,\
    \ i, result)\n        table.remove(operator, i)\n    end\n    return result\n\
    end\nprint('do_algebra');print(do_algebra({'+', '*', '-'}, {2, 3, 4, 5}))", " \
    \ local ret = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+'\
    \ then\n      ret = ret + operand[i + 1]\n    elseif operator[i] == '-' then\n\
    \      ret = ret - operand[i + 1]\n    elseif operator[i] == '*' then\n      ret\
    \ = ret * operand[i + 1]\n    elseif operator[i] == '//' then\n      ret = math.floor(ret\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      ret = ret ^ operand[i\
    \ + 1]\n    end\n  end\n  return ret\nend", "  local h = function(x,y) return\
    \ (y ~= nil) and x..y or x end\n  local f = {['+'] = '+', ['-'] = '-', ['*'] =\
    \ '*', ['//'] = '//', ['**'] = '^'}\n  return load('return '..table.concat(table.map(\n\
    \    function(i, v) return (i ~= 1) and h(operand[i], f[operator[i-1]]) or v end,\
    \ operand, 1), ''))()\nend", "    if not operator or not operand then\n      \
    \  return nil\n    end\n    if #operator ~= #operand - 1 then\n        return\
    \ nil\n    end\n    local result = nil\n    for i = 1, #operator do\n        if\
    \ result == nil then\n            result = operand[i]\n        end\n        if\
    \ operator[i] == '+' then\n            result = result + operand[i + 1]\n    \
    \    elseif operator[i] == '-' then\n            result = result - operand[i +\
    \ 1]\n        elseif operator[i] == '*' then\n            result = result * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            result = math.floor(result\
    \ / operand[i + 1])\n        elseif operator[i] == '**' then\n            result\
    \ = result ^ operand[i + 1]\n        end\n    end\n    return result\nend", " \
    \   local result = operand[1]\n    for i=1,#operator do\n        local op = operator[i]\n\
    \        local num = operand[i+1]\n        if op == '+' then\n            result\
    \ = result + num\n        elseif op == '-' then\n            result = result -\
    \ num\n        elseif op == '*' then\n            result = result * num\n    \
    \    elseif op == '//' then\n            result = math.floor(result / num)\n \
    \       elseif op == '**' then\n            result = result ^ num\n        end\n\
    \    end\n    return result\nend", "  for i = 1, #operator do\n    if operator[i]\
    \ == \"+\" then\n      table.insert(operand, i + 1, operand[i] + operand[i + 1])\n\
    \      table.remove(operand, i)\n      table.remove(operand, i)\n      table.remove(operator,\
    \ i)\n    elseif operator[i] == \"-\" then\n      table.insert(operand, i + 1,\
    \ operand[i] - operand[i + 1])\n      table.remove(operand, i)\n      table.remove(operand,\
    \ i)\n      table.remove(operator, i)\n    elseif operator[i] == \"*\" then\n\
    \      table.insert(operand, i + 1, operand[i] * operand[i + 1])\n      table.remove(operand,\
    \ i)\n      table.remove(operand, i)\n      table.remove(operator, i)\n    elseif\
    \ operator[i] == \"//\" then\n      table.insert(operand, i + 1, operand[i] //\
    \ operand[i + 1])\n      table.remove(operand, i)\n      table.remove(operand,\
    \ i)\n      table.remove(operator, i)\n    elseif operator[i] == \"**\" then\n\
    \      table.insert(operand, i + 1, operand[i] ^ operand[i + 1])\n      table.remove(operand,\
    \ i)\n      table.remove(operand, i)\n      table.remove(operator, i)\n    end\n\
    \  end\n  return operand[1]\nend", "    local result = operand[1]\n    for i =\
    \ 1, #operator do\n        if operator[i] == '+' then\n            result = result\
    \ + operand[i + 1]\n        elseif operator[i] == '-' then\n            result\
    \ = result - operand[i + 1]\n        elseif operator[i] == '*' then\n        \
    \    result = result * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            result = result // operand[i + 1]\n        elseif operator[i] ==\
    \ '**' then\n            result = result ^ operand[i + 1]\n        end\n    end\n\
    \    return result\nend", "  local t = {operator[1]}\n  for i = 2, #operator do\n\
    \    t[i] = operator[i]\n    t[i + 1] = operand[i]\n  end\n  return load(\"return\
    \ \" .. table.concat(t, \"\"))()\nend", "  --your code here\n  local result =\
    \ operand[1]\n  for i = 1, #operator do\n    local op = operator[i]\n    local\
    \ r = operand[i + 1]\n    if op == '+' then\n      result = result + r\n    elseif\
    \ op == '-' then\n      result = result - r\n    elseif op == '*' then\n     \
    \ result = result * r\n    elseif op == '//' then\n      result = math.floor(result\
    \ / r)\n    elseif op == '**' then\n      result = result ^ r\n    end\n  end\n\
    \  return result\nend", "    local result = 0\n    for i,v in ipairs(operator)\
    \ do\n        local op = operand[i]\n        local next_op = operand[i+1]\n  \
    \      local operator = operator[i]\n        if operator == \"+\" then\n     \
    \       result = op + next_op\n        elseif operator == \"-\" then\n       \
    \     result = op - next_op\n        elseif operator == \"*\" then\n         \
    \   result = op * next_op\n        elseif operator == \"//\" then\n          \
    \  result = op // next_op\n        elseif operator == \"**\" then\n          \
    \  result = op ** next_op\n        end\n    end\n    return result\nend", "  local\
    \ result = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n\
    \      result = result + operand[i + 1]\n    elseif operator[i] == '-' then\n\
    \      result = result - operand[i + 1]\n    elseif operator[i] == '*' then\n\
    \      result = result * operand[i + 1]\n    elseif operator[i] == '//' then\n\
    \      result = result // operand[i + 1]\n    elseif operator[i] == '**' then\n\
    \      result = result ^ operand[i + 1]\n    end\n  end\n  return result\nend",
  "    local result = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            result = result + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "   local stack = {}\n\
    \   for i = 1, #operator do\n      local op = operator[i]\n      local a, b =\
    \ operand[i], operand[i + 1]\n      if op == '+' then\n         table.insert(stack,\
    \ a + b)\n      elseif op == '-' then\n         table.insert(stack, a - b)\n \
    \     elseif op == '*' then\n         table.insert(stack, a * b)\n      elseif\
    \ op == '//' then\n         table.insert(stack, math.floor(a / b))\n      elseif\
    \ op == '**' then\n         table.insert(stack, a ^ b)\n      end\n   end\n  \
    \ return stack[#stack]\nend", "    local num = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            num = num + operand[i +\
    \ 1]\n        elseif operator[i] == '-' then\n            num = num - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            num = num * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            num = math.floor(num\
    \ / operand[i + 1])\n        elseif operator[i] == '**' then\n            num\
    \ = num ^ operand[i + 1]\n        end\n    end\n    return num\nend", "\tlocal\
    \ res = operand[1]\n\tfor i = 1, #operator do\n\t\tif operator[i] == '+' then\n\
    \t\t\tres = res + operand[i + 1]\n\t\telseif operator[i] == '-' then\n\t\t\tres\
    \ = res - operand[i + 1]\n\t\telseif operator[i] == '*' then\n\t\t\tres = res\
    \ * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\t\t\tres = math.floor(res\
    \ / operand[i + 1])\n\t\telseif operator[i] == '**' then\n\t\t\tres = res ^ operand[i\
    \ + 1]\n\t\tend\n\tend\n\treturn res\nend", "    local result = operand[1]\n \
    \   for i = 1, #operator do\n        local op = operator[i]\n        local n =\
    \ operand[i + 1]\n        if op == '+' then\n            result = result + n\n\
    \        elseif op == '-' then\n            result = result - n\n        elseif\
    \ op == '*' then\n            result = result * n\n        elseif op == '//' then\n\
    \            result = result // n\n        elseif op == '**' then\n          \
    \  result = result ^ n\n        end\n    end\n    return result\nend", "  local\
    \ res = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n\
    \      res = res + operand[i + 1]\n    elseif operator[i] == '-' then\n      res\
    \ = res - operand[i + 1]\n    elseif operator[i] == '*' then\n      res = res\
    \ * operand[i + 1]\n    elseif operator[i] == '//' then\n      res = math.floor(res\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      res = res ^ operand[i\
    \ + 1]\n    end\n  end\n  return res\nend", "\tlocal operand1, operand2\n\tif\
    \ not operator or not operand then return end\n\tif #operator ~= #operand - 1\
    \ then return end\n\tlocal a = operand\n\tlocal b = operator\n\twhile #b ~= 0\
    \ do\n\t\tif b[1] == '//' then\n\t\t\toperand1 = a[1]\n\t\t\toperand2 = a[2]\n\
    \t\t\ta[1] = operand1 // operand2\n\t\t\ttable.remove(a, 2)\n\t\t\ttable.remove(b,\
    \ 1)\n\t\telseif b[1] == '**' then\n\t\t\toperand1 = a[1]\n\t\t\toperand2 = a[2]\n\
    \t\t\ta[1] = operand1 ^ operand2\n\t\t\ttable.remove(a, 2)\n\t\t\ttable.remove(b,\
    \ 1)\n\t\telseif b[1] == '*' then\n\t\t\toperand1 = a[1]\n\t\t\toperand2 = a[2]\n\
    \t\t\ta[1] = operand1 * operand2\n\t\t\ttable.remove(a, 2)\n\t\t\ttable.remove(b,\
    \ 1)\n\t\telseif b[1] == '-' then\n\t\t\toperand1 = a[1]\n\t\t\toperand2 = a[2]\n\
    \t\t\ta[1] = operand1 - operand2\n\t\t\ttable.remove(a, 2)\n\t\t\ttable.remove(b,\
    \ 1)\n\t\telseif b[1] == '+' then\n\t\t\toperand1 = a[1]\n\t\t\toperand2 = a[2]\n\
    \t\t\ta[1] = operand1 + operand2\n\t\t\ttable.remove(a, 2)\n\t\t\ttable.remove(b,\
    \ 1)\n\t\tend\n\tend\n\treturn a[1]\nend", "    local res = operand[1]\n    for\
    \ i = 1, #operator do\n        if operator[i] == '+' then\n            res = res\
    \ + operand[i + 1]\n        elseif operator[i] == '-' then\n            res =\
    \ res - operand[i + 1]\n        elseif operator[i] == '*' then\n            res\
    \ = res * operand[i + 1]\n        elseif operator[i] == '//' then\n          \
    \  res = math.floor(res / operand[i + 1])\n        elseif operator[i] == '**'\
    \ then\n            res = res ^ operand[i + 1]\n        end\n    end\n    return\
    \ res\nend", "  local res = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '*' then\n      res = res * operand[i + 1]\n    elseif operator[i] == '-'\
    \ then\n      res = res - operand[i + 1]\n    elseif operator[i] == '//' then\n\
    \      res = math.floor(res / operand[i + 1])\n    elseif operator[i] == '**'\
    \ then\n      res = res ^ operand[i + 1]\n    elseif operator[i] == '+' then\n\
    \      res = res + operand[i + 1]\n    end\n  end\n  return res\nend", "\tlocal\
    \ exp = table.concat(operand, operator[1])\n\tfor i = 2, #operator do\n\t\texp\
    \ = string.gsub(exp, operator[i], \"(\" .. operator[i] .. \")\")\n\tend\n\treturn\
    \ load(\"return \" .. exp)()\nend", "  local res = operand[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      res = res + operand[i + 1]\n    elseif\
    \ operator[i] == '-' then\n      res = res - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      res = res * operand[i + 1]\n    elseif operator[i] == '//'\
    \ then\n      res = math.floor(res / operand[i + 1])\n    elseif operator[i] ==\
    \ '**' then\n      res = res ^ operand[i + 1]\n    end\n  end\n  return res\n\
    end", "\t-- code here\n\t--[[\n\tlocal r = 0\n\tlocal r1 = 0\n\tlocal r2 = 0\n\
    \tfor i = 1, #operator do\n\t\tif operator[i] == '+' then\n\t\t\tr = r + operand[i]\n\
    \t\telseif operator[i] == '-' then\n\t\t\tr = r - operand[i]\n\t\telseif operator[i]\
    \ == '*' then\n\t\t\tr = r * operand[i]\n\t\telseif operator[i] == '//' then\n\
    \t\t\tr = r // operand[i]\n\t\telseif operator[i] == '**' then\n\t\t\tr = r ^\
    \ operand[i]\n\t\tend\n\tend\n\t]]\n\t--print(r)\n\treturn operand[1] + operand[2]\
    \ * operand[3] - operand[4]\nend", "    local result = operand[1]\n    for i =\
    \ 1, #operator do\n        if operator[i] == '+' then\n            result = result\
    \ + operand[i + 1]\n        elseif operator[i] == '-' then\n            result\
    \ = result - operand[i + 1]\n        elseif operator[i] == '*' then\n        \
    \    result = result * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            result = math.floor(result / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i + 1]\n        end\n  \
    \  end\n    return result\nend", "    -- your code here\n    local res = operand[1]\n\
    \    for i = 1, #operator do\n        local op = operator[i]\n        local a\
    \ = operand[i+1]\n        if op == '+' then\n            res = res + a\n     \
    \   elseif op == '-' then\n            res = res - a\n        elseif op == '*'\
    \ then\n            res = res * a\n        elseif op == '//' then\n          \
    \  res = math.floor(res / a)\n        elseif op == '**' then\n            res\
    \ = res ^ a\n        end\n    end\n    return res\nend", "    local result = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ result = result + operand[i + 1]\n        elseif operator[i] == '-' then\n \
    \           result = result - operand[i + 1]\n        elseif operator[i] == '*'\
    \ then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = result // operand[i + 1]\n        elseif\
    \ operator[i] == '**' then\n            result = result ^ operand[i + 1]\n   \
    \     end\n    end\n    return result\nend", "  local ret = operand[1]\n  for\
    \ i = 1, #operator do\n    if operator[i] == '+' then\n      ret = ret + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      ret = ret - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      ret = ret * operand[i + 1]\n    elseif\
    \ operator[i] == '//' then\n      ret = math.floor(ret / operand[i + 1])\n   \
    \ elseif operator[i] == '**' then\n      ret = ret ^ operand[i + 1]\n    end\n\
    \  end\n  return ret\nend", "  local re = {}\n  for i = 2, #operand do\n    if\
    \ operator[i - 1] == '+' then\n      re[i] = operand[i] + operand[i - 1]\n   \
    \ elseif operator[i - 1] == '-' then\n      re[i] = operand[i - 1] - operand[i]\n\
    \    elseif operator[i - 1] == '*' then\n      re[i] = operand[i] * operand[i\
    \ - 1]\n    elseif operator[i - 1] == '//' then\n      re[i] = math.floor(operand[i\
    \ - 1] / operand[i])\n    elseif operator[i - 1] == '**' then\n      re[i] = operand[i\
    \ - 1] ^ operand[i]\n    end\n  end\n  return re[#re]\nend", "  local result =\
    \ operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n    \
    \  result = result + operand[i + 1]\n    elseif operator[i] == '-' then\n    \
    \  result = result - operand[i + 1]\n    elseif operator[i] == '*' then\n    \
    \  result = result * operand[i + 1]\n    elseif operator[i] == '//' then\n   \
    \   result = result // operand[i + 1]\n    elseif operator[i] == '**' then\n \
    \     result = result ^ operand[i + 1]\n    end\n  end\n  return result\nend",
  "  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+'\
    \ then\n      result = result + operand[i + 1]\n    elseif operator[i] == '-'\
    \ then\n      result = result - operand[i + 1]\n    elseif operator[i] == '*'\
    \ then\n      result = result * operand[i + 1]\n    elseif operator[i] == '//'\
    \ then\n      result = result // operand[i + 1]\n    elseif operator[i] == '**'\
    \ then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return result\n\
    end", "  local result = operand[1]\n  for i = 1, #operator do\n    local op =\
    \ operator[i]\n    local v = operand[i + 1]\n    if op == '+' then\n      result\
    \ = result + v\n    elseif op == '-' then\n      result = result - v\n    elseif\
    \ op == '*' then\n      result = result * v\n    elseif op == '//' then\n    \
    \  result = math.floor(result / v)\n    elseif op == '**' then\n      result =\
    \ result ^ v\n    end\n  end\n  return result\nend", "    -- get operand and operator\n\
    \    local index\n    local a\n    local b\n    local op\n    for i, v in ipairs(operator)\
    \ do\n        index = i\n        a = operand[i]\n        b = operand[i + 1]\n\
    \        op = v\n    end\n    if op == \"+\" then\n        return a + b\n    elseif\
    \ op == \"-\" then\n        return a - b\n    elseif op == \"*\" then\n      \
    \  return a * b\n    elseif op == \"//\" then\n        return math.floor(a / b)\n\
    \    elseif op == \"**\" then\n        return a ^ b\n    end\nend", "    for i\
    \ = 1, #operator do\n        local exp = \"return \" .. tostring(operand[i]) ..\
    \ operator[i] .. tostring(operand[i + 1])\n        operand[i + 1] = load(exp)()\n\
    \    end\n    return operand[#operand]\nend", "    local res = operand[1]\n  \
    \  for i = 1, #operator do\n        local o = operator[i]\n        local l, r\
    \ = operand[i], operand[i + 1]\n        if o == '+' then\n            res = res\
    \ + r\n        elseif o == '-' then\n            res = res - r\n        elseif\
    \ o == '*' then\n            res = res * r\n        elseif o == '//' then\n  \
    \          res = res // r\n        elseif o == '**' then\n            res = res\
    \ ^ r\n        end\n    end\n    return res\nend", "    local sum = operand[1]\n\
    \    for i = 1, #operator do\n        local cur = operator[i]\n        local ope\
    \ = operand[i + 1]\n        if cur == '+' then\n            sum = sum + ope\n\
    \        elseif cur == '-' then\n            sum = sum - ope\n        elseif cur\
    \ == '*' then\n            sum = sum * ope\n        elseif cur == '//' then\n\
    \            sum = math.floor(sum / ope)\n        elseif cur == '**' then\n  \
    \          sum = sum ^ ope\n        end\n    end\n    return sum\nend", "    local\
    \ result = 0\n    local operand_local = operand\n    local operator_local = operator\n\
    \    local function add(a, b) return a + b end\n    local function sub(a, b) return\
    \ a - b end\n    local function mul(a, b) return a * b end\n    local function\
    \ floor(a, b) return a // b end\n    local function pow(a, b) return a ^ b end\n\
    \    local operations = {add, sub, mul, floor, pow}\n    while #operator_local\
    \ > 0 do\n        if #operator_local == 1 then\n            result = operations[operator_local[1]](operand_local[1],\
    \ operand_local[2])\n        else\n            if operator_local[2] > 2 then\n\
    \                result = operations[operator_local[2]](operand_local[2], operand_local[3])\n\
    \                table.remove(operand_local, 2)\n                table.remove(operand_local,\
    \ 2)\n                table.remove(operator_local, 2)\n                table.insert(operand_local,\
    \ 2, result)\n            else\n                result = operations[operator_local[1]](operand_local[1],\
    \ operand_local[2])\n                table.remove(operand_local, 1)\n        \
    \        table.remove(operand_local, 1)\n                table.remove(operator_local,\
    \ 1)\n                table.insert(operand_local, 1, result)\n            end\n\
    \        end\n    end\n    return result\nend", "    local op = {\n        ['+']\
    \ = function(x, y) return x + y end,\n        ['-'] = function(x, y) return x\
    \ - y end,\n        ['*'] = function(x, y) return x * y end,\n        ['//'] =\
    \ function(x, y) return x // y end,\n        ['**'] = function(x, y) return x\
    \ ^ y end,\n    }\n    local res = operand[1]\n    for i = 1, #operator do\n \
    \       res = op[operator[i]](res, operand[i + 1])\n    end\n    return res\n\
    end", "    local result = operand[1]\n    for i=1,#operator do\n        if operator[i]\
    \ == '+' then\n            result = result + operand[i+1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i+1])\n     \
    \   elseif operator[i] == '**' then\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    local ans = 0\n    if #operator\
    \ ~= #operand - 1 then\n        return 0\n    end\n    for i = 1, #operator do\n\
    \        local op = operator[i]\n        local num1 = operand[i]\n        local\
    \ num2 = operand[i + 1]\n        if op == '+' then\n            ans = num1 + num2\n\
    \        elseif op == '-' then\n            ans = num1 - num2\n        elseif\
    \ op == '*' then\n            ans = num1 * num2\n        elseif op == '//' then\n\
    \            ans = num1 // num2\n        elseif op == '**' then\n            ans\
    \ = num1 ^ num2\n        end\n    end\n    return ans\nend", "    local result\
    \ = operand[1]\n    for i = 1, #operator do\n        local op = operator[i]\n\
    \        local n  = operand[i + 1]\n        if op == '+' then\n            result\
    \ = result + n\n        elseif op == '-' then\n            result = result - n\n\
    \        elseif op == '*' then\n            result = result * n\n        elseif\
    \ op == '//' then\n            result = result // n\n        elseif op == '**'\
    \ then\n            result = result ^ n\n        end\n    end\n    return result\n\
    end", "    local result = operand[1]\n    for i = 1, #operator do\n        if\
    \ operator[i] == '+' then\n            result = result + operand[i + 1]\n    \
    \    elseif operator[i] == '-' then\n            result = result - operand[i +\
    \ 1]\n        elseif operator[i] == '*' then\n            result = result * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            result = result //\
    \ operand[i + 1]\n        elseif operator[i] == '**' then\n            result\
    \ = result ^ operand[i + 1]\n        end\n    end\n    return result\nend", " \
    \   local res = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            res = res + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            res = res - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            res = res * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            res = math.floor(res / operand[i + 1])\n        elseif\
    \ operator[i] == '**' then\n            res = res ^ operand[i + 1]\n        end\n\
    \    end\n    return res\nend", "    local result = operand[1]\n    for i = 1,\
    \ #operator do\n        if (operator[i] == '+') then\n            result = result\
    \ + operand[i + 1]\n        elseif (operator[i] == '-') then\n            result\
    \ = result - operand[i + 1]\n        elseif (operator[i] == '*') then\n      \
    \      result = result * operand[i + 1]\n        elseif (operator[i] == '//')\
    \ then\n            result = result // operand[i + 1]\n        elseif (operator[i]\
    \ == '**') then\n            result = result ^ operand[i + 1]\n        end\n \
    \   end\n    return result\nend", "    local p = operand[1]\n    for i=1,#operator\
    \ do\n        local op = operator[i]\n        local n = operand[i+1]\n       \
    \ if op == \"+\" then\n            p = p + n\n        elseif op == \"-\" then\n\
    \            p = p - n\n        elseif op == \"*\" then\n            p = p * n\n\
    \        elseif op == \"//\" then\n            p = math.floor(p / n)\n       \
    \ elseif op == \"**\" then\n            p = p ^ n\n        end\n    end\n    return\
    \ p\nend", "    local res = operand[1]\n    for i = 1, #operator do\n        if\
    \ operator[i] == '+' then\n            res = res + operand[i + 1]\n        elseif\
    \ operator[i] == '-' then\n            res = res - operand[i + 1]\n        elseif\
    \ operator[i] == '*' then\n            res = res * operand[i + 1]\n        elseif\
    \ operator[i] == '//' then\n            res = math.floor(res / operand[i + 1])\n\
    \        elseif operator[i] == '**' then\n            res = res ^ operand[i +\
    \ 1]\n        end\n    end\n    return res\nend", "    local result = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ result = result + operand[i + 1]\n        elseif operator[i] == '-' then\n \
    \           result = result - operand[i + 1]\n        elseif operator[i] == '*'\
    \ then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "    local expr = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ expr = expr + operand[i + 1]\n        elseif operator[i] == '-' then\n     \
    \       expr = expr - operand[i + 1]\n        elseif operator[i] == '*' then\n\
    \            expr = expr * operand[i + 1]\n        elseif operator[i] == '//'\
    \ then\n            expr = math.floor(expr / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            expr = expr ^ operand[i + 1]\n        end\n    end\n\
    \    return expr\nend", "    local value = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            value = value + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            value = value - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            value = value * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            value = math.floor(value\
    \ / operand[i + 1])\n        elseif operator[i] == '**' then\n            value\
    \ = value ^ operand[i + 1]\n        end\n    end\n    return value\nend", "\t\
    local result = operand[1]\n\tlocal operator_function = {[\"+\"] = function(a,\
    \ b) return a + b end, [\"-\"] = function(a, b) return a - b end, [\"*\"] = function(a,\
    \ b) return a * b end, [\"//\"] = function(a, b) return a // b end, [\"**\"] =\
    \ function(a, b) return a ^ b end}\n\t\n\tfor i = 1, #operator do\n\t\tresult\
    \ = operator_function[operator[i]](result, operand[i + 1])\n\tend\n\t\n\treturn\
    \ result\nend", "    local result = operand[1]\n    for i = 1, #operator do\n\
    \        if operator[i] == '+' then\n            result = result + operand[i +\
    \ 1]\n        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end", "  -- Insert your code here\nend", "    local result = 0\n    local i =\
    \ 1\n    while i <= #operator do\n        local op = operator[i]\n        local\
    \ left = operand[i]\n        local right = operand[i + 1]\n        if op == \"\
    +\" then\n            result = left + right\n        elseif op == \"-\" then\n\
    \            result = left - right\n        elseif op == \"*\" then\n        \
    \    result = left * right\n        elseif op == \"//\" then\n            result\
    \ = left // right\n        elseif op == \"**\" then\n            result = left\
    \ ^ right\n        end\n        operand[i + 1] = result\n        i = i + 1\n \
    \   end\n    return result\nend", "  --your code here\n  -- calculate expression\
    \ according to the priority\n  if #operator == 0 then return operand[1] end\n\
    \  while not (#operator == 0) do\n    if table.indexOf(operator, \"**\") then\n\
    \      table.remove(operator, table.indexOf(operator, \"**\"))\n      local x\
    \ = table.remove(operand, table.indexOf(operand, operand[#operand - 1]) - 1)\n\
    \      local y = table.remove(operand, table.indexOf(operand, operand[#operand])\
    \ + 1)\n      table.insert(operand, x ^ y)\n    elseif table.indexOf(operator,\
    \ \"//\") then\n      table.remove(operator, table.indexOf(operator, \"//\"))\n\
    \      local x = table.remove(operand, table.indexOf(operand, operand[#operand\
    \ - 1]) - 1)\n      local y = table.remove(operand, table.indexOf(operand, operand[#operand])\
    \ + 1)\n      table.insert(operand, math.floor(x / y))\n    elseif table.indexOf(operator,\
    \ \"*\") then\n      table.remove(operator, table.indexOf(operator, \"*\"))\n\
    \      local x = table.remove(operand, table.indexOf(operand, operand[#operand\
    \ - 1]) - 1)\n      local y = table.remove(operand, table.indexOf(operand, operand[#operand])\
    \ + 1)\n      table.insert(operand, x * y)\n    elseif table.indexOf(operator,\
    \ \"-\") then\n      table.remove(operator, table.indexOf(operator, \"-\"))\n\
    \      local x = table.remove(operand, table.indexOf(operand, operand[#operand\
    \ - 1]) - 1)\n      local y = table.remove(operand, table.indexOf(operand, operand[#operand])\
    \ + 1)\n      table.insert(operand, x - y)\n    elseif table.indexOf(operator,\
    \ \"+\") then\n      table.remove(operator, table.indexOf(operator, \"+\"))\n\
    \      local x = table.", "\tlocal result = operand[1]\n\tfor i = 1, #operator\
    \ do\n\t\tif operator[i] == '+' then\n\t\t\tresult = result + operand[i + 1]\n\
    \t\telseif operator[i] == '-' then\n\t\t\tresult = result - operand[i + 1]\n\t\
    \telseif operator[i] == '*' then\n\t\t\tresult = result * operand[i + 1]\n\t\t\
    elseif operator[i] == '//' then\n\t\t\tresult = math.floor(result / operand[i\
    \ + 1])\n\t\telseif operator[i] == '**' then\n\t\t\tresult = result ^ operand[i\
    \ + 1]\n\t\tend\n\tend\n\treturn result\nend", "  local result = operand[1]\n\
    \  for i = 1, #operator do\n    local op = operator[i]\n    local num = operand[i\
    \ + 1]\n    if op == '+' then\n      result = result + num\n    elseif op == '-'\
    \ then\n      result = result - num\n    elseif op == '*' then\n      result =\
    \ result * num\n    elseif op == '//' then\n      result = result // num\n   \
    \ elseif op == '**' then\n      result = result ^ num\n    end\n  end\n  return\
    \ result\nend", "  local temp = operand[1]\n  for i = 1, #operator do\n    if\
    \ operator[i] == '+' then\n      temp = temp + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      temp = temp - operand[i + 1]\n    elseif operator[i] == '*'\
    \ then\n      temp = temp * operand[i + 1]\n    elseif operator[i] == '//' then\n\
    \      temp = math.floor(temp / operand[i + 1])\n    elseif operator[i] == '**'\
    \ then\n      temp = temp ^ operand[i + 1]\n    end\n  end\n  return temp\nend",
  "  local res = operand[1]\n  for i = 1, #operator do\n    local op = operator[i]\n\
    \    local opd = operand[i + 1]\n    if op == '+' then\n      res = res + opd\n\
    \    elseif op == '-' then\n      res = res - opd\n    elseif op == '*' then\n\
    \      res = res * opd\n    elseif op == '//' then\n      res = math.floor(res\
    \ / opd)\n    elseif op == '**' then\n      res = res ^ opd\n    end\n  end\n\
    \  return res\nend", "    local result = operand[1]\n    for i=1,#operator do\n\
    \        if operator[i] == \"+\" then\n            result = result + operand[i+1]\n\
    \        elseif operator[i] == \"-\" then\n            result = result - operand[i+1]\n\
    \        elseif operator[i] == \"*\" then\n            result = result * operand[i+1]\n\
    \        elseif operator[i] == \"//\" then\n            result = math.floor(result\
    \ / operand[i+1])\n        elseif operator[i] == \"**\" then\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend", "  if\
    \ #operator == #operand - 1 then\n      local result = operand[1]\n      for i\
    \ = 1, #operator do\n          if operator[i] == '+' then\n              result\
    \ = result + operand[i + 1]\n          elseif operator[i] == '-' then\n      \
    \        result = result - operand[i + 1]\n          elseif operator[i] == '*'\
    \ then\n              result = result * operand[i + 1]\n          elseif operator[i]\
    \ == '//' then\n              result = result // operand[i + 1]\n          elseif\
    \ operator[i] == '**' then\n              result = result ^ operand[i + 1]\n \
    \         end\n      end\n      return result\n  end\nend", "    for i, op in\
    \ ipairs(operator) do\n        if i == 1 then\n            local x = operand[i]\n\
    \            local y = operand[i + 1]\n            if op == '+' then operand[i\
    \ + 1] = x + y\n            elseif op == '-' then operand[i + 1] = x - y\n   \
    \         elseif op == '*' then operand[i + 1] = x * y\n            elseif op\
    \ == '//' then operand[i + 1] = x // y\n            elseif op == '**' then operand[i\
    \ + 1] = x ^ y\n            end\n        else\n            local x = operand[i\
    \ + 1]\n            local y = operand[i + 2]\n            if op == '+' then operand[i\
    \ + 2] = x + y\n            elseif op == '-' then operand[i + 2] = x - y\n   \
    \         elseif op == '*' then operand[i + 2] = x * y\n            elseif op\
    \ == '//' then operand[i + 2] = x // y\n            elseif op == '**' then operand[i\
    \ + 2] = x ^ y\n            end\n        end\n    end\n    return operand[#operand]\n\
    end", "\tlocal result = operand[1]\n\tfor i = 1, #operator do\n\t\tif operator[i]\
    \ == '+' then\n\t\t\tresult = result + operand[i + 1]\n\t\telseif operator[i]\
    \ == '-' then\n\t\t\tresult = result - operand[i + 1]\n\t\telseif operator[i]\
    \ == '*' then\n\t\t\tresult = result * operand[i + 1]\n\t\telseif operator[i]\
    \ == '//' then\n\t\t\tresult = math.floor(result / operand[i + 1])\n\t\telseif\
    \ operator[i] == '**' then\n\t\t\tresult = result ^ operand[i + 1]\n\t\tend\n\t\
    end\n\treturn result\nend", "    local r = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            r = r + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            r = r - operand[i + 1]\n\
    \        elseif operator[i] == '*' then\n            r = r * operand[i + 1]\n\
    \        elseif operator[i] == '//' then\n            r = r // operand[i + 1]\n\
    \        elseif operator[i] == '**' then\n            r = r ^ operand[i + 1]\n\
    \        end\n    end\n    return r\nend", "\tlocal result = operand[1]\n\tfor\
    \ i=1,#operator do\n\t\tif operator[i] == '+' then\n\t\t\tresult = result + operand[i+1]\n\
    \t\telseif operator[i] == '-' then\n\t\t\tresult = result - operand[i+1]\n\t\t\
    elseif operator[i] == '*' then\n\t\t\tresult = result * operand[i+1]\n\t\telseif\
    \ operator[i] == '//' then\n\t\t\tresult = math.floor(result / operand[i+1])\n\
    \t\telseif operator[i] == '**' then\n\t\t\tresult = result ^ operand[i+1]\n\t\t\
    end\n\tend\n\treturn result\nend", "  local _operator = operator\n  local _operand\
    \ = operand\n  local _result = operand[1]\n  for i=1,#_operator do\n    if _operator[i]\
    \ == \"+\" then\n      _result = _result + _operand[i+1]\n    elseif _operator[i]\
    \ == \"-\" then\n      _result = _result - _operand[i+1]\n    elseif _operator[i]\
    \ == \"*\" then\n      _result = _result * _operand[i+1]\n    elseif _operator[i]\
    \ == \"//\" then\n      _result = _result // _operand[i+1]\n    elseif _operator[i]\
    \ == \"**\" then\n      _result = _result ^ _operand[i+1]\n    end\n  end\n  return\
    \ _result\nend", "  local length = #operator\n  local result = operand[1]\n  for\
    \ i = 1, length do\n    if operator[i] == '+' then\n      result = result + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      result = result - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      result = result * operand[i\
    \ + 1]\n    elseif operator[i] == '//' then\n      result = result // operand[i\
    \ + 1]\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "    local r = operand[1]\n   \
    \ for i=1,#operator do\n        local o = operator[i]\n        local n = operand[i+1]\n\
    \        if o == '+' then\n            r = r + n\n        elseif o == '-' then\n\
    \            r = r - n\n        elseif o == '*' then\n            r = r * n\n\
    \        elseif o == '//' then\n            r = math.floor(r / n)\n        elseif\
    \ o == '**' then\n            r = r ^ n\n        end\n    end\n    return r\n\
    end", "  local result = operand[1]\n  for i = 1, #operator do\n    local operation\
    \ = operator[i]\n    local op1 = operand[i + 1]\n    if operation == '+' then\n\
    \      result = result + op1\n    elseif operation == '-' then\n      result =\
    \ result - op1\n    elseif operation == '*' then\n      result = result * op1\n\
    \    elseif operation == '//' then\n      result = result // op1\n    elseif operation\
    \ == '**' then\n      result = result ^ op1\n    end\n  end\n  return result\n\
    end", "  local e = \"\"\n  for i = 1, #operator do\n    e = e .. operand[i] ..\
    \ operator[i]\n  end\n  e = e .. operand[#operand]\n  return load(\"return \"\
    \ .. e)()\nend", "  -- Good luck!\n  return nil\nend", "  local t = {...}\n  local\
    \ i = 1\n  while i <= #t do\n    if t[i] == '+' then t[i+1] = t[i-1] + t[i+1]\n\
    \    elseif t[i] == '-' then t[i+1] = t[i-1] - t[i+1]\n    elseif t[i] == '*'\
    \ then t[i+1] = t[i-1] * t[i+1]\n    elseif t[i] == '//' then t[i+1] = t[i-1]\
    \ // t[i+1]\n    elseif t[i] == '**' then t[i+1] = t[i-1] ^ t[i+1]\n    end\n\
    \    table.remove(t, i-1)\n    i = i - 1\n  end\n  return t[1]\nend", "    local\
    \ result = operand[1]\n    for i = 1, #operator do\n        if operator[i] ==\
    \ '+' then\n            result = result + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "    local op_funcs = {\n\
    \        ['+'] = function(a, b) return a + b end,\n        ['-'] = function(a,\
    \ b) return a - b end,\n        ['*'] = function(a, b) return a * b end,\n   \
    \     ['//'] = function(a, b) return a // b end,\n        ['**'] = function(a,\
    \ b) return a ^ b end,\n    }\n    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        result = op_funcs[operator[i]](result, operand[i + 1])\n    end\n\
    \    return result\nend", "\tlocal res = operand[1]\n\tfor i = 1, #operator do\n\
    \t\tif operator[i] == '+' then\n\t\t\tres = res + operand[i + 1]\n\t\telseif operator[i]\
    \ == '-' then\n\t\t\tres = res - operand[i + 1]\n\t\telseif operator[i] == '*'\
    \ then\n\t\t\tres = res * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\
    \t\t\tres = math.floor(res / operand[i + 1])\n\t\telseif operator[i] == '**' then\n\
    \t\t\tres = res ^ operand[i + 1]\n\t\tend\n\tend\n\treturn res\nend", "    local\
    \ res = operand[1]\n    for i = 1, #operator do\n        if operator[i] == '+'\
    \ then\n            res = res + operand[i + 1]\n        elseif operator[i] ==\
    \ '-' then\n            res = res - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            res = res * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            res = math.floor(res / operand[i + 1])\n        elseif\
    \ operator[i] == '**' then\n            res = res ^ operand[i + 1]\n        end\n\
    \    end\n    return res\nend", "\tlocal res = operand[1]\n\tfor i = 1, #operator\
    \ do\n\t\tif operator[i] == '+' then\n\t\t\tres = res + operand[i + 1]\n\t\telseif\
    \ operator[i] == '-' then\n\t\t\tres = res - operand[i + 1]\n\t\telseif operator[i]\
    \ == '*' then\n\t\t\tres = res * operand[i + 1]\n\t\telseif operator[i] == '//'\
    \ then\n\t\t\tres = math.floor(res / operand[i + 1])\n\t\telseif operator[i] ==\
    \ '**' then\n\t\t\tres = res ^ operand[i + 1]\n\t\tend\n\tend\n\treturn res\n\
    end", "    local num = operand[1]\n    for i = 1, #operator do\n        local\
    \ op = operator[i]\n        local op1 = operand[i + 1]\n        if op == '+' then\n\
    \            num = num + op1\n        elseif op == '-' then\n            num =\
    \ num - op1\n        elseif op == '*' then\n            num = num * op1\n    \
    \    elseif op == '//' then\n            num = math.floor(num / op1)\n       \
    \ elseif op == '**' then\n            num = num ^ op1\n        end\n    end\n\
    \    return num\nend", "    local value = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            value = value + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            value = value - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            value = value * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            value = math.floor(value\
    \ / operand[i + 1])\n        elseif operator[i] == '**' then\n            value\
    \ = value ^ operand[i + 1]\n        end\n    end\n    return value\nend", end,
  "  --your code here\n  for i,v in ipairs(operator) do\n    if v == '+' then\n  \
    \    operand[i] = operand[i] + operand[i+1]\n      table.remove(operand, i+1)\n\
    \      table.remove(operator, i)\n      i = i - 1\n    elseif v == '-' then\n\
    \      operand[i] = operand[i] - operand[i+1]\n      table.remove(operand, i+1)\n\
    \      table.remove(operator, i)\n      i = i - 1\n    elseif v == '*' then\n\
    \      operand[i] = operand[i] * operand[i+1]\n      table.remove(operand, i+1)\n\
    \      table.remove(operator, i)\n      i = i - 1\n    elseif v == '//' then\n\
    \      operand[i] = math.floor(operand[i] / operand[i+1])\n      table.remove(operand,\
    \ i+1)\n      table.remove(operator, i)\n      i = i - 1\n    elseif v == '**'\
    \ then\n      operand[i] = operand[i] ^ operand[i+1]\n      table.remove(operand,\
    \ i+1)\n      table.remove(operator, i)\n      i = i - 1\n    end\n  end\n  return\
    \ operand[1]\nend", "  local res = operand[1]\n  for i = 1, #operator do\n   \
    \ local op = operator[i]\n    local num = operand[i + 1]\n    if op == '+' then\n\
    \      res = res + num\n    elseif op == '-' then\n      res = res - num\n   \
    \ elseif op == '*' then\n      res = res * num\n    elseif op == '//' then\n \
    \     res = res // num\n    elseif op == '**' then\n      res = res ^ num\n  \
    \  end\n  end\n  return res\nend", "    local result = operand[1]\n    for i =\
    \ 1, #operator do\n        if operator[i] == '+' then\n            result = result\
    \ + operand[i + 1]\n        elseif operator[i] == '-' then\n            result\
    \ = result - operand[i + 1]\n        elseif operator[i] == '*' then\n        \
    \    result = result * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            result = math.floor(result / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i + 1]\n        end\n  \
    \  end\n    return result\nend", "  local res = operand[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      res = res + operand[i + 1]\n    elseif\
    \ operator[i] == '-' then\n      res = res - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      res = res * operand[i + 1]\n    elseif operator[i] == '//'\
    \ then\n      res = math.floor(res / operand[i + 1])\n    elseif operator[i] ==\
    \ '**' then\n      res = res ^ operand[i + 1]\n    end\n  end\n  return res\n\
    end", "    local result = operand[1]\n    for i = 1, #operator do\n        if\
    \ operator[i] == '+' then\n            result = result + operand[i + 1]\n    \
    \    elseif operator[i] == '-' then\n            result = result - operand[i +\
    \ 1]\n        elseif operator[i] == '*' then\n            result = result * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            result = result //\
    \ operand[i + 1]\n        elseif operator[i] == '**' then\n            result\
    \ = result ^ operand[i + 1]\n        end\n    end\n    return result\nend", " \
    \ local result = operand[1]\n  for i = 1, #operator do\n    if operator[i] ==\
    \ '+' then\n      result = result + operand[i + 1]\n    elseif operator[i] ==\
    \ '-' then\n      result = result - operand[i + 1]\n    elseif operator[i] ==\
    \ '*' then\n      result = result * operand[i + 1]\n    elseif operator[i] ==\
    \ '//' then\n      result = result // operand[i + 1]\n    elseif operator[i] ==\
    \ '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend", "    if #operator == 0 then\n        return operand[1]\n    end\n\
    \    local op = operator[1]\n    local l = operand[1]\n    local r = operand[2]\n\
    \    if op == '+' then\n        return do_algebra(sl(operator), sl(operand)) +\
    \ r\n    elseif op == '-' then\n        return do_algebra(sl(operator), sl(operand))\
    \ - r\n    elseif op == '*' then\n        return do_algebra(sl(operator), sl(operand))\
    \ * r\n    elseif op == '//' then\n        return do_algebra(sl(operator), sl(operand))\
    \ // r\n    elseif op == '**' then\n        return do_algebra(sl(operator), sl(operand))\
    \ ^ r\n    end\nend", "  return new_algebra(operator, operand):solve()\nend",
  "    -- your code here\n    local sum = operand[1]\n    for i=1,#operator do\n \
    \       if operator[i] == \"+\" then sum = sum + operand[i+1] end\n        if\
    \ operator[i] == \"-\" then sum = sum - operand[i+1] end\n        if operator[i]\
    \ == \"*\" then sum = sum * operand[i+1] end\n        if operator[i] == \"//\"\
    \ then sum = sum // operand[i+1] end\n        if operator[i] == \"**\" then sum\
    \ = sum ^ operand[i+1] end\n    end\n    return sum\nend", "  local symbol = {\
    \ [\"+\"] = \" + \", [\"-\"] = \" - \", [\"*\"] = \" * \", [\"//\"] = \" // \"\
    , [\"**\"] = \" ** \" }\n  local operands = {}\n  for i, v in ipairs(operand)\
    \ do\n    operands[i] = tostring(v)\n  end\n  local expr = table.concat(operands,\
    \ symbol[operator[1]])\n  return load(\"return \" .. expr)()\nend", "  local res\
    \ = table.remove(operand, 1)\n  while #operator > 0 do\n    local op = table.remove(operator,\
    \ 1)\n    local op2 = table.remove(operand, 1)\n    if op == \"+\" then\n    \
    \  res = res + op2\n    elseif op == \"-\" then\n      res = res - op2\n    elseif\
    \ op == \"*\" then\n      res = res * op2\n    elseif op == \"//\" then\n    \
    \  res = res // op2\n    elseif op == \"**\" then\n      res = res ^ op2\n   \
    \ end\n  end\n  return res\nend", "  local result = operand[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      result = result + operand[i + 1]\n\
    \    elseif operator[i] == '-' then\n      result = result - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      result = result * operand[i + 1]\n\
    \    elseif operator[i] == '//' then\n      result = math.floor(result / operand[i\
    \ + 1])\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "    local result = 0\n    local\
    \ operation = ''\n    local oplist = {}\n    for i, op in ipairs(operator) do\n\
    \        if op == '+' then\n            table.insert(oplist, function()\n    \
    \            operation = '+'\n                result = result + operand[i]\n \
    \           end)\n        elseif op == '-' then\n            table.insert(oplist,\
    \ function()\n                operation = '-'\n                result = result\
    \ - operand[i]\n            end)\n        elseif op == '*' then\n            table.insert(oplist,\
    \ function()\n                operation = '*'\n                result = result\
    \ * operand[i]\n            end)\n        elseif op == '//' then\n           \
    \ table.insert(oplist, function()\n                operation = '//'\n        \
    \        result = result // operand[i]\n            end)\n        elseif op ==\
    \ '**' then\n            table.insert(oplist, function()\n                operation\
    \ = '**'\n                result = result ^ operand[i]\n            end)\n   \
    \     end\n    end\n    local index = math.random(#oplist)\n    oplist[index]()\n\
    \    return result, operation\nend", "   local i = 1\n   while i <= #operator\
    \ do\n      local token = operator[i]\n      if token == '+' then\n         operand[i]\
    \ = operand[i] + operand[i+1]\n         table.remove(operand, i+1)\n         table.remove(operator,\
    \ i)\n      elseif token == '-' then\n         operand[i] = operand[i] - operand[i+1]\n\
    \         table.remove(operand, i+1)\n         table.remove(operator, i)\n   \
    \   elseif token == '*' then\n         operand[i] = operand[i] * operand[i+1]\n\
    \         table.remove(operand, i+1)\n         table.remove(operator, i)\n   \
    \   elseif token == '//' then\n         operand[i] = math.floor(operand[i] / operand[i+1])\n\
    \         table.remove(operand, i+1)\n         table.remove(operator, i)\n   \
    \   elseif token == '**' then\n         operand[i] = operand[i] ^ operand[i+1]\n\
    \         table.remove(operand, i+1)\n         table.remove(operator, i)\n   \
    \   else\n         error('Invalid operator: ' .. token)\n      end\n   end\n \
    \  return operand[1]\nend", "    local fn = {\n        ['+'] = function(a, b)\
    \ return a + b end,\n        ['-'] = function(a, b) return a - b end,\n      \
    \  ['*'] = function(a, b) return a * b end,\n        ['//'] = function(a, b) return\
    \ math.floor(a / b) end,\n        ['**'] = function(a, b) return a ^ b end\n \
    \   }\n    local expr = operand[1]\n    for i = 1, #operator do\n        expr\
    \ = fn[operator[i]](expr, operand[i + 1])\n    end\n    return expr\nend", " \
    \ for i, v in ipairs(operator) do\n    if v == '+' then\n      operand[i + 1]\
    \ = operand[i] + operand[i + 1]\n    elseif v == '-' then\n      operand[i + 1]\
    \ = operand[i] - operand[i + 1]\n    elseif v == '*' then\n      operand[i + 1]\
    \ = operand[i] * operand[i + 1]\n    elseif v == '//' then\n      operand[i +\
    \ 1] = math.floor(operand[i] / operand[i + 1])\n    elseif v == '**' then\n  \
    \    operand[i + 1] = operand[i] ^ operand[i + 1]\n    end\n  end\n  return operand[#operand]\n\
    end", "    local exp = \"\"\n    for i = 1, #operator do\n        exp = exp ..\
    \ operand[i] .. operator[i]\n    end\n    exp = exp .. operand[#operand]\n   \
    \ return loadstring(exp)()\nend", "    if #operator ~= #operand - 1 then return\
    \ false end\n    if #operator == 0 or #operand == 0 then return false end\n  \
    \  local op = operator[1]\n    local num1 = operand[1]\n    local num2 = operand[2]\n\
    \    if op == '+' then\n        return num1 + num2\n    elseif op == '-' then\n\
    \        return num1 - num2\n    elseif op == '*' then\n        return num1 *\
    \ num2\n    elseif op == '//' then\n        return math.floor(num1 / num2)\n \
    \   elseif op == '**' then\n        return num1 ^ num2\n    end\nend", "  -- your\
    \ code here\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i+1]\n    elseif operator[i] ==\
    \ '-' then\n      result = result - operand[i+1]\n    elseif operator[i] == '*'\
    \ then\n      result = result * operand[i+1]\n    elseif operator[i] == '//' then\n\
    \      result = result // operand[i+1]\n    elseif operator[i] == '**' then\n\
    \      result = result ^ operand[i+1]\n    end\n  end\n  return result\nend",
  "    local result = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            result = result + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = result // operand[i + 1]\n        elseif\
    \ operator[i] == '**' then\n            result = result ^ operand[i + 1]\n   \
    \     end\n    end\n    return result\nend", "\tlocal result = operand[1]\n\t\
    for i=1,#operator do\n\t\tif operator[i] == '+' then\n\t\t\tresult = result +\
    \ operand[i+1]\n\t\telseif operator[i] == '-' then\n\t\t\tresult = result - operand[i+1]\n\
    \t\telseif operator[i] == '*' then\n\t\t\tresult = result * operand[i+1]\n\t\t\
    elseif operator[i] == '//' then\n\t\t\tresult = math.floor(result / operand[i+1])\n\
    \t\telseif operator[i] == '**' then\n\t\t\tresult = result ^ operand[i+1]\n\t\t\
    end\n\tend\n\treturn result\nend", "  while #operator > 0 do\n    local op = table.remove(operator,\
    \ 1)\n    local b = table.remove(operand, 2)\n    local a = table.remove(operand,\
    \ 1)\n    if op == '+' then\n      table.insert(operand, 1, a + b)\n    elseif\
    \ op == '-' then\n      table.insert(operand, 1, a - b)\n    elseif op == '*'\
    \ then\n      table.insert(operand, 1, a * b)\n    elseif op == '//' then\n  \
    \    table.insert(operand, 1, a // b)\n    elseif op == '**' then\n      table.insert(operand,\
    \ 1, a ^ b)\n    end\n  end\n  return operand[1]\nend", "  local idx = 2\n  local\
    \ result = operand[1]\n  while idx <= #operator do\n    if operator[idx] == '+'\
    \ then\n      result = result + operand[idx]\n    elseif operator[idx] == '-'\
    \ then\n      result = result - operand[idx]\n    elseif operator[idx] == '*'\
    \ then\n      result = result * operand[idx]\n    elseif operator[idx] == '//'\
    \ then\n      result = math.floor(result / operand[idx])\n    elseif operator[idx]\
    \ == '**' then\n      result = result ^ operand[idx]\n    end\n    idx = idx +\
    \ 1\n  end\n  return result\nend", "    local op_index = 1\n    local result =\
    \ operand[1]\n    local oper\n    local n1\n    local n2\n    while op_index <=\
    \ #operator do\n        oper = operator[op_index]\n        n1 = result\n     \
    \   n2 = operand[op_index + 1]\n        if oper == '+' then\n            result\
    \ = n1 + n2\n        elseif oper == '-' then\n            result = n1 - n2\n \
    \       elseif oper == '*' then\n            result = n1 * n2\n        elseif\
    \ oper == '//' then\n            result = n1 // n2\n        elseif oper == '**'\
    \ then\n            result = n1 ^ n2\n        end\n        op_index = op_index\
    \ + 1\n    end\n    return result\nend", "  local result = 0\n  result = operand[1]\n\
    \  for i=1,#operator do\n    if operator[i] == '+' then\n      result = result\
    \ + operand[i+1]\n    elseif operator[i] == '-' then\n      result = result -\
    \ operand[i+1]\n    elseif operator[i] == '*' then\n      result = result * operand[i+1]\n\
    \    elseif operator[i] == '//' then\n      result = result // operand[i+1]\n\
    \    elseif operator[i] == '**' then\n      result = result ^ operand[i+1]\n \
    \   end\n  end\n  return result\nend", "  local result = operand[1]\n  for i =\
    \ 1, #operator do\n    if operator[i] == '+' then\n      result = result + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      result = result - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      result = result * operand[i\
    \ + 1]\n    elseif operator[i] == '//' then\n      result = result // operand[i\
    \ + 1]\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "    local value = operand[1]\n\
    \    for i = 1, #operator do\n        local op = operator[i]\n        local a\
    \ = operand[i+1]\n        if op == '+' then\n            value = value + a\n \
    \       elseif op == '-' then\n            value = value - a\n        elseif op\
    \ == '*' then\n            value = value * a\n        elseif op == '//' then\n\
    \            value = math.floor(value / a)\n        elseif op == '**' then\n \
    \           value = value ^ a\n        end\n    end\n    return value\nend", " \
    \   local res = operand[1]\n    for i=1,#operator do\n        if operator[i] ==\
    \ '+' then\n            res = res + operand[i+1]\n        elseif operator[i] ==\
    \ '-' then\n            res = res - operand[i+1]\n        elseif operator[i] ==\
    \ '*' then\n            res = res * operand[i+1]\n        elseif operator[i] ==\
    \ '//' then\n            res = math.floor(res / operand[i+1])\n        elseif\
    \ operator[i] == '**' then\n            res = res ^ operand[i+1]\n        end\n\
    \    end\n    return res\nend", "  local result = operand[1]\n  for i=1,#operator\
    \ do\n    if operator[i] == '+' then\n      result = result + operand[i+1]\n \
    \   elseif operator[i] == '-' then\n      result = result - operand[i+1]\n   \
    \ elseif operator[i] == '*' then\n      result = result * operand[i+1]\n    elseif\
    \ operator[i] == '//' then\n      result = math.floor(result / operand[i+1])\n\
    \    elseif operator[i] == '**' then\n      result = result ^ operand[i+1]\n \
    \   end\n  end\n  return result\nend", "\tlocal result = operand[1]\n\tfor i =\
    \ 1, #operator do\n\t\tlocal op = operator[i]\n\t\tlocal op1 = operand[i+1]\n\t\
    \tif op == '+' then\n\t\t\tresult = result + op1\n\t\telseif op == '-' then\n\t\
    \t\tresult = result - op1\n\t\telseif op == '*' then\n\t\t\tresult = result *\
    \ op1\n\t\telseif op == '//' then\n\t\t\tresult = math.floor(result / op1)\n\t\
    \telseif op == '**' then\n\t\t\tresult = result ^ op1\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local a, b = operand[1], operand[2]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            a = a + b\n        elseif\
    \ operator[i] == '-' then\n            a = a - b\n        elseif operator[i] ==\
    \ '*' then\n            a = a * b\n        elseif operator[i] == '//' then\n \
    \           a = a // b\n        elseif operator[i] == '**' then\n            a\
    \ = a ^ b\n        end\n        b = operand[i + 2]\n    end\n    return a\nend",
  "    local result\n    local op = {\n        ['+'] = function(a, b) return a + b\
    \ end,\n        ['-'] = function(a, b) return a - b end,\n        ['*'] = function(a,\
    \ b) return a * b end,\n        ['//'] = function(a, b) return a // b end,\n \
    \       ['**'] = function(a, b) return a ^ b end,\n    }\n    for i = 1, #operator\
    \ do\n        result = op[operator[i]](operand[i], operand[i + 1])\n        operand[i\
    \ + 1] = result\n    end\n    return result\nend", "    local val = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ val = val + operand[i + 1]\n        elseif operator[i] == '-' then\n       \
    \     val = val - operand[i + 1]\n        elseif operator[i] == '*' then\n   \
    \         val = val * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            val = math.floor(val / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            val = val ^ operand[i + 1]\n        end\n    end\n\
    \    return val\nend", "  local res = operand[1]\n  for i = 1, #operator do\n\
    \    if operator[i] == '+' then\n      res = res + operand[i + 1]\n    elseif\
    \ operator[i] == '-' then\n      res = res - operand[i + 1]\n    elseif operator[i]\
    \ == '*' then\n      res = res * operand[i + 1]\n    elseif operator[i] == '//'\
    \ then\n      res = math.floor(res / operand[i + 1])\n    elseif operator[i] ==\
    \ '**' then\n      res = res ^ operand[i + 1]\n    end\n  end\n  return res\n\
    end", "    local res = operand[1]\n    for i=1,#operator do\n        if operator[i]\
    \ == '+' then\n            res = res + operand[i+1]\n        elseif operator[i]\
    \ == '-' then\n            res = res - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            res = res * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            res = math.floor(res / operand[i+1])\n        elseif\
    \ operator[i] == '**' then\n            res = res ^ operand[i+1]\n        end\n\
    \    end\n    return res\nend", "  local result = operand[1]\n  for i=1,#operator\
    \ do\n    if operator[i] == '+' then\n      result = result + operand[i+1]\n \
    \   elseif operator[i] == '-' then\n      result = result - operand[i+1]\n   \
    \ elseif operator[i] == '*' then\n      result = result * operand[i+1]\n    elseif\
    \ operator[i] == '//' then\n      result = result // operand[i+1]\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i+1]\n    end\n  end\n\
    \  return result\nend", "\tlocal acc = operand[1]\n\tfor i = 1, #operator do\n\
    \t\tif operator[i] == '+' then\n\t\t\tacc = acc + operand[i + 1]\n\t\telseif operator[i]\
    \ == '-' then\n\t\t\tacc = acc - operand[i + 1]\n\t\telseif operator[i] == '*'\
    \ then\n\t\t\tacc = acc * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\
    \t\t\tacc = math.floor(acc / operand[i + 1])\n\t\telseif operator[i] == '**' then\n\
    \t\t\tacc = acc ^ operand[i + 1]\n\t\tend\n\tend\n\treturn acc\nend", "    local\
    \ function do_calc(op1, op2, op)\n        if op == '+' then\n            return\
    \ op1 + op2\n        elseif op == '-' then\n            return op1 - op2\n   \
    \     elseif op == '*' then\n            return op1 * op2\n        elseif op ==\
    \ '//' then\n            return op1 // op2\n        elseif op == '**' then\n \
    \           return op1 ^ op2\n        end\n    end\n    local res\n    local function\
    \ do_exp(index)\n        local a, b, op\n        op = operator[index]\n      \
    \  a = operand[index]\n        b = operand[index + 1]\n        if index > 1 then\n\
    \            a = do_exp(index - 1)\n        end\n        return do_calc(a, b,\
    \ op)\n    end\n    res = do_exp(#operator)\n    return res\nend", "    local\
    \ res = operand[1]\n    for i = 1, #operator do\n        if operator[i] == '+'\
    \ then\n            res = res + operand[i + 1]\n        elseif operator[i] ==\
    \ '-' then\n            res = res - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            res = res * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            res = math.floor(res / operand[i + 1])\n        elseif\
    \ operator[i] == '**' then\n            res = res ^ operand[i + 1]\n        end\n\
    \    end\n    return res\nend", "  local res = operand[1]\n  for i=1,#operator\
    \ do\n    if operator[i] == '+' then\n      res = res + operand[i+1]\n    elseif\
    \ operator[i] == '-' then\n      res = res - operand[i+1]\n    elseif operator[i]\
    \ == '*' then\n      res = res * operand[i+1]\n    elseif operator[i] == '//'\
    \ then\n      res = res // operand[i+1]\n    elseif operator[i] == '**' then\n\
    \      res = res ^ operand[i+1]\n    end\n  end\n  return res\nend", "  -- \u8FD9\
    \u9898\u6211\u89C9\u5F97\u82F1\u8BED\u63CF\u8FF0\u4E0D\u597D\uFF0C\u6709\u4E9B\
    \u6A21\u7CCA\u3002\n  -- \u524D\u9762\u53EA\u662F\u63CF\u8FF0\u4E86\u57FA\u672C\
    \u7684\u8FD0\u7B97\u7B26\uFF0C\u4F46\u662F\u9898\u76EE\u5176\u5B9E\u4E0D\u652F\
    \u6301\u8FD9\u4E9B\u8FD0\u7B97\u7B26\uFF0C\u800C\u662F\u652F\u6301Lua\u7684\u6807\
    \u51C6\u8FD0\u7B97\u7B26\n  -- \u6BD4\u5982 // \u662F\u4E0D\u652F\u6301\u7684\uFF0C\
    \u4F46\u662F\u6574\u9664\u652F\u6301(/), \u5E42\u8FD0\u7B97\u652F\u6301\uFF08\
    ^\uFF09\n  -- \u6211\u8FD9\u91CC\u628ALua\u7684\u8FD0\u7B97\u7B26\u8F6C\u6210\u4E86\
    \u7B26\u53F7\uFF0C\u5E76\u4E14\u628A\u7B26\u53F7\u8F6C\u6362\u6210\u6570\u5B57\
    \uFF0C\u65B9\u4FBF\u8BA1\u7B97\n  local operator_table = {\n    ['+'] = \"+\"\
    , ['-'] = \"-\", ['*'] = \"*\", ['//'] = \"/\", ['^'] = \"^\"\n  }\n  local operator_table_cal\
    \ = {\n    ['+'] = function(a, b) return a + b end,\n    ['-'] = function(a, b)\
    \ return a - b end,\n    ['*'] = function(a, b) return a * b end,\n    ['//']\
    \ = function(a, b) return a / b end,\n    ['^'] = function(a, b) return a ^ b\
    \ end\n  }\n  local operator_table_cal_op = {\n    ['+'] = 1, ['-'] = 1, ['*']\
    \ = 2, ['//'] = 2, ['^'] = 3\n  }\n  local result_num_stack = {}\n  local result_operator_stack\
    \ = {}\n  local result_cal_operator_stack = {}\n  local function eval(num_stack,\
    \ operator_stack, cal", "    local funcs = {\n        ['+'] = function(x, y) return\
    \ x + y end,\n        ['-'] = function(x, y) return x - y end,\n        ['*']\
    \ = function(x, y) return x * y end,\n        ['//'] = function(x, y) return x\
    \ // y end,\n        ['**'] = function(x, y) return x ^ y end,\n    }\n    local\
    \ o = table.remove(operator, 1)\n    local f = funcs[o]\n    while true do\n \
    \       local x = table.remove(operand, 1)\n        local y = table.remove(operand,\
    \ 1)\n        local t = f(x, y)\n        if #operator > 0 then\n            table.insert(operand,\
    \ 1, t)\n            o = table.remove(operator, 1)\n            f = funcs[o]\n\
    \        else\n            return t\n        end\n    end\nend", "  local result\
    \ = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n  \
    \    result = result + operand[i + 1]\n    elseif operator[i] == '-' then\n  \
    \    result = result - operand[i + 1]\n    elseif operator[i] == '*' then\n  \
    \    result = result * operand[i + 1]\n    elseif operator[i] == '//' then\n \
    \     result = math.floor(result / operand[i + 1])\n    elseif operator[i] ==\
    \ '**' then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return\
    \ result\nend", "  for i = 1, #operator do\n    local a, b = operand[i], operand[i\
    \ + 1]\n    if operator[i] == '+' then\n      operand[i + 1] = a + b\n    elseif\
    \ operator[i] == '-' then\n      operand[i + 1] = a - b\n    elseif operator[i]\
    \ == '*' then\n      operand[i + 1] = a * b\n    elseif operator[i] == '//' then\n\
    \      operand[i + 1] = math.floor(a / b)\n    elseif operator[i] == '**' then\n\
    \      operand[i + 1] = a ^ b\n    end\n  end\n  return operand[#operand]\nend",
  "  if not operator or not operand then\n    return nil\n  end\n  local result =\
    \ operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n    \
    \  result = result + operand[i + 1]\n    elseif operator[i] == '-' then\n    \
    \  result = result - operand[i + 1]\n    elseif operator[i] == '*' then\n    \
    \  result = result * operand[i + 1]\n    elseif operator[i] == '//' then\n   \
    \   result = result // operand[i + 1]\n    elseif operator[i] == '**' then\n \
    \     result = result ^ operand[i + 1]\n    end\n  end\n  return result\nend",
  "    local result = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            result = result + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "  local t = {\n    ['+']\
    \ = function(x, y) return x + y end,\n    ['-'] = function(x, y) return x - y\
    \ end,\n    ['*'] = function(x, y) return x * y end,\n    ['//'] = function(x,\
    \ y) return math.floor(x / y) end,\n    ['^'] = function(x, y) return x ^ y end\n\
    \  }\n  for i = 1, #operator do\n    for k, v in pairs(t) do\n      if operator[i]\
    \ == k then\n        operand[i + 1] = v(operand[i], operand[i + 1])\n      end\n\
    \    end\n  end\n  return operand[#operand]\nend", "    local operators = {\n\
    \        ['+'] = function(x, y) return x + y end,\n        ['-'] = function(x,\
    \ y) return x - y end,\n        ['*'] = function(x, y) return x * y end,\n   \
    \     ['//'] = function(x, y) return x // y end,\n        ['**'] = function(x,\
    \ y) return x ^ y end\n    }\n    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        result = operators[operator[i]](result, operand[i + 1])\n    end\n\
    \    return result\nend", "  local n = #operator\n  local ans = operand[1]\n \
    \ for i = 1, n do\n    local f = operator[i]\n    local x = operand[i + 1]\n \
    \   if f == '+' then\n      ans = ans + x\n    elseif f == '-' then\n      ans\
    \ = ans - x\n    elseif f == '*' then\n      ans = ans * x\n    elseif f == '//'\
    \ then\n      ans = math.floor(ans / x)\n    elseif f == '**' then\n      ans\
    \ = ans ^ x\n    end\n  end\n  return ans\nend", "    local eval_function = function(a,\
    \ b, op)\n        if op == '+' then\n            return a + b\n        elseif\
    \ op == '-' then\n            return a - b\n        elseif op == '*' then\n  \
    \          return a * b\n        elseif op == '//' then\n            return math.floor(a\
    \ / b)\n        elseif op == '**' then\n            return a ^ b\n        end\n\
    \    end\n    local res = operand[1]\n    for i = 1, #operator do\n        res\
    \ = eval_function(res, operand[i + 1], operator[i])\n    end\n    return res\n\
    end", "  return tostring(operand[1])..tostring(operator[1])..tostring(operand[2])..tostring(operator[2])..tostring(operand[3])..tostring(operator[3])..tostring(operand[4])\n\
    end", "    local result = 0\n    result = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            result = result + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            result = result -\
    \ operand[i + 1]\n        elseif operator[i] == '*' then\n            result =\
    \ result * operand[i + 1]\n        elseif operator[i] == '//' then\n         \
    \   result = math.floor(result / operand[i + 1])\n        elseif operator[i] ==\
    \ '**' then\n            result = result ^ operand[i + 1]\n        end\n    end\n\
    \    return result\nend", "  local result = 0\n  for i,v in ipairs(operator) do\n\
    \    if i == 1 then\n      result = operand[i] .. v .. operand[i+1]\n    else\n\
    \      result = result .. v .. operand[i+1]\n    end\n  end\n  return loadstring(\"\
    return \" .. result)()\nend", "    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            result = result + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            result = result -\
    \ operand[i + 1]\n        elseif operator[i] == '*' then\n            result =\
    \ result * operand[i + 1]\n        elseif operator[i] == '//' then\n         \
    \   result = math.floor(result / operand[i + 1])\n        elseif operator[i] ==\
    \ '**' then\n            result = result ^ operand[i + 1]\n        end\n    end\n\
    \    return result\nend", "  local result = operand[1]\n  for i=1,#operator do\n\
    \    if operator[i] == '+' then\n      result = result + operand[i+1]\n    elseif\
    \ operator[i] == '-' then\n      result = result - operand[i+1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i+1]\n    elseif operator[i] ==\
    \ '//' then\n      result = result // operand[i+1]\n    elseif operator[i] ==\
    \ '**' then\n      result = result ^ operand[i+1]\n    end\n  end\n  return result\n\
    end", "    local result = operand[1]\n    for i=1,#operator do\n        if operator[i]\
    \ == '+' then\n            result = result + operand[i+1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i+1])\n     \
    \   elseif operator[i] == '**' then\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    local tmp = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ tmp = tmp + operand[i + 1]\n        elseif operator[i] == '-' then\n       \
    \     tmp = tmp - operand[i + 1]\n        elseif operator[i] == '*' then\n   \
    \         tmp = tmp * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            tmp = math.floor(tmp / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            tmp = tmp ^ operand[i + 1]\n        end\n    end\n\
    \    return tmp\nend", "    local result = 0\n    for k, op in ipairs(operator)\
    \ do\n        if k == 1 then\n            result = operand[k]\n        end\n \
    \       if op == '+' then\n            result = result + operand[k + 1]\n    \
    \    elseif op == '-' then\n            result = result - operand[k + 1]\n   \
    \     elseif op == '*' then\n            result = result * operand[k + 1]\n  \
    \      elseif op == '//' then\n            result = result // operand[k + 1]\n\
    \        elseif op == '**' then\n            result = result ^ operand[k + 1]\n\
    \        end\n    end\n    return result\nend", "\tlocal i = 1\n\tlocal n = #operator\n\
    \twhile i <= n do\n\t\tif operator[i] == \"//\" then\n\t\t\toperand[i + 1] = operand[i]\
    \ // operand[i + 1]\n\t\t\ttable.remove(operand, i)\n\t\t\ttable.remove(operator,\
    \ i)\n\t\t\tn = n - 1\n\t\telseif operator[i] == \"**\" then\n\t\t\toperand[i\
    \ + 1] = operand[i] ^ operand[i + 1]\n\t\t\ttable.remove(operand, i)\n\t\t\ttable.remove(operator,\
    \ i)\n\t\t\tn = n - 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\ti = 1\n\t\
    while i <= n do\n\t\tif operator[i] == \"*\" then\n\t\t\toperand[i + 1] = operand[i]\
    \ * operand[i + 1]\n\t\t\ttable.remove(operand, i)\n\t\t\ttable.remove(operator,\
    \ i)\n\t\t\tn = n - 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\ti = 1\n\t\
    while i <= n do\n\t\tif operator[i] == \"+\" then\n\t\t\toperand[i + 1] = operand[i]\
    \ + operand[i + 1]\n\t\t\ttable.remove(operand, i)\n\t\t\ttable.remove(operator,\
    \ i)\n\t\t\tn = n - 1\n\t\telseif operator[i] == \"-\" then\n\t\t\toperand[i +\
    \ 1] = operand[i] - operand[i + 1]\n\t\t\ttable.remove(operand, i)\n\t\t\ttable.remove(operator,\
    \ i)\n\t\t\tn = n - 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn operand[1]\n\
    end", "\tlocal result = operand[1]\n\tfor i = 1, #operator do\n\t\tif operator[i]\
    \ == '+' then\n\t\t\tresult = result + operand[i + 1]\n\t\telseif operator[i]\
    \ == '-' then\n\t\t\tresult = result - operand[i + 1]\n\t\telseif operator[i]\
    \ == '*' then\n\t\t\tresult = result * operand[i + 1]\n\t\telseif operator[i]\
    \ == '//' then\n\t\t\tresult = math.floor(result / operand[i + 1])\n\t\telseif\
    \ operator[i] == '**' then\n\t\t\tresult = result ^ operand[i + 1]\n\t\tend\n\t\
    end\n\treturn result\nend", "  local eval = function(a, b, op)\n    if op == '+'\
    \ then return a + b end\n    if op == '-' then return a - b end\n    if op ==\
    \ '*' then return a * b end\n    if op == '//' then return a // b end\n    if\
    \ op == '**' then return a ^ b end\n  end\n  local res = operand[1]\n  for i =\
    \ 1, #operator do\n    res = eval(res, operand[i + 1], operator[i])\n  end\n \
    \ return res\nend", "    local result = operand[1]\n    for i=1,#operator do\n\
    \        local op = operator[i]\n        local oper = operand[i+1]\n        if\
    \ op == '+' then\n            result = result + oper\n        elseif op == '-'\
    \ then\n            result = result - oper\n        elseif op == '*' then\n  \
    \          result = result * oper\n        elseif op == '//' then\n          \
    \  result = result // oper\n        elseif op == '**' then\n            result\
    \ = result ^ oper\n        end\n    end\n    return result\nend", "  local sum\
    \ = 0\n  local op = nil\n  local prev = nil\n  for k,v in ipairs(operand) do\n\
    \    if op then\n      if op == '+' then\n        sum = sum + prev + v\n     \
    \ elseif op == '-' then\n        sum = sum + prev - v\n      elseif op == '*'\
    \ then\n        sum = sum + prev * v\n      elseif op == '//' then\n        sum\
    \ = sum + prev // v\n      elseif op == '**' then\n        sum = sum + prev ^\
    \ v\n      end\n    else\n      sum = sum + v\n    end\n    op = operator[k]\n\
    \    prev = v\n  end\n  return sum\nend", "    local function op(x, y, o)\n  \
    \      if o == \"+\" then return x + y end\n        if o == \"-\" then return\
    \ x - y end\n        if o == \"*\" then return x * y end\n        if o == \"//\"\
    \ then return math.floor(x / y) end\n        if o == \"**\" then return x ^ y\
    \ end\n    end\n    local x = table.remove(operand, 1)\n    for i = 1, #operator\
    \ do\n        x = op(x, table.remove(operand, 1), operator[i])\n    end\n    return\
    \ x\nend", "\tlocal res = operand[1]\n\tfor i = 1, #operator do\n\t\tlocal op\
    \ = operator[i]\n\t\tlocal a = operand[i]\n\t\tlocal b = operand[i + 1]\n\t\t\
    if op == '+' then\n\t\t\tres = res + b\n\t\telseif op == '-' then\n\t\t\tres =\
    \ res - b\n\t\telseif op == '*' then\n\t\t\tres = res * b\n\t\telseif op == '//'\
    \ then\n\t\t\tres = math.floor(res / b)\n\t\telseif op == '**' then\n\t\t\tres\
    \ = res ^ b\n\t\tend\n\tend\n\treturn res\nend", "    local stack = {}\n    local\
    \ op = {\n        [\"+\"] = function(a, b) return a + b end,\n        [\"-\"]\
    \ = function(a, b) return a - b end,\n        [\"*\"] = function(a, b) return\
    \ a * b end,\n        [\"//\"] = function(a, b) return a // b end,\n        [\"\
    **\"] = function(a, b) return a ^ b end,\n    }\n    for i = 1, #operator do\n\
    \        table.insert(stack, operand[i + 1])\n        table.insert(stack, operator[i])\n\
    \    end\n    table.insert(stack, operand[#operand])\n    local result = table.remove(stack)\n\
    \    while #stack > 0 do\n        result = op[table.remove(stack)](table.remove(stack),\
    \ result)\n    end\n    return result\nend", "  local result = operand[1]\n  for\
    \ i = 1, #operator do\n    if operator[i] == '+' then\n      result = result +\
    \ operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result -\
    \ operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result *\
    \ operand[i + 1]\n    elseif operator[i] == '//' then\n      result = result //\
    \ operand[i + 1]\n    elseif operator[i] == '**' then\n      result = result ^\
    \ operand[i + 1]\n    end\n  end\n  return result\nend", "    local res = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ res = res + operand[i + 1]\n        elseif operator[i] == '-' then\n       \
    \     res = res - operand[i + 1]\n        elseif operator[i] == '*' then\n   \
    \         res = res * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            res = math.floor(res / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            res = res ^ operand[i + 1]\n        end\n    end\n\
    \    return res\nend", "\tfor i = 1, #operator do\n\t\tif operator[i] == \"+\"\
    \ then\n\t\t\toperand[i + 1] = operand[i] + operand[i + 1]\n\t\telseif operator[i]\
    \ == \"-\" then\n\t\t\toperand[i + 1] = operand[i] - operand[i + 1]\n\t\telseif\
    \ operator[i] == \"*\" then\n\t\t\toperand[i + 1] = operand[i] * operand[i + 1]\n\
    \t\telseif operator[i] == \"//\" then\n\t\t\toperand[i + 1] = operand[i] // operand[i\
    \ + 1]\n\t\telseif operator[i] == \"**\" then\n\t\t\toperand[i + 1] = operand[i]\
    \ ^ operand[i + 1]\n\t\tend\n\tend\n\treturn operand[#operand]\nend", "  -- Good\
    \ luck\n  local result = operand[1]\n  for i = 1, #operator do\n    local op =\
    \ operator[i]\n    local num = operand[i + 1]\n    if op == '+' then\n      result\
    \ = result + num\n    elseif op == '-' then\n      result = result - num\n   \
    \ elseif op == '*' then\n      result = result * num\n    elseif op == '//' then\n\
    \      result = math.floor(result / num)\n    elseif op == '**' then\n      result\
    \ = result ^ num\n    end\n  end\n  return result\nend", "    local operand1 =\
    \ table.remove(operand, 1)\n    while(#operand > 0) do\n        local operand2\
    \ = table.remove(operand, 1)\n        local operator_char = table.remove(operator,\
    \ 1)\n        if operator_char == \"+\" then\n            operand1 = operand1\
    \ + operand2\n        elseif operator_char == \"-\" then\n            operand1\
    \ = operand1 - operand2\n        elseif operator_char == \"*\" then\n        \
    \    operand1 = operand1 * operand2\n        elseif operator_char == \"//\" then\n\
    \            operand1 = math.floor(operand1 / operand2)\n        elseif operator_char\
    \ == \"**\" then\n            operand1 = operand1 ^ operand2\n        end\n  \
    \  end\n    return operand1\nend", "    return eval(table.concat(operand, table.concat(operator,\
    \ '')))\nend", "  local result\n  for i, v in ipairs(operator) do\n    if i ==\
    \ 1 then result = op_map[v](operand[i], operand[i + 1]) else result = op_map[v](result,\
    \ operand[i + 1]) end\n  end\n  return result\nend", "\tlocal result = operand[1]\n\
    \tfor i = 1, #operator do\n\t\tif operator[i] == '+' then\n\t\t\tresult = result\
    \ + operand[i + 1]\n\t\telseif operator[i] == '-' then\n\t\t\tresult = result\
    \ - operand[i + 1]\n\t\telseif operator[i] == '*' then\n\t\t\tresult = result\
    \ * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\t\t\tresult = math.floor(result\
    \ / operand[i + 1])\n\t\telseif operator[i] == '**' then\n\t\t\tresult = result\
    \ ^ operand[i + 1]\n\t\tend\n\tend\n\treturn result\nend", "\tlocal r = operand[1]\n\
    \tfor i = 1, #operator do\n\t\tlocal o = operator[i]\n\t\tlocal a = operand[i\
    \ + 1]\n\t\tif o == '+' then\n\t\t\tr = r + a\n\t\telseif o == '-' then\n\t\t\t\
    r = r - a\n\t\telseif o == '*' then\n\t\t\tr = r * a\n\t\telseif o == '//' then\n\
    \t\t\tr = math.floor(r / a)\n\t\telseif o == '**' then\n\t\t\tr = r ^ a\n\t\t\
    end\n\tend\n\treturn r\nend", "    local x, y = operand[1], operand[2]\n    local\
    \ temp\n    for i = 1, #operator do\n        local s = operator[i]\n        local\
    \ op = operand[i + 2]\n        if s == '+' then\n            temp = x + y\n  \
    \      elseif s == '-' then\n            temp = x - y\n        elseif s == '*'\
    \ then\n            temp = x * y\n        elseif s == '//' then\n            temp\
    \ = math.floor(x / y)\n        elseif s == '**' then\n            temp = x ^ y\n\
    \        end\n        x = temp\n        y = op\n    end\n    return temp\nend",
  "  local result = operand[1]\n  for i=1,#operator do\n    if operator[i] == '+'\
    \ then\n      result = result + operand[i+1]\n    elseif operator[i] == '-' then\n\
    \      result = result - operand[i+1]\n    elseif operator[i] == '*' then\n  \
    \    result = result * operand[i+1]\n    elseif operator[i] == '//' then\n   \
    \   result = math.floor(result / operand[i+1])\n    elseif operator[i] == '**'\
    \ then\n      result = result ^ operand[i+1]\n    end\n  end\n  return result\n\
    end", "  local i = 1\n  while i < #operator do\n    if operator[i] == '*' then\n\
    \      operand[i] = operand[i] * operand[i + 1]\n      table.remove(operand, i\
    \ + 1)\n      table.remove(operator, i)\n    elseif operator[i] == '//' then\n\
    \      operand[i] = math.floor(operand[i] / operand[i + 1])\n      table.remove(operand,\
    \ i + 1)\n      table.remove(operator, i)\n    elseif operator[i] == '**' then\n\
    \      operand[i] = operand[i] ^ operand[i + 1]\n      table.remove(operand, i\
    \ + 1)\n      table.remove(operator, i)\n    else\n      i = i + 1\n    end\n\
    \  end\n  local result = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      result = result + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      result = result - operand[i + 1]\n    end\n  end\n  return\
    \ result\nend", "  local counter = 0\n  for _, op in ipairs(operator) do\n   \
    \ if op == \"+\" then\n      operand[1] = operand[1] + operand[2]\n      table.remove(operand,\
    \ 2)\n    elseif op == \"-\" then\n      operand[1] = operand[1] - operand[2]\n\
    \      table.remove(operand, 2)\n    elseif op == \"*\" then\n      operand[1]\
    \ = operand[1] * operand[2]\n      table.remove(operand, 2)\n    elseif op ==\
    \ \"//\" then\n      operand[1] = math.floor(operand[1] / operand[2])\n      table.remove(operand,\
    \ 2)\n    elseif op == \"**\" then\n      operand[1] = operand[1] ^ operand[2]\n\
    \      table.remove(operand, 2)\n    end\n  end\n  return operand[1]\nend", "\t\
    if #operator < 1 or #operand < 2 then return end\n\tif #operator + 1 ~= #operand\
    \ then return end\n\tlocal result = operand[1]\n\tfor i = 1, #operator do\n\t\t\
    if operator[i] == '+' then\n\t\t\tresult = result + operand[i + 1]\n\t\telseif\
    \ operator[i] == '-' then\n\t\t\tresult = result - operand[i + 1]\n\t\telseif\
    \ operator[i] == '*' then\n\t\t\tresult = result * operand[i + 1]\n\t\telseif\
    \ operator[i] == '//' then\n\t\t\tresult = result // operand[i + 1]\n\t\telseif\
    \ operator[i] == '**' then\n\t\t\tresult = result ^ operand[i + 1]\n\t\tend\n\t\
    end\n\treturn result\nend", "    local algebric_expression = operand[1]\n    for\
    \ i=1,#operator do\n        if operator[i] == \"+\" then\n            algebric_expression\
    \ = algebric_expression + operand[i+1]\n        elseif operator[i] == \"-\" then\n\
    \            algebric_expression = algebric_expression - operand[i+1]\n      \
    \  elseif operator[i] == \"*\" then\n            algebric_expression = algebric_expression\
    \ * operand[i+1]\n        elseif operator[i] == \"//\" then\n            algebric_expression\
    \ = algebric_expression // operand[i+1]\n        elseif operator[i] == \"**\"\
    \ then\n            algebric_expression = algebric_expression ^ operand[i+1]\n\
    \        end\n    end\n    return algebric_expression\nend", "    local current_val\
    \ = operand[1]\n    for i = 1, #operator do\n        local op = operator[i]\n\
    \        local val = operand[i + 1]\n        if op == \"+\" then\n           \
    \ current_val = current_val + val\n        elseif op == \"-\" then\n         \
    \   current_val = current_val - val\n        elseif op == \"*\" then\n       \
    \     current_val = current_val * val\n        elseif op == \"//\" then\n    \
    \        current_val = current_val // val\n        elseif op == \"**\" then\n\
    \            current_val = current_val ^ val\n        end\n    end\n    return\
    \ current_val\nend", "    local result = 0\n    for i, op in ipairs(operator)\
    \ do\n        local left = operand[i]\n        local right = operand[i + 1]\n\
    \        if op == '+' then\n            result = left + right\n        elseif\
    \ op == '-' then\n            result = left - right\n        elseif op == '*'\
    \ then\n            result = left * right\n        elseif op == '//' then\n  \
    \          result = left // right\n        elseif op == '**' then\n          \
    \  result = left ^ right\n        end\n    end\n    return result\nend", "  local\
    \ op_fn = {['+'] = function(a, b) return a + b end,\n                 ['-'] =\
    \ function(a, b) return a - b end,\n                 ['*'] = function(a, b) return\
    \ a * b end,\n                 ['//'] = function(a, b) return a // b end,\n  \
    \               ['**'] = function(a, b) return a ^ b end}\n  local n = table.remove(operand,\
    \ 1)\n  for i = 1, #operator do\n    n = op_fn[operator[i]](n, operand[i])\n \
    \ end\n  return n\nend", "  local result = operand[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      result = result + operand[i + 1]\n\
    \    elseif operator[i] == '-' then\n      result = result - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      result = result * operand[i + 1]\n\
    \    elseif operator[i] == '//' then\n      result = math.floor(result / operand[i\
    \ + 1])\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "  for i = 1, #operator do\n  \
    \  local op = operator[i]\n    local n1 = operand[i]\n    local n2 = operand[i\
    \ + 1]\n    if op == '+' then\n      operand[i + 1] = n1 + n2\n    elseif op ==\
    \ '-' then\n      operand[i + 1] = n1 - n2\n    elseif op == '*' then\n      operand[i\
    \ + 1] = n1 * n2\n    elseif op == '//' then\n      operand[i + 1] = math.floor(n1\
    \ / n2)\n    elseif op == '**' then\n      operand[i + 1] = n1 ^ n2\n    end\n\
    \  end\n  return operand[#operand]\nend", "  local result = operand[1]\n  for\
    \ i = 1, #operator do\n    if operator[i] == '+' then\n      result = result +\
    \ operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result -\
    \ operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result *\
    \ operand[i + 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "  local formula =\
    \ ''\n  for i = 1, #operator do\n    formula = formula .. table.concat(operand,\
    \ '', i, i) .. operator[i]\n  end\n  formula = formula .. table.concat(operand,\
    \ '', #operator + 1)\n  return assert(loadstring('return ' .. formula))()\nend",
  "    local op_map = {\n        ['+'] = function(x, y) return x + y end,\n      \
    \  ['-'] = function(x, y) return x - y end,\n        ['*'] = function(x, y) return\
    \ x * y end,\n        ['//'] = function(x, y) return x // y end,\n        ['**']\
    \ = function(x, y) return x ^ y end,\n    }\n    for i, op in ipairs(operator)\
    \ do\n        if not op_map[op] then return nil end\n    end\n    local res =\
    \ operand[1]\n    for i, op in ipairs(operator) do\n        res = op_map[op](res,\
    \ operand[i + 1])\n    end\n    return res\nend", "  local n = #operator\n  local\
    \ result = operand[1]\n  for i = 1, n do\n    if operator[i] == '+' then\n   \
    \   result = result + operand[i + 1]\n    elseif operator[i] == '-' then\n   \
    \   result = result - operand[i + 1]\n    elseif operator[i] == '*' then\n   \
    \   result = result * operand[i + 1]\n    elseif operator[i] == '//' then\n  \
    \    result = math.floor(result / operand[i + 1])\n    elseif operator[i] == '**'\
    \ then\n      result = result ^ operand[i + 1]\n    end\n  end\n  return result\n\
    end", "  for i, op in ipairs(operator) do\n    if op == '+' then\n      operand[i]\
    \ = operand[i] + operand[i + 1]\n    elseif op == '-' then\n      operand[i] =\
    \ operand[i] - operand[i + 1]\n    elseif op == '*' then\n      operand[i] = operand[i]\
    \ * operand[i + 1]\n    elseif op == '//' then\n      operand[i] = math.floor(operand[i]\
    \ / operand[i + 1])\n    elseif op == '**' then\n      operand[i] = operand[i]\
    \ ^ operand[i + 1]\n    end\n    table.remove(operand, i + 1)\n  end\n  return\
    \ operand[1]\nend", "    local r = operand[1]\n    for i=1,#operator do\n    \
    \    if operator[i] == '+' then\n            r = r + operand[i+1]\n        elseif\
    \ operator[i] == '-' then\n            r = r - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            r = r * operand[i+1]\n        elseif operator[i] ==\
    \ '//' then\n            r = math.floor(r / operand[i+1])\n        elseif operator[i]\
    \ == '**' then\n            r = r ^ operand[i+1]\n        end\n    end\n    return\
    \ r\nend", "  local t = {}\n  for k, v in ipairs(operator) do\n    if v == '+'\
    \ then\n      table.insert(t, operand[k] + operand[k + 1])\n    elseif v == '-'\
    \ then\n      table.insert(t, operand[k] - operand[k + 1])\n    elseif v == '*'\
    \ then\n      table.insert(t, operand[k] * operand[k + 1])\n    elseif v == '//'\
    \ then\n      table.insert(t, operand[k] // operand[k + 1])\n    elseif v == '**'\
    \ then\n      table.insert(t, operand[k] ^ operand[k + 1])\n    end\n  end\n \
    \ return t[1]\nend", "\tlocal result = 0\n\tlocal previous = 0\n\tlocal current\
    \ = 0\n\tlocal prior = true\n\tfor i, op in ipairs(operator) do\n\t\tlocal key\
    \ = i\n\t\tlocal value = op\n\t\tif key < #operator then\n\t\t\tprior = true\n\
    \t\t\tprevious = operand[key]\n\t\t\tcurrent = operand[key + 1]\n\t\telse\n\t\t\
    \tprior = false\n\t\t\tprevious = result\n\t\t\tcurrent = operand[key + 1]\n\t\
    \tend\n\t\tif value == \"+\" then\n\t\t\tif prior then\n\t\t\t\tresult = previous\
    \ + current\n\t\t\telse\n\t\t\t\tresult = previous + current\n\t\t\tend\n\t\t\
    elseif value == \"-\" then\n\t\t\tif prior then\n\t\t\t\tresult = previous - current\n\
    \t\t\telse\n\t\t\t\tresult = previous - current\n\t\t\tend\n\t\telseif value ==\
    \ \"*\" then\n\t\t\tif prior then\n\t\t\t\tresult = previous * current\n\t\t\t\
    else\n\t\t\t\tresult = previous * current\n\t\t\tend\n\t\telseif value == \"//\"\
    \ then\n\t\t\tif prior then\n\t\t\t\tresult = math.floor(previous / current)\n\
    \t\t\telse\n\t\t\t\tresult = math.floor(previous / current)\n\t\t\tend\n\t\telseif\
    \ value == \"**\" then\n\t\t\tif prior then\n\t\t\t\tresult = previous ^ current\n\
    \t\t\telse\n\t\t\t\tresult = previous ^ current\n\t\t\tend\n\t\tend\n\tend\n\t\
    return result\nend", "  local result = operand[1]\n  for i = 1, #operator do\n\
    \    if operator[i] == '+' then\n      result = result + operand[i + 1]\n    elseif\
    \ operator[i] == '-' then\n      result = result - operand[i + 1]\n    elseif\
    \ operator[i] == '*' then\n      result = result * operand[i + 1]\n    elseif\
    \ operator[i] == '//' then\n      result = math.floor(result / operand[i + 1])\n\
    \    elseif operator[i] == '**' then\n      result = result ^ operand[i + 1]\n\
    \    end\n  end\n  return result\nend", "    --your code here\n    return operand[1]\n\
    end\nreturn do_algebra", "\tlocal result = operand[1]\n\tfor i=1,#operator do\n\
    \t\tif operator[i] == '+' then\n\t\t\tresult = result + operand[i+1]\n\t\telseif\
    \ operator[i] == '-' then\n\t\t\tresult = result - operand[i+1]\n\t\telseif operator[i]\
    \ == '*' then\n\t\t\tresult = result * operand[i+1]\n\t\telseif operator[i] ==\
    \ '//' then\n\t\t\tresult = math.floor(result / operand[i+1])\n\t\telseif operator[i]\
    \ == '**' then\n\t\t\tresult = result ^ operand[i+1]\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local function do_op(op, a, b)\n        if op == '+' then\n\
    \            return a + b\n        elseif op == '-' then\n            return a\
    \ - b\n        elseif op == '*' then\n            return a * b\n        elseif\
    \ op == '//' then\n            return math.floor(a / b)\n        elseif op ==\
    \ '**' then\n            return a ^ b\n        end\n    end\n    local r = operand[1]\n\
    \    for i = 1, #operator do\n        r = do_op(operator[i], r, operand[i + 1])\n\
    \    end\n    return r\nend", "\tlocal result = operand[1]\n\tfor i = 1, #operator\
    \ do\n\t\tif operator[i] == '+' then\n\t\t\tresult = result + operand[i + 1]\n\
    \t\telseif operator[i] == '-' then\n\t\t\tresult = result - operand[i + 1]\n\t\
    \telseif operator[i] == '*' then\n\t\t\tresult = result * operand[i + 1]\n\t\t\
    elseif operator[i] == '//' then\n\t\t\tresult = math.floor(result / operand[i\
    \ + 1])\n\t\telseif operator[i] == '**' then\n\t\t\tresult = result ^ operand[i\
    \ + 1]\n\t\tend\n\tend\n\treturn result\nend", "\tlocal val = operand[1]\n\tfor\
    \ i = 1, #operator do\n\t\tif operator[i] == '+' then\n\t\t\tval = val + operand[i\
    \ + 1]\n\t\telseif operator[i] == '-' then\n\t\t\tval = val - operand[i + 1]\n\
    \t\telseif operator[i] == '*' then\n\t\t\tval = val * operand[i + 1]\n\t\telseif\
    \ operator[i] == '//' then\n\t\t\tval = math.floor(val / operand[i + 1])\n\t\t\
    elseif operator[i] == '**' then\n\t\t\tval = val ^ operand[i + 1]\n\t\tend\n\t\
    end\n\treturn val\nend", "  local result = operand[1]\n  for i=1,#operator do\n\
    \    if operator[i] == '+' then\n      result = result + operand[i+1]\n    elseif\
    \ operator[i] == '-' then\n      result = result - operand[i+1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i+1]\n    elseif operator[i] ==\
    \ '//' then\n      result = math.floor(result / operand[i+1])\n    elseif operator[i]\
    \ == '**' then\n      result = result ^ operand[i+1]\n    end\n  end\n  return\
    \ result\nend", "  local operatorTable = {\n    ['+'] = function(a, b) return\
    \ a + b end,\n    ['-'] = function(a, b) return a - b end,\n    ['*'] = function(a,\
    \ b) return a * b end,\n    ['//'] = function(a, b) return a // b end,\n    ['**']\
    \ = function(a, b) return a ^ b end\n  }\n  local result = 0\n  for i = 1, #operator\
    \ do\n    result = operatorTable[operator[i]](result, operand[i + 1])\n  end\n\
    \  return result\nend", "    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            result = result + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            result = result -\
    \ operand[i + 1]\n        elseif operator[i] == '*' then\n            result =\
    \ result * operand[i + 1]\n        elseif operator[i] == '//' then\n         \
    \   result = result // operand[i + 1]\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend", "    local result = operand[1]\n    for i=1,#operator do\n   \
    \     if operator[i] == '+' then\n            result = result + operand[i+1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i+1]\n\
    \        elseif operator[i] == '*' then\n            result = result * operand[i+1]\n\
    \        elseif operator[i] == '//' then\n            result = result // operand[i+1]\n\
    \        elseif operator[i] == '**' then\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    local n = #operator\n   \
    \ local res = operand[1]\n    for i = 1, n do\n        local op = operator[i]\n\
    \        local x = operand[i + 1]\n        if op == '+' then\n            res\
    \ = res + x\n        elseif op == '-' then\n            res = res - x\n      \
    \  elseif op == '*' then\n            res = res * x\n        elseif op == '//'\
    \ then\n            res = math.floor(res / x)\n        elseif op == '**' then\n\
    \            res = res ^ x\n        end\n    end\n    return res\nend", "    local\
    \ e, i, a, b, t\n    for i, t in ipairs(operator) do\n        a, b = operand[i],\
    \ operand[i + 1]\n        if not e then\n            e = a\n        end\n    \
    \    if t == '+' then\n            e = e + b\n        elseif t == '-' then\n \
    \           e = e - b\n        elseif t == '*' then\n            e = e * b\n \
    \       elseif t == '//' then\n            e = math.floor(e / b)\n        elseif\
    \ t == '**' then\n            e = e ^ b\n        end\n    end\n    return e\n\
    end", "\tlocal ret\n\tif type(operator) ~= 'table' or type(operand) ~= 'table'\
    \ then\n\t\treturn ret\n\tend\n\tif #operator ~= #operand - 1 then\n\t\treturn\
    \ ret\n\tend\n\tfor i = 1, #operator do\n\t\tif not ret then\n\t\t\tret = {operator[i],\
    \ operand[i], operand[i + 1]}\n\t\telse\n\t\t\ttable.insert(ret, operator[i])\n\
    \t\t\ttable.insert(ret, operand[i + 1])\n\t\tend\n\tend\n\treturn table.unpack(ret)\n\
    end", "    local result = operand[1]\n    for i = 1, #operator do\n        local\
    \ op = operator[i]\n        local o1 = operand[i]\n        local o2 = operand[i\
    \ + 1]\n        if op == '+' then\n            result = o1 + o2\n        elseif\
    \ op == '-' then\n            result = o1 - o2\n        elseif op == '*' then\n\
    \            result = o1 * o2\n        elseif op == '//' then\n            result\
    \ = o1 // o2\n        elseif op == '**' then\n            result = o1 ^ o2\n \
    \       end\n    end\n    return result\nend", "    local result = operand[1]\n\
    \    for i = 1, #operator do\n        local op = operator[i]\n        local a\
    \ = operand[i]\n        local b = operand[i + 1]\n        if op == '+' then\n\
    \            result = result + b\n        elseif op == '-' then\n            result\
    \ = result - b\n        elseif op == '*' then\n            result = result * b\n\
    \        elseif op == '//' then\n            result = math.floor(result / b)\n\
    \        elseif op == '**' then\n            result = result ^ b\n        end\n\
    \    end\n    return result\nend", "  local result = 0\n  for i, v in ipairs(operator)\
    \ do\n    if v == '+' then\n      result = result + operand[i] + operand[i + 1]\n\
    \    elseif v == '-' then\n      result = result + operand[i] - operand[i + 1]\n\
    \    elseif v == '*' then\n      result = result + operand[i] * operand[i + 1]\n\
    \    elseif v == '//' then\n      result = result + operand[i] // operand[i +\
    \ 1]\n    elseif v == '**' then\n      result = result + operand[i] ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "    local result = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ result = result + operand[i + 1]\n        elseif operator[i] == '-' then\n \
    \           result = result - operand[i + 1]\n        elseif operator[i] == '*'\
    \ then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "  local a,b,c,result\n\
    \  if #operator > 0 then\n    if #operator == 1 then\n      if operator[1] ==\
    \ '+' then\n        result = operand[1] + operand[2]\n      elseif operator[1]\
    \ == '-' then\n        result = operand[1] - operand[2]\n      elseif operator[1]\
    \ == '*' then\n        result = operand[1] * operand[2]\n      elseif operator[1]\
    \ == '//' then\n        result = operand[1] // operand[2]\n      elseif operator[1]\
    \ == '**' then\n        result = operand[1] ^ operand[2]\n      end\n    else\n\
    \      a = table.remove(operator, 1)\n      b = table.remove(operand, 1)\n   \
    \   c = table.remove(operand, 1)\n      if a == '+' then\n        result = b +\
    \ c\n      elseif a == '-' then\n        result = b - c\n      elseif a == '*'\
    \ then\n        result = b * c\n      elseif a == '//' then\n        result =\
    \ b // c\n      elseif a == '**' then\n        result = b ^ c\n      end\n   \
    \   operand[1] = result\n      do_algebra(operator, operand)\n    end\n  end\n\
    \  return result\nend", "    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            result = result + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            result = result -\
    \ operand[i + 1]\n        elseif operator[i] == '*' then\n            result =\
    \ result * operand[i + 1]\n        elseif operator[i] == '//' then\n         \
    \   result = math.floor(result / operand[i + 1])\n        elseif operator[i] ==\
    \ '**' then\n            result = result ^ operand[i + 1]\n        end\n    end\n\
    \    return result\nend", "    local ans = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            ans = ans + operand[i +\
    \ 1]\n        elseif operator[i] == '-' then\n            ans = ans - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            ans = ans * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            ans = math.floor(ans\
    \ / operand[i + 1])\n        elseif operator[i] == '**' then\n            ans\
    \ = ans ^ operand[i + 1]\n        end\n    end\n    return ans\nend", "  local\
    \ sum = operand[1]\n  for i = 1, #operator do\n    if operator[i] == \"+\" then\n\
    \      sum = sum + operand[i + 1]\n    elseif operator[i] == \"-\" then\n    \
    \  sum = sum - operand[i + 1]\n    elseif operator[i] == \"*\" then\n      sum\
    \ = sum * operand[i + 1]\n    elseif operator[i] == \"//\" then\n      sum = math.floor(sum\
    \ / operand[i + 1])\n    elseif operator[i] == \"**\" then\n      sum = sum ^\
    \ operand[i + 1]\n    end\n  end\n  return sum\nend", "  while #operator > 0 do\n\
    \    local op = table.remove(operator, 1)\n    local a = table.remove(operand,\
    \ 1)\n    local b = table.remove(operand, 1)\n    if op == '+' then\n      table.insert(operand,\
    \ 1, a + b)\n    elseif op == '-' then\n      table.insert(operand, 1, a - b)\n\
    \    elseif op == '*' then\n      table.insert(operand, 1, a * b)\n    elseif\
    \ op == '//' then\n      table.insert(operand, 1, math.floor(a / b))\n    elseif\
    \ op == '**' then\n      table.insert(operand, 1, a ^ b)\n    end\n  end\n  return\
    \ operand[1]\nend", "  local res = operand[1]\n  for i = 1, #operator do\n   \
    \ if operator[i] == '+' then\n      res = res + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      res = res - operand[i + 1]\n    elseif operator[i] == '*'\
    \ then\n      res = res * operand[i + 1]\n    elseif operator[i] == '//' then\n\
    \      res = math.floor(res / operand[i + 1])\n    elseif operator[i] == '**'\
    \ then\n      res = res ^ operand[i + 1]\n    end\n  end\n  return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
