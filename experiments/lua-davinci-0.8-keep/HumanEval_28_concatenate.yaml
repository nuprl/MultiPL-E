name: HumanEval_28_concatenate
language: lua
prompt: "-- Concatenate list of strings into a single string\n-- >>> concatenate([])\n\
  -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = concatenate\n\
  \    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}), 'xyzwk')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = ''\n  for i = 1, #strings do\n    result = result\
    \ .. strings[i]\n  end\n  return result\nend", "    return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "    local result = ''\n    for i\
    \ = 1, #strings do\n        result = result .. strings[i]\n    end\n    return\
    \ result\nend", "  return table.concat(strings)\nend", "  local accumulator =\
    \ ''\n  for _, value in ipairs(strings) do\n    accumulator = accumulator .. value\n\
    \  end\n  return accumulator\nend", "  if #strings == 0 then\n    return ''\n\
    \  else\n    return table.concat(strings)\n  end\nend", "  return table.concat(strings)\n\
    end", "  local output = ''\n  for _, str in ipairs(strings) do\n    output = output\
    \ .. str\n  end\n  return output\nend", "    local string = ''\n    for _, v in\
    \ ipairs(strings) do\n        string = string .. v\n    end\n    return string\n\
    end", "  local current_string = ''\n  for _, s in ipairs(strings) do\n    current_string\
    \ = current_string .. s\n  end\n  return current_string\nend", "  if #strings\
    \ == 0 then\n    return ''\n  else\n    return table.concat(strings)\n  end\n\
    end", "    local result = ''\n    for _, str in ipairs(strings) do\n        result\
    \ = result .. str\n    end\n    return result\nend", "    return (table.concat(strings))\n\
    end", "  return table.concat(strings)\nend", "  local result = \"\"\n  for _,\
    \ str in ipairs(strings) do\n    result = result .. str\n  end\n  return result\n\
    end", "  local str = ''\n  for i, s in ipairs(strings) do\n    str = str .. s\n\
    \  end\n  return str\nend", "    return reduce(concat, '', strings)\nend", " \
    \   local result = ''\n    for _, str in ipairs(strings) do\n        result =\
    \ result .. str\n    end\n    return result\nend", "\treturn table.concat(strings)\n\
    end", "    return table.concat(strings)\nend", "  local function go(remaining,\
    \ acc)\n    if #remaining == 0 then\n      return acc\n    else\n      return\
    \ go(remaining, acc .. remaining[1])\n    end\n  end\n  return go(strings, '')\n\
    end", "  return table.concat(strings)\nend", "    if #strings == 0 then\n    \
    \    return ''\n    else\n        return table.concat(strings)\n    end\nend",
  "  return table.concat(strings)\nend", "    local result = ''\n    for i, v in ipairs(strings)\
    \ do\n        result = result .. v\n    end\n    return result\nend", "    return\
    \ table.concat(strings)\nend", "\tlocal out = ''\n\tfor i, v in ipairs(strings)\
    \ do\n\t\tout = out .. v\n\tend\n\treturn out\nend", "\tlocal res = \"\"\n\tfor\
    \ _,s in ipairs(strings) do\n\t\tres = res .. s\n\tend\n\treturn res\nend", "\t\
    local result = ''\n\tfor _,string in ipairs(strings) do\n\t\tresult = result ..\
    \ string\n\tend\n\treturn result\nend", "  local s = ''\n  for i = 1, #strings\
    \ do\n    s = s .. strings[i]\n  end\n  return s\nend", "  return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "  return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "    local result = \"\"\n    for\
    \ i, s in ipairs(strings) do\n        result = result .. s\n    end\n    return\
    \ result\nend", "    return table.concat(strings)\nend", "  local result = ''\n\
    \  for _, s in ipairs(strings) do\n    result = result .. s\n  end\n  return result\n\
    end", "  return table.concat(strings)\nend", "    return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "  local buffer = ''\n  for _,s in\
    \ ipairs(strings) do\n    buffer = buffer .. s\n  end\n  return buffer\nend",
  "  local result = ''\n  for i = 1, #strings do\n    result = result .. strings[i]\n\
    \  end\n  return result\nend", "    local str = \"\"\n    for _, s in ipairs(strings)\
    \ do\n        str = str .. s\n    end\n    return str\nend", "\treturn table.concat(strings)\n\
    end", "  if #strings == 0 then\n    return ''\n  else\n    return table.concat(strings)\n\
    \  end\nend", "    return (table.concat(strings))\nend", "    local result = \"\
    \"\n    for _, string in ipairs(strings) do\n        result = result .. string\n\
    \    end\n    return result\nend", "\treturn table.concat(strings)\nend", "  \
    \  local string = ''\n    for _, s in ipairs(strings) do\n        string = string\
    \ .. s\n    end\n    return string\nend", "    return table.concat(strings)\n\
    end", "    return table.concat(strings)\nend", "  local strings, result = u.is_array(strings)\
    \ and strings or {}, ''\n  for i, string in ipairs(strings) do\n    result = result\
    \ .. string\n  end\n  return result\nend", "    if strings == nil then\n     \
    \   return ''\n    end\n    local out = ''\n    for _, v in ipairs(strings) do\n\
    \        out = out .. v\n    end\n    return out\nend", "  if #strings > 0 then\n\
    \    return table.concat(strings)\n  else\n    return ''\n  end\nend", "    return\
    \ table.concat(strings)\nend", "    return table.concat(strings)\nend", "    local\
    \ result = {}\n    for _, string in ipairs(strings) do\n        result[#result\
    \ + 1] = string\n    end\n    return table.concat(result)\nend", "    local result\
    \ = ''\n    for _, string in ipairs(strings) do\n        result = result .. string\n\
    \    end\n    return result\nend", "\tlocal result = ''\n\tfor _,str in ipairs(strings)\
    \ do\n\t\tresult = result .. str\n\tend\n\treturn result\nend", "    local result\
    \ = \"\"\n    for i, s in ipairs(strings) do\n        result = result .. s\n \
    \   end\n    return result\nend", "  if #strings == 0 then\n    return ''\n  else\n\
    \    return table.concat(strings)\n  end\nend", "    return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "  local r = ''\n  for _, s in ipairs(strings)\
    \ do\n    r = r .. s\n  end\n  return r\nend", "  return table.concat(strings)\n\
    end", "    local result = ''\n    for _, value in ipairs(strings) do\n       \
    \ result = result .. value\n    end\n    return result\nend", "  local result\
    \ = \"\"\n  for i, s in ipairs(strings) do\n    result = result .. s\n  end\n\
    \  return result\nend", "    local newString = ''\n    for i = 1, #strings do\n\
    \        newString = newString .. strings[i]\n    end\n    return newString\n\
    end", "  local buf = {}\n  for _, string in ipairs(strings) do\n    buf[#buf +\
    \ 1] = string\n  end\n  return table.concat(buf)\nend", "  return table.concat(strings)\n\
    end", "  local result = \"\"\n  for i, string in ipairs(strings) do\n    result\
    \ = result .. string\n  end\n  return result\nend", "    local s = ''\n    for\
    \ i = 1, #strings do\n        s = s .. strings[i]\n    end\n    return s\nend",
  "  return table.concat(strings)\nend", "  if #strings == 0 then\n    return ''\n\
    \  else\n    return strings[1] .. concatenate(slice(strings, 2))\n  end\nend",
  "  local string = ''\n  for _, s in ipairs(strings) do\n    string = string .. s\n\
    \  end\n  return string\nend", "\tlocal result = ''\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tresult = result .. s\n\tend\n\treturn result\nend", "  local out = {}\n\
    \  for _, s in ipairs(strings) do\n    out[#out + 1] = s\n  end\n  return table.concat(out)\n\
    end", "    return table.concat(strings)\nend", "\tlocal result = ''\n\tfor _,\
    \ s in ipairs(strings) do\n\t\tresult = result .. s\n\tend\n\treturn result\n\
    end", "  local s = ''\n  for _, t in ipairs(strings) do\n    s = s .. t\n  end\n\
    \  return s\nend", "  local result = {}\n  for i = 1, #strings do\n    result[i]\
    \ = strings[i]\n  end\n  return table.concat(result)\nend", "  local result =\
    \ ''\n  for _, v in ipairs(strings) do\n    result = result .. v\n  end\n  return\
    \ result\nend", "  return concat(strings)\nend", "  if not strings then return\
    \ nil end\n  local result = ''\n  for _, str in ipairs(strings) do\n    result\
    \ = result .. str\n  end\n  return result\nend", "  local s = ''\n  for _,v in\
    \ ipairs(strings) do\n    s = s .. v\n  end\n  return s\nend", "  local output\
    \ = ''\n  for i = 1, #strings do\n    output = output .. strings[i]\n  end\n \
    \ return output\nend", "    return table.concat(strings)\nend", "  local t = {}\n\
    \  for _,v in ipairs(strings) do\n    t[#t+1] = v\n  end\n  return table.concat(t)\n\
    end", "  local concat_string = ''\n  for _, str in ipairs(strings) do\n    concat_string\
    \ = concat_string .. str\n  end\n  return concat_string\nend", "  local concatenated\
    \ = {}\n  for _, string in ipairs(strings) do\n    table.insert(concatenated,\
    \ string)\n  end\n  return table.concat(concatenated)\nend", "\treturn (table.concat(strings))\n\
    end", "  local result = ''\n  for i, v in ipairs(strings) do\n    result = result\
    \ .. v\n  end\n  return result\nend", "    return table.concat(strings)\nend",
  "  local result = ''\n  for _, v in ipairs(strings) do\n    result = result .. v\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for _, s in ipairs(strings)\
    \ do\n    result = result .. s\n  end\n  return result\nend", "  return table.concat(strings)\n\
    end", "\tlocal s = ''\n\tfor _, str in ipairs(strings) do\n\t\ts = s .. str\n\t\
    end\n\treturn s\nend", "  if type(strings) ~= 'table' then\n    return strings\n\
    \  end\n  local concat = ''\n  for _, s in ipairs(strings) do\n    concat = concat\
    \ .. s\n  end\n  return concat\nend", "    local result = ''\n    for _,s in ipairs(strings)\
    \ do\n        result = result .. s\n    end\n    return result\nend", "    local\
    \ result = ''\n    for _, str in ipairs(strings) do\n        result = result ..\
    \ str\n    end\n    return result\nend", "\tlocal result = ''\n\tfor _, string\
    \ in ipairs(strings) do\n\t\tresult = result .. string\n\tend\n\treturn result\n\
    end", "  local s = ''\n  for _, v in ipairs(strings) do\n    s = s .. v\n  end\n\
    \  return s\nend", "  local result = ''\n  for _, string in ipairs(strings) do\n\
    \    result = result .. string\n  end\n  return result\nend", "  local concatenated_string\
    \ = ''\n  for _, string in ipairs(strings) do\n    concatenated_string = concatenated_string\
    \ .. string\n  end\n  return concatenated_string\nend", "  return table.concat(strings)\n\
    end", "  local result = ''\n  for _, string in ipairs(strings) do\n    result\
    \ = result .. string\n  end\n  return result\nend", "  return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "  return table.concat(strings)\n\
    end", "\treturn table.concat(strings)\nend", "    return (table.concat(strings))\n\
    end", "    local result = ''\n    for _, s in ipairs(strings) do\n        result\
    \ = result .. s\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "    return table.concat(strings)\nend", "    local result = ''\n    for\
    \ _, string in ipairs(strings) do\n        result = result .. string\n    end\n\
    \    return result\nend", "  local len = #strings\n  if len == 0 then\n    return\
    \ ''\n  elseif len == 1 then\n    return strings[1]\n  else\n    local result\
    \ = strings[1]\n    for i = 2, len do\n      result = result .. strings[i]\n \
    \   end\n    return result\n  end\nend", "    local result = {}\n    for _, str\
    \ in ipairs(strings) do\n        result[#result + 1] = str\n    end\n    return\
    \ table.concat(result)\nend", "  return reduce(table.concat, strings, '')\nend",
  "  local result = ''\n  for _, str in ipairs(strings) do\n    result = result ..\
    \ str\n  end\n  return result\nend", "  local r = ''\n  for _, s in ipairs(strings)\
    \ do\n    r = r .. s\n  end\n  return r\nend", "\tlocal s = ''\n\tfor i, str in\
    \ ipairs(strings) do\n\t\ts = s .. str\n\tend\n\treturn s\nend", "  local result\
    \ = ''\n  for i,v in ipairs(strings) do\n    result = result .. v\n  end\n  return\
    \ result\nend", "    if #strings == 0 then\n        return ''\n    else\n    \
    \    return strings[1] .. concatenate(tail(strings))\n    end\nend", "    local\
    \ result = \"\"\n    for _, str in ipairs(strings) do\n        result = result\
    \ .. str\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "    return table.concat(strings)\n\
    end", "    local result = ''\n    for _, s in ipairs(strings) do\n        result\
    \ = result .. s\n    end\n    return result\nend", "    if #strings == 0 then\n\
    \        return ''\n    else\n        return strings[1] .. concatenate(table.slice(strings,\
    \ 2))\n    end\nend", "    local result = ''\n    for _, string in ipairs(strings)\
    \ do\n        result = result .. string\n    end\n    return result\nend", " \
    \   if #strings == 0 then\n        return ''\n    else\n        return table.concat(strings)\n\
    \    end\nend", "    local out = ''\n    for _, s in ipairs(strings) do\n    \
    \    out = out .. s\n    end\n    return out\nend", "    local result = ''\n \
    \   for i = 1, #strings do\n        result = result .. strings[i]\n    end\n \
    \   return result\nend", "    return table.concat(strings)\nend", "  if #strings\
    \ > 0 then\n    return table.concat(strings)\n  else\n    return ''\n  end\nend",
  "    local buffer = {}\n    for _, s in ipairs(strings) do\n        buffer[#buffer\
    \ + 1] = s\n    end\n    return table.concat(buffer)\nend", "  return table.concat(strings)\n\
    end", "  return table.concat(strings)\nend", "  local concat = ''\n  for i, word\
    \ in ipairs(strings) do\n    concat = concat .. word\n  end\n  return concat\n\
    end", "    local result = ''\n    for _, value in ipairs(strings) do\n       \
    \ result = result .. value\n    end\n    return result\nend", "  local result\
    \ = ''\n  for _, s in ipairs(strings) do\n    result = result .. s\n  end\n  return\
    \ result\nend", "    return table.concat(strings)\nend", "  local str = ''\n \
    \ for _,s in ipairs(strings) do\n    str = str .. s\n  end\n  return str\nend",
  "    return table.concat(strings)\nend", "  local result = ''\n  for _, s in ipairs(strings)\
    \ do\n    result = result .. s\n  end\n  return result\nend", "    return table.concat(strings)\n\
    end", "    return table.concat(strings)\nend", "  if (#strings == 0) then\n  \
    \  return ''\n  else\n    return table.concat(strings)\n  end\nend", "\tif #strings\
    \ == 0 then\n\t\treturn ''\n\telse\n\t\treturn table.concat(strings)\n\tend\n\
    end", "    local result = ''\n    for i = 1, #strings do\n        result = result\
    \ .. strings[i]\n    end\n    return result\nend", "  return table.concat(strings)\n\
    end", "  local result = ''\n  for i, str in ipairs(strings) do\n    result = result\
    \ .. str\n  end\n  return result\nend", "  if #strings == 0 then\n    return ''\n\
    \  else\n    return strings[1] .. concatenate(tail(strings))\n  end\nend", " \
    \   return table.concat(strings)\nend", "  local result = {}\n  for _, str in\
    \ ipairs(strings) do\n    table.insert(result, str)\n  end\n  return table.concat(result)\n\
    end", "    return table.concat(strings)\nend", "  if (#strings == 0) then\n  \
    \  return ''\n  else\n    return table.concat(strings)\n  end\nend", "    return\
    \ table.concat(strings)\nend", "    return table.concat(strings)\nend", "    return\
    \ table.concat(strings)\nend", "    local result = \"\"\n    for _, s in ipairs(strings)\
    \ do\n        result = result .. s\n    end\n    return result\nend", "  return\
    \ table.concat(strings)\nend", "    local result = ''\n    for _, string in ipairs(strings)\
    \ do\n        result = result .. string\n    end\n    return result\nend", " \
    \ return ('%s'):format(table.concat(strings))\nend", "\treturn table.concat(strings)\n\
    end", "    return table.concat(strings)\nend", "\tlocal result = \"\"\n\tfor i\
    \ = 1, #strings do\n\t\tresult = result .. strings[i]\n\tend\n\treturn result\n\
    end", "  return table.concat(strings)\nend", "  local acc = ''\n  for _, v in\
    \ ipairs(strings) do\n    acc = acc .. v\n  end\n  return acc\nend", "  local\
    \ result = ''\n  for _, string in ipairs(strings) do\n    result = result .. string\n\
    \  end\n  return result\nend", "    local stringified = ''\n    for _, value in\
    \ ipairs(strings) do\n        stringified = stringified .. value\n    end\n  \
    \  return stringified\nend", "  return table.concat(strings)\nend", "  return\
    \ table.concat(strings)\nend", "    local result = ''\n    for _, string in ipairs(strings)\
    \ do\n        result = result .. string\n    end\n    return result\nend", " \
    \   local result = ''\n    for i, str in ipairs(strings) do\n        result =\
    \ result .. str\n    end\n    return result\nend", "    local result = ''\n  \
    \  for _, v in ipairs(strings) do\n        result = result .. v\n    end\n   \
    \ return result\nend", "    local result = ''\n    for i = 1, #strings do\n  \
    \      result = result .. strings[i]\n    end\n    return result\nend", "    return\
    \ table.concat(strings)\nend", "    local result = ''\n    for _,s in ipairs(strings)\
    \ do\n        result = result .. s\n    end\n    return result\nend", "  local\
    \ result = ''\n  for i, str in ipairs(strings) do\n    result = result .. str\n\
    \  end\n  return result\nend", "    local result = ''\n    for i = 1, #strings\
    \ do\n        result = result .. strings[i]\n    end\n    return result\nend",
  "  if #strings == 0 then\n    return ''\n  else\n    return table.concat(strings)\n\
    \  end\nend", "  local concatenated_string = ''\n  for i,v in ipairs(strings)\
    \ do\n    concatenated_string = concatenated_string .. v\n  end\n  return concatenated_string\n\
    end", "  local ret = ''\n  for i = 1, #strings do\n    ret = ret .. strings[i]\n\
    \  end\n  return ret\nend", "    local str = ''\n    for i = 1, #strings do\n\
    \        str = str .. strings[i]\n    end\n    return str\nend", "\treturn table.concat(strings)\n\
    end", "    local res = \"\"\n    for _, v in ipairs(strings) do\n        res =\
    \ res .. v\n    end\n    return res\nend", "    return string.concat(strings)\n\
    end", "    if #strings == 0 then\n        return ''\n    else\n        return\
    \ strings[1] .. concatenate(lunamark.util.copy(strings, 2, #strings))\n    end\n\
    end", "  local table_length = #strings\n  if table_length == 0 then\n    return\
    \ ''\n  elseif table_length == 1 then\n    return strings[1]\n  else\n    local\
    \ string_builder = {}\n    for i = 1, table_length do\n      string_builder[i]\
    \ = strings[i]\n    end\n    return table.concat(string_builder)\n  end\nend",
  "  local result = {}\n  for _, string in ipairs(strings) do\n    table.insert(result,\
    \ string)\n  end\n  return table.concat(result)\nend", "    return table.concat(strings)\n\
    end", "    local buffer = {}\n    for _, string in ipairs(strings) do\n      \
    \  table.insert(buffer, string)\n    end\n    return table.concat(buffer)\nend",
  "  local result = ''\n  for _, s in ipairs(strings) do\n    result = result .. s\n\
    \  end\n  return result\nend", "  local result = ''\n  for _, str in ipairs(strings)\
    \ do\n    result = result .. str\n  end\n  return result\nend", "\tlocal result\
    \ = ''\n\tfor _,s in ipairs(strings) do\n\t\tresult = result .. s\n\tend\n\treturn\
    \ result\nend", "    return table.concat(strings)\nend", "\tlocal acc = ''\n\t\
    for i = 1, #strings do\n\t\tacc = acc .. strings[i]\n\tend\n\treturn acc\nend",
  "    local result = \"\"\n    for _, str in ipairs(strings) do\n        result =\
    \ result .. str\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
