name: HumanEval_124_valid_date
language: lua
results:
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  date = date:gsub('/', '-')\n  local\
    \ parts = date:split('-')\n  local day = tonumber(parts[2])\n  local month = tonumber(parts[1])\n\
    \  local year = tonumber(parts[3])\n  if #parts ~= 3 then\n    return false\n\
    \  end\n  if month < 1 or month > 12 then\n    return false\n  end\n  if day <\
    \ 1 or day > 31 then\n    return false\n  end\n  if month == 2 then\n    if day\
    \ > 29 then\n      return false\n    end\n  elseif month == 4 or month == 6 or\
    \ month == 9 or month == 11 then\n    if day > 30 then\n      return false\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpioaom73p.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpioaom73p.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpioaom73p.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\n   \
    \ local year, month, day = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if year and\
    \ month and day then\n        if ((month == \"01\" or month == \"03\" or month\
    \ == \"05\" or month == \"07\" or month == \"08\" or month == \"10\" or month\
    \ == \"12\") and (day >= \"01\" and day <= \"31\")) or ((month == \"04\" or month\
    \ == \"06\" or month == \"09\" or month == \"11\") and (day >= \"01\" and day\
    \ <= \"30\")) or (month == \"02\" and (day >= \"01\" and day <= \"29\")) then\n\
    \            return true\n        else\n            return false\n        end\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgthj8of.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqgthj8of.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc744cgkr.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpc744cgkr.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match('(%d+)/(%d+)/(%d+)')\n\
    \    local is_leap = (year % 4 == 0 and year % 100 ~= 0) or year % 400 == 0\n\
    \    local days_in_month = {31, is_leap and 29 or 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31}\n    local is_valid = month and day and year\n        and month\
    \ >= 1 and month <= 12\n        and day >= 1 and day <= days_in_month[month]\n\
    \    return is_valid\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8o3p66sh.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 'year')\nstack traceback:\n\
    \t/tmp/tmp8o3p66sh.lua:16: in local 'candidate'\n\t/tmp/tmp8o3p66sh.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  -- assume\
    \ month, day, year are all valid\n  month = true\n  day = true\n  year = true\n\
    \  -- assume date is valid\n  valid = true\n  -- split date into array\n  date_split\
    \ = string.split(date, \"%-\")\n  -- check if date is empty\n  if date == \"\"\
    \ then\n    return false\n  else\n    -- check if month is valid\n    if tonumber(date_split[1])\
    \ > 12 or tonumber(date_split[1]) < 1 then\n      return false\n    else\n   \
    \   month = true\n    end\n    -- check if year is valid\n    if tonumber(date_split[3])\
    \ > 9999 or tonumber(date_split[3]) < 1000 then\n      return false\n    else\n\
    \      year = true\n    end\n    -- check if day is valid\n    if (tonumber(date_split[1])\
    \ == 1 or tonumber(date_split[1]) == 3 or tonumber(date_split[1]) == 5 or tonumber(date_split[1])\
    \ == 7 or tonumber(date_split[1]) == 8 or tonumber(date_split[1]) == 10 or tonumber(date_split[1])\
    \ == 12) and (tonumber(date_split[2]) > 31 or tonumber(date_split[2]) < 1) then\n\
    \      return false\n    elseif (tonumber(date_split[1]) == 4 or tonumber(date_split[1])\
    \ == 6 or tonumber(date_split[1]) == 9 or tonumber(date_split[1]) == 11) and (tonumber(date_split[2])\
    \ > 30 or tonumber(date_split[2]) < 1) then\n      return false\n    elseif tonumber(date_split[1])\
    \ == 2 and (tonumber(date_split[2]) > 29 or tonumber(date_split[2]) < 1) then\n\
    \      return false\n    else\n      day = true\n    end\n  end\n  if month ==\
    \ true and day == true and year == true then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc15_3wv7.lua:23:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpc15_3wv7.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpc15_3wv7.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    date_tb = {}\n    for i in string.gmatch(date,\
    \ \"%d+\") do\n        table.insert(date_tb, i)\n    end\n    if date_tb[1] ==\
    \ nil or date_tb[2] == nil or date_tb[3] == nil then\n        return false\n \
    \   end\n    if string.len(date_tb[1]) ~= 2 or string.len(date_tb[2]) ~= 2 or\
    \ string.len(date_tb[3]) ~= 4 then\n        return false\n    end\n    if tonumber(date_tb[1])\
    \ > 12 or tonumber(date_tb[1]) < 1 then\n        return false\n    end\n    if\
    \ tonumber(date_tb[1]) == 2 then\n        if tonumber(date_tb[2]) > 29 or tonumber(date_tb[2])\
    \ < 1 then\n            return false\n        end\n    elseif tonumber(date_tb[1])\
    \ % 2 == 0 then\n        if tonumber(date_tb[2]) > 30 or tonumber(date_tb[2])\
    \ < 1 then\n            return false\n        end\n    else\n        if tonumber(date_tb[2])\
    \ > 31 or tonumber(date_tb[2]) < 1 then\n            return false\n        end\n\
    \    end\n    if date:match(\"^%d+%-%d+%-%d+$\") == nil then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then\n        return\
    \ false\n    end\n    days, months, years = date:match(\"(%d+)-(%d+)-(%d+)\")\n\
    \    if months and (months < 1 or months > 12) then\n        return false\n  \
    \  end\n    if days and ((months == 1 or months == 3 or months == 5 or months\
    \ == 7 or months == 8 or months == 10 or months == 12) and (days < 1 or days >\
    \ 31)) then\n        return false\n    end\n    if days and ((months == 4 or months\
    \ == 6 or months == 9 or months == 11) and (days < 1 or days > 30)) then\n   \
    \     return false\n    end\n    if days and (months == 2 and (days < 1 or days\
    \ > 29)) then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ccngiyc.lua:19:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp8ccngiyc.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8ccngiyc.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local days, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  if not days or not month or not year then return false end\n  local leap =\
    \ (year % 4 == 0 and year % 100 ~= 0) or year % 400 == 0\n  if (month == '01'\
    \ or month == '03' or month == '05' or month == '07' or month == '08' or month\
    \ == '10' or month == '12') and days == '31' then return true end\n  if (month\
    \ == '04' or month == '06' or month == '09' or month == '11') and days == '30'\
    \ then return true end\n  if month == '02' and leap and days == '29' then return\
    \ true end\n  if month == '02' and not leap and days == '28' then return true\
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllymk2iw.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpllymk2iw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep9vxq8n.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpep9vxq8n.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if #date == 0 then\n        return\
    \ false\n    end\n    month, day, year = date:match('(%d%d)%-(%d%d)%-(%d%d%d%d)')\n\
    \    if month == nil or day == nil or year == nil then\n        return false\n\
    \    end\n    year, month, day = tonumber(year), tonumber(month), tonumber(day)\n\
    \    if month < 1 or month > 12 then\n        return false\n    end\n    if month\
    \ == 2 then\n        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0)\
    \ then\n            if day < 1 or day > 29 then\n                return false\n\
    \            end\n        else\n            if day < 1 or day > 28 then\n    \
    \            return false\n            end\n        end\n    elseif month == 1\
    \ or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month\
    \ == 12 then\n        if day < 1 or day > 31 then\n            return false\n\
    \        end\n    else\n        if day < 1 or day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_table\
    \ = {}\n  local month_table = {1, 3, 5, 7, 8, 10, 12}\n  local sum = 0\n  local\
    \ month = 1\n  local day = 1\n  local year = 1\n  local i = 1\n  for word in string.gmatch(date,\
    \ \"%d+\") do\n    date_table[i] = word\n    i = i + 1\n  end\n  if i == 1 then\
    \ return false end\n  month = tonumber(date_table[1])\n  day = tonumber(date_table[2])\n\
    \  year = tonumber(date_table[3])\n  if month <= 0 or month > 12 then return false\
    \ end\n  if year <= 0 then return false end\n  if month == 2 then\n    if day\
    \ <= 0 or day > 29 then return false end\n  else\n    for k, v in pairs(month_table)\
    \ do\n      if month == v then\n        if day <= 0 or day > 31 then return false\
    \ end\n      else\n        if day <= 0 or day > 30 then return false end\n   \
    \   end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9y2337c3.lua:32:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp9y2337c3.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmp9y2337c3.lua:65: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yxbedzl.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp5yxbedzl.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- body\n    if date=='' then\
    \ return false end\n    local y,m,d=date:match('(%d%d%d%d)%-(%d%d)%-(%d%d)')\n\
    \    if (not y) or (not m) or (not d) then return false end\n    local function\
    \ is_in_range(s, l, h)\n        return (s>=l) and (s<=h)\n    end\n    local is_leap_year=function(y)\n\
    \        return (not (y%4) and (y%100)) or (not (y%400))\n    end\n    local max_days={31,28,31,30,31,30,31,31,30,31,30,31}\n\
    \    if is_leap_year(y) then max_days[2]=29 end\n    if not is_in_range(m,1,12)\
    \ then return false end\n    if not is_in_range(d,1,max_days[m]) then return false\
    \ end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprga1f8ul.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprga1f8ul.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local months_with_30_days = {4,6,9,11}\n\
    \  local date = date:split('-')\n  local day = tonumber(date[2])\n  local month\
    \ = tonumber(date[1])\n  local year = tonumber(date[3])\n  return #date == 3 and\
    \ (month==2 and day>=1 and day<=29 or day>=1 and day<=31 and not table.contains(months_with_30_days,\
    \ month)) and month>=1 and month<=12 and year>=1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpie25divo.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpie25divo.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpie25divo.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag3ov95z.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpag3ov95z.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp310j_2fy.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp310j_2fy.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if year % 4 == 0 then\n            if day > 29\
    \ then\n                return false\n            end\n        else\n        \
    \    if day > 28 then\n                return false\n            end\n       \
    \ end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \        if day > 30 then\n            return false\n        end\n    end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ohc0b7f.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1ohc0b7f.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp1ohc0b7f.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wbz0qwq.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6wbz0qwq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    --[[\n    #1. Check the date\
    \ string is not empty.\n    #2. Check the number of days in a month.\n    #3.\
    \ Check the months should not be less than 1 or higher than 12.\n    #4. Check\
    \ the date is in the format: mm-dd-yyyy\n    --]]\n    local months = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    local items = {}\n    for i in\
    \ string.gmatch(date, '%d+') do\n        table.insert(items, i)\n    end\n   \
    \ if #items ~= 3 then\n        return false\n    end\n    local day = tonumber(items[2])\n\
    \    local month = tonumber(items[1])\n    local year = tonumber(items[3])\n \
    \   if day > months[month] or day < 1 then\n        return false\n    end\n  \
    \  if month > 12 or month < 1 then\n        return false\n    end\n    if year\
    \ < 1 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzifow3wy.lua:32:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzifow3wy.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpzifow3wy.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- local not_empty = (#date ~=\
    \ 0) and true or false\n  -- local days_valid = false\n  -- local months_valid\
    \ = false\n  -- local year_valid = false\n  -- local reg_exp = '([0-9]{2})-([0-9]{2})-([0-9]{4})'\n\
    \  -- local _, _, months, days, year = string.find(date, reg_exp)\n  -- if ((months\
    \ and days and year) ~= nil) then\n  --   months_valid = (tonumber(months) <=\
    \ 12) and true or false\n  --   days_valid = ((tonumber(months) <= 12) and (tonumber(months)\
    \ == 1) and (tonumber(days) <= 31)) and true or false\n  --   days_valid = ((tonumber(months)\
    \ <= 12) and (tonumber(months) == 3) and (tonumber(days) <= 31)) and true or false\n\
    \  --   days_valid = ((tonumber(months) <= 12) and (tonumber(months) == 5) and\
    \ (tonumber(days) <= 31)) and true or false\n  --   days_valid = ((tonumber(months)\
    \ <= 12) and (tonumber(months) == 7) and (tonumber(days) <= 31)) and true or false\n\
    \  --   days_valid = ((tonumber(months) <= 12) and (tonumber(months) == 8) and\
    \ (tonumber(days) <= 31)) and true or false\n  --   days_valid = ((tonumber(months)\
    \ <= 12) and (tonumber(months) == 10) and (tonumber(days) <= 31)) and true or\
    \ false\n  --   days_valid = ((tonumber(months) <= 12) and (tonumber(months) ==\
    \ 12) and (tonumber(days) <= 31)) and true or false\n  --   days_valid = ((tonumber(months)\
    \ <= 12) and (tonumber(months) == 4) and (tonumber(days) <= 30)) and true or false\n\
    \  --   days_valid = ((tonumber(months) <= 12) and (tonumber(months) == 6) and\
    \ (tonumber(days) <= 30)) and true or false\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpirvtkcwb.lua:55: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then\n        return\
    \ false\n    end\n    local s = string.split(date, '-')\n    if #s ~= 3 then\n\
    \        return false\n    end\n    local y = tonumber(s[3])\n    local m = tonumber(s[1])\n\
    \    local d = tonumber(s[2])\n    if m == 2 then\n        if y % 400 == 0 or\
    \ (y % 4 == 0 and y % 100 ~= 0) then\n            if d < 1 or d > 29 then\n  \
    \              return false\n            end\n        else\n            if d <\
    \ 1 or d > 28 then\n                return false\n            end\n        end\n\
    \    elseif m % 2 == 0 then\n        if m < 1 or m > 12 then\n            return\
    \ false\n        end\n        if d < 1 or d > 30 then\n            return false\n\
    \        end\n    else\n        if m < 1 or m > 12 then\n            return false\n\
    \        end\n        if d < 1 or d > 31 then\n            return false\n    \
    \    end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq7ij8se.lua:18:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaq7ij8se.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpaq7ij8se.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- your code goes here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3z39jcg.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpd3z39jcg.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date:match(\"%d%d%-%d%d%-%d%d%d%d\"\
    ) then\n    return true\n  else\n    return false\n  end\nend\nprint(valid_date('11-15-2012'))\n\
    print(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))\n\
    print(valid_date('06-04-2020'))\nprint(valid_date('12-31-2012'))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\ntrue\nfalse\ntrue\ntrue\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpeszkw2dw.lua:32: expected: false, actual: true\nstack\
    \ traceback:\n\t/tmp/tmpeszkw2dw.lua:32: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- body\n  if #date ~= 0 then\n\
    \    local month = tonumber(string.sub(date, 1, 2))\n    local day = tonumber(string.sub(date,\
    \ 4, 5))\n    local year = tonumber(string.sub(date, 7, 10))\n    if month < 1\
    \ or month > 12 then\n      return false\n    elseif day < 1 or day > 31 then\n\
    \      return false\n    elseif string.sub(date, 3, 3) ~= '-' then\n      return\
    \ false\n    elseif string.sub(date, 6, 6) ~= '-' then\n      return false\n \
    \   elseif (month == 2 and (day < 1 or day > 29)) or\n           (month == 4 and\
    \ (day < 1 or day > 30)) or\n           (month == 6 and (day < 1 or day > 30))\
    \ or\n           (month == 9 and (day < 1 or day > 30)) or\n           (month\
    \ == 11 and (day < 1 or day > 30)) then\n      return false\n    else\n      return\
    \ true\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkg5c_nhh.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpkg5c_nhh.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkg5c_nhh.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local y = os.date(\"*t\", os.time())\n\
    \    local curr_year = y.year\n    local ok, _, m, d, y = date:find(\"^(%d+)-(%d+)-(%d+)$\"\
    )\n    if ok then\n        local date_table = {year = y, month = m, day = d}\n\
    \        if d < 1 or d > 31 then return false end\n        if m < 1 or m > 12\
    \ then return false end\n        if m == 2 and d > 29 then return false end\n\
    \        if m == 2 and d > 28 and ((y % 4) ~= 0) then return false end\n     \
    \   if m == 2 and d > 28 and ((y % 4) == 0) and ((y % 100) ~= 0) then return false\
    \ end\n        if m == 2 and d > 28 and ((y % 4) == 0) and ((y % 100) == 0) and\
    \ ((y % 400) ~= 0) then return false end\n        if y > curr_year then return\
    \ false end\n        if m == 4 or m == 6 or m == 9 or m == 11 then\n         \
    \   if d > 30 then return false end\n        end\n        return true\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdheylznh.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpdheylznh.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpdheylznh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    local m, d, y = tonumber(month), tonumber(day),\
    \ tonumber(year)\n    local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31}\n    if y % 4 == 0 then\n        days[2] = 29\n    end\n    return #date\
    \ > 0 and\n        d >= 1 and\n        d <= days[m] and\n        m >= 1 and\n\
    \        m <= 12\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyovn2k8k.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyovn2k8k.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpyovn2k8k.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date=='' then return false end\n\
    \  mm,dd,yyyy=date:match('(%d+)-(%d+)-(%d+)')\n  if not mm or not dd or not yyyy\
    \ then return false end\n  mm,dd,yyyy=tonumber(mm),tonumber(dd),tonumber(yyyy)\n\
    \  if mm>12 or mm<1 then return false end\n  if mm==2 then\n    if yyyy%4==0 and\
    \ yyyy%100~=0 or yyyy%400==0 then\n      if dd>29 or dd<1 then return false end\n\
    \    else\n      if dd>28 or dd<1 then return false end\n    end\n  elseif mm==4\
    \ or mm==6 or mm==9 or mm==11 then\n    if dd>30 or dd<1 then return false end\n\
    \  else\n    if dd>31 or dd<1 then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local days_month = {\n      \
    \  [1] = 31,\n        [2] = 29,\n        [3] = 31,\n        [4] = 30,\n      \
    \  [5] = 31,\n        [6] = 30,\n        [7] = 31,\n        [8] = 31,\n      \
    \  [9] = 30,\n        [10] = 31,\n        [11] = 30,\n        [12] = 31\n    }\n\
    \    local day, month, year = date:match('(%d%d?)[%-/]%s*(%d%d?)[%-/]%s*(%d%d%d%d)')\n\
    \    day, month, year = tonumber(day), tonumber(month), tonumber(year)\n    if\
    \ day > days_month[month] or day < 1 or month > 12 or month < 1 then\n       \
    \ return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpioe1l0xl.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpioe1l0xl.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == nil or date == '' then\
    \ return false end\n\tlocal month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \tif not month or not day or not year then return false end\n\tlocal days = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n\tlocal m = tonumber(month)\n\t\
    local d = tonumber(day)\n\tlocal y = tonumber(year)\n\tif m < 1 or m > 12 then\
    \ return false end\n\tif d < 1 or d > days[m] then return false end\n\tif (m ==\
    \ 2 and d == 29) and (not (y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0))) then\
    \ return false end\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local fields = string.split(date,\
    \ '-')\n    if #fields ~= 3 then\n        return false\n    end\n    local m,\
    \ d, y = tonumber(fields[1]), tonumber(fields[2]), tonumber(fields[3])\n    if\
    \ m < 1 or m > 12 then\n        return false\n    end\n    if m == 2 then\n  \
    \      if y % 4 == 0 and y % 100 ~= 0 or y % 400 == 0 then\n            if d <\
    \ 1 or d > 29 then\n                return false\n            end\n        else\n\
    \            if d < 1 or d > 28 then\n                return false\n         \
    \   end\n        end\n    elseif m == 1 or m == 3 or m == 5 or m == 7 or m ==\
    \ 8 or m == 10 or m == 12 then\n        if d < 1 or d > 31 then\n            return\
    \ false\n        end\n    else\n        if d < 1 or d > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nprint(valid_date('03-11-2000'))\
    \ => True\nprint(valid_date('15-01-2012')) => False\nprint(valid_date('04-0-2040'))\
    \ => False\nprint(valid_date('06-04-2020')) => True\nprint(valid_date('06/04/2020'))\
    \ => False\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc_dsrrrc.lua:44: syntax error near '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code goes here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpue53rb0t.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpue53rb0t.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d+)-(%d+)-(%d+)\")\n    local m = tonumber(month)\n    local d = tonumber(day)\n\
    \    local y = tonumber(year)\n    local days_in_month = {31,28,31,30,31,30,31,31,30,31,30,31}\n\
    \    if not m or not d or not y then return false end\n    if y % 4 == 0 and (y\
    \ % 100 ~= 0 or y % 400 == 0) then days_in_month[2] = 29 end\n    if d > days_in_month[m]\
    \ then return false end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy1uk4gh1.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpy1uk4gh1.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpy1uk4gh1.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9x3k51i0.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9x3k51i0.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\n   \
    \ if date == nil or date == '' then\n        return false\n    end\n    local\
    \ date_array = {}\n    date_array = split(date, '-')\n    if #date_array ~= 3\
    \ then\n        return false\n    end\n    local month = tonumber(date_array[1])\n\
    \    local day = tonumber(date_array[2])\n    local year = tonumber(date_array[3])\n\
    \    if day < 1 or day > 31 then\n        return false\n    end\n    if month\
    \ < 1 or month > 12 then\n        return false\n    end\n    if year < 0 then\n\
    \        return false\n    end\n    if (month == 4 or month == 6 or month == 9\
    \ or month == 11) and day > 30 then\n        return false\n    end\n    if month\
    \ == 2 and day > 29 then\n        return false\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3inglrb.lua:20:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpo3inglrb.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpo3inglrb.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz408ifg_.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpz408ifg_.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    --[[\n    valid_date('03-11-2000')\
    \ => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040')\
    \ => False\n    valid_date('06-04-2020') => True\n    valid_date('06/04/2020')\
    \ => False\n    ]]\n    local month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\"\
    )\n    if not month or not day or not year then return false end\n    month =\
    \ tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    local\
    \ days31 = {1,3,5,7,8,10,12}\n    local days30 = {4,6,9,11}\n    local days =\
    \ 31\n    if table.indexof(days31, month) then\n        days = 31\n    elseif\
    \ table.indexof(days30, month) then\n        days = 30\n    elseif month == 2\
    \ then\n        if year % 4 == 0 then\n            days = 29\n        else\n \
    \           days = 28\n        end\n    else\n        return false\n    end\n\
    \    if day > days or day < 1 then\n        return false\n    end\n    if month\
    \ > 12 or month < 1 then\n        return false\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcr5n8gt1.lua:30:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpcr5n8gt1.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpcr5n8gt1.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37y081tn.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp37y081tn.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- solution goes here\n  local\
    \ date_table = {}\n  for x in string.gmatch(date, \"%d+\") do\n    table.insert(date_table,\
    \ x)\n  end\n  if date_table[1] == \"\" or date_table[2] == \"\" or date_table[3]\
    \ == \"\" then return false end\n  local month, day, year = tonumber(date_table[1]),\
    \ tonumber(date_table[2]), tonumber(date_table[3])\n  if month > 12 or month <\
    \ 1 then return false end\n  if month == 2 then\n    if year % 4 == 0 then\n \
    \     if day > 29 or day < 1 then return false end\n    else\n      if day > 28\
    \ or day < 1 then return false end\n    end\n  elseif (month == 1 or month ==\
    \ 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) then\n\
    \    if day > 31 or day < 1 then return false end\n  else\n    if day > 30 or\
    \ day < 1 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpns3pr8m3.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpns3pr8m3.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpns3pr8m3.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if #date == 0 then\n        return\
    \ false\n    end\n    local numbers = {}\n    for number in date:gmatch('%d+')\
    \ do\n        table.insert(numbers, number)\n    end\n    if #numbers == 3 then\n\
    \        local month = tonumber(numbers[1])\n        local day = tonumber(numbers[2])\n\
    \        local year = tonumber(numbers[3])\n        if year >= 1970 and year <=\
    \ 2040 then\n            if month >= 1 and month <= 12 then\n                if\
    \ (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month\
    \ == 10 or month == 12) and day >= 1 and day <= 31 then\n                    return\
    \ true\n                elseif (month == 4 or month == 6 or month == 9 or month\
    \ == 11) and day >= 1 and day <= 30 then\n                    return true\n  \
    \              elseif month == 2 and day >= 1 and day <= 29 then\n           \
    \         return true\n                end\n            end\n        end\n   \
    \ end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- body\n    local m = {\n  \
    \      [1] = {1, 31},\n        [2] = {1, 29},\n        [3] = {1, 31},\n      \
    \  [4] = {1, 30},\n        [5] = {1, 31},\n        [6] = {1, 30},\n        [7]\
    \ = {1, 31},\n        [8] = {1, 31},\n        [9] = {1, 30},\n        [10] = {1,\
    \ 31},\n        [11] = {1, 30},\n        [12] = {1, 31}\n    }\n    local _, _,\
    \ m, d, y = string.find(date, \"(%d+)-(%d+)-(%d+)\")\n    if m ~= nil and d ~=\
    \ nil and y ~= nil then\n        m = tonumber(m)\n        d = tonumber(d)\n  \
    \      y = tonumber(y)\n        if m >= 1 and m <= 12 and d >= m[m][1] and d <=\
    \ m[m][2] and y > 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19waj8gi.lua:35:\
    \ attempt to index a number value (local 'm')\nstack traceback:\n\t/tmp/tmp19waj8gi.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmp19waj8gi.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r4ylfeq.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4r4ylfeq.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal date = date\n\tlocal Y =\
    \ nil\n\tlocal M = nil\n\tlocal D = nil\n\tlocal months = {1,3,5,7,8,10,12}\n\t\
    local months2 = {4,6,9,11}\n\tfor i in string.gmatch(date, \"%d+\") do\n\t\tY\
    \ = tonumber(string.sub(i,5,8))\n\t\tM = tonumber(string.sub(i,1,2))\n\t\tD =\
    \ tonumber(string.sub(i,3,4))\n\tend\n\tif D == nil or M == nil or Y == nil then\n\
    \t\treturn false\n\tend\n\tif D > 0 and D < 32 and D > 0 and D < 31 and D > 0\
    \ and D < 30 and D > 0 and D < 29 and M > 0 and M < 13 and Y > 0 then\n\t\tfor\
    \ i,j in pairs(months) do\n\t\t\tif M == j and D < 32 then\n\t\t\t\treturn true\n\
    \t\t\tend\n\t\tend\n\t\tfor i,j in pairs(months2) do\n\t\t\tif M == j and D <\
    \ 31 then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\tif M == 2 and D < 30 then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg46xonlu.lua:50:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg46xonlu.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporgdc8ik.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmporgdc8ik.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps858lm1v.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmps858lm1v.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local l, m, r = date:match \"\
    (%d+)-(%d+)-(%d+)\"\n    if not l or not m or not r then return false end\n  \
    \  local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  \
    \  if l < 1 or l > 12 then return false end\n    if r < 0 then return false end\n\
    \    if l == 2 and r % 4 == 0 then days_in_month[2] = 29 end\n    if m < 1 or\
    \ m > days_in_month[l] then return false end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpji0i_etu.lua:18:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpji0i_etu.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpji0i_etu.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local days = {31, 29, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31}\n  local m, d, y = date:match(\"(%d+)-(%d+)-(%d+)\"\
    )\n  if not m or not d or not y then return false end\n  local md = tonumber(m)\
    \ * 100 + tonumber(d)\n  return md > 101 and md < 1232 and\n    d:match(\"^%d+$\"\
    ) and tonumber(d) > 0 and tonumber(d) <= days[tonumber(m)] and\n    m:match(\"\
    ^%d+$\") and tonumber(m) > 0 and tonumber(m) <= 12 and\n    y:match(\"^%d+$\"\
    ) and tonumber(y) > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld1_zot7.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpld1_zot7.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == nil or date == '' then\n\
    \t\treturn false\n\tend\n\tlocal mm, dd, yyyy = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \tif mm == nil or dd == nil or yyyy == nil then\n\t\treturn false\n\tend\n\tmm\
    \ = tonumber(mm)\n\tdd = tonumber(dd)\n\tyyyy = tonumber(yyyy)\n\tif mm < 1 or\
    \ mm > 12 then\n\t\treturn false\n\tend\n\tif mm == 2 then\n\t\tif dd < 1 or dd\
    \ > 29 then\n\t\t\treturn false\n\t\tend\n\telseif mm == 4 or mm == 6 or mm ==\
    \ 9 or mm == 11 then\n\t\tif dd < 1 or dd > 30 then\n\t\t\treturn false\n\t\t\
    end\n\telse\n\t\tif dd < 1 or dd > 31 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  \n  --Your code here\n  \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwd7h_lm.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpzwd7h_lm.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- return true if date is valid\
    \ otherwise return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxahrc2_.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsxahrc2_.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = date:match(\"\
    (%d+)/(%d+)/(%d+)\")\n  local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31}\n  if month == 2 and year % 4 == 0 then\n    days[2] = 29\n  end\n \
    \ if #date > 0 and month <= 12 and day <= days[month] then\n    return true\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_h1o618.lua:20:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpc_h1o618.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpc_h1o618.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- if date == nil or date == ''\
    \ then return false end\n\t-- local _, _, mm, dd, yyyy = string.find(date, '(%d+)[-/](%d+)[-/](%d+)')\n\
    \t-- if mm == nil or dd == nil or yyyy == nil then return false end\n\t-- local\
    \ mm = tonumber(mm)\n\t-- local dd = tonumber(dd)\n\t-- local yyyy = tonumber(yyyy)\n\
    \t-- if (mm < 1 or mm > 12) or\n\t-- \t(dd < 1 or dd > 31 or (mm ~= 1 and mm ~=\
    \ 3 and mm ~= 5 and mm ~= 7 and mm ~= 8 and mm ~= 10 and mm ~= 12 and dd > 30)\
    \ or (mm == 2 and dd > 29)) then\n\t-- \treturn false\n\t-- end\n\t-- return true\n\
    \tif date == nil or date == '' then return false end\n\tlocal _, _, mm, dd, yyyy\
    \ = string.find(date, '(%d+)[-/](%d+)[-/](%d+)')\n\tif mm == nil or dd == nil\
    \ or yyyy == nil then return false end\n\tlocal mm = tonumber(mm)\n\tlocal dd\
    \ = tonumber(dd)\n\tlocal yyyy = tonumber(yyyy)\n\tif mm < 1 or mm > 12 then return\
    \ false end\n\tif mm == 1 or mm == 3 or mm == 5 or mm == 7 or mm == 8 or mm ==\
    \ 10 or mm == 12 then\n\t\tif dd < 1 or dd > 31 then return false end\n\telseif\
    \ mm == 4 or mm == 6 or mm == 9 or mm == 11 then\n\t\tif dd < 1 or dd > 30 then\
    \ return false end\n\telseif mm == 2 then\n\t\tif dd < 1 or dd > 29 then return\
    \ false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  return (date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"\
    ) ~= nil and\n          (tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%4\
    \ == 0 or\n           tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%4 ~=\
    \ 0 and\n           tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%100 ~=\
    \ 0 or\n           tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%400 ==\
    \ 0) and\n          (tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%100\
    \ == 0 or\n           tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%4 ==\
    \ 0) and\n          tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%400 ~=\
    \ 0 and\n          tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%4 ~= 0\
    \ and\n          tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%4 == 0 and\n\
    \          tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%100 ~= 0 and\n\
    \          tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%100 == 0 and\n\
    \          tonumber(date:match(\"(%d%d)%-(%d%d)%-(%d%d%d%d)\"))%400 ~\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd8my2myk.lua:28: ')' expected (to close '(' at line 15) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0px941h8.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0px941h8.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal month = tonumber(date:sub(1,2))\n\
    \tlocal day = tonumber(date:sub(4,5))\n\tlocal year = tonumber(date:sub(7,10))\n\
    \treturn (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or\
    \ month == 10 or month == 12) and day >= 1 and day <= 31 and (year ~= nil and\
    \ year > 0)\n\t\tor (month == 4 or month == 6 or month == 9 or month == 11) and\
    \ day >= 1 and day <= 30 and (year ~= nil and year > 0)\n\t\tor month == 2 and\
    \ day >= 1 and day <= 29 and (year ~= nil and year > 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73j6bohf.lua:19:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp73j6bohf.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp73j6bohf.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local dateLen = #date\n    local\
    \ dateList = string.split(date, '-')\n    if dateLen < 10 or dateLen > 10 then\n\
    \        return false\n    end\n    local month = tonumber(dateList[1])\n    local\
    \ day = tonumber(dateList[2])\n    local year = tonumber(dateList[3])\n    local\
    \ daysForMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    if year\
    \ % 4 == 0 then\n        daysForMonth[2] = 29\n    end\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    if day < 1 or day > daysForMonth[month]\
    \ then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmper6fixgc.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmper6fixgc.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmper6fixgc.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local pattern = \"(%d%d)%-(%d%d)%-(%d%d%d%d)\"\
    \n  local mm, dd, yyyy = date:match(pattern)\n  if not mm or not dd or not yyyy\
    \ then\n    return false\n  end\n  local valid = {\n    [1] = {1, 31},\n    [2]\
    \ = {1, 29},\n    [3] = {1, 31},\n    [4] = {1, 30},\n    [5] = {1, 31},\n   \
    \ [6] = {1, 30},\n    [7] = {1, 31},\n    [8] = {1, 31},\n    [9] = {1, 30},\n\
    \    [10] = {1, 31},\n    [11] = {1, 30},\n    [12] = {1, 31}\n  }\n  mm = tonumber(mm)\n\
    \  dd = tonumber(dd)\n  yyyy = tonumber(yyyy)\n  if mm < 1 or mm > 12 then\n \
    \   return false\n  end\n  if dd < valid[mm][1] or dd > valid[mm][2] then\n  \
    \  return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local matcher = {\n    month =\
    \ \"(%d%d?)\",\n    day = \"(%d%d?)\",\n    year = \"(%d%d%d%d)\"\n  }\n  local\
    \ pattern = \"%s*\" .. matcher.month .. \"%-%s*\" .. matcher.day .. \"%-%s*\"\
    \ .. matcher.year .. \"%s*\"\n  local mm, dd, yyyy = date:match(pattern)\n  if\
    \ mm == nil or dd == nil or yyyy == nil then\n    return false\n  end\n  local\
    \ m = tonumber(mm)\n  local d = tonumber(dd)\n  local y = tonumber(yyyy)\n  local\
    \ max_days = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n  if y % 4 ==\
    \ 0 and (y % 100 ~= 0 or y % 400 == 0) then\n    max_days[2] = 29\n  end\n  if\
    \ d <= 0 or d > max_days[m] then\n    return false\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyefmzy_5.lua:32:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpyefmzy_5.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpyefmzy_5.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2voauhsf.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2voauhsf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- A function which returns the\
    \ number of days for the given month.\n  local function days_in_month(year, month)\n\
    \    local monthDays = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n  \
    \  if month == 2 and (year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0))\
    \ then\n      return 29\n    else\n      return monthDays[month]\n    end\n  end\n\
    \  -- A function which returns the number of years passed since the year 0.\n\
    \  local function years_since_0(year)\n    return (year - 0)\n  end\n  -- A function\
    \ which returns the number of months passed since the year 0.\n  local function\
    \ months_since_0(year, month)\n    return (years_since_0(year) * 12) + (month\
    \ - 1)\n  end\n  -- A function which returns the number of days passed since the\
    \ year 0.\n  local function days_since_0(year, month, day)\n    return (months_since_0(year,\
    \ month) * days_in_month(year, month)) + day\n  end\n  -- A function which returns\
    \ the number of years passed since the year 0 for the given date.\n  local function\
    \ years_since_0_for_date(date)\n    local year = tonumber(string.sub(date, 7,\
    \ 10))\n    return years_since_0(year)\n  end\n  -- A function which returns the\
    \ number of months passed since the year 0 for the given date.\n  local function\
    \ months_since_0_for_date(date)\n    local year = tonumber(string.sub(date, 7,\
    \ 10))\n    local month = tonumber(string.sub(date, 1, 2))\n    return months_since_0(year,\
    \ month)\n  end\n  -- A function which returns the number of days passed since\
    \ the year 0 for the given date.\n  local function days_since_0_for_date(date)\n\
    \    local year = tonumber(string.sub(date, 7, 10))\n    local month = tonumber(string.sub(date,\
    \ 1, 2))\n    local day = tonumber(string.sub(\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_7bxiss6.lua:52: ')' expected (to close '(' at line 51) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    local is_valid = false\n    if month and day\
    \ and year then\n        local days_for_month = {31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31}\n        local is_leap_year = false\n        if ((year % 4 ==\
    \ 0) and (year % 100 ~= 0)) or (year % 400 == 0) then\n            is_leap_year\
    \ = true\n        end\n        if is_leap_year then\n            days_for_month[2]\
    \ = 29\n        end\n        month = tonumber(month)\n        day = tonumber(day)\n\
    \        year = tonumber(year)\n        if (month > 0 and month <= 12) and (day\
    \ > 0 and day <= days_for_month[month]) and (year > 0) then\n            is_valid\
    \ = true\n        end\n    end\n    return is_valid\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local _,_,a,b,c=date:find('(%d%d)%-(%d%d)%-(%d%d%d%d)')\n\
    \  if a and b and c then\n    a=tonumber(a)\n    b=tonumber(b)\n    c=tonumber(c)\n\
    \    if a>=1 and a<=12 and b>=1 and b<=31 and c>0 then\n      if b>30 and (a==4\
    \ or a==6 or a==9 or a==11) then return false end\n      if b>29 and a==2 then\
    \ return false end\n      if b==29 and a==2 and (c%4~=0 or (c%100==0 and c%400~=0))\
    \ then return false end\n      return true\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    print('str: ' .. date)\n    local\
    \ pattern = \"(%d%d)-(%d%d)-(%d%d%d%d)\"\n    local _, _, m, d, y = string.find(date,\
    \ pattern)\n    print('m: ' .. m .. ' d: ' .. d .. ' y: ' .. y)\n    local success\
    \ = true\n    local msg = ''\n    if m == nil or d == nil or y == nil then\n \
    \       success = false\n        msg = 'Invalid format'\n    else\n        if\
    \ (tonumber(m) > 12 or tonumber(m) < 1) then\n            success = false\n  \
    \          msg = 'Invalid month'\n        elseif (tonumber(m) == 2) then\n   \
    \         if (tonumber(d) > 29 or tonumber(d) < 1) then\n                success\
    \ = false\n                msg = 'Invalid number of days'\n            end\n \
    \       elseif (tonumber(m) % 2 == 0) then\n            if (tonumber(d) > 30 or\
    \ tonumber(d) < 1) then\n                success = false\n                msg\
    \ = 'Invalid number of days'\n            end\n        else\n            if (tonumber(d)\
    \ > 31 or tonumber(d) < 1) then\n                success = false\n           \
    \     msg = 'Invalid number of days'\n            end\n        end\n    end\n\
    \    print(msg)\n    return success\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "str: 03-11-2000\nm: 03 d: 11 y: 2000\n\nstr: 15-01-2012\nm: 15 d: 01 y:\
    \ 2012\nInvalid month\nstr: 04-0-2040\nE\nTests with errors:\n------------------\n\
    1) test_humaneval\n/tmp/tmp_m7kl2sh.lua:18: attempt to concatenate a nil value\
    \ (local 'y')\nstack traceback:\n\t/tmp/tmp_m7kl2sh.lua:18: in local 'candidate'\n\
    \t/tmp/tmp_m7kl2sh.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ \"(%d%d)-(%d%d)-(%d%d%d%d)\")\n\tif month == nil or day == nil or year == nil\
    \ then\n\t\treturn false\n\tend\n\tmonth = tonumber(month)\n\tday = tonumber(day)\n\
    \tyear = tonumber(year)\n\tif month > 12 or month < 1 then\n\t\treturn false\n\
    \tend\n\tif month == 2 then\n\t\tif day > 29 or day < 1 then\n\t\t\treturn false\n\
    \t\tend\n\telseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \t\tif day > 30 or day < 1 then\n\t\t\treturn false\n\t\tend\n\telse\n\t\tif day\
    \ > 31 or day < 1 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then return false\
    \ end\n    local days, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \    local m = tonumber(month)\n    local d = tonumber(days)\n    if d == nil\
    \ or m == nil then return false end\n    if m == 1 or m == 3 or m == 5 or m ==\
    \ 7 or m == 8 or m == 10 or m == 12 then\n        if d < 1 or d > 31 then return\
    \ false end\n    elseif m == 4 or m == 6 or m == 9 or m == 11 then\n        if\
    \ d < 1 or d > 30 then return false end\n    elseif m == 2 then\n        if d\
    \ < 1 or d > 29 then return false end\n    else\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw76bela9.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw76bela9.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- your code goes here\n\t-- use\
    \ the \"not\" operator to get the opposite boolean value\n\tlocal m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \tm = tonumber(m)\n\td = tonumber(d)\n\ty = tonumber(y)\n\tif (m and d and y)\
    \ and (not(m < 1 or m > 12 or d < 1 or d > 31 or y < 0)) then\n\t\tif m == 2 then\n\
    \t\t\tif (not(d > 29)) then\n\t\t\t\treturn true\n\t\t\tend\n\t\telseif (m ==\
    \ 4 or m == 6 or m == 9 or m == 11) and (not(d > 30)) then\n\t\t\treturn true\n\
    \t\telseif (not(d > 31)) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_061hss.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn_061hss.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzeufko6d.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpzeufko6d.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local n = 0\n  for item in string.gmatch(date,\
    \ \"%d+\") do\n    n = n + 1\n  end\n  if n ~= 3 then return false end\n  local\
    \ month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n  local m = tonumber(month)\n\
    \  local d = tonumber(day)\n  local y = tonumber(year)\n  if not m or not d or\
    \ not y then return false end\n  if m > 12 or m < 1 then return false end\n  if\
    \ m == 2 then\n    if d > 29 or d < 1 then return false end\n  elseif m == 4 or\
    \ m == 6 or m == 9 or m == 11 then\n    if d > 30 or d < 1 then return false end\n\
    \  else\n    if d > 31 or d < 1 then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfnl1w8d.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgfnl1w8d.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = date:match(\"\
    (%d+)/(%d+)/(%d+)\")\n  if not month or not day or not year then\n    return false\n\
    \  end\n  if day > 31 or day < 1 then\n    return false\n  end\n  if year % 4\
    \ == 0 and month == 2 and day > 29 then\n    return false\n  end\n  if year %\
    \ 4 ~= 0 and month == 2 and day > 28 then\n    return false\n  end\n  if month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n    if day > 30 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8alhwcq.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps8alhwcq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == '' then\n    return\
    \ false\n  end\n  local d = date:split('-')\n  local m = tonumber(d[1])\n  local\
    \ d = tonumber(d[2])\n  local y = tonumber(d[3])\n  if (m >= 1 and m <= 12) and\
    \ (y >= 1 and y <= 9999) then\n    if m % 2 == 0 then\n      if m ~= 2 then\n\
    \        if d <= 30 then\n          return true\n        end\n      else\n   \
    \     if y % 4 == 0 then\n          if d <= 29 then\n            return true\n\
    \          end\n        else\n          if d <= 28 then\n            return true\n\
    \          end\n        end\n      end\n    else\n      if m ~= 7 then\n     \
    \   if d <= 31 then\n          return true\n        end\n      else\n        if\
    \ d <= 30 then\n          return true\n        end\n      end\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2pn00job.lua:18:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2pn00job.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp2pn00job.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local dd, mm, yyyy = date:match('(%d%d)%-(%d%d)%-(%d%d%d%d)')\n\
    \    if dd and mm and yyyy then\n        return tonumber(dd) >= 1 and tonumber(dd)\
    \ <= 31 and tonumber(mm) >= 1 and tonumber(mm) <= 12\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkvgsfvt.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptkvgsfvt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- do your magic here\n  local\
    \ _, _, mm, dd, yyyy = string.find(date, \"(%d+)-(%d+)-(%d+)\")\n  return mm and\
    \ dd and yyyy and \n  (mm >= 1 and mm <= 12) and \n  (dd >= 1 and (mm == 1 or\
    \ mm == 3 or mm == 5 or mm == 7 or mm == 8 or mm == 10 or mm == 12 and dd <= 31)\
    \ and (mm == 4 or mm == 6 or mm == 9 or mm == 11 and dd <= 30) and (mm == 2 and\
    \ dd <= 29)) and \n  true or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5xe8p9cs.lua:18:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmp5xe8p9cs.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp5xe8p9cs.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0ueah7h.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpv0ueah7h.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local parts = {}\n  local function\
    \ has_empty_part()\n    for i, v in ipairs(parts) do\n      if v == '' then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_month_valid()\n    return (tonumber(parts[1]) >= 1 and tonumber(parts[1])\
    \ <= 12)\n  end\n  local function is_day_valid()\n    local month = tonumber(parts[1])\n\
    \    local day = tonumber(parts[2])\n    local days_by_month = {31, 29, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31}\n    if month == 2 then\n      return day <=\
    \ days_by_month[month]\n    else\n      return day <= days_by_month[month]\n \
    \   end\n  end\n  local function is_year_valid()\n    return tonumber(parts[3])\
    \ > 1970\n  end\n  if date ~= nil and date ~= '' then\n    parts = string_split(date,\
    \ '-')\n    if #parts == 3 and not has_empty_part() then\n      return is_month_valid()\
    \ and is_day_valid() and is_year_valid()\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmavkrzvk.lua:41:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmpmavkrzvk.lua:41:\
    \ in local 'candidate'\n\t/tmp/tmpmavkrzvk.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local list_month = {\n    {1,31},{2,28},{3,31},{4,30},{5,31},{6,30},{7,31},{8,31},{9,30},{10,31},{11,30},{12,31}\n\
    \  }\n  local valid_date = true\n  local month,day,year = date:match(\"(%d+)-(%d+)-(%d+)\"\
    )\n  if not month then return false end\n  month = tonumber(month)\n  day = tonumber(day)\n\
    \  year = tonumber(year)\n  if month == 2 and day == 29 then\n    if year % 4\
    \ == 0 and (year % 100 ~= 0 or year % 400 == 0) then\n      return true\n    else\n\
    \      return false\n    end\n  end\n  if list_month[month] then\n    if day >\
    \ list_month[month][2] or day < 1 then\n      valid_date = false\n    end\n  else\n\
    \    valid_date = false\n  end\n  return valid_date\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or date == ''\
    \ then return false end\n    local month, day, year = string.match(date, '(%d+)-(%d+)-(%d+)')\n\
    \    if month == nil or day == nil or year == nil then return false end\n    month\
    \ = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if\
    \ month < 1 or month > 12 then return false end\n    if month == 2 then\n    \
    \    if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then\n        \
    \    if day < 1 or day > 29 then return false end\n        else\n            if\
    \ day < 1 or day > 28 then return false end\n        end\n    elseif month ==\
    \ 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or\
    \ month == 12 then\n        if day < 1 or day > 31 then return false end\n   \
    \ else\n        if day < 1 or day > 30 then return false end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsktiyjan.lua:38: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then\n        return\
    \ false\n    end\n    local day = date:sub(1,2)\n    local month = date:sub(4,5)\n\
    \    local year = date:sub(7,10)\n    if month == '01' or month == '03' or month\
    \ == '05' or month == '07' or month == '08' or month == '10' or month == '12'\
    \ then\n        if day == '31' then\n            return true\n        else\n \
    \           return false\n        end\n    elseif month == '04' or month == '06'\
    \ or month == '09' or month == '11' then\n        if day == '30' then\n      \
    \      return true\n        else\n            return false\n        end\n    elseif\
    \ month == '02' then\n        if day == '29' then\n            return true\n \
    \       else\n            return false\n        end\n    elseif month == '08'\
    \ or month == '10' or month == '12' then\n        if day == '31' then\n      \
    \      return true\n        else\n            return false\n        end\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeljbtj9a.lua:53:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeljbtj9a.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2u16xzv.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpb2u16xzv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- add code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspaq2qjj.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpspaq2qjj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or string.len(date)\
    \ == 0 then return false end\n  local mm, dd, yyyy = date:match(\"(%d+)/(%d+)/(%d+)\"\
    )\n  if mm == nil or dd == nil or yyyy == nil then return false end\n  if mm <\
    \ 0 or mm > 12 then return false end\n  if dd < 0 or dd > 31 then return false\
    \ end\n  if yyyy < 0 then return false end\n  if mm == 2 and dd > 29 then return\
    \ false end\n  if (mm == 4 or mm == 6 or mm == 9 or mm == 11) and dd > 30 then\
    \ return false end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppif1xa87.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppif1xa87.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- YOUR CODE HERE\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugkml00d.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpugkml00d.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date\
    \ = date\n  local fmt = \"%d-%d-%d\"\n  local datearr = date:split(\"-\")\n  local\
    \ month = tonumber(datearr[1])\n  local day = tonumber(datearr[2])\n  local year\
    \ = tonumber(datearr[3])\n  local valid = false\n  if #datearr == 3 then\n   \
    \ if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month\
    \ == 10 or month == 12 then\n      if day <= 31 and day >= 1 then\n        valid\
    \ = true\n      end\n    elseif month == 4 or month == 6 or month == 9 or month\
    \ == 11 then\n      if day <= 30 and day >= 1 then\n        valid = true\n   \
    \   end\n    elseif month == 2 then\n      if day <= 29 and day >= 1 then\n  \
    \      valid = true\n      end\n    end\n  end\n  return valid\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5icghya6.lua:18:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp5icghya6.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp5icghya6.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- YOUR CODE HERE\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpygve3by_.lua:38: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if #date == 0 then\n        return\
    \ false\n    end\n    local a, b, c = string.match(date, '(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \    if a == nil or b == nil or c == nil then\n        return false\n    end\n\
    \    local days = tonumber(b)\n    local months = tonumber(a)\n    local years\
    \ = tonumber(c)\n    if months < 1 or months > 12 then\n        return false\n\
    \    end\n    if months == 2 then\n        if days < 1 or days > 29 then\n   \
    \         return false\n        end\n    elseif months == 1 or months == 3 or\
    \ months == 5 or months == 7 or months == 8 or months == 10 or months == 12 then\n\
    \        if days < 1 or days > 31 then\n            return false\n        end\n\
    \    else\n        if days < 1 or days > 30 then\n            return false\n \
    \       end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    return #date == 10 and date:find('%d%d%-%d%d%-%d%d%d%d')\
    \ and date:sub(1,2) >= '01' and date:sub(1,2) <= '12' and date:sub(4,5) >= '01'\
    \ and date:sub(4,5) <= '31' and (date:sub(4,5) <= '30' or (date:sub(1,2) == '01'\
    \ or date:sub(1,2) == '03' or date:sub(1,2) == '05' or date:sub(1,2) == '07' or\
    \ date:sub(1,2) == '08' or date:sub(1,2) == '10' or date:sub(1,2) == '12')) and\
    \ (date:sub(4,5) <= '29' or date:sub(1,2) ~= '02')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_304qhpg.lua:35:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_304qhpg.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xoouxrs.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp5xoouxrs.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- To do\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptiira6yg.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmptiira6yg.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- body\n\tlocal days = {31,28,31,30,31,30,31,31,30,31,30,31}\n\
    \tlocal y,m,d = string.match(date,'(%d%d%d%d)%-(%d%d)%-(%d%d)')\n\ty,m,d = tonumber(y),tonumber(m),tonumber(d)\n\
    \tif y and m and d then\n\t\tif m < 1 or m > 12 then\n\t\t\treturn false\n\t\t\
    end\n\t\tif d < 1 or d > days[m] then\n\t\t\treturn false\n\t\tend\n\t\tif m ==\
    \ 2 and d == 29 then\n\t\t\tif y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0) then\n\
    \t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\
    return true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg6mbtc3.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptg6mbtc3.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if #date == 0 then return false\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplo2g1jyi.lua:38: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- 1. The date string is not\
    \ empty.\n    if date == nil or date == '' then\n        return false\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwd4alncs.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if #date < 10 then\n        return\
    \ false\n    end\n    local days = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31}\n    local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n \
    \   if not day or not month or not year then\n        return false\n    end\n\
    \    day = tonumber(day)\n    month = tonumber(month)\n    year = tonumber(year)\n\
    \    local is_leap = year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0)\n\
    \    if is_leap then\n        days[2] = 29\n    else\n        days[2] = 28\n \
    \   end\n    if month < 1 or month > 12 then\n        return false\n    end\n\
    \    if day < 1 or day > days[month] then\n        return false\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4s_mdy3.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz4s_mdy3.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    return date:match(\"^(%d%d)-(%d%d)-(%d%d%d%d)$\"\
    ) and\n        tonumber(date:match(\"^(%d%d)\")):le(12) and\n        tonumber(date:match(\"\
    ^(%d%d)-(%d%d)\")):le(30) and\n        tonumber(date:match(\"^(%d%d)-(%d%d)-(%d%d%d%d)$\"\
    )):le(29)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwo1orub.lua:16:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpiwo1orub.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpiwo1orub.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date:match('%d%d%-%d%d%-%d%d%d%d')\
    \ == nil then\n        return false\n    end\n    local s = {}\n    for i in date:gmatch('%d+')\
    \ do\n        table.insert(s, i)\n    end\n    if tonumber(s[1]) < 1 or tonumber(s[1])\
    \ > 12 then\n        return false\n    end\n    if (tonumber(s[1]) == 1 or tonumber(s[1])\
    \ == 3 or tonumber(s[1]) == 5 or tonumber(s[1]) == 7 or tonumber(s[1]) == 8 or\
    \ tonumber(s[1]) == 10 or tonumber(s[1]) == 12) and (tonumber(s[2]) < 1 or tonumber(s[2])\
    \ > 31) then\n        return false\n    end\n    if (tonumber(s[1]) == 4 or tonumber(s[1])\
    \ == 6 or tonumber(s[1]) == 9 or tonumber(s[1]) == 11) and (tonumber(s[2]) < 1\
    \ or tonumber(s[2]) > 30) then\n        return false\n    end\n    if tonumber(s[1])\
    \ == 2 and (tonumber(s[2]) < 1 or tonumber(s[2]) > 29) then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc9xgh25.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmplc9xgh25.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date then return false\
    \ end\n    local months = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n \
    \   local m, d, y = date:match(\"(%d+)-(%d+)-(%d+)\")\n    m, d, y = tonumber(m),\
    \ tonumber(d), tonumber(y)\n    if not (m and d and y) then return false end\n\
    \    if y <= 0 then return false end\n    if m <= 0 or m > 12 then return false\
    \ end\n    if not months[m] then return false end\n    if d <= 0 or d > months[m]\
    \ then return false end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then return false\
    \ end\n    local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n    month,\
    \ day, year = tonumber(month), tonumber(day), tonumber(year)\n    if not month\
    \ or not day or not year then return false end\n    if month < 1 or month > 12\
    \ then return false end\n    if day < 1 or day > 31 then return false end\n  \
    \  if month == 2 and (day < 1 or day > 29) then return false end\n    if month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n        if day > 30 then\
    \ return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sncjiaa.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0sncjiaa.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\n\
    \    return false\n  end\n  local day, month, year = date:match(\"(%d+)-(%d+)-(%d+)\"\
    )\n  if day == nil or month == nil or year == nil then\n    return false\n  end\n\
    \  day = tonumber(day)\n  month = tonumber(month)\n  year = tonumber(year)\n \
    \ if month < 1 or month > 12 then\n    return false\n  end\n  if month == 2 then\n\
    \    if is_leap_year(year) then\n      if day < 1 or day > 29 then\n        return\
    \ false\n      end\n    else\n      if day < 1 or day > 28 then\n        return\
    \ false\n      end\n    end\n  elseif month == 1 or month == 3 or month == 5 or\
    \ month == 7 or month == 8 or month == 10 or month == 12 then\n    if day < 1\
    \ or day > 31 then\n      return false\n    end\n  else\n    if day < 1 or day\
    \ > 30 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq22dbqo.lua:54:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyq22dbqo.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- validation checks\n    --\
    \ TODO implement this\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdw90icx.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgdw90icx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here!\n  \
    \  return \"Write me!\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpia2v91l9.lua:22:\
    \ expected: true, actual: \"Write me!\"\nstack traceback:\n\t/tmp/tmpia2v91l9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal dat, mon, yea = string.match(date,\
    \ '(%d%d?)[%-|/](%d%d?)[%-|/](%d%d%d%d)')\n\tif not dat or not mon or not yea\
    \ then return false end\n\tdat, mon, yea = tonumber(dat), tonumber(mon), tonumber(yea)\n\
    \tif not dat or not mon or not yea then return false end\n\tif not (1 <= dat and\
    \ dat <= 31) then return false end\n\tif not (1 <= mon and mon <= 12) then return\
    \ false end\n\tif mon == 2 and not (1 <= dat and dat <= 29) then return false\
    \ end\n\tif mon == 4 or mon == 6 or mon == 9 or mon == 11 then\n\t\tif not (1\
    \ <= dat and dat <= 30) then return false end\n\tend\n\treturn true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsdqwz6k.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbsdqwz6k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpww7riz2m.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpww7riz2m.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5x_1he4.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpc5x_1he4.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if (string.len(date) == 0) then\n\
    \        return false\n    end\n    local d, m, y = string.match(date, \"(%d%d)%-(%d%d)%-(%d%d%d%d)\"\
    )\n    if not d or not m or not y then\n        return false\n    end\n    if\
    \ d == \"00\" or m == \"00\" or y == \"0000\" then\n        return false\n   \
    \ end\n    if m ~= \"02\" then\n        if m == \"01\" or m == \"03\" or m ==\
    \ \"05\" or m == \"07\" or m == \"08\" or m == \"10\" or m == \"12\" then\n  \
    \          if d == \"31\" then\n                return true\n            elseif\
    \ d == \"32\" then\n                return false\n            else\n         \
    \       return true\n            end\n        elseif m == \"04\" or m == \"06\"\
    \ or m == \"09\" or m == \"11\" then\n            if d == \"30\" then\n      \
    \          return true\n            elseif d == \"31\" then\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            return false\n        end\n    else\n        if y % 4 ==\
    \ 0 then\n            if d == \"29\" then\n                return true\n     \
    \       elseif d == \"30\" then\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if d\
    \ == \"28\" then\n                return true\n            elseif d == \"29\"\
    \ then\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j5yuji_.lua:70:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_j5yuji_.lua:70:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n\
    \  if month and day and year then\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if year < 1990 or year > 2050 then\n      return\
    \ false\n    end\n    if month < 1 or month > 12 then\n      return false\n  \
    \  end\n    if day < 1 or day > 31 then\n      return false\n    end\n    if day\
    \ == 31 and (month == 2 or month == 4 or month == 6 or month == 9 or month ==\
    \ 11) then\n      return false\n    end\n    if month == 2 and day > 29 then\n\
    \      return false\n    end\n    if month == 2 and day == 29 and (year % 4) ~=\
    \ 0 then\n      return false\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    -- 1.\
    \ The date string is not empty.\n    if date == \"\" then return false end\n \
    \   -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n    local month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\"\
    )\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n\
    \    if month == 2 then\n        if year % 4 == 0 and year % 100 ~= 0 or year\
    \ % 400 == 0 then\n            if day < 1 or day > 29 then return false end\n\
    \        else\n            if day < 1 or day > 28 then return false end\n    \
    \    end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\
    \ return false end\n    elseif month == 4 or month == 6 or month == 9 or month\
    \ == 11 then\n        if day < 1 or day > 30 then return false end\n    else\n\
    \        return false\n    end\n    -- 3. The months should not be less than 1\
    \ or higher than 12.\n    if month < 1 or month > 12 then return false end\n \
    \   -- 4. The date should be in the format: mm-dd-yyyy\n    if date:match(\"%d+%-%d+%-%d+\"\
    ) == nil then return false end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  --your code here\n  local regex\
    \ = regex or require \"regex\"\n  if regex.match(date, \"%d%d[-/]%d%d[-/]%d%d%d%d\"\
    ) then\n    local month, day, year = date:match(\"(%d%d)[-/](%d%d)[-/](%d%d%d%d)\"\
    )\n    return (tonumber(month) <= 12 and tonumber(day) <= 31 and tonumber(year)\
    \ <= 2030)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggzjlm0h.lua:17:\
    \ attempt to call a nil value (field 'match')\nstack traceback:\n\t/tmp/tmpggzjlm0h.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpggzjlm0h.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t\n\t-- write your code here\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxk9lnqr2.lua:39: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- check date is empty\n    if\
    \ date == '' then\n        return false\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl8zbhlp2.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local d, m, y = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if (tonumber(d) > 31 or tonumber(d) < 1) then\
    \ return false end\n    if (tonumber(m) > 12 or tonumber(m) < 1) then return false\
    \ end\n    if (tonumber(m) == 2 and tonumber(d) > 29) then return false end\n\
    \    if (tonumber(m) == 2 and tonumber(d) < 1) then return false end\n    if (tonumber(m)\
    \ == 4 or tonumber(m) == 6 or tonumber(m) == 9 or tonumber(m) == 11) and (tonumber(d)\
    \ > 30 or tonumber(d) < 1) then return false end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwznv_it.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfwznv_it.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- write your solution here\n \
    \ return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqty2xb0.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyqty2xb0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77lac3gq.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp77lac3gq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date:len() == 0 then\n    return\
    \ false\n  end\n  for char in date:gmatch(\"%d+\") do\n    if char:len() > 4 then\n\
    \      return false\n    end\n  end\n  local month, day, year = date:match(\"\
    ^(%d+)-(%d+)-(%d+)$\")\n  if not (month and day and year) then\n    return false\n\
    \  end\n  if tonumber(month) < 1 or tonumber(month) > 12 then\n    return false\n\
    \  end\n  if tonumber(month) == 2 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n      return false\n    end\n  elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n      return false\n    end\n  else\n    if\
    \ tonumber(day) < 1 or tonumber(day) > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local days = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31}\n  local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  month, day, year = tonumber(month), tonumber(day), tonumber(year)\n  local\
    \ leap = 0\n  if month == 2 and year % 4 == 0 then\n    leap = 1\n  end\n  if\
    \ month < 1 or month > 12 then\n    return false\n  elseif day < 1 or day > days[month]\
    \ + leap then\n    return false\n  else\n    return true\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyq1pezkf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpyq1pezkf.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpyq1pezkf.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  date = date:split('-')\n  if #date\
    \ ~= 3 then return false end\n  local day, month, year = date[1], date[2], date[3]\n\
    \  if tonumber(day) < 1 or tonumber(day) > 31 or tonumber(month) < 1 or tonumber(month)\
    \ > 12 or tonumber(year) < 1 then return false end\n  if tonumber(month) == 2\
    \ and tonumber(day) > 29 then return false end\n  if tonumber(month) == 2 and\
    \ tonumber(day) == 29 and not (tonumber(year) % 4 == 0 and tonumber(year) % 100\
    \ ~= 0 or tonumber(year) % 400 == 0) then return false end\n  if (tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11)\
    \ and tonumber(day) > 30 then return false end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9537air.lua:15:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpn9537air.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpn9537air.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\n\
    \    return false\n  end\n  local arr = string.split(date, '-')\n  if #arr ~=\
    \ 3 then\n    return false\n  end\n  if tonumber(arr[2]) > 31 or tonumber(arr[2])\
    \ < 1 then\n    return false\n  end\n  if tonumber(arr[1]) > 12 or tonumber(arr[1])\
    \ < 1 then\n    return false\n  end\n  if tonumber(arr[1]) % 2 == 0 and tonumber(arr[1])\
    \ ~= 2 then\n    if tonumber(arr[2]) > 30 then\n      return false\n    end\n\
    \  end\n  if tonumber(arr[1]) == 2 then\n    if tonumber(arr[2]) > 29 then\n \
    \     return false\n    end\n  end\n  if string.len(arr[3]) ~= 4 then\n    return\
    \ false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwahyn5pq.lua:18:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpwahyn5pq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpwahyn5pq.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal y, m, d = date:match('(%d%d%d%d)%-(%d%d)%-(%d%d)')\n\
    \t-- check for valid format\n\tif not y or not m or not d then return false end\n\
    \t-- check for valid month\n\tif m:find('[^12]') or m:find('[12]%d') then return\
    \ false end\n\t-- check for valid day\n\tif d:find('[^123]') or d:find('[123]%d')\
    \ then return false end\n\t-- check number of days per month\n\tif d:find('[12]$')\
    \ then return true end\n\tif d:find('3$') then\n\t\tif m:find('[23456789]') then\
    \ return true end\n\t\tif m:find('1') and tonumber(y) % 4 == 0 then return true\
    \ end\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezpvfzr3.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpezpvfzr3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then\n        return\
    \ false\n    end\n    local pattern = \"(%d%d)-(%d%d)-(%d%d%d%d)\"\n    local\
    \ d, m, y = date:match(pattern)\n    if m == nil or d == nil or y == nil then\n\
    \        return false\n    end\n    if m == '02' then\n        if tonumber(d)\
    \ < 1 or tonumber(d) > 29 then\n            return false\n        end\n    elseif\
    \ m == '01' or m == '03' or m == '05' or m == '07' or m == '08' or m == '10' or\
    \ m == '12' then\n        if tonumber(d) < 1 or tonumber(d) > 31 then\n      \
    \      return false\n        end\n    elseif m == '04' or m == '06' or m == '09'\
    \ or m == '11' then\n        if tonumber(d) < 1 or tonumber(d) > 30 then\n   \
    \         return false\n        end\n    else\n        return false\n    end\n\
    \    if tonumber(m) < 1 or tonumber(m) > 12 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3pj3n3m.lua:48:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps3pj3n3m.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge7wb267.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpge7wb267.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Code here\n    local day,month,year\
    \ = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    local days_table = {31,29,31,30,31,30,31,31,30,31,30,31}\n\
    \    if day ~= nil and month ~= nil and year ~= nil then\n      local d = tonumber(day)\n\
    \      local m = tonumber(month)\n      local y = tonumber(year)\n      if (d\
    \ <= 31 and m <= 12) then\n        if ((m == 2 and d <= days_table[m]) or (m ~=\
    \ 2 and d <= days_table[m])) then\n          return true\n        end\n      end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5f5atpk.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy5f5atpk.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- body\n    if #date == 0 then\n\
    \        return false\n    end\n    local tab = split(date, \"-\")\n    local\
    \ month = tonumber(tab[1])\n    local day = tonumber(tab[2])\n    local year =\
    \ tonumber(tab[3])\n    if month < 1 or month > 12 then\n        return false\n\
    \    end\n    if month == 2 then\n        if year % 4 == 0 then\n            if\
    \ day < 1 or day > 29 then\n                return false\n            end\n  \
    \      else\n            if day < 1 or day > 28 then\n                return false\n\
    \            end\n        end\n    elseif month == 1 or month == 3 or month ==\
    \ 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if\
    \ day < 1 or day > 31 then\n            return false\n        end\n    else\n\
    \        if day < 1 or day > 30 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuh9xr_8g.lua:19:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpuh9xr_8g.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpuh9xr_8g.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or #date < 10\
    \ then\n        return false\n    end\n    -- the form: mm-dd-yyyy\n    local\
    \ year = string.sub(date, 7, 10)\n    local month = string.sub(date, 1, 2)\n \
    \   local day = string.sub(date, 4, 5)\n    if tonumber(month) ~= nil and tonumber(day)\
    \ ~= nil and tonumber(year) ~= nil then\n        month = tonumber(month)\n   \
    \     day = tonumber(day)\n        year = tonumber(year)\n        if month >=\
    \ 1 and month <= 12 and day >= 1 and day <= 31 and year >= 0 then\n          \
    \  if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month\
    \ == 10 or month == 12 then\n                return true\n            elseif month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n                if day\
    \ <= 30 then\n                    return true\n                end\n         \
    \   elseif month == 2 then\n                if day <= 29 then\n              \
    \      return true\n                end\n            end\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date:len() == 0 then return\
    \ false end\n\tlocal y, m, d = date:match(\"^(%d%d%d%d)%-(%d%d)%-(%d%d)$\")\n\t\
    if y == nil then return false end\n\td = tonumber(d)\n\tm = tonumber(m)\n\ty =\
    \ tonumber(y)\n\tif m < 1 or m > 12 then return false end\n\tif m == 2 then\n\t\
    \tif d < 1 or d > 29 then return false end\n\telseif m == 4 or m == 6 or m ==\
    \ 9 or m == 11 then\n\t\tif d < 1 or d > 30 then return false end\n\telse\n\t\t\
    if d < 1 or d > 31 then return false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4uflyft.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu4uflyft.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local pattern = \"^(%d%d)-(%d%d)-(%d%d%d%d)$\"\
    \n    local month, day, year = date:match(pattern)\n    month = tonumber(month)\n\
    \    day = tonumber(day)\n    year = tonumber(year)\n    if not month or not day\
    \ or not year then\n        return false\n    end\n    if month > 12 or month\
    \ < 1 then\n        return false\n    end\n    if day > 31 or day < 1 then\n \
    \       return false\n    end\n    if month == 2 then\n        if year % 4 ==\
    \ 0 and year % 100 ~= 0 or year % 400 == 0 then\n            if day > 29 then\n\
    \                return false\n            end\n        else\n            if day\
    \ > 28 then\n                return false\n            end\n        end\n    elseif\
    \ month == 4 or month == 6 or month == 9 or month == 11 then\n        if day >\
    \ 30 then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxebbt7v.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprxebbt7v.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if string.match(date,\
    \ '^%d%d%-%d%d%-%d%d%d%d$') then\n        local t = {}\n        local day = string.sub(date,\
    \ 1, 2)\n        local month = string.sub(date, 4, 5)\n        local year = string.sub(date,\
    \ 7, 10)\n        table.insert(t, day)\n        table.insert(t, month)\n     \
    \   table.insert(t, year)\n        for i = 1, 2 do\n            if tonumber(t[i])\
    \ > 31 then\n                return false\n            end\n        end\n    \
    \    if tonumber(t[2]) > 12 then\n            return false\n        end\n    \
    \    if tonumber(t[2]) == 2 then\n            if tonumber(t[1]) > 29 then\n  \
    \              return false\n            end\n        end\n        return true\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qicy2ap.lua:47:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0qicy2ap.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date then return false\
    \ end\n    local days, months, years = string.match(date, '(%d+)-(%d+)-(%d+)')\n\
    \    days, months, years = tonumber(days), tonumber(months), tonumber(years)\n\
    \    if not days or not months or not years then return false end\n    if days\
    \ < 1 or months < 1 or years < 1 then return false end\n    if (months == 1 or\
    \ months == 3 or months == 5 or months == 7 or months == 8 or months == 10 or\
    \ months == 12) and days > 31 then return false end\n    if (months == 4 or months\
    \ == 6 or months == 9 or months == 11) and days > 30 then return false end\n \
    \   if months == 2 and days > 29 then return false end\n    if months > 12 then\
    \ return false end\n    return true\nend\nassert(valid_date('03-11-2000') == true)\n\
    assert(valid_date('15-01-2012') == false)\nassert(valid_date('04-0-2040') == false)\n\
    assert(valid_date('06-04-2020') == true)\nassert(valid_date('06/04/2020') == false)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppfglwznm.lua:27: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmppfglwznm.lua:27: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match'(%d%d)-(%d%d)-(%d%d%d%d)'\n\
    \    if day == nil or month == nil or year == nil then\n        return false\n\
    \    end\n    if tonumber(month) < 1 or tonumber(month) > 12 then\n        return\
    \ false\n    end\n    if tonumber(day) < 1 or tonumber(day) > 31 then\n      \
    \  return false\n    end\n    if tonumber(month) == 2 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n            return false\n        end\n    end\n\
    \    if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or\
    \ tonumber(month) == 11 then\n        if tonumber(day) < 1 or tonumber(day) >\
    \ 30 then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- body\n\t--[[\n\t\thelper function\
    \ to check the validity of a date\n\t\treturns 1 if valid, otherwise 0\n\t--]]\n\
    \tlocal function isValidDate(year, month, day)\n\t\tif year < 1800 or year > 3000\
    \ then\n\t\t\treturn 0\n\t\tend\n\t\tif month < 1 or month > 12 then\n\t\t\treturn\
    \ 0\n\t\tend\n\t\tif day < 1 or day > 31 then\n\t\t\treturn 0\n\t\tend\n\t\tif\
    \ (month == 4 or month == 6 or month == 9 or month == 11) and day > 30 then\n\t\
    \t\treturn 0\n\t\tend\n\t\tif month == 2 and (day > 29 or (day > 28 and (year\
    \ % 4 ~= 0 or (year % 100 == 0 and year % 400 ~= 0)))) then\n\t\t\treturn 0\n\t\
    \tend\n\t\treturn 1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiqfks00p.lua:60: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\n\
    \    return false\n  end\n  local d = date:match('(%d+)-(%d+)-(%d+)')\n  if d\
    \ == nil then\n    return false\n  end\n  local month, day, year = d:match('(%d+)-(%d+)-(%d+)')\n\
    \  month = tonumber(month)\n  day = tonumber(day)\n  year = tonumber(year)\n \
    \ if month < 1 or month > 12 then\n    return false\n  end\n  if day < 1 or ((month\
    \ == 2) and (day > 29)) or\n    ((month == 4 or month == 6 or month == 9 or month\
    \ == 11) and (day > 30)) or\n    ((month == 1 or month == 3 or month == 5 or month\
    \ == 7 or month == 8 or month == 10 or month == 12) and (day > 31)) then\n   \
    \ return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxw_3rg0o.lua:26:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxw_3rg0o.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpxw_3rg0o.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- body\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb6ps36_.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqb6ps36_.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppg37jtj.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpppg37jtj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == '' then return false\
    \ end\n  local month, day, year = date:match(\"^(%d%d)-(%d%d)-(%d%d%d%d)$\")\n\
    \  if not (month and day and year) then return false end\n  month, day, year =\
    \ tonumber(month), tonumber(day), tonumber(year)\n  if not (month and day and\
    \ year) then return false end\n  local days_31 = {1,3,5,7,8,10,12}\n  local days_30\
    \ = {4,6,9,11}\n  local max_days = 31\n  if (year % 4 == 0 and year % 100 ~= 0)\
    \ or year % 400 == 0 then\n    max_days = 29\n  else\n    max_days = 28\n  end\n\
    \  for _,v in ipairs(days_31) do\n    if month == v then max_days = 31 end\n \
    \ end\n  for _,v in ipairs(days_30) do\n    if month == v then max_days = 30 end\n\
    \  end\n  if month < 1 or month > 12 then return false end\n  if day < 1 or day\
    \ > max_days then return false end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year, month, day = date:match(\"\
    ^(%d%d%d%d)%-(%d%d)%-(%d%d)$\")\n    return year ~= nil and\n           month\
    \ >= 1 and month <= 12 and\n           day >= 1 and day <= 31 and\n          \
    \ (day ~= 31 or {1,3,5,7,8,10,12}[month]) and\n           (day ~= 30 or {4,6,9,11}[month])\
    \ and\n           (day ~= 29 or month == 2 or not (year % 4 == 0 and (year % 100\
    \ ~= 0 or year % 400 == 0)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyr292pjo.lua:19: ')' expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\n   \
    \ --return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tg6dkqr.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_tg6dkqr.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8izil1w.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm8izil1w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal day, month, year = date:match(\"\
    (%d+)-(%d+)-(%d+)\")\n\tif not day or not month or not year then\n\t\treturn false\n\
    \tend\n\tday = tonumber(day)\n\tmonth = tonumber(month)\n\tyear = tonumber(year)\n\
    \tif month < 1 or month > 12 then\n\t\treturn false\n\tend\n\tif day < 1 then\n\
    \t\treturn false\n\tend\n\tif month == 2 then\n\t\tif year % 4 == 0 then\n\t\t\
    \tif day > 29 then\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\tif day >\
    \ 28 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\telseif month == 4 or month\
    \ == 6 or month == 9 or month == 11 then\n\t\tif day > 30 then\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\tif day > 31 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbx347h8.lua:54:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzbx347h8.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    -- Check\
    \ if the string is empty\n    if date == \"\" then\n        return false\n   \
    \ end\n    -- Check if the date is in the correct format\n    if not string.match(date,\
    \ \"^%d%d%-%d%d%-%d%d%d%d$\") then\n        return false\n    end\n    -- Get\
    \ the day, month and year of the date\n    local day = string.sub(date, 1, 2)\n\
    \    local month = string.sub(date, 4, 5)\n    local year = string.sub(date, 7,\
    \ 10)\n    -- Convert the strings to numbers\n    day = tonumber(day)\n    month\
    \ = tonumber(month)\n    year = tonumber(year)\n    -- Check if the year is valid\n\
    \    if year < 1582 then\n        return false\n    end\n    -- Check if the month\
    \ is valid\n    if month < 1 or month > 12 then\n        return false\n    end\n\
    \    -- Check if the day is valid\n    if (month == 1 or month == 3 or month ==\
    \ 5 or month == 7 or month == 8 or month == 10 or month == 12) and (day < 1 or\
    \ day > 31) then\n        return false\n    elseif (month == 4 or month == 6 or\
    \ month == 9 or month == 11) and (day < 1 or day > 30) then\n        return false\n\
    \    elseif month == 2 and year % 4 == 0 and (day < 1 or day > 29) then\n    \
    \    return false\n    elseif month == 2 and year % 4 ~= 0 and (day < 1 or day\
    \ > 28) then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhgug565.lua:57:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwhgug565.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd9ftevv.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjd9ftevv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- body\n  local m,d,y = date:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if not (m and d and y) then\n    return false\n  end\n\
    \  local month = tonumber(m)\n  local day = tonumber(d)\n  local year = tonumber(y)\n\
    \  if not (month >= 1 and month <= 12) then\n    return false\n  end\n  if not\
    \ (year >= 1980 and year <= 2050) then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if year % 4 == 0 then\n      if not (day >= 1 and day <= 29) then\n\
    \        return false\n      end\n    else\n      if not (day >= 1 and day <=\
    \ 28) then\n        return false\n      end\n    end\n  elseif month == 1 or month\
    \ == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12\
    \ then\n    if not (day >= 1 and day <= 31) then\n      return false\n    end\n\
    \  else\n    if not (day >= 1 and day <= 30) then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  --your code here\n  if date ==\
    \ nil or date == '' then\n    return false\n  end\n  local datesplit = split(date,'-')\n\
    \  local month = tonumber(datesplit[1])\n  local day = tonumber(datesplit[2])\n\
    \  local year = tonumber(datesplit[3])\n  if month < 1 or month > 12 then\n  \
    \  return false\n  end\n  if month == 2 then\n    if day < 1 or day > 29 then\n\
    \      return false\n    end\n  elseif month == 1 or month == 3 or month == 5\
    \ or month == 7 or month == 8 or month == 10 or month == 12 then\n    if day <\
    \ 1 or day > 31 then\n      return false\n    end\n  else\n    if day < 1 or day\
    \ > 30 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaxhzwy1d.lua:19:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpaxhzwy1d.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpaxhzwy1d.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal _, _, m, d, y = string.find(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n\t-- comment if you're okay with leap years\n\tif y%4==0\
    \ and (y%100~=0 or y%400==0) then\n\t\tdays = {31,29,31,30,31,30,31,31,30,31,30,31}\n\
    \telse\n\t\tdays = {31,28,31,30,31,30,31,31,30,31,30,31}\n\tend\n\treturn (m and\
    \ d and y and m>=1 and m<=12 and d>=1 and d<=days[m])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjpu63iuq.lua:22:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpjpu63iuq.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpjpu63iuq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabht04be.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpabht04be.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   -- your code goes here\n   local\
    \ mm,dd,yyyy = string.match(date, '(%d%d)-(%d%d)-(%d%d%d%d)')\n   if mm == nil\
    \ or dd == nil or yyyy == nil then return false end\n   if tonumber(mm) > 12 or\
    \ tonumber(mm) < 1 then return false end\n   if tonumber(dd) > 31 or tonumber(dd)\
    \ < 1 then return false end\n   if (tonumber(mm) == 2) and ((tonumber(dd) > 29)\
    \ or (tonumber(dd) < 1)) then return false end\n   if (tonumber(mm) == 4) or (tonumber(mm)\
    \ == 6) or (tonumber(mm) == 9) or (tonumber(mm) == 11) then\n      if tonumber(dd)\
    \ > 30 then return false end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  return date:match(\"^(%d%d)-(%d%d)-(%d%d%d%d)$\"\
    ) and tonumber(date:match(\"^(%d%d)-(%d%d)-(%d%d%d%d)$\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxa04zmy.lua:21:\
    \ expected: true, actual: 3\nstack traceback:\n\t/tmp/tmpsxa04zmy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t--write your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d8ulb7_.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8d8ulb7_.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local d = {}\n    local s = string.split(date,'-')\n\
    \    if #s ~= 3 then return false end\n    for i,v in ipairs(s) do\n        if\
    \ not string.match(v,'%d+') then return false end\n        d[i] = tonumber(v)\n\
    \    end\n    if d[2] < 1 or d[2] > 12 then return false end\n    if (d[2] ==\
    \ 1 or d[2] == 3 or d[2] == 5 or d[2] == 7 or d[2] == 8 or d[2] == 10 or d[2]\
    \ == 12) and (d[1] < 1 or d[1] > 31) then return false end\n    if (d[2] == 4\
    \ or d[2] == 6 or d[2] == 9 or d[2] == 11) and (d[1] < 1 or d[1] > 30) then return\
    \ false end\n    if d[2] == 2 and d[1] < 1 then return false end\n    if d[2]\
    \ == 2 and d[1] > 29 then return false end\n    if d[2] == 2 and d[1] == 29 and\
    \ d[3] % 4 ~= 0 then return false end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcw5m6vep.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpcw5m6vep.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpcw5m6vep.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61nd2z9i.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp61nd2z9i.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or date == ''\
    \ then return false end\n    year, month, day = date:match('(%d%d%d%d)%-(%d%d)%-(%d%d)')\n\
    \    if year == nil or month == nil or day == nil then return false end\n    month\
    \ = tonumber(month)\n    day = tonumber(day)\n    if (month == 1 or month == 3\
    \ or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and\
    \ (day < 1 or day > 31) then return false end\n    if (month == 4 or month ==\
    \ 6 or month == 9 or month == 11) and (day < 1 or day > 30) then return false\
    \ end\n    if month == 2 and (day < 1 or day > 29) then return false end\n   \
    \ if month < 1 or month > 12 then return false end\n    return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwywiimb.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphwywiimb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local valid_days = {31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    local date_split = date:split('-')\n\
    \    local date_format = '%02d-%02d-%04d'\n    local dd, mm, yyyy = date_split[1],\
    \ date_split[2], date_split[3]\n    if #date == 0 then return false end\n    if\
    \ yyyy % 4 == 0 then\n        valid_days[2] = 29\n    end\n    if yyyy % 100 ==\
    \ 0 then\n        valid_days[2] = 28\n    end\n    if yyyy % 400 == 0 then\n \
    \       valid_days[2] = 29\n    end\n    if tonumber(dd) > valid_days[tonumber(mm)]\
    \ or tonumber(dd) < 1 then\n        return false\n    end\n    if tonumber(mm)\
    \ > 12 or tonumber(mm) < 1 then\n        return false\n    end\n    if date_format:format(dd,\
    \ mm, yyyy) ~= date then\n        return false\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5dywtqf.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpd5dywtqf.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpd5dywtqf.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- YOUR CODE HERE\n    local\
    \ results = {}\n    local pattern = \"(%d%d)-(%d%d)-(%d%d%d%d)\"\n    for day,\
    \ month, year in date:gmatch(pattern) do\n        results = {day, month, year}\n\
    \    end\n    if #results ~= 3 then\n        return false\n    end\n    local\
    \ month = tonumber(results[2])\n    local day = tonumber(results[1])\n    local\
    \ year = tonumber(results[3])\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7\
    \ or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day\
    \ > 31 then\n            return false\n        end\n    elseif month == 4 or month\
    \ == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n\
    \            return false\n        end\n    elseif month == 2 then\n        if\
    \ day < 1 or day > 29 then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfbh1g9b.lua:50:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqfbh1g9b.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_xf03_h.lua:21:\
    \ expected: true, actual: 0\nstack traceback:\n\t/tmp/tmp4_xf03_h.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if string.len(date)\
    \ == 0 then\n        return false\n    end\n    local datelist = {}\n    string.gsub(date,\
    \ \"[^%-]+\", function(c) table.insert(datelist, c) end)\n    local mm = tonumber(datelist[1])\n\
    \    local dd = tonumber(datelist[2])\n    local yyyy = tonumber(datelist[3])\n\
    \    if #datelist ~= 3 then\n        return false\n    end\n    if mm < 1 or mm\
    \ > 12 then\n        return false\n    end\n    if (mm == 1 or mm == 3 or mm ==\
    \ 5 or mm == 7 or mm == 8 or mm == 10 or mm == 12) and (dd < 1 or dd > 31) then\n\
    \        return false\n    end\n    if (mm == 4 or mm == 6 or mm == 9 or mm ==\
    \ 11) and (dd < 1 or dd > 30) then\n        return false\n    end\n    if mm ==\
    \ 2 and (dd < 1 or dd > 29) then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  return (string.match(date, \"%d%d-%d%d-%d%d%d%d\"\
    ) and tonumber(string.sub(date, 1, 2)) <= 12 and tonumber(string.sub(date, 4,\
    \ 5)) <= 31 and (tonumber(string.sub(date, 1, 2)) ~= 2 or tonumber(string.sub(date,\
    \ 4, 5)) <= 29) and (tonumber(string.sub(date, 1, 2)) ~= 2 or tonumber(string.sub(date,\
    \ 4, 5)) <= 28 or tonumber(string.sub(date, 7, 10)) % 4 == 0) and (tonumber(string.sub(date,\
    \ 1, 2)) ~= 4 or tonumber(string.sub(date, 4, 5)) <= 30) and (tonumber(string.sub(date,\
    \ 1, 2)) ~= 6 or tonumber(string.sub(date, 4, 5)) <= 30) and (tonumber(string.sub(date,\
    \ 1, 2)) ~= 9 or tonumber(string.sub(date, 4, 5)) <= 30) and (tonumber(string.sub(date,\
    \ 1, 2)) ~= 11 or tonumber(string.sub(date, 4, 5)) <= 30))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlzr3tz8.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpnlzr3tz8.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih9mbziu.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpih9mbziu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_number\
    \ = {}\n  for i in string.gmatch(date, \"%d+\") do\n    table.insert(date_number,i)\n\
    \  end\n  if date_number[1] == nil or date_number[2] == nil or date_number[3]\
    \ == nil then\n    return false\n  end\n  if string.len(date_number[1]) == 1 then\n\
    \    if tonumber(date_number[1]) < 1 or tonumber(date_number[1]) > 12 then\n \
    \     return false\n    end\n  elseif string.len(date_number[1]) == 2 then\n \
    \   if tonumber(date_number[1]) < 1 or tonumber(date_number[1]) > 12 then\n  \
    \    return false\n    end\n  elseif string.len(date_number[1]) == 3 then\n  \
    \  if tonumber(date_number[1]) < 1 or tonumber(date_number[1]) > 31 then\n   \
    \   return false\n    end\n  else\n    return false\n  end\n  if string.len(date_number[2])\
    \ == 1 then\n    if tonumber(date_number[2]) < 1 or tonumber(date_number[2]) >\
    \ 12 then\n      return false\n    end\n  elseif string.len(date_number[2]) ==\
    \ 2 then\n    if tonumber(date_number[2]) < 1 or tonumber(date_number[2]) > 12\
    \ then\n      return false\n    end\n  elseif string.len(date_number[2]) == 3\
    \ then\n    if tonumber(date_number[2]) < 1 or tonumber(date_number[2]) > 31 then\n\
    \      return false\n    end\n  else\n    return false\n  end\n  if string.len(date_number[3])\
    \ == 1 then\n    if tonumber(date_number[3]) < 1000 or tonumber(date_number[3])\
    \ > 9999 then\n      return false\n    end\n  elseif string.len(date_number[3])\
    \ == 2 then\n    if tonumber(date_number[3]) < 1000 or tonumber(date_number[3])\
    \ > 9999 then\n      return false\n    end\n \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwg17eccv.lua:84: 'end' expected (to close 'if' at line 53)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal month, day, year = date:match(\"\
    (%d+)-(%d+)-(%d+)\")\n\tmonth = tonumber(month)\n\tday = tonumber(day)\n\tyear\
    \ = tonumber(year)\n\tif month > 12 or month < 1 then\n\t\treturn false\n\tend\n\
    \tif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month\
    \ == 10 or month == 12 then\n\t\tif day > 31 or day < 1 then\n\t\t\treturn false\n\
    \t\tend\n\telseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \t\tif day > 30 or day < 1 then\n\t\t\treturn false\n\t\tend\n\telseif month ==\
    \ 2 then\n\t\tif day > 29 or day < 1 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend\nassert(valid_date('03-11-2000') == true)\nassert(valid_date('15-01-2012')\
    \ == false)\nassert(valid_date('04-0-2040') == false)\nassert(valid_date('06-04-2020')\
    \ == true)\nassert(valid_date('06/04/2020') == false)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp842ugdl9.lua:19: attempt to compare number with nil\nstack\
    \ traceback:\n\t/tmp/tmp842ugdl9.lua:19: in local 'valid_date'\n\t/tmp/tmp842ugdl9.lua:41:\
    \ in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ function is_leap_year(year)\n        if (year % 4) == 0 then\n            if\
    \ (year % 100) == 0 then\n                if (year % 400) == 0 then\n        \
    \            return true\n                else\n                    return false\n\
    \                end\n            else\n                return true\n        \
    \    end\n        else\n            return false\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5zzj3fif.lua:53: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- TODO: your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1366fgas.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1366fgas.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal date_tbl = date:split('-')\n\
    \tlocal y, m, d = date_tbl[3], date_tbl[1], date_tbl[2]\n\tif #date_tbl ~= 3 then\
    \ return false end\n\tif not y:isnumber() or not m:isnumber() or not d:isnumber()\
    \ then return false end\n\tif y < 0 or m < 0 or d < 0 then return false end\n\t\
    if m > 12 or m == 0 then return false end\n\tif (m == 1 or m == 3 or m == 5 or\
    \ m == 7 or m == 8 or m == 10 or m == 12) and (d > 31 or d == 0) then return false\
    \ end\n\tif (m == 4 or m == 6 or m == 9 or m == 11) and (d > 30 or d == 0) then\
    \ return false end\n\tif m == 2 and d > 29 then return false end\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6rk4_8p.lua:15:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpi6rk4_8p.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpi6rk4_8p.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == '' then\n    return\
    \ false\n  end\n  local _, _, m, d, y = string.find(date, '(%d+)-(%d+)-(%d+)')\n\
    \  if m == nil or d == nil or y == nil then\n    return false\n  end\n  m = tonumber(m)\n\
    \  d = tonumber(d)\n  y = tonumber(y)\n  if m < 1 or m > 12 then\n    return false\n\
    \  end\n  if d < 1 or d > 31 then\n    return false\n  end\n  if m == 2 then\n\
    \    if d > 29 then\n      return false\n    end\n  elseif m == 4 or m == 6 or\
    \ m == 9 or m == 11 then\n    if d > 30 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tprint(date)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "03-11-2000\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_db0io5.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpd_db0io5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- TODO: implement the function\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd04543i6.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpd04543i6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- validate that the date is not\
    \ empty\n\tif date == '' then\n\t\treturn false\n\tend\n\t\n\t-- split date into\
    \ dd-mm-yyyy format\n\tdd, mm, yyyy = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \t\n\t-- validate that the date is not in dd/mm/yyyy format\n\tif dd == nil or\
    \ mm == nil or yyyy == nil then\n\t\treturn false\n\tend\n\t\n\t-- convert date\
    \ string to number\n\tdd = tonumber(dd)\n\tmm = tonumber(mm)\n\tyyyy = tonumber(yyyy)\n\
    \t\n\t-- validate that the months is not less than 1 or higher than 12\n\tif mm\
    \ < 1 or mm > 12 then\n\t\treturn false\n\tend\n\t\n\t-- validate that the number\
    \ of days is not less than 1 or higher than 31 for months 1,3,5,7,8,10,12\n\t\
    if (mm == 1 or mm == 3 or mm == 5 or mm == 7 or mm == 8 or mm == 10 or mm == 12)\
    \ and (dd < 1 or dd > 31) then\n\t\treturn false\n\tend\n\t\n\t-- validate that\
    \ the number of days is not less than 1 or higher than 30 for months 4,6,9,11\n\
    \tif (mm == 4 or mm == 6 or mm == 9 or mm == 11) and (dd < 1 or dd > 30) then\n\
    \t\treturn false\n\tend\n\t\n\t-- validate that the number of days is not less\
    \ than 1 or higher than 29 for the month 2\n\tif mm == 2 and (dd < 1 or dd > 29)\
    \ then\n\t\treturn false\n\tend\n\t\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplibp8o8v.lua:60:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplibp8o8v.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphul6lqsj.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphul6lqsj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = string.match(date, \"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month > 12 or month < 1\
    \ then\n    return false\n  end\n  if day > 31 or day < 1 then\n    return false\n\
    \  end\n  if month == 2 then\n    if day > 29 then\n      return false\n    end\n\
    \  end\n  if month == 4 or month == 6 or month == 9 or month == 11 then\n    if\
    \ day > 30 then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsh021yq5.lua:20:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpsh021yq5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpsh021yq5.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrji4cv3.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmptrji4cv3.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == '' then\n\t\treturn\
    \ false\n\tend\n\tlocal date_formats = {'^(%d+)-(%d+)-(%d+)$'}\n\tlocal passed_format\
    \ = false\n\tfor i,format in ipairs(date_formats) do\n\t\tlocal day, month, year\
    \ = date:match(format)\n\t\tif day and month and year then\n\t\t\tpassed_format\
    \ = true\n\t\t\tbreak\n\t\tend\n\tend\n\tif not passed_format then\n\t\treturn\
    \ false\n\tend\n\tday = tonumber(day)\n\tmonth = tonumber(month)\n\tyear = tonumber(year)\n\
    \tif not (month >= 1 and month <= 12) then\n\t\treturn false\n\tend\n\tif month\
    \ == 2 then\n\t\tif not (day >= 1 and day <= 29) then\n\t\t\treturn false\n\t\t\
    end\n\telseif (month == 1 or month == 3 or month == 5 or month == 7 or month ==\
    \ 8 or month == 10 or month == 12) then\n\t\tif not (day >= 1 and day <= 31) then\n\
    \t\t\treturn false\n\t\tend\n\telse\n\t\tif not (day >= 1 and day <= 30) then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpss3v97dn.lua:33:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpss3v97dn.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpss3v97dn.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d+)/(%d+)/(%d+)\")\n    return day ~= \"\" and month ~= \"\" and year ~= \"\"\
    \ and os.time{year=year, month=month, day=day} or false\nend\nprint(valid_date('06-04-2020'))\n\
    print(valid_date('06/04/2020'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('03-11-2000'))\n\
    print(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmar14uyx.lua:16: field 'day' missing in date table\nstack\
    \ traceback:\n\t[C]: in function 'os.time'\n\t/tmp/tmpmar14uyx.lua:16: in local\
    \ 'valid_date'\n\t/tmp/tmpmar14uyx.lua:18: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\n   \
    \ return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih4cdcrv.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpih4cdcrv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n    local days_in_month =\
    \ {\n        [1] = 31,\n        [2] = 28,\n        [3] = 31,\n        [4] = 30,\n\
    \        [5] = 31,\n        [6] = 30,\n        [7] = 31,\n        [8] = 31,\n\
    \        [9] = 30,\n        [10] = 31,\n        [11] = 30,\n        [12] = 31\n\
    \    }\n    if not m or not d or not y then\n        return false\n    end\n \
    \   if not tonumber(m) or not tonumber(d) or not tonumber(y) then\n        return\
    \ false\n    end\n    if not (tonumber(m) >= 1 and tonumber(m) <= 12) then\n \
    \       return false\n    end\n    if tonumber(y) % 4 == 0 then\n        days_in_month[2]\
    \ = 29\n    end\n    if not (tonumber(d) >= 1 and tonumber(d) <= days_in_month[tonumber(m)])\
    \ then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    --[[\n\
    \        Valid date must be in format dd-mm-yyyy\n        day between 1-31, month\
    \ between 1-12, year between 1900-2100\n    ]]\n    if date:len() == 0 then return\
    \ false end\n    local d, m, y = date:match('(%d%d?)%-(%d%d?)%-(%d%d%d%d)')\n\
    \    if not d or not m or not y then return false end\n    d, m, y = tonumber(d),\
    \ tonumber(m), tonumber(y)\n    if not (y >= 1900 and y <= 2100) then return false\
    \ end\n    if m == 2 then\n        if not (d >= 1 and d <= 29) then return false\
    \ end\n    elseif m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or\
    \ m == 12 then\n        if not (d >= 1 and d <= 31) then return false end\n  \
    \  elseif m == 4 or m == 6 or m == 9 or m == 11 then\n        if not (d >= 1 and\
    \ d <= 30) then return false end\n    else\n        return false\n    end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57tvx7c1.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp57tvx7c1.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code goes here\n    if\
    \ #date > 0 then\n        local day, month, year = date:match('^(%d%d?)%-(%d%d?)%-(%d%d%d%d)$')\n\
    \        day = tonumber(day)\n        month = tonumber(month)\n        year =\
    \ tonumber(year)\n        if month > 0 and month < 13 then\n            if month\
    \ == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10\
    \ or month == 12 then\n                if day > 0 and day < 32 then\n        \
    \            return true\n                end\n            elseif month == 4 or\
    \ month == 6 or month == 9 or month == 11 then\n                if day > 0 and\
    \ day < 31 then\n                    return true\n                end\n      \
    \      elseif month == 2 then\n                if day > 0 and day < 30 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtdu5c1n.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphtdu5c1n.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local year, month, day = date:match(\"\
    (%d%d%d%d)-(%d%d)-(%d%d)\")\n  if not (year and month and day) then return false\
    \ end\n  local months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  if\
    \ month == '02' and day == '29' and (tonumber(year) % 4 == 0) then return true\
    \ end\n  if tonumber(day) <= months[tonumber(month)] then return true end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73_gbyms.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp73_gbyms.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\
    \ return false end\n  local year, month, day = date:match('(%d%d%d%d)%-(%d%d)%-(%d%d)')\n\
    \  local months = { '01', '03', '05', '07', '08', '10', '12' }\n  local days =\
    \ { '31', '30', '29', '28' }\n  if year and month and day then\n    year = tonumber(year)\n\
    \    month = tonumber(month)\n    day = tonumber(day)\n    if not(year > 0 and\
    \ month > 0 and month < 13 and day > 0) then return false end\n    for _, m in\
    \ ipairs(months) do\n      if m == month then return day <= 31 end\n    end\n\
    \    for _, m in ipairs({ '04', '06', '09', '11' }) do\n      if m == month then\
    \ return day <= 30 end\n    end\n    if month == 2 then\n      if day <= 28 then\
    \ return true end\n      if year % 4 == 0 then return true end\n      if year\
    \ % 100 == 0 then return false end\n      if year % 400 == 0 then return true\
    \ end\n      return false\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyivn004.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsyivn004.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local mm, dd, yyyy = string.match(date,\
    \ '(%d%d)-(%d%d)-(%d%d%d%d)')\n  return mm and dd and yyyy and\n  tonumber(mm)\
    \ >= 1 and tonumber(mm) <= 12 and\n  tonumber(dd) >= 1 and (({31,30,29,31,30,31,31,30,31,30,31})[tonumber(mm)]\
    \ or 28) >= tonumber(dd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6341nouq.lua:26:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6341nouq.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Remove this line and implement\
    \ the function\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3emhike.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj3emhike.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hxom9oo.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_hxom9oo.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmidb16is.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpmidb16is.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here...\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyytkclz.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvyytkclz.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   local days_of_months = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n   local split_date = {}\n   local\
    \ month, day, year\n   local status = false\n   local day_error = 'The number\
    \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.'\n   local month_error = 'The months should not be less than 1 or higher\
    \ than 12.'\n   local year_error = 'The year should be in the format: yyyy'\n\
    \   local day_error_status = false\n   local month_error_status = false\n   local\
    \ year_error_status = false\n   local empty_status = false\n   local is_leap_year\
    \ = false\n   local day_number\n   local month_number\n   local year_number\n\
    \   local pattern = '%d%d%d%d%d%d%d%d'\n   local date_valid = true\n   local date_len\
    \ = #date\n   if date_len == 0 then\n      empty_status = true\n      date_valid\
    \ = false\n   end\n   for word in string.gmatch(date, pattern) do\n      if #word\
    \ == date_len then\n         date_valid = false\n      end\n   end\n   local date_split\
    \ = split(date, '-')\n   local split_date_len = #date_split\n   if split_date_len\
    \ == 3 then\n      month = date_split[1]\n      day = date_split[2]\n      year\
    \ = date_split[3]\n      year_number = tonumber(year)\n      month_number = tonumber(month)\n\
    \      day_number = tonumber(day)\n      if year_number and month_number and day_number\
    \ then\n         if year_number >= 1 then\n            if month_number >= 1 and\
    \ month_number <= 12 then\n               local days_in_month = days_of_months[month_number]\n\
    \              \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdmy8ph7i.lua:78: 'end' expected (to close 'if' at line 53)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5s0c310.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_5s0c310.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- body\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c00etm6.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9c00etm6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndtes02i.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpndtes02i.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0to81sdh.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0to81sdh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1ftzwuk.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmph1ftzwuk.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local count = 0\n    for i =\
    \ 1, string.len(date) do\n        local char = string.sub(date, i, i)\n      \
    \  if char == '-' then\n            count = count + 1\n        end\n    end\n\
    \    if count ~= 2 then\n        return false\n    end\n    local month, day,\
    \ year = string.match(date, \"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month == nil\
    \ or day == nil or year == nil then\n        return false\n    end\n    local\
    \ months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    local month_i\
    \ = tonumber(month)\n    local day_i = tonumber(day)\n    local year_i = tonumber(year)\n\
    \    if (math.floor(year_i / 4) == year_i / 4) and (math.floor(year_i / 100) ~=\
    \ year_i / 100) then\n        months[2] = 29\n    end\n    if month_i < 1 or month_i\
    \ > 12 then\n        return false\n    end\n    if day_i < 1 or day_i > months[month_i]\
    \ then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ '' then\n    return false\n  end\n  local date_table = {}\n  local date_table_counter\
    \ = 1\n  for i in string.gmatch(date,'%d+') do\n    date_table[date_table_counter]\
    \ = i\n    date_table_counter = date_table_counter + 1\n  end\n  if date_table[1]\
    \ ~= nil and date_table[2] ~= nil and date_table[3] ~= nil then\n    if tonumber(date_table[1])\
    \ > 12 or tonumber(date_table[1]) < 1 then\n      return false\n    end\n    if\
    \ tonumber(date_table[1]) == 1 or tonumber(date_table[1]) == 3 or tonumber(date_table[1])\
    \ == 5 or tonumber(date_table[1]) == 7 or tonumber(date_table[1]) == 8 or tonumber(date_table[1])\
    \ == 10 or tonumber(date_table[1]) == 12 then\n      if tonumber(date_table[2])\
    \ > 31 or tonumber(date_table[2]) < 1 then\n        return false\n      end\n\
    \    elseif tonumber(date_table[1]) == 4 or tonumber(date_table[1]) == 6 or tonumber(date_table[1])\
    \ == 9 or tonumber(date_table[1]) == 11 then\n      if tonumber(date_table[2])\
    \ > 30 or tonumber(date_table[2]) < 1 then\n        return false\n      end\n\
    \    elseif tonumber(date_table[1]) == 2 then\n      if tonumber(date_table[2])\
    \ > 29 or tonumber(date_table[2]) < 1 then\n        return false\n      end\n\
    \    end\n    if tonumber(date_table[3]) > 9999 or tonumber(date_table[3]) < 1000\
    \ then\n      return false\n    end\n    if string.match(date, '%d+-%d+-%d+')\
    \ == nil then\n      return false\n    end\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\n```\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpayusy_ca.lua:17: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Your code here\nend\n```\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw6h2c2lb.lua:17: unexpected symbol near '`'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- TODO: Your code here\n  if(date:len()==0)\
    \ then return false end\n  local m,d,y = date:match(\"(%d+)-(%d+)-(%d+)\")\n \
    \ m,d,y = tonumber(m),tonumber(d),tonumber(y)\n  if(m==nil or d==nil or y==nil)\
    \ then return false end\n  if(m<1 or m>12) then return false end\n  if(m==2) then\n\
    \    if(d<1 or d>29) then return false end\n  elseif(m==4 or m==6 or m==9 or m==11)\
    \ then\n    if(d<1 or d>30) then return false end\n  else\n    if(d<1 or d>31)\
    \ then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g1x3f6j.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6g1x3f6j.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- body\n    if date == nil or\
    \ date == '' then\n        return false\n    end\n    local tmp = {}\n    for\
    \ i in string.gmatch(date, \"%d+\") do\n        table.insert(tmp, i)\n    end\n\
    \    local day = tonumber(tmp[1])\n    local month = tonumber(tmp[2])\n    local\
    \ year = tonumber(tmp[3])\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if (year % 4 == 0 and year %\
    \ 100 ~= 0) or year % 400 == 0 then\n            if day > 29 or day < 1 then\n\
    \                return false\n            end\n        else\n            if day\
    \ > 28 or day < 1 then\n                return false\n            end\n      \
    \  end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 or month == 12 then\n        if day > 31 or day < 1 then\n\
    \            return false\n        end\n    else\n        if day > 30 or day <\
    \ 1 then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt44pbbcd.lua:55:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt44pbbcd.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local function is_leap(year)\n\
    \    return math.fmod(year, 400) == 0 or (math.fmod(year, 4) == 0 and math.fmod(year,\
    \ 100) ~= 0)\n  end\n  local tab = {}\n  local year, month, day = string.match(date,\
    \ '(%d%d%d%d)-(%d%d)-(%d%d)')\n  year = tonumber(year)\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  for i = 1, #date do\n    if date[i] == \"-\" then\n\
    \      tab[#tab + 1] = date[i]\n    end\n  end\n  if #tab ~= 2 then\n    return\
    \ false\n  end\n  if month < 1 or month > 12 then\n    return false\n  end\n \
    \ if day < 1 or day > 31 then\n    return false\n  end\n  if month == 2 then\n\
    \    if is_leap(year) and day > 29 then\n      return false\n    elseif day >\
    \ 28 then\n      return false\n    end\n  end\n  if month == 4 or month == 6 or\
    \ month == 9 or month == 11 then\n    if day > 30 then\n      return false\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kdeknn7.lua:55:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5kdeknn7.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- body\n  return nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7nx_0gv.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpl7nx_0gv.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local y, m, d = date:match(\"\
    (%d+)/(%d+)/(%d+)\")\n    if y and m and d then\n        y = tonumber(y)\n   \
    \     m = tonumber(m)\n        d = tonumber(d)\n        return y > 0 and y < 9999\
    \ and m > 0 and m < 13 and d > 0 and d < 32\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsk4vtxo.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqsk4vtxo.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_tab = {}\n  for value\
    \ in string.gmatch(date, \"%d+\") do\n    table.insert(date_tab, tonumber(value))\n\
    \  end\n  if date_tab[1] ~= nil and date_tab[2] ~= nil and date_tab[3] ~= nil\
    \ then\n    if date_tab[1] <= 31 and date_tab[1] >= 1 and date_tab[2] <= 12 and\
    \ date_tab[2] >= 1 and date_tab[3] >= 1 then\n      if (date_tab[2] == 1 or date_tab[2]\
    \ == 3 or date_tab[2] == 5 or date_tab[2] == 7 or date_tab[2] == 8 or date_tab[2]\
    \ == 10 or date_tab[2] == 12) and date_tab[1] <= 31 then\n        return true\n\
    \      elseif (date_tab[2] == 4 or date_tab[2] == 6 or date_tab[2] == 9 or date_tab[2]\
    \ == 11) and date_tab[1] <= 30 then\n        return true\n      elseif date_tab[2]\
    \ == 2 and date_tab[1] <= 29 then\n        return true\n      else \n        return\
    \ false\n      end\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cvstrlc.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_cvstrlc.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7hkzpiw.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpt7hkzpiw.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0n4y0avl.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0n4y0avl.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
