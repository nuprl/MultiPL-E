name: HumanEval_0_has_close_elements
language: lua
prompt: "-- Check if in given list of numbers, are any two numbers closer to each\
  \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\
  -- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n-- True\n\
  local function has_close_elements(numbers, threshold)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n   \
  \ lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
  \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
  \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tfor i, x in ipairs(numbers) do\n\t\tfor j, y in ipairs(numbers) do\n\
    \t\t\tif i ~= j and math.abs(x - y) < threshold then\n\t\t\t\treturn true\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn false\nend", "    for i = 1, #numbers do\n   \
    \     for j = i + 1, #numbers do\n            if abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    table.sort(numbers)\n    local last_number\
    \ = nil\n    for i, number in ipairs(numbers) do\n        if last_number then\n\
    \            if math.abs(number - last_number) < threshold then\n            \
    \    return true\n            end\n        end\n        last_number = number\n\
    \    end\n    return false\nend", "    local max_number = math.max(unpack(numbers))\n\
    \    local max_number_position = 1\n    for i, number in ipairs(numbers) do\n\
    \        if number == max_number then\n            max_number_position = i\n \
    \           break\n        end\n    end\n    local new_numbers = {}\n    for i,\
    \ number in ipairs(numbers) do\n        if i ~= max_number_position then\n   \
    \         table.insert(new_numbers, number)\n        end\n    end\n    for i,\
    \ number in ipairs(new_numbers) do\n        if math.abs(number - max_number) <\
    \ threshold then\n            return true\n        end\n    end\n    return false\n\
    end", "\tlocal n = #numbers\n\tif n < 2 then\n\t\treturn false\n\tend\n\ttable.sort(numbers)\n\
    \tfor i = 1, n - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\t\
    \t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "    local sorted = sort(numbers)\n\
    \    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "\tlocal sorted = core.tsort(numbers)\n\tfor i = 1, #sorted - 1 do\n\t\tif sorted[i\
    \ + 1] - sorted[i] < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend", "    if #numbers < 2 then\n        return false\n    end\n    local\
    \ s = table.sort(numbers)\n    for i = 1, #s - 1 do\n        if s[i + 1] - s[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    table.sort(numbers)\n    for i = 1, #numbers - 1 do\n    \
    \    if numbers[i + 1] - numbers[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend", "    for i = 1, #numbers - 1 do\n\
    \        for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "\tassert(#numbers > 1, \"at least two numbers\
    \ are needed\")\n\tlocal last = numbers[1]\n\tfor i = 2, #numbers do\n\t\tif math.abs(numbers[i]\
    \ - last) < threshold then\n\t\t\treturn true\n\t\tend\n\t\tlast = numbers[i]\n\
    \tend\n\treturn false\nend", "  local length = table.getn(numbers)\n  local has_close_elements\
    \ = false\n  for i = 1, length-1 do\n    local num1 = numbers[i]\n    for j =\
    \ i+1, length do\n      local num2 = numbers[j]\n      if math.abs(num1 - num2)\
    \ < threshold then\n        has_close_elements = true\n        break\n      end\n\
    \    end\n  end\n  return has_close_elements\nend", "    if #numbers < 2 then\n\
    \        return false\n    end\n    table.sort(numbers)\n    local prev = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] - prev < threshold then\n \
    \           return true\n        end\n        prev = numbers[i]\n    end\n   \
    \ return false\nend", "  for i, a in ipairs(numbers) do\n    for j, b in ipairs(numbers)\
    \ do\n      if i ~= j and math.abs(a - b) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "\tassert(type(numbers) == \"\
    table\")\n\tassert(type(threshold) == \"number\")\n\tfor i = 1, #numbers do\n\t\
    \tlocal a = numbers[i]\n\t\tfor j = i + 1, #numbers do\n\t\t\tlocal b = numbers[j]\n\
    \t\t\tif math.abs(a - b) < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn false\nend", "    local len = #numbers\n    if len <= 1 then\n\
    \        return false\n    end\n    table.sort(numbers)\n    for i = 1, len-1\
    \ do\n        if numbers[i+1] - numbers[i] < threshold then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  -- Sort the list of numbers\n\
    \  table.sort(numbers)\n  -- For each pair of numbers, check their distance\n\
    \  for i = 1, #numbers - 1 do\n    if numbers[i + 1] - numbers[i] < threshold\
    \ then\n      return true\n    end\n  end\n  return false\nend", "  if not threshold\
    \ then\n    error(\"threshold is required\", 2)\n  end\n  if not numbers then\n\
    \    error(\"numbers is required\", 2)\n  end\n  if #numbers < 2 then\n    return\
    \ false\n  end\n  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n\
    \      if abs(numbers[i] - numbers[j]) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    for i = 1, #numbers - 1\
    \ do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i] -\
    \ numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "  local sorted = utils.copy(numbers)\n\
    \  table.sort(sorted)\n  for idx, number in ipairs(sorted) do\n    if idx ~= #sorted\
    \ then\n      if sorted[idx + 1] - number < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    for i = 1, #numbers do\n\
    \        for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "\tlocal distances = {}\n\tfor i, a in ipairs(numbers)\
    \ do\n\t\tfor j, b in ipairs(numbers) do\n\t\t\tif i ~= j then\n\t\t\t\ttable.insert(distances,\
    \ math.abs(a - b))\n\t\t\tend\n\t\tend\n\tend\n\treturn minimum(distances) < threshold\n\
    end", "    local i, j\n    for i = 1, #numbers do\n        for j = i + 1, #numbers\
    \ do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n    \
    \            return true\n            end\n        end\n    end\n    return false\n\
    end", "    -- precondition\n    assert(type(numbers) == \"table\")\n    assert(type(threshold)\
    \ == \"number\")\n    assert(threshold > 0)", "  local closest_distance = math.huge\n\
    \  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      local distance\
    \ = math.abs(numbers[i] - numbers[j])\n      if distance < closest_distance then\n\
    \        closest_distance = distance\n      end\n    end\n  end\n  return closest_distance\
    \ < threshold\nend", "    local closeness = false\n    for i = 1, #numbers do\n\
    \        for j = 1, #numbers do\n            if i ~= j and math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                closeness = true\n         \
    \   end\n        end\n    end\n    return closeness\nend", "  if #numbers <= 1\
    \ then\n    return false\n  end\n  table.sort(numbers)\n  local prev = numbers[1]\n\
    \  for i=2,#numbers do\n    if numbers[i] - prev < threshold then\n      return\
    \ true\n    end\n    prev = numbers[i]\n  end\n  return false\nend", "    local\
    \ counter = 0\n    for _, v in ipairs(numbers) do\n        if v < threshold then\n\
    \            counter = counter + 1\n        end\n    end\n    return counter >=\
    \ 2\nend", "  local cl = numbers:clone()\n  local i = 1\n  while cl:size(1) >\
    \ 1 do\n    local x = cl[i]\n    cl[i] = nil\n    if (x - cl):abs():min() < threshold\
    \ then\n      return true\n    end\n    i = i + 1\n  end\n  return false\nend",
  "  table.sort(numbers)\n  for i=1,#numbers do\n    if math.abs(numbers[i] - numbers[i+1])\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend", " \
    \ local found_closer_pairs = false\n  -- Insertion sort on input list of numbers.\n\
    \  local sorted_numbers = numbers\n  for i = 2, #sorted_numbers do\n    local\
    \ j = i\n    while j > 1 and sorted_numbers[j] < sorted_numbers[j - 1] do\n  \
    \    sorted_numbers[j], sorted_numbers[j - 1] = sorted_numbers[j - 1], sorted_numbers[j]\n\
    \      j = j - 1\n    end\n  end\n  -- Check if there are two adjacent numbers\
    \ closer to each other than threshold.\n  for i = 2, #sorted_numbers do\n    if\
    \ math.abs(sorted_numbers[i] - sorted_numbers[i - 1]) < threshold then\n     \
    \ found_closer_pairs = true\n      break\n    end\n  end\n  return found_closer_pairs\n\
    end", "    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n      \
    \      if math.abs(numbers[i] - numbers[j]) < threshold then\n               \
    \ return true\n            end\n        end\n    end\n    return false\nend",
  "    for i, number in ipairs(numbers) do\n        for j = i + 1, #numbers do\n \
    \           if number - numbers[j] < threshold then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "    local is_closer\
    \ = false\n    local n = 1\n    while n < #numbers and not is_closer do\n    \
    \    local m = n + 1\n        while m <= #numbers and not is_closer do\n     \
    \       is_closer = math.abs(numbers[n] - numbers[m]) < threshold\n          \
    \  m = m + 1\n        end\n        n = n + 1\n    end\n    return is_closer\n\
    end", "    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n  \
    \          if math.abs(numbers[i] - numbers[j]) < threshold then\n           \
    \     return true\n            end\n        end\n    end\n    return false\nend",
  "    if #numbers < 2 then\n        return false\n    end\n    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    table.sort(numbers)\n    for i = 1, #numbers - 1 do\n        if numbers[i +\
    \ 1] - numbers[i] < threshold then\n            return true\n        end\n   \
    \ end\n    return false\nend", "  -- Please complete this function\nend", "  for\
    \ i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    for i, x in ipairs(numbers) do\n        for j, y in\
    \ ipairs(numbers) do\n            if i ~= j and math.abs(x - y) < threshold then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n   \
    \   if math.abs(numbers[i] - numbers[j]) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    local function check_pair(lhs,\
    \ rhs)\n        return lhs > rhs and lhs - rhs < threshold or rhs - lhs < threshold\n\
    \    end", "\tlocal length = #numbers\n\tfor i = 1, length do\n\t\tfor j = i +\
    \ 1, length do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold then\n\t\
    \t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "  local numbers_sorted\
    \ = sort(numbers)\n  for i = 1, #numbers_sorted - 1 do\n    if numbers_sorted[i\
    \ + 1] - numbers_sorted[i] < threshold then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local min = math.huge\n  for i = 1, #numbers do\n  \
    \  for j = i + 1, #numbers do\n      local distance = math.abs(numbers[i] - numbers[j])\n\
    \      if distance < min then\n        min = distance\n      end\n    end\n  end\n\
    \  return min < threshold\nend", "  table.sort(numbers)\n  for i = 1, #numbers\
    \ - 1 do\n    if numbers[i + 1] - numbers[i] < threshold then\n      return true\n\
    \    end\n  end\n  return false\nend", "\tassert(type(numbers) == \"table\")\n\
    \tassert(type(threshold) == \"number\")\n\tif #numbers == 0 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn false\nend", "    local index = 1\n    while index < #numbers do\n\
    \        local number = numbers[index]\n        local next_number = numbers[index\
    \ + 1]\n        local distance = math.abs(number - next_number)\n        if distance\
    \ < threshold then\n            return true\n        end\n        index = index\
    \ + 1\n    end\n    return false\nend", "  -- If we have less than two numbers,\
    \ there cannot be two elements close to each\n  -- other.\n  if (#numbers < 2)\
    \ then\n    return false\n  end", "    -- We use Lua tables as set.\n    local\
    \ set = {}\n    for _, n in ipairs(numbers) do\n        set[n] = true\n    end\n\
    \    -- We can now check if given number is in set.\n    for _, n in ipairs(numbers)\
    \ do\n        if set[n - threshold] then\n            return true\n        end\n\
    \    end\n    return false\nend", "  local last_number = numbers[1]\n  for i =\
    \ 2, #numbers do\n    if numbers[i] - last_number < threshold then\n      return\
    \ true\n    end\n    last_number = numbers[i]\n  end\n  return false\nend", " \
    \ for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  local numbers_sorted = table.sort(numbers)\n  local\
    \ i = 1\n  local size = #numbers_sorted\n  while i < size do\n    if numbers_sorted[i+1]\
    \ - numbers_sorted[i] < threshold then\n      return true\n    end\n    i = i\
    \ + 1\n  end\n  return false\nend", "  local nums = List(numbers)\n  local adjacent_pairs\
    \ = nums:zip_with_next()\n  for _, pair in adjacent_pairs:pairs() do\n    local\
    \ a, b = pair[1], pair[2]\n    if math.abs(a - b) < threshold then\n      return\
    \ true\n    end\n  end\n  return false\nend", "    local last_n = 0\n    for _,\
    \ n in ipairs(numbers) do\n        if last_n ~= 0 and math.abs(n - last_n) < threshold\
    \ then\n            return true\n        end\n        last_n = n\n    end\n  \
    \  return false\nend", "    -- numbers is sorted, so we have to check only adjacent\
    \ numbers\n    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    table.sort(numbers)\n    for i = 1, #numbers - 1 do\n    \
    \    if numbers[i + 1] - numbers[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local numbers_sorted = sort(numbers)\n\
    \    for i = 1, #numbers_sorted - 1 do\n        if abs(numbers_sorted[i] - numbers_sorted[i\
    \ + 1]) < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local sorted = copy_array(numbers)\n    table.sort(sorted)\n\
    \    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  local sorted = table.copy(numbers)\n  table.sort(sorted)\n  for i = 1, #sorted\
    \ - 1 do\n    if math.abs(sorted[i] - sorted[i + 1]) < threshold then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local no_of_elements = #numbers\n\
    \  if no_of_elements < 2 then\n    return false\n  end\n  local first_element\
    \ = numbers[1]\n  for i = 2, no_of_elements do\n    local second_element = numbers[i]\n\
    \    if second_element - first_element < threshold then\n      return true\n \
    \   end\n    first_element = second_element\n  end\n  return false\nend", "  \
    \  local min_diff = math.huge\n    for i = 1, #numbers do\n        for j = i +\
    \ 1, #numbers do\n            local diff = math.abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff then\n                min_diff = diff\n      \
    \      end\n        end\n    end\n    return min_diff < threshold\nend", "  local\
    \ has_close_elements = false\n  for _, x in ipairs(numbers) do\n    for _, y in\
    \ ipairs(numbers) do\n      if math.abs(x - y) < threshold then\n        has_close_elements\
    \ = true\n      end\n    end\n  end\n  return has_close_elements\nend", "    local\
    \ sorted = {}\n    local last = 0\n    for i = 1, #numbers do\n        local cur\
    \ = numbers[i]\n        if cur - last < threshold then\n            return true\n\
    \        end\n        last = cur\n    end\n    return false\nend", "  --print(\"\
    has_close_elements: numbers = \" .. table.concat(numbers, \",\"))\n  table.sort(numbers)\n\
    \  --print(\"has_close_elements: numbers = \" .. table.concat(numbers, \",\"))\n\
    \  local i = 1\n  while i < #numbers do\n    if numbers[i+1] - numbers[i] < threshold\
    \ then\n      return true\n    end\n    i = i + 1\n  end\n  return false\nend",
  "  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  assert(type(numbers) == \"table\")\n  assert(type(threshold)\
    \ == \"number\")\n  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n\
    \      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  local pair_exists = false\n\
    \  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        pair_exists = true\n        break\n\
    \      end\n    end\n  end\n  return pair_exists\nend", "    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "\t-- Sort the list in increasing order\n\ttable.sort(numbers)\n\t-- Iterate over\
    \ all neighboring pairs\n\tfor i = 1, #numbers - 1 do\n\t\t-- If the distance\
    \ between two neighbors is smaller than given threshold,\n\t\t-- return True,\
    \ otherwise continue to the next pair.\n\t\tif numbers[i + 1] - numbers[i] < threshold\
    \ then\n\t\t\treturn true\n\t\tend\n\tend\n\t-- If no pair was closer than threshold,\
    \ return False.\n\treturn false\nend", "    table.sort(numbers)\n    for i = 1,\
    \ #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n \
    \           return true\n        end\n    end\n    return false\nend", "    local\
    \ min_diff = math.huge\n    for i = 1, #numbers do\n        for j = i + 1, #numbers\
    \ do\n            local diff = math.abs(numbers[i] - numbers[j])\n           \
    \ if diff < min_diff then\n                min_diff = diff\n            end\n\
    \        end\n    end\n    return min_diff < threshold\nend", "\ttable.sort(numbers)\n\
    \tfor i = 1, #numbers-1 do\n\t\tif math.abs(numbers[i] - numbers[i+1]) < threshold\
    \ then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "\tlocal sorted\
    \ = table.sort(numbers)\n\tfor i = 1, table.getn(sorted) - 1 do\n\t\tif sorted[i\
    \ + 1] - sorted[i] < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend", "  local i = 1\n  local j = 1\n  for i = 1, #numbers do\n    for\
    \ j = i + 1, #numbers do\n      if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            if\
    \ math.abs(numbers[i] - numbers[j]) < threshold then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "  local m = 1\n\
    \  while numbers[m + 1] ~= nil do\n    if math.abs(numbers[m] - numbers[m + 1])\
    \ < threshold then\n      return true\n    end\n    m = m + 1\n  end\n  return\
    \ false\nend", "    local n = #numbers\n    if n == 0 then\n        return false\n\
    \    end\n    local d = {}\n    for i = 1, n do\n        d[i] = math.abs(numbers[i]\
    \ - numbers[1])\n    end\n    for i = 2, n do\n        if d[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend", "    if\
    \ #numbers < 2 then\n        return false\n    end\n    for i, a in ipairs(numbers)\
    \ do\n        for j, b in ipairs(numbers) do\n            if i ~= j and math.abs(a\
    \ - b) < threshold then\n                return true\n            end\n      \
    \  end\n    end\n    return false\nend", "    local min_distance = math.huge\n\
    \    for _, a in ipairs(numbers) do\n        for _, b in ipairs(numbers) do\n\
    \            if a ~= b then\n                local distance = math.abs(a - b)\n\
    \                if distance < min_distance then\n                    min_distance\
    \ = distance\n                end\n            end\n        end\n    end\n   \
    \ return min_distance < threshold\nend", "\t-- sort numbers ascending\n\ttable.sort(numbers)\n\
    \tfor i = 1, #numbers - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "    local has_close_elements\
    \ = false\n    local numbers_length = #numbers\n    local current_number\n   \
    \ local next_number\n    local distance", "  for i, x in ipairs(numbers) do\n\
    \    for j, y in ipairs(numbers) do\n      if i ~= j and math.abs(x - y) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    local sorted = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n       \
    \ if sorted[i + 1] - sorted[i] < threshold then\n            return true\n   \
    \     end\n    end\n    return false\nend", "  for i = 1, #numbers do\n    for\
    \ j = i + 1, #numbers do\n      if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    local ordered = table.sort(numbers)\n    for i = 1, #ordered - 1 do\n     \
    \   if ordered[i + 1] - ordered[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local prev_number = math.huge\n\
    \    for i, curr_number in ipairs(numbers) do\n        if math.abs(curr_number\
    \ - prev_number) < threshold then\n            return true\n        end\n    \
    \    prev_number = curr_number\n    end\n    return false\nend", "    for i =\
    \ 1, #numbers do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    for i = 1, #numbers do\n \
    \       for j = i + 1, #numbers do\n            if (numbers[i] - numbers[j]) ^\
    \ 2 < threshold ^ 2 then\n                return true\n            end\n     \
    \   end\n    end\n    return false\nend", "    table.sort(numbers)\n    local\
    \ last = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] - last\
    \ < threshold then\n            return true\n        end\n        last = numbers[i]\n\
    \    end\n    return false\nend", "  local sorted = table.sort(numbers)\n  for\
    \ i=1,#sorted-1 do\n    if math.abs(sorted[i] - sorted[i+1]) < threshold then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local i, number1,\
    \ number2\n    for i, number1 in ipairs(numbers) do\n        if i + 1 <= #numbers\
    \ then\n            for j, number2 in ipairs(numbers) do\n                if j\
    \ > i and math.abs(number1 - number2) < threshold then\n                    return\
    \ true\n                end\n            end\n        end\n    end\n    return\
    \ false\nend", "    local len = #numbers\n    for i = 1, len - 1 do\n        for\
    \ j = i + 1, len do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "  for i = 1, #numbers do\n    for j = i + 1, #numbers\
    \ do\n      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "    local numbers_sorted\
    \ = table.copy(numbers)\n    table.sort(numbers_sorted)\n    for i, a in ipairs(numbers_sorted)\
    \ do\n        local b = numbers_sorted[i + 1]\n        if b then\n           \
    \ if math.abs(a - b) < threshold then\n                return true\n         \
    \   end\n        end\n    end\n    return false\nend", "    -- this function is\
    \ called very frequently so it should be as fast as possible\n    -- and not allocate\
    \ much memory\n    -- sort list of numbers ascending\n    -- this could be done\
    \ in loop below, but it will be slower\n    sort(numbers)\n    -- iterate over\
    \ list\n    for i = 1, #numbers - 1 do\n        -- check if distance between two\
    \ numbers is below threshold\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  local function is_close(l, r)\n    return math.abs(l - r) < threshold\n  end",
  "\tlocal min_diff = math.huge\n\tfor i = 1, #numbers do\n\t\tfor j = i + 1, #numbers\
    \ do\n\t\t\tmin_diff = math.min(min_diff, math.abs(numbers[i] - numbers[j]))\n\
    \t\tend\n\tend\n\treturn min_diff < threshold\nend", "    local n = #numbers\n\
    \    local sorted = {}\n    for i = 1, n do\n        table.insert(sorted, numbers[i])\n\
    \    end\n    table.sort(sorted)\n    for i = 1, n - 1 do\n        if sorted[i\
    \ + 1] - sorted[i] < threshold then\n            return true\n        end\n  \
    \  end\n    return false\nend", "  for i, v in ipairs(numbers) do\n    for j,\
    \ w in ipairs(numbers) do\n      if i ~= j and math.abs(v - w) < threshold then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  local\
    \ ret = false\n  for i, val in ipairs(numbers) do\n    for j, val2 in ipairs(numbers)\
    \ do\n      if i ~= j and math.abs(val - val2) < threshold then\n        ret =\
    \ true\n        break\n      end\n    end\n  end\n  return ret\nend", "\ttable.sort(numbers)\n\
    \tlocal i = 1\n\tlocal j = 2\n\twhile j <= #numbers do\n\t\tif numbers[j] - numbers[i]\
    \ < threshold then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\
    \tend\n\treturn false\nend", "  table.sort(numbers)\n  local prev_number = numbers[1]\n\
    \  for _, current_number in ipairs(numbers) do\n    if (current_number - prev_number)\
    \ < threshold then\n      return true\n    end\n    prev_number = current_number\n\
    \  end\n  return false\nend", "    local last_num = nil\n    local got_close =\
    \ false\n    for _, num in ipairs(numbers) do\n        if last_num and math.abs(num\
    \ - last_num) < threshold then\n            got_close = true\n            break\n\
    \        end\n        last_num = num\n    end\n    return got_close\nend", " \
    \   local number = #numbers\n    for index = 1, number do\n        for index2\
    \ = index + 1, number do\n            if math.abs(numbers[index] - numbers[index2])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    local sorted = table.sort(numbers)\n  \
    \  for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local min_diff = math.huge\n    for i, number1 in ipairs(numbers) do\n    \
    \    for j, number2 in ipairs(numbers) do\n            if i ~= j then\n      \
    \          local diff = math.abs(number1 - number2)\n                if diff <\
    \ min_diff then\n                    min_diff = diff\n                end\n  \
    \          end\n        end\n    end\n    return min_diff < threshold\nend", " \
    \   for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n         \
    \   if math.abs(numbers[i] - numbers[j]) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    local\
    \ sorted = deepcopy(numbers)\n    table.sort(sorted)\n    for i = 1, #sorted -\
    \ 1 do\n        if sorted[i + 1] - sorted[i] < threshold then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  if #numbers < 2 then\n\
    \    return false\n  end\n  for i, number in ipairs(numbers) do\n    for j, other_number\
    \ in ipairs(numbers) do\n      if i ~= j and math.abs(number - other_number) <\
    \ threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n  \
    \          if math.abs(numbers[i] - numbers[j]) < threshold then\n           \
    \     return true\n            end\n        end\n    end\n    return false\nend",
  "  assert(threshold > 0)\n  local numbers_sorted = sequence.sort(numbers)\n  local\
    \ numbers_len = #numbers_sorted\n  for i = 1, numbers_len - 1 do\n    local difference\
    \ = numbers_sorted[i + 1] - numbers_sorted[i]\n    if difference < threshold then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local sorted =\
    \ sort(numbers)\n    local previous = sorted[1]\n    for i=2,#sorted do\n    \
    \    if (sorted[i] - previous) < threshold then\n            return true\n   \
    \     end\n        previous = sorted[i]\n    end\n    return false\nend", "  assert(type(numbers)\
    \ == \"table\", \"Expected 'numbers' to be a table, got: \" .. type(numbers))\n\
    \  assert(type(threshold) == \"number\", \"Expected 'threshold' to be a number,\
    \ got: \" .. type(threshold))", "\tassert(numbers ~= nil)\n\tassert(type(numbers)\
    \ == \"table\")\n\tassert(threshold ~= nil)\n\tassert(type(threshold) == \"number\"\
    )", "    local numbers_size = #numbers\n    for i = 1, numbers_size do\n     \
    \   for j = i + 1, numbers_size do\n            if numbers[i] and numbers[j] and\
    \ abs(numbers[i] - numbers[j]) < threshold then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "  local i = 1\n\
    \  local j = 2\n  local n = #numbers\n  local difference = 0\n  while j <= n do\n\
    \    difference = numbers[j] - numbers[i]\n    if math.abs(difference) < threshold\
    \ then\n      return true\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return\
    \ false\nend", "    if #numbers == 0 then\n        return false\n    end\n   \
    \ table.sort(numbers)\n    for i = 1, #numbers - 1 do\n        if numbers[i +\
    \ 1] - numbers[i] < threshold then\n            return true\n        end\n   \
    \ end\n    return false\nend", "    for i = 1,#numbers do\n        for j = i+1,#numbers\
    \ do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n    \
    \            return true\n            end\n        end\n    end\n    return false\n\
    end", "  local closest_diff = 1000000\n  local len = #numbers\n  for i = 1, len\
    \ do\n    for j = i + 1, len do\n      local diff = math.abs(numbers[i] - numbers[j])\n\
    \      if diff < closest_diff then\n        closest_diff = diff\n      end\n \
    \   end\n  end\n  return closest_diff < threshold\nend", "    local sorted = sort(numbers)\n\
    \    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  local elements = sort(numbers)\n  local prev_element = elements[1]\n  for _,\
    \ element in ipairs(elements) do\n    if element - prev_element < threshold then\n\
    \      return true\n    end\n    prev_element = element\n  end\n  return false\n\
    end", "\tif #numbers == 0 then\n\t\treturn false\n\tend\n\tfor i = 1, #numbers\
    \ - 1 do\n\t\tfor j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end", "    -- Numbers are assumed to be sorted.\n    -- Algorithm is O(n).\n \
    \   for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  if #numbers <= 1 then\n    return false\n  end\n  table.sort(numbers)\n  for\
    \ i = 1, #numbers - 1 do\n    if numbers[i + 1] - numbers[i] < threshold then\n\
    \      return true\n    end\n  end\n  return false\nend", '    local min_distance
    = 100000.0', "    local length = #numbers\n    if length < 2 then\n        return\
    \ false\n    end\n    table.sort(numbers)\n    for i = 1, length-1 do\n      \
    \  if numbers[i+1] - numbers[i] < threshold then\n            return true\n  \
    \      end\n    end\n    return false\nend", "    for i,x in ipairs(numbers) do\n\
    \        for j,y in ipairs(numbers) do\n            if i ~= j and math.abs(x -\
    \ y) < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    local has_pair = false\n    local len =\
    \ #numbers\n    for i = 1, len do\n        for j = i + 1, len do\n           \
    \ if math.abs(numbers[i] - numbers[j]) < threshold then\n                has_pair\
    \ = true\n                break\n            end\n        end\n    end\n    return\
    \ has_pair\nend", "    table.sort(numbers)\n    for i = 1, #numbers - 1 do\n \
    \       if numbers[i + 1] - numbers[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend", "\tfor i = 1, #numbers - 1 do\n\
    \t\tfor j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "    local sorted = Array.sort(numbers)\n    for i = 2, #sorted do\n        if sorted[i]\
    \ - sorted[i - 1] < threshold then\n            return true\n        end\n   \
    \ end\n    return false\nend", "    -- create sorted table of numbers\n    local\
    \ t = {}\n    for k, v in pairs(numbers) do\n        t[k] = v\n    end\n    table.sort(t)",
  "    if #numbers <= 1 then\n        return false\n    end", "    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    table.sort(numbers)\n    for i=1,#numbers-1 do\n        if numbers[i+1] - numbers[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local n = #numbers\n    local nn = n-1\n    local sum\n  \
    \  for i = 1, nn do\n        local n1 = numbers[i]\n        local n2 = numbers[i+1]\n\
    \        sum = n1 + n2\n        if sum ~= 0 and math.abs(n1-n2)/sum < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "\tlocal has_close_elements = false\n\tfor i = 1, #numbers\
    \ - 1 do\n\t\tlocal current_number = numbers[i]\n\t\tfor j = i + 1, #numbers do\n\
    \t\t\tlocal next_number = numbers[j]\n\t\t\tlocal difference = math.abs(current_number\
    \ - next_number)\n\t\t\tif difference < threshold then\n\t\t\t\thas_close_elements\
    \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn has_close_elements\n\
    end", "    local length = #numbers\n    local i = 1\n    while i < length do\n\
    \        local j = i + 1\n        while j <= length do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \            j = j + 1\n        end\n        i = i + 1\n    end\n    return false\n\
    end", "    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n      \
    \      if math.abs(numbers[i] - numbers[j]) < threshold then\n               \
    \ return true\n            end\n        end\n    end\n    return false\nend",
  "    local result = false\n    for i, num1 in ipairs(numbers) do\n        for j,\
    \ num2 in ipairs(numbers) do\n            if i ~= j and math.abs(num1 - num2)\
    \ < threshold then\n                result = true\n                break\n   \
    \         end\n        end\n    end\n    return result\nend", "\tlocal sorted\
    \ = sorted_numbers(numbers)\n\tfor i = 1, #sorted - 1 do\n\t\tif sorted[i + 1]\
    \ - sorted[i] < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end", "    local result = false\n    for i = 1, #numbers - 1 do\n        for j\
    \ = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                result = true\n                break\n            end\n\
    \        end\n    end\n    return result\nend", "  local numbers_length = #numbers\n\
    \  if numbers_length < 2 then\n    return false\n  end\n  local numbers_sorted\
    \ = table_clone(numbers)\n  table_sort(numbers_sorted)\n  for i = 1, numbers_length\
    \ - 1 do\n    if numbers_sorted[i + 1] - numbers_sorted[i] < threshold then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local n = #numbers\n\
    \    table.sort(numbers)\n    for i = 1, n - 1 do\n        if numbers[i + 1] -\
    \ numbers[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend", "    if #numbers <= 1 then\n        return false\n  \
    \  end", "  local length = #numbers\n  if length < 2 then\n    return false\n\
    \  end\n  local previous = numbers[1]\n  for i = 2, length do\n    local current\
    \ = numbers[i]\n    if math.abs(current - previous) < threshold then\n      return\
    \ true\n    end\n    previous = current\n  end\n  return false\nend", "\tlocal\
    \ n = #numbers\n\tif n <= 1 then\n\t\treturn false\n\tend\n\tfor i = 1, n - 1\
    \ do\n\t\tfor j = i + 1, n do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "    -- Sort given list of numbers\n    table.sort(numbers)\n    -- Go through list\
    \ of numbers\n    for i = 1, #numbers - 1 do\n        -- Compare two numbers\n\
    \        if math.abs(numbers[i + 1] - numbers[i]) < threshold then\n         \
    \   return true\n        end\n    end\n    return false\nend", "  local numbers_count\
    \ = #numbers\n  if numbers_count == 0 then\n    return false\n  end\n  if numbers_count\
    \ == 1 then\n    return false\n  end\n  for i=1,numbers_count do\n    for j=i+1,numbers_count\
    \ do\n      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  for i, v in ipairs(numbers)\
    \ do\n    for j, w in ipairs(numbers) do\n      if j ~= i and math.abs(v - w)\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    local numbers_sorted = table.sort(numbers)\n    for i = 1, #numbers_sorted\
    \ - 1 do\n        if math.abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local sorted = sort(numbers)\n    local last_value = head(sorted)\n    local\
    \ last_index = 1\n    local current_index = 2\n    while current_index <= #sorted\
    \ do\n        local current_value = sorted[current_index]\n        if current_value\
    \ - last_value < threshold then\n            return true\n        end\n      \
    \  last_value = current_value\n        last_index = current_index\n        current_index\
    \ = current_index + 1\n    end\n    return false\nend", "  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    if #numbers < 2 then\n        return false\n    end\n    local sorted\
    \ = sort(numbers)\n    for i = 1, #sorted - 1 do\n        if abs(sorted[i] - sorted[i\
    \ + 1]) < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend", "  local length = #numbers\n  if length <= 1 then\n    return false\n\
    \  end\n  table.sort(numbers)\n  for i = 1, length - 1 do\n    if numbers[i +\
    \ 1] - numbers[i] < threshold then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local size = #numbers\n    if size < 2 then\n        return\
    \ false\n    end\n    table.sort(numbers)\n    for i = 1, size - 1 do\n      \
    \  if numbers[i + 1] - numbers[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local n = #numbers\n    for\
    \ i = 1, n do\n        for j = i + 1, n do\n            if (numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    for i = 1, #numbers - 1 do\n        if\
    \ numbers[i + 1] - numbers[i] < threshold then\n            return true\n    \
    \    end\n    end\n    return false\nend", "    for i, x in ipairs(numbers) do\n\
    \        for j, y in ipairs(numbers) do\n            if i ~= j and math.abs(x\
    \ - y) < threshold then\n                return true\n            end\n      \
    \  end\n    end\n    return false\nend", "  if (#numbers <= 1) then\n    return\
    \ false\n  end\n  for i, v in ipairs(numbers) do\n    for j = i + 1, #numbers\
    \ do\n      if (abs(v - numbers[j]) < threshold) then\n        return true\n \
    \     end\n    end\n  end\n  return false\nend", "    local min_diff = math.huge\n\
    \    for i,v in ipairs(numbers) do\n        local j = #numbers\n        while\
    \ j > i do\n            local diff = math.abs(v - numbers[j])\n            if\
    \ diff < min_diff then\n                min_diff = diff\n            end\n   \
    \         j = j - 1\n        end\n    end\n    return min_diff < threshold\nend",
  "    if #numbers == 0 then\n        return false\n    end\n    if #numbers == 1\
    \ then\n        return false\n    end\n    if #numbers == 2 then\n        return\
    \ math.abs(numbers[1] - numbers[2]) < threshold\n    end\n    local numbers_sorted\
    \ = {}\n    for _, number in ipairs(numbers) do\n        table.insert(numbers_sorted,\
    \ number)\n    end\n    table.sort(numbers_sorted)\n    for i, number in ipairs(numbers_sorted)\
    \ do\n        if i > 1 then\n            if math.abs(number - numbers_sorted[i\
    \ - 1]) < threshold then\n                return true\n            end\n     \
    \   end\n    end\n    return false\nend", "    local sizes = {}\n    local size\n\
    \    local index", "\tlocal prev_num = 0\n\tfor _, n in ipairs(numbers) do\n\t\
    \tif math.abs(n - prev_num) < threshold then\n\t\t\treturn true\n\t\tend\n\t\t\
    prev_num = n\n\tend\n\treturn false\nend", "\ttable.sort(numbers)\n\tfor i = 1,\
    \ #numbers-1 do\n\t\tif numbers[i+1] - numbers[i] < threshold then\n\t\t\treturn\
    \ true\n\t\tend\n\tend\n\treturn false\nend", "    numbers = table.sort(numbers)\n\
    \    local res = false\n    for i = 1, #numbers - 1 do\n        local diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < threshold then\n            res = true\n\
    \            break\n        end\n    end\n    return res\nend", "    -- sort numbers\n\
    \    table.sort(numbers)\n    -- for each number\n    for i, number in ipairs(numbers)\
    \ do\n        -- if number is last element, return true\n        if i == #numbers\
    \ then\n            return true\n        end\n        -- check if next number\
    \ is closer to current than given threshold\n        if numbers[i + 1] - number\
    \ < threshold then\n            return true\n        end\n    end\n    -- if no\
    \ close numbers were found, return false\n    return false\nend", "  table.sort(numbers)\n\
    \  for i = 1, #numbers - 1 do\n    if numbers[i + 1] - numbers[i] < threshold\
    \ then\n      return true\n    end\n  end\n  return false\nend", "    local last_number\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if math.abs(numbers[i] - last_number)\
    \ < threshold then\n            return true\n        end\n        last_number\
    \ = numbers[i]\n    end\n    return false\nend", "  local sorted = luapdf.util.sort(numbers)\n\
    \  for i=1, #sorted-1 do\n    if math.abs(sorted[i+1] - sorted[i]) < threshold\
    \ then\n      return true\n    end\n  end\n  return false\nend", "    for k, n\
    \ in ipairs(numbers) do\n        for i = k + 1, #numbers do\n            if math.abs(n\
    \ - numbers[i]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "\tfor i = 1, #numbers do\n\t\t\
    for j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "  if #numbers < 2 then\n    return false\n  end\n  for i = 1, #numbers - 1 do\n\
    \    for j = i + 1, #numbers do\n      if math.abs(numbers[i] - numbers[j]) <\
    \ threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  table.sort(numbers)\n  local last = numbers[1]\n  for i=2,#numbers do\n\
    \    if numbers[i] - last < threshold then\n      return true\n    end\n    last\
    \ = numbers[i]\n  end\n  return false\nend", "  local i, j, ni, nj = 1, 2, #numbers,\
    \ #numbers - 1\n  local has_close = false\n  while i <= ni and not has_close do\n\
    \    j = i + 1\n    while j <= nj and not has_close do\n      has_close = numbers[i]\
    \ - numbers[j] < threshold\n      j = j + 1\n    end\n    i = i + 1\n  end\n \
    \ return has_close\nend", "  if (#numbers < 2) then\n    return false\n  end\n\
    \  table.sort(numbers)\n  for i = 1, #numbers - 1 do\n    if (numbers[i + 1] -\
    \ numbers[i] < threshold) then\n      return true\n    end\n  end\n  return false\n\
    end", "    local len = #numbers\n    if len < 2 then\n        return false\n \
    \   end\n    table.sort(numbers)\n    for i = 1, len - 1 do\n        if math.abs(numbers[i\
    \ + 1] - numbers[i]) < threshold then\n            return true\n        end\n\
    \    end\n    return false\nend", "    table.sort(numbers)\n    for i = 1, #numbers-1\
    \ do\n        if math.abs(numbers[i] - numbers[i+1]) < threshold then\n      \
    \      return true\n        end\n    end\n    return false\nend", "\tlocal len\
    \ = #numbers\n\tfor i = 1, len - 1 do\n\t\tfor j = i + 1, len do\n\t\t\tif numbers[i]\
    \ > numbers[j] then\n\t\t\t\tlocal diff = numbers[i] - numbers[j]\n\t\t\t\tif\
    \ diff < threshold then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\telse\n\t\t\t\
    \tlocal diff = numbers[j] - numbers[i]\n\t\t\t\tif diff < threshold then\n\t\t\
    \t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "  local function _has_close_elements(left, right)\n    if left >= right then\n\
    \      return false\n    else\n      return math.abs(numbers[left] - numbers[right])\
    \ < threshold or\n             _has_close_elements(left, right - 1) or\n     \
    \        _has_close_elements(left + 1, right)\n    end\n  end\n  return _has_close_elements(1,\
    \ #numbers)\nend", "    local function a_is_close_to_b(a, b)\n        local distance\
    \ = math.abs(a - b)\n        return distance < threshold\n    end", "  local n\
    \ = #numbers\n  for i = 1, n - 1 do\n    for j = i + 1, n do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "\tlocal sorted = sort(numbers)\n\tfor i = 1, #sorted -\
    \ 1 do\n\t\tif sorted[i + 1] - sorted[i] < threshold then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend", "    local last_number\n    for _, number\
    \ in ipairs(numbers) do\n        if last_number and math.abs(number - last_number)\
    \ < threshold then\n            return true\n        end\n        last_number\
    \ = number\n    end\n    return false\nend", "\ttable.sort(numbers)\n\tfor i =\
    \ 1, #numbers - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\t\t\
    \treturn true\n\t\tend\n\tend\n\treturn false\nend", "    local length = #numbers\n\
    \    if length < 2 then\n        return false\n    end\n    table.sort(numbers)\n\
    \    for i = 1, length - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  local is_close = false\n  for i = 1, #numbers do\n    for j = i + 1, #numbers\
    \ do\n      local dist = math.abs(numbers[i] - numbers[j])\n      if dist < threshold\
    \ then\n        is_close = true\n        break\n      end\n    end\n  end\n  return\
    \ is_close\nend", "  local min_distance = math.huge\n  local distance\n  for i\
    \ = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      distance = math.abs(numbers[i]\
    \ - numbers[j])\n      if distance < min_distance then\n        min_distance =\
    \ distance\n      end\n    end\n  end\n  return min_distance < threshold\nend",
  "  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    for i = 1, #numbers - 1 do\n        if (numbers[i\
    \ + 1] - numbers[i]) < threshold then\n            return true\n        end\n\
    \    end\n    return false\nend", "    local bigger = 0.0\n    for _, num in ipairs(numbers)\
    \ do\n        if num > bigger then\n            bigger = num\n        end\n  \
    \  end\n    local size = bigger / threshold\n    local groups = {}\n    for i\
    \ = 1, size do\n        groups[i] = {}\n    end\n    for _, num in ipairs(numbers)\
    \ do\n        local group = math.floor(num / threshold) + 1\n        if #groups[group]\
    \ == 0 then\n            groups[group] = { num }\n        else\n            for\
    \ _, previous in ipairs(groups[group]) do\n                if math.abs(num - previous)\
    \ < threshold then\n                    return true\n                end\n   \
    \         end\n            table.insert(groups[group], num)\n        end\n   \
    \ end\n    return false\nend", "    local n = #numbers\n    for i = 1, n - 1 do\n\
    \        for j = i + 1, n do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  if #numbers < 2 then\n    return false\n\
    \  end\n  local numbers_asc = quicksort(numbers)\n  for i = 1, #numbers_asc -\
    \ 1 do\n    if numbers_asc[i + 1] - numbers_asc[i] < threshold then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local n = #numbers\n  if n ==\
    \ 0 then\n    return false\n  end\n  local max_d = 0\n  local i_max = 1\n  local\
    \ j_max = 1\n  for i = 1, n do\n    for j = i + 1, n do\n      local d = numbers[i]\
    \ - numbers[j]\n      if math.abs(d) > max_d then\n        max_d = math.abs(d)\n\
    \        i_max = i\n        j_max = j\n      end\n    end\n  end\n  return max_d\
    \ < threshold\nend", "  local has_close_elements = false\n  for i, number in ipairs(numbers)\
    \ do\n    for j, other_number in ipairs(numbers) do\n      if i < j and math.abs(number\
    \ - other_number) < threshold then\n        has_close_elements = true\n      end\n\
    \    end\n  end\n  return has_close_elements\nend", "    for i = 1, #numbers do\n\
    \        for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  local i = 1\n  while i <= #numbers do\n \
    \   local j = i + 1\n    while j <= #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n      j = j\
    \ + 1\n    end\n    i = i + 1\n  end\n  return false\nend", "\tfor i = 1, #numbers\
    \ do\n\t\tfor j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
