name: HumanEval_140_fix_spaces
language: lua
prompt: "-- Given a string text, replace all spaces in it with underscores, \n-- and\
  \ if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
  \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"Example\
  \ 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\n-- fix_spaces(\"\
  \ Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
  \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
  \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
  \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
  \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tif not text then return end\n\tlocal out = string.gsub(text, \" \
    \ +\", \"-\")\n\treturn string.gsub(out, \" \", \"_\")\nend", "    if text then\n\
    \        text = string.gsub(text, \"  \", \" - \")\n        text = string.gsub(text,\
    \ \" \", \"_\")\n    end\n    return text\nend", "  return text:gsub(\" +\", function(s)\
    \ return (s:len() > 2) and \"-\" or \"_\" end)\nend", "    return text:gsub(\"\
    \ {2,}\", \"-\"):gsub(\" \", \"_\")\nend", "    return nil\nend", "    return\
    \ text:gsub(\"%s+\", \"-\"):gsub(\" \", \"_\")\nend", "    return string.gsub(text,\
    \ \" {2,}\", \"-\"):gsub(\" \", \"_\")\nend", "\treturn (text:gsub(\"%s+\", \"\
    -\")):gsub(\" \", \"_\")\nend", "  local str = text:gsub(\"%s+\", \"-\")\n  return\
    \ str:gsub(\" \", \"_\")\nend", "    local result = \"\"\n    local space_cnt\
    \ = 0\n    for c in text:gmatch(\".\") do\n        if c == \" \" then\n      \
    \      space_cnt = space_cnt + 1\n            if space_cnt < 3 then\n        \
    \        result = result .. \"_\"\n            else\n                result =\
    \ result .. \"-\"\n            end\n        else\n            space_cnt = 0\n\
    \            result = result .. c\n        end\n    end\n    return result\nend",
  "  local count = text:gsub(\"  \",\"-\")\n  count = count:gsub(\" \",\"_\")\n  return\
    \ count\nend", "    local out = text:gsub(\" {2,}\", \"-\")\n    return out:gsub(\"\
    \ \", \"_\")\nend", "\tlocal count = 0\n\ttext = string.gsub(text, \" \", function()\n\
    \t\tcount = count + 1\n\t\tif count > 2 then\n\t\t\treturn \"-\"\n\t\telse\n\t\
    \t\treturn \"_\"\n\t\tend\n\tend)\n\treturn text\nend", "\treturn string.gsub(text,\
    \ \" {2,}\", function (a) return a:len() == 2 and \"_\" or \"-\" end)\nend", "\t\
    text = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text, \" +\", \"\
    -\")\n\treturn text\nend", "    return text:gsub(\" +\", \" \"):gsub(\" \", \"\
    _\"):gsub(\"  \", \"-\"):gsub(\"_ \", \"-\")\nend", "    return (string.gsub(text,\
    \ \" +\", function(spaces)\n        if string.len(spaces) > 2 then\n         \
    \   return \"-\"\n        else\n            return \"_\"\n        end\n    end))\n\
    end", "  return (text:gsub(\"%s\", \"_\"):gsub(\"%s%s+\", \"-\"))\nend", "   \
    \ local pattern = \"[%s%c]{2,}\"\n    text = string.gsub(text, pattern, \"-\"\
    )\n    return string.gsub(text, \"%s\", \"_\")\nend", "    return text:gsub(\"\
    (%s)\", \"_\"):gsub(\"(%s)(%s)(%s)\", \"-\")\nend", "    return (text:gsub(\"\
    \ +\", \"_\"))\nend", "  return string.gsub(text,\"(%s+)\",\"-\")\nend", "\tlocal\
    \ text = text:gsub(\" +\", \"_\")\n\ttext = text:gsub(\"_+\", \"-\")\n\treturn\
    \ text\nend", "    if text:find(\"  \") then\n        text = text:gsub(\"  \"\
    , \"-\")\n    end\n    text = text:gsub(\" \", \"_\")\n    return text\nend",
  "  if not text then return end\n  text = string.gsub(text, \" +\", \" \")\n  text\
    \ = string.gsub(text, \" \", \"_\")\n  text = string.gsub(text, \"_-_\", \"-\"\
    )\n  return text\nend", "\treturn (text:gsub(\" {2,}\", \"-\"):gsub(\" \", \"\
    _\"))\nend", "  text = text:gsub(\" \",\"_\")\n  text = text:gsub(\"%s+\",\"-\"\
    )\n  return text\nend", "    return string.gsub(text, \"^%s*\", \"\")\n    :gsub(\"\
    %s+\", \"_\")\n    :gsub(\"(%s)%s+\", \"%1-\")\nend", "  return text:gsub(\"%s+\"\
    , \"%1\" == \" \" and \"_\" or \"-\")\nend", "    return text:gsub(\"%s+\", function(s)\n\
    \        if #s > 2 then\n            return \"-\"\n        else\n            return\
    \ \"_\"\n        end\n    end)\nend", "  return string.gsub(text,\"%s\",\"_\"\
    )\nend", "\treturn string.gsub(text, \"[ ]+\", function(s)\n\t\tif #s > 2 then\
    \ return \"-\" end\n\t\treturn \"_\"\n\tend)\nend", "    return string.gsub(text,\
    \ ' ', '_')\n        :gsub('_+', '-')\nend", "  local output = \"\"\n  local prev\
    \ = \"\"\n  for c in string.gmatch(text, \".\") do\n    if c == \" \" then\n \
    \     if prev == \" \" then\n        output = output .. \"-\"\n      else\n  \
    \      output = output .. \"_\"\n      end\n    else\n      output = output ..\
    \ c\n    end\n    prev = c\n  end\n  return output\nend", "  return string.gsub(text,\
    \ \" {2,}\", \"-\")\nend", "    return gsub(text, \"[ ]+\", function(s)\n    \
    \    return \"-\"\n    end)\nend", "    text = text:gsub(\" \", \"_\")\n    text\
    \ = text:gsub(\"_+\", \"-\")\n    return text\nend", "    local new_text = text:gsub(\"\
    \ +\", function(spaces)\n        local n = spaces:len()\n        if n > 2 then\n\
    \            return \"-\"\n        else\n            return \"_\"\n        end\n\
    \    end)\n    return new_text\nend", "  text = text:gsub(\"%s%s+\", \"-\"):gsub(\"\
    %s\", \"_\")\n  return text\nend", "    local text = string.gsub(text, '  ', '\
    \ - ')\n    return string.gsub(text, ' ', '_')\nend", "  return text:gsub(\" \"\
    , \"_\"):gsub(\"%s+\", \"-\")\nend", "    return string.gsub(text, \" {2,}\",\
    \ \"-\")\n    :gsub(\" \", \"_\")\nend", "    local text_tmp = string.gsub(text,\
    \ \"^%s+\", \"\")\n    text_tmp = string.gsub(text_tmp, \"%s+$\", \"\")\n    text_tmp\
    \ = string.gsub(text_tmp, \" {2,}\", \" \")\n    text_tmp = string.gsub(text_tmp,\
    \ \" \", \"_\")\n    text_tmp = string.gsub(text_tmp, \" \", \"-\")\n    return\
    \ text_tmp\nend", "\tlocal function fix_spaces_aux(text)\n\t\tlocal ntext,n\n\t\
    \tntext,n = text:gsub(\"  \",\" \")\n\t\tif n > 0 then\n\t\t\treturn fix_spaces_aux(ntext)\n\
    \t\telse\n\t\t\treturn ntext\n\t\tend\n\tend\n\t\n\tlocal ntext,n\n\tntext,n =\
    \ fix_spaces_aux(text):gsub(\" \",\"_\")\n\tntext,n = ntext:gsub(\"  \",\"-\"\
    )\n\treturn ntext\nend", "    if not text then return text end\n    return text:gsub(\"\
    \  +\", \"-\"):gsub(\" \", \"_\")\nend", "    text = gsub(text, \" {2,}\", \"\
    \ \")\n    text = gsub(text, \" \", \"_\")\n    text = gsub(text, \" {2,}\", \"\
    -\")\n    return text\nend", "    return text:gsub(\"  +\", \"-\"):gsub(\" \"\
    , \"_\")\nend", "  text = string.gsub(text, \"^ \", \"_\")\n  text = string.gsub(text,\
    \ \" $\", \"_\")\n  text = string.gsub(text, \" \", \"_\")\n  text = string.gsub(text,\
    \ \"%-\", \"-\")\n  text = string.gsub(text, \"__+\", \"_\")\n  text = string.gsub(text,\
    \ \"_+\", \"-\")\n  return text\nend", "    local result = string.gsub(text, \"\
    \ \", \"_\")\n    result = string.gsub(result, \"_+\", \"-\")\n    return result\n\
    end", "\ttext = text:gsub(\" \", \"_\")\n\ttext = text:gsub(\"_+\", \"-\")\n\t\
    return text\nend", "  return text:gsub(\"%s+\", function(space)\n    if string.len(space)\
    \ > 2 then return \"-\" else return \"_\" end\n  end)\nend", "\tif text == nil\
    \ then\n\t\treturn ''\n\tend\n\treturn string.gsub(text, ' {2,}', '-'):gsub('\
    \ ', '_')\nend", "    return (text:gsub(\" +\", function(s) return (#s == 1 and\
    \ \"_\") or \"-\" end))\nend", "    return text:gsub(\" +\", function(s) \n  \
    \      if #s > 2 then\n            return \"-\"\n        else\n            return\
    \ \"_\"\n        end\n    end)\nend", "  return (string.gsub(text, \" ? ? ? ?\"\
    , function(s) \n    if s == \" \" then return \"_\"\n    else return \"-\"\n \
    \   end\n  end))\nend", "\ttext = text:gsub(\"%s+\", \"_\")\n\ttext = text:gsub(\"\
    _+\", \"-\")\n\treturn text\nend", "    return string.gsub(text, '%s', '_')\n\
    end", "\tlocal s = string.gsub(text, \" +\", function(spaces)\n\t\tif #spaces\
    \ > 2 then\n\t\t\treturn \"-\";\n\t\telse\n\t\t\treturn \"_\";\n\t\tend\n\tend)\n\
    \treturn s;\nend", "\tlocal text, _ = string.gsub(text, \"([^%s])%s+([^%s])\"\
    , \"%1_%2\")\n\tlocal text, _ = string.gsub(text, \"([^%s])%s+([^%s])\", \"%1_%2\"\
    )\n\tlocal text, _ = string.gsub(text
  "  local has_two_spaces = false\n  return utils.string_gsub(text,\"%s+\",function(s)\n\
    \    if #s == 2 then has_two_spaces = true end\n    return has_two_spaces and\
    \ \"-\" or \"_\"\n  end)\nend", "    local text = text:gsub(\"^%s+\", \"\")\n\
    \    text = text:gsub(\"%s%s+\", \"-\")\n    text = text:gsub(\"%s\", \"_\")\n\
    \    return text\nend", "  return text:gsub(\"%s+\", function(s)\n    if #s ==\
    \ 1 then\n      return \"_\"\n    else\n      return \"-\"\n    end\n  end)\n\
    end", "    local new_text = string.gsub(text, \" \", \"_\")\n    new_text = string.gsub(new_text,\
    \ \"_+\", \"_\")\n    new_text = string.gsub(new_text, \"^_+\", \"\")\n    new_text\
    \ = string.gsub(new_text, \"_+$\", \"\")\n    return new_text\nend", "  return\
    \ string.gsub(text,\"  \",\"-\")\n  :gsub(\" \",\"_\")\nend", "  return string.gsub(text,\
    \ \" {2,}\", \"-\")\nend", "\treturn text:gsub(\"%s{2,}\", \"-\")\n\t\t:gsub(\"\
    %s\", \"_\")\nend", "  local out = \"\"\n  local last = \"\"\n  for char in string.gmatch(text,\
    \ \".\") do\n    if char == \" \" then\n      if last == \" \" then\n        out\
    \ = out .. \"-\"\n      else\n        out = out .. \"_\"\n      end\n    else\n\
    \      out = out .. char\n    end\n    last = char\n  end\n  return out\nend",
  "    return text:gsub(\"%s%s+\", function(str)\n        if str:find(\" \") then\n\
    \            return \"-\"\n        else\n            return \"_\"\n        end\n\
    \    end)\nend", "    return text:gsub(\" +\", function(c)\n        if #c > 2\
    \ then\n            return \"-\"\n        else\n            return \"_\"\n   \
    \     end\n    end)\nend", "    local fixed = string.gsub(text, \" \", \"_\")\n\
    \    fixed = string.gsub(fixed, \"_+\", \"-\")\n    return fixed\nend", "    return\
    \ string.gsub(text, \"%s\", function(s)\n        if string.find(s, \"  \") then\n\
    \            return \"-\"\n        else\n            return \"_\"\n        end\n\
    \    end)\nend", "    return string.gsub(text, \" +\", function(s)\n        if\
    \ #s > 2 then\n            return \"-\"\n        else\n            return \"_\"\
    \n        end\n    end)\nend", "    text = string.gsub(text, \"  \", \" \")\n\
    \    text = string.gsub(text, \"  \", \" \")\n    text = string.gsub(text, \"\
    \ \", \"_\")\n    text = string.gsub(text, \" \", \"-\")\n    return text\nend",
  "    text = string.gsub(text, \"%s+\", \" \")\n    text = string.gsub(text, \" \"\
    , \"_\")\n    text = string.gsub(text, \"_+\", \"-\")\n    return text\nend",
  "    return string.gsub(text, \" {2,}\", \"-\")\n        :gsub(\" \", \"_\")\nend",
  "    return string.gsub(text, \"%s+\", function(s) \n        if string.len(s) >\
    \ 2 then\n            return \"-\"\n        else\n            return \"_\"\n \
    \       end\n    end)\nend", "  local res = string.gsub(text, \" \", \"_\")\n\
    \  res = string.gsub(res, \"  \", \"-\")\n  return res\nend", "    local text\
    \ = string.gsub(text, \" \", \"_\")\n    local text = string.gsub(text, \" \"\
    , \"_\")\n    return text\nend", "  return text:gsub(\" +\", function(s)\n   \
    \ if #s > 2 then\n      return \"-\"\n    else\n      return \"_\"\n    end\n\
    \  end)\nend", "    return text:gsub(\"%s{2,}\", \"-\"):gsub(\"%s\", \"_\")\n\
    end", "    text = gsub(text, \" +\", \" \")\n    text = gsub(text, \" \", \"_\"\
    )\n    text = gsub(text, \"_{2,}\", \"-\")\n    return text\nend", "  return text:gsub(\"\
    [ ]+\", function(x)\n    if x:len() > 2 then return \"-\" else return \"_\" end\n\
    \  end)\nend", "    local new_text = string.gsub(text, \" {2,}\", \"-\")\n   \
    \ new_text = string.gsub(new_text, \" \", \"_\")\n    return new_text\nend", " \
    \ return text:gsub(\"%s+\", \"%1\"):gsub(\"%s\", \"_\")\nend", "  if text == nil\
    \ then return nil end\n  text = text:gsub(\" {2,}\", \"-\")\n  text = text:gsub(\"\
    \ \", \"_\")\n  return text\nend", "\treturn string.gsub(text,\"%s+\",\"-\")\n\
    end", "    local text = string.gsub(text, \"  \", \"\")\n    local text = string.gsub(text,\
    \ \" \", \"_\")\n    local text = string.gsub(text, \"%s%s\", \"-\")\n    return\
    \ text\nend", "  return text:gsub(\"  +\", \"-\"):gsub(\" \", \"_\")\nend", " \
    \   return text:gsub(\"%s\", \"_\"):gsub(\"_%s+\", \"-\")\nend", "  local new_text\
    \ = nil\n  -- write you code here\n  new_text = gsub(text, \" +\", \"_\")\n  new_text\
    \ = gsub(new_text, \"_+\", \"-\")\n  return new_text\nend", "\treturn text:gsub(\"\
    %s+\", function(str)\n\t\tif str:len() > 2 then\n\t\t\treturn \"-\"\n\t\telse\n\
    \t\t\treturn \"_\"\n\t\tend\n\tend)\nend", "    if not text then\n        return\
    \ nil\n    end\n    return string.gsub(text, \" \", \"_\")\nend", "    if type(text)\
    \ ~= \"string\" then return text end\n    return (string.gsub(text, \"[ ]{2,}\"\
    , \"-\"))\nend", "    if text == nil then\n        return \"\"\n    end\n    local\
    \ result = string.gsub(text, \" \", \"_\")\n    result = string.gsub(result, \"\
    __+\", \"-\")\n    return result\nend", "  return string.gsub(text, \" {2,}\"\
    , \"-\")\n    :gsub(\" \", \"_\")\nend", "    return text:gsub(\" \", \"_\"):gsub(\"\
    (%s+)\", \"-\")\nend", "    return text:gsub(\"%s+\", function(spaces)\n     \
    \   if #spaces > 2 then return \"-\" else return \"_\" end\n    end)\nend", " \
    \   local text_new = string.gsub(text, \" \", \"_\")\n    text_new = string.gsub(text_new,\
    \ \"_+\", \"-\")\n    return text_new\nend", "  return string.gsub(text, '  +',\
    \ '-')\nend", "    return text:gsub(\"%s+\", \"-\"):gsub(\" \", \"_\")\nend",
  "    local txt = string.gsub(text, \" \", \"_\")\n    return string.gsub(txt, \"\
    %s+\", \"-\")\nend", "  text = text:gsub(\" +\", function(s) \n    if #s > 2 then\n\
    \      return \"-\"\n    else\n      return \"_\"\n    end\n  end)\n  return text\n\
    end", "\tif not text then return end\n\treturn text:gsub(\" +\", function(s)\n\
    \t\treturn s:len() > 2 and \"-\" or \"_\"\n\tend)\nend", "    return string.gsub(text,\
    \ \" +\", function(s)\n        return (#s>2) and \"-\" or \"_\"\n    end)\nend",
  "    if text == nil then\n        return nil\n    end\n    local result = \"\"\n\
    \    local spaces = false\n    for i = 1, string.len(text) do\n        local char\
    \ = string.sub(text, i, i)\n        if char == \" \" then\n            if spaces\
    \ then\n                char = \"-\"\n            else\n                char =\
    \ \"_\"\n                spaces = true\n            end\n        else\n      \
    \      spaces = false\n        end\n        result = result .. char\n    end\n\
    \    return result\nend", "    return text:gsub(\"  +\", \"-\")\n        :gsub(\"\
    \ \", \"_\")\nend", "    return string.gsub(text, \"  +\", \" \"):gsub(\" \",\
    \ \"_\")\nend", "\tlocal ret = text:gsub(\"  +\", \"-\"):gsub(\" \", \"_\")\n\t\
    return ret\nend", "\treturn string.gsub(text, \"(%s+)\", function(s)\n\t\tif string.len(s)\
    \ > 2 then\n\t\t\treturn \"-\";\n\t\telse\n\t\t\treturn \"_\";\n\t\tend\n\tend)\n\
    end", "  return text:gsub(\"%s\", \"_\"):gsub(\"[ ]+\", \"-\")\nend", "    return\
    \ (text:gsub(\"%s%s+\", \"-\")):gsub(\"%s\", \"_\")\nend", "    return string.gsub(text,\
    \ \" +\", \"-\")\nend", "\tlocal function replace(str)\n\t\tif str == \"  \" then\
    \ return \"-\" else return \"_\" end\n\tend\n\treturn (text:gsub(\"(%s+)\", replace))\n\
    end", "\treturn text:gsub(\" \", \"_\"):gsub(\"%s%s+\", \"-\")\nend", "    return\
    \ string.gsub(text, \"  \", \"-\")\n    :gsub(\" \", \"_\")\nend", "    return\
    \ string.gsub(text, \"  +\", \"-\")\n        :gsub(\" \", \"_\")\nend", "  local\
    \ result = string.gsub(text, \"  \", \" \")\n  result = string.gsub(result, \"\
    \ \", \"_\")\n  result = string.gsub(result, \" \", \"-\")\n  return result\n\
    end", "\tlocal str = text\n\tstr = str:gsub(\"( )+\", function(sub) return sub:gsub(\"\
    \ \",\"-\") end)\n\tstr = str:gsub(\" \", \"_\")\n\treturn str\nend", "    return\
    \ (text:gsub(\"%s+\",function(w) return (w:len() > 2) and \"-\" or \"_\" end))\n\
    end", "\treturn text:gsub(\"%s\", \"_\"):gsub(\"%s%s%s\", \"-\"):gsub(\"^%s\"\
    , \"_\")\nend", "    return text:gsub(\"%s+\", function(str)\n        if #str\
    \ == 1 then\n            return \"_\"\n        else\n            return \"-\"\n\
    \        end\n    end)\nend", "  local result = string.gsub(text,\" \",\"_\")\n\
    \  result = string.gsub(result,\"  \",\"-\")\n  return result\nend", "    if text:match(\"\
    %s\") then\n        return fix_spaces(text:gsub(\"  \", \"-\"):gsub(\" \", \"\
    _\"))\n    else\n        return text\n    end\nend", "\tif not text then return\
    \ nil end\n\treturn gsub(text, \" +\", \" \"):gsub(\" +\", \"_\"):gsub(\" -\"\
    , \"-\")\nend", "  text = text:gsub(\" \", \"_\")\n  text = text:gsub(\"_+\",\
    \ \" \")\n  text = text:gsub(\" \", \"-\")\n  return text\nend", "    return gsub(text,\
    \ \" +\", \"-\")\nend", "    return (text:gsub(\"%s+\", \"-\"):gsub(\"^%s\", \"\
    _\"):gsub(\"%s\", \"_\"))\nend", "    return string.gsub(text, \"[ ]+\", function(s)\
    \ \n        if string.len(s) > 2 then\n            return \"-\"\n        else\n\
    \            return \"_\"\n        end\n    end)\nend", "  return (text:gsub(\"\
    \ +\", function(w)\n    if #w > 2 then\n      return \"-\"\n    else\n      return\
    \ \"_\"\n    end\n  end))\nend", "    return (string.gsub(text,\"%s+\",\"_\"))\n\
    end\n</code>\nIs there a better way to write this?", "    return (text:gsub(\"\
    %s+\", function(s)\n            if #s > 2 then return \"-\" else return \"_\"\
    \ end\n        end))\nend", "  if not text or text:match(\"^%s*$\") then\n   \
    \ return \"\"\n  end\n  local ret = text:gsub(\"%s+\", \"_\")\n  return ret:gsub(\"\
    _+\", \"-\")\nend", "\ttext = text:gsub(\" +\", \"_\")\n\ttext = text:gsub(\"\
    _+\", \"-\")\n\treturn text\nend", "    text = string.gsub(text, \" \", \"_\"\
    )\n    text = string.gsub(text, \"  \", \"-\")\n    text = string.gsub(text, \"\
    \   \", \"-\")\n    return text\nend", "\treturn text:gsub(\"  +\", \"-\"):gsub(\"\
    \ \", \"_\")\nend", "  return text:gsub(\"%s+\", function(s)\n    if s:len() >\
    \ 2 then\n      return \"-\"\n    else\n      return \"_\"\n    end\n  end)\n\
    end", "    local new_text = \"\"\n    local space_count = 0\n    for i = 1, #text\
    \ do\n        local character = text:sub(i, i)\n        if character == \" \"\
    \ then\n            space_count = space_count + 1\n            if space_count\
    \ > 2 then\n                new_text = new_text .. \"-\"\n            else\n \
    \               new_text = new_text .. \"_\"\n            end\n        else\n\
    \            space_count = 0\n            new_text = new_text .. character\n \
    \       end\n    end\n    return new_text\nend", "\tlocal count = 1\n\tlocal all\
    \ = {}\n\t\n\tfor word in text:gmatch(\"%S+\") do\n\t\tif count >= 3 then\n\t\t\
    \tall[#all + 1] = \"-\"\n\t\telse\n\t\t\tall[#all + 1] = \"_\"\n\t\tend\n\t\t\
    all[#all + 1] = word\n\t\tcount = count + 1\n\tend\n\t\n\treturn table.concat(all,\
    \ \"\")\nend", "    return text:gsub(\"%s+\", function(a) return (#a > 2) and\
    \ \"-\" or \"_\" end)\nend", "\ttext = text:gsub(\"^%s+\", \"\")\n\ttext = text:gsub(\"\
    %s+$\", \"\")\n\ttext = text:gsub(\"%s+\", \"_\")\n\ttext = text:gsub(\"_+\",\
    \ \"_\")\n\ttext = text:gsub(\"%s+\", \"-\")\n\treturn text\nend", "    text =\
    \ string.gsub(text, \" +\", \"__\")\n    text = string.gsub(text, \"__\", \"_\"\
    )\n    text = string.gsub(text, \"__\", \"-\")\n    return text\nend", "\treturn\
    \ string.gsub(text, \" {2,}\", \"-\")\nend", "    return text:gsub(\" +\", \"\
    \ \"):gsub(\" +\", \"_\"):gsub(\"_+\", \"-\")\nend", "  return (string.gsub(text,\
    \ \" +\", function(s)\n    if #s == 1 then\n      return \"_\"\n    else\n   \
    \   return \"-\"\n    end\n  end))\nend", "\tlocal result = string.gsub(text,\
    \ \" +\", \"-\")\n\treturn string.gsub(result, \" \", \"_\")\nend", "    return\
    \ string.gsub(text, \" {2,}\", \"-\")\nend", "    text = string.gsub(text, \"\
    \ {2,}\", \" \")\n    text = string.gsub(text, \" \", \"_\")\n    text = string.gsub(text,\
    \ \" {2,}\", \"-\")\n    return text\nend", "    local t = text:gsub(\" \", \"\
    _\")\n    return t:gsub(\"%s%s+\", \"-\")\nend", "    return text:gsub(\"%s+\"\
    , function(s) return (#s > 2) and \"_\" or \"-\"; end):gsub(\"%s\", \"_\");\n\
    end", "    if not text then return end\n    text = string.gsub(text, \" +\", \"\
    \ \")\n    text = string.gsub(text, \" \", \"_\")\n    text = string.gsub(text,\
    \ \"_-_\", \"-\")\n    return text\nend", "\tif text == nil then\n\t\treturn nil\n\
    \tend\n\ttext = text:gsub(\"%s\", \"_\")\n\ttext = text:gsub(\"%_%_%_+\", \"-\"\
    )\n\treturn text\nend", "  return string.gsub(text,\"([ ]+)\",\" \"):gsub(\"%s\"\
    ,\"_\"):gsub(\"([_]+)\",\"-\")\nend", "  if text == nil then return nil end\n\
    \  if text == \"\" then return \"\" end\n  local res = string.gsub(text, \" +\"\
    , \"_\")\n  res = string.gsub(res, \"([^ ])_\", \"%1-\")\n  return res\nend",
  "  return string.gsub(text, \"%s+\", \"-\")\nend", "    return string.gsub(text,\
    \ \" +\", function(s)\n        if #s > 2 then\n            return \"-\"\n    \
    \    else\n            return \"_\"\n        end\n    end)\nend", "    return\
    \ text:gsub(\"%s+\", function(s)\n        if s:find(\"%s%s%s\") then\n       \
    \     return \"-\";\n        else\n            return \"_\";\n        end\n  \
    \  end)\nend", "    return text:gsub(\"%s+\", function(s)\n        if string.len(s)\
    \ == 1 then return \"_\"\n        else return \"-\" end\n    end)\nend", "  local\
    \ newText = \"\"\n  for i = 1, #text do\n    local c = text:sub(i,i)\n    if c\
    \ == \" \" then\n      if i > 1 and text:sub(i-1,i-1) == \" \" then\n        newText\
    \ = newText .. \"-\"\n      else\n        newText = newText .. \"_\"\n      end\n\
    \    else\n      newText = newText .. c\n    end\n  end\n  return newText\nend",
  "\ttext = text:gsub(\"%s+\", \" \")\n\ttext = text:gsub(\" \", \"_\")\n\ttext =\
    \ text:gsub(\"_+\", \"-\")\n\treturn text\nend", "  return text:gsub(\"%s%s+\"\
    , \"-\")\n        :gsub(\"%s\", \"_\")\nend", "  local ret = string.gsub(text,\
    \ \" {2,}\", \"-\")\n  return string.gsub(ret, \" \", \"_\")\nend", "  return\
    \ string.gsub(text,\"%s+\",\"_\")\nend", "    local result = text:gsub(\" +\"\
    , function(s) \n        if #s > 2 then\n            return \"-\"\n        else\n\
    \            return \"_\"\n        end\n    end)\n    return result\nend", " \
    \ return (text:gsub(\"^ \", \"_\"):gsub(\" {2,}\", \"-\")):gsub(\" \", \"_\")\n\
    end", "    return text:gsub(\"%s+\", function(s)\n        return (#s == 1) and\
    \ \"_\" or \"-\"\n    end)\nend", "    return text:gsub(\"%s\", \"_\"):gsub(\"\
    %s%s%s+\", \"-\")\nend", "  return text:gsub(\"%s+\", function(w)\n    if #w ==\
    \ 1 then return \"_\" end\n    return \"-\"\n  end)\nend", "    return string.gsub(text,\
    \ \" {2,}\", \"-\")\n        :gsub(\" \", \"_\")\nend", "  return text:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+\", \"_\"):gsub(\"%s%s+\", \"-\")\nend", "  return string.gsub(text,\
    \ \" +\", function(s)\n    if string.len(s) > 2 then\n      return \"-\"\n   \
    \ else\n      return \"_\"\n    end\n  end)\nend", "    text = text:gsub(\" +\"\
    , \"_\")\n    text = text:gsub(\"_+\", \"-\")\n    text = text:gsub(\"(^_*|_*$)\"\
    , \"\")\n    return text\nend", "    return text:gsub(\"%s+\", function(s) \n\
    \        if #s > 2 then\n            return \"-\";\n        else\n           \
    \ return \"_\";\n        end\n    end)\nend", "    return (text:gsub(\" +\", function(match)\n\
    \        if match:len() == 1 then return \"_\" end\n        return \"-\"\n   \
    \ end))\nend", "    return text:gsub(\"%s+\",function(s) return (s:len() > 2)\
    \ and \"_\" or \"-\" end)\nend", "    return text:gsub(\"%s+\", function(s)\n\
    \        return #s > 2 and '-' or '_'\n    end)\nend", "  return string.gsub(text,\
    \ \"  +\", \"-\"):gsub(\" \", \"_\")\nend", "    if type(text) ~= \"string\" then\
    \ return text end\n    return (text:gsub(\"%s+\", function(char)\n        if #char\
    \ > 2 then return \"-\" end\n        return \"_\"\n    end))\nend", "    local\
    \ s = string.gsub(text,\"%s+\",\"_\")\n    return string.gsub(s,\"_\",\"-\")\n\
    end", "\tlocal len = text:len()\n\tlocal spaces = 0\n\tlocal first = 1\n\tlocal\
    \ rest = text\n\twhile len > 0 do\n\t\tlocal ch = rest:sub(1,1)\n\t\tif ch ==\
    \ \" \" then\n\t\t\tspaces = spaces + 1\n\t\t\tif spaces > 2 then\n\t\t\t\trest\
    \ = \"-\" .. rest:sub(2)\n\t\t\t\ttext = text:sub(1,first) .. rest\n\t\t\t\tlen\
    \ = text:len()\n\t\t\tend\n\t\telse\n\t\t\tspaces = 0\n\t\t\tfirst = first + 1\n\
    \t\tend\n\t\trest = rest:sub(2)\n\t\tlen = len - 1\n\tend\n\ttext = text:gsub(\"\
    \ \",\"_\")\n\treturn text\nend", "\treturn string.gsub(text, \"^%s+\", \"\")\n\
    \t\t:gsub(\"%s+\", \"_\")\n\t\t:gsub(\"%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-",
  "\treturn (text:gsub(\"%s%s+\", \"-\")):gsub(\"%s\", \"_\")\nend", "\tif not text\
    \ then return text end\n\treturn string.gsub(text, \"([%s]+)\", \"%1\"):gsub(\"\
    \ \", \"_\"):gsub(\"([%s]+)\", \"-\")\nend", "    return (text:gsub(\"%s%s+\"\
    , \"-\")):gsub(\"%s\", \"_\")\nend", "\tif not text then return end\n\ttext =\
    \ string.gsub(text, \"%s+\", \"-\")\n\ttext = string.gsub(text, \"^%s+\", \"_\"\
    )\n\ttext = string.gsub(text, \"%s+$\", \"_\")\n\ttext = string.gsub(text, \"\
    %s\", \"_\")\n\treturn text\nend", "  return string.gsub(text, '  +', '-'):gsub('\
    \ ', '_')\nend", "\treturn string.gsub(text, \"    \", \"  \"):gsub(\"  \", \"\
    \ \"):gsub(\" \", \"_\"):gsub(\"_ \", \"-\")\nend", "  return (string.gsub(text,\"\
    \ +\",\"-\"))\nend", "  return text:gsub(\"%s\", \"_\"):gsub(\"%s%s+\", \"-\"\
    )\nend", "\treturn  text:gsub(\" {2,}\", \"-\") :gsub(\" \", \"_\")\nend", " \
    \   local result = text:gsub(\"  +\", \"-\")\n    return result:gsub(\" \", \"\
    _\")\nend", "    local first, _, result = text:find(\"%s*%S\")\n    if not first\
    \ then\n        return \"\"\n    end\n    for start, _, word in text:gmatch(\"\
    (%s*)(%S+)\") do\n        result = result .. start:gsub(\"%s+\", \"-\") .. word\n\
    \    end\n    return result\nend", "  return string.gsub(text,\"[ ](%s*)\",\"\
    _%1\"):gsub(\"(_%s+)\",\"-\"):gsub(\"(%s+)_\",\"-\")\nend", "\ttext = string.gsub(text,\
    \ \" +\", \"_\")\n\ttext = string.gsub(text, \"_-_\", \"-\")\n\treturn text\n\
    end", "    return text:gsub(\"%s\", \"_\"):gsub(\"%s%s%s+\", \"-\")\nend", " \
    \   local unspaced_text = string.gsub(text, \" \", \"_\")\n    local spaced_text\
    \ = string.gsub(unspaced_text, \"__+\", \"-\")\n    return spaced_text\nend",
  "\tif not text or text == \"\" then return text end\n\tlocal result = \"\"\n\tlocal\
    \ prev = text:sub(1,1)\n\tlocal current\n\tfor i = 2, text:len() do\n\t\tcurrent\
    \ = text:sub(i,i)\n\t\tif current == \" \" then\n\t\t\tif prev == \" \" then\n\
    \t\t\t\tresult = result .. \"-\"\n\t\t\telse\n\t\t\t\tresult = result .. \"_\"\
    \n\t\t\tend\n\t\telse\n\t\t\tresult = result .. current\n\t\tend\n\t\tprev = current\n\
    \tend\n\treturn result\nend", "\ttext = string.gsub(text, \"  +\", \"-\")\n\t\
    text = string.gsub(text, \" \", \"_\")\n\treturn text\nend", "    return text:gsub(\"\
    %s%s+\", \"-\")\nend", "\treturn (text:gsub(\"  +\", \"-\"):gsub(\" \", \"_\"\
    ))\nend", "    return string.gsub(text, \"[ ]+\", function(space)\n        if\
    \ space:len() > 2 then\n            return \"-\"\n        else\n            return\
    \ \"_\"\n        end\n    end)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
