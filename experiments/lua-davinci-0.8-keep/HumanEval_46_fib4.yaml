name: HumanEval_46_fib4
language: lua
prompt: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) -> 2\n\
  -- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  -- Please write a function to efficiently compute the n-th element of the fib4 number\
  \ sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n-- 8\n\
  -- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
  \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
  \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: [end, "    return nil\nend", "\tlocal a, b, c, d = 0, 0, 2, 0\n\tlocal\
    \ x = n - 2\n\twhile x > 0 do\n\t\td = d + a + b + c\n\t\ta = b\n\t\tb = c\n\t\
    \tc = d\n\t\tx = x - 1\n\tend\n\treturn d\nend", "\tlocal a, b, c, d = 0, 0, 2,\
    \ 0\n\tlocal i = 4\n\twhile i <= n do\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\
    \t\ti = i + 1\n\tend\n\treturn a + b + c + d\nend", "    -- implementing fib4\
    \ recursively is obvious\n    -- but then we have to compute fib4(n-4) for n >=\
    \ 4\n    -- which means we have to compute fib4(n-5) for n >= 5, etc.\n    --\n\
    \    -- we can do this using memoization but that's cheating\n    --\n    -- and\
    \ it's only cheating because we want to use a recursive formula\n    --\n    --\
    \ if instead of recursion we used iteration\n    -- which is basically the same\
    \ as memoization in this case\n    -- but nicer\n    -- then we could use the\
    \ same formula\n    --\n    -- the trick is to have an array that stores the fibonacci\
    \ numbers\n    -- in the order we'll need them\n    -- \n    -- and to update\
    \ the array as we move through the sequence\n    --\n    -- the array will be\
    \ four elements long, one for each of the \n    -- fibonacci numbers we'll need\n\
    \    -- \n    -- we can't compute the fibonacci numbers directly,\n    -- instead\
    \ we have to compute fib4, which is the sum of the first four fibonacci numbers\n\
    \    -- \n    -- but that's fine, because in the base case, fib4 is just fibonacci,\n\
    \    -- and then after that all we need to do is sum the four numbers\n    --\
    \ in the array\n    --\n    -- the array is going to have to be four elements\
    \ long, because\n    -- we need the first four fibonacci numbers, we can't get\
    \ by with just three\n    --\n    -- we can use the first fibonacci number as\
    \ an index into the array\n    -- \n    -- so what this algorithm does is:\n \
    \   -- for every n in 0..4, it computes fibonacci(n) and stores it in index n\n\
    \    -- for every n in 5.., it computes fibonacci(n) and stores it in index n\
    \ mod 4\n    --\n    -- this gives us a way to compute fibonacci(n) without recursion\n\
    \    -- and without using an array the size of n\n    --\n    -- if we want to\
    \ compute fib4(n) instead, all we have to do is add up the four fibonacci numbers\n\
    \    -- \n    -- if we want to compute fib4(n)", "    local f1, f2, f3, f4 = 0,\
    \ 0, 2, 0\n    for i = 4, n do\n        f1, f2, f3, f4 = f2, f3, f4, f1 + f2 +\
    \ f3 + f4\n    end\n    return f4\nend", "  local a, b, c, d = 0, 0, 2, 0\n  if\
    \ n == 0 then return a end\n  if n == 1 then return b end\n  if n == 2 then return\
    \ c end\n  if n == 3 then return d end\n  for i = 4, n do\n    a, b, c, d = b,\
    \ c, d, a + b + c + d\n  end\n  return d\nend", "    local a, b, c, d = 0, 0,\
    \ 2, 0\n    for i = 1, n do\n        a, b, c, d = b, c, d, a + b + c + d\n   \
    \ end\n    return a\nend", "    local tmp = 0\n    local a, b, c, d = 0, 0, 2,\
    \ 0\n    for i = 2, n do\n        tmp = a + b + c + d\n        a, b, c, d = b,\
    \ c, d, tmp\n    end\n    return tmp\nend", "    local a, b, c, d = 0, 0, 2, 0\n\
    \    if n <= 0 then\n        return a\n    elseif n == 1 then\n        return\
    \ b\n    elseif n == 2 then\n        return c\n    elseif n == 3 then\n      \
    \  return d\n    end\n    for i = 4, n do\n        a, b, c, d = b, c, d, a + b\
    \ + c + d\n    end\n    return d\nend", "    local f4 = {\n        0,\n      \
    \  0,\n        2,\n        0\n    }\n    local r = 0\n    for i = 4, n do\n  \
    \      r = f4[1] + f4[2] + f4[3] + f4[4]\n        f4[1] = f4[2]\n        f4[2]\
    \ = f4[3]\n        f4[3] = f4[4]\n        f4[4] = r\n    end\n    return r\nend\n\
    fib4(5)\nfib4(6)\nfib4(7)", "    -- your code here\nend", "    if n == 0 then\n\
    \        return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2\
    \ then\n        return 2\n    elseif n == 3 then\n        return 0\n    else\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\nend",
  "  -- TODO: implement this function\nend", "  -- TODO: implement function\nend",
  "    local a, b, c, d = 0, 0, 2, 0\n    for i = 2, n do\n        a, b, c, d = b,\
    \ c, d, a + b + c + d\n    end\n    return d\nend", "    -- code here\nend", " \
    \   return 0\nend", "  local n0, n1, n2, n3 = 0, 0, 2, 0\n  if n == 0 then return\
    \ n0 end\n  if n == 1 then return n1 end\n  if n == 2 then return n2 end\n  if\
    \ n == 3 then return n3 end\n  local i = 4\n  while i <= n do\n    local temp\
    \ = n3\n    n3 = n2 + n1 + n0 + n3\n    n0 = n1\n    n1 = n2\n    n2 = temp\n\
    \    i = i + 1\n  end\n  return n3\nend", "    local a, b, c, d = 0, 0, 2, 0\n\
    \    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n \
    \   return d\nend", "  assert(n > 0)\n  local a, b, c, d = 0, 0, 2, 0\n  for i\
    \ = 4, n do\n    local f = a + b + c + d\n    a, b, c, d = b, c, d, f\n  end\n\
    \  return d\nend", "  local a, b, c, d = 0, 0, 2, 0\n  for i = 0, n-1 do\n   \
    \ a, b, c, d = b, c, d, a + b + c + d\n  end\n  return a\nend", "  local p1, p2,\
    \ p3, p4 = 0, 0, 2, 0\n  local sum = 0\n  if n == 0 then return 0 end\n  if n\
    \ == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n == 3 then return\
    \ 0 end\n  for i = 4, n do\n    sum = p1 + p2 + p3 + p4\n    p1 = p2\n    p2 =\
    \ p3\n    p3 = p4\n    p4 = sum\n  end\n  return sum\nend", "  if (n == 0) then\n\
    \    return 0\n  elseif (n == 1) then\n    return 0\n  elseif (n == 2) then\n\
    \    return 2\n  elseif (n == 3) then\n    return 0\n  else\n    local fib4_4\
    \ = 0\n    local fib4_3 = 0\n    local fib4_2 = 2\n    local fib4_1 = 0\n    local\
    \ result = 0\n    for i = 1, n - 4 do\n      result = fib4_1 + fib4_2 + fib4_3\
    \ + fib4_4\n      fib4_4 = fib4_3\n      fib4_3 = fib4_2\n      fib4_2 = fib4_1\n\
    \      fib4_1 = result\n    end\n    return result\n  end\nend", "\tif n == 0\
    \ then\n\t\treturn 0\n\telseif n == 1 then\n\t\treturn 0\n\telseif n == 2 then\n\
    \t\treturn 2\n\telseif n == 3 then\n\t\treturn 0\n\telse\n\t\tlocal a = 0\n\t\t\
    local b = 0\n\t\tlocal c = 2\n\t\tlocal d = 0\n\t\tfor i = 4, n do\n\t\t\td =\
    \ a + b + c\n\t\t\ta = b\n\t\t\tb = c\n\t\t\tc = d\n\t\tend\n\t\treturn d\n\t\
    end\nend", "  -- Write your code here\nend", "\tlocal i, j, k, l, m = 0, 0, 2,\
    \ 0, 0\n\tfor a = 1, n do\n\t\tm = i + j + k + l\n\t\ti, j, k, l = j, k, l, m\n\
    \tend\n\treturn m\nend", "    if n == 0 then\n        return 0\n    elseif n ==\
    \ 1 then\n        return 0\n    elseif n == 2 then\n        return 2\n    elseif\
    \ n == 3 then\n        return 0\n    else\n        local t1 = 0\n        local\
    \ t2 = 0\n        local t3 = 2\n        local t4 = 0\n        local tn = 0\n \
    \       for i = 4, n do\n            tn = t1 + t2 + t3 + t4\n            t1 =\
    \ t2\n            t2 = t3\n            t3 = t4\n            t4 = tn\n        end\n\
    \        return tn\n    end\nend", "    local a, b, c, d = 0, 0, 2, 0\n    if\
    \ n < 2 then\n        return a\n    elseif n == 2 then\n        return c\n   \
    \ end\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n\
    \    return d\nend", "  local a, b, c, d = 0, 0, 2, 0\n  for i = 3, n do\n   \
    \ a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend", "    local x0,\
    \ x1, x2, x3 = 0, 0, 2, 0\n    for i = 4, n do\n        x0, x1, x2, x3 = x1, x2,\
    \ x3, x0 + x1 + x2 + x3\n    end\n    return x3\nend", "  if n == 0 then return\
    \ 0 end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n\
    \ == 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 3, n - 1\
    \ do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return a + b + c + d\n\
    end", "    local a = 0\n    local b = 0\n    local c = 2\n    local d = 0\n  \
    \  if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 2\n    elseif n == 3 then\n        return\
    \ 0\n    else\n        for i = 4, n do\n            d = b + c + a\n          \
    \  a = b\n            b = c\n            c = d\n        end\n        return d\n\
    \    end\nend", "  return 0\nend", "    if n == 0 then\n        return 0\n   \
    \ elseif n == 1 then\n        return 0\n    elseif n == 2 then\n        return\
    \ 2\n    elseif n == 3 then\n        return 0\n    else\n        return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\nend", "\t--Your code here\n\t\
    return 0\nend", "  assert(n >= 0, \"fib4() argument must be non-negative\")\n\
    \  return n < 2 and n or n < 3 and 2 or n < 4 and 0 or\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "    local rtn = 0\n    for i = 1, n do\n   \
    \     rtn = rtn + i\n    end\n    return rtn\nend", "    local a, b, c, d = 0,\
    \ 0, 2, 0\n    local i = 3\n    while i <= n do\n        d = a + b + c + d\n \
    \       a = b\n        b = c\n        c = d\n        i = i + 1\n    end\n    return\
    \ d\nend", "  local s = {0, 0, 2, 0}\n  for i = 4, n, 1 do\n    s[i % 4 + 1] =\
    \ s[i % 4] + s[(i - 1) % 4] + s[(i - 2) % 4] + s[(i - 3) % 4]\n  end\n  return\
    \ s[n % 4 + 1]\nend", "\tlocal a, b, c, d = 0, 0, 2, 0\n\twhile n > 3 do\n\t\t\
    a, b, c, d = b, c, d, a + b + c + d\n\t\tn = n - 1\n\tend\n\treturn d\nend", " \
    \   local a, b, c, d = 0, 0, 2, 0\n    for i = 4, n do\n        a, b, c, d = b,\
    \ c, d, a + b + c + d\n    end\n    return d\nend", "    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a = 0\n        local b = 0\n        local c = 2\n        local d = 0\n\
    \        for i = 4, n do\n            d = a + b + c\n            a = b\n     \
    \       b = c\n            c = d\n        end\n        return d\n    end\nend",
  "\t-- TODO: please write your code here.\n\treturn 0\nend", "\t-- YOUR CODE HERE\n\
    \treturn 0\nend", "  if n < 0 then return nil end\n  local f = {0, 0, 2, 0}\n\
    \  for i = 4, n do\n    f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4]\n  end\n  return\
    \ f[n]\nend", "    local a, b, c, d = 0, 0, 2, 0\n    if n < 4 then\n        return\
    \ n < 2 and n or 2\n    end\n    for i = 4, n do\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    end\n    return d\nend", "    if n <= 2 then\n        return\
    \ 2\n    elseif n == 3 then\n        return 0\n    else\n        local x = 2\n\
    \        local y = 2\n        local z = 0\n        local w = 0\n        for i\
    \ = 4, n do\n            w = x + y + z\n            x = y\n            y = z\n\
    \            z = w\n        end\n        return w\n    end\nend", end, "    local\
    \ result = 0\n    local num1 = 0\n    local num2 = 0\n    local num3 = 0\n   \
    \ local num4 = 0\n    local i = 0\n    while i < n do\n        if i == 0 then\n\
    \            result = 0\n        elseif i == 1 then\n            result = 0\n\
    \        elseif i == 2 then\n            result = 2\n        elseif i == 3 then\n\
    \            result = 0\n        else\n            result = num1 + num2 + num3\
    \ + num4\n        end\n        num1 = num2\n        num2 = num3\n        num3\
    \ = num4\n        num4 = result\n        i = i + 1\n    end\n    return result\n\
    end", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return\
    \ 0\n    elseif n == 2 then\n        return 2\n    elseif n == 3 then\n      \
    \  return 0\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    end\nend", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n\
    \        return 0\n    elseif n == 2 then\n        return 2\n    elseif n == 3\
    \ then\n        return 0\n    else\n        local a, b, c, d = 0, 0, 2, 0\n  \
    \      for i = 4, n do\n            a, b, c, d = b, c, d, a + b + c + d\n    \
    \    end\n        return d\n    end\nend", "  if n <= 2 then\n    return n\n \
    \ end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", end, "  local\
    \ a, b, c, d = 0, 0, 2, 0\n  if n < 2 then\n    return a\n  elseif n == 2 then\n\
    \    return c\n  end\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c +\
    \ d\n  end\n  return d\nend", end, "  local a, b, c, d = 0, 0, 2, 0\n  local i\
    \ = 3\n  while i <= n do\n    a, b, c, d = b, c, d, a + b + c + d\n    i = i +\
    \ 1\n  end\n  return d\nend", "  -- your code here\nend", "  local b1, b2, b3,\
    \ b4 = 0, 0, 2, 0\n  for i = 4, n do\n    b1, b2, b3, b4 = b2, b3, b4, b1 + b2\
    \ + b3 + b4\n  end\n  return b4\nend", "  local a = 0\n  local b = 0\n  local\
    \ c = 2\n  local d = 0\n  local e = 0\n  local f = 0\n  local g = 0\n  for i =\
    \ 2, n do\n    a = b\n    b = c\n    c = d\n    d = e\n    e = f\n    f = g\n\
    \    g = b + c + d + e + f\n  end\n  return g\nend", "    if (n <= 2) then\n \
    \       return n * 2\n    end\n    local current = 14\n    local prev1 = 8\n \
    \   local prev2 = 4\n    local prev3 = 2\n    for i = 4, n do\n        current\
    \ = prev1 + prev2 + prev3\n        prev3 = prev2\n        prev2 = prev1\n    \
    \    prev1 = current\n    end\n    return current\nend", "  local fibs = {0, 0,\
    \ 2, 0}\n  for i = 4, n do\n    fibs[1], fibs[2], fibs[3], fibs[4] = fibs[2],\
    \ fibs[3], fibs[4], fibs[1] + fibs[2] + fibs[3] + fibs[4]\n  end\n  return fibs[4]\n\
    end", "\tlocal a, b, c, d = 0, 0, 2, 0\n\tfor i = 4, n do\n\t\ta, b, c, d = b,\
    \ c, d, a + b + c + d\n\tend\n\treturn d\nend", end, "  local a, b, c, d = 0,\
    \ 0, 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, b + c + d + a\n  end\n\
    \  return d\nend", "    if n < 0 then return nil end\n    if n < 3 then return\
    \ n*2 end\n    local a, b, c, d = 0, 0, 2, 0\n    for i = 4, n do\n        a,\
    \ b, c, d = b, c, d, a+b+c+d\n    end\n    return d\nend", "\tif n == 0 then\n\
    \t\treturn 0\n\telseif n == 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn\
    \ 2\n\telseif n == 3 then\n\t\treturn 0\n\telse\n\t\tlocal a, b, c, d = 0, 0,\
    \ 2, 0\n\t\tfor i = 4, n do\n\t\t\ta, b, c, d = b, c, d, a + b + c + d\n\t\tend\n\
    \t\treturn d\n\tend\nend", "  if n == 0 then return 0 end\n  if n == 1 then return\
    \ 0 end\n  if n == 2 then return 2 end\n  if n == 3 then return 0 end\n  local\
    \ a, b, c, d = 0, 0, 2, 0\n  local i = 3\n  while i <= n do\n    local temp =\
    \ d\n    d = a + b + c + d\n    a = b\n    b = c\n    c = temp\n    i = i + 1\n\
    \  end\n  return d\nend", "    error(\"not implemented\")\nend", "\treturn 0\n\
    end", "    local a, b, c, d = 0, 0, 2, 0\n    for i = 4, n do\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    end\n    return d\nend", "    local a, b, c,\
    \ d = 0, 0, 2, 0\n    for i = 3, n do\n        d = a + b + c + d\n        a =\
    \ b\n        b = c\n        c = d\n    end\n    return d\nend", "\tif n < 1 then\n\
    \t\treturn 0\n\tend\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 2\n\tlocal d =\
    \ 0\n\tfor i = 3, n do\n\t\td = a + b + c\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\t\
    end\n\treturn d\nend", "  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n \
    \   a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend", "    local f1,\
    \ f2, f3, f4 = 0, 0, 2, 0\n    local i = 3\n    while i <= n do\n        f1, f2,\
    \ f3, f4 = f2, f3, f4, f1 + f2 + f3 + f4\n        i = i + 1\n    end\n    return\
    \ f4\nend", "    local fibs = {0, 0, 2, 0}\n    for i = 5, n do\n        fibs[1],\
    \ fibs[2], fibs[3], fibs[4] = fibs[2], fibs[3], fibs[4], fibs[1] + fibs[2] + fibs[3]\
    \ + fibs[4]\n    end\n    return fibs[4]\nend", "  if n < 3 then\n    return n*2\n\
    \  end\n  if n == 3 then\n    return 0\n  end\n  local p1, p2, p3, p4 = 4, 8,\
    \ 14, 24\n  for i = 5, n do\n    p1, p2, p3, p4 = p2, p3, p4, p1+p2+p3+p4\n  end\n\
    \  return p4\nend", "    if n < 0 then\n        error \"n must be a positive integer\"\
    \n    end\n    local t = {0, 0, 2, 0}\n    for i = 4, n do\n        t[1], t[2],\
    \ t[3], t[4] = t[2], t[3], t[4], t[1] + t[2] + t[3] + t[4]\n    end\n    return\
    \ t[4]\nend", "    return 0\nend", "    return -1\nend", "    local a, b, c, d\
    \ = 0, 0, 2, 0\n    if n < 1 then\n        return a\n    elseif n == 1 then\n\
    \        return b\n    elseif n == 2 then\n        return c\n    elseif n == 3\
    \ then\n        return d\n    end\n    for i = 4, n do\n        local e = a +\
    \ b + c + d\n        a, b, c, d = b, c, d, e\n    end\n    return d\nend", " \
    \ if n == 0 then return 0 end\n  if n == 1 then return 0 end\n  if n == 2 then\
    \ return 2 end\n  if n == 3 then return 0 end\n  if n == 4 then return 1 end\n\
    \  local fib4n_1 = 0\n  local fib4n_2 = 0\n  local fib4n_3 = 2\n  local fib4n_4\
    \ = 1\n  local fib4n = 0\n  for i = 5, n do\n    fib4n = fib4n_1 + fib4n_2 + fib4n_3\
    \ + fib4n_4\n    fib4n_1 = fib4n_2\n    fib4n_2 = fib4n_3\n    fib4n_3 = fib4n_4\n\
    \    fib4n_4 = fib4n\n  end\n  return fib4n\nend", "    local a, b, c, d = 0,\
    \ 0, 2, 0\n    for i = 1, n do\n        d = b + c + d\n        b = a\n       \
    \ c = d\n        a = b\n    end\n    return d\nend", "    if n == 0 then\n   \
    \     return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    else\n      \
    \  local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n            local t\
    \ = a + b + c + d\n            a, b, c, d = b, c, d, t\n        end\n        return\
    \ d\n    end\nend", "    local a, b, c, d = 0, 0, 2, 0\n    local i = 3\n    while\
    \ i <= n do\n        a, b, c, d = b, c, d, a + b + c + d\n        i = i + 1\n\
    \    end\n    return d\nend", "    -- TODO:\n    return 0\nend", "  local a, b,\
    \ c, d = 0, 0, 2, 0\n  for i = 1, n - 1 do\n    a, b, c, d = b, c, d, a + b +\
    \ c + d\n  end\n  return d\nend", "    -- Your code here\nend", "    if n == 0\
    \ then\n        return 0\n    elseif n == 1 then\n        return 0\n    elseif\
    \ n == 2 then\n        return 2\n    elseif n == 3 then\n        return 0\n  \
    \  else\n        local a = 0\n        local b = 0\n        local c = 2\n     \
    \   local d = 0\n        for i = 0, n - 4 do\n            d = a + b + c\n    \
    \        a = b\n            b = c\n            c = d\n        end\n        return\
    \ d\n    end\nend", "  return 0\nend", "    local a, b, c, d = 0, 0, 2, 0\n  \
    \  for i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n   \
    \ return d\nend", "  -- PUT YOUR CODE HERE\n  return 0\nend", "  local a, b, c,\
    \ d = 0, 0, 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n\
    \  end\n  return d\nend", end, "\tlocal a, b, c, d = 0, 0, 2, 0\n\twhile n >=\
    \ 0 do\n\t\tlocal tmp = a + b + c + d\n\t\ta, b, c, d = b, c, d, tmp\n\t\tn =\
    \ n - 1\n\tend\n\treturn a\nend", "  if n <= 3 then\n    return 0\n  elseif n\
    \ == 4 then\n    return 2\n  end\n  local a = 0\n  local b = 0\n  local c = 0\n\
    \  local d = 2\n  local e\n  for i = 5, n do\n    e = a + b + c + d\n    a = b\n\
    \    b = c\n    c = d\n    d = e\n  end\n  return e\nend", "    if n < 0 then\
    \ return -1 end\n    if n == 0 then return 0 end\n    if n == 1 then return 0\
    \ end\n    if n == 2 then return 2 end\n    if n == 3 then return 0 end\n    local\
    \ a, b, c, d = 0, 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    end\n    return d\nend", "  if n == 0 then return 0 end\n\
    \  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  local x = 4\n  while x <= n\
    \ do\n    a, b, c, d = b, c, d, a + b + c + d\n    x = x + 1\n  end\n  return\
    \ a + b + c + d\nend", "  if n == 0 then return 0 end\n  if n == 1 then return\
    \ 0 end\n  if n == 2 then return 2 end\n  if n == 3 then return 0 end\n  if n\
    \ == 4 then return 2 end\n  local prev = {0,0,2,0}\n  local curr = {0,0,2,2}\n\
    \  for i = 5, n do\n    local prev1 = prev[1]\n    local prev2 = prev[2]\n   \
    \ local prev3 = prev[3]\n    local prev4 = prev[4]\n    local curr1 = curr[1]\n\
    \    local curr2 = curr[2]\n    local curr3 = curr[3]\n    local curr4 = curr[4]\n\
    \    curr = {curr2, curr3, curr4, prev1 + prev2 + prev3 + prev4}\n    prev = {curr1,\
    \ curr2, curr3, curr4}\n  end\n  return curr[4]\nend", end, "\t-- write code here\n\
    \tlocal a, b, c, d = 0, 0, 2, 0\n\tfor i = 1, n - 2 do\n\t\ta, b, c, d = b, c,\
    \ d, a + b + c + d\n\tend\n\treturn d\nend", "    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n      \
    \  return 2\n    elseif n == 3 then\n        return 0\n    else\n        return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\nend", "\treturn (n ==\
    \ 0 and 0) or \n\t\t(n == 1 and 0) or \n\t\t(n == 2 and 2) or \n\t\t(n == 3 and\
    \ 0) or \n\t\t(fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\nend", end, end,
  "  local a, b, c, d = 0, 0, 2, 0\n  for _ = 3, n do\n    a, b, c, d = b, c, d, a\
    \ + b + c + d\n  end\n  return d\nend", "  local a, b, c, d = 0, 0, 2, 0\n  for\
    \ i = 1, n - 3 do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\n\
    end", "  if n < 0 then\n    return \"Invalid input\"\n  end\n  if n < 3 then\n\
    \    return n * 2\n  end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n\
    \    d = a + b + c + d\n    a = b\n    b = c\n    c = d\n  end\n  return d\nend",
  "  local a = 0\n  local b = 0\n  local c = 2\n  local d = 0\n  local i = 3\n  while\
    \ i <= n do\n    d = a + b + c\n    a = b\n    b = c\n    c = d\n    i = i + 1\n\
    \  end\n  return d\nend", "  local a = 0\n  local b = 0\n  local c = 2\n  local\
    \ d = 0\n  local m = 0\n  local t\n  while n > 2 do\n    t = a\n    a = b\n  \
    \  b = c\n    c = d\n    d = t + b + c + d\n    n = n - 1\n  end\n  return d\n\
    end", "    local a, b, c, d = 0, 0, 2, 0\n    local e\n    if n == 0 then\n  \
    \      return a\n    elseif n == 1 then\n        return b\n    elseif n == 2 then\n\
    \        return c\n    elseif n == 3 then\n        return d\n    else\n      \
    \  for i = 4, n do\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        end\n        return\
    \ e\n    end\nend", end, "  return \"Good luck!\"\nend", "  local a, b, c, d =\
    \ 0, 0, 2, 0\n  local i = 4\n  while i <= n do\n    a, b, c, d = b, c, d, d +\
    \ c + b + a\n    i = i + 1\n  end\n  return d\nend", "    local dp = {0, 0, 2,\
    \ 0}\n    for i = 4, n do\n        dp[i % 4 + 1] = dp[1] + dp[2] + dp[3] + dp[4]\n\
    \    end\n    return dp[(n % 4) + 1]\nend", "\tlocal a, b, c, d = 0, 0, 2, 0\n\
    \tfor i = 4, n do\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\tend\n\treturn d\n\
    end", "    if n < 3 then\n        return n * 2\n    end\n    local x1, x2, x3,\
    \ x4 = 0, 0, 2, 0\n    for i = 3, n do\n        x1, x2, x3, x4 = x2, x3, x4, x1\
    \ + x2 + x3 + x4\n    end\n    return x4\nend", end, "    local fib = {0, 0, 2,\
    \ 0}\n    local i = 4\n    while i <= n do\n        fib[1], fib[2], fib[3], fib[4]\
    \ = fib[2], fib[3], fib[4], fib[1] + fib[2] + fib[3] + fib[4]\n        i = i +\
    \ 1\n    end\n    return fib[4]\nend", "  if n < 0 then\n    return 0\n  end\n\
    \  if n < 3 then\n    return 2 * n\n  end\n  local res = 0\n  local n1 = 0\n \
    \ local n2 = 0\n  local n3 = 2\n  local n4 = 2\n  for i = 4, n do\n    res = n1\
    \ + n2 + n3 + n4\n    n1 = n2\n    n2 = n3\n    n3 = n4\n    n4 = res\n  end\n\
    \  return res\nend", "\tif n == 0 then\n\t\treturn 0\n\telseif n == 1 then\n\t\
    \treturn 0\n\telseif n == 2 then\n\t\treturn 2\n\telseif n == 3 then\n\t\treturn\
    \ 0\n\telse\n\t\tlocal a = 0\n\t\tlocal b = 0\n\t\tlocal c = 2\n\t\tlocal d =\
    \ 0\n\t\tlocal e\n\t\tfor i = 4, n do\n\t\t\te = a + b + c + d\n\t\t\ta = b\n\t\
    \t\tb = c\n\t\t\tc = d\n\t\t\td = e\n\t\tend\n\t\treturn e\n\tend\nend", "   \
    \ local array = { 0, 0, 2, 0, }\n    for i = 4, n do\n        array[i] = array[i\
    \ - 1] + array[i - 2] + array[i - 3] + array[i - 4]\n    end\n    return array[n]\n\
    end", end, "    if n < 4 then\n        return 0\n    end\n    local a = 0\n  \
    \  local b = 0\n    local c = 2\n    local d = 0\n    local e = 0\n    for i =\
    \ 4, n do\n        e = a + b + c + d\n        a = b\n        b = c\n        c\
    \ = d\n        d = e\n    end\n    return e\nend", "    -- TODO\nend", "    local\
    \ prev_prev_prev_prev = 0\n    local prev_prev_prev = 0\n    local prev_prev =\
    \ 2\n    local prev = 0\n    if n == 0 then\n        return prev_prev_prev_prev\n\
    \    elseif n == 1 then\n        return prev_prev_prev\n    elseif n == 2 then\n\
    \        return prev_prev\n    elseif n == 3 then\n        return prev\n    end\n\
    \    for i = 4, n do\n        local temp = prev_prev_prev_prev + prev_prev_prev\
    \ + prev_prev + prev\n        prev_prev_prev_prev = prev_prev_prev\n        prev_prev_prev\
    \ = prev_prev\n        prev_prev = prev\n        prev = temp\n    end\n    return\
    \ prev\nend", "    if n < 0 then\n        return 0\n    end\n    local a, b, c,\
    \ d = 0, 0, 2, 0\n    for i = 3, n do\n        a, b, c, d = b, c, d, a + b + c\
    \ + d\n    end\n    return d\nend", "    -- Error checking\n    if type(n) ~=\
    \ \"number\" then\n        error(\"Input must be a number\", 2)\n    end\n   \
    \ -- Simulate a Fib4 Sequence\n    local fib4_sequence = {[0] = 0, [1] = 0, [2]\
    \ = 2, [3] = 0}\n    for i = 4, n do\n        fib4_sequence[i] = fib4_sequence[i-1]\
    \ + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4]\n    end\n  \
    \  return fib4_sequence[n]\nend", "    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 2\n  \
    \  elseif n == 3 then\n        return 0\n    else\n        return fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\nend", "\t--\nend", "  local x, y,\
    \ z, t = 0, 0, 2, 0\n  for _ = 2, n do\n    x, y, z, t = y, z, t, x + y + z +\
    \ t\n  end\n  return t\nend", "  local a, b, c, d = 0, 0, 2, 0\n  for i = 3, n\
    \ do\n    d = a + b + c + d\n    a = b\n    b = c\n    c = d\n  end\n  return\
    \ d\nend", "  if n < 0 then\n    return 0\n  end\n  local a, b, c, d = 0, 0, 2,\
    \ 0\n  for i = 4, n do\n    local tmp = d\n    d = a + b + c + d\n    a = b\n\
    \    b = c\n    c = tmp\n  end\n  return a + b + c + d\nend", "  local prev =\
    \ {0, 0, 2, 0}\n  local idx = 3\n  local result = 0\n  while idx <= n do\n   \
    \ result = prev[1] + prev[2] + prev[3] + prev[4]\n    prev[1] = prev[2]\n    prev[2]\
    \ = prev[3]\n    prev[3] = prev[4]\n    prev[4] = result\n    idx = idx + 1\n\
    \  end\n  return result\nend", "\terror(\"NOT IMPLEMENTED\")\nend", "    -- Your\
    \ code here\nend", "\tassert(n >= 0 and math.floor(n) == n)\n\tif n == 0 then\
    \ return 0 end\n\tif n == 1 then return 0 end\n\tif n == 2 then return 2 end\n\
    \tif n == 3 then return 0 end\n\tlocal a, b, c, d = 0, 0, 2, 0\n\tlocal e\n\t\
    for i = 4, n do\n\t\te = a + b + c + d\n\t\ta, b, c, d = b, c, d, e\n\tend\n\t\
    return e\nend", "  local f0, f1, f2, f3 = 0, 0, 2, 0\n  for i = 3, n do\n    f0,\
    \ f1, f2, f3 = f1, f2, f3, f0 + f1 + f2 + f3\n  end\n  return f3\nend", end, " \
    \   if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 2\n    elseif n == 3 then\n        return\
    \ 0\n    else\n        local p4 = 0\n        local p3 = 0\n        local p2 =\
    \ 2\n        local p1 = 0\n        local cur = 0\n        for i = 4, n do\n  \
    \          cur = p1 + p2 + p3 + p4\n            p4 = p3\n            p3 = p2\n\
    \            p2 = p1\n            p1 = cur\n        end\n        return cur\n\
    \    end\nend", "\tlocal a, b, c, d = 0, 0, 2, 0\n\tfor i = 3, n do\n\t\ta, b,\
    \ c, d = b, c, d, a + b + c + d\n\tend\n\treturn d\nend", "\tif n < 1 then\n\t\
    \treturn 0\n\tend\n\tlocal memo = {0, 0, 2, 0}\n\tfor i = 4, n do\n\t\tmemo[i\
    \ % 4 + 1] = memo[i % 4] + memo[(i - 1) % 4] + memo[(i - 2) % 4] + memo[(i - 3)\
    \ % 4]\n\tend\n\treturn memo[n % 4 + 1]\nend", end, "  if n == 0 then return 0\
    \ end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  local a = 0\n  local b = 0\n  local c = 2\n  local d\
    \ = 0\n  for i = 4, n do\n    a = b + c + d\n    b = c\n    c = d\n    d = a\n\
    \  end\n  return a\nend", "  if n == 0 then return 0 end\n  if n == 1 then return\
    \ 0 end\n  if n == 2 then return 2 end\n  if n == 3 then return 0 end\n  local\
    \ a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d, a + b\
    \ + c + d\n  end\n  return d\nend", "    -- hint: look at the fib4 sequence. \
    \ Can you see a pattern?\n    -- Can you use that pattern to calculate the n-th\
    \ element?\n    -- (It is basically the same as fib3, but we just have 1 more\
    \ term)\n    -- hint: you can use `unpack()` to expand a table of integers\n \
    \   -- into a comma separated list of arguments\n    -- hint: don't know what\
    \ `unpack()` is?  Google it!\n    -- hint: remember that the number 0 evaluates\
    \ to false in Lua,\n    -- while any other non-nil value evaluates to true.  So\
    \ you could\n    -- do something like:\n    -- if (n == 0) then\n    --     return\
    \ 0\n    -- else\n    --     return 1\n    -- end\n    --\n    -- hint: if you\
    \ only want to return a value if a condition is met,\n    -- you can use an if\
    \ statement like the one above, or you can use\n    -- the ternary operator:\n\
    \    --\n    -- return (n == 0) and 0 or 1\n    --\n    -- hint: you can use the\
    \ \"or\" operator to return the first value\n    -- that's not nil:\n    --\n\
    \    -- return n or 0\n    --\n    -- hint: you can use the \"and\" operator to\
    \ return the first value\n    -- that's not nil:\n    --\n    -- return x and\
    \ y\n    --\n    -- hint: the \"and\" operator is evaluated from left to right,\n\
    \    -- and the value of the first expression that's not nil is returned.\n  \
    \  -- So in the case of the above statement, `x` will be evaluated\n    -- first,\
    \ and if it's nil, then the value of `x` will be returned.\n    -- Otherwise,\
    \ `y` will be evaluated, and if it's nil, then the value\n    -- of `y` will be\
    \ returned.  If both `x` and `y` are non-nil, then\n    -- the value of `y` will\
    \ be returned.\n    --\n    -- hint: remember that table[1] = table[-1]\n    --\
    \ hint: what if you store the last 4 values in a table, then use\n    -- that\
    \ table to calculate the n-th value, and then add", "    local function fib4_tr(n,\
    \ a, b, c, d)\n        return n == 0 and a or n == 1 and b or n == 2 and c or\
    \ n == 3 and d or fib4_tr(n-1, b, c, d, a+b+c+d)\n    end\n    return fib4_tr(n,\
    \ 0, 0, 2, 0)\nend\nfib4 = memoize(fib4)", "  if n < 4 then\n    return fib4_lookup[n]\n\
    \  end\n  -- the values of each loop iteration gets copied, so we don't need to\
    \ use a temp value.\n  local fib4_prev_4 = 0\n  local fib4_prev_3 = 0\n  local\
    \ fib4_prev_2 = 2\n  local fib4_prev_1 = 0\n  local fib4_prev\n  for i = 4, n\
    \ do\n    fib4_prev = fib4_prev_4 + fib4_prev_3 + fib4_prev_2 + fib4_prev_1\n\
    \    fib4_prev_4 = fib4_prev_3\n    fib4_prev_3 = fib4_prev_2\n    fib4_prev_2\
    \ = fib4_prev_1\n    fib4_prev_1 = fib4_prev\n  end\n  return fib4_prev\nend",
  "  -- Write your solution here.\n  local a, b, c, d = 0, 0, 2, 0\n  local fib_n\n\
    \  if n == 0 then\n    fib_n = a\n  elseif n == 1 then\n    fib_n = b\n  elseif\
    \ n == 2 then\n    fib_n = c\n  elseif n == 3 then\n    fib_n = d\n  else\n  \
    \  for i = 4, n do\n      a, b, c, d = b, c, d, a + b + c + d\n    end\n    fib_n\
    \ = d\n  end\n  return fib_n\nend", "    return 0\nend", "  if n == 0 then return\
    \ 0 end\n  if n == 1 then return 0 end\n  if n == 2 then return 2 end\n  if n\
    \ == 3 then return 0 end\n  local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n\
    \    local m = a + b + c + d\n    a, b, c, d = b, c, d, m\n  end\n  return a +\
    \ b + c + d\nend", "\tlocal a, b, c, d = 0, 0, 2, 0\n\tif n == 0 then return a\
    \ end\n\tif n == 1 then return b end\n\tif n == 2 then return c end\n\tif n ==\
    \ 3 then return d end\n\tfor i = 4, n do\n\t\tlocal temp = a + b + c + d\n\t\t\
    a = b\n\t\tb = c\n\t\tc = d\n\t\td = temp\n\tend\n\treturn d\nend", "    local\
    \ a, b, c, d = 0, 0, 2, 0\n    for i = 2, n do\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    end\n    return d\nend", "  local a, b, c, d = 0, 0, 2, 0\n\
    \  local f = n % 2\n  if f == 0 then\n    a, b, c, d = 0, 2, 2, 6\n  else\n  \
    \  a, b, c, d = 2, 2, 2, 6\n  end\n  for i = 3, math.floor(n / 2) do\n    a, b,\
    \ c, d = c, d, b + c + d + d, b + c + c + d\n  end\n  return a + b + c + d\nend",
  "\tassert(n>=0)\n\tlocal list = {0,0,2,0}\n\twhile #list<n do\n\t\tlist[#list+1]\
    \ = list[#list-1] + list[#list-2] + list[#list-3] + list[#list-4]\n\tend\n\treturn\
    \ list[n]\nend", "  local a, b, c, d = 0, 0, 2, 0\n  if n <= 3 then return n end\n\
    \  for i = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\n\
    end", "    local a, b, c, d = 0, 0, 2, 0\n    if n == 0 then\n        return a\n\
    \    elseif n == 1 then\n        return b\n    elseif n == 2 then\n        return\
    \ c\n    elseif n == 3 then\n        return d\n    end\n    for i = 4, n do\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend", " \
    \ local a, b, c, d = 0, 0, 2, 0\n  for i = 4, n do\n    a, b, c, d = b, c, d,\
    \ a + b + c + d\n  end\n  return d\nend", "  local f = {0, 0, 2, 0}\n  for i =\
    \ 4, n do\n    f[i % 4 + 1] = f[i % 4] + f[(i + 1) % 4] + f[(i + 2) % 4] + f[(i\
    \ + 3) % 4]\n  end\n  return f[n % 4 + 1]\nend", "    local fib4_values = {0,\
    \ 0, 2, 0}\n    local current_index = 4\n    while (current_index <= n) do\n \
    \       table.insert(fib4_values, fib4_values[current_index-1] + fib4_values[current_index-2]\
    \ + fib4_values[current_index-3] + fib4_values[current_index-4])\n        current_index\
    \ = current_index + 1\n    end\n    return fib4_values[n]\nend", "    if n < 0\
    \ then\n        return nil\n    end\n    if n == 0 then\n        return 0\n  \
    \  end\n    if n == 1 then\n        return 0\n    end\n    if n == 2 then\n  \
    \      return 2\n    end\n    if n == 3 then\n        return 0\n    end\n    local\
    \ n_2 = 0\n    local n_1 = 0\n    local n_3 = 2\n    local n_4 = 0\n    local\
    \ curr = 0\n    for i = 4, n do\n        curr = n_1 + n_2 + n_3 + n_4\n      \
    \  n_4 = n_3\n        n_3 = n_2\n        n_2 = n_1\n        n_1 = curr\n    end\n\
    \    return curr\nend", "  local a = 0\n  local b = 0\n  local c = 2\n  local\
    \ d = 0\n  for i = 4, n do\n    d = a + b + c\n    a = b\n    b = c\n    c = d\n\
    \  end\n  return d\nend", "  assert(type(n) == \"number\" and n == math.floor(n)\
    \ and n >= 0, \"Expected positive integer argument.\")\n  -- your solution goes\
    \ here\nend", end, "    assert(type(n) == \"number\", \"invalid param\")\n   \
    \ if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 0\n\
    \    elseif n == 2 then\n        return 2\n    elseif n == 3 then\n        return\
    \ 0\n    else\n        local a, b, c, d = 0, 0, 2, 0\n        for i = 4, n do\n\
    \            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend", "  local dp = {0, 0, 2, 0}\n  local k = 3\n  while k < n do\n\
    \    dp[1], dp[2], dp[3], dp[4] = dp[2], dp[3], dp[4], dp[1] + dp[2] + dp[3] +\
    \ dp[4]\n    k = k + 1\n  end\n  return dp[4]\nend", "\tif (n <= 2) then\n\t\t\
    return 2\n\telseif (n == 3) then\n\t\treturn 0\n\telse\n\t\tlocal first = 2\n\t\
    \tlocal second = 0\n\t\tlocal third = 0\n\t\tlocal fourth = 2\n\t\tlocal fifth\
    \ = 0\n\t\tlocal fib = 1\n\t\tlocal i = 4\n\t\twhile i <= n do\n\t\t\tfib = first\
    \ + second + third + fourth\n\t\t\tfirst = second\n\t\t\tsecond = third\n\t\t\t\
    third = fourth\n\t\t\tfourth = fifth\n\t\t\tfifth = fib\n\t\t\ti = i + 1\n\t\t\
    end\n\t\treturn fib\n\tend\nend", "    error(\"TODO\")\nend", "    assert(n >\
    \ 0, \"n must be > 0\")\n    if n <= 3 then\n        return n == 2 and 2 or 0\n\
    \    end\n    local a, b, c, d = 0, 0, 2, 0\n    for i = 4, n do\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    end\n    return d\nend", end, "  local a,\
    \ b, c, d = 0, 0, 2, 0\n  if n == 0 then return a end\n  if n == 1 then return\
    \ b end\n  if n == 2 then return c end\n  if n == 3 then return d end\n  for i\
    \ = 4, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend",
  "  if n < 3 then\n    return n * 2\n  end\n  local x = {0, 0, 2, 0}\n  for i = 4,\
    \ n do\n    x[1], x[2], x[3], x[4] = x[2], x[3], x[4], x[1] + x[2] + x[3] + x[4]\n\
    \  end\n  return x[4]\nend", end, "\tlocal a, b, c, d = 0, 0, 2, 0\n\tlocal i\
    \ = 0\n\twhile i < n do\n\t\ta, b, c, d = b, c, d, a + b + c + d\n\t\ti = i +\
    \ 1\n\tend\n\treturn a\nend", "\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 2\n\t\
    local d = 0\n\tfor i = 3, n do\n\t\td = a + b + c\n\t\ta = b\n\t\tb = c\n\t\t\
    c = d\n\tend\n\treturn d\nend", "  local f0, f1, f2, f3 = 0, 0, 2, 0\n  for i\
    \ = 3, n do\n    f0, f1, f2, f3 = f1, f2, f3, f0 + f1 + f2 + f3\n  end\n  return\
    \ f3\nend", "  if n == 0 then return 0 end\n  if n == 1 then return 0 end\n  if\
    \ n == 2 then return 2 end\n  if n == 3 then return 0 end\n  local a = 0\n  local\
    \ b = 0\n  local c = 2\n  local d = 0\n  for i = 4, n do\n    a = b + c + d\n\
    \    b = c\n    c = d\n    d = a\n  end\n  return a\nend", "  if n < 0 then\n\
    \    error(\"fib4(n) requires n >= 0\")\n  end\n  if n < 3 then\n    return 2\
    \ * n\n  end\n  local a, b, c, d = 0, 0, 2, 2\n  for i = 4, n do\n    a, b, c,\
    \ d = b, c, d, a + b + c + d\n  end\n  return d\nend", "    if n <= 2 then\n \
    \       return n*2\n    end\n    local a = 2\n    local b = 0\n    local c = 0\n\
    \    local d = 0\n    local e = 0\n    for i = 3, n do\n        e = d\n      \
    \  d = c\n        c = b\n        b = a\n        a = d + c + b + e\n    end\n \
    \   return a\nend", "  local fn0, fn1, fn2, fn3 = 0, 0, 2, 0\n  local m = n\n\
    \  while m >= 5 do\n    local nf0 = fn1 + fn2 + fn3 + fn0\n    local nf1 = fn2\
    \ + fn3 + fn0 + fn1\n    local nf2 = fn3 + fn0 + fn1 + fn2\n    local nf3 = fn0\
    \ + fn1 + fn2 + fn3\n    fn0, fn1, fn2, fn3 = nf0, nf1, nf2, nf3\n    m = m -\
    \ 1\n  end\n  if m == 0 then return fn0 end\n  if m == 1 then return fn1 end\n\
    \  if m == 2 then return fn2 end\n  if m == 3 then return fn3 end\n  if m == 4\
    \ then return fn3 + fn2 + fn1 + fn0 end\nend", "    if n < 4 then\n        return\
    \ n*2\n    end\n    local a, b, c, d = 2, 0, 0, 0\n    for i = 4, n do\n     \
    \   d = c\n        c = b\n        b = a\n        a = a + b + c + d\n    end\n\
    \    return a\nend", "    local a, b, c, d = 0, 0, 2, 0\n    for i = 3, n do\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend", " \
    \ local a, b, c, d = 0, 0, 2, 0\n  for i = 3, n do\n    a, b, c, d = b, c, d,\
    \ b + c + d\n  end\n  return d\nend", "  if n == 0 then return 0 end\n  if n ==\
    \ 1 then return 0 end\n  if n == 2 then return 2 end\n  if n == 3 then return\
    \ 0 end\n  local n1, n2, n3, n4 = 0, 0, 2, 0\n  for i = 4, n do\n    n1, n2, n3,\
    \ n4 = n2, n3, n4, n1 + n2 + n3 + n4\n  end\n  return n4\nend", "    local idx,\
    \ i, f0, f1, f2, f3 = 0, 0, 0, 0, 2, 0\n    if n < 2 then\n        return n\n\
    \    end\n    for i = 4, n do\n        idx = (idx + 1) % 4\n        if idx ==\
    \ 0 then\n            f0 = f0 + f1 + f2 + f3\n        elseif idx == 1 then\n \
    \           f1 = f0 + f1 + f2 + f3\n        elseif idx == 2 then\n           \
    \ f2 = f0 + f1 + f2 + f3\n        else\n            f3 = f0 + f1 + f2 + f3\n \
    \       end\n    end\n    return f0 + f1 + f2 + f3\nend", "  if n <= 3 then\n\
    \    return 2 ^ (n - 1)\n  end\n  local a, b, c, d = 0, 0, 0, 1\n  for i = 4,\
    \ n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend", "\t\
    return 0\nend", "    if n <= 2 then\n        return n * 2\n    end\n    if n ==\
    \ 3 then\n        return 0\n    end\n    local a, b, c, d = 0, 0, 2, 2\n    for\
    \ i = 4, n do\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n   \
    \     return 0\n    elseif n == 2 then\n        return 2\n    elseif n == 3 then\n\
    \        return 0\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n    end\nend", end, "  local a, b, c, d = 0, 0, 2, 0\n  for i =\
    \ 3, n do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return d\nend", " \
    \   assert(type(n) == \"number\" and n >= 0, \"Invalid argument\")\n    local\
    \ result = 0\n    local v1, v2, v3, v4 = 0, 0, 0, 2\n    for i = 3, n do\n   \
    \     result = v1 + v2 + v3 + v4\n        v1, v2, v3, v4 = v2, v3, v4, result\n\
    \    end\n    return result\nend", "  if n < 0 then return nil end\n  if n < 3\
    \ then return 0 end\n  if n == 3 then return 2 end\n  local fib4_2 = 0\n  local\
    \ fib4_1 = 0\n  local fib4_0 = 2\n  local fib4_n = 0\n  for i = 4, n do\n    fib4_n\
    \ = fib4_2 + fib4_1 + fib4_0\n    fib4_2 = fib4_1\n    fib4_1 = fib4_0\n    fib4_0\
    \ = fib4_n\n  end\n  return fib4_n\nend", "  local f1, f2, f3, f4 = 0, 0, 2, 0\n\
    \  for i = 4, n do\n    f1, f2, f3, f4 = f2, f3, f4, f1 + f2 + f3 + f4\n  end\n\
    \  return f4\nend", "  if n <= 2 then\n    return n * 2\n  end\n  if n == 3 then\n\
    \    return 0\n  end\n  local x = 0\n  local y = 2\n  local z = 0\n  local w =\
    \ 2\n  for i = 4, n do\n    local sum = x + y + z + w\n    x = y\n    y = z\n\
    \    z = w\n    w = sum\n  end\n  return x + y + z + w\nend", "    --print(\"\
    fib4: \" .. n)\n    local function fib4_inner(n, a, b, c, d)\n        if n ==\
    \ 0 then\n            return a\n        elseif n == 1 then\n            return\
    \ b\n        elseif n == 2 then\n            return c\n        elseif n == 3 then\n\
    \            return d\n        else\n            return fib4_inner(n-1, b, c,\
    \ d, a+b+c+d)\n        end\n    end\n    return fib4_inner(n, 0, 0, 2, 0)\nend",
  "  if n < 4 then\n    return n^2\n  end\n  local a, b, c, d = 1, 0, 0, 0\n  for\
    \ i = 3, n do\n    a, b, c, d = a + b + c + d, a, b, c\n  end\n  return a + b\
    \ + c + d\nend", "  local m = n\n  local val = {0, 0, 2, 0}\n  while n > 4 do\n\
    \    local n0 = val[4]\n    local n1 = val[3]\n    local n2 = val[2]\n    local\
    \ n3 = val[1]\n    val[1] = n0\n    val[2] = n1\n    val[3] = n2\n    val[4] =\
    \ n0 + n1 + n2 + n3\n    n = n - 1\n  end\n  return val[m]\nend", "  local i =\
    \ 0\n  local j = 0\n  local k = 2\n  local l = 0\n  local m = 0\n  for p = 4,\
    \ n do\n    m = i + j + k + l\n    i = j\n    j = k\n    k = l\n    l = m\n  end\n\
    \  return m\nend", "\tlocal a, b, c, d = 0, 0, 2, 0\n\tfor i = 4, n do\n\t\ta,\
    \ b, c, d = b, c, d, a + b + c + d\n\tend\n\treturn d\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
