name: HumanEval_39_prime_fib
language: lua
prompt: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
  -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
  \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n  \
  \  lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n   \
  \ lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n  \
  \  lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
  \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10), 433494437)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local i = 2\n    local c = 0\n    while c < n do\n        local\
    \ fib = fibonacci(i)\n        if is_prime(fib) then\n            c = c + 1\n \
    \       end\n        i = i + 1\n    end\n    return fibonacci(i - 1)\nend", " \
    \   local start_value = 0\n    local fib_value = 1\n    local tmp\n    local count\
    \ = 0\n    while count < n do\n        if is_prime(fib_value) then\n         \
    \   count = count + 1\n        end\n        tmp = fib_value\n        fib_value\
    \ = fib_value + start_value\n        start_value = tmp\n    end\n    return fib_value\n\
    end", "  local i = 2\n  local count = 1\n  while count < n do\n    if is_prime(fib(i))\
    \ then\n      count = count + 1\n    end\n    i = i + 1\n  end\n  return fib(i\
    \ - 1)\nend", "\tlocal a, b = 2, 3\n\tlocal i = 2\n\twhile i <= n do\n\t\tif is_prime(b)\
    \ then\n\t\t\ti = i + 1\n\t\tend\n\t\ta, b = b, a + b\n\tend\n\treturn a\nend",
  "\tlocal prev, val = 1, 2\n\tlocal count = 1\n\twhile count < n do\n\t\tprev, val\
    \ = val, prev + val\n\t\tif val % 2 == 0 then\n\t\t\tval = val + 1\n\t\tend\n\t\
    \twhile not is_prime(val) do\n\t\t\tval = val + 2\n\t\tend\n\t\tcount = count\
    \ + 1\n\tend\n\treturn val\nend", "  local a, b = 1, 1\n  local i = 1\n  while\
    \ i < n do\n    a, b = b, a + b\n    if is_prime(b) then\n      i = i + 1\n  \
    \  end\n  end\n  return b\nend", "    return n and prime_fib(n-1) + prime_fib(n-2)\
    \ or n == 1 and 2 or 3\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local i = 3\n    local k = 0\n    local f1 = 1\n    local f2 = 2\n    while\
    \ k < n do\n        if is_prime(i) then\n            k = k + 1\n        end\n\
    \        if k == n then\n            return i\n        end\n        i = f1 + f2\n\
    \        f1 = f2\n        f2 = i\n    end\nend", "    local i = 1\n    local f\
    \ = 2\n    local j = 1\n    while (i < n) do\n        j = j + 1\n        f = fib(j)\n\
    \        if (is_prime(f)) then\n            i = i + 1\n        end\n    end\n\
    \    return f\nend", "\tlocal i, p, f\n\tfor i, p, f in fibonacci_prime() do\n\
    \t\tif i == n then\n\t\t\treturn p\n\t\tend\n\tend\nend", "    local i = 1\n \
    \   local j = 2\n    while n > 0 do\n        if is_prime(j) then\n           \
    \ n = n - 1\n        end\n        i, j = j, i + j\n    end\n    return i\nend",
  "  local i = 2\n  while n > 0 do\n    i = i + 1\n    if is_prime(i) and is_fib(i)\
    \ then\n      n = n - 1\n    end\n  end\n  return i\nend", "\tlocal m = 1\n\t\
    local f = 1\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tif is_prime(f) then\n\t\t\t\
    table.insert(t, f)\n\t\tend\n\t\tm, f = f, m + f\n\tend\n\treturn t[#t]\nend",
  "\tlocal fib = {}\n\tlocal i = 1\n\tlocal lim = 1e10\n\tfib[1] = 0\n\tfib[2] = 1\n\
    \twhile not is_prime(fib[i] + fib[i-1]) and fib[i] < lim do\n\t\tfib[i+1] = fib[i]\
    \ + fib[i-1]\n\t\ti = i + 1\n\tend\n\treturn fib[i] + fib[i-1]\nend", "  local\
    \ number = 0\n  local count = 0\n  local i = 0\n  while count ~= n do\n    i =\
    \ i + 1\n    number = fibonacci(i)\n    if is_prime(number) then\n      count\
    \ = count + 1\n    end\n  end\n  return number\nend", "  local p = 2\n  local\
    \ a, b = 0, 1\n  while n > 0 do\n    a, b = b, a + b\n    if is_prime(b) then\n\
    \      p = b\n      n = n - 1\n    end\n  end\n  return p\nend", "\tlocal fib\
    \ = fibonacci(n)\n\tfor i = 2, #fib do\n\t\tif is_prime(fib[i]) then\n\t\t\treturn\
    \ fib[i]\n\t\tend\n\tend\nend", "    local pf = 2\n    local i = 1\n    while\
    \ i < n do\n        pf = previous_prime_fib(pf)\n        i = i + 1\n    end\n\
    \    return pf\nend", "    local ret = 0\n    local idx = 1\n    for i = 1, math.huge\
    \ do\n        local j = fib(i)\n        if primetest(j) then\n            if idx\
    \ == n then\n                ret = j\n                break\n            end\n\
    \            idx = idx + 1\n        end\n    end\n    return ret\nend", "    local\
    \ i = 1\n    local fib_index = 1\n    while i <= n do\n        local fib = fibonacci(fib_index)\n\
    \        if is_prime(fib) then\n            i = i + 1\n        end\n        fib_index\
    \ = fib_index + 1\n    end\n    return fibonacci(fib_index - 1)\nend", "\tlocal\
    \ t = {}\n\tlocal i = 1\n\trepeat\n\t\tt[i] = fib(i)\n\t\tif is_prime(t[i]) then\
    \ n = n - 1 end\n\t\ti = i + 1\n\tuntil n == 0\n\treturn t[i - 1]\nend", "  if\
    \ n == 1 then\n    return 2\n  elseif n == 2 then\n    return 3\n  else\n    local\
    \ i = 3\n    local fn = 5\n    local fn_1 = 3\n    local fn_2 = 2\n    while i\
    \ < n do\n      local temp = fn\n      fn = fn_1 + fn_2\n      fn_2 = fn_1\n \
    \     fn_1 = temp\n      if is_prime(fn) then\n        i = i + 1\n      end\n\
    \    end\n    return fn\n  end\nend", "\tlocal i, f, p = 0, 2, 0\n\twhile i <\
    \ n do\n\t\tif prime(f) then\n\t\t\ti = i + 1\n\t\t\tp = f\n\t\tend\n\t\tf = fib(f)\n\
    \tend\n\treturn p\nend", "\tlocal prev, current = 0, 2\n\tlocal cnt = 0\n\twhile\
    \ cnt < n do\n\t\tlocal t = current\n\t\tcurrent = prev + current\n\t\tprev =\
    \ t\n\t\tif is_prime(current) then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn\
    \ current\nend", "  local x, y = 2, 3\n  local i = 1\n  while true do\n    local\
    \ p = x + y\n    if is_prime(p) then\n      i = i + 1\n      if i == n then\n\
    \        return p\n      end\n    end\n    x, y = y, p\n  end\nend", "  local\
    \ i = 1\n  local fib = fib_table(n)[n]\n  while true do\n    if is_prime(fib)\
    \ then\n      if i == n then\n        return fib\n      end\n      i = i + 1\n\
    \    end\n    fib = fib + 1\n  end\nend", "\tn = n or 1\n\tassert(type(n) == \"\
    number\", \"n must be a number\")\n\tlocal i = 1\n\twhile true do\n\t\tlocal fib\
    \ = fib_num(i)\n\t\tif is_prime(fib) then\n\t\t\tn = n - 1\n\t\t\tif n == 0 then\n\
    \t\t\t\treturn fib\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\nend", "  local i\
    \ = 1\n  local last_prime = 2\n  while i < n do\n    last_prime = fib_prime(last_prime\
    \ + 1)\n    i = i + 1\n  end\n  return last_prime\nend", "  local num_fib = 1\n\
    \  local num_fib_prev = 1\n  local num_fib_prev_prev = 0\n  local num_prime_fib\
    \ = 1\n  local i = 2\n  while num_prime_fib < n do\n    num_fib = num_fib_prev\
    \ + num_fib_prev_prev\n    if math.is_prime(num_fib) then\n      num_prime_fib\
    \ = num_prime_fib + 1\n    end\n    num_fib_prev_prev = num_fib_prev\n    num_fib_prev\
    \ = num_fib\n    i = i + 1\n  end\n  return num_fib\nend", "    local i = 0\n\
    \    local nth\n    for fib in fibs() do\n        if primes.is_prime(fib) then\n\
    \            i = i + 1\n            if i == n then\n                nth = fib\n\
    \                break\n            end\n        end\n    end\n    return nth\n\
    end", "\tlocal a, b = 2, 3\n\tlocal prime_numbers = 0\n\tfor _ in range(2, n)\
    \ do\n\t\ta, b = b, a + b\n\t\tif is_prime(b) then\n\t\t\tprime_numbers = prime_numbers\
    \ + 1\n\t\tend\n\tend\n\treturn a\nend", "  local number = 2\n  local counter\
    \ = 1\n  local result = 0\n  local prime = true\n  while (counter <= n) do\n \
    \   number = number + 1\n    prime = true\n    for i = 2, number - 1 do\n    \
    \  if (number % i == 0) then\n        prime = false\n        break\n      end\n\
    \    end\n    if (is_fib(number) and prime) then\n      result = number\n    \
    \  counter = counter + 1\n    end\n  end\n  return result\nend", "    if n ==\
    \ 1 then\n        return 2\n    elseif n == 2 then\n        return 3\n    elseif\
    \ n == 3 then\n        return 5\n    elseif n == 4 then\n        return 13\n \
    \   elseif n == 5 then\n        return 89\n    else\n        return 0\n    end\n\
    end", "  local fib_list = fibonacci_list(n)\n  local prime_list = primes_in_list(fib_list)\n\
    \  return prime_list[n]\nend", "\tlocal k = 0\n\tlocal a, b = 0, 1\n\twhile k\
    \ < n do\n\t\tlocal x = a + b\n\t\ta, b = b, x\n\t\tif is_prime(x) then\n\t\t\t\
    k = k + 1\n\t\tend\n\tend\n\treturn a\nend", "    local fibs = {0, 1}\n    local\
    \ counter = 0\n    while #fibs < n do\n        fibs[#fibs + 1] = fibs[#fibs -\
    \ 1] + fibs[#fibs]\n        if is_prime(fibs[#fibs]) then\n            counter\
    \ = counter + 1\n        end\n    end\n    return fibs[#fibs], counter\nend",
  "    local i = 1\n    local j = 1\n    local k = 1\n    while k < n do\n       \
    \ local m = i + j\n        i = j\n        j = m\n        if is_prime(m) then\n\
    \            k = k + 1\n        end\n    end\n    return j\nend", "  local ret\n\
    \  local idx = 0\n  for i = 1, n do\n    ret = fib(i)\n    if is_prime(ret) then\n\
    \      idx = idx + 1\n    end\n    if idx == n then\n      return ret\n    end\n\
    \  end\nend", "    local k = 0\n    local m = 0\n    local a = 0\n    local b\
    \ = 1\n    local c = 1\n    while true do\n        if is_prime(c) then\n     \
    \       k = k + 1\n            if k == n then\n                return c\n    \
    \        end\n        end\n        m = a + b\n        a = b\n        b = c\n \
    \       c = m\n    end\nend", "    return prime(fib(n))\nend", "    assert(type(n)\
    \ == \"number\", \"n should be a number\")\n    return prime_fib_loop(1, 1, 0,\
    \ n)\nend", "  local function prime_fib_r(n, a, b)\n    local c = a + b\n    if\
    \ n == 1 then\n      return b\n    elseif is_prime(c) then\n      return prime_fib_r(n\
    \ - 1, b, c)\n    else\n      return prime_fib_r(n, b, c)\n    end\n  end\n  return\
    \ prime_fib_r(n, 0, 1)\nend", "  local found = 0\n  local c = 3\n  while found\
    \ < n do\n    c = c + 1\n    if is_prime(c) and is_fib(c) then\n      found =\
    \ found + 1\n    end\n  end\n  return c\nend", "    assert(type(n) == \"number\"\
    , \"argument must be a number\")\n    assert(n > 0, \"argument must be positive\"\
    )\n    local fib_prime = 2\n    local i = 1\n    local nth_fib = 2\n    local\
    \ nth_fib_1 = 1\n    local nth_fib_2 = 1\n    while i < n do\n        nth_fib\
    \ = nth_fib_1 + nth_fib_2\n        nth_fib_2 = nth_fib_1\n        nth_fib_1 =\
    \ nth_fib\n        if is_prime(nth_fib) then\n            fib_prime = nth_fib\n\
    \            i = i + 1\n        end\n    end\n    return fib_prime\nend", "  \
    \  local count = 0\n    local i = 1\n    local fib = 0\n    while count < n do\n\
    \        fib = fibonacci(i)\n        if is_prime(fib) then\n            count\
    \ = count + 1\n        end\n        i = i + 1\n    end\n    return fib\nend",
  "    local count = 1\n    local curr = 1\n    local next = 1\n    while true do\n\
    \        local c = curr + next\n        curr = next\n        next = c\n      \
    \  if lib.is_prime(c) then\n            count = count + 1\n            if count\
    \ == n then\n                return c\n            end\n        end\n    end\n\
    end", "\tlocal a, b = 2, 3\n\tif n == 1 then return a end\n\tfor i = 2, n do\n\
    \t\tlocal c = a + b\n\t\ta, b = b, c\n\t\tif is_prime(c) then\n\t\t\tn = n - 1\n\
    \t\t\tif n == 0 then return c end\n\t\tend\n\tend\nend", "    local a, b = 2,\
    \ 3\n    for i = 3, n do\n        a, b = b, a + b\n        while not is_prime(b)\
    \ do\n            a, b = b, a + b\n        end\n    end\n    return b\nend", " \
    \ local nums = fib(n)\n  for i, v in ipairs(nums) do\n    if is_prime(v) then\n\
    \      if i == n then\n        return v\n      end\n    end\n  end\nend", "\t\
    if n == 1 then\n\t\treturn 2\n\tend\n\tlocal i = 2\n\tlocal a = 1\n\tlocal b =\
    \ 1\n\tlocal c = 1\n\twhile true do\n\t\tc = a + b\n\t\ta = b\n\t\tb = c\n\t\t\
    if is_prime(c) then\n\t\t\ti = i + 1\n\t\t\tif i == n then\n\t\t\t\treturn c\n\
    \t\t\tend\n\t\tend\n\tend\nend", "    if n < 1 then\n        return nil\n    end\n\
    \    local nth_prime_fib = 2\n    for _, nth_fib in ipairs(fib(n)) do\n      \
    \  if is_prime(nth_fib) then\n            nth_prime_fib = nth_fib\n        end\n\
    \    end\n    return nth_prime_fib\nend", "    local fib = fibonacci(n)\n    local\
    \ prime_fib = nil\n    if is_prime(fib) then\n        prime_fib = fib\n    else\n\
    \        prime_fib = prime_fib(n-1)\n    end\n    return prime_fib\nend", "\t\
    if n == 1 then\n\t\treturn 2\n\tend\n\tlocal idx = 1\n\tlocal f, g = 0, 1\n\t\
    while true do\n\t\tlocal h = f + g\n\t\tf, g = g, h\n\t\tif primetest(h) then\n\
    \t\t\tidx = idx + 1\n\t\t\tif idx == n then\n\t\t\t\treturn h\n\t\t\tend\n\t\t\
    end\n\tend\nend", "    local i = 1\n    while i <= n do\n        if is_prime(fib(i))\
    \ then\n            n = n - 1\n        end\n        i = i + 1\n    end\n    return\
    \ fib(i - 1)\nend", "    local fib, i = 0, 0\n    while n > 0 do\n        fib\
    \ = fibonacci(i)\n        if is_prime(fib) then\n            n = n - 1\n     \
    \   end\n        i = i + 1\n    end\n    return fib\nend", "\tlocal result = 0\n\
    \tlocal i = 1\n\tlocal prev1 = 1\n\tlocal prev2 = 0\n\t\n\twhile i <= n do\n\t\
    \tresult = prev1 + prev2\n\t\tprev2 = prev1\n\t\tprev1 = result\n\t\t\n\t\tif\
    \ is_prime(result) then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\t\n\treturn result\n\
    end", "  local f1, f2 = 1, 1\n  local f = 1\n  local i = 3\n  while i <= n do\n\
    \    f = f1 + f2\n    if is_prime(f) then\n      i = i + 1\n    end\n    f1, f2\
    \ = f2, f\n  end\n  return f\nend", "    local sum = 0\n    local i = 1\n    while\
    \ n > 0 do\n        sum = fib(i)\n        if is_prime(sum) then\n            n\
    \ = n - 1\n        end\n        i = i + 1\n    end\n    return sum\nend", "\t\
    assert(n >= 1, \"invalid parameter\")\n\tlocal f_n = 1\n\tlocal f_n_1 = 1\n\t\
    local idx = 2\n\twhile idx <= n do\n\t\tlocal tmp = f_n\n\t\tf_n = f_n + f_n_1\n\
    \t\tf_n_1 = tmp\n\t\tif is_prime(f_n) then\n\t\t\tidx = idx + 1\n\t\tend\n\tend\n\
    \treturn f_n\nend", "  local first = 2\n  local second = 3\n  local count = 2\n\
    \  local result = second\n  if n == 1 then\n    return first\n  end\n  while count\
    \ < n do\n    result = first + second\n    first = second\n    second = result\n\
    \    if is_prime(result) then\n      count = count + 1\n    end\n  end\n  return\
    \ result\nend", "    local f1, f2 = 2, 3\n    local count = 2\n    local nth =\
    \ f2\n    while count < n do\n        f1, f2 = f2, f1 + f2\n        if is_prime(f2)\
    \ then\n            count = count + 1\n            nth = f2\n        end\n   \
    \ end\n    return nth\nend", "\tlocal cnt = 1\n\tlocal fib_number = fib(1)\n\t\
    local fib_number_next = fib(2)\n\twhile true do\n\t\tif is_prime(fib_number) then\n\
    \t\t\tif cnt == n then\n\t\t\t\treturn fib_number\n\t\t\tend\n\t\t\tcnt = cnt\
    \ + 1\n\t\tend\n\t\tfib_number = fib_number_next\n\t\tfib_number_next = fib(cnt\
    \ + 2)\n\tend\nend", "    local fn1, fn2 = 1, 2\n    local cur = 3\n    for i\
    \ = 2, n do\n        local prime = True\n        for j = 2, math.floor(math.sqrt(cur))\
    \ do\n            if cur % j == 0 then\n                prime = False\n      \
    \          break\n            end\n        end\n        if prime then\n      \
    \      fn1, fn2 = fn2, cur\n        end\n        cur = fn1 + fn2\n    end\n  \
    \  return fn2\nend", "  local i = 1\n  local a = 1\n  local b = 2\n  while n >\
    \ 0 do\n    if is_prime(b) then\n      n = n - 1\n    end\n    if n <= 0 then\n\
    \      return b\n    end\n    a, b = b, a + b\n    i = i + 1\n  end\nend", "\t\
    local fibs = {}\n\tfibs[1] = 2\n\tfibs[2] = 3\n\tlocal i = 2\n\twhile true do\n\
    \t\ti = i + 1\n\t\tfibs[i] = fibs[i-1] + fibs[i-2]\n\t\tif is_prime(fibs[i]) then\n\
    \t\t\tn = n - 1\n\t\t\tif n == 0 then\n\t\t\t\treturn fibs[i]\n\t\t\tend\n\t\t\
    end\n\tend\nend", "  local i = 1\n  local p = 2\n  while i < n do\n    p = next_prime(p)\n\
    \    i = i + 1\n  end\n  return p\nend", "\tlocal fibs = fibr_gen()\n\tlocal c\
    \ = 0\n\tfor i = 1, math.huge do\n\t\tlocal f = fibs()\n\t\tif is_prime(f) then\n\
    \t\t\tc = c + 1\n\t\t\tif c == n then\n\t\t\t\treturn f\n\t\t\tend\n\t\tend\n\t\
    end\nend", "\tlocal i = 1\n\tlocal index = 1\n\twhile i <= n do\n\t\tlocal val\
    \ = fib(index)\n\t\tif is_prime(val) then\n\t\t\ti = i + 1\n\t\tend\n\t\tindex\
    \ = index + 1\n\tend\n\treturn fib(index - 1)\nend", "  local fib = fibonacci()\n\
    \  local i = 1\n  local value = fib()\n  while i < n do\n    value = fib()\n \
    \   if is_prime(value) then\n      i = i + 1\n    end\n  end\n  return value\n\
    end", "\tif n == 1 then\n\t\treturn 2\n\tend\n\tlocal count = 1\n\tlocal curr\
    \ = 2\n\tlocal next_ = 3\n\tlocal fib = 0\n\twhile count ~= n do\n\t\tif is_prime(curr)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\t\tfib = curr + next_\n\t\tcurr = next_\n\
    \t\tnext_ = fib\n\tend\n\treturn curr\nend", "    local fn = fibonacci(n)\n  \
    \  while not is_prime(fn) do\n        n = n + 1\n        fn = fibonacci(n)\n \
    \   end\n    return fn\nend", "    if n < 1 then\n        return nil\n    end\n\
    \    local a, b = 2, 3\n    for _ = 1, n - 1 do\n        a, b = b, a + b\n   \
    \     while not is_prime(b) do\n            a, b = b, a + b\n        end\n   \
    \ end\n    return a\nend", "    assert(n > 0, 'n > 0')\n    if n == 1 then\n \
    \       return 2\n    end\n    local primes = {}\n    for p in gen_primes() do\n\
    \        if p == 2 then\n            table.insert(primes, 2)\n        elseif p\
    \ % 2 == 1 then\n            table.insert(primes, p)\n        end\n        if\
    \ #primes == n then\n            return p\n        end\n    end\nend", "  local\
    \ i = 0\n  local k = 1\n  local j = 0\n  local l = 0\n  while i < n do\n    j\
    \ = k + l\n    if is_prime(j) then\n      i = i + 1\n    end\n    l = k\n    k\
    \ = j\n  end\n  return j\nend", "    -- if n is nil or smaller than 1, return\
    \ nil\n    if n == nil or n < 1 then\n        return nil\n    end", "  local a,\
    \ b = 2, 3\n  if n < 2 then return a end\n  while n > 1 do\n    if is_prime(b)\
    \ then n = n - 1 end\n    a, b = b, a + b\n  end\n  return a\nend", "    local\
    \ fb = fib(n)\n    while not is_prime(fb) do\n        n = n + 1\n        fb =\
    \ fib(n)\n    end\n    return fb\nend", "    if n == 1 then\n        return 2\n\
    \    elseif n == 2 then\n        return 3\n    elseif n == 3 then\n        return\
    \ 5\n    elseif n == 4 then\n        return 13\n    elseif n == 5 then\n     \
    \   return 89\n    else\n        return prime_fib(n-1) + prime_fib(n-2)\n    end\n\
    end", "\tlocal f1, f2 = 2, 3\n\tfor i = 2, n do\n\t\tf1, f2 = f2, f1 + f2\n\t\t\
    while not is_prime(f2) do\n\t\t\tf1, f2 = f2, f1 + f2\n\t\tend\n\tend\n\treturn\
    \ f1\nend", "  if n < 1 then\n    return nil\n  end\n  local fib_num = 2\n  local\
    \ counter = 1\n  for _, fn in ipairs(fib()) do\n    if fn % 2 ~= 0 and is_prime(fn)\
    \ then\n      counter = counter + 1\n      if counter == n then\n        fib_num\
    \ = fn\n        break\n      end\n    end\n  end\n  return fib_num\nend", "\t\
    if n < 1 then\n\t\treturn nil\n\tend\n\tlocal a, b = 1, 1\n\tlocal c = nil\n\t\
    local count = 0\n\twhile n > count do\n\t\tc = a + b\n\t\ta = b\n\t\tb = c\n\t\
    \tif is_prime(c) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn c\nend",
  "\tif n == 1 then\n\t\treturn 2\n\tend\n\t-- F(1) = 1, F(2) = 1.\n\tlocal a, b =\
    \ 1, 1\n\tlocal count = 1\n\twhile count < n do\n\t\ta, b = b, a + b\n\t\tif lib.is_prime(b)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn b\nend", "  -- ===============\
    \ YOUR CODE HERE ===============\n  -- Instructions: return the n-th prime Fibonacci\
    \ number.\n  -- You should use the two functions defined above in your\n  -- solution.\n\
    \  error(\"prime_fib not implemented\")\n  -- ==============================================\n\
    end", "    local i = 1\n    local last = 0\n    local curr = 1\n    local temp\
    \ = 0\n    while i <= n do\n        if is_prime(curr) then\n            i = i\
    \ + 1\n        end\n        temp = curr\n        curr = curr + last\n        last\
    \ = temp\n    end\n    return last\nend", "    local i = 0\n    for v in fibonacci_numbers()\
    \ do\n        if is_prime(v) then\n            i = i + 1\n            if i ==\
    \ n then\n                return v\n            end\n        end\n    end\nend",
  "\tlocal f1, f2 = 1, 1\n\tlocal number = 1\n\tlocal i = 0\n\twhile i ~= n do\n\t\
    \tif lib.math.is_prime(number) then\n\t\t\ti = i + 1\n\t\tend\n\t\tif i == n then\n\
    \t\t\treturn number\n\t\tend\n\t\tnumber = f1 + f2\n\t\tf1, f2 = f2, number\n\t\
    end\nend", "\t--finds the number at n-th Fibonacci number\n\tlocal f = math.ceil(((((1\
    \ + math.sqrt(5)) / 2) ^ n) - (((1 - math.sqrt(5)) / 2) ^ n)) / math.sqrt(5))\n\
    \t--checks if the number is prime\n\tif not is_prime(f) then\n\t\t--if the number\
    \ is not prime, tries the number one higher\n\t\treturn prime_fib(n + 1)\n\telse\n\
    \t\t--if the number is prime, returns the number\n\t\treturn f\n\tend\nend", " \
    \ local n_fib = 1\n  local f1 = 1\n  local f2 = 1\n  local f3 = 1\n  local f4\
    \ = 1\n  local f5 = 1\n  local f6 = 1\n  repeat\n    f1 = f2\n    f2 = f3\n  \
    \  f3 = f4\n    f4 = f5\n    f5 = f6\n    f6 = f1 + f2 + f3 + f4 + f5\n    n_fib\
    \ = n_fib + 1\n  until ((f6 > 2) and prime(f6))\n  return f6\nend", "\tlocal table\
    \ = {}\n\tlocal fib = fibonacci()\n\tlocal temp\n\tlocal count = 0\n\trepeat\n\
    \t\ttemp = fib()\n\t\tif is_prime(temp) then\n\t\t\tcount = count + 1\n\t\t\t\
    table[count] = temp\n\t\tend\n\tuntil count == n\n\treturn table[n]\nend", " \
    \ if n < 1 then return 0 end\n  if n == 1 then return 2 end\n  if n == 2 then\
    \ return 3 end\n  local i = 2\n  local f = {3, 2}\n  local f_next = 0\n  while\
    \ true do\n    f_next = f[i] + f[i-1]\n    if is_prime(f_next) then\n      i =\
    \ i + 1\n      f[i] = f_next\n      if i == n then\n        return f_next\n  \
    \    end\n    end\n  end\nend", "    local pf = fib(n)\n    while not is_prime(pf)\
    \ do\n        pf = fib(n)\n        n = n + 1\n    end\n    return pf\nend", " \
    \   local function findPrime(nn)\n        local function isPrime(n)\n        \
    \    if n == 1 then\n                return false\n            elseif n == 2 then\n\
    \                return true\n            else\n                local m = math.floor(math.sqrt(n))\n\
    \                for d = 2, m do\n                    if math.fmod(n, d) == 0\
    \ then\n                        return false\n                    end\n      \
    \          end\n                return true\n            end\n        end\n  \
    \      local cur = 0\n        local i = 0\n        while i < nn do\n         \
    \   cur = cur + 1\n            if isPrime(cur) then\n                i = i + 1\n\
    \            end\n        end\n        return cur\n    end\n    local function\
    \ isPrime(n)\n        if n == 1 then\n            return false\n        elseif\
    \ n == 2 then\n            return true\n        else\n            local m = math.floor(math.sqrt(n))\n\
    \            for d = 2, m do\n                if math.fmod(n, d) == 0 then\n \
    \                   return false\n                end\n            end\n     \
    \       return true\n        end\n    end\n    local fib\n    if n == 1 then\n\
    \        fib = 2\n    elseif n == 2 then\n        fib = 3\n    else\n        local\
    \ cur = 1\n        local prev = 1\n        local i = 3\n        while i <= n do\n\
    \            local next = cur + prev\n            prev = cur\n            cur\
    \ = next\n            if isPrime(cur) then\n                i = i + 1\n      \
    \      end\n        end\n        fib = cur\n    end\n    local prime = findPrime(n)\n\
    \    return fib, prime\nend", "    local n0, n1 = 0, 1\n    local m = 1\n    while\
    \ m < n do\n        n0, n1 = n1, n0 + n1\n        if is_prime(n1) then\n     \
    \       m = m + 1\n        end\n    end\n    return n1\nend", "  local fib_i =\
    \ fib(n)\n  local fib_i_1 = fib(n-1)\n  local p = fib_i\n  while not is_prime(p)\
    \ do\n    p = fib_i_1 + fib_i\n    fib_i_1 = fib_i\n    fib_i = p\n  end\n  return\
    \ p\nend", "\tlocal c, a, b = 0, 2, 3\n\twhile c ~= n do\n\t\tif is_prime(b) then\n\
    \t\t\tc = c + 1\n\t\tend\n\t\ta, b = b, a + b\n\tend\n\treturn a\nend", "    local\
    \ base_array = {}\n    local previous = 0\n    local current = 1\n    local counter\
    \ = 0\n    if n == 1 then\n        return 2\n    end\n    while n ~= counter do\n\
    \        local next = previous + current\n        base_array[#base_array + 1]\
    \ = next\n        previous = current\n        current = next\n        if is_prime(next)\
    \ then\n            counter = counter + 1\n        end\n    end\n    return base_array[#base_array]\n\
    end", "    if n < 1 then\n        return nil\n    end\n    local a, b = 2, 3\n\
    \    while n > 1 do\n        a, b = b, a + b\n        if is_prime(b) then\n  \
    \          n = n - 1\n        end\n    end\n    return a\nend", "\tlocal fib,\
    \ fibs = 2, {2, 3}\n\tlocal primes = {2, 3}\n\twhile #primes < n do\n\t\tfib,\
    \ fibs = fibs[1] + fibs[2], {fibs[2], fib}\n\t\tif is_prime(fib) then\n\t\t\t\
    table.insert(primes, fib)\n\t\tend\n\tend\n\treturn primes[n]\nend", "  local\
    \ f1, f2 = 2, 3\n  local count = 2\n  while count < n do\n    f1, f2 = f2, f1\
    \ + f2\n    if is_prime(f2) then\n      count = count + 1\n    end\n  end\n  return\
    \ f2\nend", "  local fib_curr = 1\n  local fib_prev = 1\n  local count = 1\n \
    \ while count < n do\n    if lib.is_prime(fib_curr) then\n      count = count\
    \ + 1\n    end\n    local fib_next = fib_curr + fib_prev\n    fib_prev = fib_curr\n\
    \    fib_curr = fib_next\n  end\n  return fib_curr\nend", "    local f1, f2 =\
    \ 1, 1\n    local i = 1\n    while i ~= n do\n        if is_prime(f1) then\n \
    \           i = i + 1\n        end\n        local f3 = f1 + f2\n        f1, f2\
    \ = f2, f3\n    end\n    return f1\nend", "    local result = 1\n    local i =\
    \ 1\n    while i <= n do\n        result = next_prime_fib(result)\n        i =\
    \ i + 1\n    end\n    return result\nend", "  if n < 1 then\n    return nil\n\
    \  end\n  local fib = 1\n  local count = 0\n  local i = 1\n  while count < n do\n\
    \    fib = fibonacci(i)\n    if is_prime(fib) then\n      count = count + 1\n\
    \    end\n    i = i + 1\n  end\n  return fib\nend", "    if n == 1 then\n    \
    \    return 2\n    end\n    if n == 2 then\n        return 3\n    end\n    local\
    \ i = 3\n    local f1 = 2\n    local f2 = 3\n    local fn = 0\n    while i <=\
    \ n do\n        fn = f1 + f2\n        f1 = f2\n        f2 = fn\n        if is_prime(fn)\
    \ then\n            i = i + 1\n        end\n    end\n    return fn\nend", "  local\
    \ len = #prime_fib_cache\n  local index = 1\n  while len < n do\n    len = len\
    \ + 1\n    if is_prime(fib(len)) then\n      index = index + 1\n      prime_fib_cache[index]\
    \ = fib(len)\n    end\n  end\n  return prime_fib_cache[n]\nend", "  local f1,\
    \ f2 = 2, 3\n  local i = 1\n  while i ~= n do\n    f1, f2 = f2, f1 + f2\n    if\
    \ is_prime(f2) then\n      i = i + 1\n    end\n  end\n  return f2\nend", "   \
    \ local i = 1\n    while true do\n        if is_prime(fib(i)) then\n         \
    \   n = n - 1\n            if n == 0 then\n                return fib(i)\n   \
    \         end\n        end\n        i = i + 1\n    end\nend", "    local fn, fn_1,\
    \ fn_2 = 3, 2, 0\n    local f, f_1, f_2 = 1, 1, 0\n    local nn = 1\n    while\
    \ nn < n do\n        fn_2 = fn_1\n        fn_1 = fn\n        f_2 = f_1\n     \
    \   f_1 = f\n        f = f_1 + f_2\n        fn = fn_1 + fn_2\n        if (is_prime(fn))\
    \ then\n            nn = nn + 1\n        end\n    end\n    return fn\nend", "\t\
    if n < 1 then\n\t\treturn nil\n\tend\n\tlocal i = 1\n\tlocal prime = nil\n\twhile\
    \ n > 0 do\n\t\tprime = fibonacci(i)\n\t\tif is_prime(prime) then\n\t\t\tn = n\
    \ - 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn prime\nend", "  local a, b = 1,\
    \ 1\n  for i = 1, n do\n    a, b = b, fib(a + b)\n    if is_prime(b) then\n  \
    \    n = n - 1\n    end\n  end\n  return b\nend", "    local f0, f1 = 0, 1\n \
    \   local m = n\n    while n > 0 do\n        f0, f1 = f1, f0 + f1\n        if\
    \ is_prime(f1) then\n            n = n - 1\n        end\n    end\n    return f1\n\
    end", "    local f0, f1 = 2, 3\n    local count = 2\n    while count ~= n do\n\
    \        local f2 = f0 + f1\n        f0, f1 = f1, f2\n        if is_prime(f2)\
    \ then\n            count = count + 1\n        end\n    end\n    return f1\nend",
  "  if n < 1 then\n    return nil\n  end\n  local f = 1\n  local f2 = 1\n  local\
    \ f3 = 1\n  local k = 1\n  local k2 = 1\n  while k <= n do\n    f3 = f + f2\n\
    \    if is_prime(f3) then\n      k = k + 1\n    end\n    f = f2\n    f2 = f3\n\
    \  end\n  return f3\nend", "\tlocal i, j, k, count = 1, 1, 0, 0\n\tif n == 1 then\
    \ return 2 end\n\twhile count < n do\n\t\tk = i + j\n\t\ti = j\n\t\tj = k\n\t\t\
    if is_prime(k) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn k\nend",
  "  local i, a, b = 1, 1, 1\n  while i < n do\n    a, b = b, a + b\n    if is_prime(b)\
    \ then\n      i = i + 1\n    end\n  end\n  return b\nend", "    local a, b = 1,\
    \ 1\n    local i = 0\n    while i < n do\n        a, b = b, a + b\n        if\
    \ prime.is(b) then\n            i = i + 1\n        end\n    end\n    return b\n\
    end", "  -- Checks if n is a prime number.\n  --\n  -- n: integer\n  --\n  --\
    \ returns: boolean\n  local function is_prime(n)\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end", "  local pf = 2\n  local i = 1\n  while i < n do\n    local\
    \ fn = fib(pf)\n    if is_prime(fn) then\n      i = i + 1\n    end\n    pf = pf\
    \ + 1\n  end\n  return fib(pf)\nend", "  local t = {2, 3}\n  while #t < n do\n\
    \    local a, b = t[#t-1], t[#t]\n    if is_prime(a+b) then\n      table.insert(t,\
    \ a+b)\n    end\n  end\n  return t[n]\nend", "\tlocal function is_prime(n)\n\t\
    \tlocal max_divisor = math.floor(math.sqrt(n))\n\t\tfor divisor = 2, max_divisor\
    \ do\n\t\t\tif (n % divisor) == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend", '    n = n or 1', "    -- Your code goes here.\n\
    \    return 1\nend", "  if is_prime(fib(n)) then\n    return fib(n)\n  else\n\
    \    return prime_fib(n+1)\n  end\nend", "  local prime = false\n  local i = 2\n\
    \  while not prime do\n    i = i + 1\n    local fib = fibonacci(i)\n    if is_prime(fib)\
    \ then\n      n = n - 1\n      if n == 0 then\n        return fib\n      end\n\
    \    end\n  end\nend", "    if n == 1 then\n        return 2\n    end\n    local\
    \ c = 0\n    local i = 3\n    while c < n do\n        if is_prime(i) and is_fib(i)\
    \ then\n            c = c + 1\n        end\n        i = i + 2\n    end\n    return\
    \ i - 2\nend", "    local pfib_n, pfib_n1, pfib_n2 = 0, 0, 0\n    local i = 1\n\
    \    while true do\n        if is_prime(fib(i)) then\n            pfib_n2 = pfib_n1\n\
    \            pfib_n1 = pfib_n\n            pfib_n = fib(i)\n            i = i\
    \ + 1\n            if n == 1 then\n                return pfib_n\n           \
    \ end\n            n = n - 1\n        else\n            i = i + 1\n        end\n\
    \    end\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 1\n    local i = 2\n    local a, b = 0, 1\n    local fib = 0\n    while count\
    \ < n do\n        fib = a + b\n        if is_prime(fib) then\n            count\
    \ = count + 1\n        end\n        a, b = b, fib\n    end\n    return fib\nend",
  "\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal k\n\twhile count < n do\n\
    \t\tk = i + j\n\t\tif is_prime(k) then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\
    i = j\n\t\tj = k\n\tend\n\treturn k\nend", "    local number = 1\n    for i =\
    \ 2, n do\n        number = number + prime_fib(i - 1)\n        while not is_prime(number)\
    \ do\n            number = number + 1\n        end\n    end\n    return number\n\
    end", "\tassert(n >= 1)\n\tlocal a, b = 2, 3\n\tfor i = 1, n-1 do\n\t\ta, b =\
    \ b, a + b\n\t\twhile not is_prime(b) do\n\t\t\tb = b + a\n\t\tend\n\tend\n\t\
    return a\nend", "  assert(n > 0, \"n must be > 0\")\n  local fb = fib(n)\n  local\
    \ i = 1\n  while true do\n    if(pb(fb[i])) then\n      n = n - 1\n      if(n\
    \ == 0) then\n        return fb[i]\n      end\n    end\n    i = i + 1\n  end\n\
    end", "    local p, q = 2, 3\n    for i = 2, n do\n        local r = p + q\n \
    \       p, q = q, r\n        while not isprime(q) do\n            q = q + p\n\
    \        end\n    end\n    return q\nend", "    return prime_fib_list[n]\nend",
  "    if n < 0 then\n        error(\"Index is negative!\")\n    end\n    local i\
    \ = 0\n    local x = 0\n    local y = 1\n    local z = 1\n    while i < n do\n\
    \        if is_prime(z) then\n            i = i + 1\n        end\n        x =\
    \ y\n        y = z\n        z = x + y\n    end\n    return z\nend", "    if n\
    \ == 1 then\n        return 2\n    elseif n == 2 then\n        return 3\n    elseif\
    \ n == 3 then\n        return 5\n    elseif n == 4 then\n        return 13\n \
    \   elseif n == 5 then\n        return 89\n    else\n        error(\"prime_fib:\
    \ Unsupported index: \" .. n .. \" is too big\")\n    end\nend", "\tlocal a =\
    \ 1\n\tlocal b = 2\n\tlocal c = 0\n\tlocal f = 2\n\tlocal p = 1\n\twhile f < n\
    \ do\n\t\tc = a + b\n\t\ta = b\n\t\tb = c\n\t\tif prime(b) then\n\t\t\tf = f +\
    \ 1\n\t\t\tp = b\n\t\tend\n\tend\n\treturn p\nend", "  local count = 0\n  local\
    \ fib = 1\n  local prev_fib = 1\n  while true do\n    local tmp = fib\n    fib\
    \ = fib + prev_fib\n    prev_fib = tmp\n    if is_prime(fib) then\n      count\
    \ = count + 1\n      if count == n then\n        return fib\n      end\n    end\n\
    \  end\nend", "    local num = 3\n    local p_count = 2\n    local fibs = 2\n\
    \    while p_count < n do\n        if is_prime(num) then\n            p_count\
    \ = p_count + 1\n            if fibs == num then\n                fibs = fib_sum(fibs)\n\
    \            end\n        end\n        num = num + 2\n    end\n    return num\
    \ - 2\nend", "\tlocal list = {}\n\tlocal function is_prime(n)\n\t\tlocal i = 2\n\
    \t\twhile i < n do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\t\ti = i + 1\n\t\tend\n\t\treturn true\n\tend\n\tlocal a, b = 0, 1\n\tlocal\
    \ c = a + b\n\twhile true do\n\t\tif is_prime(c) then\n\t\t\tn = n - 1\n\t\t\t\
    if n == 0 then\n\t\t\t\treturn c\n\t\t\tend\n\t\tend\n\t\ta = b\n\t\tb = c\n\t\
    \tc = a + b\n\tend\nend", "    local i = 1\n    local j = 1\n    local k = 1\n\
    \    while k < n do\n        local fib = i + j\n        if is_prime(fib) then\n\
    \            k = k + 1\n        end\n        i = j\n        j = fib\n    end\n\
    \    return j\nend", "  local p = 2\n  for x = 3, math.huge do\n    if is_prime(x)\
    \ then\n      p = p + 1\n      if p == n then\n        return x\n      end\n \
    \   end\n  end\nend", "  local i, f1, f2 = 1, 2, 3\n  while i < n do\n    f1,\
    \ f2 = f2, f1 + f2\n    if isprime(f2) then\n      i = i + 1\n    end\n  end\n\
    \  return f1\nend", "    return prime_fib_recur(n, 1, 1, 2)\nend", "\tlocal i\
    \ = 2\n\tlocal j = 3\n\tlocal n1, n2 = 2, 3\n\tlocal cnt = 0\n\twhile (cnt < n)\
    \ do\n\t\tif is_prime(j) then\n\t\t\tcnt = cnt + 1\n\t\t\tn1, n2 = n2, j\n\t\t\
    end\n\t\ti, j = j, i + j\n\tend\n\treturn n1\nend", "\tlocal fib, fib_prime, count\
    \ = 1, 2, 1\n\twhile count < n do\n\t\tfib, fib_prime = fib_prime, fib_prime +\
    \ fib\n\t\tcount = count + 1\n\t\twhile not isprime(fib_prime) do\n\t\t\tfib,\
    \ fib_prime = fib_prime, fib_prime + fib\n\t\tend\n\tend\n\treturn fib_prime\n\
    end", "  local i = 0\n  local fib = 0\n  while i < n do\n    fib = next_prime_fib(fib)\n\
    \    i = i + 1\n  end\n  return fib\nend", "    local i = 1\n    local fib, fib_next\
    \ = 2, 3\n    local count = 1\n    while true do\n        if count == n then\n\
    \            return fib\n        end\n        fib, fib_next = fib_next, fib +\
    \ fib_next\n        if is_prime(fib) then\n            count = count + 1\n   \
    \     end\n    end\nend", "\treturn prime_fib_aux(n, fibonacci(), 1)\nend", " \
    \   local count = 0\n    local i = 0\n    while count < n do\n        i = i +\
    \ 1\n        if is_prime(fib(i)) then\n            count = count + 1\n       \
    \ end\n    end\n    return fib(i)\nend", "  return fib(n)\nend", "    -- TODO:\
    \ implement this\n    local y = 1\n    local k = 1\n    local fib = 1\n    while\
    \ y < n do\n        k = k + 1\n        fib = fibonacci(k)\n        if is_prime(fib)\
    \ then\n            y = y + 1\n        end\n    end\n    return fib\nend", " \
    \   local function is_prime(x)\n        for j = 2, math.sqrt(x) do\n         \
    \   if x % j == 0 then\n                return false\n            end\n      \
    \  end\n        return true\n    end", "    local x = 2\n    while n > 0 do\n\
    \        x = prime_fib_(x)\n        n = n - 1\n    end\n    return x\nend", " \
    \   local x,y,z,i=0,1,1,1\n    while(i<n) do\n        x,y,z,i=y,z,x+y,i+1\n  \
    \      if(not isPrime(z)) then i=i-1 end\n    end\n    return z\nend", "    local\
    \ m=1\n    local v=0\n    local fib, fib_prev=2, 1\n    while m<n do\n       \
    \ if is_prime(fib) then\n            m=m+1\n            v=fib\n        end\n \
    \       fib, fib_prev=fib+fib_prev, fib\n    end\n    return v\nend", "    local\
    \ current_fib = 1\n    local next_fib = 1\n    local num_prime_fib = 0\n    while\
    \ num_prime_fib < n do\n        local temp = current_fib\n        current_fib\
    \ = next_fib\n        next_fib = next_fib + temp\n        if is_prime(current_fib)\
    \ then\n            num_prime_fib = num_prime_fib + 1\n        end\n    end\n\
    \    return current_fib\nend", "    local i = 1\n    local f = 2\n    local count\
    \ = 0\n    local fib = fibonacci(f)\n    while count < n do\n        if is_prime(fib)\
    \ then\n            count = count + 1\n        end\n        f = f + 1\n      \
    \  fib = fibonacci(f)\n    end\n    return fib\nend", "    local x = fib(n)\n\
    \    while (not is_prime(x)) do\n        x = fib(n)\n        n = n + 1\n    end\n\
    \    return x\nend", "    -- TODO: return n-th prime fibonacci number.\n    return\
    \ nil\nend", "\tlocal i, f1, f2 = 1, 2, 1\n\twhile i < n do\n\t\tf1, f2 = f1 +\
    \ f2, f1\n\t\tif is_prime(f1) then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ f1\nend", "\tlocal i = 1\n\tlocal counter = 0\n\twhile counter ~= n do\n\t\t\
    i = i + 1\n\t\tif is_prime(i) and is_fib(i) then\n\t\t\tcounter = counter + 1\n\
    \t\tend\n\tend\n\treturn i\nend", "    local n2, n1 = 2, 3\n    local nf, i =\
    \ 2, 1\n    while i < n do\n        local nf = n2 + n1\n        n2, n1 = n1, nf\n\
    \        if is_prime(nf) then\n            i = i + 1\n        end\n    end\n \
    \   return nf\nend", "    local i = 1\n    local f = fib(i)\n    while n > 0 do\n\
    \        if is_prime(f) then\n            n = n - 1\n        end\n        i =\
    \ i + 1\n        f = fib(i)\n    end\n    return f\nend", "    return head(filter(is_prime,\
    \ fibs(n)))\nend", "\tlocal f = 1\n\tlocal fp = 1\n\tlocal fpp = 1\n\tlocal i\
    \ = 1\n\twhile i < n do\n\t\tfpp = fp\n\t\tfp = f\n\t\tf = fp + fpp\n\t\tif f>1\
    \ and is_prime(f) then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn f\nend", " \
    \   assert(n > 0)\n    local fibs = prime_fibs(n)\n    return fibs[#fibs]\nend",
  "  local fibs = {2, 3}\n  local i = 2\n  while i < n do\n    i = i + 1\n    fibs[i]\
    \ = fibs[i-1] + fibs[i-2]\n    if not is_prime(fibs[i]) then i = i - 1 end\n \
    \ end\n  return fibs[n]\nend", "  local i = 2\n  local f = 1\n  local g = 2\n\
    \  local c = 0\n  while true do\n    local h = f + g\n    f = g\n    g = h\n \
    \   i = i + 1\n    if is_prime(g) then\n      c = c + 1\n      if c == n then\n\
    \        return g\n      end\n    end\n  end\nend", "  local first = 1\n  local\
    \ second = 1\n  local count = 2\n  local result = 1\n  while count < n do\n  \
    \  result = first + second\n    first = second\n    second = result\n    if is_prime(result)\
    \ then\n      count = count + 1\n    end\n  end\n  return result\nend", "\tassertx.is_natural(n)\n\
    \tlocal a, b = 2, 3\n\tfor i = 2, n do\n\t\ta, b = b, a + b\n\t\twhile not is_prime(b)\
    \ do\n\t\t\tb = b + a\n\t\tend\n\tend\n\treturn b\nend", "    if n == 1 then\n\
    \        return 2\n    elseif n == 2 then\n        return 3\n    elseif n == 3\
    \ then\n        return 5\n    elseif n == 4 then\n        return 13\n    elseif\
    \ n == 5 then\n        return 89\n    else\n        local prime_fib1 = 2\n   \
    \     local prime_fib2 = 3\n        local prime_fib3 = 5\n        local prime_fib4\
    \ = 13\n        local prime_fib5 = 89\n        for i = 6, n do\n            prime_fib1\
    \ = prime_fib2\n            prime_fib2 = prime_fib3\n            prime_fib3 =\
    \ prime_fib4\n            prime_fib4 = prime_fib5\n            prime_fib5 = prime_fib1\
    \ + prime_fib2 + prime_fib3 + prime_fib4\n        end\n        return prime_fib5\n\
    \    end\nend", "    local num = 2\n    local tmp = 0\n    local count = 1\n \
    \   while count < n do\n        tmp = fib(num)\n        if is_prime(tmp) then\n\
    \            count = count + 1\n        end\n        num = num + 1\n    end\n\
    \    return tmp\nend", "    local i = 0\n    local a = 0\n    local b = 1\n  \
    \  local c = 1\n    while i < n do\n        if is_prime(c) then\n            i\
    \ = i + 1\n        end\n        a = b\n        b = c\n        c = a + b\n    end\n\
    \    return c\nend", "    local i = 1\n    local cur = 2\n    local counter =\
    \ 1\n    while counter ~= n do\n        if is_prime(cur) then\n            counter\
    \ = counter + 1\n        end\n        cur = fib(i)\n        i = i + 1\n    end\n\
    \    return cur\nend", "  local x1, x2 = 2, 3\n  local i = 2\n  while i < n do\n\
    \    x1, x2 = x2, x1 + x2\n    if is_prime(x2) then\n      i = i + 1\n    end\n\
    \  end\n  return x2\nend", "    local i = 0\n    local j = 0\n    local k = 0\n\
    \    local l = 0\n    for i = 0, n do\n        j = fib(i)\n        for k = 2,\
    \ math.floor(math.sqrt(j)) do\n            if j % k == 0 then\n              \
    \  break\n            end\n        end\n        if k > math.floor(math.sqrt(j))\
    \ then\n            l = l + 1\n            if l == n then\n                return\
    \ j\n            end\n        end\n    end\nend", "  return (fib(n))\nend", "\t\
    local i, j, t, c = 1, 1, 1, 0\n\twhile c < n do\n\t\tt = i + j\n\t\ti, j = j,\
    \ t\n\t\tif is_prime(t) then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn t\nend",
  "  local i = 0\n  local fn = 0\n  local prev = 1\n  local current = 1\n  while i\
    \ < n do\n    fn = prev + current\n    prev = current\n    current = fn\n    if\
    \ util.is_prime(fn) then\n      i = i + 1\n    end\n  end\n  return fn\nend",
  "  local n1, n2 = 1, 1\n  local i = 1\n  local count = 0\n  while count < n do\n\
    \    n1, n2 = n2, n1 + n2\n    if prime(n2) then\n      count = count + 1\n  \
    \  end\n  end\n  return n2\nend", "    local i = 1\n    local num_primes = 1\n\
    \    while num_primes < n do\n        i = i + 1\n        if is_prime(fib(i)) then\n\
    \            num_primes = num_primes + 1\n        end\n    end\n    return fib(i)\n\
    end", "  assert(n >= 1, \"n must be >= 1\")\n  local f = 1\n  local fib_n = 1\n\
    \  local fib_m = 0\n  local count = 0\n  while count < n do\n    if is_prime(fib_n)\
    \ then\n      count = count + 1\n    end\n    f = fib_n + fib_m\n    fib_m = fib_n\n\
    \    fib_n = f\n  end\n  return fib_n\nend", "\tlocal count = 1\n\tlocal c, p\
    \ = 2, 1\n\twhile count < n do\n\t\tc, p = c + p, c\n\t\tif is_prime(c) then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn c\nend", "    local p = 1\n\
    \    local c = 1\n    local i = 2\n    local r = 0\n    while r < n do\n     \
    \   c = p + c\n        p = c - p\n        if is_prime(c) then\n            r =\
    \ r + 1\n        end\n        i = i + 1\n    end\n    return c\nend", "    local\
    \ limit = 10^(n-1)\n    local f_n, f_n_2, f_n_1 = 1, 1, 2\n    while f_n < limit\
    \ do\n        f_n, f_n_2, f_n_1 = f_n_1, f_n_1 + f_n_2, f_n_1 + 2*f_n_2\n    end\n\
    \    return f_n\nend", "  local i = 0\n  local fib_i, fib_j = 1, 1\n  while i\
    \ < n do\n    if is_prime(fib_i) then\n      i = i + 1\n    end\n    fib_i, fib_j\
    \ = fib_j, fib_i + fib_j\n  end\n  return fib_i\nend", "    local a, b = 2, 3\n\
    \    if n == 1 then\n        return a\n    elseif n == 2 then\n        return\
    \ b\n    end\n    for _ = 3, n do\n        a, b = b, a + b\n        while not\
    \ is_prime(b) do\n            a, b = b, a + b\n        end\n    end\n    return\
    \ b\nend", "  local fib, i = math.huge, 0\n  while true do\n    fib = fibonacci(i)\n\
    \    if is_prime(fib) then\n      n = n - 1\n      if n == 0 then\n        return\
    \ fib\n      end\n    end\n    i = i + 1\n  end\nend", "    assert(n > 0, \"Parameter\
    \ n should be positive!\")\n    local fib_list = fibonacci_list(n)\n    local\
    \ count = 0\n    local i = 2\n    while count < n do\n        if is_prime(fib_list[i])\
    \ then\n            count = count + 1\n        end\n        i = i + 1\n    end\n\
    \    return fib_list[i - 1]\nend", "    -- Write your code here\n    local fibs\
    \ = {2, 3}\n    local k = 2\n    while k <= n do\n        local next_fib = fibs[k]\
    \ + fibs[k-1]\n        local max_index = math.floor(math.sqrt(next_fib))\n   \
    \     local j = 1\n        while fibs[j] <= max_index do\n            if next_fib\
    \ % fibs[j] == 0 then\n                break\n            end\n            j =\
    \ j + 1\n        end\n        if fibs[j] > max_index then\n            fibs[k+1]\
    \ = next_fib\n            k = k + 1\n        end\n    end\n    return fibs[n]\n\
    end", "\tif n == 1 then\n\t\treturn 2\n\tend\n\tlocal i = 2\n\tlocal j = 3\n\t\
    local k = 2\n\twhile n > k do\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\t\
    end\n\t\tlocal t = i + j\n\t\ti = j\n\t\tj = t\n\tend\n\treturn j\nend", "   \
    \ local pfib = {2, 3, 5, 13, 89}\n    for i = #pfib+1, n do\n        local n1,\
    \ n2 = pfib[i-1], pfib[i-2]\n        local f\n        repeat\n            f =\
    \ n1 + n2\n            n1, n2 = n2, f\n        until is_prime(f)\n        pfib[i]\
    \ = f\n    end\n    return pfib[n]\nend", "\tlocal cnt, a, b = 0, 1, 1\n\twhile\
    \ true do\n\t\tlocal t = a + b\n\t\ta, b = b, t\n\t\tif is_prime(t) then\n\t\t\
    \tcnt = cnt + 1\n\t\t\tif cnt == n then\n\t\t\t\treturn t\n\t\t\tend\n\t\tend\n\
    \tend\nend", "    local pf = {2, 3, 5, 13, 89}\n    if n <= #pf then\n       \
    \ return pf[n]\n    end\n    local k = #pf\n    local f1, f2 = 89, 2 * 89\n  \
    \  while true do\n        if isprime(f1 + f2) then\n            k = k + 1\n  \
    \          if k == n then\n                return f1 + f2\n            end\n \
    \       end\n        f1, f2 = f2, f1 + f2\n    end\nend", "\tassert(type(n) ==\
    \ \"number\", \"Argument must be of type 'number'.\")\n\tlocal count = 1\n\tlocal\
    \ i = 2\n\tlocal prime_fib = 1\n\twhile count < n do\n\t\tprime_fib = prime_fib\
    \ + i\n\t\tif is_prime(prime_fib) then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\
    i = i + 1\n\tend\n\treturn prime_fib\nend", "  local f1, f2 = 1, 1\n  local fib\n\
    \  local i = 0\n  while i < n do\n    fib = f1 + f2\n    f1, f2 = f2, fib\n  \
    \  if is_prime(fib) then\n      i = i + 1\n    end\n  end\n  return fib\nend",
  "  local primes = prime_sieve(n)\n  local fib = fibonacci(n)\n  for i,v in ipairs(fib)\
    \ do\n    for j,w in ipairs(primes) do\n      if v == w then\n        return v\n\
    \      end\n    end\n  end\nend", "  local p_fib = 0\n  local fib = fibonacci(n)\n\
    \  local i = 1\n  while i <= fib do\n    if is_prime(i) then\n      p_fib = i\n\
    \    end\n    i = i + 1\n  end\n  return p_fib\nend", "  local fib = fibonacci(n)\n\
    \  while not is_prime(fib) do\n    fib = fibonacci(n)\n    n = n + 1\n  end\n\
    \  return fib\nend", "  local i, fn, fn_ = 1, 1, 1\n  while i ~= n do\n    if\
    \ is_prime(fn) then\n      i = i + 1\n    end\n    fn, fn_ = fn + fn_, fn\n  end\n\
    \  return fn\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
