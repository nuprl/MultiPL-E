name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a list of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- tri(3) = [1, 3, 2,\
  \ 8]\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tif n == 0 then\n\t\treturn {0}\n\telseif n == 1 then\n\t\treturn\
    \ {1, 3}\n\telseif n == 2 then\n\t\treturn {1, 3, 2}\n\telse\n\t\tlocal res =\
    \ {1, 3, 2}\n\t\tfor i = 3, n do\n\t\t\tres[i + 1] = (i % 2 == 0) and (1 + i /\
    \ 2) or (res[i] + res[i - 1] + res[i + 1 - 2])\n\t\tend\n\t\treturn res\n\tend\n\
    end", "  return sequence(n, {3, 2, 1}, function(a, i)\n    return a[1] + a[2]\
    \ + a[3]\n  end)\nend", "\tlocal m = n\n\tlocal res = {}\n\tlocal i = 1\n\twhile\
    \ m > 0 do\n\t\tlocal function _tri(x)\n\t\t\tif x == 1 then\n\t\t\t\treturn 3\n\
    \t\t\telseif x == 2 then\n\t\t\t\treturn 2\n\t\t\telseif x == 3 then\n\t\t\t\t\
    return 8\n\t\t\telseif x % 2 == 0 then\n\t\t\t\treturn 1 + x / 2\n\t\t\telse\n\
    \t\t\t\treturn _tri(x - 1) + _tri(x - 2) + _tri(x + 1)\n\t\t\tend\n\t\tend\n\t\
    \tres[i] = _tri(m)\n\t\tm = m - 1\n\t\ti = i + 1\n\tend\n\treturn res\nend", " \
    \  local t = {1, 3, 2}\n   for i = 4, n do\n      if i % 2 == 0 then\n       \
    \  t[i] = 1 + i / 2\n      else\n         t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n\
    \      end\n   end\n   return t\nend", "    local function f(a, b, c, n)\n   \
    \     if n == 0 then return a end\n        if n % 2 == 0 then return f(b, c, a\
    \ + b + c, n - 1) end\n        return f(a, a + b + c, b, n - 1)\n    end\n   \
    \ return f(1, 3, 2, n)\nend", "    local a = 0\n    local b = 0\n    local c =\
    \ 1\n    local r = {}\n    for i = 1, n do\n        r[i] = c\n        c = a +\
    \ b + c\n        a = b\n        b = c\n    end\n    return r\nend", "    -- Your\
    \ code here!\n    local tab = {1, 3, 2}\n    for i = 3, n do\n        if i % 2\
    \ == 0 then\n            tab[i + 1] = 1 + i / 2\n        else\n            tab[i\
    \ + 1] = tab[i] + tab[i - 1] + tab[i - 2]\n        end\n    end\n    return tab\n\
    end", "  if n < 2 then return {1, 3} end\n  local seq = {1, 3, 2}\n  for i = 3,\
    \ n + 1 do\n    local a, b, c = unpack(seq, #seq - 2, #seq)\n    table.insert(seq,\
    \ (i % 2 == 0) and a + b + c or 1 + i / 2)\n  end\n  return seq\nend", "  local\
    \ ret = {1, 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      ret[i]\
    \ = 1 + i / 2\n    else\n      ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1]\n\
    \    end\n  end\n  return ret\nend", "  local t = {3, 2, 1}\n  for i = 1, n do\n\
    \    if i % 2 == 0 then\n      t[i+1] = i / 2 + 1\n    else\n      t[i+1] = t[i]\
    \ + t[i-1] + t[i-2]\n    end\n  end\n  return t\nend", "    local function calc(n)\n\
    \        if n == 1 then return 3 end\n        if n % 2 == 0 then return 1 + n\
    \ / 2 end\n        return calc(n - 1) + calc(n - 2) + calc(n + 1)\n    end\n \
    \   local list = {}\n    for i = 1, n + 1 do list[i] = calc(i) end\n    return\
    \ list\nend", "\tif n <= 1 then\n\t\treturn {3}\n\tend\n\tif n == 2 then\n\t\t\
    return {1, 3, 2}\n\tend\n\tlocal result = {1, 3, 2}\n\tfor i = 3, n do\n\t\tlocal\
    \ a = result[i - 2]\n\t\tlocal b = result[i - 1]\n\t\tlocal c = result[i]\n\t\t\
    local next = i % 2 == 0 and 1 + i / 2 or a + b + c\n\t\ttable.insert(result, next)\n\
    \tend\n\treturn result\nend", "  local result = {1, 3, 2}\n  for i = 4, n + 1\
    \ do\n    result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n  end\n \
    \ return result\nend", "    local ret = {1, 3, 2}\n    for i = 3, n, 1 do\n  \
    \      local j = math.fmod(i, 2)\n        if j == 0 then\n            table.insert(ret,\
    \ math.floor(1 + i / 2))\n        else\n            table.insert(ret, ret[i -\
    \ 1] + ret[i - 2] + ret[i + 1])\n        end\n    end\n    return ret\nend", " \
    \ local function iter(r, m)\n    if #r == n + 1 then return r end\n    r[#r +\
    \ 1] = m(r)\n    return iter(r, m)\n  end\n  return iter({1}, function(r)\n  \
    \  return 1 + ((#r % 2 == 0) and (#r / 2) or (r[#r - 2] + r[#r - 1] + r[#r + 1]))\n\
    \  end)\nend", "  local ret = {[0] = 1, [1] = 3, [2] = 2}\n  for i = 3, n do\n\
    \    ret[i] = 1 + i / 2\n    if i % 2 == 1 then\n      ret[i] = ret[i] + ret[i\
    \ - 1] + ret[i - 2] + ret[i + 1]\n    end\n  end\n  return ret\nend", "    --\
    \ your code here\n    local result = {}\n    for i = 1, n + 1 do\n        if i\
    \ == 1 then\n            result[#result + 1] = 1\n        elseif i == 2 then\n\
    \            result[#result + 1] = 3\n        elseif i == 3 then\n           \
    \ result[#result + 1] = 2\n        else\n            result[#result + 1] = (result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        end\n    end\n    return result\n\
    end", "  -- your code here\nend", "    local t = {1, 3, 2}\n    for i = 4, n +\
    \ 1 do\n        if i % 2 == 0 then\n            t[i] = 1 + i / 2\n        else\n\
    \            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n   \
    \ return t\nend", "  local ret = {1, 3, 2}\n  for i = 3, n do\n    ret[i + 1]\
    \ = ret[i] + ret[i - 1] + ret[i - 2]\n  end\n  return ret\nend", "  local dp =\
    \ {1, 3, 2}\n  for i = 4, n + 1 do\n    local num = dp[i - 1] + dp[i - 2] + dp[i\
    \ - 3]\n    dp[i] = num\n  end\n  return dp\nend", "    local seq = { 1, 3, 2\
    \ }\n    local m = n + 1\n    for i = 4, m do\n        if i % 2 == 0 then\n  \
    \          seq[i] = 1 + i / 2\n        else\n            seq[i] = seq[i - 1] +\
    \ seq[i - 2] + seq[i + 1]\n        end\n    end\n    return seq\nend", "  local\
    \ sequence = {1, 3, 2}\n  for i = 4, n do\n    local x = sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i - 3]\n    sequence[i] = (i % 2 == 0) and math.floor(1 + i\
    \ / 2) or x\n  end\n  return sequence\nend", "  if n < 1 then return nil end\n\
    \  local tri = {1, 3, 2}\n  for i = 3, n do\n    local val = tri[i] + tri[i -\
    \ 1] + tri[i - 2]\n    table.insert(tri, val)\n  end\n  return tri\nend", "  \
    \  local result = {1, 3, 2}\n    for i = 4, n + 1 do\n        if i % 2 == 0 then\n\
    \            result[i] = 1 + i / 2\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        end\n    end\n    return result\n\
    end", "    local t = {1, 3, 2}\n    for i = 4, n + 1 do\n        local n = t[i\
    \ - 1] + t[i - 2] + t[i - 3]\n        table.insert(t, n)\n    end\n    return\
    \ t\nend", "    local result = {1, 3, 2}\n    for i = 3, n do\n        if i %\
    \ 2 == 0 then\n            result[i + 1] = 1 + i / 2\n        else\n         \
    \   result[i + 1] = result[i] + result[i - 1] + result[i + 1 - 1]\n        end\n\
    \    end\n    return result\nend", "  local output = {1, 3, 2}\n  if n == 0 then\n\
    \    return {}\n  elseif n < 3 then\n    return output[1], output[2], output[3]\n\
    \  end\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      output[i] = 1 + i\
    \ / 2\n    else\n      output[i] = output[i - 1] + output[i - 2] + output[i +\
    \ 1]\n    end\n  end\n  return output\nend", "    local t = {1, 3, 2}\n    if\
    \ n == 0 then return {0} end\n    if n == 1 then return {1} end\n    if n == 2\
    \ then return {1, 3} end\n    if n == 3 then return {1, 3, 2} end\n    for i =\
    \ 4, n do\n        if i % 2 == 0 then\n            t[i] = math.floor(i / 2) +\
    \ 1\n        else\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n       \
    \ end\n    end\n    return t\nend", "  local function tri_iter(i, a, b, c)\n \
    \   if i == n then return a end\n    local d = a + b + c\n    if math.fmod(i,\
    \ 2) == 0 then d = 1 + i / 2 end\n    return tri_iter(i + 1, b, c, d)\n  end\n\
    \  return tri_iter(0, 0, 0, 1)\nend", "    local function tri_(x)\n        if\
    \ x == 1 then\n            return 3\n        elseif x % 2 == 0 then\n        \
    \    return 1 + x / 2\n        else\n            return tri_(x - 1) + tri_(x -\
    \ 2) + tri_(x + 1)\n        end\n    end\n    local res = {}\n    for i = 1, n\
    \ + 1 do\n        res[i] = tri_(i)\n    end\n    return res\nend", "  local r\
    \ = { 1, 3, 2 }\n  for i = 4, n + 1 do\n    r[i] = r[i - 1] + r[i - 2] + r[i -\
    \ 3]\n  end\n  return r\nend", end, "    local function f(n)\n        if n ==\
    \ 1 then\n            return 3\n        elseif n % 2 == 0 then\n            return\
    \ 1 + n / 2\n        else\n            return f(n - 1) + f(n - 2) + f(n + 1)\n\
    \        end\n    end\n    return {f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8),\
    \ f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19),\
    \ f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29), f(30),\
    \ f(31), f(32), f(33), f(34), f(35), f(36), f(37), f(38), f(39), f(40), f(41),\
    \ f(42), f(43), f(44), f(45), f(46), f(47), f(48), f(49), f(50), f(51), f(52),\
    \ f(53), f(54), f(55), f(56), f(57), f(58), f(59), f(60), f(61), f(62), f(63),\
    \ f(64), f(65), f(66), f(67), f(68), f(69), f(70), f(71), f(72), f(73), f(74),\
    \ f(75), f(76), f(77), f(78), f(79), f(80), f(81), f(82), f(83), f(84), f(85),\
    \ f(86), f(87), f(88), f(89), f(90), f(91), f(92), f(93), f(94), f(95), f(96),\
    \ f(97), f(98), f(99), f(100), f(101), f(102), f(103), f(104), f(105), f(106),\
    \ f(107), f(108), f(109), f(110", "    local result = {1, 3, 2}\n    local max\
    \ = n + 1\n    for i = 4, max do\n        if i % 2 == 0 then\n            result[i]\
    \ = 1 + i / 2\n        else\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1]\n        end\n    end\n    return result\nend", "    local\
    \ res = {1, 3, 2}\n    for i = 3, n do\n        if i % 2 == 0 then\n         \
    \   res[i + 1] = 1 + i / 2\n        else\n            res[i + 1] = res[i] + res[i\
    \ - 1] + res[i - 2]\n        end\n    end\n    return res\nend", "    -- Code\
    \ here ...\nend", "    local tribs = {1, 3, 2}\n    for i = 3, n do\n        local\
    \ num = 0\n        if i % 2 == 0 then\n            num = tribs[i] + (i / 2)\n\
    \        else\n            num = tribs[i] + tribs[i - 1] + tribs[i + 1]\n    \
    \    end\n        table.insert(tribs, num)\n    end\n    return tribs\nend", " \
    \   return {\n        1, 3, 2, 8,\n        function(n) return n % 2 == 0 and 1\
    \ + n / 2 or tri(n - 1) + tri(n - 2) + tri(n + 1) end\n    }[n + 1]\nend", " \
    \   local result = {1, 3, 2}\n    for i = 3, n do\n        if i % 2 == 0 then\n\
    \            result[i + 1] = 1 + i / 2\n        else\n            result[i + 1]\
    \ = result[i] + result[i - 1] + result[i + 1 - 2]\n        end\n    end\n    return\
    \ result\nend", "  if n < 0 then return {} end\n  local t = {1, 3, 2}\n  for i\
    \ = 3, n do\n    t[i + 1] = t[i] + t[i - 1] + t[i - 2]\n  end\n  return t\nend",
  "    local t = {1, 3, 2}\n    if n < 3 then\n        return t\n    end\n    for\
    \ i = 4, n + 1 do\n        if i % 2 == 0 then\n            t[i] = i / 2\n    \
    \    else\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n  \
    \  end\n    return t\nend", "    local t = {1, 3, 2}\n    for i = 4, n + 1 do\n\
    \        t[i] = t[i - 1] + t[i - 2] + t[i - 3]\n    end\n    return t\nend", " \
    \   local answer = {1, 3, 2}\n    for i = 4, n + 1 do\n        answer[i] = answer[i\
    \ - 1] + answer[i - 2] + answer[i - 3]\n    end\n    return answer\nend", "  local\
    \ t = {1, 3, 2}\n  if n < 3 then\n    local r = {}\n    for i = 1, n do\n    \
    \  r[i] = t[i]\n    end\n    return r\n  end\n  for i = 4, n + 1 do\n    if (i\
    \ % 2) == 0 then\n      t[i] = 1 + (i / 2)\n    else\n      t[i] = t[i - 1] +\
    \ t[i - 2] + t[i + 1]\n    end\n  end\n  return t\nend", "  local tri = {1, 3,\
    \ 2}\n  for i = 4, n + 1 do\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3]\n\
    \  end\n  return tri\nend", "    local result = {1, 3, 2}\n    for i = 4, n +\
    \ 1 do\n        if i % 2 == 0 then\n            result[i] = 1 + i / 2\n      \
    \  else\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n\
    \        end\n    end\n    return result\nend", "    if n == 0 then return { 1\
    \ } end\n    if n == 1 then return { 1, 3 } end\n    if n == 2 then return { 1,\
    \ 3, 2 } end\n    local a, b, c = 1, 3, 2\n    local ans = { 1, 3, 2 }\n    for\
    \ i = 3, n do\n        if i % 2 == 0 then\n            a = a + i / 2\n       \
    \ else\n            a = a + b + c\n            b, c = c, b\n        end\n    \
    \    table.insert(ans, a)\n    end\n    return ans\nend", "  local a, b, c = 1,\
    \ 3, 2\n  local res = {a, b, c}\n  for i = 4, n + 1 do\n    local d = i % 2 ==\
    \ 0 and (1 + i / 2) or (a + b + c)\n    a, b, c = b, c, d\n    res[i] = d\n  end\n\
    \  return res\nend", "\tlocal res = {1, 3, 2}\n\tfor i = 3, n do\n\t\tres[i +\
    \ 1] = i % 2 == 0 and res[i] + i / 2 or res[i] + res[i - 1] + res[i - 2]\n\tend\n\
    \treturn res\nend", "    local ret = {1, 3, 2}\n    for i = 4, n do\n        ret[i]\
    \ = ret[i - 1] + ret[i - 2] + ret[i + 1]\n    end\n    return ret\nend", "  local\
    \ t = {1, 3, 2}\n  for i = 3, n do\n    t[i + 1] = (((i % 2) == 0) and (1 + i\
    \ / 2) or (t[i] + t[i - 1] + t[i + 1]))\n  end\n  return t\nend", "\tlocal result\
    \ = {1, 3, 2}\n\t\n\tfor i = 3, n do\n\t\tif i % 2 == 0 then\n\t\t\tresult[i +\
    \ 1] = 1 + i / 2\n\t\telse\n\t\t\tresult[i + 1] = result[i] + result[i - 1] +\
    \ result[i + 1]\n\t\tend\n\tend\n\t\n\treturn result\nend", "  if n == 0 then\
    \ return {} end\n  local res = {1, 3, 2}\n  for i = 3, n - 1 do\n    if i % 2\
    \ == 0 then\n      table.insert(res, 1 + i / 2)\n    else\n      table.insert(res,\
    \ res[i] + res[i - 1] + res[i + 1])\n    end\n  end\n  return res\nend", "  local\
    \ r = {3}\n  for i = 1, n do\n    if i % 2 == 0 then\n      r[i + 1] = 1 + (i\
    \ / 2)\n    else\n      r[i + 1] = r[i] + r[i - 1] + r[i + 2]\n    end\n  end\n\
    \  return r\nend", "  local result = {1, 3, 2}\n  if n < 2 then\n    return result\n\
    \  end\n  for i = 3, n do\n    local a = result[#result - 2]\n    local b = result[#result\
    \ - 1]\n    local c = result[#result]\n    local d = i % 2 == 0 and i / 2 or a\
    \ + b + c\n    table.insert(result, d)\n  end\n  return result\nend", "    local\
    \ tri = {1, 3, 2}\n    for i = 4, n + 1 do\n        tri[i] = tri[i - 1] + tri[i\
    \ - 2] + tri[i - 3]\n    end\n    return tri\nend", "\tif n == 0 then\n\t\treturn\
    \ {0}\n\telseif n == 1 then\n\t\treturn {0, 1}\n\telseif n == 2 then\n\t\treturn\
    \ {0, 1, 1}\n\telse\n\t\tlocal a, b, c = 0, 1, 1\n\t\tlocal result = {0, 1, 1}\n\
    \t\twhile n > 2 do\n\t\t\tlocal d = a + b + c\n\t\t\ta, b, c = b, c, d\n\t\t\t\
    table.insert(result, d)\n\t\t\tn = n - 1\n\t\tend\n\t\treturn result\n\tend\n\
    end", "  return {}\nend", "    local s = {1, 3, 2}\n    for i = 4, n + 1 do\n\
    \        local v = s[i - 1] + s[i - 2] + s[i - 3]\n        table.insert(s, v)\n\
    \    end\n    return s\nend", end, "\tlocal a, b, c = 1, 3, 2\n\tlocal result\
    \ = {a, b, c}\n\tfor i = 3, n do\n\t\tlocal v = c + (i + 1) / 2\n\t\tif i % 2\
    \ == 0 then\n\t\t\tv = i / 2 + 1\n\t\tend\n\t\ta, b, c = b, c, v\n\t\ttable.insert(result,\
    \ v)\n\tend\n\treturn result\nend", end, "    return {}\nend", "    local tri\
    \ = {1, 3, 2}\n    for i = 4, n + 1 do\n        tri[i] = (i % 2 == 0) and (i /\
    \ 2) or (tri[i - 1] + tri[i - 2] + tri[i + 1])\n    end\n    return tri\nend",
  "  local first = 3\n  local second = first\n  local third = second\n  local forth\
    \ = 8\n  local result = {1, 3, 2, 8}\n  if n == 1 then\n    return {1}\n  elseif\
    \ n == 2 then\n    return {1, 3}\n  elseif n == 3 then\n    return {1, 3, 2}\n\
    \  elseif n == 4 then\n    return {1, 3, 2, 8}\n  else\n    for i = 5, n + 1 do\n\
    \      first = second\n      second = third\n      third = forth\n      forth\
    \ = first + second + third\n      table.insert(result, forth)\n    end\n  end\n\
    \  return result\nend", "    local a = 1\n    local b = 3\n    local c = 2\n \
    \   local t = {}\n    local x\n    local i = 0\n    while i <= n do\n        if\
    \ i % 2 == 0 then\n            x = a\n        else\n            x = b + c + a\n\
    \            a = b\n            b = c\n            c = x\n        end\n      \
    \  t[i + 1] = x\n        i = i + 1\n    end\n    return t\nend", "    local res\
    \ = {1, 3, 2}\n    for i = 3, n do\n        res[i + 1] = res[i] + res[i - 1] +\
    \ res[i - 2]\n    end\n    return res\nend\nprint(table.concat(tri(3), \", \"\
    ))\nprint(table.concat(tri(4), \", \"))", "  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n\
    \  local function tri_even(n)\n    return 1 + n / 2\n  end\n  local function tri_odd(n)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n  if n == 1 then\n  \
    \  return 3\n  elseif is_even(n) then\n    return tri_even(n)\n  elseif is_odd(n)\
    \ then\n    return tri_odd(n)\n  end\nend", "\tlocal tab = {1, 3, 2}\n\t\n\tfor\
    \ i = 4, n + 1 do\n\t\ttab[i] = (i % 2 ~= 0) and tab[i - 1] + tab[i - 2] + tab[i\
    \ - 3] or 1 + (i / 2)\n\tend\n\t\n\treturn tab\nend", "  local t = { 1, 3, 2 }\n\
    \  for i = 4, n do\n    t[i] = (i % 2 == 0) and (1 + i / 2) or (t[i - 1] + t[i\
    \ - 2] + t[i + 1])\n  end\n  return t\nend", "\tlocal function tri_rec(m)\n\t\t\
    if m == 1 then return 3 end\n\t\treturn m % 2 == 0 and 1 + m / 2 or tri_rec(m\
    \ - 1) + tri_rec(m - 2) + tri_rec(m + 1)\n\tend\n\tlocal res = {}\n\tfor i = 1,\
    \ n + 1 do\n\t\tres[i] = tri_rec(i)\n\tend\n\treturn res\nend", "    local t =\
    \ {1, 3, 2}\n    for i = 4, n + 1 do\n        t[i] = t[i - 1] + t[i - 2] + t[i\
    \ - 3]\n    end\n    return t\nend", "  local t = {[0] = 1, [1] = 3, [2] = 2}\n\
    \  for i = 3, n do\n    t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n  end\n  return\
    \ t\nend", "  local r={1, 3, 2}\n  for i=4,n+1 do\n    r[i]=3\n    if i%2==0 then\n\
    \      r[i]=1+i/2\n    else\n      r[i]=r[i-1]+r[i-2]+r[i+1]\n    end\n  end\n\
    \  return r\nend", "  local a, b, c = 3, 3, 2\n  local res = {3}\n  for i = 2,\
    \ n do\n    res[i] = a\n    a, b, c = c, a, a + b + c\n  end\n  return res\nend\n\
    print(unpack(tri(6)))", "    --your code here\n    local newList = {}\n    for\
    \ i = 1, n + 1 do\n      if i == 1 then\n        table.insert(newList, 1)\n  \
    \    elseif i == 2 then\n        table.insert(newList, 3)\n      elseif i == 3\
    \ then\n        table.insert(newList, 2)\n      elseif i % 2 == 0 then\n     \
    \   table.insert(newList, newList[i - 1] + newList[i - 2] + newList[i - 3])\n\
    \      else\n        table.insert(newList, 1 + i / 2)\n      end\n    end\n  \
    \  return newList\nend", "   local ret = {1, 3, 2}\n   for i = 4, n do\n     \
    \ if i % 2 == 0 then\n         ret[i] = 1 + (i / 2)\n      else\n         ret[i]\
    \ = ret[i - 1] + ret[i - 2] + ret[i + 1]\n      end\n   end\n   return ret\nend",
  "    local t = {1, 3, 2}\n    for i = 3, n do\n        t[i + 1] = t[i] + t[i - 1]\
    \ + t[i - 2]\n    end\n    return t\nend", "    local t = {1, 3, 2}\n    for i\
    \ = 4, n + 1 do\n        local tn = t[i - 3] + t[i - 2] + t[i - 1]\n        if\
    \ i % 2 == 0 then\n            tn = 1 + i / 2\n        end\n        table.insert(t,\
    \ tn)\n    end\n    return t\nend", "  local res = {1, 3, 2}\n  if n <= 3 then\n\
    \    return res\n  end\n  local index = 4\n  while index <= n do\n    if index\
    \ % 2 == 0 then\n      res[index] = 1 + index / 2\n    else\n      res[index]\
    \ = res[index - 1] + res[index - 2] + res[index + 1]\n    end\n    index = index\
    \ + 1\n  end\n  return res\nend", "  if n == 0 then return {} end\n  local result\
    \ = {1, 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      result[i]\
    \ = 1 + i / 2\n    else\n      result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n    end\n  end\n  return result\nend", "  local result = {1, 3, 2}\n \
    \ for i = 3, n do\n    local val = result[i - 1] + result[i - 2] + result[i +\
    \ 1]\n    table.insert(result, val)\n  end\n  return result\nend", "    local\
    \ function acc(index, t)\n        if index > n then return t end\n        if index\
    \ % 2 == 0 then t[index] = t[index] + t[index + 1] / 2\n        else t[index]\
    \ = t[index] + t[index - 1] + t[index - 2] end\n        return acc(index + 1,\
    \ t)\n    end\n    local t = {1, 3, 2}\n    local p = #t\n    local c = {}\n \
    \   while p <= n do\n        t[p + 1] = 0\n        p = p + 1\n    end\n    return\
    \ acc(1, t)\nend", "  if n == 0 then return {} end\n  if n == 1 then return {1}\
    \ end\n  if n == 2 then return {1, 3} end\n  local tri = {1, 3, 2}\n  for i =\
    \ 3, n do\n    local a = tri[i]\n    local b = tri[i - 1]\n    local c = tri[i\
    \ - 2]\n    if i % 2 == 0 then\n      table.insert(tri, a + b + c)\n    else\n\
    \      table.insert(tri, (i + 1) / 2)\n    end\n  end\n  return tri\nend", " \
    \ local r = { 1, 3, 2 }\n  local i = 3\n  while i <= n do\n    r[i + 1] = r[i]\
    \ + r[i - 1] + r[i - 2]\n    i = i + 1\n  end\n  return r\nend", "  local t =\
    \ {1, 3, 2}\n  if n == 0 then return {}\n  elseif n < 3 then\n    return {t[n\
    \ + 1]}\n  else\n    for i = 3, n do\n      if i % 2 == 0 then\n        t[i +\
    \ 1] = 1 + i / 2\n      else\n        t[i + 1] = t[i] + t[i - 1] + t[i - 2]\n\
    \      end\n    end\n    return t\n  end\nend", "  if n == 0 then return end\n\
    \  local a, b, c = 1, 3, 2\n  local res = {1, 3, 2}\n  while #res < n + 1 do\n\
    \    a, b, c = b, c, (a + b + c) % 10000\n    res[#res + 1] = c\n  end\n  return\
    \ res\nend", "  local res = {1, 3, 2}\n  for i = 4, n do\n    if i % 2 == 0 then\n\
    \      res[i] = 1 + i / 2\n    else\n      res[i] = res[i - 1] + res[i - 2] +\
    \ res[i + 1]\n    end\n  end\n  return res\nend", "  local res = {1, 3, 2}\n \
    \ for i = 3, n do\n    if i % 2 == 0 then\n      res[i + 1] = 1 + i / 2\n    else\n\
    \      res[i + 1] = res[i] + res[i - 1] + res[i + 1 - 2]\n    end\n  end\n  return\
    \ res\nend", "    local t = { 1, 3, 2 }\n    for i = 3, n do\n        if t[i]\
    \ % 2 == 0 then\n            t[i + 1] = math.floor(t[i] / 2) + 1\n        else\n\
    \            t[i + 1] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n\
    \    return t\nend", "    local result = {1, 3, 2}\n    if n <= 2 then\n     \
    \   return {1, 3}\n    end\n    for i = 3, n - 1 do\n        result[i + 1] = result[i]\
    \ + result[i - 1] + result[i - 2]\n    end\n    return result\nend", "\tif n <=\
    \ 1 then\n\t\treturn {3}\n\tend\n\tlocal list = {3}\n\tfor i = 2, n do\n\t\tlocal\
    \ num = (2 * i) % 3 == 0 and i / 2 or list[i - 1] + list[i - 2] + list[i - 3]\n\
    \t\ttable.insert(list, num)\n\tend\n\treturn list\nend", "\tlocal result = {1,\
    \ 3, 2}\n\tfor i = 3, n do\n\t\tresult[i + 1] = (i % 2 == 0) and (1 + i / 2) or\
    \ (result[i] + result[i - 1] + result[i - 2])\n\tend\n\treturn result\nend", end,
  "    local r = {[0] = 1, 3, 2}\n    for i = 3, n do\n        r[i + 1] = r[i] + r[i\
    \ - 1] + r[i - 2]\n    end\n    return r\nend", "    local res = {1, 3, 2}\n \
    \   local function tri_rec(n)\n        if n == 1 then\n            return 3\n\
    \        elseif n == 2 then\n            return 2\n        elseif n % 2 == 0 then\n\
    \            return 1 + n / 2\n        else\n            return tri_rec(n - 1)\
    \ + tri_rec(n - 2) + tri_rec(n + 1)\n        end\n    end\n    for i = 3, n do\n\
    \        res[i + 1] = tri_rec(i)\n    end\n    return res\nend", "    local t\
    \ = {1, 3, 2}\n    for i = 4, n + 1 do\n        if i % 2 == 0 then\n         \
    \   t[i] = 1 + i / 2\n        else\n            t[i] = t[i - 1] + t[i - 2] + t[i\
    \ + 1]\n        end\n    end\n    return t\nend", "\tlocal r, i = {}, 1\n\tr[i]\
    \ = 1\n\ti = i + 1\n\tr[i] = 3\n\ti = i + 1\n\tr[i] = 2\n\ti = i + 1\n\twhile\
    \ i <= n + 1 do\n\t\tif i % 2 == 0 then\n\t\t\tr[i] = 1 + i / 2\n\t\telse\n\t\t\
    \tr[i] = r[i - 1] + r[i - 2] + r[i + 1]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ r\nend", "    if n == 0 then return {} end\n    local x = 1\n    local l = {\
    \ x }\n    for i = 1, n do\n        if i == 1 then\n            x = 1\n      \
    \  elseif i == 2 then\n            x = 3\n        elseif i == 3 then\n       \
    \     x = 2\n        elseif i % 2 == 0 then\n            x = 1 + i / 2\n     \
    \   else\n            x = l[i - 1] + l[i - 2] + l[i + 1]\n        end\n      \
    \  table.insert(l, x)\n    end\n    return l\nend", "  if n == 0 then return {}\
    \ end\n  if n == 1 then return {1} end\n  if n == 2 then return {1, 3} end\n \
    \ local a, b, c = 1, 3, 2\n  local ret = {1, 3, 2}\n  for i = 3, n do\n    if\
    \ i % 2 == 0 then\n      c = 1 + i / 2\n    else\n      c = a + b + c\n    end\n\
    \    table.insert(ret, c)\n    a, b = b, c\n  end\n  return ret\nend", "  local\
    \ output = {1, 3, 2}\n  local c = 3\n  while c <= n do\n    c = c + 1\n    if\
    \ c % 2 == 0 then\n      output[c] = 1 + c / 2\n    else\n      output[c] = output[c\
    \ - 1] + output[c - 2] + output[c + 1]\n    end\n  end\n  return output\nend",
  "\tlocal r = {1, 3, 2}\n\tfor i = 3, n do\n\t\tlocal v = r[i] + r[i - 1] + r[i -\
    \ 2]\n\t\tif i % 2 == 0 then\n\t\t\tv = v + i / 2\n\t\tend\n\t\ttable.insert(r,\
    \ v)\n\tend\n\treturn r\nend", "  if n == 0 then return {} end\n  local res =\
    \ {1, 3, 2}\n  for i = 3, n do\n    if i % 2 == 0 then\n      res[i + 1] = 1 +\
    \ i / 2\n    else\n      res[i + 1] = res[i] + res[i - 1] + res[i + 2]\n    end\n\
    \  end\n  return res\nend", "  local t = {1, 3, 2}\n  for i = 3, n do\n    t[i\
    \ + 1] = t[i] + t[i - 1] + t[i - 2]\n  end\n  return t\nend", end, "    local\
    \ ans = {1, 3, 2}\n    local i = 3\n    while i <= n do\n        if i % 2 == 0\
    \ then\n            ans[i + 1] = 1 + i / 2\n        else\n            ans[i +\
    \ 1] = ans[i] + ans[i - 1] + ans[i - 2]\n        end\n        i = i + 1\n    end\n\
    \    return ans\nend", "  local result = {1, 3, 2}\n  for i = 3, n do\n    result[i\
    \ + 1] = (i % 2 == 0) and (1 + i / 2) or (result[i] + result[i - 1] + result[i\
    \ - 2])\n  end\n  return result\nend", "    local result = {1, 3, 2}\n    for\
    \ i = 1, n do\n        local last = result[#result]\n        local last2 = result[#result\
    \ - 1]\n        local last3 = result[#result - 2]\n        if last % 2 == 0 then\n\
    \            table.insert(result, last2 + last3 + last / 2)\n        else\n  \
    \          table.insert(result, last2 + last3 + last)\n        end\n    end\n\
    \    return result\nend", end, "    local t = {1, 3, 2}\n    for i = 4, n do\n\
    \        if i % 2 == 0 then\n            t[i] = 1 + i / 2\n        else\n    \
    \        t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n    return\
    \ t\nend", "    local res = {1, 3, 2}\n    if n <= 3 then\n        local res =\
    \ {}\n        for i = 1, n do\n            res[i] = res[i] or 0\n        end\n\
    \        return res\n    end\n    for i = 4, n do\n        res[i] = res[i - 1]\
    \ + res[i - 2] + res[i + 1]\n    end\n    return res\nend", "    local res = {\
    \ 1, 3, 2 }\n    for i = 3, n do\n        res[i + 1] = (res[i] + res[i - 1] +\
    \ res[i - 2]) / 2\n    end\n    return res\nend", "  local l = {1, 3, 2}\n  for\
    \ i = 3, n do\n    l[i + 1] = l[i] + l[i - 1] + l[i - 2]\n  end\n  return l\n\
    end", "    local function _tri(n)\n        if n == 1 then return 1 end\n     \
    \   if n == 2 then return 3 end\n        if n == 3 then return 2 end\n       \
    \ return _tri(n - 1) + _tri(n - 2) + _tri(n + 1)\n    end\n    local t = {}\n\
    \    for i = 1, n + 1 do\n        t[i] = _tri(i)\n    end\n    return t\nend",
  "    local res = {1, 3, 2}\n    for i = 1, n - 2 do\n        table.insert(res, res[i]\
    \ + res[i + 1] + res[i + 2])\n    end\n    return res\nend\nprint(tri(3))", " \
    \   local result = {1, 3, 2}\n    local m = 2\n    while m < n do\n        result[#result\
    \ + 1] = result[#result - 2] + result[#result - 1] + result[#result]\n       \
    \ m = m + 1\n    end\n    return result\nend", "  if n == 0 then return {} end\n\
    \  local a, b, c = 1, 3, 2\n  local tab = {a, b, c}\n  for i = 1, n do\n    local\
    \ d = b + c + a\n    a, b, c = b, c, d\n    table.insert(tab, d)\n  end\n  return\
    \ tab\nend", "\tlocal a = {1, 3, 2}\n\tfor i = 1, n - 2 do\n\t\tlocal x = a[1]\
    \ + a[2] + a[3]\n\t\ta[1] = a[2]\n\t\ta[2] = a[3]\n\t\ta[3] = x\n\tend\n\ttable.insert(a,\
    \ 1, 1)\n\treturn a\nend", "    -- @TODO: your code here\n    local result = {}\n\
    \    local odd, even\n    for i = 1, n do\n        odd = (result[i - 1] or 0)\
    \ + (result[i - 2] or 0) + (result[i + 1] or 0)\n        even = i / 2\n      \
    \  result[i] = i % 2 == 0 and even or odd\n    end\n    return result\nend", "\t\
    local function fib(x)\n\t\tif x <= 1 then return x end\n\t\treturn fib(x - 1)\
    \ + fib(x - 2)\n\tend\n\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = i % 2\
    \ == 0 and 1 + (i / 2) or fib(i - 1) + fib(i - 2) + fib(i + 1)\n\tend\n\treturn\
    \ t\nend", "    local function tr(n)\n        if n == 1 then return 3 end\n  \
    \      if n % 2 == 0 then return 1 + n / 2\n        else return tr(n - 1) + tr(n\
    \ - 2) + tr(n + 1) end\n    end\n    local t = {}\n    for i = 1, n + 1 do\n \
    \       t[i] = tr(i)\n    end\n    return t\nend", "    local t = {1, 3, 2}\n\
    \    if n < 3 then return t end\n    for i = 3, n do\n        local j = i + 1\n\
    \        t[j] = t[i - 1] + t[i - 2] + t[j - 1]\n    end\n    return t\nend", " \
    \ local t = {1, 3, 2}\n  for i = 4, n + 1 do\n    local a = t[i - 1]\n    local\
    \ b = t[i - 2]\n    local c = t[i - 3]\n    if i % 2 == 0 then\n      t[i] = 1\
    \ + i / 2\n    else\n      t[i] = a + b + c\n    end\n  end\n  return t\nend",
  "\tlocal t = {1, 3, 2}\n\tfor i = 4, n + 1 do\n\t\tt[i] = t[i - 1] + t[i - 2] +\
    \ t[i - 3]\n\tend\n\treturn t\nend", "  local table = {1, 3, 2}\n  if n <= 0 then\n\
    \    return {}\n  elseif n <= 2 then\n    return table\n  else\n    for i = 4,\
    \ n do\n      table[i] = table[i - 1] + table[i - 2] + table[i - 3]\n    end\n\
    \    return table\n  end\nend\nreturn tri", "    if n == 0 then return {} end\n\
    \    local l = {1, 3, 2}\n    for i = 3, n do\n        l[i + 1] = l[i] + l[i -\
    \ 1] + l[i - 2]\n    end\n    return l\nend", "  local res = {1, 3, 2}\n  if n\
    \ <= 2 then\n    return {res[1], res[2]}\n  end\n  for i = 3, n do\n    res[i\
    \ + 1] = res[i] + res[i - 1] + res[i - 2]\n  end\n  return res\nend", "   local\
    \ tri_list = {1, 3, 2}\n   if n <= 2 then\n      return tri_list\n   end\n   for\
    \ i = 3, n do\n      if i % 2 == 0 then\n         table.insert(tri_list, 1 + i\
    \ / 2)\n      else\n         table.insert(tri_list, tri_list[i] + tri_list[i -\
    \ 1] + tri_list[i + 1])\n      end\n   end\n   return tri_list\nend", end, " \
    \   local r = {1, 3, 2}\n    for i = 3, n do\n        r[i + 1] = r[i] + r[i -\
    \ 1] + r[i - 2]\n    end\n    return r\nend", "\tlocal t = {1, 3, 2}\n\tlocal\
    \ i = 3\n\twhile i <= n do\n\t\tif i % 2 == 0 then\n\t\t\tt[i + 1] = 1 + i / 2\n\
    \t\telse\n\t\t\tt[i + 1] = t[i] + t[i - 1] + t[i + 1]\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn t\nend", "  local result = {1, 3, 2}\n  for i = 3, n do\n    local\
    \ a = result[i - 2]\n    local b = result[i - 1]\n    local c = result[i]\n  \
    \  result[i + 1] = i % 2 == 0 and 1 + i / 2 or a + b + c\n  end\n  return result\n\
    end", "    local t = {1, 3, 2}\n    for i = 3, n do\n        local ni = n - i\
    \ + 1\n        if ni % 2 == 0 then\n            t[i + 1] = 1 + ni / 2\n      \
    \  else\n            t[i + 1] = t[i] + t[i - 1] + t[i - 2]\n        end\n    end\n\
    \    return t\nend", "    local ret = {1, 3, 2}\n    for i = 4, n + 1 do\n   \
    \     if i % 2 == 0 then\n            ret[i] = 1 + i / 2\n        else\n     \
    \       ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1]\n        end\n    end\n\
    \    return ret\nend", "   if n == 0 then return {0} end\n   if n == 1 then return\
    \ {1,3} end\n   if n == 2 then return {1,3,2} end\n   local a = tri(n-1)\n   if\
    \ (n % 2) == 0 then\n      return concat({a,{(n/2)+1}})\n   else\n      return\
    \ concat({a,{a[#a]+a[#a-1]+a[#a-2]}})\n   end\nend", "\tlocal t = {1, 3, 2}\n\t\
    for i = 1, n do\n\t\tt[i + 3] = (i % 2 == 0) and 1 + i / 2 or t[i] + t[i - 1]\
    \ + t[i + 1]\n\tend\n\treturn t\nend\nprint(table.concat(tri(3), ' ')) --> 1 3\
    \ 2 8\nprint(table.concat(tri(4), ' ')) --> 1 3 2 8 13", "  local result = {1,\
    \ 3, 2}\n  local next = nil\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n \
    \     next = 1 + i / 2\n    else\n      next = result[i - 1] + result[i - 2] +\
    \ result[i + 1]\n    end\n    table.insert(result, next)\n  end\n  return result\n\
    end", "  local result = {1, 3, 2}\n  for i = 3, n do\n    if i % 2 == 0 then\n\
    \      result[i + 1] = 1 + i / 2\n    else\n      result[i + 1] = result[i] +\
    \ result[i - 1] + result[i - 2]\n    end\n  end\n  return result\nend\nprint(table.concat(tri(3),\
    \ \" \"))\nprint(table.concat(tri(10), \" \"))\nprint(table.concat(tri(13), \"\
    \ \"))", "\tlocal t = {1, 3, 2}\n\tif n <= 3 then\n\t\tlocal ret = {}\n\t\tfor\
    \ i = 1, n + 1 do\n\t\t\tret[i] = t[i]\n\t\tend\n\t\treturn ret\n\tend\n\tfor\
    \ i = 4, n + 1 do\n\t\tif i % 2 == 0 then\n\t\t\tt[i] = 1 + i / 2\n\t\telse\n\t\
    \t\tt[i] = t[i - 1] + t[i - 2] + t[i - 3]\n\t\tend\n\tend\n\treturn t\nend", " \
    \   local f = {1, 3, 2}\n    for i = 3, n do\n        local f1, f2, f3 = unpack(f)\n\
    \        table.insert(f, f1 + f2 + f3)\n    end\n    return f\nend\nassert(#tri(3)\
    \ == 4)\nassert(tri(3)[1] == 1)\nassert(tri(3)[2] == 3)\nassert(tri(3)[3] == 2)\n\
    assert(tri(3)[4] == 8)\nassert(#tri(5) == 6)\nassert(tri(5)[1] == 1)\nassert(tri(5)[2]\
    \ == 3)\nassert(tri(5)[3] == 2)\nassert(tri(5)[4] == 8)\nassert(tri(5)[5] == 4)\n\
    assert(tri(5)[6] == 15)", "  local t={1,3,2}\n  for i=4,n+1 do\n    t[i]=t[i-1]+t[i-2]+t[i-3]\n\
    \  end\n  return t\nend", "\tassert(n >= 0)\n\tlocal table = {1, 3, 2}\n\tfor\
    \ i = 4, n + 1 do\n\t\ttable[i] = table[i - 1] + table[i - 2] + table[i - 3]\n\
    \tend\n\treturn table\nend", "    local tri = {1, 3, 2}\n    if n <= 2 then\n\
    \        local res = {}\n        for i = 1, n do\n            res[i] = tri[i]\n\
    \        end\n        return res\n    end\n    for i = 4, n + 1 do\n        tri[i]\
    \ = tri[i - 1] + tri[i - 2] + tri[i - 3]\n    end\n    return tri\nend", "  if\
    \ n == 0 then return {0} end\n  local a, b, c = 1, 3, 2\n  local ret = {1, 3,\
    \ 2}\n  for i = 3, n do\n    a, b, c = b, c, a + b + c\n    table.insert(ret,\
    \ c)\n  end\n  return ret\nend", "    local current, next = 0, 1\n    local function\
    \ tri(n)\n        for i = 1, n do\n            current, next = next, current +\
    \ next\n        end\n        return current\n    end\n    local result = {}\n\
    \    for i = 1, n + 1 do\n        table.insert(result, tri(i))\n    end\n    return\
    \ result\nend", "    local l = {1, 3, 2}\n    if n == 0 then return {1} end\n\
    \    if n < 3 then return l end\n    for i = 4, n + 1 do\n        local v = l[i\
    \ - 1] + l[i - 2] + l[i - 3]\n        l[i] = v\n    end\n    return l\nend", " \
    \ local result = {1, 3, 2}\n  local i = 3\n  while i <= n do\n    result[i + 1]\
    \ = ((i % 2 == 0) and (1 + i / 2) or (result[i] + result[i - 1] + result[i + 1]))\n\
    \    i = i + 1\n  end\n  return result\nend", "    local result = {1, 3, 2}\n\
    \    for i = 4, n do\n        local tri_i = 0\n        if i % 2 == 0 then\n  \
    \          tri_i = 1 + i / 2\n        else\n            tri_i = result[i - 1]\
    \ + result[i - 2] + result[i + 1]\n        end\n        table.insert(result, tri_i)\n\
    \    end\n    return result\nend", "  local r = {1, 3, 2}\n  for i = 3, n do\n\
    \    r[i + 1] = (i % 2 == 0) and (1 + i / 2) or (r[i] + r[i - 1] + r[i - 2])\n\
    \  end\n  return r\nend", "  local function fib(n)\n    local c, p, g = 1, 1,\
    \ 1\n    for i = 1, n - 1 do\n      c, p, g = c + p + g, c, p\n    end\n    return\
    \ c\n  end\n  local t = {}\n  for i = 1, n + 1 do\n    t[i] = fib(i)\n  end\n\
    \  return t\nend\nreturn tri", "    local function tri_rec(n)\n        if n ==\
    \ 1 then\n            return 3\n        elseif n % 2 == 0 then\n            return\
    \ 1 + n / 2\n        else\n            return tri_rec(n - 1) + tri_rec(n - 2)\
    \ + tri_rec(n + 1)\n        end\n    end\n    local res = {}\n    for i = 1, n\
    \ + 1 do\n        res[i] = tri_rec(i)\n    end\n    return res\nend", "    local\
    \ res = { 1, 3, 2 }\n    if n == 1 then return { 1 } end\n    if n == 2 then return\
    \ { 1, 3 } end\n    if n == 3 then return { 1, 3, 2 } end\n    for i = 4, n +\
    \ 1 do\n        res[i] = res[i - 1] + res[i - 2] + res[i - 3]\n    end\n    return\
    \ res\nend", "  local a, b, c = 1, 3, 2\n  if n == 0 then return { a } end\n \
    \ if n == 1 then return { a, b } end\n  if n == 2 then return { a, b, c } end\n\
    \  local res = { a, b, c }\n  for i = 3, n do\n    if i % 2 == 0 then\n      res[i\
    \ + 1] = i / 2\n    else\n      res[i + 1] = res[i] + res[i - 1] + res[i + 2]\n\
    \    end\n  end\n  return res\nend", "    local t = {[0] = 1, [1] = 3, [2] = 2}\n\
    \    for i = 3, n do\n        if i % 2 == 0 then\n            t[i] = 1 + i / 2\n\
    \        else\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n        end\n\
    \    end\n    return t\nend", "    local res = {1, 3, 2}\n    for i = 3, n do\n\
    \        res[i + 1] = res[i] + res[i - 1] + res[i - 2]\n    end\n    return res\n\
    end", "  if n == 0 then return {} end\n  local tri = {1, 3, 2}\n  for i = 3, n\
    \ do\n    tri[i + 1] = tri[i] + tri[i - 1] + tri[i - 2]\n  end\n  return tri\n\
    end", "    local t = { 1, 3, 2 }\n    for i = 3, n do\n        t[i + 1] = (i %\
    \ 2 == 0) and (1 + i / 2) or (t[i] + t[i - 1] + t[i - 2])\n    end\n    return\
    \ t\nend", "\tlocal tab = {1, 3, 2}\n\tfor i = 3, n do\n\t\tif i % 2 == 0 then\n\
    \t\t\ttab[i + 1] = 1 + i / 2\n\t\telse\n\t\t\ttab[i + 1] = tab[i] + tab[i - 1]\
    \ + tab[i + 1]\n\t\tend\n\tend\n\treturn tab\nend", "  if n == 0 then return {}\
    \ end\n  if n == 1 then return {1} end\n  if n == 2 then return {1, 3} end\n \
    \ local x, y, z = 1, 3, 2\n  local r = {x, y, z}\n  while n > 3 do\n    n = n\
    \ - 1\n    x, y, z = y, z, x + y + z\n    table.insert(r, z)\n  end\n  return\
    \ r\nend", "\tlocal t = {1, 3, 2}\n\tfor i = 3, n do\n\t\tif i % 2 == 0 then\n\
    \t\t\tt[i + 1] = (1 + i / 2)\n\t\telse\n\t\t\tt[i + 1] = t[i] + t[i - 1] + t[i\
    \ + 1]\n\t\tend\n\tend\n\treturn t\nend", "  local r = {1, 3, 2}\n  for i = 3,\
    \ n do\n    r[i + 1] = (i % 2 == 0) and (1 + i / 2) or (r[i] + r[i - 1] + r[i\
    \ - 2])\n  end\n  return r\nend", "    local s = {1, 3, 2}\n    for i = 3, n do\n\
    \        if (i % 2 == 0) then\n            s[i + 1] = 1 + i / 2\n        else\n\
    \            s[i + 1] = s[i] + s[i - 1] + s[i - 2]\n        end\n    end\n   \
    \ return s\nend", "  if n < 0 then return nil end\n  if n == 0 then return {1}\
    \ end\n  local l = {1, 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n\
    \      l[i] = 1 + (i / 2)\n    else\n      l[i] = l[i - 1] + l[i - 2] + l[i +\
    \ 1]\n    end\n  end\n  return l\nend", "  local tri_list = { 1, 3, 2 }\n  for\
    \ i = 4, n + 1 do\n    local n2 = math.floor(i / 2)\n    if i % 2 == 0 then\n\
    \      table.insert(tri_list, 1 + n2)\n    else\n      table.insert(tri_list,\
    \ tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n    end\n  end\n  return\
    \ tri_list\nend", "\tlocal ret = {1, 3, 2}\n\tfor i = 3, n + 1 do\n\t\tlocal last,\
    \ last2, last3 = unpack(ret, i - 3, i - 1)\n\t\tif i % 2 == 0 then\n\t\t\tret[i\
    \ + 1] = 1 + i / 2\n\t\telse\n\t\t\tret[i + 1] = last + last2 + last3\n\t\tend\n\
    \tend\n\treturn ret\nend", "    local res = {1, 3, 2}\n    if n < 3 then\n   \
    \     return table.slice(res, 1, n)\n    end\n    for i = 3, n do\n        res[i\
    \ + 1] = res[i] + res[i - 1] + res[i - 2]\n    end\n    return res\nend", "\t\
    local ret = {1, 3, 2}\n\tfor i = 1, n do\n\t\tlocal temp = 1 + i / 2\n\t\tif i\
    \ % 2 == 0 then\n\t\t\tret[i + 1] = temp\n\t\telse\n\t\t\tlocal sum = 0\n\t\t\t\
    for j = 1, 3 do\n\t\t\t\tsum = sum + ret[i - j + 1]\n\t\t\tend\n\t\t\tret[i +\
    \ 1] = sum\n\t\tend\n\tend\n\treturn ret\nend", "  local function tri(n, a, b,\
    \ c)\n    if n == 0 then\n      return {}\n    elseif n == 1 then\n      return\
    \ {a}\n    elseif n == 2 then\n      return {a, b}\n    elseif n == 3 then\n \
    \     return {a, b, c}\n    else\n      return tri(n - 1, a, b, c):append(n %\
    \ 2 == 0 and n / 2 or (b + c + c))\n    end\n  end\n  return tri(n, 1, 3, 2)\n\
    end", "    local a, b, c = 1, 3, 2\n    local tab = {a, b, c}\n    for i = 4,\
    \ n + 1 do\n        local t = c + b + a\n        table.insert(tab, t)\n      \
    \  a, b, c = b, c, t\n    end\n    return tab\nend", "  local l = {1, 3, 2}\n\
    \  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      l[i] = 1 + i / 2\n    else\n\
    \      l[i] = l[i - 1] + l[i - 2] + l[i + 1]\n    end\n  end\n  return l\nend",
  "    local seq = {1, 3, 2}\n    for i = 4, n + 1 do\n        local s = seq[i - 1]\
    \ + seq[i - 2] + seq[i - 3]\n        table.insert(seq, s)\n    end\n    return\
    \ seq\nend", "  local function loop(i, v)\n    if i == n then return v end\n \
    \   local a, b, c = v[i], v[i + 1], v[i + 2]\n    if (i + 2) % 2 == 0 then\n \
    \     return loop(i + 1, {v[1], v[2], a + b + c, unpack(v, 4)})\n    else\n  \
    \    return loop(i + 1, {v[1], v[2], a + b / 2, unpack(v, 4)})\n    end\n  end\n\
    \  return loop(1, {1, 3, 2})\nend", "  local r = {1, 3, 2}\n  if n == 0 then return\
    \ {1} end\n  if n == 1 then return {1, 3} end\n  if n == 2 then return {1, 3,\
    \ 2} end\n  for i = 4, n + 1 do\n    local a, b, c = r[i - 3], r[i - 2], r[i -\
    \ 1]\n    if i % 2 == 0 then\n      r[i] = 1 + i / 2\n    else\n      r[i] = a\
    \ + b + c\n    end\n  end\n  return r\nend", "  local a, b, c = 1, 3, 2\n  local\
    \ res = {1, 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      a = a\
    \ + i / 2\n    else\n      a = a + b + c\n      b, c = c, b\n    end\n    res[i]\
    \ = a\n  end\n  return res\nend", "  local t = {[0] = 1, [1] = 3, [2] = 2}\n \
    \ for i = 3, n do\n    t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n  end\n  return\
    \ t\nend", "\tif n == 0 then return {} end\n\tif n == 1 then return {1} end\n\t\
    if n == 2 then return {1,3} end\n\tif n == 3 then return {1,3,2} end\n\tlocal\
    \ t = {1,3,2}\n\tfor i = 3, n do\n\t\tt[i + 1] = 1 + i / 2\n\t\tif i % 2 == 1\
    \ then\n\t\t\tt[i + 1] = t[i - 1] + t[i - 2] + t[i + 1]\n\t\tend\n\tend\n\treturn\
    \ t\nend", "  local t = { 1, 3, 2 }\n  for i = 4, n + 1 do\n    t[i] = t[i - 1]\
    \ + t[i - 2] + t[i + 1]\n  end\n  return t\nend", "  local res = {1, 3, 2}\n \
    \ local mod = n % 2\n  local half = n / 2 + mod\n  local k = 2\n  while k < half\
    \ do\n    res[#res + 1] = res[k] + res[k - 1] + res[k - 2]\n    k = k + 1\n  end\n\
    \  if mod ~= 0 then\n    res[#res + 1] = res[k] + res[k - 1] + res[k - 2]\n  end\n\
    \  for i = #res - 1, half, -1 do\n    res[#res + 1] = 1 + res[i] / 2\n  end\n\
    \  return res\nend", "    local f = {1, 3, 2}\n    for i = 4, n + 1 do\n     \
    \   if i % 2 == 0 then\n            f[i] = 1 + i / 2\n        else\n         \
    \   f[i] = f[i - 1] + f[i - 2] + f[i + 1]\n        end\n    end\n    return f\n\
    end", "    -- Your code here\nend", "  local t = {1, 3, 2}\n  for i = 4, n + 1\
    \ do\n    t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n  end\n  return t\nend", "  \
    \ local a, b, c = 3, 1, 2\n   local ret = {a}\n   for i = 1, n do\n      table.insert(ret,\
    \ b)\n      local tmp = a\n      a = b\n      b = c\n      c = tmp + a + b\n \
    \  end\n   return ret\nend", "  local res = {1, 3, 2}\n  for i = 1, n - 2 do\n\
    \    res[i + 3] = res[i + 2] + res[i + 1] + res[i]\n  end\n  return res\nend",
  "  local r = {[0] = 1, [1] = 3, [2] = 2}\n  for i = 3, n do\n    if i % 2 == 0 then\n\
    \      r[i] = 1 + i / 2\n    else\n      r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n\
    \    end\n  end\n  return r\nend", "\tlocal result = {1, 3, 2}\n\tif n < 3 then\n\
    \t\treturn result\n\tend\n\tfor i = 4, n + 1 do\n\t\tresult[i] = i % 2 == 0 and\
    \ i / 2 or result[i - 1] + result[i - 2] + result[i - 3]\n\tend\n\treturn result\n\
    end", "    local r = {1, 3, 2}\n    if n < 3 then return {} end\n    for i = 3,\
    \ n do\n        local j = r[i - 1] + r[i - 2] + r[i - 3]\n        table.insert(r,\
    \ j)\n    end\n    return r\nend", "  local result = {1, 3, 2}\n  for i = 3, n\
    \ do\n    result[i + 1] = (i % 2 == 0) and result[i] + result[i - 1] * 3 or result[i]\
    \ + result[i - 1]\n  end\n  return result\nend", "\tlocal ret = {1, 3, 2}\n\t\
    for i = 4, n do\n\t\tret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1]\n\tend\n\t\
    return ret\nend", "    local function tri(c, r, s, i)\n        if i == n + 1 then\n\
    \            return\n        end\n        table.insert(r, c + s)\n        tri(c,\
    \ r, s, i + 1)\n    end\n    local r = {1, 3, 2}\n    tri(3, r, 2, 3)\n    return\
    \ r\nend", "    local result = {1, 3, 2}\n    for i = 3, n do\n        result[i\
    \ + 1] = result[i] + result[i - 1] + result[i - 2]\n    end\n    return result\n\
    end", "  local lst = {1, 3, 2}\n  for i = 3, n do\n    lst[i + 1] = lst[i] + lst[i\
    \ - 1] + lst[i - 2]\n  end\n  return lst\nend", "  if n == 0 then return {} end\n\
    \  local res = {1, 3, 2}\n  for i = 3, n do\n    if i % 2 == 0 then\n      res[i\
    \ + 1] = 1 + i / 2\n    else\n      res[i + 1] = res[i] + res[i - 1] + res[i +\
    \ 2]\n    end\n  end\n  return res\nend", "  local a = {1, 3, 2}\n  for i = 3,\
    \ n do\n    a[i + 1] = a[i] + a[i - 1] + a[i - 2]\n  end\n  return a\nend\nprint(table.concat(tri(12),\
    \ \", \"))", "  if n < 0 then\n    return nil\n  end\n  if n == 0 then\n    return\
    \ {1}\n  end\n  local results = {1, 3, 2}\n  for i = 1, n do\n    results[i +\
    \ 3] = results[i] + results[i + 1] + results[i + 2]\n  end\n  return results\n\
    end", "\tlocal a = 1\n\tlocal b = 3\n\tlocal c = 2\n\tlocal r = {a, b, c}\n\t\
    for i = 4, n + 1 do\n\t\tlocal d = 0\n\t\tif i % 2 == 0 then\n\t\t\td = 1 + i\
    \ / 2\n\t\telse\n\t\t\td = a + b + c\n\t\tend\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\
    \t\ttable.insert(r, d)\n\tend\n\treturn r\nend", "  local function tribonacci(n)\n\
    \    if n == 1 then\n      return 1\n    elseif n == 2 then\n      return 3\n\
    \    elseif n == 3 then\n      return 2\n    elseif n % 2 == 0 then\n      return\
    \ 1 + n / 2\n    else\n      return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n\
    \ + 1)\n    end\n  end\n  local res = {}\n  for i = 1, n + 1 do\n    res[i] =\
    \ tribonacci(i)\n  end\n  return res\nend", "  local res = {1, 3, 2}\n  for i\
    \ = 4, n + 1 do\n    if i % 2 == 0 then\n      res[i] = 1 + i / 2\n    else\n\
    \      res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n    end\n  end\n  return\
    \ res\nend", "  if n == 0 then return {1} end\n  if n == 1 then return {1, 3}\
    \ end\n  if n == 2 then return {1, 3, 2} end\n  local result = {1, 3, 2}\n  for\
    \ i = 3, n do\n    if i % 2 == 0 then\n      table.insert(result, 1 + i / 2)\n\
    \    else\n      table.insert(result, result[i] + result[i-1] + result[i+1])\n\
    \    end\n  end\n  return result\nend", "\tlocal t = {1, 3, 2}\n\tfor i = 1, n\
    \ do\n\t\tlocal l = #t\n\t\tlocal x = t[l] + t[l - 1] + t[l - 2]\n\t\ttable.insert(t,\
    \ x)\n\tend\n\treturn t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
