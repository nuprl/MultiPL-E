name: HumanEval_64_vowels_count
language: lua
prompt: "-- Write a function vowels_count which takes a string representing\n-- a\
  \ word as input and returns the number of vowels in the string.\n-- Vowels in this\
  \ case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only when\
  \ it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"abcde\"\
  )\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
  \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
  \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
  \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
  \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- TODO: Implement this function\nend", "  local i = 0\n  local\
    \ n = 0\n  for j = 1, #s do\n    i = string.find(\"aeiou\", string.lower(s:sub(j,\
    \ j)), i + 1)\n    if i then\n      n = n + 1\n    end\n  end\n  return n\nend",
  "  local count = 0\n  for vowel in string.gmatch(s, \"[aeiouy]\") do\n    count\
    \ = count + 1\n  end\n  return count\nend", "    -- FIXME\nend", "    -- We do\
    \ not consider y at the beginning of a word to be a vowel\n    -- so we remove\
    \ the first character if it is 'y'.\n    if s:sub(1, 1) == 'y' then\n        s\
    \ = s:sub(2)\n    end", "\tlocal n = 0\n\tfor i = 1, #s do\n\t\tif string.find(\"\
    aeiou\", string.lower(s:sub(i, i))) then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\t\
    if string.find(\"aeiou\", string.lower(s:sub(-1, -1))) and #s > 1 then\n\t\tn\
    \ = n + 1\n\tend\n\treturn n\nend", "  local c = 0\n  for i = 1, s:len() do\n\
    \    local l = s:sub(i, i)\n    if (l == 'a' or l == 'e' or l == 'i' or l == 'o'\
    \ or l == 'u' or (l == 'y' and i == s:len())) then\n      c = c + 1\n    end\n\
    \  end\n  return c\nend", "    --TODO: Implement\n    return 0\nend", "    local\
    \ count = 0\n    for v in string.gmatch(s, '[aeiouy]') do\n        count = count\
    \ + 1\n    end\n    return count\nend\nassert(vowels_count(\"abcde\") == 2)\n\
    assert(vowels_count(\"ACEDY\") == 3)\nassert(vowels_count(\"\") == 0)", "   --\
    \ #s is a helper function that returns the number of characters in\n   -- a string.\n\
    \   return #s - (s:gsub(\"[aeiouAEIOU]\", \"\"):len())\nend", "  local v = s:gsub(\"\
    [^aeiou]\",\"\")\n  return #v\nend", "  local num_vowels = 0\n  local vowels =\
    \ \"aeiouy\"\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if vowels:find(c,\
    \ 1, true) then\n      num_vowels = num_vowels + 1\n    end\n  end\n  return num_vowels\n\
    end", "   local count = 0\n   for i = 1, #s do\n      local char = s:sub(i, i)\n\
    \      if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char ==\
    \ 'u' then\n         count = count + 1\n      elseif i == #s and char == 'y' then\n\
    \         count = count + 1\n      end\n   end\n   return count\nend", "  local\
    \ count = 0\n  for c in s:gmatch(\".\") do\n    if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' or c == 'y' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  s = s:lower()\n  local count = 0\n  local vowels\
    \ = \"aeiouy\"\n  for i = 1, s:len() do\n    if vowels:find(s:sub(i, i)) then\n\
    \      count = count + 1\n    end\n  end\n  if s:sub(s:len(), s:len()) == \"y\"\
    \ then\n    count = count - 1\n  end\n  return count\nend", "  return string.gsub(s,\
    \ \"[^aeiouy]\", \"\")\nend", "\t-- Write your code here\n\t-- Hint: use string.match\n\
    end", "    local count = 0\n    s = string.lower(s)\n    for i = 1, string.len(s)\
    \ do\n        if string.sub(s, i, i) == \"a\" or string.sub(s, i, i) == \"e\"\
    \ or string.sub(s, i, i) == \"i\" or string.sub(s, i, i) == \"o\" or string.sub(s,\
    \ i, i) == \"u\" then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "    s = s:lower()\n    return s:gsub(\"[^aeiouy]\", \"\
    \"):len()\nend", "    -- your code here\nend", "    -- Write your code here\n\
    end", "    -- YOUR CODE HERE\n    local s = s:lower()\n    local count = 0\n \
    \   local vowels = \"aeiouy\"\n    for i = 1, #s do\n        if vowels:find(s:sub(i,\
    \ i)) ~= nil then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local n = 0\n  local vowels = \"aeiouy\"\n  for i = 1, #s do\n\
    \    local ch = s:sub(i, i)\n    for j = 1, #vowels do\n      if ch == vowels:sub(j,\
    \ j) then\n        n = n + 1\n        break\n      end\n    end\n  end\n  if #s\
    \ >= 2 and s:sub(-1) == \"y\" and s:sub(-2, -2) ~= \"a\" then\n    n = n - 1\n\
    \  end\n  return n\nend", "  return string.gsub(s, '[aeiouyAEIOUY]', '')\nend",
  "\tlocal n = 0\n\tlocal l = string.len(s)\n\tfor c in string.gmatch(s, \"[AEIOUaeiou]\"\
    ) do\n\t\tn = n + 1\n\tend\n\tif string.sub(s, l, l) == \"y\" then\n\t\tn = n\
    \ + 1\n\tend\n\treturn n\nend", "  -- YOUR CODE HERE\n  local count = 0\n  for\
    \ i = 1, string.len(s) do\n    if string.sub(s, i, i) == \"a\" or string.sub(s,\
    \ i, i) == \"e\" or string.sub(s, i, i) == \"i\" or string.sub(s, i, i) == \"\
    o\" or string.sub(s, i, i) == \"u\" or string.sub(s, i, i) == \"y\" then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend", "\tlocal vowels =\
    \ 'aeiouy'\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif string.find(vowels,\
    \ string.lower(s:sub(i, i)), 1, true) then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "    local count = 0\n    local last_char = string.sub(s,\
    \ -1)\n    for char in string.gmatch(s, \"[aeiouyAEIOUY]\") do\n        count\
    \ = count + 1\n    end\n    if last_char == \"y\" or last_char == \"Y\" then\n\
    \        count = count + 1\n    end\n    return count\nend", "  local num = 0\n\
    \  for i = 1, string.len(s) do\n    local c = string.sub(s, i, i)\n    if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n       (c == 'y' and\
    \ i == string.len(s)) then\n      num = num + 1\n    end\n  end\n  return num\n\
    end", "    return 0\nend", "    s = s:lower()\n    s = s:gsub(\"[^aeiouy]\", \"\
    \")\n    local count = #s\n    if s:sub(-1) == \"y\" then\n        count = count\
    \ - 1\n    end\n    return count\nend", "    local count = 0\n    for i = 1, #s\
    \ do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i'\
    \ or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i, i) == 'y' then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \   return nil\nend", "    local len = #s\n    local count = 0\n    for i = 1,\
    \ len do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) ==\
    \ 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n            count = count\
    \ + 1\n        end\n    end\n    if s:sub(len, len) == 'y' then\n        count\
    \ = count + 1\n    end\n    return count\nend", "    local count = 0\n    for\
    \ i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i,\
    \ i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n            count\
    \ = count + 1\n        end\n    end\n    if s:sub(#s, #s) == 'y' then\n      \
    \  count = count + 1\n    end\n    return count\nend", "    local c = 0\n    local\
    \ vowels = { a = true, e = true, i = true, o = true, u = true, y = true }\n  \
    \  for i = 1, #s do\n        local char = s:sub(i, i)\n        if vowels[char:lower()]\
    \ then\n            c = c + 1\n        end\n    end\n    return c\nend", "  local\
    \ v = 0\n  for i = 1, #s do\n    if (s:sub(i, i) == 'a' or s:sub(i, i) == 'e'\
    \ or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u') then\n  \
    \    v = v + 1\n    end\n  end\n  return v\nend", "  local count = 0\n  local\
    \ c = s:sub(1, 1)\n  if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n    count = count + 1\n  end\n  if string.len(s) == 1 then\n    return\
    \ count\n  end\n  local c = s:sub(string.len(s), string.len(s))\n  if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' or c == 'y' then\n    count\
    \ = count + 1\n  end\n  return count + vowels_count(s:sub(2, string.len(s) - 1))\n\
    end", "    local count = 0\n    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n \
    \   for i = 1, #s do\n        if s:sub(i, i) == 'y' and i == #s then\n       \
    \     count = count + 1\n        elseif table.indexof(vowels, s:sub(i, i)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "   -- missing code\nend", "  -- write your code here.\nend", "   local count =\
    \ 0\n   local vowel = { a = true, e = true, i = true, o = true, u = true, y =\
    \ true }\n   local last = string.sub(s, -1)\n   for c in string.gmatch(s, \".\"\
    ) do\n      if vowel[c:lower()] then\n         count = count + 1\n      end\n\
    \   end\n   if vowel[last:lower()] then\n      count = count + 1\n   end\n   return\
    \ count\nend", "  local result = 0\n  local dict = { [\"a\"] = true, [\"e\"] =\
    \ true, [\"i\"] = true, [\"o\"] = true, [\"u\"] = true, [\"y\"] = true }\n  for\
    \ i = 1, #s do\n    if dict[s:sub(i, i)] then\n      result = result + 1\n   \
    \ end\n  end\n  return result\nend", "  local count = 0\n  s = s:lower()\n  if\
    \ s:sub(-1, -1) == 'y' then\n    count = count + 1\n  end\n  return count + s:gsub('[aeiou]',\
    \ '')\nend", "    -- TODO: implement this function\nend", "  return 0\nend", " \
    \ local count = 0\n  for i=1,string.len(s) do\n    if (s:sub(i,i) == \"a\" or\
    \ s:sub(i,i) == \"e\" or s:sub(i,i) == \"i\" or s:sub(i,i) == \"o\" or s:sub(i,i)\
    \ == \"u\" or (s:sub(i,i) == \"y\" and i == string.len(s))) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ c in s:gmatch\".\" do\n    if is_vowel(c) then\n      count = count + 1\n  \
    \  end\n  end\n  if s:match\"y$\" then\n    count = count + 1\n  end\n  return\
    \ count\nend", "  -- TODO: check if the input is a string\n  -- TODO: check if\
    \ the string only consists of characters from the\n  -- set of small and capital\
    \ letters.\n  local count = 0\n  -- TODO: use a for loop to iterate over the string\
    \ s\n  return count\nend", "    return 0\nend", "    local count = 0\n    for\
    \ i = 1, #s do\n        if (s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i,\
    \ i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y'\
    \ and i == #s)) then\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend", "  local count = 0\n  -- Start from the second character\
    \ because the first character\n  -- should be 'y'\n  for i = 2, #s do\n    local\
    \ char = s:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char\
    \ == 'o' or char == 'u' then\n      count = count + 1\n    end\n  end\n  -- Check\
    \ the first character\n  if s:sub(1, 1) == 'y' then\n    count = count + 1\n \
    \ end\n  return count\nend", "\tlocal s = s:lower()\n\treturn s:gsub(\"[^aeiouy]\"\
    , \"\"):len()\nend", "    local vowels = { \"a\", \"e\", \"i\", \"o\", \"u\",\
    \ \"y\" }\n    local count = 0\n    for letter in s:gmatch(\"%l\") do\n      \
    \  for _, vowel in ipairs(vowels) do\n            if letter == vowel then\n  \
    \              count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  -- YOUR CODE HERE\n  local v_count = 0\n  for i=1,#s do\n  \
    \  if (s:sub(i,i) == \"a\" or s:sub(i,i) == \"e\" or s:sub(i,i) == \"i\" or s:sub(i,i)\
    \ == \"o\" or s:sub(i,i) == \"u\") then\n      v_count = v_count + 1\n    elseif\
    \ (s:sub(i,i) == \"y\" and i ~= #s) then\n      v_count = v_count + 1\n    end\n\
    \  end\n  return v_count\nend", "    local vowels = {a = 1, e = 1, i = 1, o =\
    \ 1, u = 1, y = 1}\n    local v_count = 0\n    for w in s:gmatch(\"%a\") do\n\
    \        if vowels[w:lower()] then\n            v_count = v_count + 1\n      \
    \  end\n    end\n    return v_count\nend", "\tlocal s = string.lower(s)\n\treturn\
    \ string.len(string.gsub(s, \"[aeiouy]\", \"\"))\nend", "   return 0\nend", " \
    \ assert(type(s) == \"string\")\n  local count = 0\n  for c in s:gmatch\".\" do\n\
    \    if c:find(\"[aeiouy]\") then\n      count = count + 1\n    end\n  end\n \
    \ -- Check for 'y' at the end of the word\n  if s:sub(-1):find(\"[y]\") then\n\
    \    count = count + 1\n  end\n  return count\nend", "  local t = {}\n  local\
    \ n = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if t[c] == nil then\n\
    \      t[c] = 1\n      if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' or\n         (c == 'y' and i == #s) then\n        n = n + 1\n      end\n\
    \    end\n  end\n  return n\nend", "    local count = 0\n    for c in s:gmatch(\"\
    [aeiouy]\") do\n        count = count + 1\n    end\n    return count\nend", " \
    \ return string.gsub(s:lower(), \"[^aeiouy]\", \"\")\nend", "    local cnt = 0\n\
    \    for _,v in ipairs({'a', 'e', 'i', 'o', 'u'}) do\n        if string.find(s,\
    \ v) then\n            cnt = cnt + 1\n        end\n    end\n    if s:sub(-1) ==\
    \ 'y' then\n        cnt = cnt + 1\n    end\n    return cnt\nend", "  local v =\
    \ {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local c = 0\n  for i = 1, #s do\n   \
    \ if s:find(v[i]) or (s:find(\"y\") and i == #s) then\n      c = c + 1\n    end\n\
    \  end\n  return c\nend", "  return string.gsub(s, '[^aeiouyAEIOUY]', ''):len()\n\
    end", "  local count = 0\n  for c in s:gmatch(\"[aeiou]\") do\n    count = count\
    \ + 1\n  end\n  if s:sub(-1) == \"y\" then\n    count = count + 1\n  end\n  return\
    \ count\nend", "    local vowels = \"aeiouy\"\n    local count = 0\n    for _,\
    \ letter in ipairs(s) do\n        if (vowels:find(letter) ~= nil) then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "   \
    \ local counter = 0\n    local vowels = {a = 1, e = 1, i = 1, o = 1, u = 1, y\
    \ = 1}\n    for letter in s:gmatch(\".\") do\n        if vowels[letter:lower()]\
    \ then\n            counter = counter + 1\n        end\n    end\n    return counter\n\
    end", "    return string.gsub(s, \"[^aeiouy]\", \"\")\nend", "\tif #s == 0 then\n\
    \t\treturn 0\n\tend\n\tif 'aeiouyAEIOUY' : match(s:sub(1,1)) then\n\t\treturn\
    \ 1 + vowels_count(s:sub(2))\n\telse\n\t\treturn vowels_count(s:sub(2))\n\tend\n\
    end", "    local n = 0\n    for c in s:gmatch(\"[aeiouy]\") do\n        n = n\
    \ + 1\n    end\n    return n\nend", "    local count = 0\n    for i,char in ipairs(s)\
    \ do\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char\
    \ == 'u' or (char == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "    return s:gsub(\"[^aeiouy]\"\
    , \"\"):len()\nend", "    -- Copy the input string to avoid modifying the original\n\
    \    local str = s:lower()\n    local count = 0\n    for i=1,string.len(str) do\n\
    \        if string.find(\"aeiouy\", string.sub(str, i, i)) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local count =\
    \ 0\n  -- The string s could be empty\n  if s == \"\" then\n    return 0\n  end\n\
    \  -- We go through the string and check each character\n  for i = 1, string.len(s)\
    \ do\n    -- If the character is a vowel, we add one to the count\n    if string.sub(s,\
    \ i, i) == \"a\" or string.sub(s, i, i) == \"e\" or string.sub(s, i, i) == \"\
    i\" or string.sub(s, i, i) == \"o\" or string.sub(s, i, i) == \"u\" or string.sub(s,\
    \ i, i) == \"y\" then\n      count = count + 1\n    end\n  end\n  -- We also have\
    \ to check if the last character is a y\n  if string.sub(s, string.len(s), string.len(s))\
    \ == \"y\" then\n    count = count + 1\n  end\n  return count\nend", "    local\
    \ counter = 0\n    local prev_char\n    for char in s:gmatch(\"%a\") do\n    \
    \    if is_vowel(char) then\n            counter = counter + 1\n        end\n\
    \        prev_char = char\n    end\n    if prev_char == 'y' then\n        counter\
    \ = counter + 1\n    end\n    return counter\nend", "  local vowels = \"aeiouy\"\
    \n  local y_count = 0\n  local count = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c == \"y\" then\n      y_count = y_count + 1\n    elseif vowels:find(c)\
    \ then\n      count = count + 1\n    end\n  end\n  if (y_count > 0) and (s:sub(-1)\
    \ == \"y\") then\n    count = count + y_count\n  end\n  return count\nend", " \
    \ return string.gsub(s, \"[AEIOUaeiou]\", \"\")\nend", "    local s = string.lower(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for _,\
    \ letter in ipairs(vowels) do\n        if string.find(s, letter) then\n      \
    \      count = count + 1\n        end\n    end\n    if string.sub(s, #s) == 'y'\
    \ then\n        count = count + 1\n    end\n    return count\nend", "    -- TODO:\
    \ fill in this function body\nend", "    local vowels = \"aeiouy\"\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s:find(s:sub(i, i), 1, true) ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  assert(type(s) == \"string\")\n  local count = 0\n  local vowels = \"\
    aeiouy\"\n  for v in string.gmatch(s, \".\") do\n    if string.find(vowels, v,\
    \ 1, true) then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local cnt = 0\n    for _, v in ipairs(s:gmatch(\"[aeiouy]*\")) do\n       \
    \ if v ~= \"\" then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend", "    -- TODO: your code here\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local count = 0\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == 'y' and i == #s then\n            count = count + 1\n        elseif table.count(vowels,\
    \ s:sub(i, i)) > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local s = s:lower()\n  local count = 0\n  for i =\
    \ 1, #s do\n    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) ==\
    \ 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n      count = count +\
    \ 1\n    end\n  end\n  if s:sub(-1, -1) == 'y' then\n    count = count + 1\n \
    \ end\n  return count\nend", "    return select(2, s:gsub(\"[aeiouy]\", \"\"))\n\
    end", "    local count = 0\n    local t = {'a', 'e', 'i', 'o', 'u'}\n    for i\
    \ = 1, #s do\n        if (string.find(t, s[i]) and s[i] ~= 'y') or (s[i] == 'y'\
    \ and i == #s) then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "    local c = 0\n    local v = \"aeiou\"\n    for i = 1,\
    \ #s do\n        local ch = s:sub(i, i)\n        if v:find(ch, 1, true) then\n\
    \            c = c + 1\n        end\n    end\n    return c\nend", "    if string.len(s)\
    \ == 0 then\n        return 0\n    elseif string.len(s) == 1 then\n        if\
    \ s == \"a\" or s == \"e\" or s == \"i\" or s == \"o\" or s == \"u\" then\n  \
    \          return 1\n        else\n            return 0\n        end\n    else\n\
    \        if s:sub(1,1) == \"a\" or s:sub(1,1) == \"e\" or s:sub(1,1) == \"i\"\
    \ or s:sub(1,1) == \"o\" or s:sub(1,1) == \"u\" then\n            return 1 + vowels_count(s:sub(2))\n\
    \        else\n            return vowels_count(s:sub(2))\n        end\n    end\n\
    end", "\tlocal count = 0\n\tfor i=1,#s do\n\t\tlocal ch = s:sub(i,i)\n\t\tlocal\
    \ v = string.find('aeiouy', ch, 1, true)\n\t\tif v ~= nil then\n\t\t\tcount =\
    \ count + 1\n\t\tend\n\tend\n\treturn count\nend\nassert(vowels_count(\"abcde\"\
    ) == 2)\nassert(vowels_count(\"ACEDY\") == 3)", "  return nil\nend", "    local\
    \ n = 0\n    for c in s:gmatch(\"[aeiouy]\") do\n        n = n + 1\n    end\n\
    \    if s:sub(-1) == \"y\" then\n        n = n + 1\n    end\n    return n\nend",
  "    -- ...\nend", "\tif type(s) ~= \"string\" then\n\t\terror \"string expected\"\
    \n\tend\n\tlocal total = 0\n\tfor v in string.gmatch(s, \"[aeiouy]\") do\n\t\t\
    total = total + 1\n\tend\n\treturn total\nend", "    local count = 0\n    local\
    \ lowercase = string.lower(s)\n    for i = 1, string.len(lowercase) do\n     \
    \   local c = string.sub(lowercase, i, i)\n        if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n            count = count + 1\n     \
    \   end\n    end\n    if string.sub(lowercase, string.len(lowercase), string.len(lowercase))\
    \ == 'y' then\n        count = count + 1\n    end\n    return count\nend", " \
    \ local str = string.lower(s)\n  local count = 0\n  for i = 1, #str do\n    if\
    \ string.match(str:sub(i, i), '[aeiouy]') then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local vowels = \"aeiou\"\n  local c = 0\n  for\
    \ i = 1, s:len() do\n    if vowels:find(s:sub(i, i), 1, true) then\n      c =\
    \ c + 1\n    end\n  end\n  return c\nend", "    local count = 0\n    local is_last_y\
    \ = false\n    for i = 1, string.len(s) do\n        local c = string.sub(s, i,\
    \ i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \            count = count + 1\n        elseif c == 'y' then\n            if i\
    \ == string.len(s) then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i,\
    \ i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i, i) == 'y'\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local vowels = 0\n  s = s:lower()\n  for i = 1, string.len(s) do\n  \
    \  local c = string.sub(s, i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' or\n      (c == 'y' and i == string.len(s)) then\n      vowels\
    \ = vowels + 1\n    end\n  end\n  return vowels\nend", "    return 0\nend", " \
    \   local count = 0\n    local s = s:lower()\n    for i = 1, #s do\n        if\
    \ (s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i,\
    \ i) == 'o' or s:sub(i, i) == 'u') or\n           (s:sub(i, i) == 'y' and #s ==\
    \ i) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    local stringlen = string.len(s)\n    local ys\
    \ = 0\n    for i = 1, stringlen do\n        local c = string.sub(s, i, i)\n  \
    \      if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n    \
    \        count = count + 1\n        elseif c == 'y' then\n            if i ==\
    \ stringlen then\n                count = count + 1\n            end\n       \
    \ end\n    end\n    return count\nend", "    -- Please replace the required line\
    \ with the\n    -- appropriate code\n    local a, e, i, o, u, y = 0, 0, 0, 0,\
    \ 0, 0\n    local v = 0\n    for k,v in pairs(s) do\n        if v == 'a' then\n\
    \            a = a + 1\n        elseif v == 'e' then\n            e = e + 1\n\
    \        elseif v == 'i' then\n            i = i + 1\n        elseif v == 'o'\
    \ then\n            o = o + 1\n        elseif v == 'u' then\n            u = u\
    \ + 1\n        elseif v == 'y' then\n            y = y + 1\n        end\n    end\n\
    \    local v = a + e + i + o + u + y\n    return v\nend", "    return 0\nend",
  "    local count = 0\n    local s = s:lower()\n    for i = 1, #s do\n        if\
    \ s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i)\
    \ == 'o' or s:sub(i, i) == 'u' then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local i = 0\n  local c = 0\n  local last\
    \ = \"\"\n  while true do\n    local b, e = s:find(\"%a\", i)\n    if b then\n\
    \      if last == \"y\" then\n        if \"aeiou\".find(s:sub(b, b)) then\n  \
    \        c = c + 1\n        end\n      elseif \"aeiou\".find(s:sub(b, b)) then\n\
    \        c = c + 1\n      end\n      last = s:sub(b, b)\n      i = e + 1\n   \
    \ else\n      break\n    end\n  end\n  return c\nend", "    local n = 0\n    for\
    \ i = 1, #s do\n        local c = s:sub(i, i)\n        if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' or\n           (c == 'y' and i == #s) then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend", "  local vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local count = 0\n  for i = 1, #s do\n\
    \    local letter = s:sub(i, i)\n    if letter == \"y\" and i == #s then\n   \
    \   count = count + 1\n    elseif hw.contains(vowels, letter) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n  \
    \  for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i,\
    \ i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y'\
    \ and i == #s) then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "  -- TODO\nend", "    local count = 0\n    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local last = string.sub(s, string.len(s), string.len(s))\n\
    \    if last == 'y' then\n        table.insert(vowels, 'y')\n    end\n    for\
    \ v in string.gmatch(s, \"[aeiouy]\") do\n        count = count + 1\n    end\n\
    \    return count\nend", "  local s = s:lower()\n  local v, i = 0, 0\n  while\
    \ i < #s do\n    local c = s:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i'\
    \ or c == 'o' or c == 'u' then\n      v = v + 1\n    end\n    i = i + 1\n  end\n\
    \  local c = s:sub(#s, #s)\n  if c == 'y' then\n    v = v + 1\n  end\n  return\
    \ v\nend", "\terror(\"todo\")\nend", "    -- TODO: complete this function\nend",
  "  local vowels = \"aeiouy\"\n  local count = 0\n  for i = 1, #s do\n    local ch\
    \ = s:sub(i, i)\n    for j = 1, #vowels do\n      if ch == vowels:sub(j, j) then\n\
    \        count = count + 1\n        break\n      end\n    end\n  end\n  return\
    \ count\nend", "  local vowels = 0\n  for c in s:gmatch('.') do\n    if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      vowels = vowels\
    \ + 1\n    elseif c == 'y' and (s:find(c, -1) == #s) then\n      vowels = vowels\
    \ + 1\n    end\n  end\n  return vowels\nend", "    local count = 0\n    for i\
    \ = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i,\
    \ i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y'\
    \ and i == #s) then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "    -- TODO: fix this\n    return 0\nend", "    local count\
    \ = 0\n    for i = 1, string.len(s) do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == string.len(s)) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "   local count = 0\n   for\
    \ i = 1, #s do\n      local c = s:sub(i, i)\n      if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' or\n         c == 'A' or c == 'E' or c == 'I'\
    \ or c == 'O' or c == 'U' or\n         (c == 'y' and i == #s) or (c == 'Y' and\
    \ i == #s) then\n         count = count + 1\n      end\n   end\n   return count\n\
    end", "\treturn 0\nend", "   local s = s:lower()\n   local c = 0\n   for i = 1,\
    \ #s do\n      if string.match(s, '^a$') or string.match(s, '^e$') or string.match(s,\
    \ '^i$') or string.match(s, '^o$') or string.match(s, '^u$') then\n         c\
    \ = c + 1\n      elseif string.match(s, '^y$') and i == #s then\n         c =\
    \ c + 1\n      end\n      s = string.sub(s, 2)\n   end\n   return c\nend", " \
    \   local vcount = 0\n    -- your code here\n    return vcount\nend", "  local\
    \ function is_vowel(c)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or\
    \ c == 'u' then\n      return true\n    elseif c == 'y' then\n      if s:len()\
    \ == 1 then\n        return true\n      else\n        if s:sub(2, 2) == 'a' or\
    \ s:sub(2, 2) == 'e' or s:sub(2, 2) == 'i' or s:sub(2, 2) == 'o' or s:sub(2, 2)\
    \ == 'u' then\n          return false\n        else\n          return true\n \
    \       end\n      end\n    else\n      return false\n    end\n  end\n  local\
    \ vowel_count = 0\n  for c in s:gmatch\".\" do\n    if is_vowel(c) then\n    \
    \  vowel_count = vowel_count + 1\n    end\n  end\n  return vowel_count\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if s:sub(i, i) == 'y' and i == #s then\n      count = count + 1\n  \
    \  elseif contain(vowels, s:sub(i, i)) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "\tlocal c = 0\n\tfor i = 1, s:len() do\n\t\tlocal\
    \ i = s:lower():sub(i, i)\n\t\tif i == 'a' or i == 'e' or i == 'i' or i == 'o'\
    \ or i == 'u' then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend", "    --\
    \ write your code here\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local counter = 0\n    for _, letter in ipairs(s) do\n        for _, vowel\
    \ in ipairs(vowels) do\n            if letter == vowel then\n                counter\
    \ = counter + 1\n            end\n        end\n    end\n    return counter\nend",
  "\tlocal count = 0\n\tfor i=1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tif vowels[c]\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tif s:sub(-1,-1) == 'y' then\n\
    \t\tcount = count + 1\n\tend\n\treturn count\nend", "  -- TODO: Implement this\
    \ function\nend", "    return s:gsub(\"[^aeiouy]\", \"\"):len()\nend", "\t-- Do\
    \ not modify this function\n\tif type(s) ~= \"string\" then\n\t\treturn nil\n\t\
    end\n\tlocal n = 0\n\tfor i = 1, #s do\n\t\tif vowels[s:sub(i, i)] then\n\t\t\t\
    n = n + 1\n\t\tend\n\tend\n\treturn n\nend", "  -- TODO: implement this function\n\
    end", "    local l = string.lower(s)\n    return #l - #string.gsub(l, \"[aeiouy]\"\
    , \"\")\nend", "  local str = string.lower(s)\n  local count = 0\n  for i = 1,\
    \ #str do\n    if str:sub(i, i) == 'a' or str:sub(i, i) == 'e' or str:sub(i, i)\
    \ == 'i' or str:sub(i, i) == 'o' or str:sub(i, i) == 'u' then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local c = 0\n  for i = 1, #s do\n\
    \    local c1 = s:sub(i, i)\n    if c1 == 'a' or c1 == 'e' or c1 == 'i' or c1\
    \ == 'o' or c1 == 'u' or\n       c1 == 'A' or c1 == 'E' or c1 == 'I' or c1 ==\
    \ 'O' or c1 == 'U' then\n      c = c + 1\n    end\n  end\n  if s:sub(-1) == 'y'\
    \ or s:sub(-1) == 'Y' then\n    c = c + 1\n  end\n  return c\nend", "    local\
    \ i, vowels = 0, 0\n    local n = string.len(s)\n    for i = 1, n do\n       \
    \ if is_vowel(s:sub(i, i)) then\n            vowels = vowels + 1\n        end\n\
    \    end\n    if vowels == 0 then\n        return 0\n    elseif is_vowel(s:sub(n,\
    \ n)) then\n        return vowels\n    else\n        return vowels - 1\n    end\n\
    end", "   count = 0\n   for i = 1, #s do\n      if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n         count = count + 1\n     \
    \ end\n   end\n   return count\nend", "    local c = 0\n    for i = 1, #s do\n\
    \        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or\
    \ s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == #s)\
    \ then\n            c = c + 1\n        end\n    end\n    return c\nend", "  local\
    \ pattern = \"([aeiouy])\"\n  local n = 0\n  for _ in s:gmatch(pattern) do\n \
    \   n = n + 1\n  end\n  return n\nend", "    local vowels = \"aeiou\"\n    local\
    \ count = 0\n    for i = 1, string.len(s) do\n        local char = string.sub(s,\
    \ i, i)\n        if string.find(vowels, char) then\n            count = count\
    \ + 1\n        end\n    end\n    if (string.sub(s, -1) == \"y\") then\n      \
    \  count = count + 1\n    end\n    return count\nend", "    local count = 0\n\
    \    local l = s:lower()\n    if l:sub(-1) == 'y' then\n        count = count\
    \ + 1\n    end\n    for c in l:gmatch(\"[aeiou]\") do\n        count = count +\
    \ 1\n    end\n    return count\nend", "    local c = 0\n    for i = 1, #s do\n\
    \        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or\
    \ s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i, i) == 'y' then\n      \
    \      c = c + 1\n        end\n    end\n    return c\nend", "  assert(type(s)\
    \ == \"string\")\n  return (#s:gsub(\"[aeiouyAEIOUY]\", \"\"))\nend", "    --\
    \ TODO: add your code here\nend", "  local vc = 0\n  local vowels = \"aeiou\"\n\
    \  for i=1,string.len(s) do\n    if vowels:find(string.lower(s:sub(i,i))) then\n\
    \      vc = vc + 1\n    end\n  end\n  return vc\nend", "   -- TODO: implement\
    \ vowels_count\nend", "\tlocal count = 0\n\tfor c in s:gmatch(\".\") do\n\t\t\
    if (c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" or c ==\
    \ \"y\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "  return #s:gsub(\"[^aeiouy]\", \"\")\nend", "  -- INSERT CODE HERE\nend", "  local\
    \ count = 0\n  local last_was_y = false\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n \
    \     count = count + 1\n      last_was_y = false\n    elseif c == 'y' and not\
    \ last_was_y then\n      count = count + 1\n      last_was_y = true\n    else\n\
    \      last_was_y = false\n    end\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            count = count\
    \ + 1\n        elseif c == 'y' and i == #s then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  \nend", "    local count = 0\n\
    \    local t = {}\n    for i = 1, #s do\n        if is_vowel(s:sub(i, i)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "\tlocal vowels = string.gsub(s, \"[^aeiouy]\", \"\")\n\tif string.sub(vowels, #vowels)\
    \ == \"y\" then\n\t\tvowels = string.sub(vowels, 1, #vowels - 1)\n\tend\n\treturn\
    \ #vowels\nend", "    -- It's best to avoid global variables.\n    -- Also, string\
    \ library has a function to iterate characters of a string.\n    local vowels\
    \ = {a = true, e = true, i = true, o = true, u = true, y = true}\n    local count\
    \ = 0\n    for letter in s:gmatch(\".\") do\n        if vowels[letter:lower()]\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local n = 0\n  local v = {a = true, e = true, i = true, o = true, u =\
    \ true, y = true}\n  local l = s:lower()\n  for i = 1, l:len() do\n    if v[l:sub(i,\
    \ i)] then\n      n = n + 1\n    end\n  end\n  return n\nend", "    local count\
    \ = 0\n    for i, c in ipairs(s) do\n        if c == 'a' or c == 'e' or c == 'i'\
    \ or c == 'o' or c == 'u' or\n           (c == 'y' and i == #s) then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ v = {}\n  for i = 1,#s do\n    if s:sub(i,i) == 'a' or s:sub(i,i) == 'e' or\
    \ s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i) == 'u' or s:sub(i,i) ==\
    \ 'y' then\n      table.insert(v,s:sub(i,i))\n    end\n  end\n  if v[#v] == 'y'\
    \ then\n    return #v\n  else\n    return #v - 1\n  end\nend", "  local count\
    \ = 0\n  for c in s:gmatch('.') do\n    if c == 'a' or c == 'e' or c == 'i' or\
    \ c == 'o' or c == 'u' then\n      count = count + 1\n    end\n  end\n  if s:sub(-1)\
    \ == 'y' then\n    count = count + 1\n  end\n  return count\nend", "  local s\
    \ = s:lower()\n  local c = 0\n  for i=1,#s do\n    if string.find(\"aeiouy\",\
    \ s:sub(i,i)) then\n      c = c + 1\n    end\n  end\n  return c\nend", "    --\
    \ YOUR CODE HERE\n    -- return error(\"todo vowels_count\")\n    local y = false\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i\
    \ = 1, string.len(s) do\n        if vowels[string.sub(s, i, i)] then\n       \
    \     count = count + 1\n        end\n        if string.sub(s, i, i) == 'y' then\n\
    \            y = true\n        end\n    end\n    if y and count > 0 then\n   \
    \     count = count + 1\n    end\n    return count\nend", "    -- put your code\
    \ here\nend", "   local pattern = \"a\"..\"e\"..\"i\"..\"o\"..\"u\"..\"y\"\n \
    \  local count = 0\n   for i = 1, #s do\n      if string.find(pattern, string.lower(s:sub(i,i)))\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "  -- your code here\nend", "  local count = 0\n  s = s:lower()\n  for i = 1, #s\
    \ do\n    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or\
    \ s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n      count = count + 1\n   \
    \ end\n  end\n  if s:sub(-1) == 'y' then\n    count = count + 1\n  end\n  return\
    \ count\nend", "    local c = 0\n    for _, ch in ipairs{ s:lower():gmatch(\"\
    %a\") } do\n        if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch\
    \ == 'u' then\n            c = c + 1\n        end\n    end\n    if s:sub(-1) ==\
    \ 'y' then\n        c = c + 1\n    end\n    return c\nend", "    local n = 0\n\
    \    local t = {\n        ['a'] = true,\n        ['e'] = true,\n        ['i']\
    \ = true,\n        ['o'] = true,\n        ['u'] = true,\n        ['y'] = true,\n\
    \    }\n    for i = 1, #s do\n        if t[s:sub(i, i)] then\n            n =\
    \ n + 1\n        end\n    end\n    return n\nend", "    local ct = 0\n    for\
    \ i = 1, #s do\n        local c = s:sub(i, i)\n        if is_vowel(c) then\n \
    \           ct = ct + 1\n        end\n    end\n    return ct\nend", "    -- Write\
    \ your code here\n    local count = 0\n    for i=1, #s do\n        if s:sub(i,i)\
    \ == 'a' or s:sub(i,i) == 'e' or s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i)\
    \ == 'u' then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  s = s:lower()\n  local n = 0\n  for c in s:gmatch(\".\") do\n\
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or c == 'y' then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "  --TODO: your code here\n\
    \  local vc = 0\n  for char in s:gmatch(\".\") do\n    if char == \"a\" or char\
    \ == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" or char == \"y\"\
    \ then\n      vc = vc + 1\n    end\n  end\n  return vc\nend", "  return 0\nend",
  "\treturn #s:lower():gsub(\"[^aeiouy]\", \"\")\nend", "    return #(s:gsub(\"[^aeiouy]\"\
    , \"\"))\nend", "  -- TODO: Write your code here\n  local count = 0\n  for i=1,\
    \ #s do\n    local x = string.sub(s, i, i)\n    if x == 'a' or x == 'e' or x ==\
    \ 'i' or x == 'o' or x == 'u' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local cnt = 0\n  for i = 1, #s do\n    if s:sub(i, i)\
    \ == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or\
    \ s:sub(i, i) == 'u' then\n      cnt = cnt + 1\n    end\n  end\n  if s:sub(-1,\
    \ -1) == 'y' then\n    cnt = cnt + 1\n  end\n  return cnt\nend", "    local vowels\
    \ = {a = true, e = true, i = true, o = true, u = true}\n    local count = 0\n\
    \    local last = string.sub(s, -1)", "    -- your code here\nend", "    -- Note:\
    \ a string is a list of chars.\n    -- You can use len function to get the length\
    \ of a list,\n    -- and you can use square brackets to index a specific element\
    \ from a list.\n    -- Example:\n    -- >>> len {'a', 'b', 'c'}\n    -- 3\n  \
    \  -- >>> {'a', 'b', 'c'}[2]\n    -- 'b'\n    -- >>> {'a', 'b', 'c'}[1]\n    --\
    \ 'a'\n    -- >>> {'a', 'b', 'c'}[3]\n    -- 'c'\n    -- >>> {'a', 'b', 'c'}[4]\n\
    \    -- nil\n    -- >>> {'a', 'b', 'c'}[0]\n    -- nil\n    -- >>> len {}\n  \
    \  -- 0\n    -- >>> {}[1]\n    -- nil\n    -- You can also concatenate two lists:\n\
    \    -- >>> {'a', 'b', 'c'} .. {'d', 'e', 'f'}\n    -- {'a', 'b', 'c', 'd', 'e',\
    \ 'f'}\n    -- >>> {'a', 'b', 'c'} .. {}\n    -- {'a', 'b', 'c'}\n    -- >>> {}\
    \ .. {'a', 'b', 'c'}\n    -- {'a', 'b', 'c'}\n    -- >>> {} .. {}\n    -- {}\n\
    \    -- >>> {} .. nil\n    -- {}\n    -- >>> {'a', 'b', 'c'} .. nil\n    -- {'a',\
    \ 'b', 'c'}\n    -- >>> nil .. {'a', 'b', 'c'}\n    -- {'a', 'b', 'c'}\n    --\
    \ >>> nil .. nil\n    -- {}\n    -- >>> 'Hello ' .. 'world!'\n    -- 'Hello world!'\n\
    \    -- You can get the last element of a list by indexing a length of the list\n\
    \    -- minus one.\n    -- >>> {'a', 'b', 'c'}[len {'a', 'b', 'c'}]\n    -- 'c'\n\
    \    -- Note", "    local vowels = \"aeiouy\"\n    local count = 0\n    for i\
    \ = 1, string.len(s) do\n        local char = string.sub(s, i, i)\n        if\
    \ string.find(vowels, char) ~= nil then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend", "    -- BEGIN SOLUTION\n    local count\
    \ = 0\n    for letter in s:gmatch(\".\") do\n        if string.find(\"aeiouy\"\
    , letter, 1, true) ~= nil then\n            count = count + 1\n        end\n \
    \   end\n    return count\n    -- END SOLUTION\nend", "    local cnt = 0\n   \
    \ local vowels = {a = true, e = true, i = true, o = true, u = true,\n        A\
    \ = true, E = true, I = true, O = true, U = true}\n    for i = 1, #s do\n    \
    \    if vowels[s:sub(i, i)] then\n            cnt = cnt + 1\n        end\n   \
    \ end\n    if s:sub(-1) == 'y' then\n        cnt = cnt + 1\n    end\n    return\
    \ cnt\nend", "  local n = 0\n  for c in s:gmatch\".\" do\n    if c:lower() ==\
    \ \"a\" or c:lower() == \"e\" or c:lower() == \"i\" or c:lower() == \"o\" or c:lower()\
    \ == \"u\" then\n      n = n + 1\n    end\n  end\n  if s:sub(-1, -1):lower() ==\
    \ \"y\" then\n    n = n + 1\n  end\n  return n\nend", "  -- TODO: write your code\
    \ here\n  --[[\n  local vowel_count = 0\n  for i = 1, #s do\n    local char =\
    \ s:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o'\
    \ or char == 'u' then\n      vowel_count = vowel_count + 1\n    end\n  end\n \
    \ if s:sub(-1, -1) == 'y' then\n    vowel_count = vowel_count + 1\n  end\n  return\
    \ vowel_count\n  --]]\n  local vowel_count = 0\n  for i = 1, #s do\n    local\
    \ char = s:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char\
    \ == 'o' or char == 'u' or (char == 'y' and i == #s) then\n      vowel_count =\
    \ vowel_count + 1\n    end\n  end\n  return vowel_count\nend", "    local i =\
    \ 0\n    local vowel_count = 0\n    while (i < #s) do\n        if s:sub(i, i)\
    \ == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or\
    \ s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == #s - 1) then\n          \
    \  vowel_count = vowel_count + 1\n        end\n        i = i + 1\n    end\n  \
    \  return vowel_count\nend", "  -- TODO: implement\nend", "  return #s:gsub(\"\
    [^aeiouy]\", \"\")\nend", "  -- Keep track of the count of vowels found so far.\n\
    \  local n = 0\n  -- Need to loop over all the letters in s, from left to right.\n\
    \  for i = 1, string.len(s) do\n    -- We will treat all letters as lower case.\n\
    \    local c = string.lower(string.sub(s, i, i))\n    -- Check if c is a vowel.\n\
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      --\
    \ If so, increment the vowel count.\n      n = n + 1\n    end\n  end\n  -- Return\
    \ the final vowel count.\n  return n\nend", "    local count = 0\n    local s\
    \ = string.lower(s)\n    for i = 1, string.len(s) do\n        if string.sub(s,\
    \ i, i) == \"a\" or string.sub(s, i, i) == \"e\" or string.sub(s, i, i) == \"\
    i\" or string.sub(s, i, i) == \"o\" or string.sub(s, i, i) == \"u\" then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \   count = 0\n    vowels = 'aeiouy'\n    for i = 1, #s do\n        if vowels:find(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    local vowel_at_end = false\n    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #s do\n        if (vowel_at_end and\
    \ s[i] == 'y') then\n            count = count + 1\n            vowel_at_end =\
    \ false\n        elseif (#vowels[s[i]] > 0) then\n            count = count +\
    \ 1\n            vowel_at_end = true\n        else\n            vowel_at_end =\
    \ false\n        end\n    end\n    return count\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i = 1, string.len(s) do\n\
    \        local c = string.sub(s, i, i)\n        if c == 'y' and i == string.len(s)\
    \ then\n            count = count + 1\n        else\n            for i, v in ipairs(vowels)\
    \ do\n                if c == v then\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    return string.len(string.gsub(s, \"[^aeiouy]\", \"\"))\nend", "   \
    \ -- TODO: Complete this function\nend", "    -- build a lookup table to test\
    \ for vowels\n    local is_vowel = {a=true, e=true, i=true, o=true, u=true, y=true}\n\
    \    local count = 0\n    for i=1,#s do\n        local c = s:sub(i,i)\n      \
    \  if is_vowel[c:lower()] then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "  s = s:lower()\n  local c = 0\n  for i = 1,\
    \ #s do\n    if 'aeiou'[s:sub(i, i)] then\n      c = c + 1\n    end\n  end\n \
    \ return c\nend", "  local count = 0\n  local vowels = {\n    ['a'] = true,\n\
    \    ['e'] = true,\n    ['i'] = true,\n    ['o'] = true,\n    ['u'] = true,\n\
    \    ['y'] = true\n  }\n  local length = string.len(s)\n  for i = 1, length do\n\
    \    local char = string.sub(s, i, i)\n    if (vowels[char]) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
