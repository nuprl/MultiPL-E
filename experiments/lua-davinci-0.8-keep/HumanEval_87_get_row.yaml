name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested lists,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the list,\n-- and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n-- each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- get_row([\n-- [1,2,3,4,5,6],\n-- [1,2,3,4,1,6],\n-- [1,2,3,4,5,1]\n\
  -- ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n-- get_row([], 1) == []\n\
  -- get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nlocal function get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for row = 1, #lst do\n    for column = 1, #lst[row]\
    \ do\n      if lst[row][column] == x then\n        result[#result + 1] = {row\
    \ - 1, column - 1}\n      end\n    end\n  end\n  table.sort(result, function(a,\
    \ b)\n    if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n      return\
    \ a[2] > b[2]\n    end\n  end)\n  return result\nend", "    local dict = {}\n\
    \    local res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n \
    \           if lst[i][j] == x then\n                dict[#dict + 1] = {i, j}\n\
    \            end\n        end\n    end\n    table.sort(dict, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    for _, v in ipairs(dict)\
    \ do\n        res[#res + 1] = {v[1] - 1, v[2] - 1}\n    end\n    return res\n\
    end", "    local result = {}\n    for i = 1, #lst do\n        local row = lst[i]\n\
    \        for j = 1, #row do\n            if row[j] == x then\n               \
    \ result[#result + 1] = { i - 1, j - 1 }\n            end\n        end\n    end\n\
    \    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n       \
    \     return a[2] > b[2]\n        else\n            return a[1] < b[1]\n     \
    \   end\n    end)\n    return result\nend", "    if #lst == 0 then return {} end\n\
    \    local result = {}\n    for row = 1, #lst do\n        local count = 0\n  \
    \      for col = 1, #lst[row] do\n            if lst[row][col] == x then\n   \
    \             count = count + 1\n                result[#result + 1] = {row -\
    \ 1, #lst[row] - col}\n            end\n        end\n        if count == 0 then\
    \ result[#result + 1] = {row - 1, -1} end\n    end\n    table.sort(result, function(e1,\
    \ e2)\n        if e1[1] ~= e2[1] then return e1[1] < e2[1] end\n        return\
    \ e1[2] > e2[2]\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ r = 1, #lst do\n        local row = lst[r]\n        for c = 1, #row do\n   \
    \         if row[c] == x then\n                table.insert(res, {r - 1, c - 1})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n    return\
    \ res\nend", "\tlocal res = {}\n\tfor i = 1, #lst do\n\t\tlocal elem = lst[i]\n\
    \t\tfor j = 1, #elem do\n\t\t\tif elem[j] == x then\n\t\t\t\ttable.insert(res,\
    \ {i-1, j-1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res, function(a, b) return\
    \ a[1]<b[1] or (a[1]==b[1] and a[2]>b[2]) end)\n\treturn res\nend", "  local result\
    \ = {}\n  for k, v in ipairs(lst) do\n    for k1, v1 in ipairs(v) do\n      if\
    \ v1 == x then\n        table.insert(result, {k - 1, #v - k1})\n      end\n  \
    \  end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ~= b[1] then\n\
    \      return a[1] < b[1]\n    else\n      return a[2] > b[2]\n    end\n  end)\n\
    \  return result\nend", "    local res = {}\n    for y, row in ipairs(lst) do\n\
    \        for z, v in ipairs(row) do\n            if v == x then\n            \
    \    table.insert(res, { y - 1, z - 1 })\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        return a[1] < b[1] or (a[1] == b[1]\
    \ and a[2] > b[2])\n    end)\n    return res\nend", "    local r = {}\n    for\
    \ ri, row in ipairs(lst) do\n        for ci, v in ipairs(row) do\n           \
    \ if v == x then\n                table.insert(r, {ri - 1, #row - ci})\n     \
    \       end\n        end\n    end\n    table.sort(r, function(a, b)\n        if\
    \ a[1] < b[1] then\n            return true\n        elseif a[1] > b[1] then\n\
    \            return false\n        else\n            return a[2] > b[2]\n    \
    \    end\n    end)\n    return r\nend", "    -- your solution here\nend", "\t\
    -- Good luck!\nend", "  local result = {}\n  for row, v in ipairs(lst) do\n  \
    \  for col, y in ipairs(v) do\n      if y == x then\n        table.insert(result,\
    \ {row - 1, col - 1})\n      end\n    end\n  end\n  table.sort(result, function(a,\
    \ b)\n    return a[1] < b[1] or a[1] == b[1] and a[2] > b[2]\n  end)\n  return\
    \ result\nend", "    local function get_row_helper(lst, x, row, col)\n       \
    \ if (row > #lst) then\n            return {}\n        end\n        if (col >\
    \ #lst[row]) then\n            return get_row_helper(lst, x, row + 1, 1)\n   \
    \     end\n        if (lst[row][col] == x) then\n            return {(row, col)}\
    \ + get_row_helper(lst, x, row, col + 1)\n        end\n        return get_row_helper(lst,\
    \ x, row, col + 1)\n    end\n    local res = get_row_helper(lst, x, 1, 1)\n  \
    \  local function order(t1, t2)\n        if (t1[1] < t2[1]) then\n           \
    \ return true\n        end\n        if (t1[1] == t2[1]) then\n            return\
    \ t1[2] > t2[2]\n        end\n        return false\n    end\n    return selection_sort(res,\
    \ order)\nend", "  local ret = {}\n  for i, row in ipairs(lst) do\n    for j,\
    \ num in ipairs(row) do\n      if num == x then\n        table.insert(ret, {i\
    \ - 1, #row - j})\n      end\n    end\n  end\n  table.sort(ret, function(p1, p2)\n\
    \    if p1[1] == p2[1] then\n      return p1[2] < p2[2]\n    else\n      return\
    \ p1[1] < p2[1]\n    end\n  end)\n  return ret\nend", "  local result = {}\n \
    \ local key = 1\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        result[key] = {i-1, j-1}\n        key = key + 1\n      end\n\
    \    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ~= b[1] then\n\
    \      return a[1] < b[1]\n    else\n      return a[2] > b[2]\n    end\n  end)\n\
    \  return result\nend", "    local lst1 = {}\n    local lst2 = {}\n    for k,\
    \ v in ipairs(lst) do\n        for k1, v1 in ipairs(v) do\n            if v1 ==\
    \ x then\n                lst1[#lst1 + 1] = {k, k1}\n            end\n       \
    \ end\n    end\n    table.sort(lst1, function(x, y)\n        if x[1] == y[1] then\n\
    \            return x[2] > y[2]\n        else\n            return x[1] < y[1]\n\
    \        end\n    end)\n    for k, v in ipairs(lst1) do\n        lst2[k] = {v[1]\
    \ - 1, v[2] - 1}\n    end\n    return lst2\nend", "  local result = {}\n  for\
    \ i, v in ipairs(lst) do\n    for j, v2 in ipairs(v) do\n      if v2 == x then\n\
    \        table.insert(result, {i-1, j-1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n\
    \      return a[2] > b[2]\n    end\n  end)\n  return result\nend", "    local\
    \ res = {}\n    for row, list in ipairs(lst) do\n        for col, v in ipairs(list)\
    \ do\n            if v == x then\n                res[#res + 1] = {row - 1, col\
    \ - 1}\n            end\n        end\n    end\n    table.sort(res, function(l,\
    \ r)\n        if l[1] == r[1] then\n            return l[2] > r[2]\n        else\n\
    \            return l[1] < r[1]\n        end\n    end)\n    return res\nend",
  "  local result = {}\n  for i, j in ipairs(lst) do\n    for k, v in ipairs(j) do\n\
    \      if v == x then\n        table.insert(result, {i-1, k-1})\n      end\n \
    \   end\n  end\n  return result\nend", "  -- body\nend", "\tlocal res = {}\n\t\
    for i, v in ipairs(lst) do\n\t\tfor j, v2 in ipairs(v) do\n\t\t\tif v2 == x then\n\
    \t\t\t\ttable.insert(res, {i-1, j-1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn res\nend", "    local result\
    \ = {}\n    for i, row in ipairs(lst) do\n        for j, value in ipairs(row)\
    \ do\n            if value == x then\n                table.insert(result, {i\
    \ - 1, j - 1})\n            end\n        end\n    end\n    local sort_func = function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end\n    table.sort(result,\
    \ sort_func)\n    return result\nend", "    local t = {}\n    for i = 1, #lst\
    \ do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n    \
    \            t[#t + 1] = {i - 1, j - 1}\n            end\n        end\n    end\n\
    \    table.sort(t, function(a, b)\n        if a[1] == b[1] then\n            return\
    \ a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n   \
    \ end)\n    local u = {}\n    for i = 1, #t do\n        u[i] = {t[i][1], t[i][2]}\n\
    \    end\n    return u\nend", "    local pos = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, col in ipairs(row) do\n            if col == x then\n   \
    \             pos[#pos + 1] = {i, j}\n            end\n        end\n    end\n\
    \    table.sort(pos, function(a, b)\n        if a[1] < b[1] then\n           \
    \ return true\n        elseif a[1] > b[1] then\n            return false\n   \
    \     else\n            return a[2] > b[2]\n        end\n    end)\n    local ret\
    \ = {}\n    for _, pos in ipairs(pos) do\n        ret[#ret + 1] = {pos[1] - 1,\
    \ pos[2] - 1}\n    end\n    return ret\nend", "  local function helper(lst, x,\
    \ acc)\n    if #lst == 0 then return acc end\n    local row, count = {}, 0\n \
    \   for i, v in ipairs(lst[1]) do\n      if v == x then\n        row[#row + 1]\
    \ = i - 1\n        count = count + 1\n      end\n    end\n    table.sort(row,\
    \ function(a, b) return a > b end)\n    for i = 1, count do\n      acc[#acc +\
    \ 1] = {0, row[i]}\n    end\n    return helper(\n      {unpack(lst, 2, #lst)},\n\
    \      x,\n      {unpack(acc, 1, #acc, 2)}\n    )\n  end\n  local function get_row_helper(lst,\
    \ x, acc)\n    if #lst == 0 then return acc end\n    local acc = helper(lst, x,\
    \ acc)\n    for i, v in ipairs(acc) do\n      v[1] = v[1] + 1\n    end\n    return\
    \ get_row_helper(\n      {unpack(lst, 2, #lst)},\n      x,\n      {unpack(acc,\
    \ 1, #acc)}\n    )\n  end\n  local function get_row_in_order(lst, x)\n    return\
    \ get_row_helper(lst, x, {})\n  end\n  return get_row_in_order(lst, x)\nend",
  "    -- return {}\n    local ans = {}\n    for k, v in ipairs(lst) do\n        local\
    \ row = k\n        for k2, v2 in ipairs(v) do\n            if v2 == x then\n \
    \               table.insert(ans, {row, k2})\n            end\n        end\n \
    \   end\n    table.sort(ans, function(a, b)\n        if a[1] ~= b[1] then\n  \
    \          return a[1] < b[1]\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    return ans\nend", "  local res = {}\n  local len =\
    \ #lst\n  for i = 0, len - 1 do\n    local row_len = #lst[i + 1]\n    for j =\
    \ 0, row_len - 1 do\n      if lst[i + 1][j + 1] == x then\n        table.insert(res,\
    \ {i, j})\n      end\n    end\n  end\n  return res\nend", "  local row = {}\n\
    \  local ii = 0\n  for _, v in ipairs(lst) do\n    local jj = 0\n    for _, vv\
    \ in ipairs(v) do\n      if vv == x then\n        table.insert(row, {ii, jj})\n\
    \      end\n      jj = jj + 1\n    end\n    ii = ii + 1\n  end\n  table.sort(row,\
    \ function(a, b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n \
    \ end)\n  return row\nend", "  local res = {}\n  for i, row in ipairs(lst) do\n\
    \    for j, elem in ipairs(row) do\n      if elem == x then\n        table.insert(res,\
    \ {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n\
    \    if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n      return a[2]\
    \ > b[2]\n    end\n  end)\n  return res\nend", "\tlocal result = {}\n\tlocal i\
    \ = 0\n\tfor _, row in ipairs(lst) do\n\t\ti = i + 1\n\t\tlocal j = 0\n\t\tfor\
    \ _, v in ipairs(row) do\n\t\t\tj = j + 1\n\t\t\tif v == x then\n\t\t\t\ttable.insert(result,\
    \ {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result, function(lhs,\
    \ rhs)\n\t\tif lhs[1] < rhs[1] then\n\t\t\treturn true\n\t\telseif lhs[1] > rhs[1]\
    \ then\n\t\t\treturn false\n\t\telse\n\t\t\treturn lhs[2] > rhs[2]\n\t\tend\n\t\
    end)\n\treturn result\nend", "    local ret = {}\n    for k, v in ipairs(lst)\
    \ do\n        for kk, vv in ipairs(v) do\n            if vv == x then\n      \
    \          table.insert(ret, {k - 1, kk - 1})\n            end\n        end\n\
    \    end\n    table.sort(ret, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return ret\nend", "  local result = {}\n  for i, v\
    \ in ipairs(lst) do\n    for j, v2 in ipairs(v) do\n      if v2 == x then\n  \
    \      table.insert(result, { i - 1, #v - j })\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n\
    \      return a[2] > b[2]\n    end\n  end)\n  return result\nend", "    local\
    \ res = {}\n    local y = 0\n    for _, v in ipairs(lst) do\n        local x =\
    \ 0\n        for _, vv in ipairs(v) do\n            if vv == x then\n        \
    \        table.insert(res, {y, x})\n            end\n            x = x + 1\n \
    \       end\n        y = y + 1\n    end\n    table.sort(res, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "  local function get_row(i, j, lst, x, a)\n    if i > #lst then\n      return a\n\
    \    elseif j > #lst[i] then\n      return get_row(i + 1, 1, lst, x, a)\n    elseif\
    \ lst[i][j] == x then\n      return get_row(i, j + 1, lst, x, {a[1] or {}, {i,\
    \ j}})\n    else\n      return get_row(i, j + 1, lst, x, a)\n    end\n  end\n\
    \  local function comp(a, b)\n    return (a[1] > b[1]) or (a[1] == b[1] and a[2]\
    \ < b[2])\n  end\n  table.sort(get_row(1, 1, lst, x, {}), comp)\n  return get_row(1,\
    \ 1, lst, x, {})\nend", "    local result = {}\n    for y1, row in ipairs(lst)\
    \ do\n        for y2, col in ipairs(row) do\n            if col == x then\n  \
    \              table.insert(result, {y1 - 1, y2 - 1})\n            end\n     \
    \   end\n    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return result\nend", "  local out = {}\n\
    \  for i, row in ipairs(lst) do\n    for j,v in ipairs(row) do\n      if v ==\
    \ x then table.insert(out, {i-1,j-1}) end\n    end\n  end\n  table.sort(out, function(a,b)\
    \ return a[1]<b[1] or (a[1]==b[1] and a[2]>b[2]) end)\n  return out\nend", " \
    \   local result = {}\n    for i = 1, #lst do\n        local row = lst[i]\n  \
    \      for j = 1, #row do\n            if row[j] == x then\n                table.insert(result,\
    \ {i - 1, #row - j})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] < b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local r = {}\n    for y, row in ipairs(lst) do\n        for\
    \ i, v in ipairs(row) do\n            if v == x then table.insert(r, {y - 1, #row\
    \ - i}) end\n        end\n    end\n    table.sort(r, function(a, b)\n        if\
    \ a[1] == b[1] then return a[2] > b[2] end\n        return a[1] < b[1]\n    end)\n\
    \    return r\nend", "\tlocal res = {}\n\tfor r,l in ipairs(lst) do\n\t\tfor c,v\
    \ in ipairs(l) do\n\t\t\tif v == x then\n\t\t\t\ttable.insert(res, {r-1,c-1})\n\
    \t\t\tend\n\t\tend\n\tend\n\ttable.sort(res, function(a,b)\n\t\tif a[1] == b[1]\
    \ then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\
    \tend)\n\treturn res\nend", "    -- body\nend", "    local t = {}\n    for i,\
    \ v in ipairs(lst) do\n        for j, vv in ipairs(v) do\n            if vv ==\
    \ x then\n                table.insert(t, {i - 1, #v - j})\n            end\n\
    \        end\n    end\n    table.sort(t, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] < b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return t\nend", "    if not lst or #lst ==\
    \ 0 then\n        return {}\n    end\n    local positions = {}\n    for i = 1,\
    \ #lst do\n        local row = lst[i]\n        for j = 1, #row do\n          \
    \  if row[j] == x then\n                table.insert(positions, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(positions, function(x,\
    \ y)\n        if x[1] == y[1] then\n            return x[2] > y[2]\n        else\n\
    \            return x[1] < y[1]\n        end\n    end)\n    return positions\n\
    end", "  local d = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n     \
    \ if lst[i][j] == x then\n        table.insert(d, {i - 1, j - 1})\n      end\n\
    \    end\n  end\n  table.sort(d, function(a, b)\n    if a[1] == b[1] then\n  \
    \    return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return d\nend", "    local r = {}\n    local function find_all(sub, x)\n  \
    \      for i, v in ipairs(sub) do\n            if v == x then\n              \
    \  table.insert(r, {i - 1, j})\n            end\n        end\n    end\n    for\
    \ j, sub in ipairs(lst) do\n        find_all(sub, x)\n    end\n    return r\n\
    end", "  local ret = {}\n  for i = 1, #lst do\n    local r = {}\n    for j = 1,\
    \ #lst[i] do\n      if lst[i][j] == x then\n        table.insert(r, {i, j})\n\
    \      end\n    end\n    if #r > 0 then\n      table.sort(r, function(t1, t2)\
    \ return t1[2] > t2[2] end)\n      for _, v in ipairs(r) do\n        table.insert(ret,\
    \ v)\n      end\n    end\n  end\n  table.sort(ret, function(t1, t2) return t1[1]\
    \ < t2[1] end)\n  return ret\nend", "    local new_list = {}\n    for i, list\
    \ in ipairs(lst) do\n        for j, num in ipairs(list) do\n            if num\
    \ == x then\n                table.insert(new_list, {i-1, j-1})\n            end\n\
    \        end\n    end\n    table.sort(new_list, function(a, b)\n        if a[1]\
    \ == b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return new_list\nend", "    local res\
    \ = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n\
    \            if val == x then\n                table.insert(res, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return res\nend", " \
    \ local res = {}\n  for i, row in ipairs(lst) do\n    for j, item in ipairs(row)\
    \ do\n      if item == x then\n        table.insert(res, {i - 1, #row - j})\n\
    \      end\n    end\n  end\n  table.sort(res, function(p1, p2)\n    if p1[1] ==\
    \ p2[1] then\n      return p1[2] < p2[2]\n    else\n      return p1[1] < p2[1]\n\
    \    end\n  end)\n  return res\nend", "  local result = {}\n  for row, v in ipairs(lst)\
    \ do\n    for col, val in ipairs(v) do\n      if val == x then\n        table.insert(result,\
    \ {row-1, col-1})\n      end\n    end\n  end\n  table.sort(result, function(a,\
    \ b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return\
    \ a[1] < b[1]\n    end\n  end)\n  return result\nend", "  local res = {}\n  local\
    \ rows = #lst\n  for i = 0, rows - 1 do\n    local columns = #lst[i + 1]\n   \
    \ for j = 0, columns - 1 do\n      if lst[i + 1][j + 1] == x then\n        res[#res\
    \ + 1] = { i, j }\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n\
    \    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end)\n  return res\nend", "    -- body\nend", "    local\
    \ result = {}\n    local index_row = 1\n    for _, row in ipairs(lst) do\n   \
    \     local index_column = 1\n        for _, column in ipairs(row) do\n      \
    \      if column == x then\n                result[#result + 1] = {index_row,\
    \ index_column}\n            end\n            index_column = index_column + 1\n\
    \        end\n        index_row = index_row + 1\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "  local t = {}\n  for y, row in ipairs(lst) do\n    for z, cell\
    \ in ipairs(row) do\n      if cell == x then\n        t[#t + 1] = {y - 1, -z}\n\
    \      end\n    end\n  end\n  table.sort(t, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] < b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return t\nend", "    local res = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, el in ipairs(row) do\n            if el == x then\n     \
    \           table.insert(res, { i - 1, #row - j })\n            end\n        end\n\
    \    end\n    return res\nend", "    local rowTable = {}\n    for i = 1, #lst\
    \ do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n    \
    \            table.insert(rowTable, {i - 1, j - 1})\n            end\n       \
    \ end\n    end\n    local function comp(lhs, rhs)\n        if lhs[1] == rhs[1]\
    \ then\n            return lhs[2] > rhs[2]\n        else\n            return lhs[1]\
    \ < rhs[1]\n        end\n    end\n    table.sort(rowTable, comp)\n    return rowTable\n\
    end", "  local res = {}\n  for r = 1, #lst do\n    local row = lst[r]\n    for\
    \ c = 1, #row do\n      if row[c] == x then\n        table.insert(res, {r-1, c-1})\n\
    \      end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return res\nend", "  local r = {}\n  for i = 1, #lst do\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(r, {i -\
    \ 1, j - 1})\n      end\n    end\n  end\n  table.sort(r, function(a, b)\n    if\
    \ a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n\
    \    end\n  end)\n  return r\nend", "    local res = {}\n    for i = 1, #lst do\n\
    \        local row = lst[i]\n        for j = 1, #row do\n            if row[j]\
    \ == x then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend", "  local res = {}\n\
    \  for i, v in ipairs(lst) do\n    for j, v2 in ipairs(v) do\n      if v2 == x\
    \ then\n        table.insert(res, {i-1, j-1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] < b[1] then\n      return true\n    elseif a[1]\
    \ > b[1] then\n      return false\n    else\n      return a[2] > b[2]\n    end\n\
    \  end)\n  return res\nend", "  local result = {}\n  for row = 1, #lst do\n  \
    \  for column = 1, #lst[row] do\n      if lst[row][column] == x then\n       \
    \ table.insert(result, {row - 1, column - 1})\n      end\n    end\n  end\n  return\
    \ result\nend", "    local function find_in_list(lst, x)\n        local out =\
    \ {}\n        for i,v in ipairs(lst) do\n            if v == x then\n        \
    \        table.insert(out, {i - 1, #lst - i})\n            end\n        end\n\
    \        return out\n    end\n    local out = {}\n    for i,v in ipairs(lst) do\n\
    \        for _,j in ipairs(find_in_list(v, x)) do\n            table.insert(out,\
    \ {i - 1, j[1], j[2]})\n        end\n    end\n    table.sort(out, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[3] < b[3]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    for i,v in ipairs(out)\
    \ do\n        out[i] = {v[1], v[2]}\n    end\n    return out\nend", "    local\
    \ coords = {}\n    for j = 1, #lst do\n        local row = lst[j]\n        for\
    \ i = 1, #row do\n            if row[i] == x then\n                coords[#coords\
    \ + 1] = {j, i}\n            end\n        end\n    end\n    local compare = function(a,\
    \ b)\n        return a[1] < b[1] or a[1] == b[1] and a[2] > b[2]\n    end\n  \
    \  table.sort(coords, compare)\n    return coords\nend", "    local ret = {}\n\
    \    for i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n   \
    \         if elem == x then\n                table.insert(ret, {i-1, j-1})\n \
    \           end\n        end\n    end\n    local function compare_rows(lhs, rhs)\n\
    \        if lhs[1] < rhs[1] then\n            return true\n        elseif lhs[1]\
    \ > rhs[1] then\n            return false\n        else\n            return lhs[2]\
    \ > rhs[2]\n        end\n    end\n    table.sort(ret, compare_rows)\n    return\
    \ ret\nend", "  local res = {}\n  for y, row in ipairs(lst) do\n    for x1, v\
    \ in ipairs(row) do\n      if v == x then\n        table.insert(res, {y - 1, x1\
    \ - 1})\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1]\
    \ == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n\
    \    end\n  end)\n  return res\nend", "  local res = {}\n  for i, row in ipairs(lst)\
    \ do\n    for j, el in ipairs(row) do\n      if el == x then\n        table.insert(res,\
    \ {i - 1, -j})\n      end\n    end\n  end\n  table.sort(res, function(p1, p2)\n\
    \    if p1[1] == p2[1] then\n      return p1[2] < p2[2]\n    else\n      return\
    \ p1[1] < p2[1]\n    end\n  end)\n  return res\nend", "  local result = {}\n \
    \ local k = 1\n  for i,v in ipairs(lst) do\n    for j,m in ipairs(v) do\n    \
    \  if m == x then\n        result[k] = {i-1,j-1}\n        k = k + 1\n      end\n\
    \    end\n  end\n  table.sort(result, function(a,b)\n    if a[1] ~= b[1] then\n\
    \      return a[1] < b[1]\n    else\n      return a[2] > b[2]\n    end\n  end)\n\
    \  return result\nend", "  local res = {}\n  for i, v in ipairs(lst) do\n    for\
    \ j, e in ipairs(v) do\n      if e == x then table.insert(res, {i - 1, #v - j})\
    \ end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] ~= b[1] then\
    \ return a[1] < b[1]\n    else return a[2] > b[2] end\n  end)\n  return res\n\
    end", "  local xs = {}\n  for i, row in ipairs(lst) do\n    for j, v in ipairs(row)\
    \ do\n      if v == x then\n        table.insert(xs, {i - 1, #row - j})\n    \
    \  end\n    end\n  end\n  table.sort(xs, function(a, b)\n    if a[1] < b[1] then\n\
    \      return true\n    elseif a[1] > b[1] then\n      return false\n    else\n\
    \      return a[2] > b[2]\n    end\n  end)\n  return xs\nend", "\tlocal result\
    \ = {}\n\tlocal index = 1\n\tfor i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\
    \t\tif lst[i][j] == x then\n\t\t\t\tresult[index] = {i-1, j-1}\n\t\t\t\tindex\
    \ = index + 1\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result, function(a, b)\n\
    \t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1]\
    \ < b[1]\n\t\tend\n\tend)\n\tlocal final_result = {}\n\tfor i = 1, #result do\n\
    \t\tfinal_result[i] = {result[i][1], result[i][2]}\n\tend\n\treturn final_result\n\
    end", "  if not next(lst) then return {} end\n  local function _get_row(lst, x,\
    \ y, acc)\n    if not lst[y] then return acc end\n    local xs = {}\n    for i\
    \ = 1, #lst[y] do\n      if lst[y][i] == x then table.insert(xs, i) end\n    end\n\
    \    for _, i in ipairs(xs) do\n      table.insert(acc, {y, i})\n    end\n   \
    \ return _get_row(lst, x, y + 1, acc)\n  end\n  local positions = _get_row(lst,\
    \ x, 1, {})\n  table.sort(positions, function(a, b)\n    if a[1] == b[1] then\
    \ return a[2] > b[2]\n    else return a[1] < b[1] end\n  end)\n  return positions\n\
    end", "\tif #lst == 0 then return {} end\n\tlocal row_list = {}\n\tfor i, v in\
    \ ipairs(lst) do\n\t\tlocal col_list = {}\n\t\tfor j, w in ipairs(v) do\n\t\t\t\
    if w == x then\n\t\t\t\ttable.insert(col_list, j)\n\t\t\tend\n\t\tend\n\t\tif\
    \ #col_list > 0 then\n\t\t\ttable.insert(row_list, {i, col_list})\n\t\tend\n\t\
    end\n\tif #row_list == 0 then return {} end\n\ttable.sort(row_list, function(a,\
    \ b) return a[1] < b[1] end)\n\tfor i, v in ipairs(row_list) do\n\t\ttable.sort(v[2],\
    \ function(a, b) return a > b end)\n\tend\n\tlocal result = {}\n\tfor i, v in\
    \ ipairs(row_list) do\n\t\tfor j, w in ipairs(v[2]) do\n\t\t\ttable.insert(result,\
    \ {v[1] - 1, w - 1})\n\t\tend\n\tend\n\treturn result\nend", "    local result\
    \ = {}\n    for row, row_list in ipairs(lst) do\n        for col, value in ipairs(row_list)\
    \ do\n            if value == x then\n                result[#result + 1] = {row,\
    \ col}\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local out = {}\n  local y = 1\n  for _, item in ipairs(lst) do\n    for pos,\
    \ num in ipairs(item) do\n      if num == x then\n        table.insert(out, {y,\
    \ #item - pos + 1})\n      end\n    end\n    y = y + 1\n  end\n  table.sort(out,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return out\nend", "  if #lst ==\
    \ 0 then return {} end\n  local ans = {}\n  for i,l in ipairs(lst) do\n    for\
    \ j,e in ipairs(l) do\n      if e == x then table.insert(ans, {i-1, j-1}) end\n\
    \    end\n  end\n  local comp = function(x, y)\n    if x[1] == y[1] then return\
    \ x[2] > y[2] end\n    return x[1] < y[1]\n  end\n  table.sort(ans, comp)\n  return\
    \ ans\nend", "  if #lst == 0 then return {} end\n  local row_cols = {}\n  for\
    \ row, cur_row in ipairs(lst) do\n    for col, val in ipairs(cur_row) do\n   \
    \   if val == x then\n        row_cols[#row_cols + 1] = {row, col}\n      end\n\
    \    end\n  end\n  table.sort(row_cols, function(a, b)\n    if a[1] < b[1] then\
    \ return true end\n    if a[1] > b[1] then return false end\n    return a[2] >\
    \ b[2]\n  end)\n  local res = {}\n  for i, v in ipairs(row_cols) do\n    res[i]\
    \ = {v[1] - 1, v[2] - 1}\n  end\n  return res\nend", "  -- TODO: your code here\n\
    end", "    local result = {}\n    for r = 1, #lst do\n        local row = lst[r]\n\
    \        for c = 1, #row do\n            if row[c] == x then\n               \
    \ result[#result + 1] = {r, c}\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return result\nend", "  local\
    \ t = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    for j = 1, #row do\n\
    \      if row[j] == x then\n        table.insert(t, {i - 1, j - 1})\n      end\n\
    \    end\n  end\n  table.sort(t, function(a, b)\n    if a[1] == b[1] then\n  \
    \    return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return t\nend", "  local res = {}\n  for i, row in ipairs(lst) do\n    for\
    \ j, cell in ipairs(row) do\n      if cell == x then\n        table.insert(res,\
    \ {i-1, j-1})\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n \
    \   if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n      return a[2]\
    \ > b[2]\n    end\n  end)\n  return res\nend", "  local result = {}\n  for i =\
    \ 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n      \
    \  table.insert(result, {i - 1, #lst[i] - j})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend", "\tlocal result\
    \ = {}\n\tfor i, row in ipairs(lst) do\n\t\tfor j, num in ipairs(row) do\n\t\t\
    \tif num == x then\n\t\t\t\ttable.insert(result, {i-1, j-1})\n\t\t\tend\n\t\t\
    end\n\tend\n\ttable.sort(result, function(a, b) return a[1] < b[1] or (a[1] ==\
    \ b[1] and a[2] > b[2]) end)\n\treturn result\nend", "  local row = {}\n  for\
    \ i, value in ipairs(lst) do\n    local col = {}\n    for j, v in ipairs(value)\
    \ do\n      if v == x then\n        table.insert(col, {i, j})\n      end\n   \
    \ end\n    table.sort(col, function(a, b) return a[2] > b[2] end)\n    for _,\
    \ v in ipairs(col) do\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  return row\nend", "  local res = {}\n\
    \  for i = 1, #lst do\n    local lst_i = lst[i]\n    local j, first = 1, nil\n\
    \    while true do\n      local idx = lst_i:find(x, j, true)\n      if not idx\
    \ then break end\n      j = idx + 1\n      res[#res + 1] = {i - 1, idx - 1}\n\
    \      first = first or idx\n    end\n    if first then\n      table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n          return a[2] > b[2]\n\
    \        else\n          return a[1] < b[1]\n        end\n      end)\n    end\n\
    \  end\n  return res\nend", "\tlocal t = {}\n\tfor i,v in ipairs(lst) do\n\t\t\
    for j,w in ipairs(v) do\n\t\t\tif w == x then\n\t\t\t\ttable.insert(t, {i - 1,\
    \ j - 1})\n\t\t\tend\n\t\tend\n\tend\n\tlocal function sort_row(a, b)\n\t\tif\
    \ a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\
    \t\tend\n\tend\n\ttable.sort(t, sort_row)\n\treturn t\nend", "  local result =\
    \ {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n\
    \  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return a[2]\
    \ > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end", "  local row = {}\n  for i, line in ipairs(lst) do\n    for j, el in ipairs(line)\
    \ do\n      if el == x then table.insert(row, {j - 1, i - 1}) end\n    end\n \
    \ end\n  table.sort(row, function(a, b)\n    if a[2] ~= b[2] then return a[2]\
    \ < b[2] end\n    return a[1] > b[1]\n  end)\n  return row\nend", "  local coordinates\
    \ = {}\n  for row, row_lst in ipairs(lst) do\n    for col, value in ipairs(row_lst)\
    \ do\n      if value == x then\n        table.insert(coordinates, {row, col})\n\
    \      end\n    end\n  end\n  table.sort(coordinates, function(a, b)\n    if a[1]\
    \ ~= b[1] then\n      return a[1] < b[1]\n    else\n      return a[2] > b[2]\n\
    \    end\n  end)\n  return coordinates\nend", "  local res = {}\n  for i, row\
    \ in ipairs(lst) do\n    for j, el in ipairs(row) do\n      if el == x then\n\
    \        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(t1, t2)\n    if t1[1] == t2[1] then\n      return t1[2] > t2[2]\n \
    \   else\n      return t1[1] < t2[1]\n    end\n  end)\n  return res\nend", " \
    \ local result = {}\n  for i, row in ipairs(lst) do\n    for j, item in ipairs(row)\
    \ do\n      if item == x then\n        table.insert(result, {i - 1, #row - j})\n\
    \      end\n    end\n  end\n  table.sort(result, function(x, y)\n    if x[1] ==\
    \ y[1] then\n      return x[2] < y[2]\n    else\n      return x[1] < y[1]\n  \
    \  end\n  end)\n  return result\nend", "    local result = {}\n    for i, v in\
    \ ipairs(lst) do\n        for j, vv in ipairs(v) do\n            if vv == x then\n\
    \                table.insert(result, {i-1, j-1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "\tlocal rst = {}\n\tfor y, row\
    \ in ipairs(lst) do\n\t\tfor xy, val in ipairs(row) do\n\t\t\tif val == x then\n\
    \t\t\t\ttable.insert(rst, {y - 1, xy - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(rst,\
    \ function(x, y)\n\t\tif x[1] == y[1] then\n\t\t\treturn x[2] > y[2]\n\t\telse\n\
    \t\t\treturn x[1] < y[1]\n\t\tend\n\tend)\n\treturn rst\nend", "\tif lst[1] ==\
    \ nil then return {} end\n\tlocal res = {}\n\tfor i, v in ipairs(lst) do\n\t\t\
    for j, k in ipairs(v) do\n\t\t\tif k == x then\n\t\t\t\ttable.insert(res, {i-1,\
    \ j-1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res, function(a, b)\n\t\treturn\
    \ a[1] < b[1] or a[1] == b[1] and a[2] > b[2]\n\tend)\n\treturn res\nend", " \
    \ local result = {}\n  local rows = {}\n  for i, row in ipairs(lst) do\n    local\
    \ row_result = {}\n    for j, val in ipairs(row) do\n      if val == x then\n\
    \        table.insert(row_result, { j, -j })\n      end\n    end\n    if #row_result\
    \ > 0 then\n      table.sort(row_result, function(a, b) return a[1] < b[1] end)\n\
    \      table.insert(rows, { i, row_result })\n    end\n  end\n  table.sort(rows,\
    \ function(a, b) return a[1] < b[1] end)\n  for _, row in ipairs(rows) do\n  \
    \  for _, item in ipairs(row[2]) do\n      table.insert(result, { row[1] - 1,\
    \ -item[2] - 1 })\n    end\n  end\n  return result\nend", "  local output = {}\n\
    \  for row,l in ipairs(lst) do\n    for col,v in ipairs(l) do\n      if v == x\
    \ then\n        table.insert(output, {row-1,col-1})\n      end\n    end\n  end\n\
    \  table.sort(output, function(a,b)\n    if a[1] == b[1] then\n      return a[2]\
    \ > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return output\n\
    end", "  local result = {}\n  for row_i, row in ipairs(lst) do\n    for col_i,\
    \ v in ipairs(row) do\n      if v == x then\n        result[#result + 1] = {v\
    \ = {row_i - 1, col_i - 1}}\n      end\n    end\n  end\n  table.sort(result, function(r1,\
    \ r2)\n    if r1.v[1] == r2.v[1] then\n      return r1.v[2] > r2.v[2]\n    else\n\
    \      return r1.v[1] < r2.v[1]\n    end\n  end)\n  for i, v in ipairs(result)\
    \ do\n    result[i] = v.v\n  end\n  return result\nend", "    local t = {}\n \
    \   for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                t[#t + 1] = {i - 1, j - 1}\n            end\n   \
    \     end\n    end\n    table.sort(t, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return t\nend", "    if lst == nil or #lst\
    \ == 0 then\n        return {}\n    end\n    local result = {}\n    for row_idx,\
    \ row in ipairs(lst) do\n        for col_idx, col in ipairs(row) do\n        \
    \    if col == x then\n                table.insert(result, { row_idx - 1, col_idx\
    \ - 1 })\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local ids = {}\n    for i, row in ipairs(lst) do\n        for j, col in ipairs(row)\
    \ do\n            if col == x then\n                table.insert(ids, {i, j})\n\
    \            end\n        end\n    end\n    table.sort(ids, function(a, b)\n \
    \       if a[1] < b[1] then\n            return true\n        elseif a[1] > b[1]\
    \ then\n            return false\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    local result = {}\n    for _, id in ipairs(ids) do\n\
    \        table.insert(result, {id[1] - 1, id[2] - 1})\n    end\n    return result\n\
    end", "    local res = {}\n    for i, v in ipairs(lst) do\n        for j, v2 in\
    \ ipairs(v) do\n            if v2 == x then\n                table.insert(res,\
    \ {i-1, j-1})\n            end\n        end\n    end\n    local function cmp(a,\
    \ b)\n        if a[1] < b[1] then\n            return true\n        elseif a[1]\
    \ == b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ false\n        end\n    end\n    table.sort(res, cmp)\n    return res\nend",
  "  local result = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(result, {i - 1, j - 1})\n      end\n\
    \    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return result\nend", "\tlocal coords = {}\n\tfor row, row_values in ipairs(lst)\
    \ do\n\t\tfor col, value in ipairs(row_values) do\n\t\t\tif value == x then\n\t\
    \t\t\ttable.insert(coords, {row, col})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(coords,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn coords\nend", "    local result\
    \ = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if\
    \ lst[i][j] == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local t={}\n    for i,v in ipairs(lst) do\n        for j,v2 in ipairs(v) do\n\
    \            if v2==x then\n                table.insert(t,{i-1,#v-j})\n     \
    \       end\n        end\n    end\n    local function comp(a,b)\n        if a[1]<b[1]\
    \ then\n            return true\n        elseif a[1]>b[1] then\n            return\
    \ false\n        else\n            return a[2]>b[2]\n        end\n    end\n  \
    \  table.sort(t,comp)\n    return t\nend", "\tlocal result = {}\n\tfor i, v in\
    \ ipairs(lst) do\n\t\tfor j, v2 in ipairs(v) do\n\t\t\tif v2 == x then\n\t\t\t\
    \ttable.insert(result, {i-1, j-1})\n\t\t\tend\n\t\tend\n\tend\n\tlocal function\
    \ cmp(t1, t2)\n\t\tif t1[1] == t2[1] then\n\t\t\treturn t1[2] > t2[2]\n\t\telse\n\
    \t\t\treturn t1[1] < t2[1]\n\t\tend\n\tend\n\ttable.sort(result, cmp)\n\treturn\
    \ result\nend", "  local result = {}\n  for i = 1, #lst do\n    local l = lst[i]\n\
    \    for j = 1, #l do\n      if l[j] == x then\n        result[#result + 1] =\
    \ {i - 1, j - 1}\n      end\n    end\n  end\n  table.sort(result, function(a,\
    \ b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n  end)\n  return\
    \ result\nend", "    local t = {}\n    for i, v in ipairs(lst) do\n        for\
    \ j, v1 in ipairs(v) do\n            if v1 == x then\n                table.insert(t,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(t, function(a,\
    \ b)\n        if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n\
    \            return a[2] > b[2]\n        end\n    end)\n    return t\nend", " \
    \   local res = {}\n    for i, row in ipairs(lst) do\n        for j, col in ipairs(row)\
    \ do\n            if col == x then\n                table.insert(res, {i-1, j-1})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return res\nend", " \
    \   local res = {}\n    local row = 0\n    for _, r in ipairs(lst) do\n      \
    \  local col = #r - 1\n        for _, c in ipairs(r) do\n            if c == x\
    \ then\n                table.insert(res, { row, col })\n            end\n   \
    \         col = col - 1\n        end\n        row = row + 1\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend", "  local res = {}\n  local row, col = 0, 0\n  for i, v in ipairs(lst)\
    \ do\n    col = 0\n    for j, n in ipairs(v) do\n      if n == x then\n      \
    \  table.insert(res, {row, col})\n      end\n      col = col + 1\n    end\n  \
    \  row = row + 1\n  end\n  return res\nend", "  local ret = {}\n  for i = 1, #lst\
    \ do\n    local row = lst[i]\n    for j = 1, #row do\n      if row[j] == x then\n\
    \        table.insert(ret, {i - 1, #row - j})\n      end\n    end\n  end\n  table.sort(ret,\
    \ function(a, b)\n    return a[1] < b[1] or a[1] == b[1] and a[2] > b[2]\n  end)\n\
    \  return ret\nend", "    local result = {}\n    for i = 1, #lst do\n        local\
    \ row = lst[i]\n        for j = 1, #row do\n            if row[j] == x then\n\
    \                table.insert(result, {i - 1, j - 1})\n            end\n     \
    \   end\n    end\n    table.sort(result, function(a, b)\n        if a[1] < b[1]\
    \ then\n            return true\n        elseif a[1] > b[1] then\n           \
    \ return false\n        else\n            return a[2] > b[2]\n        end\n  \
    \  end)\n    return result\nend", "  -- your code here\nend", "  -- your code\
    \ here\nend", "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, v\
    \ in ipairs(row) do\n      if v == x then\n        res[#res + 1] = {i, j}\n  \
    \    end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return res\nend", "    local result = {}\n    for r, row in ipairs(lst)\
    \ do\n        for c, cell in ipairs(row) do\n            if cell == x then\n \
    \               table.insert(result, {r - 1, c - 1})\n            end\n      \
    \  end\n    end\n    table.sort(result, function(a, b)\n        return a[1] <\
    \ b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n    return result\nend", " \
    \   local res = {}\n    for r, row in ipairs(lst) do\n        for c, el in ipairs(row)\
    \ do\n            if el == x then\n                table.insert(res, {r-1, c-1})\n\
    \            end\n        end\n    end\n    local function comp(a, b)\n      \
    \  if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n      \
    \      return a[1] < b[1]\n        end\n    end\n    table.sort(res, comp)\n \
    \   return res\nend", "  local res = {}\n  for i, row in ipairs(lst) do\n    for\
    \ j, val in ipairs(row) do\n      if val == x then\n        table.insert(res,\
    \ {i-1, j-1})\n      end\n    end\n  end\n  -- sort by rows\n  table.sort(res,\
    \ function(a, b) return a[1] < b[1] end)\n  -- sort by columns\n  for i, row in\
    \ ipairs(res) do\n    table.sort(row, function(a, b) return a > b end)\n  end\n\
    \  return res\nend", "    local ret = {}\n    for i = 1, #lst do\n        local\
    \ row = lst[i]\n        local tp = {}\n        for j = 1, #row do\n          \
    \  if row[j] == x then\n                table.insert(tp, {x = i - 1, y = j - 1})\n\
    \            end\n        end\n        if #tp > 0 then\n            table.sort(tp,\
    \ function(a, b)\n                if a.x == b.x then\n                    return\
    \ a.y > b.y\n                else\n                    return a.x < b.x\n    \
    \            end\n            end)\n            for k = 1, #tp do\n          \
    \      table.insert(ret, tp[k])\n            end\n        end\n    end\n    return\
    \ ret\nend", "  local result = {}\n  for i, sub_lst in ipairs(lst) do\n    for\
    \ j, v in ipairs(sub_lst) do\n      if v == x then\n        table.insert(result,\
    \ {i-1, j-1})\n      end\n    end\n  end\n  table.sort(result, function(a, b)\n\
    \    if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n      return a[2]\
    \ > b[2]\n    end\n  end)\n  return result\nend", "    -- insert your code here\n\
    end", "    local row, j = 0, 1\n    local result = {}\n    for i = 1, #lst do\n\
    \        if row ~= i then\n            row = i\n            j = 1\n        end\n\
    \        for _, v in ipairs(lst[i]) do\n            if v == x then\n         \
    \       table.insert(result, {row, j})\n            end\n            j = j + 1\n\
    \        end\n    end\n    local sort = {}\n    for i = 1, #result do\n      \
    \  if sort[result[i][1]] == nil then\n            sort[result[i][1]] = {}\n  \
    \      end\n        table.insert(sort[result[i][1]], result[i][2])\n    end\n\
    \    for i = 1, #sort do\n        table.sort(sort[i], function(a, b) return a\
    \ > b end)\n    end\n    local r = {}\n    for i = 1, #sort do\n        for j\
    \ = 1, #sort[i] do\n            table.insert(r, {i - 1, sort[i][j] - 1})\n   \
    \     end\n    end\n    return r\nend", "    -- write your code here\n    local\
    \ res = {}\n    local cnt = 0\n    for key, value in pairs(lst) do\n        for\
    \ key2, value2 in pairs(value) do\n            if value2 == x then\n         \
    \       res[cnt] = {key - 1, key2 - 1}\n                cnt = cnt + 1\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "\tlocal\
    \ res = {}\n\tfor i = 1, #lst do\n\t\tlocal r = lst[i]\n\t\tfor j = 1, #r do\n\
    \t\t\tif r[j] == x then\n\t\t\t\tres[#res + 1] = {i - 1, j - 1}\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn res\nend", "  -- your code here\n  local result = {}\n\
    \  for i = 1, #lst do\n    local row = lst[i]\n    for j = 1, #row do\n      if\
    \ row[j] == x then\n        result[#result + 1] = {i - 1, j - 1}\n      end\n\
    \    end\n  end\n  table.sort(result, function(a, b) return a[1] < b[1] or (a[1]\
    \ == b[1] and a[2] > b[2]) end)\n  return result\nend", "    local lst_one = {}\n\
    \    for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(lst_one, {i - 1, j - 1})\n         \
    \   end\n        end\n    end\n    table.sort(lst_one, function(a, b)\n      \
    \  if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n      \
    \      return a[1] < b[1]\n        end\n    end)\n    return lst_one\nend", " \
    \   local res = {}\n    for row, _ in ipairs(lst) do\n        for col, val in\
    \ ipairs(lst[row]) do\n            if val == x then\n                table.insert(res,\
    \ {row - 1, col - 1})\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend", "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, col\
    \ in ipairs(row) do\n      if col == x then\n        table.insert(res, {i - 1,\
    \ j - 1})\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n    if\
    \ a[1] < b[1] then\n      return true\n    elseif a[1] > b[1] then\n      return\
    \ false\n    else\n      return a[2] > b[2]\n    end\n  end)\n  return res\nend",
  "    local result = {}\n    local i = 0\n    for _, v in ipairs(lst) do\n      \
    \  local j = 0\n        for _, vv in ipairs(v) do\n            if vv == x then\n\
    \                table.insert(result, {i, j})\n            end\n            j\
    \ = j + 1\n        end\n        i = i + 1\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local ret = {}\n  for i = 1, #lst do\n    local t = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(t, j)\n      end\n  \
    \  end\n    if next(t) then\n      table.sort(t, function(a, b) return a > b end)\n\
    \      for _, j in ipairs(t) do\n        table.insert(ret, {i - 1, j - 1})\n \
    \     end\n    end\n  end\n  return ret\nend", "    local res = {}\n    for i,row\
    \ in ipairs(lst) do\n        for j,col in ipairs(row) do\n            if col ==\
    \ x then\n                table.insert(res, {i - 1, #row - j})\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b) return a[1] < b[1] or\
    \ (a[1] == b[1] and a[2] > b[2]) end)\n    return res\nend", "\tif (#lst == 0)\
    \ then return {} end\n\tlocal res = {}\n\tfor i = 1, #lst do\n\t\tfor j = 1, #lst[i]\
    \ do\n\t\t\tif (lst[i][j] == x) then table.insert(res, {i - 1, j - 1}) end\n\t\
    \tend\n\tend\n\ttable.sort(res, function(a, b) return (a[1] < b[1]) or (a[1] ==\
    \ b[1] and a[2] > b[2]) end)\n\treturn res\nend", "  -- set result as empty table\n\
    \  local result = {}\n  -- create a table with rows count (i)\n  -- and elements\
    \ count in each row (j)\n  for i, row in ipairs(lst) do\n    for j, v in ipairs(row)\
    \ do\n      -- if value is equal to required parameter x,\n      -- push its row\
    \ index and column index to the result table\n      if v == x then\n        table.insert(result,\
    \ {i-1, j-1})\n      end\n    end\n  end\n  -- sort result first by row numbers\
    \ in ascending order\n  -- then by column numbers in descending order\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend", "  local res\
    \ = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    for j = 1, #row do\n\
    \      if row[j] == x then\n        res[#res + 1] = {i - 1, -j}\n      end\n \
    \   end\n  end\n  if #res > 0 then\n    local function mysort(a, b)\n      return\
    \ a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end\n    table.sort(res,\
    \ mysort)\n  end\n  return res\nend", "\tlocal function sum_sort(a, b)\n\t\tif\
    \ a[1] ~= b[1] then\n\t\t\treturn a[1] < b[1]\n\t\telse\n\t\t\treturn a[2] > b[2]\n\
    \t\tend\n\tend\n\tlocal ret = {}\n\tfor i, r in ipairs(lst) do\n\t\tfor j, e in\
    \ ipairs(r) do\n\t\t\tif e == x then\n\t\t\t\ttable.insert(ret, {i-1, j-1})\n\t\
    \t\tend\n\t\tend\n\tend\n\ttable.sort(ret, sum_sort)\n\treturn ret\nend", "\t\
    local arr = {}\n\tfor i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\t\tif lst[i][j]\
    \ == x then\n\t\t\t\ttable.insert(arr, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\t\
    end\n\ttable.sort(arr, function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn\
    \ a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn arr\n\
    end", "    local out = {}\n    for i,v in ipairs(lst) do\n        for ii,vv in\
    \ ipairs(v) do\n            if vv == x then\n                table.insert(out,\
    \ {i-1, ii-1})\n            end\n        end\n    end\n    table.sort(out, function(a,b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return out\nend",
  "    local res = {}\n    local num_rows = #lst\n    for row = 0, num_rows - 1 do\n\
    \        local num_cols = #lst[row + 1]\n        for col = 0, num_cols - 1 do\n\
    \            if lst[row + 1][col + 1] == x then\n                table.insert(res,\
    \ {row, col})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local r = {}\n    for i, row in ipairs(lst) do\n        for j, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(r, {i - 1, #row\
    \ - j})\n            end\n        end\n    end\n    table.sort(r, function(a,\
    \ b)\n        if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n\
    \            return a[2] > b[2]\n        end\n    end)\n    return r\nend", " \
    \   local res = {}\n    for r = 1, #lst do\n        local lr = lst[r]\n      \
    \  for c = 1, #lr do\n            if lr[c] == x then\n                res[#res\
    \ + 1] = { r - 1, #lr - c }\n            end\n        end\n    end\n    return\
    \ res\nend", "  local rst = {}\n  for i = 1, #lst do\n    local row = lst[i]\n\
    \    for j = 1, #row do\n      if row[j] == x then\n        table.insert(rst,\
    \ {i - 1, #row - j})\n      end\n    end\n  end\n  return rst\nend", "  local\
    \ res = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        res[#res + 1] = {i - 1, j - 1}\n      end\n    end\n  end\n\
    \  table.sort(res, function(a, b)\n    if a[1] == b[1] then\n      return a[2]\
    \ > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return res\n\
    end", "\tlocal result = {}\n\tfor row, row_values in ipairs(lst) do\n\t\tfor col,\
    \ col_value in ipairs(row_values) do\n\t\t\tif col_value == x then\n\t\t\t\ttable.insert(result,\
    \ {row, col})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result, function(a, b)\
    \ return a[1] < b[1] end)\n\tfor _, row in ipairs(result) do\n\t\ttable.sort(row,\
    \ function(a, b) return a > b end)\n\tend\n\treturn result\nend", "\tlocal ret\
    \ = {}\n\tfor row_index, row in ipairs(lst) do\n\t\tfor col_index, col in ipairs(row)\
    \ do\n\t\t\tif col == x then\n\t\t\t\tret[#ret + 1] = {row_index - 1, -col_index}\n\
    \t\t\tend\n\t\tend\n\tend\n\ttable.sort(ret, function(a, b)\n\t\tif a[1] == b[1]\
    \ then\n\t\t\treturn a[2] < b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\
    \tend)\n\tfor i, v in ipairs(ret) do\n\t\tret[i] = {v[1], -v[2]}\n\tend\n\treturn\
    \ ret\nend", "  -- your code here\nend", "  local row_res = {}\n  for row_i, row\
    \ in ipairs(lst) do\n    local line_res = {}\n    for line_i, v in ipairs(row)\
    \ do\n      if v == x then table.insert(line_res, line_i) end\n    end\n    if\
    \ #line_res > 0 then table.insert(row_res, {#line_res, row_i, line_res}) end\n\
    \  end\n  if #row_res == 0 then return {} end\n  table.sort(row_res, function(a,\
    \ b) return a[2] < b[2] end)\n  local res = {}\n  for _, arr in ipairs(row_res)\
    \ do\n    for i = 1, arr[1] do\n      table.insert(res, {arr[2] - 1, arr[3][i]\
    \ - 1})\n    end\n  end\n  return res\nend", "  local t = {}\n  for i,v in ipairs(lst)\
    \ do\n    for j,v2 in ipairs(v) do\n      if v2 == x then\n        table.insert(t,\
    \ {i-1, #v-j})\n      end\n    end\n  end\n  table.sort(t, function(a,b) return\
    \ a[1] < b[1] end)\n  for i,v in ipairs(t) do\n    table.sort(v, function(a,b)\
    \ return a > b end)\n  end\n  return t\nend", "  local t = {}\n  for i,a in ipairs(lst)\
    \ do\n    for j,b in ipairs(a) do\n      if b == x then\n        table.insert(t,\
    \ {i-1, j-1})\n      end\n    end\n  end\n  table.sort(t, function(a,b)\n    if\
    \ a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n      return a[2] > b[2]\n\
    \    end\n  end)\n  return t\nend", "  local ret = {}\n  for i, row in ipairs(lst)\
    \ do\n    for j, val in ipairs(row) do\n      if val == x then table.insert(ret,\
    \ {i - 1, j - 1}) end\n    end\n  end\n  table.sort(ret, function(a, b) return\
    \ a[1] < b[1] or (a[1] == b[1] and a[2] > b[2]) end)\n  return ret\nend", "  \
    \  local ans = {}\n    for i,v in ipairs(lst) do\n        for j,w in ipairs(v)\
    \ do\n            if w == x then\n                table.insert(ans, {i - 1, #v\
    \ - j})\n            end\n        end\n    end\n    table.sort(ans, function(x,\
    \ y)\n        if x[1] ~= y[1] then\n            return x[1] < y[1]\n        else\n\
    \            return x[2] > y[2]\n        end\n    end)\n    return ans\nend",
  "    local ans = {}\n    for i, n in ipairs(lst) do\n        for j, m in ipairs(n)\
    \ do\n            if m == x then\n                table.insert(ans, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(ans, function(a,\
    \ b)\n        if a[1] < b[1] then\n            return true\n        elseif a[1]\
    \ > b[1] then\n            return false\n        else\n            return a[2]\
    \ > b[2]\n        end\n    end)\n    return ans\nend", "  -- your code here\n\
    end", "  if #lst == 0 then return {} end\n  local ret = {}\n  for i, row in ipairs(lst)\
    \ do\n    for j, el in ipairs(row) do\n      if el == x then\n        table.insert(ret,\
    \ {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(ret, function(a, b)\n\
    \    if a[1] < b[1] then return true end\n    if a[1] > b[1] then return false\
    \ end\n    return a[2] > b[2]\n  end)\n  return ret\nend", "    local rst = {}\n\
    \    for y1, row in ipairs(lst) do\n        for y2, col in ipairs(row) do\n  \
    \          if col == x then\n                table.insert(rst, {y1-1, y2-1})\n\
    \            end\n        end\n    end\n    local comp = function(a, b)\n    \
    \    if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n    \
    \        return a[2] > b[2]\n        end\n    end\n    table.sort(rst, comp)\n\
    \    return rst\nend", "    local result = {}\n    local last = 1\n    local count\
    \ = 1\n    for k, v in ipairs(lst) do\n        last = #v\n        local list =\
    \ {}\n        while count <= last do\n            local is_x = false\n       \
    \     for i, j in ipairs(v) do\n                if j == x then\n             \
    \       list[#list + 1] = i\n                    is_x = true\n               \
    \ end\n            end\n            if not is_x then\n                break\n\
    \            end\n            count = count + 1\n        end\n        for i, j\
    \ in ipairs(list) do\n            result[#result + 1] = {k - 1, j - 1}\n     \
    \   end\n    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return result\nend", "    local result =\
    \ {}\n    for i = 1, #lst do\n        local row = lst[i]\n        for j = 1, #row\
    \ do\n            if row[j] == x then\n                table.insert(result, {i\
    \ - 1, #row - j})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] < b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for row, row_value in ipairs(lst)\
    \ do\n        for col, value in ipairs(row_value) do\n            if value ==\
    \ x then\n                table.insert(result, {row-1, col-1})\n            end\n\
    \        end\n    end\n    local cmp = function(a, b)\n        if a[1] < b[1]\
    \ then\n            return true\n        elseif a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return false\n        end\n \
    \   end\n    table.sort(result, cmp)\n    return result\nend", "  if not lst then\
    \ return {} end\n  local t = {}\n  for r, rr in ipairs(lst) do\n    for c, cc\
    \ in ipairs(rr) do\n      if cc == x then table.insert(t, {r, c}) end\n    end\n\
    \  end\n  table.sort(t, function(a, b)\n    if a[1] ~= b[1] then return a[1] <\
    \ b[1]\n    else return a[2] > b[2] end\n  end)\n  local ret = {}\n  for i, ii\
    \ in ipairs(t) do\n    table.insert(ret, {ii[1] - 1, ii[2] - 1})\n  end\n  return\
    \ ret\nend", "  local t={}\n  for i,v in ipairs(lst) do\n    for j,w in ipairs(v)\
    \ do\n      if w==x then\n        table.insert(t,{i-1,j-1})\n      end\n    end\n\
    \  end\n  table.sort(t,function(a,b) return a[1] < b[1] or (a[1] == b[1] and a[2]\
    \ > b[2]) end)\n  return t\nend", "  local row = {}\n  for y, r in ipairs(lst)\
    \ do\n    for k, v in ipairs(r) do\n      if v == x then\n        table.insert(row,\
    \ {y, k})\n      end\n    end\n  end\n  table.sort(row, function(a, b)\n    if\
    \ a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n\
    \    end\n  end)\n  return row\nend", "  local res = {}\n  for r, row in ipairs(lst)\
    \ do\n    for c, val in ipairs(row) do\n      if val == x then\n        res[#res\
    \ + 1] = {r - 1, c - 1}\n      end\n    end\n  end\n  -- sort rows\n  local function\
    \ comp(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n \
    \     return a[1] < b[1]\n    end\n  end\n  table.sort(res, comp)\n  return res\n\
    end", "  -- your code here\nend", "  local res = {}\n  for row, columns in ipairs(lst)\
    \ do\n    for col, value in ipairs(columns) do\n      if value == x then\n   \
    \     table.insert(res, {row, col})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    return a[1] < b[1] or a[1] == b[1] and a[2] > b[2]\n  end)\n\
    \  return res\nend", "    local results = {}\n    for i = 1, #lst do\n       \
    \ local row = lst[i]\n        for j = 1, #row do\n            if row[j] == x then\n\
    \                results[#results + 1] = {i - 1, j - 1}\n            end\n   \
    \     end\n    end\n    -- Sort by rows, then columns\n    table.sort(results,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ results\nend", "    local array = {}\n    for i = 1, #lst do\n        local\
    \ sub_array = {}\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(sub_array, {i - 1, j - 1})\n            end\n\
    \        end\n        table.sort(sub_array, function(a, b) return a[2] > b[2]\
    \ end)\n        table.insert(array, sub_array)\n    end\n    local all_array =\
    \ {}\n    for i = 1, #array do\n        for j = 1, #array[i] do\n            table.insert(all_array,\
    \ array[i][j])\n        end\n    end\n    return all_array\nend", "  local coordinates\
    \ = {}\n  for row, lst in ipairs(lst) do\n    for col, item in ipairs(lst) do\n\
    \      if item == x then\n        table.insert(coordinates, {row, col})\n    \
    \  end\n    end\n  end\n  table.sort(coordinates, function(a, b)\n    if a[1]\
    \ == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n\
    \    end\n  end)\n  return coordinates\nend", "    local result = {}\n    local\
    \ row = 1\n    local column = 1\n    for i, v in ipairs(lst) do\n        for j,\
    \ v2 in ipairs(v) do\n            if v2 == x then\n                table.insert(result,\
    \ {row - 1, column - 1})\n            end\n            column = column + 1\n \
    \       end\n        column = 1\n        row = row + 1\n    end\n    table.sort(result,\
    \ function(a, b) return a[1] < b[1] end)\n    for i, v in ipairs(result) do\n\
    \        table.sort(result, function(a, b) return a[2] > b[2] end)\n    end\n\
    \    return result\nend", "    local res = {}\n    for i, v in ipairs(lst) do\n\
    \        for j, v1 in ipairs(v) do\n            if v1 == x then\n            \
    \    table.insert(res, {i - 1, #v - j})\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] < b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "  local result = {}\n  for i,v in ipairs(lst)\
    \ do\n    for j,y in ipairs(v) do\n      if y == x then table.insert(result, {i-1,\
    \ j-1}) end\n    end\n  end\n  table.sort(result, function(a,b) if a[1] == b[1]\
    \ then return a[2] > b[2] else return a[1] < b[1] end end)\n  return result\n\
    end", "  local out = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n   \
    \   if lst[i][j] == x then\n        table.insert(out, {i-1, j-1})\n      end\n\
    \    end\n  end\n  table.sort(out, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return out\nend", "    local coords = {}\n    for y = 1, #lst do\n        for\
    \ x2 = 1, #lst[y] do\n            if lst[y][x2] == x then\n                table.insert(coords,\
    \ {y - 1, x2 - 1})\n            end\n        end\n    end\n    table.sort(coords,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return coords\nend", "  local\
    \ res = {}\n  local cnt = 0\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        cnt = cnt + 1\n        res[cnt] = {i -\
    \ 1, j - 1}\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n   \
    \ if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n      return a[2]\
    \ > b[2]\n    end\n  end)\n  return res\nend", "  -- body\nend", "  local result\
    \ = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] ==\
    \ x then\n        result[#result + 1] = {i, j}\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend", "\tlocal res\
    \ = {}\n\tfor row, l in ipairs(lst) do\n\t\tfor col, v in ipairs(l) do\n\t\t\t\
    if v == x then\n\t\t\t\ttable.insert(res, {row - 1, col - 1})\n\t\t\tend\n\t\t\
    end\n\tend\n\ttable.sort(res, function(a, b)\n\t\treturn a[1] < b[1] or a[1] ==\
    \ b[1] and a[2] > b[2]\n\tend)\n\treturn res\nend", "  local t = {}\n  for i =\
    \ 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n      \
    \  table.insert(t, {i - 1, #lst[i] - j})\n      end\n    end\n  end\n  table.sort(t,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return t\nend", "    local result\
    \ = {}\n    for row, _ in ipairs(lst) do\n        for column, _ in ipairs(lst[row])\
    \ do\n            if lst[row][column] == x then\n                table.insert(result,\
    \ {row, column})\n            end\n        end\n    end\n    local function sort(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end\n    table.sort(result,\
    \ sort)\n    return result\nend", "  local res = {}\n  for y = 1, #lst do\n  \
    \  local row = lst[y]\n    for x1 = 1, #row do\n      if row[x1] == x then\n \
    \       res[#res + 1] = {y - 1, #row - x1}\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend", "    local rsl\
    \ = {}\n    for i = 1, #lst do\n        local row = lst[i]\n        local column\
    \ = 1\n        while row[column] do\n            if row[column] == x then\n  \
    \              table.insert(rsl, {i - 1, #row - column})\n            end\n  \
    \          column = column + 1\n        end\n    end\n    table.sort(rsl, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return rsl\nend",
  "    local t = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n     \
    \       if lst[i][j] == x then\n                table.insert(t, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    local function cmp(lhs, rhs)\n   \
    \     if lhs[1] ~= rhs[1] then\n            return lhs[1] < rhs[1]\n        else\n\
    \            return lhs[2] > rhs[2]\n        end\n    end\n    table.sort(t, cmp)\n\
    \    return t\nend", "\tlocal ret = {}\n\tfor i = 1, #lst do\n\t\tlocal row =\
    \ lst[i]\n\t\tfor j = 1, #row do\n\t\t\tif row[j] == x then\n\t\t\t\ttable.insert(ret,\
    \ {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\tif #ret > 0 then\n\t\ttable.sort(ret,\
    \ function(a, b)\n\t\t\treturn a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n\
    \t\tend)\n\tend\n\treturn ret\nend", "    local coords = {}\n    for y, v in ipairs(lst)\
    \ do\n        for x1, v1 in ipairs(v) do\n            if v1 == x then\n      \
    \          table.insert(coords, {y - 1, x1 - 1})\n            end\n        end\n\
    \    end\n    return coords\nend", "  -- your code here\nend", "\t-- body\n\t\
    local rst = {}\n\tfor i,v in ipairs(lst) do\n\t\tlocal row = {}\n\t\tfor i2,v2\
    \ in ipairs(v) do\n\t\t\tif v2 == x then\n\t\t\t\ttable.insert(row, {i-1, i2-1})\n\
    \t\t\tend\n\t\tend\n\t\tif next(row) then\n\t\t\tfor i3,v3 in ipairs(row) do\n\
    \t\t\t\ttable.insert(rst, v3)\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(rst, function(a,\
    \ b)\n\t\tif a[1] < b[1] then\n\t\t\treturn true\n\t\telseif a[1] == b[1] then\n\
    \t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend)\n\treturn\
    \ rst\nend", "    local ret = {}\n    for i, v in ipairs(lst) do\n        for\
    \ j, w in ipairs(v) do\n            if w == x then\n                table.insert(ret,\
    \ {i-1, #v-j})\n            end\n        end\n    end\n    table.sort(ret, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] < b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return ret\nend",
  "  local result = {}\n  for i, j in ipairs(lst) do\n    for k, v in ipairs(j) do\n\
    \      if v == x then\n        table.insert(result, {i-1, k-1})\n      end\n \
    \   end\n  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return result\nend", "    local t = {}\n    for row_i, row in ipairs(lst) do\n\
    \        for col_i, item in ipairs(row) do\n            if item == x then\n  \
    \              table.insert(t, {row_i - 1, col_i - 1})\n            end\n    \
    \    end\n    end\n    table.sort(t, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return t\nend", "    -- write your code here\n   \
    \ local res = {}\n    for i, v in ipairs(lst) do\n        for j, v2 in ipairs(v)\
    \ do\n            if v2 == x then\n                table.insert(res, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n\
    \            return a[2] > b[2]\n        end\n    end)\n    return res\nend",
  "  local result = {}\n  for i,v in ipairs(lst) do\n    for k, w in ipairs(v) do\n\
    \      if w == x then\n        table.insert(result, {i - 1, #v - k})\n      end\n\
    \    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return result\nend", "    local result = {}\n    for i, sublist in ipairs(lst)\
    \ do\n        for j, val in ipairs(sublist) do\n            if val == x then\n\
    \                table.insert(result, { i - 1, j - 1 })\n            end\n   \
    \     end\n    end\n    table.sort(result, function(a, b)\n        if a[1] < b[1]\
    \ then\n            return true\n        elseif a[1] > b[1] then\n           \
    \ return false\n        else\n            return a[2] > b[2]\n        end\n  \
    \  end)\n    return result\nend", "    local result = {}\n    for row, col in\
    \ ipairs(lst) do\n        for col, value in ipairs(col) do\n            if value\
    \ == x then\n                table.insert(result, {row - 1, col - 1})\n      \
    \      end\n        end\n    end\n    table.sort(result, function(a, b)\n    \
    \    if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n    \
    \        return a[1] < b[1]\n        end\n    end)\n    return result\nend", " \
    \   local function aux(lst, coords, index)\n        if #lst == 0 then\n      \
    \      return coords\n        else\n            local coord = {}\n           \
    \ for j,v in ipairs(lst[1]) do\n                if v == x then\n             \
    \       coord = {index, j}\n                    table.insert(coords, coord)\n\
    \                end\n            end\n            return aux(subset(lst, 2, #lst),\
    \ coords, index + 1)\n        end\n    end\n    local coords = aux(lst, {}, 0)\n\
    \    table.sort(coords, function(a, b) return a[1] < b[1] end)\n    for i,t in\
    \ ipairs(coords) do\n        table.sort(t, function(a, b) return a[2] > b[2] end)\n\
    \    end\n    return coords\nend", "  if lst == nil or #lst == 0 then return {}\
    \ end\n  local r = {}\n  for i, row in ipairs(lst) do\n    for j, v in ipairs(row)\
    \ do\n      if v == x then\n        table.insert(r, {i-1, j-1})\n      end\n \
    \   end\n  end\n  table.sort(r, function(a, b)\n    if a[1] < b[1] then return\
    \ true end\n    if a[1] > b[1] then return false end\n    return a[2] > b[2]\n\
    \  end)\n  return r\nend", "    local function unpack_if_found(unpacked, row_num,\
    \ row)\n        local found = {}\n        for col_num, col in ipairs(row) do\n\
    \            if col == x then\n                table.insert(found, {row_num, col_num})\n\
    \            end\n        end\n        if #found > 0 then\n            table.insert(unpacked,\
    \ found)\n        end\n        return unpacked\n    end\n    local found = {}\n\
    \    for row_num, row in ipairs(lst) do\n        unpack_if_found(found, row_num,\
    \ row)\n    end\n    local function sort_row(row)\n        table.sort(row, function(x,\
    \ y) return x[2] > y[2] end)\n        return row\n    end\n    local function\
    \ sort_coords(coords)\n        table.sort(coords, function(x, y) return x[1] <\
    \ y[1] end)\n        for _, row in ipairs(coords) do\n            sort_row(row)\n\
    \        end\n        return coords\n    end\n    found = sort_coords(found)\n\
    \    local unpacked = {}\n    for _, row in ipairs(found) do\n        for _, col\
    \ in ipairs(row) do\n            table.insert(unpacked, col)\n        end\n  \
    \  end\n    return unpacked\nend", "    local res = {}\n    for y, row in ipairs(lst)\
    \ do\n        for x1, num in ipairs(row) do\n            if num == x then\n  \
    \              res[#res + 1] = {y, x1}\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "  local set = {}\n  for i = 1, #lst do\n   \
    \ for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        set[#set + 1] =\
    \ { i - 1, j - 1 }\n      end\n    end\n  end\n  table.sort(set, function(a, b)\n\
    \    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end)\n  local res = {}\n  for i = 1, #set do\n    res[i]\
    \ = { set[i][1], set[i][2] }\n  end\n  return res\nend", "    local result = {}\n\
    \    for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend", "\tlocal\
    \ result = {}\n\tfor i, row in ipairs(lst) do\n\t\tfor j, col in ipairs(row) do\n\
    \t\t\tif col == x then\n\t\t\t\ttable.insert(result, {i-1, j-1})\n\t\t\tend\n\t\
    \tend\n\tend\n\ttable.sort(result,\n\t\tfunction(l, r)\n\t\t\tif l[1] == r[1]\
    \ then\n\t\t\t\treturn l[2] > r[2]\n\t\t\telse\n\t\t\t\treturn l[1] < r[1]\n\t\
    \t\tend\n\t\tend\n\t)\n\treturn result\nend", "    local result = {}\n    for\
    \ i, xs in ipairs(lst) do\n        for j, y in ipairs(xs) do\n            if y\
    \ == x then\n                table.insert(result, {i - 1, #xs - j})\n        \
    \    end\n        end\n    end\n    table.sort(result, function(a, b)\n      \
    \  if a[1] == b[1] then\n            return a[2] < b[2]\n        else\n      \
    \      return a[1] < b[1]\n        end\n    end)\n    return result\nend", " \
    \   local result = {}\n    local row = 0\n    for _, data in ipairs(lst) do\n\
    \        local column = 0\n        for _, value in ipairs(data) do\n         \
    \   if value == x then\n                table.insert(result, {row, column})\n\
    \            end\n            column = column + 1\n        end\n        row =\
    \ row + 1\n    end\n    table.sort(result, function(a, b)\n        if a[1] < b[1]\
    \ then\n            return true\n        elseif a[1] > b[1] then\n           \
    \ return false\n        else\n            return a[2] > b[2]\n        end\n  \
    \  end)\n    return result\nend", "    local indexes = {}\n    for i,v in ipairs(lst)\
    \ do\n        local j = 1\n        while j <= #v do\n            if v[j] == x\
    \ then\n                indexes[#indexes + 1] = { i - 1, j - 1 }\n           \
    \     table.remove(v, j)\n            else\n                j = j + 1\n      \
    \      end\n        end\n    end\n    table.sort(indexes, function(a, b)\n   \
    \     if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n   \
    \         return a[2] > b[2]\n        end\n    end)\n    return indexes\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
