name: HumanEval_146_specialFilter
language: lua
results:
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal ret = 0\n\tfor i,v\
    \ in ipairs(nums) do\n\t\tlocal a = math.abs(v)\n\t\tif a > 10 and a % 2 == 1\
    \ and (a % 10) % 2 == 1 then\n\t\t\tret = ret + 1\n\t\tend\n\tend\n\treturn ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1xm8tdc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpp1xm8tdc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 then\n            local\
    \ first = num % 10\n            while num >= 10 do\n                num = num\
    \ / 10\n            end\n            local last = num\n            if first %\
    \ 2 == 1 and last % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_eo6w17.lua:28:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa_eo6w17.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal function checkNum(n)\n\
    \t\tlocal firstDigit = n % 10\n\t\tlocal lastDigit = n\n\t\twhile lastDigit >=\
    \ 10 do\n\t\t\tlastDigit = lastDigit / 10\n\t\tend\n\t\tlastDigit = math.floor(lastDigit)\n\
    \t\treturn n > 10 and firstDigit % 2 == 1 and lastDigit % 2 == 1\n\tend\n\tlocal\
    \ function iter(acc, i)\n\t\tif i > #nums then\n\t\t\treturn acc\n\t\telse\n\t\
    \t\tif checkNum(nums[i]) then\n\t\t\t\treturn iter(acc + 1, i + 1)\n\t\t\telse\n\
    \t\t\t\treturn iter(acc, i + 1)\n\t\t\tend\n\t\tend\n\tend\n\treturn iter(0, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local result = 0\n \
    \   for _,v in ipairs(nums) do\n        local digit = v%10 -- last digit\n   \
    \     while v>0 do\n            v = math.floor(v/10)\n            if v==0 then\n\
    \                if digit%2==1 then -- last digit is odd\n                   \
    \ result = result + 1\n                end\n                break\n          \
    \  end\n            digit = v%10 -- new last digit\n        end\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vs4280z.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp4vs4280z.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgycxozxe.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpgycxozxe.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    return\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fz736po.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_fz736po.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and\
    \ num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88e3py38.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp88e3py38.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 2 == 1 and num % 10 % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmvue2ok.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpcmvue2ok.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v % 10) % 2 ==\
    \ 1 and math.abs(v / 10) % 2 == 1 then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ndv1pvc.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6ndv1pvc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- YOUR CODE HERE\n\
    \    local function oddFirstAndLast(n)\n        if n<10 then return n%2~=0 end\n\
    \        while n>=10 do\n            if n%10==0 then return false end\n      \
    \      n=math.floor(n/10)\n        end\n        return n%2~=0\n    end\n    local\
    \ count=0\n    for _,n in ipairs(nums) do\n        if n>10 and oddFirstAndLast(n)\
    \ then count=count+1 end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp873stxkr.lua:28:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp873stxkr.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 and isFirstLastOdd(num)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjl6xu8o.lua:10:\
    \ attempt to call a nil value (global 'isFirstLastOdd')\nstack traceback:\n\t\
    /tmp/tmpmjl6xu8o.lua:10: in local 'candidate'\n\t/tmp/tmpmjl6xu8o.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local function numberTest(n)\n\
    \        local lastDigit = n % 10\n        local fstDigit = n\n        while fstDigit\
    \ >= 10 do\n            fstDigit = fstDigit / 10\n        end\n        if n >\
    \ 10 and lastDigit % 2 == 1 and fstDigit % 2 == 1 then\n            return true\n\
    \        else\n            return false\n        end\n    end\n    local k = 0\n\
    \    for i, v in ipairs(nums) do\n        if numberTest(v) then\n            k\
    \ = k + 1\n        end\n    end\n    return k\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf7m0db6.lua:33:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvf7m0db6.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local cnt = 0\n    for\
    \ i = 1, #nums do\n        local n = nums[i]\n        if n > 10 and math.abs(n)\
    \ % 10 % 2 ~= 0 and math.floor(math.abs(n)/10) % 2 ~= 0 then\n            cnt\
    \ = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7qal6mx.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmps7qal6mx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tlocal\
    \ len = #nums\n\t\n\tfor i = 1, len do\n\t\tlocal num = nums[i]\n\t\tlocal first\
    \ = num % 10\n\t\tlocal last = math.floor(num / 10)\n\t\t\n\t\tif (num > 10) and\
    \ (first % 2 ~= 0) and (last % 2 ~= 0) then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\t\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g1yhq6l.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6g1yhq6l.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal cnt = 0\n\tfor i,\
    \ num in ipairs(nums) do\n\t\tif num > 10 and math.floor(num / 10) % 2 ~= 0 and\
    \ num % 2 ~= 0 then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4iv0gatu.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4iv0gatu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10 % 2 ==\
    \ 1 and math.abs(v) // 10 % 10 % 2 == 1 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzc2u72c0.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzc2u72c0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, num in ipairs(nums) do\n    if num > 10 and isOdd(num) and isOdd(num % 10)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwx4nxjb5.lua:10:\
    \ attempt to call a nil value (global 'isOdd')\nstack traceback:\n\t/tmp/tmpwx4nxjb5.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpwx4nxjb5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i, num in ipairs(nums) do\n        if num > 10 and math.fmod(math.floor(num\
    \ / 10), 2) ~= 0 and math.fmod(num, 2) ~= 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wdqfjna.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4wdqfjna.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7x5e8pv.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpd7x5e8pv.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6r9iu3t.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpe6r9iu3t.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local numSpecial = 0\n\
    \  for i, n in ipairs(nums) do\n    if n > 10 and n % 2 == 1 and n % 10 % 2 ==\
    \ 1 then\n      numSpecial = numSpecial + 1\n    end\n  end\n  return numSpecial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xca4kxc.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp4xca4kxc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if (nums[i] > 10) and (nums[i] % 2 ~= 0) and (nums[1] %\
    \ 2 ~= 0) and (nums[#nums] % 2 ~= 0) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoc3txgd5.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpoc3txgd5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    --[[\n    local new\
    \ = {}\n    for k, v in pairs(nums) do\n        if v > 10 and (v % 2 ~= 0) and\
    \ \n            (math.floor(v / 10) % 2 ~= 0) and (v % 10 % 2 ~= 0) then\n   \
    \         table.insert(new, v)\n        end\n    end\n    return #new\n    ]]\n\
    \    local r = 0\n    for k, v in pairs(nums) do\n        if v > 10 and (v % 2\
    \ ~= 0) and \n            (math.floor(v / 10) % 2 ~= 0) and (v % 10 % 2 ~= 0)\
    \ then\n            r = r + 1\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppud9w4ke.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppud9w4ke.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i, v in ipairs(nums) do\n        if v > 10 and (v % 10) % 2 == 1 and (v\
    \ / 10) % 2 == 1 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvtb5hz9.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwvtb5hz9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tcount = 0\n\tfor i, val\
    \ in ipairs(nums) do\n\t\tif (val > 10) then\n\t\t\tif(val%2 == 1) then\n\t\t\t\
    \tif(math.floor(val/10)%2 == 1) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s0gpjmo.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1s0gpjmo.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and\n      math.floor(nums[i]\
    \ / 10) % 2 == 1 and\n      nums[i] % 10 % 2 == 1 then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9tjpcft.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg9tjpcft.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp50w5437m.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local number = nums[i]\n        if number > 10\
    \ and math.abs(number) % 2 == 1 and (number % 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp503dc8df.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp503dc8df.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- Implementation goes\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_769uy_o.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_769uy_o.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = 0\n    for\
    \ i, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1 and (num //\
    \ 10) % 2 == 1 then\n            n = n + 1\n        end\n    end\n    return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb1p2f4f.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgb1p2f4f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num) % 10\
    \ % 2 ~= 0 and math.abs(num) / 10 % 2 ~= 0 then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy8ow52k.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpqy8ow52k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpb_5_bu.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmprpb_5_bu.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgqxsojh.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmprgqxsojh.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and string.sub(tostring(nums[i]),\
    \ 1, 1) % 2 == 1 and string.sub(tostring(nums[i]), -1) % 2 == 1 then\n       \
    \     counter = counter + 1\n        end\n    end\n    return counter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        if (nums[i] > 10) and (nums[i] % 2 ~= 0) and (math.floor(nums[i]\
    \ / 10) % 2 ~= 0) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqnd8yk8.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfqnd8yk8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local total = 0\n  \
    \  for i = 1, #nums do\n        if nums[i] > 10 and string.sub(tostring(nums[i]),\
    \ 1, 1) % 2 ~= 0 and string.sub(tostring(nums[i]), #nums[i], #nums[i]) % 2 ~=\
    \ 0 then\n            total = total + 1\n        end\n    end\n    return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lw9s9x1.lua:10:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp9lw9s9x1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9lw9s9x1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local cnt = 0\n  for _,v\
    \ in ipairs(nums) do\n    local v = v < 0 and -v or v\n    local has_odd_first_digit\
    \ = v % 2 == 1\n    local has_odd_last_digit = v % 10 == 1 or v % 10 == 3 or v\
    \ % 10 == 5 or v % 10 == 7 or v % 10 == 9\n    if v > 10 and has_odd_first_digit\
    \ and has_odd_last_digit then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjo5844h.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphjo5844h.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _,num in ipairs(nums) do\n        if (math.abs(num) > 10) and ((num%2)\
    \ == 1) and ((num%10) == 1 or (num%10) == 3 or (num%10) == 5 or (num%10) == 7\
    \ or (num%10) == 9) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ij9kwwd.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8ij9kwwd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and getFirstDigit(num)\
    \ % 2 ~= 0 and getLastDigit(num) % 2 ~= 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmqsrl9yd.lua:11:\
    \ attempt to call a nil value (global 'getFirstDigit')\nstack traceback:\n\t/tmp/tmpmqsrl9yd.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmqsrl9yd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i = 1, #nums do\n\t\tlocal num = nums[i]\n\t\tlocal first = num % 10\n\t\twhile\
    \ (num > 0) do\n\t\t\tlocal last = num % 10\n\t\t\tif (first % 2 == 1 and last\
    \ % 2 == 1 and nums[i] > 10) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\t\
    num = num / 10\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd68btrm.lua:28:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpcd68btrm.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07lqfzbt.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp07lqfzbt.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and string.match(tostring(nums[i]), '^%d+$')\
    \ and \n      string.match(tostring(nums[i]), '^[13579]%d+$') and \n      string.match(tostring(nums[i]),\
    \ '%d+[13579]$') then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\treturn #(Filter(nums,\
    \ function(num)\n\t\treturn num > 10 and (num % 2 == 1 and num // 10 % 2 == 1)\n\
    \tend))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpov0756a1.lua:8:\
    \ attempt to call a nil value (global 'Filter')\nstack traceback:\n\t/tmp/tmpov0756a1.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpov0756a1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        local first = tostring(num):sub(1, 1)\n\
    \        local last = tostring(num):sub(-1)\n        if num > 10 and first % 2\
    \ ~= 0 and last % 2 ~= 0 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    return \n        table.reduce(\n\
    \            table.filter(\n                nums, \n                function(n)\
    \ \n                    return math.abs(n) > 10 and \n                       \
    \ math.abs(n) % 10 % 2 == 1 and \n                        math.abs(n) % 10^(math.floor(math.log10(math.abs(n))))\
    \ == 1\n                end\n            ), \n            function(a,b) return\
    \ a + b end, \n            0\n        )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9m3227y.lua:10:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpz9m3227y.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpz9m3227y.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, num in ipairs(nums) do\n\t\tif num > 10 and num % 2 == 1 and \n\t\t\tstring.sub(tostring(num),\
    \ 1, 1) % 2 == 1 and \n\t\t\tstring.sub(tostring(num), -1, -1) % 2 == 1 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    return #filter(hasOddFirstAndLastDigits,\
    \ greaterThanTen, nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1s1_taw4.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp1s1_taw4.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1s1_taw4.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for _, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10 % 2 ==\
    \ 1 and \n            math.floor(math.abs(v) / 10) % 2 == 1 then\n           \
    \ counter = counter + 1\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8j6gscx.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpk8j6gscx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        local numDigits =  string.len(tostring(num))\n\
    \        local firstDigit = string.sub(tostring(num), 1, 1)\n        local lastDigit\
    \ = string.sub(tostring(num), numDigits, numDigits)\n        if (num > 10) and\
    \ (firstDigit % 2 ~= 0) and (lastDigit % 2 ~= 0) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i, v in ipairs(nums) do\n\t\tif v > 10 and math.abs(v) % 10 % 2 ~= 0 and math.floor(math.abs(v)\
    \ / 10) % 2 ~= 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpandykz34.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpandykz34.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, num in ipairs(nums) do\n    if num > 10 then\n      local str = num..\"\"\
    \n      local firstDigit = tonumber(str:sub(1, 1))\n      local lastDigit = tonumber(str:sub(str:len()))\n\
    \      if firstDigit%2 == 1 and lastDigit%2 == 1 then\n        count = count +\
    \ 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\t-- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynb49uol.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpynb49uol.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal function firstDigit(num)\n\
    \t\tlocal t = tostring(num)\n\t\treturn tonumber(t:sub(1, 1))\n\tend\n\tlocal\
    \ function lastDigit(num)\n\t\tlocal t = tostring(num)\n\t\treturn tonumber(t:sub(-1))\n\
    \tend\n\tlocal function isGreaterThanTen(num)\n\t\treturn num > 10\n\tend\n\t\
    local function isFirstAndLastDigitOdd(num)\n\t\treturn firstDigit(num) % 2 ~=\
    \ 0 and lastDigit(num) % 2 ~= 0\n\tend\n\treturn #filter(isGreaterThanTen, filter(isFirstAndLastDigitOdd,\
    \ nums))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdnun3yxp.lua:22:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpdnun3yxp.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpdnun3yxp.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, n in ipairs(nums) do\n    if n > 10 and n // 10 % 2 == 1 and n % 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglgl491s.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpglgl491s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i, v in ipairs(nums) do\n\t\tlocal first, last = math.floor(v / 10), v % 10\n\
    \t\tif v > 10 and first % 2 == 1 and last % 2 == 1 then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2g_3qhi.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj2g_3qhi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyevkbhiz.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpyevkbhiz.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    local number = nums[i]\n    if number > 10 and math.fmod(number,\
    \ 2) == 1 and math.fmod(number % 10, 2) == 1 then\n      count = count + 1\n \
    \   end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsgfe9uu.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpcsgfe9uu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rds9kb6.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp5rds9kb6.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetitwjao.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpetitwjao.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i = 1, #nums do\n\t\tlocal num = nums[i]\n\t\tif num > 10 and math.abs(num)\
    \ % 2 == 1 and (num % 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuagsjt8z.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpuagsjt8z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal counter = 0\n\t\
    for i,v in ipairs(nums) do\n\t\tif v > 10 and (v % 2 == 1) and (v - v % 10) /\
    \ 10 % 2 == 1 and v % 10 % 2 == 1 then\n\t\t\tcounter = counter + 1\n\t\tend\n\
    \tend\n\treturn counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrvgdy30.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvrvgdy30.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pcglgcz.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp2pcglgcz.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal result = 0\n\tfor\
    \ i = 1, #nums do\n\t\tif (nums[i] > 10) and (firstDigit(nums[i]) % 2 ~= 0) and\
    \ (lastDigit(nums[i]) % 2 ~= 0) then\n\t\t\tresult = result + 1\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrejez__.lua:10:\
    \ attempt to call a nil value (global 'firstDigit')\nstack traceback:\n\t/tmp/tmpmrejez__.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpmrejez__.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and math.abs(num)\
    \ % 2 == 1 and math.abs(num // 10) % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttfie9hw.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpttfie9hw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, v in ipairs(nums) do\n    if math.abs(v) > 10 and (math.abs(v) % 10) % 2\
    \ == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_v8u64b.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9_v8u64b.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4lyjtua.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmph4lyjtua.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i,n in ipairs(nums) do\n        if n > 10 and (n%10)%2==1 and (n//10)%2==1\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwliw71yw.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwliw71yw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, v in ipairs(nums) do\n    if v > 10 and math.abs(v) % 10 % 2 == 1 and math.abs(v)\
    \ // 10 % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz1ciz5q.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppz1ciz5q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jnye69x.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp4jnye69x.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and\
    \ num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuan1bqa.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpuuan1bqa.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- YOUR CODE HERE\n  local\
    \ count = 0\n  for i = 1, #nums do\n    local value = nums[i]\n    if value >\
    \ 10 and math.fmod(value,2) == 1 and math.fmod(value,10) == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu_nrrua.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvu_nrrua.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local result = 0\n \
    \   for i, num in ipairs(nums) do\n        if num > 10 and (num % 2 == 1) and\
    \ (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10\
    \ == 9) then\n            result = result + 1\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3lrt4c9.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpl3lrt4c9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        if nums[i] > 10 and nums[i]%2 ~= 0 and string.sub(tostring(nums[i]),1,1)%2\
    \ ~= 0 and string.sub(tostring(nums[i]),-1,-1)%2 ~= 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local res = 0\n    for\
    \ _,num in ipairs(nums) do\n        local numStr = tostring(num)\n        if tonumber(numStr:sub(1,1))\
    \ % 2 == 1 and tonumber(numStr:sub(-1,-1)) % 2 == 1 and num > 10 then\n      \
    \      res = res + 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkkhlyccv.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpkkhlyccv.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpkkhlyccv.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i,v in ipairs(nums) do\n        if v > 10 and math.fmod(math.floor(v/10),2)~=0\
    \ and math.fmod(v,2)~=0 then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz14w98a.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgz14w98a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal function firstAndLastDigitsAreOdd(num)\n\
    \t\tlocal sign = 0\n\t\tlocal last = 0\n\t\tlocal first = 0\n\t\tif num < 0 then\n\
    \t\t\tsign = -1\n\t\t\tnum = -num\n\t\telse\n\t\t\tsign = 1\n\t\tend\n\t\tif num\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\t\twhile num > 0 do\n\t\t\tlast = num\
    \ % 10\n\t\t\tif num > 9 then\n\t\t\t\tnum = math.floor(num / 10)\n\t\t\telse\n\
    \t\t\t\tfirst = num\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif last % 2 == 1 and\
    \ first % 2 == 1 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\n\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tif firstAndLastDigitsAreOdd(nums[i])\
    \ and nums[i] > 10 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh7q22_5.lua:49:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphh7q22_5.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpece_omea.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local count = 0\n   for\
    \ _, num in ipairs(nums) do\n      if num > 10 then\n         local first = num\
    \ % 10\n         local last = num % 10\n         while num >= 10 do\n        \
    \    num = num / 10\n         end\n         if first % 2 == 1 and num % 2 == 1\
    \ then\n            count = count + 1\n         end\n      end\n   end\n   return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahg3mgw1.lua:28:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpahg3mgw1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[1]\
    \ % 2 == 1 and nums[#nums[i]] % 2 == 1 then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptnryitd7.lua:10:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmptnryitd7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptnryitd7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local total = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8vpcv7u0.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i,v in ipairs(nums) do\n        if v > 10 and v%2 == 1 and (v%10)%2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpgfmxx0.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmplpgfmxx0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\treturn reduce(function(acc,\
    \ n)\n\t\treturn acc + (n > 10 and isFirstAndLastDigitOdd(n) and 1 or 0)\n\tend,\
    \ 0, nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_93t32dh.lua:8:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmp_93t32dh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp_93t32dh.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for _,num in ipairs(nums) do\n        if num > 10 and num % 2 == 1 and (num\
    \ // 10) % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\
    \    return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssp22v9q.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpssp22v9q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2ibx6hs.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpq2ibx6hs.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local function isSpecial(x)\n\
    \    local first, last = x % 10, math.floor(x / 10) % 10\n    return x > 10 and\
    \ (first % 2 ~= 0) and (last % 2 ~= 0)\n  end\n  local count = 0\n  for i = 1,\
    \ #nums do\n    if isSpecial(nums[i]) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxo__hdp.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzxo__hdp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- Implementation goes\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1bhj7qc.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_1bhj7qc.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local result = 0\n \
    \   for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and\
    \ (num // 10) % 2 ~= 0 and num % 2 ~= 0 then\n            result = result + 1\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ai2qf0o.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8ai2qf0o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh9hmfin.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmplh9hmfin.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = 0\n    for\
    \ _, num in ipairs(nums) do\n        if num > 10 and\n            string.find(tostring(num),\
    \ \"^[13579]\") and\n            string.find(tostring(num), \"[13579]$\") then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and isFirstAndLastDigitOdd(num)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa32r01wn.lua:11:\
    \ attempt to call a nil value (global 'isFirstAndLastDigitOdd')\nstack traceback:\n\
    \t/tmp/tmpa32r01wn.lua:11: in local 'candidate'\n\t/tmp/tmpa32r01wn.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local sum = 0\n    for\
    \ i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] %\
    \ 10 % 2 == 1 then\n            sum = sum + 1\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3zwrty7.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpn3zwrty7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and num % 2 == 1 and\
    \ (num // 10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4x38mlc7.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4x38mlc7.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sii14j7.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp6sii14j7.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\treturn _.reduce(nums,\
    \ function(acc, num)\n\t\tif num > 10 and \n\t\t\t_(tostring(num)):sub(1, 1) %\
    \ 2 == 1 and \n\t\t\t_(tostring(num)):sub(-1) % 2 == 1 then\n\t\t\treturn acc\
    \ + 1\n\t\telse\n\t\t\treturn acc\n\t\tend\n\tend, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9pdrc94.lua:8:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpt9pdrc94.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpt9pdrc94.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local c = 0\n    for\
    \ i = 1, #nums do\n        local n = nums[i]\n        if n > 10 and (math.fmod(n,\
    \ 2) ~= 0 and math.fmod(n % 10, 2) ~= 0) then\n            c = c + 1\n       \
    \ end\n    end\n    return c\nend\nassert(specialFilter({15, -73, 14, -15}) ==\
    \ 1)\nassert(specialFilter({33, -2, -3, 45, 21, 109}) == 2)\nassert(specialFilter({-2,\
    \ 0, 10, 20, -30, 100, 110, 120, -130}) == 0)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfna5na0e.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpfna5na0e.lua:18: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local function isMoreThan10AndOdd(num)\n\
    \    local str = num .. ''\n    return #str > 1 and num > 10 and tonumber(str:sub(1,\
    \ 1)) % 2 ~= 0 and tonumber(str:sub(#str, #str)) % 2 ~= 0\n  end\n  local count\
    \ = 0\n  for i = 1, #nums do\n    if isMoreThan10AndOdd(nums[i]) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- your code here\n  --\
    \ Write your code below:\n  local count = 0\n  for i = 1, #nums do\n    local\
    \ lastDigit = nums[i] % 10\n    local ten = 10\n    local firstDigit = 0\n   \
    \ if nums[i] < 0 then \n      ten = 11\n    end\n    while nums[i] > 0 do\n  \
    \    if nums[i] / ten == 0 then\n        break\n      end\n      firstDigit =\
    \ nums[i] / ten\n      nums[i] = nums[i] / ten\n    end\n    if (nums[i] >= 10)\
    \ and (math.floor(firstDigit) % 2 == 1) and (lastDigit % 2 == 1) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcu7h_96.lua:36:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppcu7h_96.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, n in ipairs(nums) do\n    if n > 10 and (n % 2 == 1) and (n % 10 == 1 or\
    \ n % 10 == 3 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9i7qay7.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpk9i7qay7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local res = 0\n    for\
    \ _, num in ipairs(nums) do\n        local str = tostring(num)\n        if #str\
    \ > 1 and str:match(\"^[1-9]%d*[13579]$\") then\n            res = res + 1\n \
    \       end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21npg86o.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp21npg86o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus0ex8ik.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpus0ex8ik.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, v in ipairs(nums) do\n    local first = math.abs(v)\n    local last = v %\
    \ 10\n    if first > 10 and (first % 2 == 1 and last % 2 == 1) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirqpmot8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpirqpmot8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 and math.fmod(num, 2) ~=\
    \ 0 then\n            local firstDigit = math.floor(num/10)\n            local\
    \ lastDigit = math.fmod(num, 10)\n            if math.fmod(firstDigit, 2) ~= 0\
    \ and math.fmod(lastDigit, 2) ~= 0 then\n                count = count + 1\n \
    \           end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo5ap_qt.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyo5ap_qt.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        local num_str = tostring(num)\n    \
    \    local first_num = tonumber(string.sub(num_str, 1, 1))\n        local last_num\
    \ = tonumber(string.sub(num_str, -1))\n        if num > 10 and first_num % 2 ~=\
    \ 0 and last_num % 2 ~= 0 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    --[[\n    local ln =\
    \ 0\n    for _, num in ipairs(nums) do\n        local str = tostring(num)\n  \
    \      if tonumber(str:sub(1, 1)) % 2 ~= 0 and tonumber(str:sub(-1)) % 2 ~= 0\
    \ and num > 10 then\n            ln = ln + 1\n        end\n    end\n    --]]\n\
    \    local ln = 0\n    for _, num in ipairs(nums) do\n        local first = num\
    \ // 100\n        local last = num % 10\n        if first % 2 ~= 0 and last %\
    \ 2 ~= 0 and num > 10 then\n            ln = ln + 1\n        end\n    end\n  \
    \  return ln\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqycbdxo.lua:32:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphqycbdxo.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, v in ipairs(nums) do\n    if v > 10 and isFirstLastOdd(v) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgr37u_of.lua:10:\
    \ attempt to call a nil value (global 'isFirstLastOdd')\nstack traceback:\n\t\
    /tmp/tmpgr37u_of.lua:10: in local 'candidate'\n\t/tmp/tmpgr37u_of.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- YOUR CODE HERE\n  local\
    \ sum=0\n  for i=1,#nums do\n    local num=math.abs(nums[i])\n    if num>10 and\
    \ num%2~=0 and num%10~=0 then\n      sum=sum+1\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi41no3j2.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpi41no3j2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    return 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebuz_kbh.lua:15:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpebuz_kbh.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and nums[i]\
    \ % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyhjadbp.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpxyhjadbp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    return #nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9utqcpa.lua:14:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpr9utqcpa.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local ct = 0\n  for i\
    \ = 1, #nums do\n    local n = nums[i]\n    if n > 10 and n % 2 == 1 and math.floor(n\
    \ / 10) % 2 == 1 then\n      ct = ct + 1\n    end\n  end\n  return ct\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7601ng5.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpx7601ng5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and math.fmod(nums[i], 2) == 1 and math.fmod(nums[i]\
    \ / 10, 2) == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4gq411a.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpf4gq411a.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahd01skj.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpahd01skj.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i = 1, #nums do\n\t\tlocal number = nums[i]\n\t\tlocal lastDigit = math.floor(number%10)\n\
    \t\tlocal firstDigit = math.floor(number/math.pow(10, math.floor(math.log10(number))))\n\
    \t\t\n\t\tif math.floor(number/10) ~= 0 then\n\t\t\tif math.abs(number) > 10 and\
    \ firstDigit%2 ~= 0 and lastDigit%2 ~= 0 then\n\t\t\t\tcount = count + 1\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv739n85i.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv739n85i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- write your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawjmk336.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpawjmk336.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local function isFiltered(num)\n\
    \      return num > 10 and (num % 2 == 1) and (math.floor(num / 10) % 2 == 1)\n\
    \   end\n   local result = 0\n   for _, num in ipairs(nums) do\n      if isFiltered(num)\
    \ then\n         result = result + 1\n      end\n   end\n   return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplw8og7h2.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplw8og7h2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local greater10andOddFandL\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n            local\
    \ firstDigit = string.sub(tostring(nums[i]), 1, 1)\n            local lastDigit\
    \ = string.sub(tostring(nums[i]), 2, 2)\n            if firstDigit % 2 ~= 0 and\
    \ lastDigit % 2 ~= 0 then\n                greater10andOddFandL = greater10andOddFandL\
    \ + 1\n            end\n        end\n    end\n    return greater10andOddFandL\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7axw3_t.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn7axw3_t.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local counter = 0\n  for\
    \ i,v in ipairs(nums) do\n    if v > 10 and math.abs(v) % 10 % 2 == 1 and math.abs(v)\
    \ % 10 % 2 == 1 then\n      counter = counter + 1\n    end\n  end\n  return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbicqzm1.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpzbicqzm1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- YOUR CODE HERE\n  local\
    \ count = 0\n  for _, v in ipairs(nums) do\n    if v > 10 and math.abs(v) % 10\
    \ % 2 ~= 0 and math.floor(math.abs(v) / 10) % 2 ~= 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9a194je1.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9a194je1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal function firstDigit(num)\n\
    \t\treturn math.floor(math.abs(num) / 10)\n\tend\n\tlocal function lastDigit(num)\n\
    \t\treturn math.abs(num) % 10\n\tend\n\t\n\tlocal count = 0\n\tfor _, v in ipairs(nums)\
    \ do\n\t\tif v > 10 and firstDigit(v) % 2 ~= 0 and lastDigit(v) % 2 ~= 0 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7s4bnl7.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj7s4bnl7.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    return 0 -- TODO\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92_fruls.lua:15:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp92_fruls.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- write your code here\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nysgffn.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3nysgffn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd59o4ex.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpdd59o4ex.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and num % 2 == 1 and\
    \ num < 10 then\n      count = count + 1\n    elseif num > 10 and num % 2 == 1\
    \ and num > 10 then\n      local lastDigit = num % 10\n      while num > 0 do\n\
    \        if num < 10 then\n          if num % 2 == 1 and lastDigit % 2 == 1 then\n\
    \            count = count + 1\n          end\n          break\n        end\n\
    \        num = num / 10\n      end\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrx527mf.lua:33:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmrx527mf.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and lastDigit(nums[i]) % 2 ~= 0 and firstDigit(nums[i])\
    \ % 2 ~= 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4j6y3jwc.lua:10:\
    \ attempt to call a nil value (global 'lastDigit')\nstack traceback:\n\t/tmp/tmp4j6y3jwc.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp4j6y3jwc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and isOdd(num)\
    \ and isOdd(num % 10) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4rseu2f.lua:11:\
    \ attempt to call a nil value (global 'isOdd')\nstack traceback:\n\t/tmp/tmpk4rseu2f.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk4rseu2f.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, n in ipairs(nums) do\n        local first = n % 10\n        local last\
    \ = n\n        while last >= 10 do\n            last = last / 10\n        end\n\
    \        last = math.floor(last)\n        if first > 0 and first % 2 ~= 0 and\
    \ last > 0 and last % 2 ~= 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cv3ztxk.lua:26:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp6cv3ztxk.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, v in ipairs(nums) do\n        if v > 10 and isOdd(v % 10) and isOdd(math.floor(v\
    \ / math.pow(10, #tostring(v) - 1))) then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg98fhbpz.lua:10:\
    \ attempt to call a nil value (global 'isOdd')\nstack traceback:\n\t/tmp/tmpg98fhbpz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpg98fhbpz.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, n in ipairs(nums) do\n        if n > 10 and math.abs(n) % 10 % 2 ~=\
    \ 0 and math.abs(n) % 10 ~= 5 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj33p9rak.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpj33p9rak.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, value in ipairs(nums) do\n        if math.abs(value) > 10 and value\
    \ % 2 ~= 0 and math.abs(value) % 10 % 2 ~= 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbk87rl3s.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbk87rl3s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  local\
    \ index = 1\n  while index <= #nums do\n    local num = nums[index]\n    if num\
    \ > 10 and num % 2 == 1 and\n        num % 10 % 2 == 1 and num / 100 % 2 == 1\
    \ then\n      count = count + 1\n    end\n    index = index + 1\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiroli8y.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpgiroli8y.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, num in ipairs(nums) do\n\t\tlocal first_digit = num % 10\n\t\tlocal last_digit\
    \ = num % 2\n\t\tif first_digit ~= 0 and last_digit ~= 0 and num > 10 then\n\t\
    \t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp616s6c2.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpp616s6c2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- You need to write\
    \ this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpc6n4hm.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmprpc6n4hm.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and\
    \ num % 2 == 1 and floor(num / 10) % 2 == 1 then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpekhgmlx1.lua:11:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpekhgmlx1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpekhgmlx1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i = 1, #nums do\n\t\tlocal number = nums[i]\n\t\tif number > 10 and number %\
    \ 2 == 1 and math.floor(number / 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\
    \tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vwhe8jg.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8vwhe8jg.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- YOUR CODE HERE\n\
    \    local count = 0\n    for i,v in ipairs(nums) do\n        if(v > 10 and v\
    \ ~= 0) then\n            local mod = v % 10\n            if(mod == 1 or mod ==\
    \ 3 or mod == 5 or mod == 7 or mod == 9) then\n                v = v // 10\n \
    \               mod = v % 10\n                if(mod == 1 or mod == 3 or mod ==\
    \ 5 or mod == 7 or mod == 9) then\n                    count = count + 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvnyqie2.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptvnyqie2.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and math.floor(nums[i]\
    \ / 10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwf8anpog.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwf8anpog.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- insert your code\
    \ here\n    local count = 0\n    for i, n in ipairs(nums) do\n        if n > 10\
    \ and\n        (n % 10) % 2 ~= 0 and\n        (n // 100) % 2 ~= 0 then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt530m38t.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpt530m38t.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp6tp4z66.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, v in ipairs(nums) do\n\t\tif v > 10 and (v % 2 == 1) and (math.floor(v /\
    \ 10) % 2 == 1) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphixl8lxp.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphixl8lxp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2mhg2ak.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpq2mhg2ak.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and math.fmod(num,\
    \ 2) == 1 and\n           math.fmod(math.abs(num), 10) == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygpnuk11.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpygpnuk11.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _,num in ipairs(nums) do\n    local firstDigit = num % 10\n    local lastDigit\
    \ = math.floor(num / 10) % 10\n    if num > 10 and firstDigit % 2 == 1 and lastDigit\
    \ % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5puupx7t.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5puupx7t.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and (num\
    \ % 2 == 1) and (string.sub(tostring(num), 1, 1) % 2 == 1) and (string.sub(tostring(num),\
    \ #tostring(num), #tostring(num)) % 2 == 1) then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        if nums[i] > 10 and (nums[i]%2 == 1 or math.floor(nums[i]/10)%2\
    \ == 1) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfloxwo8.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxfloxwo8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for i = 1, #nums do\n        local temp = nums[i]\n        if temp > 10 and\
    \ temp % 2 ~= 0 and temp % 10 ~= 0 then\n            local temp2 = 0\n       \
    \     while temp > 10 do\n                temp = temp / 10\n                temp2\
    \ = temp\n            end\n            if temp2 % 2 ~= 0 then\n              \
    \  counter = counter + 1\n            end\n        end\n    end\n    return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpke3dar12.lua:30:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpke3dar12.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- TODO: Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphohlmaqf.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmphohlmaqf.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, v in ipairs(nums) do\n        if v >= 10 and math.abs(v) % 10 % 2 ==\
    \ 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodom6ojw.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpodom6ojw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local counter = 0\n\
    \    for i = 1, #nums do\n        local str = tostring(nums[i])\n        if #str\
    \ > 1 and tonumber(str:sub(1, 1)) % 2 ~= 0 and tonumber(str:sub(-1)) % 2 ~= 0\
    \ and nums[i] > 10 then\n            counter = counter + 1\n        end\n    end\n\
    \    return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuxempeps.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpuxempeps.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpuxempeps.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, num in ipairs(nums) do\n\t\tif num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_esy3wt.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpr_esy3wt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n   local counter = 0\n \
    \  for i, v in ipairs(nums) do\n      local first_digit = math.floor(v / 10)\n\
    \      local last_digit = v % 10\n      if v > 10 and (first_digit % 2 == 1 or\
    \ last_digit % 2 == 1) then\n         counter = counter + 1\n      end\n   end\n\
    \   return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvasrzz2l.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvasrzz2l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ _, num in ipairs(nums) do\n    if (num > 10) and (num % 2 == 1) and (math.floor(num\
    \ / 10) % 2 == 1) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7u_4_kpa.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7u_4_kpa.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal counter = 0\n\t\
    for i,v in ipairs(nums) do\n\t\tif v > 10 and v%2 ~= 0 and math.floor(v/10)%2\
    \ ~= 0 and v%10%2 ~= 0 then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23hmkred.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp23hmkred.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local c = nums[i]\n        local fd = math.floor(c\
    \ / 10) % 10\n        local ld = c % 10\n        if c > 10 and (fd % 2 ~= 0 and\
    \ ld % 2 ~= 0) then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp697sbia5.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp697sbia5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        if num >= 10 and\
    \ string.sub(tostring(num), 1, 1) % 2 ~= 0 \n            and string.sub(tostring(num),\
    \ -1) % 2 ~= 0 then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, v in ipairs(nums) do\n    local d1 = v%10\n    local d2 = math.floor(v/10)%10\n\
    \    if v > 10 and d1%2==1 and d2%2==1 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn23q1eh.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphn23q1eh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmnog2qko.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- code goes here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0cpge68.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmps0cpge68.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tlocal\
    \ nums = nums\n\tfor key, val in pairs(nums) do\n\t\tif val > 10 and string.sub(val,1,1)\
    \ % 2 == 1 and string.sub(val, -1) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local n = 0\n    for\
    \ i = 1, #nums do\n        local x = nums[i]\n        if (x > 10) and (x // 10\
    \ % 2 == 1) and (x % 2 == 1) then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvoq1u_9k.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvoq1u_9k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal cnt = 0\n\tfor i,\
    \ v in ipairs(nums) do\n\t\tif v >= 10 and v % 2 == 1 and (math.floor(v / 10)\
    \ % 2 == 1 or v % 10 % 2 == 1) then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn\
    \ cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkgkifmd.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpwkgkifmd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal a=0\n\tfor k,v in\
    \ pairs(nums) do\n\t\tif ((v>10) and (math.floor(v/10)%2~=0) and (v%2~=0)) then\n\
    \t\t\ta=a+1\n\t\tend\n\tend\n\treturn a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaynay3n5.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaynay3n5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 then\n            local\
    \ firstDigit = num % 10\n            local lastDigit = num // 10 % 10\n      \
    \      if firstDigit % 2 == 1 and lastDigit % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzffnksr3.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzffnksr3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\t-- your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeia5zf1c.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpeia5zf1c.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _,num in ipairs(nums) do\n        local numString = tostring(num)\n   \
    \     local firstDigit = tonumber(numString:sub(1,1))\n        local lastDigit\
    \ = tonumber(numString:sub(-1))\n        if firstDigit % 2 ~= 0 and lastDigit\
    \ % 2 ~= 0 and num > 10 then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni5cahzr.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'firstDigit')\nstack traceback:\n\
    \t/tmp/tmpni5cahzr.lua:13: in local 'candidate'\n\t/tmp/tmpni5cahzr.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local num = 0\n    for\
    \ _, n in ipairs(nums) do\n        if n > 10 and n % 2 == 1 and n // 10 % 2 ==\
    \ 1 then\n            num = num + 1\n        end\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8j_3_0p.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpr8j_3_0p.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, v in ipairs(nums) do\n    if v > 10 and (v % 2 ~= 0) and ((v % 10) % 2 ~=\
    \ 0) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjlaiqet.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpcjlaiqet.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83vqxc3w.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp83vqxc3w.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- Code goes here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_dnlxhw.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpa_dnlxhw.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local cnt = 0\n    for\
    \ i = 1, #nums do\n        local num = nums[i]\n        if num >= 10 and (num\
    \ % 2 == 1) and (num // 10 % 2 == 1) then\n            cnt = cnt + 1\n       \
    \ end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87e5alb0.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp87e5alb0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- write your code here\n\
    \    local sum = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and v %\
    \ 2 == 1 and math.abs(v) % 10 % 2 == 1 then\n            sum = sum + 1\n     \
    \   end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlcmot19.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpvlcmot19.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal res = 0\n\tfor _,\
    \ v in ipairs(nums) do\n\t\tif (v > 10) and ((v % 2 == 1) and (v % 10 == 1 or\
    \ v % 10 == 3 or v % 10 == 5 or v % 10 == 7 or v % 10 == 9)) then\n\t\t\tres =\
    \ res + 1\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_c9plgm.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpj_c9plgm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\t-- write your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc7u7pit.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpbc7u7pit.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nmrupki.lua:13:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp6nmrupki.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- @TODO: Implement this\
    \ function\n  local num = 0\n  for i, v in ipairs(nums) do\n    if v > 10 and\
    \ math.abs(v) % 10 % 2 ~= 0 and math.abs(v) % 10 ~= math.abs(v) % 10 ^ 10 % 10\
    \ then\n      num = num + 1\n    end\n  end\n  return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhtkky6z.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkhtkky6z.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        local str = tostring(num)\n        if\
    \ num > 10 and (#str > 1) and (str:sub(1, 1) % 2 ~= 0) and (str:sub(-1) % 2 ~=\
    \ 0) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nprint(specialFilter({15, -73, 14, -15}))\nprint(specialFilter({33, -2, -3,\
    \ 45, 21, 109}))\nprint(\"---------------------------------------\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "1\n2\n---------------------------------------\n.\nRan 1 tests in 0.000\
    \ seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  local\
    \ function first_and_last_odd(n)\n    local first, last = string.sub(n, 1, 1),\
    \ string.sub(n, #n, #n)\n    return tonumber(first) % 2 ~= 0 and tonumber(last)\
    \ % 2 ~= 0\n  end\n  for _, v in ipairs(nums) do\n    if v > 10 and first_and_last_odd(v)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp656oyds8.lua:10:\
    \ attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmp656oyds8.lua:10:\
    \ in local 'first_and_last_odd'\n\t/tmp/tmp656oyds8.lua:14: in local 'candidate'\n\
    \t/tmp/tmp656oyds8.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i,v in ipairs(nums) do\n    if ((v > 10) and (v % 2 ~= 0) and (string.len(v)\
    \ > 1) and (math.floor(v / 10) % 2 ~= 0)) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy2m1e4j.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyy2m1e4j.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local num = 0\n    for\
    \ i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[1] %\
    \ 2 == 1 and nums[#nums[i]] % 2 == 1 then\n            num = num + 1\n       \
    \ end\n    end\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjty1d0kx.lua:10:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpjty1d0kx.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjty1d0kx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local numsFiltered =\
    \ 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num > 10\
    \ and isOdd(math.floor(num / 10)) and isOdd(num % 10) then\n            numsFiltered\
    \ = numsFiltered + 1\n        end\n    end\n    return numsFiltered\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7_pulhg.lua:11:\
    \ attempt to call a nil value (global 'isOdd')\nstack traceback:\n\t/tmp/tmpa7_pulhg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpa7_pulhg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, num in ipairs(nums) do\n\t\tif num > 10 and math.abs(num) % 10 % 2 == 1 and\
    \ num // 10 % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypwqsw5k.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpypwqsw5k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    -- your code here\n\
    \    local cnt = 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n  \
    \          -- \u4E24\u4F4D\u6570\n            if nums[i] >= 10 and nums[i] < 100\
    \ then\n                if nums[i] % 2 == 1 then\n                    cnt = cnt\
    \ + 1\n                end\n            else\n                -- \u5148\u7B97\u51FA\
    \u6570\u5B57\u7684\u957F\u5EA6\n                local length = 1\n           \
    \     local v = nums[i]\n                while v >= 10 do\n                  \
    \  v = v / 10\n                    length = length + 1\n                end\n\
    \                local first = 0\n                local last = 0\n           \
    \     if length % 2 == 1 then\n                    local start = math.floor(length\
    \ / 2)\n                    first = math.floor(nums[i] / (10 ^ start)) % 10\n\
    \                    last = nums[i] % 10\n                else\n             \
    \       local start = math.floor(length / 2)\n                    first = math.floor(nums[i]\
    \ / (10 ^ start)) % 10\n                    last = math.floor(nums[i] / (10 ^\
    \ (start - 1))) % 10\n                end\n                if first % 2 == 1 and\
    \ last % 2 == 1 then\n                    cnt = cnt + 1\n                end\n\
    \            end\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnpu3ysq.lua:50:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmppnpu3ysq.lua:50: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp002ml9iw.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if (num > 10) and (num % 2 == 1) and\
    \ (math.floor(num/10) % 2 == 1) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmbyq5d9.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmmbyq5d9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal c = 0\n\tfor i,v\
    \ in ipairs(nums) do\n\t\tlocal mod = v\n\t\tlocal f = v\n\t\twhile f > 0 do\n\
    \t\t\tf = math.floor(f / 10)\n\t\t\tmod = mod % 10\n\t\tend\n\t\tif mod % 2 ~=\
    \ 0 and v > 10 then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffuqcpm7.lua:28:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpffuqcpm7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg40ul70e.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local cnt = 0\n  for i\
    \ = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num) %\
    \ 2 == 1 and math.abs(num) % 10 % 2 == 1 then\n      cnt = cnt + 1\n    end\n\
    \  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyawmvxtm.lua:23:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpyawmvxtm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  -- your code here\n  local\
    \ counter = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      local last_digit\
    \ = nums[i] % 10\n      local first_digit = nums[i]\n      while first_digit >\
    \ 10 do\n        first_digit = first_digit / 10\n      end\n      if last_digit\
    \ % 2 == 1 and first_digit % 2 == 1 then\n        counter = counter + 1\n    \
    \  end\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz3gainc.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpyz3gainc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local function first_last_odd(num)\n\
    \        if num < 10 or num > 100 then\n            return false\n        end\n\
    \        local first = num % 10\n        local last = num // 10\n        return\
    \ first % 2 == 1 and last % 2 == 1\n    end\n    local function greater_than_10(num)\n\
    \        return num > 10\n    end\n    local function my_filter(nums, predicate)\n\
    \        local filtered = {}\n        for i, num in ipairs(nums) do\n        \
    \    if predicate(num) then\n                table.insert(filtered, num)\n   \
    \         end\n        end\n        return filtered\n    end\n    local greater_than_10_odd\
    \ = my_filter(nums, first_last_odd)\n    local odd_greater_than_10 = my_filter(greater_than_10_odd,\
    \ greater_than_10)\n    return #odd_greater_than_10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb79geoy7.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb79geoy7.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local res = 0\n  for i\
    \ = 1, #nums do\n    local num = nums[i]\n    if num >= 10 and num % 2 == 1 and\
    \ num // 10 % 2 == 1 then\n      res = res + 1\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan5ypyc3.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpan5ypyc3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ i = 1, #nums do\n\t\tlocal n = nums[i]\n\t\tif math.abs(n) > 10 and math.abs(n)\
    \ % 2 == 1 and \n\t\t\tn % 10 % 2 == 1 and n // 10 % 2 == 1 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayk11or7.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpayk11or7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and num % 2 == 1 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2xb5kiu.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpq2xb5kiu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tif #nums == 0 then return\
    \ 0 end\n\tlocal cnt = 0\n\tfor i,v in ipairs(nums) do\n\t\tif v > 10 and math.floor(v/10)%2\
    \ == 1 and v%2 == 1 then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggcq9n0y.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpggcq9n0y.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local count = 0\n  \
    \  for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10 % 2 ==\
    \ 1 and v % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd7lqrl2.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpdd7lqrl2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local res = 0\n  for i,\
    \ v in ipairs(nums) do\n    if v > 10 and (v % 2 == 1 and v // 10 % 2 == 1) then\n\
    \      res = res + 1\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64ap7q5k.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp64ap7q5k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local result = 0\n  for\
    \ _, num in ipairs(nums) do\n    if num >= 10 and math.fmod(num, 2) == 1 and\n\
    \      math.fmod(math.floor(num / 10), 2) == 1 and\n      math.fmod(num % 10,\
    \ 2) == 1 then\n      result = result + 1\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1frk8dsn.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1frk8dsn.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    return nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59mlvls9.lua:14:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp59mlvls9.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local c = 0\n    for\
    \ _, num in ipairs(nums) do\n        if num > 10 and math.abs(num) % 10 % 2 ~=\
    \ 0 and math.abs(num) / 10 % 2 ~= 0 then\n            c = c + 1\n        end\n\
    \    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefd6gxy8.lua:22:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpefd6gxy8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n  local count = 0\n  for\
    \ i, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and (num // 10)\
    \ % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktyc6tyg.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpktyc6tyg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n\tlocal count = 0\n\tfor\
    \ _, n in ipairs(nums) do\n\t\tif n > 10 and math.fmod(n, 2) == 1 and math.fmod(math.floor(n\
    \ / 10), 2) == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5kkyqlg.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmps5kkyqlg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- specialFilter([15, -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nlocal function specialFilter(nums)\n    local res = 0\n    for\
    \ _, num in ipairs(nums) do\n        local first = num % 10\n        local last\
    \ = num\n        while last >= 10 do\n            last = last / 10\n        end\n\
    \        if num > 10 and first % 2 == 1 and last % 2 == 1 then\n            res\
    \ = res + 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn72e_7tt.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpn72e_7tt.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
