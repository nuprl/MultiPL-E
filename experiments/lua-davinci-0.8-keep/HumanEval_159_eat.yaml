name: HumanEval_159_eat
language: lua
prompt: "-- You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
  -- you should return an array of [ total number of eaten carrots after your meals,\n\
  -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
  -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
  \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
  -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
  \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of remaining\
  \ carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n-- * 0 <=\
  \ need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function eat(number,\
  \ need, remaining)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
  \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
  \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
  \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
  \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return {\n    number + math.min(need, remaining),\n    math.max(remaining\
    \ - need, 0)\n  }\nend", "  -- your code goes here\n  local r\n  if remaining\
    \ > need - number then r = {need, remaining - (need - number)} else r = {remaining\
    \ + number, 0} end\n  return r\nend", "  if number + need <= remaining then\n\
    \    return { number + need, remaining - number - need }\n  else\n    return {\
    \ number + remaining, 0 }\n  end\nend", "    if number >= need then\n        return\
    \ need\n    elseif remaining >= need then\n        return number + need\n    else\n\
    \        return number + remaining\n    end\nend", "    local result = {0, 0}\n\
    \    if number + need <= remaining then\n        result[1] = number + need\n \
    \       result[2] = remaining - (number + need)\n    else\n        result[1] =\
    \ number + remaining\n        result[2] = 0\n    end\n    return result\nend",
  "  local total = number + need\n  if total <= remaining then\n    return { total,\
    \ remaining - total }\n  else\n    return { remaining + number, 0 }\n  end\nend",
  "  -- your code goes here\n  local totalCarrots= number + need\n  local carrotsLeft\
    \ = remaining - totalCarrots\n  if carrotsLeft > 0 then\n    return {totalCarrots,\
    \ carrotsLeft}\n  else\n    if carrotsLeft < 0 then\n      return {totalCarrots,\
    \ 0}\n    else\n      return {totalCarrots, remaining}\n    end\n  end\nend\n\
    print(eat(5, 6, 10))", "  local e = number + need\n  local r = (remaining >= e)\
    \ and (remaining - e) or 0\n  return {e, r}\nend", "    return {number + (need\
    \ <= remaining and need or remaining), remaining - (need <= remaining and need\
    \ or remaining)}\nend", "    local need = need - number\n    local hasCarrots\
    \ = remaining - need\n    if hasCarrots < 0 then\n        hasCarrots = 0\n   \
    \ end\n    return {number + need, hasCarrots}\nend", "    local meals = math.ceil(need\
    \ - number)\n    local left = remaining - meals\n    if left >= 0 then\n     \
    \   return {number + meals, left}\n    else\n        return {number + remaining,\
    \ 0}\n    end\nend", "    return {number + math.min(need, remaining), math.max(remaining\
    \ - need, 0)}\nend", "  if (number + need) > remaining then\n    return {number\
    \ = number + remaining, remaining = 0}\n  else\n    return {number = number +\
    \ need, remaining = remaining - (number + need)}\n  end\nend", "    if need >\
    \ remaining then\n        return number + remaining, 0\n    else\n        return\
    \ number + need, remaining - need\n    end\nend", "  return (number + need <=\
    \ remaining) and {number + need, remaining - need} or {remaining + number, 0}\n\
    end", "  local total = number + remaining\n  local left = total - need\n  return\
    \ {\n    need > total and total or need,\n    need <= total and left or 0\n  }\n\
    end", "  -- YOUR CODE\nend", "  -- Good luck!\n  if number >= need then\n    return\
    \ {need, remaining}\n  else\n    if remaining + number < need then\n      return\
    \ {remaining + number, 0}\n    else\n      return {need, remaining + number -\
    \ need}\n    end\n  end\nend", "  local to_eat = need - number\n  if to_eat <=\
    \ remaining then\n    return { need, remaining - to_eat }\n  else\n    return\
    \ { number + remaining, 0 }\n  end\nend", "    local total = number + need\n \
    \   local result = {}\n    if remaining >= need then\n        result[1] = total\n\
    \        result[2] = remaining - need\n    else\n        result[1] = total + remaining\n\
    \        result[2] = 0\n    end\n    return result\nend", "  return {number +\
    \ need, remaining - need < 0 and 0 or remaining - need}\nend", "  return {number\
    \ + math.min(need, remaining), math.max(remaining - need, 0)}\nend", "  -- TODO:\
    \ Your code here\n  -- Return an array of carrot count\nend", "  return {number\
    \ + math.min(need, remaining), math.max(remaining - need, 0)}\nend", "  -- Your\
    \ code here\nend", '  local carrots = remaining - number', "  return {number +\
    \ math.min(need, remaining), math.max(remaining - need, 0)}\nend", "  -- your\
    \ code\nend", "    -- Input your code here!\n    return {number+need, remaining-need}\n\
    end", "    local carrots = number + remaining\n    return carrots >= need and\
    \ {need, carrots - need} or {carrots, 0}\nend", "  local total = number + need\n\
    \  if total <= remaining then\n    return { total, remaining - total }\n  else\n\
    \    return { total - remaining, 0 }\n  end\nend", "  if number > remaining then\n\
    \    return {number - remaining, 0}\n  elseif need > remaining then\n    return\
    \ {number + remaining, 0}\n  else\n    return {number + need, remaining - need}\n\
    \  end\nend", "  -- your code here\n  return need - number > remaining and {number\
    \ + remaining, 0} or {number + need, remaining - need}\nend", "    -- your code\
    \ here\n    if remaining < number + need then\n        return {remaining, 0}\n\
    \    else\n        return {number + need, remaining - number - need}\n    end\n\
    end", "    local eaten = number + need\n    local left\n    if eaten > remaining\
    \ then\n        left = 0\n    else\n        left = remaining - eaten\n    end\n\
    \    return {eaten, left}\nend", "  -- Your code here\n  -- return the calculated\
    \ result with two integers in an array.\n  local eaten = 0\n  if number >= need\
    \ then\n    eaten = number\n  else\n    if need - number <= remaining then\n \
    \     eaten = number + need - number\n    else\n      eaten = number + remaining\n\
    \    end\n  end\n  return {eaten, remaining - (eaten - number)}\nend", "    return\
    \ {number + math.min(need, remaining), math.max(remaining - need, 0)}\nend", " \
    \   local eaten = number + math.min(need, remaining)\n    local left = math.max(remaining\
    \ - need, 0)\n    return {eaten, left}\nend", "    -- #TODO\nend", "    local\
    \ eaten = number + need\n    local remaining_carrots = remaining - need\n    if\
    \ eaten > remaining then\n        eaten = remaining\n        remaining_carrots\
    \ = 0\n    end\n    return {eaten, remaining_carrots}\nend", "    local eaten\
    \ = 0\n    for i = 1, need do\n        if remaining > 0 then\n            eaten\
    \ = eaten + 1\n            remaining = remaining - 1\n        end\n    end\n \
    \   return { eaten + number, remaining }\nend", "    if need >= remaining then\n\
    \        return {number + remaining, 0}\n    else\n        return {number + need,\
    \ remaining - need}\n    end\nend", "end\nreturn eat", "  local carrot_left =\
    \ remaining - (number + need)\n  if carrot_left < 0 then\n    return {number +\
    \ remaining, math.abs(carrot_left)}\n  else\n    return {number + need, carrot_left}\n\
    \  end\nend", "  -- your code here\nend", "    -- Your code here\n    local carrots\
    \ = 0\n    if remaining >= need then\n        carrots = number + need\n      \
    \  remaining = remaining - need\n    else\n        carrots = number + remaining\n\
    \        remaining = 0\n    end\n    return {carrots, remaining}\nend", "    local\
    \ total = number + need\n    local carrots = remaining - total\n    if carrots\
    \ < 0 then\n        return {total, 0}\n    else\n        return {total, carrots}\n\
    \    end\nend", "  -- your code here\n  if number + need > remaining then\n  \
    \  return {remaining, 0}\n  else\n    return {number + need, remaining - (number\
    \ + need)}\n  end\nend", "  local result = {}\n  local carrotsEaten = need + number\n\
    \  if carrotsEaten > remaining then\n    result[1] = remaining\n    result[2]\
    \ = 0\n  else\n    result[1] = carrotsEaten\n    result[2] = remaining - carrotsEaten\n\
    \  end\n  return result\nend", "  -- your code here :)\n  -- You need to eat \"\
    need\" carrots. If you don't have enough, you'll eat\n  -- all the remaining carrots.\n\
    \  if remaining > need then\n    return number + need, remaining - need\n  else\n\
    \    return number + remaining, 0\n  end\nend", "\treturn {math.min(number + remaining,\
    \ number + need), math.max(remaining - (need - number), 0)}\nend", "  if number\
    \ == nil or need == nil or remaining == nil then\n    return nil\n  end\n  if\
    \ type(number) ~= \"number\" or type(need) ~= \"number\" or type(remaining) ~=\
    \ \"number\" then\n    return nil\n  end\n  if number < 0 or number > 1000 or\
    \ need < 0 or need > 1000 or remaining < 0 or remaining > 1000 then\n    return\
    \ nil\n  end\n  local total = 0\n  if number + remaining >= need then\n    total\
    \ = need\n  else\n    total = number + remaining\n  end\n  local result = { total,\
    \ remaining - total + number }\n  return result\nend", "    local num = number\n\
    \    local need = need\n    local rem = remaining\n    if rem < (need - num) then\n\
    \        num = num + rem\n        rem = 0\n    else\n        num = num + need\n\
    \        rem = rem - (need - num)\n    end\n    return {num, rem}\nend\nreturn\
    \ eat", "    if remaining < need - number then\n        return remaining + number,\
    \ 0\n    else\n        return need, remaining - (need - number)\n    end\nend",
  "  local total = number + remaining\n  local left = total - need\n  return total\
    \ < need and { total, 0 } or { need, left }\nend", "  -- Write your code here\n\
    \  return {number + need, math.max(remaining - need, 0)}\nend", "  local eaten\
    \ = number + remaining\n  if eaten >= need then\n    return {need, eaten - need}\n\
    \  else\n    return {eaten, 0}\n  end\nend", "    return { math.min(number + remaining,\
    \ number + need), math.max(0, number + remaining - (number + need)) }\nend", " \
    \   return { number + math.min(need, remaining), math.max(remaining - need, 0)\
    \ }\nend", "  return { math.min(number + remaining, number + need), math.max(remaining\
    \ - (need - number), 0) }\nend", "    local carrots = number + remaining\n   \
    \ return carrots >= need and {need, carrots - need} or {carrots, 0}\nend", " \
    \ local res = {}\n  if (number + need) > remaining then\n    res[1] = remaining\n\
    \    res[2] = 0\n  else\n    res[1] = number + need\n    res[2] = remaining -\
    \ (number + need)\n  end\n  return res\nend\nreturn eat", '  local eaten = number
    + need', "    local totalCarrotsEaten = number + need\n    local remainingCarrots\
    \ = 0\n    if remaining < need then\n        totalCarrotsEaten = totalCarrotsEaten\
    \ + remaining\n        remainingCarrots = 0\n    else\n        remainingCarrots\
    \ = remaining - need\n    end\n    return {totalCarrotsEaten, remainingCarrots}\n\
    end", "    --your code here\n    if (number + need) > remaining then\n       \
    \ return {remaining, 0}\n    else\n        return {number + need, remaining -\
    \ (number + need)}\n    end\nend", "  -- your code here\nend", "  if remaining\
    \ >= need then\n    return {number + need, remaining - need}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend", "    local all = number + remaining\n\
    \    if all < need then\n        return {all, 0}\n    else\n        return {need,\
    \ all - need}\n    end\nend", "  -- Your code here\nend", "    local eaten = number\
    \ + math.min(need, remaining)\n    return {eaten, math.max(0, remaining - need)}\n\
    end", "  local sum = number + need\n  if remaining > need then\n    return {sum,\
    \ remaining - need}\n  else\n    return {sum, 0}\n  end\nend", "    if number\
    \ + need > remaining then\n        return { number + remaining, 0 }\n    else\n\
    \        return { number + need, remaining - (number + need) }\n    end\nend",
  "end\nreturn eat", "  return {number + math.min(need, remaining), math.max(remaining\
    \ - need, 0)}\nend", "    -- Your code here\nend", "    local eaten = number\n\
    \    if need < remaining then\n        eaten = number + need\n        remaining\
    \ = remaining - need\n    else\n        eaten = number + remaining\n        remaining\
    \ = 0\n    end\n    return {eaten, remaining}\nend", "    local result = {number\
    \ + need, remaining - need}\n    if result[2] < 0 then\n        result[1] = result[1]\
    \ + result[2]\n        result[2] = 0\n    end\n    return result\nend", "    --\
    \ your code here\n    return {}\nend", "  return { number + math.min(need, remaining),\
    \ math.max(remaining - need, 0) }\nend", "  local result = {}\n  if need >= remaining\
    \ then\n    result[1] = number + remaining\n    result[2] = 0\n  else\n    result[1]\
    \ = number + need\n    result[2] = remaining - need\n  end\n  return result\n\
    end", "  local meals = number + need\n  local result = {}\n  result[1] = meals",
  "  -- TODO: You need to implement this function!\n  -- Hint: you need to add some\
    \ code here :)\nend", "    -- Your code here\nend", "  if remaining + number >=\
    \ need then\n    return {need, remaining + number - need}\n  else\n    return\
    \ {remaining + number, 0}\n  end\nend", end, "  return remaining >= need and {number\
    \ + need, remaining - need} or {number + remaining, 0}\nend", "\tlocal allCarrots=\
    \ number + remaining\n\tif allCarrots < need then\n\t\treturn {allCarrots, 0}\n\
    \telse\n\t\treturn {need + number, allCarrots - need}\n\tend\nend", "    if number\
    \ < 0 or need < 0 or remaining < 0 then\n        return nil\n    end\n    local\
    \ n = number + need\n    local result = n - remaining\n    if n >= remaining then\n\
    \        return { n, 0 }\n    else\n        return { n, remaining - n }\n    end\n\
    end", "  return {number + need > remaining and remaining or number + need, remaining\
    \ - need < 0 and 0 or remaining - need}\nend", '  local totalNumber = number +
    need', "    if remaining >= need then\n        return number + need, remaining\
    \ - need\n    else\n        return number + remaining, 0\n    end\nend", "   \
    \ --your code here\nend", "\nend", "  -- Write your code here\n  --[[\n  if remaining\
    \ < need then\n    return number + remaining, 0\n  else\n    return number + need,\
    \ remaining - need\n  end\n  --]]\n  return number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)\nend", "  local a = number + need\n  local b =\
    \ a - remaining\n  if b < 0 then\n    return {a, 0}\n  else\n    return {a, b}\n\
    \  end\nend", "  -- Your code here\n  return {}\nend", "  local total = number\
    \ + remaining\n  if need >= total then\n    return {total, 0}\n  else\n    return\
    \ {need, total - need}\n  end\nend", "  -- your code here\n  local totalEaten\
    \ = need + number;\n  local left = remaining - need;\n  if (left < 0) then\n \
    \   totalEaten = remaining + number;\n    left = 0;\n  end\n  return {totalEaten,\
    \ left};\nend", "  -- your code is here\nend", "  -- your code here\n  return\n\
    end", "  local total_carrots = number + remaining\n  if total_carrots >= need\
    \ then\n    return {number + need, total_carrots - need}\n  else\n    return {total_carrots,\
    \ 0}\n  end\nend", "  local e = number + need\n  if e > remaining then\n    e\
    \ = remaining\n  end\n  return {e, remaining - e}\nend", "  if number + need >\
    \ remaining then\n    return {remaining, 0}\n  else\n    return {number + need,\
    \ remaining - number - need}\n  end\nend", "  -- Your code here\n  local sum =\
    \ number + need\n  if sum < remaining then\n    return { sum, remaining - sum\
    \ }\n  else\n    return { sum, 0 }\n  end\nend", "    -- local total = number\n\
    \    -- if remaining > 0 then\n    --     if remaining >= need then\n    --  \
    \       total = total + need\n    --     else\n    --         total = total +\
    \ remaining\n    --     end\n    -- end\n    -- return {total, total - need}\n\
    \    return {number + math.min(need, remaining), math.max(remaining - need, 0)}\n\
    end", "    -- your code here\nend", "  local need_amount = need - number\n  if\
    \ need_amount <= remaining then\n    return number + need_amount, remaining -\
    \ need_amount\n  else\n    return number + remaining, 0\n  end\nend", "    if\
    \ number+need <= remaining then\n        return {number+need, remaining-number-need}\n\
    \    else\n        return {number+remaining, 0}\n    end\nend", "  -- your code\
    \ goes here...\nend", "    -- Your code here!\n    local have = number + remaining\n\
    \    if have >= need then\n        return {number+need, have-need}\n    else\n\
    \        return {have, 0}\n    end\nend", "\nend", "    -- your code here\n  \
    \  return {number + math.min(need, remaining), math.max(remaining - need, 0)}\n\
    end\nreturn eat", "\nend", "  local eaten = number\n  local left = remaining -\
    \ (need - number)\n  if left < 0 then\n    eaten = remaining + number\n    left\
    \ = 0\n  end\n  return {eaten, left}\nend", "  -- your code here\n  if remaining\
    \ < (number + need) then\n    return {number + remaining, 0}\n  else\n    return\
    \ {number + need, remaining - need}\n  end\nend", "  return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend", "\nend", '    local current_meal
    = number + need', "  -- Your code here\nend", "    -- Your code here\nend", " \
    \   if remaining < need then\n        return number + remaining, 0\n    else\n\
    \        return number + need, remaining - need\n    end\nend", "  local total\
    \ = number + remaining\n  local meal = math.min(total, number + need)\n  return\
    \ {meal, math.max(total - meal, 0)}\nend", "  local have = number\n  local diff\
    \ = remaining - have\n  if diff < need then\n    need = need - diff\n    have\
    \ = have + diff\n  else\n    have = have + need\n    need = 0\n  end\n  return\
    \ {have, need}\nend", "    local answer = {}\n    local eaten = number + need\n\
    \    local carrots = 0\n    if remaining >= eaten then\n        carrots = remaining\
    \ - eaten\n    end\n    answer[1] = eaten\n    answer[2] = carrots\n    return\
    \ answer\nend", "\tlocal meal, remain = number + need, remaining - need\n\treturn\
    \ remain > 0 and [meal, remain] or [meal, 0]\nend", "  -- Your code goes here\n\
    \  return [number+need,remaining-need]\nend", "  if number + need <= remaining\
    \ then\n    return { number + need, remaining - number - need }\n  else\n    return\
    \ { number + remaining, 0 }\n  end\nend", "  return { number + need, math.max(remaining\
    \ - need, 0) }\nend", "    local eaten = number + need\n    if eaten > remaining\
    \ then\n        return {remaining, 0}\n    else\n        return {eaten, remaining\
    \ - eaten}\n    end\nend", "    number, need, remaining = tonumber(number), tonumber(need),\
    \ tonumber(remaining)\n    if number <= 0 or need <= 0 or remaining <= 0 then\n\
    \        return nil\n    end\n    if remaining < need then\n        return { number\
    \ + remaining, 0 }\n    end\n    return { number + need, remaining - need }\n\
    end", "  local totalCarrots = remaining - number + need\n  local left = 0\n  if\
    \ totalCarrots > remaining then\n    left = totalCarrots - remaining\n  end\n\
    \  return { totalCarrots, left }\nend", "    if remaining >= need - number then\n\
    \        return number + need, remaining - (need - number)\n    else\n       \
    \ return number + remaining, 0\n    end\nend", "  -- your code\n  return {math.min(number+remaining,\
    \ number+need), math.max(0, remaining-need+number)}\nend", "    return {number\
    \ + need, remaining - need}\nend", "  return {number + need, remaining - need}\n\
    end", "  if number < 0 or need < 0 or remaining < 0 then\n    return nil\n  end\n\
    \  if number + need > remaining then\n    return { remaining + number, 0 }\n \
    \ end\n  return { number + need, remaining - number - need }\nend", "    -- TODO:\
    \ implement your code here\n    -- return an array of [ total number of eaten\
    \ carrots after your meals,\n    -- the number of carrots left after your meals\
    \ ]\n    if number+need <= remaining then\n        return {number+need, remaining-number-need}\n\
    \    else\n        return {number+remaining, 0}\n    end\nend", "  if remaining\
    \ < number + need then\n    return {remaining, 0}\n  else\n    return {number\
    \ + need, remaining - number - need}\n  end\nend", "    -- Fill your code here\n\
    \    if number <= remaining then\n        if need <= remaining then\n        \
    \    return number + need, remaining - need\n        else\n            return\
    \ number + remaining, 0\n        end\n    else\n        return number + remaining,\
    \ 0\n    end\nend", "  if remaining < need then\n    return number + remaining,\
    \ 0\n  else\n    return number + need, remaining - need\n  end\nend", "  -- Your\
    \ code here\n  local eaten = number + need\n  if (eaten > remaining) then\n  \
    \  return { remaining, 0 }\n  else\n    return { eaten, remaining - eaten }\n\
    \  end\nend", "  return {number + need, remaining - need}\nend", "\t\n\t--if remaining\
    \ < need then return (remaining + number), 0 end\n\treturn remaining < need and\
    \ {remaining + number, 0} or {number + need, remaining - need}\nend", "    local\
    \ eaten = number + math.min(need, remaining)\n    local remainingCarrots = math.max(remaining\
    \ - need, 0)\n    return {eaten, remainingCarrots}\nend", "  -- your code here\n\
    \  local carrotsLeft = remaining - (number + need)\n  local howManyCarrotsDidYouEat\
    \ = number + need\n  if carrotsLeft < 0 then\n    carrotsLeft = 0\n  end\n  return\
    \ {howManyCarrotsDidYouEat, carrotsLeft}\nend", "  local total = number + need\n\
    \  local carrots = remaining - need\n  if carrots < 0 then\n    return {total\
    \ - (carrots * -1), 0}\n  else\n    return {total, carrots}\n  end\nend", "  --\
    \ your code here\n  local total = number + need\n  local left = remaining - need\n\
    \  if left >= 0 then\n    return {total, left}\n  else\n    return {total, 0}\n\
    \  end\nend", "\nend", "    local total = number + remaining\n    return { total\
    \ >= need and need or total, total < need and 0 or total - need }\nend", "  local\
    \ result = {}\n  result[1] = number + need\n  result[2] = remaining - need\n \
    \ if result[2] < 0 then\n    result[2] = 0\n  end\n  return result\nend", "  return\
    \ number + need <= remaining and {number + need, remaining - (number + need)}\
    \ or {remaining + number, 0}\nend", "  local total = number + need\n  if remaining\
    \ < need then\n    return {total, 0}\n  else\n    return {total, remaining - need}\n\
    \  end\nend", "    --Code here\n    return 0\nend", "    return {}\nend", "  --\
    \ Write your code here, enjoy!\nend", "  if remaining < need then\n    return\
    \ {number + remaining, 0}\n  else\n    return {number + need, remaining - need}\n\
    \  end\nend", '  local carrots_eaten, carrots_left = number, remaining', "  local\
    \ total = number + remaining\n  local ret = {total, remaining}\n  if total <=\
    \ need then\n    ret[2] = 0\n  else\n    ret[2] = total - need\n  end\n  return\
    \ ret\nend", "    if number == nil or need == nil or remaining == nil then\n \
    \       return nil\n    end\n    local newNumber = number + need\n    if newNumber\
    \ >= remaining then\n        return {remaining, 0}\n    else\n        return {newNumber,\
    \ remaining - newNumber}\n    end\nend", "  -- TODO\n  if (number + need) <= remaining\
    \ then\n    return number + need, remaining - (number + need)\n  elseif (number\
    \ + need) > remaining then\n    return number + remaining, 0\n  end\nend", '  local
    total = number + remaining', "  -- Write your code here\n  if need + number <=\
    \ remaining then\n    return { number + need, remaining - (need + number) }\n\
    \  else\n    return { number + remaining, 0 }\n  end\nend", "  if number + need\
    \ > remaining then\n    return {remaining, 0}\n  else\n    return {number + need,\
    \ remaining - (number + need)}\n  end\nend", "  -- your code here\n  if number\
    \ >= remaining then\n    return number + need, remaining\n  else\n    return number\
    \ + need, remaining - need\n  end\nend", "  local total = number + remaining\n\
    \  if total < need then\n    return {total, 0}\n  else\n    return {need, total\
    \ - need}\n  end\nend", "    -- your code here\n    total = number + need\n  \
    \  if total <= remaining then\n        return {total, remaining - total}\n   \
    \ else\n        return {remaining + number, 0}\n    end\nend", "    return {number\
    \ + math.min(need, remaining), math.max(remaining - need, 0)}\nend", "  -- your\
    \ code here\n  local have = number + remaining\n  local need_new = have - need\n\
    \  if need_new < 0 then\n    return {have, 0}\n  else\n    return {need, need_new}\n\
    \  end\nend", "    -- Your code here\n    local carrots_available = remaining\
    \ + number\n    local carrots_eaten = carrots_available - need\n    local carrots_left\
    \ = remaining - carrots_eaten\n    if carrots_eaten > 0 then\n        return {carrots_eaten,\
    \ carrots_left}\n    else\n        return {need, 0}\n    end\nend\nreturn eat",
  "  -- your code here\nend", "  return {}\nend", "  return {remaining+number < need\
    \ and remaining+number or need, remaining+number-need < 0 and 0 or remaining+number-need}\n\
    end", "\tlocal n = number + need\n\tif n <= remaining then\n\t\treturn {n, remaining\
    \ - n}\n\telse\n\t\treturn {n, 0}\n\tend\nend", "    -- Your code here\n    return\
    \ { number + math.min(need, remaining), remaining - math.min(need, remaining)\
    \ }\nend", "\nend", "\nend", end, '  local eaten = 0', "  -- your code here\n\
    end\n```", "    if remaining >= need then\n        return number + need, remaining\
    \ - need\n    else\n        return number + remaining, 0\n    end\nend", "\nend",
  "\treturn {number + math.min(need, remaining), math.max(remaining - need, 0)}\n\
    end\nreturn eat", "  return {number + need, remaining - need}\nend", "  --  your\
    \ code here\nend", "    if number + need < remaining then\n        return {number\
    \ + need, remaining - number - need}\n    else\n        return {number + remaining,\
    \ 0}\n    end\nend", "  return { number + need, remaining - need }\nend", "  \
    \  local total = number + need\n    if total >= remaining then\n        return\
    \ {remaining, 0}\n    else\n        return {total, remaining - total}\n    end\n\
    end", "  -- return { number = 0, remaining = 0 }\n  -- Good luck!\n  -- number\
    \ = total number of eaten carrots\n  -- need = the number of carrots that you\
    \ need to eat\n  -- remaining = the number of remaining carrots thet exist in\
    \ stock\n  local total = number + need\n  if total > remaining then\n    return\
    \ { total, 0 }\n  else\n    return { total, remaining - total }\n  end\nend",
  "    local result = {}\n    local carrots = number + remaining\n    if carrots >=\
    \ need then\n        result[1] = number + need\n        result[2] = carrots -\
    \ need\n    else\n        result[1] = number + carrots\n        result[2] = 0\n\
    \    end\n    return result\nend", "  -- your code is here\nend", "    -- your\
    \ code here\nend\nreturn eat", "  -- code here\nend", "\tlocal value = remaining\
    \ - need\n\treturn value > 0 and { number + need, value } or { remaining + number,\
    \ 0 }\nend", "  -- your code goes here\nend", "  -- your code here\nend", end,
  "    return {number + math.min(need, remaining), math.max(remaining - need, 0)}\n\
    end", "    return { (number + math.min(need, remaining)), math.max(0, remaining\
    \ - need) }\nend", "  -- your code here\n  local sum = number + need\n  local\
    \ temp = sum - remaining\n  local count = 0\n  local eat = {}\n  if remaining\
    \ >= need then\n    count = sum\n    table.insert(eat, count)\n    table.insert(eat,\
    \ remaining - need)\n  elseif remaining < need then\n    table.insert(eat, sum)\n\
    \    table.insert(eat, 0)\n  end\n  return eat\nend", "    return { number + math.min(need,\
    \ remaining), math.max(remaining - need, 0) }\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
