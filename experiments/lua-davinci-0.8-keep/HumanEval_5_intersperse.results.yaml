name: HumanEval_5_intersperse
language: lua
results:
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n    if i < #numbers then\n      table.insert(result, delimeter)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    result[#result\
    \ + 1] = number\n    if i < #numbers then\n      result[#result + 1] = delimeter\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[i * 2 -\
    \ 1] = numbers[i]\n        result[i * 2] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local output = {}\n    for i = 1, #numbers - 1 do\n        output[i * 2 -\
    \ 1] = numbers[i]\n        output[i * 2] = delimeter\n    end\n    output[#output]\
    \ = numbers[#numbers]\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgstsj2cq.lua:20:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmpgstsj2cq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local out = {}\n    for i, v in ipairs(numbers) do\n        table.insert(out,\
    \ v)\n        if i ~= #numbers then\n            table.insert(out, delimeter)\n\
    \        end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local tmp = {}\n  for i, v in ipairs(numbers) do\n    if i > 1 then\n     \
    \ tmp[#tmp + 1] = delimeter\n    end\n    tmp[#tmp + 1] = v\n  end\n  return tmp\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local numbers_with_delimeter\
    \ = {}\n    local insert_position = 0\n    for i, v in ipairs(numbers) do\n  \
    \      insert_position = insert_position + 1\n        numbers_with_delimeter[insert_position]\
    \ = v\n        if i ~= #numbers then\n            insert_position = insert_position\
    \ + 1\n            numbers_with_delimeter[insert_position] = delimeter\n     \
    \   end\n    end\n    return numbers_with_delimeter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[#result + 1] = numbers[i]\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tif numbers == nil or #numbers == 0 then\n\t\treturn numbers\n\tend\n\tlocal\
    \ result = {numbers[1]}\n\tfor i = 2, #numbers do\n\t\ttable.insert(result, delimeter)\n\
    \t\ttable.insert(result, numbers[i])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local n = #numbers\n    if n == 0 then\n        return {}\n    elseif n ==\
    \ 1 then\n        return numbers\n    else\n        local new_numbers = {}\n \
    \       for i = 1, n - 1 do\n            new_numbers[2 * i - 1] = numbers[i]\n\
    \            new_numbers[2 * i] = delimeter\n        end\n        new_numbers[2\
    \ * n - 1] = numbers[n]\n        return new_numbers\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local new_list = {}\n    local len = #numbers\n    if len == 0 then\n   \
    \     return new_list\n    end\n    for i, v in ipairs(numbers) do\n        table.insert(new_list,\
    \ v)\n        if i < len then\n            table.insert(new_list, delimeter)\n\
    \        end\n    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    result[#result\
    \ + 1] = number\n    if i < #numbers then\n      result[#result + 1] = delimeter\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local r = {}\n  for i = 1, #numbers - 1 do\n    r[#r + 1] = numbers[i]\n  \
    \  r[#r + 1] = delimeter\n  end\n  r[#r + 1] = numbers[#numbers]\n  return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local ret = {}\n    for i, num in ipairs(numbers) do\n        ret[#ret +\
    \ 1] = num\n        if i < #numbers then\n            ret[#ret + 1] = delimeter\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i = 1, #numbers - 1 do\n        res[#res + 1] = numbers[i]\n\
    \        res[#res + 1] = delimeter\n    end\n    res[#res + 1] = numbers[#numbers]\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tif #numbers < 2 then\n\t\treturn numbers\n\tend\n\tlocal result = {}\n\tfor\
    \ i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\t\tresult[#result\
    \ + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        result[#result\
    \ + 1] = v\n        if i < #numbers then\n            result[#result + 1] = delimeter\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[2 * i - 1]\
    \ = numbers[i]\n        result[2 * i] = delimeter\n    end\n    result[#result]\
    \ = nil\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local index = 1\n    for i = 1, #numbers do\n    \
    \    result[index] = numbers[i]\n        if i < #numbers then\n            index\
    \ = index + 1\n            result[index] = delimeter\n        end\n        index\
    \ = index + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    table.insert(result, numbers[i])\n\
    \    table.insert(result, delimeter)\n  end\n  table.insert(result, numbers[#numbers])\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local out = {}\n  for i = 1, #numbers do\n    out[#out + 1] = numbers[i]\n\
    \    if i < #numbers then\n      out[#out + 1] = delimeter\n    end\n  end\n \
    \ return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal t = {}\n\tfor i = 1, #numbers - 1 do\n\t\tt[#t + 1] = numbers[i]\n\t\t\
    t[#t + 1] = delimeter\n\tend\n\tt[#t + 1] = numbers[#numbers]\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[i * 2 -\
    \ 1] = numbers[i]\n        result[i * 2] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local n = #numbers\n    for i = 1, n - 1 do\n    \
    \    result[#result + 1] = numbers[i]\n        result[#result + 1] = delimeter\n\
    \    end\n    result[#result + 1] = numbers[n]\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if (#numbers == 0) then\n    return numbers\n  end\n  if (#numbers == 1) then\n\
    \    return numbers\n  end\n  local result = {}\n  for i, number in ipairs(numbers)\
    \ do\n    if (i ~= 1) then\n      table.insert(result, delimeter)\n    end\n \
    \   table.insert(result, number)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    return {numbers[1], delimeter, unpack(intersperse(slice(numbers,\
    \ 2), delimeter))}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmgx81tt8.lua:12:\
    \ attempt to call a nil value (global 'slice')\nstack traceback:\n\t/tmp/tmpmgx81tt8.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpmgx81tt8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for index, number in ipairs(numbers) do\n        if\
    \ index ~= 1 then\n            table.insert(result, delimeter)\n        end\n\
    \        table.insert(result, number)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if (#numbers == 0) then\n    return {}\n  elseif (#numbers == 1) then\n   \
    \ return numbers\n  else\n    local output = {}\n    for i = 1, #numbers - 1 do\n\
    \      table.insert(output, numbers[i])\n      table.insert(output, delimeter)\n\
    \    end\n    table.insert(output, numbers[#numbers])\n    return output\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        table.insert(result,\
    \ v)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if not numbers or type(numbers) ~= 'table' then\n        return {delimeter}\n\
    \    end\n    local interspersed = {}\n    for i, num in ipairs(numbers) do\n\
    \        if i ~= 1 then\n            table.insert(interspersed, delimeter)\n \
    \       end\n        table.insert(interspersed, num)\n    end\n    return interspersed\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[i * 2 - 1] = numbers[i]\n\
    \t\tresult[i * 2] = delimeter\n\tend\n\tresult[#result] = numbers[#numbers]\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk65z6yik.lua:20:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmpk65z6yik.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local n = #numbers\n    if n == 0 then\n        return\
    \ result\n    end\n    result[1] = numbers[1]\n    for i = 2, n do\n        result[(i\
    \ - 1) * 2] = delimeter\n        result[(i - 1) * 2 + 1] = numbers[i]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {numbers[1]}\n\
    \    for i = 2, #numbers do\n        result[#result + 1] = delimeter\n       \
    \ result[#result + 1] = numbers[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local len = #numbers\n  for i = 1, len do\n    if i >\
    \ 1 then\n      table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local previous_element = nil\n    for _, x in ipairs(numbers)\
    \ do\n        if previous_element ~= nil then\n            table.insert(result,\
    \ delimeter)\n        end\n        table.insert(result, x)\n        previous_element\
    \ = x\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    if #numbers == 1 then\n\
    \        return numbers\n    end\n    local output = {}\n    for i, number in\
    \ ipairs(numbers) do\n        output[i * 2 - 1] = number\n        output[i * 2]\
    \ = delimeter\n    end\n    output[#output] = nil\n    return output\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, v in ipairs(numbers) do\n    result[#result + 1]\
    \ = v\n    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local index = 1\n    for i = 1, #numbers do\n    \
    \    result[index] = numbers[i]\n        if i < #numbers then\n            index\
    \ = index + 1\n            result[index] = delimeter\n        end\n        index\
    \ = index + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    return each_pair(numbers,\
    \ function(number, rest)\n        return table.concat({number, delimeter, rest})\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpylqa8hda.lua:10:\
    \ attempt to call a nil value (global 'each_pair')\nstack traceback:\n\t/tmp/tmpylqa8hda.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpylqa8hda.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    local result = {}\n    local current_index = 1\n    for\
    \ i = 1, #numbers - 1 do\n      result[current_index] = numbers[i]\n      result[current_index\
    \ + 1] = delimeter\n      current_index = current_index + 2\n    end\n    result[current_index]\
    \ = numbers[#numbers]\n    return result\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local results = {}\n    for i = 1, #numbers do\n        table.insert(results,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(results,\
    \ delimeter)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for _, num in ipairs(numbers) do\n        table.insert(result,\
    \ num)\n        table.insert(result, delimeter)\n    end\n    table.remove(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local interspersed = {}\n    for i = 1, #numbers do\n        if i > 1 then\n\
    \            interspersed[#interspersed + 1] = delimeter\n        end\n      \
    \  interspersed[#interspersed + 1] = numbers[i]\n    end\n    return interspersed\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = { numbers[1]\
    \ }\n    for i = 2, #numbers do\n        table.insert(result, delimeter)\n   \
    \     table.insert(result, numbers[i])\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    for index, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if index ~= #numbers then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[#result + 1] = numbers[i]\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {numbers[1]}\n\
    \    for index = 2, #numbers do\n        result[#result + 1] = delimeter\n   \
    \     result[#result + 1] = numbers[index]\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local len = #numbers\n    for i = 1, len do\n    \
    \    table.insert(result, numbers[i])\n        if i < len then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tif not numbers or #numbers == 0 then\n\t\treturn {}\n\tend\n\tlocal result =\
    \ { numbers[1] }\n\tfor i = 2, #numbers do\n\t\ttable.insert(result, delimeter)\n\
    \t\ttable.insert(result, numbers[i])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    local l = {}\n    for i, n in ipairs(numbers) do\n    \
    \  if i ~= 1 then\n        table.insert(l, delimeter)\n      end\n      table.insert(l,\
    \ n)\n    end\n    return l\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    local res = {}\n    for i = 1, #numbers do\n      res[i]\
    \ = numbers[i]\n      if i ~= #numbers then\n        res[i + 1] = delimeter\n\
    \      end\n    end\n    return res\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwnummwp.lua:27:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 6, 3, 2}\nstack traceback:\n\t\
    /tmp/tmprwnummwp.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local num = #numbers\n    if num == 0 then\n        return {}\n    elseif\
    \ num == 1 then\n        return numbers\n    else\n        local result = {}\n\
    \        for i = 1, num do\n            result[#result + 1] = numbers[i]\n   \
    \         if i < num then\n                result[#result + 1] = delimeter\n \
    \           end\n        end\n        return result\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, v in ipairs(numbers) do\n    if i > 1 then\n  \
    \    table.insert(result, delimeter)\n    end\n    table.insert(result, v)\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local index = 1\n  for i, element in ipairs(numbers) do\n\
    \    result[index] = element\n    index = index + 1\n    if i < #numbers then\n\
    \      result[index] = delimeter\n      index = index + 1\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local head = numbers[1]\n\
    \    local tail = slice(numbers, 2)\n    return cons(head, concat(map(tail, function(n)\
    \ return {delimeter, n} end)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2axtlf5l.lua:11:\
    \ attempt to call a nil value (global 'slice')\nstack traceback:\n\t/tmp/tmp2axtlf5l.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp2axtlf5l.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local interspersed = {}\n    for i = 1, #numbers do\n        table.insert(interspersed,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(interspersed,\
    \ delimeter)\n        end\n    end\n    return interspersed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i, v in ipairs(numbers) do\n        if i ~= 1 then\n\
    \            table.insert(res, delimeter)\n        end\n        table.insert(res,\
    \ v)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, value in ipairs(numbers) do\n        table.insert(result,\
    \ value)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local t = #numbers\n    for i = 1, t do\n        table.insert(result,\
    \ numbers[i])\n        if i < t then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i = 1, #numbers do\n        res[#res + 1] = numbers[i]\n\
    \        if i < #numbers then\n            res[#res + 1] = delimeter\n       \
    \ end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if type(numbers) ~= 'table' then\n        error('Argument `numbers` is not\
    \ a table')\n    end\n    if type(delimeter) ~= 'number' then\n        error('Argument\
    \ `delimeter` is not a number')\n    end\n    if (#numbers < 2) then\n       \
    \ return numbers\n    end\n    local new_list = {}\n    for i = 1, #numbers -\
    \ 1 do\n        new_list[#new_list + 1] = numbers[i]\n        new_list[#new_list\
    \ + 1] = delimeter\n    end\n    new_list[#new_list + 1] = numbers[#numbers]\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    if #numbers == 1 then\n\
    \        return numbers\n    end\n    local result = {}\n    for i = 1, #numbers\
    \ - 1 do\n        table.insert(result, numbers[i])\n        table.insert(result,\
    \ delimeter)\n    end\n    table.insert(result, numbers[#numbers])\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local list = {}\n    for i, v in ipairs(numbers) do\n        table.insert(list,\
    \ v)\n        if i ~= #numbers then\n            table.insert(list, delimeter)\n\
    \        end\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor index, number in ipairs(numbers) do\n\t\tif index >\
    \ 1 then\n\t\t\ttable.insert(result, delimeter)\n\t\tend\n\t\ttable.insert(result,\
    \ number)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\ttable.insert(result, numbers[i])\n\
    \t\ttable.insert(result, delimeter)\n\tend\n\tif #numbers > 0 then\n\t\ttable.insert(result,\
    \ numbers[#numbers])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tresult[#result + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\
    \t\tif i < #numbers then\n\t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local numbers = numbers or {}\n    local result = {}\n    for i = 1, #numbers\
    \ do\n        result[2 * i - 1] = numbers[i]\n        result[2 * i] = delimeter\n\
    \    end\n    result[#result] = nil\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local ret = {}\n    for i = 1, #numbers - 1 do\n        ret[#ret + 1] = numbers[i]\n\
    \        ret[#ret + 1] = delimeter\n    end\n    ret[#ret + 1] = numbers[#numbers]\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tlocal n = #numbers\n\tfor i, number in ipairs(numbers)\
    \ do\n\t\tresult[#result + 1] = number\n\t\tif i < n then\n\t\t\tresult[#result\
    \ + 1] = delimeter\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local ret = {}\n    for i = 1, #numbers - 1 do\n        ret[#ret + 1] = numbers[i]\n\
    \        ret[#ret + 1] = delimeter\n    end\n    ret[#ret + 1] = numbers[#numbers]\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    return {numbers[1], delimeter, intersperse(slice(numbers,\
    \ 2), delimeter)}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1j965a4q.lua:12:\
    \ attempt to call a nil value (global 'slice')\nstack traceback:\n\t/tmp/tmp1j965a4q.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1j965a4q.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        if i ~= 1\
    \ then\n            table.insert(result, delimeter)\n        end\n        table.insert(result,\
    \ v)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, n in ipairs(numbers) do\n        result[#result\
    \ + 1] = n\n        if i < #numbers then\n            result[#result + 1] = delimeter\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local i = 1\n    while i <= #numbers do\n        if\
    \ i == 1 then\n            result[i] = numbers[i]\n        else\n            result[#result\
    \ + 1] = delimeter\n            result[#result + 1] = numbers[i]\n        end\n\
    \        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local length = #numbers\n    for i, v in ipairs(numbers)\
    \ do\n        result[i * 2 - 1] = v\n        if i ~= length then\n           \
    \ result[i * 2] = delimeter\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local len = #numbers\n    if len == 0 then\n        return {}\n    elseif\
    \ len == 1 then\n        return numbers\n    else\n        local res = {}\n  \
    \      for i = 1, len - 1 do\n            res[#res + 1] = numbers[i]\n       \
    \     res[#res + 1] = delimeter\n        end\n        res[#res + 1] = numbers[len]\n\
    \        return res\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {numbers[1]}\n\
    \    for i = 2, #numbers do\n        table.insert(result, delimeter)\n       \
    \ table.insert(result, numbers[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i = 1, #numbers - 1 do\n        res[#res + 1] = numbers[i]\n\
    \        res[#res + 1] = delimeter\n    end\n    res[#res + 1] = numbers[#numbers]\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local ret = {}\n    for i = 1, #numbers - 1 do\n        ret[#ret + 1] = numbers[i]\n\
    \        ret[#ret + 1] = delimeter\n    end\n    ret[#ret + 1] = numbers[#numbers]\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local _list_0 = numbers\n  for _index_0 = 1, #_list_0\
    \ do\n    local _continue_0 = false\n    repeat\n      local n = _list_0[_index_0]\n\
    \      table.insert(result, n)\n      table.insert(result, delimeter)\n      _continue_0\
    \ = true\n    until true\n    if not _continue_0 then\n      break\n    end\n\
    \  end\n  return result\nend\nreturn {\n  APPENDIX_ONE = APPENDIX_ONE,\n  APPENDIX_TWO\
    \ = APPENDIX_TWO,\n  APPENDIX_THREE = APPENDIX_THREE,\n  APPENDIX_FOUR = APPENDIX_FOUR,\n\
    \  APPENDIX_FIVE = APPENDIX_FIVE,\n  APPENDIX_SIX = APPENDIX_SIX,\n  APPENDIX_SEVEN\
    \ = APPENDIX_SEVEN,\n  APPENDIX_EIGHT = APPENDIX_EIGHT,\n  APPENDIX_NINE = APPENDIX_NINE,\n\
    \  APPENDIX_TEN = APPENDIX_TEN,\n  APPENDIX_ELEVEN = APPENDIX_ELEVEN,\n  APPENDIX_TWELVE\
    \ = APPENDIX_TWELVE,\n  APPENDIX_THIRTEEN = APPENDIX_THIRTEEN,\n  APPENDIX_FOURTEEN\
    \ = APPENDIX_FOURTEEN,\n  APPENDIX_FIFTEEN = APPENDIX_FIFTEEN,\n  APPENDIX_SIXTEEN\
    \ = APPENDIX_SIXTEEN,\n  APPENDIX_SEVENTEEN = APPENDIX_SEVENTEEN,\n  APPENDIX_EIGHTEEN\
    \ = APPENDIX_EIGHTEEN,\n  APPENDIX_NINETEEN = APPENDIX_NINETEEN,\n  APPENDIX_TWENTY\
    \ = APPENDIX_TWENTY,\n  APPENDIX_TWENTY_ONE = APPENDIX_TWENTY_ONE,\n  APPENDIX_TWENTY_TWO\
    \ = APPENDIX_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfs51y_zi.lua:46: '}' expected (to close '{' at line 23) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tif i > 1 then\n\t\t\ttable.insert(result,\
    \ delimeter)\n\t\tend\n\t\ttable.insert(result, numbers[i])\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    if i > 1 then\n\
    \      table.insert(result, delimeter)\n    end\n    table.insert(result, number)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        result[#result\
    \ + 1] = v\n        if i < #numbers then\n            result[#result + 1] = delimeter\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        if i ~= 1\
    \ then table.insert(result, delimeter) end\n        table.insert(result, v)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[i*2 - 1] = numbers[i]\n\
    \    result[i*2] = delimeter\n  end\n  result[#result] = numbers[#numbers]\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4poj_ac1.lua:20:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmp4poj_ac1.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    for i = 1, #numbers - 1 do\n        table.insert(result, numbers[i])\n\
    \        table.insert(result, delimeter)\n    end\n    table.insert(result, numbers[#numbers])\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    local result = {}\n    for i, number in ipairs(numbers)\
    \ do\n      if i ~= 1 then\n        table.insert(result, delimeter)\n      end\n\
    \      table.insert(result, number)\n    end\n    return result\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local sequence = {}\n    for i, number in ipairs(numbers) do\n        table.insert(sequence,\
    \ number)\n        if i ~= #numbers then\n            table.insert(sequence, delimeter)\n\
    \        end\n    end\n    return sequence\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tlocal prev\n\tfor i, number in ipairs(numbers) do\n\t\t\
    if prev then\n\t\t\ttable.insert(result, prev)\n\t\t\ttable.insert(result, delimeter)\n\
    \t\tend\n\t\tprev = number\n\tend\n\tif prev then\n\t\ttable.insert(result, prev)\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[i * 2 - 1]\
    \ = numbers[i]\n        result[i * 2] = delimeter\n    end\n    result[#result]\
    \ = nil\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local output = {}\n    for i = 1, #numbers do\n        table.insert(output,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(output,\
    \ delimeter)\n        end\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        if i > 1 then\n\
    \            table.insert(result, delimeter)\n        end\n        table.insert(result,\
    \ v)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local res = {}\n  local len = #numbers\n  for i = 1, len do\n    table.insert(res,\
    \ numbers[i])\n    if i < len then\n      table.insert(res, delimeter)\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local new_list = {}\n    for i, n in ipairs(numbers) do\n        if i > 1\
    \ then\n            table.insert(new_list, delimeter)\n        end\n        table.insert(new_list,\
    \ n)\n    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        table.insert(result,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, n in ipairs(numbers) do\n    table.insert(result,\
    \ n)\n    if i < #numbers then\n      table.insert(result, delimeter)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        local number =\
    \ numbers[i]\n        table.insert(result, number)\n        table.insert(result,\
    \ delimeter)\n    end\n    if #numbers > 0 then\n        table.insert(result,\
    \ numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  return map(function(number, i)\n    if i % 2 == 0 then\n      return number\n\
    \    else\n      return delimeter\n    end\n  end, numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8oo3x1v7.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp8oo3x1v7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8oo3x1v7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  return (numbers:slice(1, #numbers-1)):zip(numbers:slice(2, #numbers)):reduce(function(acc,\
    \ pair)\n    return acc .. pair[1] .. delimeter .. pair[2]\n  end, numbers[1])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5l25i8cb.lua:7:\
    \ attempt to call a nil value (method 'slice')\nstack traceback:\n\t/tmp/tmp5l25i8cb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5l25i8cb.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal ret = {}\n\tfor i, n in ipairs(numbers) do\n\t\tret[i * 2 - 1] = n\n\t\
    \tret[i * 2] = delimeter\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxifw_d2g.lua:19:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 8, 2, 8}\nstack traceback:\n\
    \t/tmp/tmpxifw_d2g.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local list = {}\n  for i, number in ipairs(numbers) do\n    if i == 1 then\n\
    \      table.insert(list, number)\n    else\n      table.insert(list, delimeter)\n\
    \      table.insert(list, number)\n    end\n  end\n  return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    for i = 1, #numbers - 1 do\n        result[#result + 1] = numbers[i]\n\
    \        result[#result + 1] = delimeter\n    end\n    result[#result + 1] = numbers[#numbers]\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal res = {}\n\tlocal last = 0\n\tfor i = 1, #numbers do\n\t\tres[last + 1]\
    \ = numbers[i]\n\t\tres[last + 2] = delimeter\n\t\tlast = last + 2\n\tend\n\t\
    res[last] = nil\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[2 * i - 1]\
    \ = numbers[i]\n        result[2 * i] = delimeter\n    end\n    result[#result]\
    \ = nil\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if (#numbers == 0) then\n    return numbers\n  end\n  local result = {}\n \
    \ for i, v in ipairs(numbers) do\n    table.insert(result, v)\n    if (i < #numbers)\
    \ then\n      table.insert(result, delimeter)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[#result + 1] = numbers[i]\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for index, number in ipairs(numbers) do\n    if index\
    \ > 1 then\n      table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ number)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    table.insert(result,\
    \ num)\n    table.insert(result, delimeter)\n  end\n  table.remove(result)\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if (#numbers < 2) then\n        return numbers\n    end\n    local result\
    \ = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if (i < #numbers) then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tif next(numbers) == nil then\n\t\treturn {}\n\tend\n\tlocal newNumbers = {}\n\
    \tfor i = 1, #numbers do\n\t\tif i ~= 1 then\n\t\t\ttable.insert(newNumbers, delimeter)\n\
    \t\tend\n\t\ttable.insert(newNumbers, numbers[i])\n\tend\n\treturn newNumbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tresult[2 * i - 1] = numbers[i]\n\
    \t\tresult[2 * i] = delimeter\n\tend\n\tresult[#result] = nil -- Remove the last\
    \ element, so that result list has no trailing delimeter\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local output = {}\n  for i = 1, #numbers - 1 do\n    output[#output + 1] =\
    \ numbers[i]\n    output[#output + 1] = delimeter\n  end\n  output[#output + 1]\
    \ = numbers[#numbers]\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        table.insert(result,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i, v in ipairs(numbers) do\n\t\ttable.insert(result,\
    \ v)\n\t\tif i < #numbers then\n\t\t\ttable.insert(result, delimeter)\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    assert(type(numbers) == 'table', 'The first argument must be a table')\n\
    \    assert(type(delimeter) == 'number', 'The second argument must be a number')\n\
    \    local res = {}\n    local len = #numbers\n    if len == 0 then\n        return\
    \ res\n    end\n    for i = 1, len - 1 do\n        table.insert(res, numbers[i])\n\
    \        table.insert(res, delimeter)\n    end\n    table.insert(res, numbers[len])\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    local result = {}\n    for i, number in ipairs(numbers)\
    \ do\n      if i ~= 1 then\n        table.insert(result, delimeter)\n      end\n\
    \      table.insert(result, number)\n    end\n    return result\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local output = {}\n    local n = #numbers\n    for i = 1, n - 1 do\n    \
    \    output[#output + 1] = numbers[i]\n        output[#output + 1] = delimeter\n\
    \    end\n    output[#output + 1] = numbers[n]\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal inserted = {}\n\tfor i = 1, #numbers do\n\t\ttable.insert(inserted, numbers[i])\n\
    \t\tif i < #numbers then\n\t\t\ttable.insert(inserted, delimeter)\n\t\tend\n\t\
    end\n\treturn inserted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local i = 1\n    for k, number in ipairs(numbers)\
    \ do\n        result[i] = number\n        i = i + 1\n        if k < #numbers then\n\
    \            result[i] = delimeter\n            i = i + 1\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i, v in ipairs(numbers) do\n        table.insert(res,\
    \ v)\n        if i < #numbers then\n            table.insert(res, delimeter)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        if i == 1 then\n \
    \           result[i] = numbers[i]\n        else\n            result[i * 2 - 1]\
    \ = delimeter\n            result[i * 2] = numbers[i]\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdjb2ip5.lua:23:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 3=8, 4=6, 5=8, 6=3, 7=8, 8=2}\n\
    stack traceback:\n\t/tmp/tmphdjb2ip5.lua:23: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {numbers[1]}\n\
    \    for i = 2, #numbers do\n        result[#result + 1] = delimeter\n       \
    \ result[#result + 1] = numbers[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        if i > 1 then\n\
    \            result[#result + 1] = delimeter\n        end\n        result[#result\
    \ + 1] = v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for index, number in ipairs(numbers) do\n        result[index\
    \ * 2 - 1] = number\n        result[index * 2] = delimeter\n    end\n    result[#result]\
    \ = nil\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal res = {}\n\tlocal len = #numbers\n\tfor i = 1, len do\n\t\tres[#res +\
    \ 1] = numbers[i]\n\t\tif i < len then\n\t\t\tres[#res + 1] = delimeter\n\t\t\
    end\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    for i, num in ipairs(numbers) do\n        table.insert(result, num)\n\
    \        if i < #numbers then\n            table.insert(result, delimeter)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, x in ipairs(numbers) do\n        result[#result\
    \ + 1] = x\n        if i < #numbers then\n            result[#result + 1] = delimeter\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local out = {}\n\
    \    for i, e in ipairs(numbers) do\n        out[2 * i - 1] = e\n        out[2\
    \ * i] = delimeter\n    end\n    out[#out] = nil\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    result[2 * i\
    \ - 1] = number\n    result[2 * i] = delimeter\n  end\n  result[#result] = nil\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local pos = 0\n    for _, v in ipairs(numbers) do\n\
    \        pos = pos + 1\n        result[pos] = v\n        pos = pos + 1\n     \
    \   result[pos] = delimeter\n    end\n    table.remove(result)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  return zipWith(function(number1, number2)\n    return number1, delimeter, number2\n\
    \  end,\n  numbers, tail(numbers))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo1t8w7ob.lua:10:\
    \ attempt to call a nil value (global 'tail')\nstack traceback:\n\t/tmp/tmpo1t8w7ob.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpo1t8w7ob.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local size = #numbers\n    if size == 0 then\n        return {}\n    elseif\
    \ size == 1 then\n        return numbers\n    else\n        local result = {}\n\
    \        for i = 1, size - 1 do\n            result[#result + 1] = numbers[i]\n\
    \            result[#result + 1] = delimeter\n        end\n        result[#result\
    \ + 1] = numbers[size]\n        return result\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local newNumbers = {}\n    for k, v in ipairs(numbers) do\n        if (k\
    \ ~= 1) then\n            table.insert(newNumbers, delimeter)\n        end\n \
    \       table.insert(newNumbers, v)\n    end\n    return newNumbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  return zip(numbers, replicate(length(numbers) - 1, delimeter))\n    | map(concat)\n\
    \    | flatten()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22avio9r.lua:7:\
    \ attempt to call a nil value (global 'length')\nstack traceback:\n\t/tmp/tmp22avio9r.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp22avio9r.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local ans = {numbers[1]}\n\
    \    for i = 2, #numbers do\n        ans[#ans + 1] = delimeter\n        ans[#ans\
    \ + 1] = numbers[i]\n    end\n    return ans\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        if i\
    \ == 1 then\n            result[i] = number\n        else\n            result[2\
    \ * i - 1] = delimeter\n            result[2 * i] = number\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1snigon.lua:23:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 3=8, 4=6, 5=8, 6=3, 7=8, 8=2}\n\
    stack traceback:\n\t/tmp/tmpa1snigon.lua:23: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if numbers == nil or #numbers == 0 then\n        return numbers\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1mqhhfx_.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i,v in ipairs(numbers) do\n    table.insert(result,\
    \ v)\n    if i ~= #numbers then\n      table.insert(result, delimeter)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal length = #numbers\n\tlocal result = {}\n\tfor i = 1, length - 1 do\n\t\
    \ttable.insert(result, numbers[i])\n\t\ttable.insert(result, delimeter)\n\tend\n\
    \ttable.insert(result, numbers[length])\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tlocal index = 0\n\tfor _, num in ipairs(numbers) do\n\t\
    \tindex = index + 1\n\t\tresult[index] = num\n\t\tif index < #numbers then\n\t\
    \t\tindex = index + 1\n\t\t\tresult[index] = delimeter\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp711g5ixn.lua:24:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmp711g5ixn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    return map(function(x, i) return (i % 2 == 0) and x or {delimeter, x} end,\
    \ numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7crms6y3.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp7crms6y3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7crms6y3.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local new_numbers = {}\n    local n = #numbers\n    if n == 0 then\n    \
    \    return new_numbers\n    end\n    if n == 1 then\n        return numbers\n\
    \    end\n    for i = 1, n - 1 do\n        new_numbers[i * 2 - 1] = numbers[i]\n\
    \        new_numbers[i * 2] = delimeter\n    end\n    new_numbers[n * 2 - 1] =\
    \ numbers[n]\n    return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local len = #numbers\n    if len == 0 then\n        return {}\n    elseif\
    \ len == 1 then\n        return numbers\n    else\n        local result = {}\n\
    \        for i = 1, len, 2 do\n            local before = numbers[i]\n       \
    \     local after = numbers[i + 1]\n            if after == nil then\n       \
    \         table.insert(result, before)\n            else\n                table.insert(result,\
    \ before)\n                table.insert(result, delimeter)\n            end\n\
    \        end\n        return result\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkt66b_4.lua:32:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 3, 8}\nstack traceback:\n\t\
    /tmp/tmpkkt66b_4.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local out = {}\n    for k,v in ipairs(numbers) do\n        table.insert(out,\
    \ v)\n        if k ~= #numbers then\n            table.insert(out, delimeter)\n\
    \        end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  assert(is_number_list(numbers), \"numbers is not a list of numbers\")\n  assert(is_number(delimeter),\
    \ \"delimeter is not a number\")\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(result, number)\n    table.insert(result, delimeter)\n\
    \  end\n  table.remove(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2rwlhm12.lua:7:\
    \ attempt to call a nil value (global 'is_number_list')\nstack traceback:\n\t\
    /tmp/tmp2rwlhm12.lua:7: in local 'candidate'\n\t/tmp/tmp2rwlhm12.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    for i = 1, #numbers - 1 do\n        result[#result + 1] = numbers[i]\n\
    \        result[#result + 1] = delimeter\n    end\n    result[#result + 1] = numbers[#numbers]\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    return map(function(x, i) return i % 2 == 0 and x or delimeter end, numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizf_c17i.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpizf_c17i.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpizf_c17i.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal t = {}\n\tfor i = 1, #numbers do\n\t\tt[2 * i - 1] = numbers[i]\n\t\t\
    t[2 * i] = delimeter\n\tend\n\tt[#t] = nil\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\ttable.insert(result, numbers[i])\n\
    \t\ttable.insert(result, delimeter)\n\tend\n\ttable.insert(result, numbers[#numbers])\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    table.insert(result, numbers[i])\n\
    \    table.insert(result, delimeter)\n  end\n  table.insert(result, numbers[#numbers])\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local t = {}\n   \
    \ for i = 1, #numbers - 1 do\n        t[#t + 1] = numbers[i]\n        t[#t + 1]\
    \ = delimeter\n    end\n    t[#t + 1] = numbers[#numbers]\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local size = #numbers\n    if size == 0 then\n   \
    \     return result\n    end\n    result[1] = numbers[1]\n    for i = 2, size\
    \ do\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprt3jh6un.lua:24:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 3=8, 4=6, 5=8, 6=3, 7=8, 8=2}\n\
    stack traceback:\n\t/tmp/tmprt3jh6un.lua:24: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tif #numbers == 0 then\n\t\treturn {}\n\tend\n\tlocal result = { numbers[1] }\n\
    \tfor i = 2, #numbers do\n\t\tresult[#result + 1] = delimeter\n\t\tresult[#result\
    \ + 1] = numbers[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \tlocal result = {}\n\tfor i = 1, #numbers - 1 do\n\t\ttable.insert(result, numbers[i])\n\
    \t\ttable.insert(result, delimeter)\n\tend\n\ttable.insert(result, numbers[#numbers])\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local n = #numbers\n  if n == 0 then\n    return result\n\
    \  end\n  if n == 1 then\n    table.insert(result, numbers[1])\n    return result\n\
    \  end\n  for i = 1, n - 1 do\n    table.insert(result, numbers[i])\n    table.insert(result,\
    \ delimeter)\n  end\n  table.insert(result, numbers[n])\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, n in ipairs(numbers) do\n        if i > 1 then\n\
    \            result[#result + 1] = delimeter\n        end\n        result[#result\
    \ + 1] = n\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    local result = {}\n    for i = 1, #numbers - 1 do\n   \
    \   table.insert(result, numbers[i])\n      table.insert(result, delimeter)\n\
    \    end\n    table.insert(result, numbers[#numbers])\n    return result\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  assertx.is_table(numbers)\n  assertx.is_number(delimeter)\n  local out = {}\n\
    \  for i = 1, #numbers - 1 do\n    out[#out + 1] = numbers[i]\n    out[#out +\
    \ 1] = delimeter\n  end\n  out[#out + 1] = numbers[#numbers]\n  return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3bm_c54l.lua:7:\
    \ attempt to index a nil value (global 'assertx')\nstack traceback:\n\t/tmp/tmp3bm_c54l.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3bm_c54l.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers - 1 do\n    table.insert(new_numbers,\
    \ numbers[i])\n    table.insert(new_numbers, delimeter)\n  end\n  table.insert(new_numbers,\
    \ numbers[#numbers])\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if not numbers or #numbers == 0 then\n        return numbers\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptisp282k.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local last = #numbers\n    for i, elem in ipairs(numbers)\
    \ do\n        result[#result + 1] = elem\n        if i ~= last then\n        \
    \    result[#result + 1] = delimeter\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, v in ipairs(numbers) do\n    result[i] = v\n  \
    \  if i < #numbers then\n      result[i + 1] = delimeter\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgjspwaw.lua:21:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 6, 3, 2}\nstack traceback:\n\t\
    /tmp/tmpvgjspwaw.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local r = {}\n    for i, v in ipairs(numbers) do\n        r[#r + 1] = v\n\
    \        if i < #numbers then\n            r[#r + 1] = delimeter\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local res = {}\n    for i, v in ipairs(numbers) do\n        if i ~= 1 then\n\
    \            table.insert(res, delimeter)\n        end\n        table.insert(res,\
    \ v)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    return { numbers[1], delimeter, intersperse(tail(numbers),\
    \ delimeter) }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ur7phh_.lua:12:\
    \ attempt to call a nil value (global 'tail')\nstack traceback:\n\t/tmp/tmp7ur7phh_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7ur7phh_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  if #numbers == 0 then\n    return {}\n  elseif #numbers == 1 then\n    return\
    \ numbers\n  else\n    local result = {}\n    for i = 1, #numbers - 1 do\n   \
    \   result[i * 2 - 1] = numbers[i]\n      result[i * 2] = delimeter\n    end\n\
    \    result[#result] = numbers[#numbers]\n    return result\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdealbn15.lua:26:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 2}\nstack traceback:\n\
    \t/tmp/tmpdealbn15.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local t = {}\n  for i, num in ipairs(numbers) do\n    if i ~= 1 then\n    \
    \  table.insert(t, delimeter)\n    end\n    table.insert(t, num)\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        table.insert(result,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {numbers[1]}\n\
    \    for i = 2, #numbers do\n        table.insert(result, delimeter)\n       \
    \ table.insert(result, numbers[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for index, number in ipairs(numbers) do\n        if\
    \ index ~= 1 then\n            result[#result + 1] = delimeter\n        end\n\
    \        result[#result + 1] = number\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    return isEmpty(numbers) and numbers or take(head(numbers)) .. delimeter ..\
    \ intersperse(tail(numbers), delimeter)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjf1j61k.lua:7:\
    \ attempt to call a nil value (global 'isEmpty')\nstack traceback:\n\t/tmp/tmpjjf1j61k.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjjf1j61k.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers < 2 then\n        return numbers\n    end\n    local result =\
    \ {}\n    for i = 1, #numbers - 1 do\n        result[#result + 1] = numbers[i]\n\
    \        result[#result + 1] = delimeter\n    end\n    result[#result + 1] = numbers[#numbers]\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local res = {}\n  for _, num in ipairs(numbers) do\n    table.insert(res, num)\n\
    \    table.insert(res, delimeter)\n  end\n  -- Remove last delimeter\n  if #res\
    \ > 0 then\n    table.remove(res)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i,v in ipairs(numbers) do\n        if i > 1 then\
    \ table.insert(result, delimeter) end\n        table.insert(result, v)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local numbers_len = #numbers\n  if numbers_len == 0 then\n    return {}\n \
    \ elseif numbers_len == 1 then\n    return numbers\n  else\n    local head = numbers[1]\n\
    \    local tail = numbers[2]\n    for i = 3, numbers_len do\n      local tmp =\
    \ tail\n      tail = numbers[i]\n      numbers[i] = delimeter\n      numbers[i\
    \ - 1] = tmp\n    end\n    numbers[2] = tail\n    return numbers\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg67i0p1k.lua:30:\
    \ expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 2, 3, 8}\nstack traceback:\n\t\
    /tmp/tmpg67i0p1k.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \    if numbers == nil or #numbers == 0 then\n        return {}\n    end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj8x37ubt.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse([], 4)\n-- []\n-- >>> intersperse([1,\
    \ 2, 3], 4)\n-- [1, 4, 2, 4, 3]\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    table.insert(result, numbers[i])\n\
    \    table.insert(result, delimeter)\n  end\n  table.insert(result, numbers[#numbers])\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
