name: HumanEval_99_closest_integer
language: lua
prompt: "-- Create a function that takes a value (string) representing a number\n\
  -- and returns the closest integer to it. If the number is equidistant\n-- from\
  \ two integers, round it away from zero.\n-- Examples\n-- >>> closest_integer(\"\
  10\")\n-- 10\n-- >>> closest_integer(\"15.3\")\n-- 15\n-- Note:\n-- Rounding away\
  \ from zero means that if the given number is equidistant\n-- from two integers,\
  \ the one you should return is the one that is the\n-- farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n-- return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nlocal function closest_integer(value)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_integer\n\
  \    lu.assertEquals(candidate('10'), 10)\n    lu.assertEquals(candidate('14.5'),\
  \ 15)\n    lu.assertEquals(candidate('-15.5'), -16)\n    lu.assertEquals(candidate('15.3'),\
  \ 15)\n    lu.assertEquals(candidate('0'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local v = tonumber(value)\n  if v == math.floor(v) then\n    return\
    \ math.floor(v)\n  else\n    if v > 0 then\n      return math.floor(v + 0.5)\n\
    \    else\n      return math.ceil(v - 0.5)\n    end\n  end\nend", "    return\
    \ math.floor(value + 0.5)\nend", "  local float_value = tonumber(value)\n  if\
    \ float_value > 0 then\n    return math.floor(float_value)\n  else\n    return\
    \ math.ceil(float_value)\n  end\nend", "    -- TODO: Add your solution here\n\
    end", "  local number = tonumber(value)\n  local floor_number = math.floor(number)\n\
    \  local diff = number - floor_number\n  if diff < 0.5 then\n    return floor_number\n\
    \  else\n    return floor_number + 1\n  end\nend", "  if not(value) then return\
    \ nil end\n  local v = tonumber(value)\n  local rounded = math.floor(v + 0.5)\n\
    \  return rounded\nend", "\treturn math.floor(tonumber(value) + 0.5)\nend", " \
    \ local fractional_part = value:match(\"%d+%.(%d+)\")\n  if fractional_part and\
    \ fractional_part ~= \"\" then\n    return math.ceil(value)\n  else\n    return\
    \ tonumber(value)\n  end\nend", "    return math.floor(value + 0.5)\nend", " \
    \ local n = tonumber(value)\n  local m = math.floor(n)\n  if (n > 0) then\n  \
    \  return (n - m < 0.5) and m or (m + 1)\n  else\n    return (n - m > 0.5) and\
    \ m or (m - 1)\n  end\nend", "    return tonumber(value)\nend", "  local num =\
    \ tonumber(value)\n  local int_num = math.tointeger(num)\n  local rounded_up =\
    \ math.ceil(num)\n  local rounded_down = math.floor(num)\n  if rounded_up == rounded_down\
    \ then\n    return int_num\n  elseif rounded_up == num then\n    return rounded_up\n\
    \  elseif rounded_down == num then\n    return rounded_down\n  elseif rounded_up\
    \ == rounded_down + 1 then\n    return rounded_up\n  elseif rounded_down == rounded_up\
    \ + 1 then\n    return rounded_down\n  elseif num - rounded_down < rounded_up\
    \ - num then\n    return rounded_down\n  else\n    return rounded_up\n  end\n\
    end", "  -- Your code here\nend", "  return math.floor(tonumber(value) + 0.5)\n\
    end", "    local x = tonumber(value)\n    if not x then return nil end\n    return\
    \ x >= 0 and math.floor(x + 0.5) or math.ceil(x - 0.5)\nend", "\treturn math.floor(tonumber(value)\
    \ + 0.5)\nend", "    local number = tonumber(value)\n    if number < 0 then\n\
    \        return math.ceil(number)\n    else\n        return math.floor(number)\n\
    \    end\nend", "  local n = tonumber(value)\n  if n == nil then\n    n = 0\n\
    \  end\n  return math.floor(n + 0.5)\nend", "    local x = tonumber(value)\n \
    \   local x1 = math.floor(x)\n    local x2 = math.ceil(x)\n    local c1 = math.abs(x\
    \ - x1)\n    local c2 = math.abs(x - x2)\n    if c1 == c2 then\n        return\
    \ x1\n    elseif c1 < c2 then\n        return x1\n    else\n        return x2\n\
    \    end\nend", "    -- parse the string into a number\n    local num = tonumber(value)\n\
    \    -- if the number is not a number then return nil\n    if num == nil then\n\
    \        return nil\n    end\n    -- if the number is an integer then just return\
    \ the number\n    if num == math.floor(num) then\n        return num\n    end\n\
    \    -- if the number is negative, round down and away from zero\n    if num <\
    \ 0 then\n        return math.floor(num)\n    end\n    -- if the number is positive,\
    \ round up and away from zero\n    return math.ceil(num)\nend", "  local number\
    \ = tonumber(value)\n  if number >= 0 then\n    return math.floor(number + 0.5)\n\
    \  else\n    return math.ceil(number - 0.5)\n  end\nend", "    return math.floor(value\
    \ + 0.5)\nend", end, "  return math.floor(value + 0.5)\nend", "    -- You could\
    \ use the *math.floor* or *math.ceil*\n    -- functions for the conversion\n \
    \   -- to integer.\n    return math.floor(value + 0.5)\nend", "    local sign\
    \ = value:match(\"^%-\") and -1 or 1\n    local c = tonumber(value) or 0\n   \
    \ local f = math.floor(c)\n    local d = math.abs(c-f)\n    if d == 0.5 then\n\
    \        f = f + sign\n    elseif d > 0.5 then\n        f = f + 1 * sign\n   \
    \ end\n    return f\nend", "    local num = tonumber(value)\n    if not num then\n\
    \        return nil\n    end\n    return math.floor(num + 0.5)\nend", "  return\
    \ tonumber(value)\nend", "    local number = tonumber(value)\n    if number then\n\
    \        return math.floor(number + 0.5)\n    end\nend", "  local f = tonumber(value)\n\
    \  return f >= 0 and math.floor(f + 0.5) or math.ceil(f - 0.5)\nend", "    return\
    \ math.floor(tonumber(value)+0.5)\nend", "    local number = tonumber(value)\n\
    \    if number % 1 > 0.5 then\n        return math.ceil(number)\n    else\n  \
    \      return math.floor(number)\n    end\nend\nassert(closest_integer(\"10\"\
    ) == 10)\nassert(closest_integer(\"15.3\") == 15)\nassert(closest_integer(\"-15.3\"\
    ) == -15)\nassert(closest_integer(\"14.5\") == 15)\nassert(closest_integer(\"\
    -14.5\") == -15)", "  return round(tonumber(value))\nend", "    return 0\nend",
  "    return math.floor(tonumber(value) + 0.5)\nend", "    local number = tonumber(value)\n\
    \    return math.ceil(number)\nend", "  local num = tonumber(value)\n  local val\
    \ = math.floor(num)", "  local number = tonumber(value)\n  assert(number ~= nil,\
    \ \"value must be a number, not \" .. value)\n  return math.floor(number + 0.5)\n\
    end", "\treturn math.floor(value + 0.5)\nend", "  return math.floor(tonumber(value)\
    \ + 0.5)\nend", "\treturn floor(tonumber(value) + 0.5)\nend", "    if string.find(value,\
    \ \".\", 1, true) then\n        local integer, decimal = string.match(value, \"\
    (%d+).(%d+)\")\n        local part_of_decimal = tonumber(string.sub(decimal, 1,\
    \ 1))\n        local closest_int = tonumber(integer)\n        if part_of_decimal\
    \ >= 5 then\n            closest_int = closest_int + 1\n        end\n        return\
    \ closest_int\n    else\n        return tonumber(value)\n    end\nend", "    return\
    \ math.floor(value + 0.5)\nend", "    local num = tonumber(value)\n    local i,\
    \ f = math.modf(num)\n    return num < 0 and i - 1 or f >= 0.5 and i + 1 or i\n\
    end", "  return math.floor(value + 0.5)\nend", "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "  -- your code here\nend", "  return math.floor(tonumber(value)\
    \ + 0.5)\nend", "  local n = tonumber(value)\n  local decimal = n - math.floor(n)\n\
    \  if decimal < 0.5 then\n    return math.floor(n)\n  else\n    return math.ceil(n)\n\
    \  end\nend", "    if type(value) ~= \"string\" then\n        return nil\n   \
    \ end\n    return math.floor(value + 0.5)\nend", end, "    return math.floor(value\
    \ + 0.5)\nend", "    return tonumber(string.format(\"%.0f\", value))\nend", " \
    \   -- your code here\n    local a, b = math.modf(value)\n    if a < b then\n\
    \        return a\n    else\n        return b\n    end\nend", "  local n = tonumber(value)\n\
    \  if n == nil then\n    return n\n  end\n  if n >= 0 then\n    return math.floor(n\
    \ + 0.5)\n  else\n    return math.ceil(n - 0.5)\n  end\nend", "\t-- ...\nend",
  "    local num = tonumber(value)\n    local x = num % 1\n    local z = num - x\n\
    \    if num >= 0 then\n        if x > 0.5 then\n            return z + 1\n   \
    \     else\n            return z\n        end\n    else\n        if x < -0.5 then\n\
    \            return z - 1\n        else\n            return z\n        end\n \
    \   end\nend", "\treturn 0\nend", "  -- Put your code here\nend", "  return math.tointeger(value)\n\
    end", "  -- Your code here\nend", "    return math.round(value)\nend", "  local\
    \ val = tonumber(value)\n  return val % 1 >= 0.5 and math.ceil(val) or math.floor(val)\n\
    end", "  local v = tonumber(value)\n  return v % 1 >= 0.5 and math.ceil(v) or\
    \ math.floor(v)\nend", "    local x = tonumber(value)\n    local r = math.floor(x\
    \ + 0.5)\n    if math.abs(x - r) == 0.5 then\n        if x < 0 then\n        \
    \    r = r - 1\n        else\n            r = r + 1\n        end\n    end\n  \
    \  return r\nend", "    return round(value)\nend", "  return math.floor(value\
    \ + 0.5)\nend", "  -- your code here\nend", "  -- Your solution here\nend", " \
    \   local number = tonumber(value)\n    local fraction = number - math.floor(number)\n\
    \    local result = math.floor(number)\n    if fraction > 0.5 then\n        result\
    \ = result + 1\n    end\n    return result\nend", "  return math.floor(tonumber(value)\
    \ + 0.5)\nend", "\treturn math.floor(value + 0.5)\nend", "    return assert(tonumber(value),\
    \ \"You should pass in a number!\")\nend", "    -- TODO: Implement this function.\n\
    end", "  return math.floor(value + 0.5)\nend", "    return math.tointeger(tonumber(value))\n\
    end", "  local x = tonumber(value)\n  return x > 0 and math.floor(x + 0.5) or\
    \ math.ceil(x - 0.5)\nend", "\tif value == \"0\" then\n\t\treturn 0\n\tend\n\t\
    local whole, fraction = value:match(\"(%-?%d+)%.(%d+)\")\n\tif not fraction then\n\
    \t\treturn tonumber(value)\n\tend\n\tif fraction >= \"5\" then\n\t\twhole = whole\
    \ + 1\n\tend\n\treturn tonumber(whole)\nend", "    return round(tonumber(value))\n\
    end", "  return math.floor(tonumber(value) + 0.5)\nend", "    local d = tonumber(value)\n\
    \    local n = math.floor(d)\n    local m = math.floor(d + 0.5)\n    if d - n\
    \ >= 0.5 then\n        return m\n    else\n        return n\n    end\nend", " \
    \ local c = tonumber(value)\n  return (c - c % 1)\nend", "  -- function body\n\
    end", "    local num = tonumber(value)\n    if num - math.floor(num) >= 0.5 then\n\
    \        return math.ceil(num)\n    else\n        return math.floor(num)\n   \
    \ end\nend", "  local number = tonumber(value)\n  return math.floor(number + 0.5)\n\
    end", "  return math.floor(value + 0.5)\nend", "    local float = tonumber(value)\n\
    \    local int = math.floor(float)\n    if float > int then\n        if float\
    \ - int < 0.5 then\n            return int\n        else\n            return int\
    \ + 1\n        end\n    elseif float < int then\n        if int - float < 0.5\
    \ then\n            return int\n        else\n            return int - 1\n   \
    \     end\n    else\n        return int\n    end\nend", end, "    return tonumber(value)\n\
    end", "  -- implement here\nend", "    local v = tonumber(value)\n    local i\
    \ = math.floor(v)\n    if v - i >= 0.5 then\n        return i + 1\n    else\n\
    \        return i\n    end\nend", "  -- Write your code here\nend", "  -- TODO:\
    \ implement this function body\nend", "    return math.floor(tonumber(value) +\
    \ 0.5)\nend", "  return math.floor(tonumber(value) + 0.5)\nend", "    return math.floor(value\
    \ + 0.5)\nend", "  return 0\nend", "  return math.floor(tonumber(value)+0.5)\n\
    end", "    local n = tonumber(value)\n    if n > 0 then\n        return math.floor(n\
    \ + 0.5)\n    else\n        return math.ceil(n - 0.5)\n    end\nend", "  local\
    \ number = tonumber(value)\n  local m = math.floor(number)\n  local n = math.ceil(number)\n\
    \  if math.abs(number - m) < math.abs(number - n) then\n    return m\n  else\n\
    \    return n\n  end\nend", "    if string.find(value, '%.') then\n        value\
    \ = string.sub(value, 0, string.find(value, '%.') - 1)\n    end\n    return tonumber(value)\n\
    end", "    -- Your code here\nend", "    -- local res = 0\n    -- local closest\
    \ = math.abs(value - res)\n    -- for i = 1, math.abs(value) do\n    --     local\
    \ new_closest = math.abs(value - i)\n    --     if new_closest < closest then\n\
    \    --         closest = new_closest\n    --         res = i\n    --     end\n\
    \    -- end\n    -- if value < 0 then\n    --     res = -res\n    -- end\n   \
    \ -- return res\n    local val = tonumber(value)\n    if val > 0 then\n      \
    \  return math.floor(val + 0.5)\n    else\n        return math.ceil(val - 0.5)\n\
    \    end\nend", "    return math.tointeger(math.max(math.floor(value), math.ceil(value)))\n\
    end", "  local n = tonumber(value)\n  return n < 0 and math.ceil(n) or math.floor(n)\n\
    end", "  local int = tonumber(value)\n  return math.floor(int + 0.5)\nend", " \
    \ local x = tonumber(value)\n  local y = math.floor(x)\n  if x == y then\n   \
    \ return y\n  elseif x > y then\n    return math.ceil(x)\n  else\n    return math.floor(x)\n\
    \  end\nend", "  return tonumber(value)\nend", "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    -- your code here\n    return value\nend", "    local x =\
    \ tonumber(value)\n    local i = math.floor(x)\n    local d = x - i\n    if d\
    \ >= 0.5 then\n        return i + 1\n    else\n        return i\n    end\nend",
  "    -- TODO: add your code here\nend", "    local value = tonumber(value)\n   \
    \ local integer = math.floor(value)\n    local decimal = value - integer\n   \
    \ if decimal < 0.5 then\n        return integer\n    else\n        return integer\
    \ + 1\n    end\nend", "\treturn math.floor(value + 0.5)\nend", "  local number\
    \ = tonumber(value)\n  assert(number, \"no number\")\n  if number < 0 then\n \
    \   return math.ceil(number)\n  else\n    return math.floor(number)\n  end\nend",
  "  if type(value) ~= \"string\" then\n    return nil\n  end\n  return math.floor(tonumber(value)\
    \ + 0.5)\nend", "  local v = tonumber(value)\n  if v == math.floor(v) then\n \
    \   return v\n  else\n    return math.floor(v + 0.5)\n  end\nend", end, "  return\
    \ 0\nend", "  return math.floor(value + 0.5)\nend", "  local num = tonumber(value)\n\
    \  return math.floor(num + 0.5)\nend", "  local number = tonumber(value)\n  if\
    \ number > 0 then\n    return math.floor(number + 0.5)\n  else\n    return math.ceil(number\
    \ - 0.5)\n  end\nend", "\tlocal result = math.floor(value)", "\t--[[\n\t\t:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:",
  "    return value\nend", "    local num = tonumber(value)\n    if num < 0 then\n\
    \        return math.ceil(num)\n    else\n        return math.floor(num)\n   \
    \ end\nend", "  return math.floor(tonumber(value) + 0.5)\nend", "  local fractional_part\
    \ = value - math.floor(value)\n  if fractional_part == 0.5 then\n    return value\
    \ >= 0 and math.ceil(value) or math.floor(value)\n  elseif fractional_part > 0.5\
    \ then\n    return math.ceil(value)\n  else\n    return math.floor(value)\n  end\n\
    end", "  local value_num = tonumber(value)\n  if value_num == nil then\n    return\
    \ nil\n  end\n  if value_num < 0 then\n    return math.ceil(value_num)\n  else\n\
    \    return math.floor(value_num)\n  end\nend", "  -- write your code here\nend",
  "  local parsed = tonumber(value)\n  if parsed > 0 then\n    return math.floor(parsed)\n\
    \  else\n    return math.ceil(parsed)\n  end\nend", "  return math.round(tonumber(value))\n\
    end", end, "    return math.floor(value+0.5)\nend", "    -- TODO: implement this\
    \ function\nend", "    local val = tonumber(value)\n    if val < 0 then\n    \
    \    return math.ceil(val)\n    else\n        return math.floor(val)\n    end\n\
    end", "  -- Your code here\nend", "  local n = math.floor(tonumber(value) + 0.5)\n\
    \  return n\nend", "  -- your code here\nend", "  -- Code the function here\n\
    end", "  local num = tonumber(value)\n  if not num then return nil end\n  if num\
    \ % 1 == 0 then return num end\n  local pos = math.floor(num)\n  local neg = math.ceil(num)\n\
    \  if num < 0 then return neg end\n  return pos\nend", "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    local float_value = tonumber(value)\n    local fractional,\
    \ integer = math.modf(float_value)\n    if fractional < 0.5 then\n        return\
    \ integer\n    else\n        return integer + 1\n    end\nend", "    local num\
    \ = tonumber(value)\n    local int = math.floor(num)\n    if (num == int) then\n\
    \        return int\n    elseif (math.abs(num - int) < 0.5) then\n        return\
    \ int\n    else\n        return int + 1\n    end\nend", "  return math.floor(tonumber(value)\
    \ + 0.5)\nend", "  return math.floor(tonumber(value) + 0.5)\nend", "  local v\
    \ = tonumber(value)\n  if v >= 0 then\n    return math.floor(v + 0.5)\n  else\n\
    \    return math.ceil(v - 0.5)\n  end\nend", "    local f = tonumber(value)\n\
    \    return f % 1 >= 0.5 and math.ceil(f) or math.floor(f)\nend", "    -- your\
    \ code here\n    return nil\nend", "\tif value == nil then return 0 end\n\tif\
    \ type(value) ~= \"string\" then return 0 end\n\treturn math.floor(tonumber(value)\
    \ + 0.5)\nend", "  return (value == nil) and 0 or (round(tonumber(value),0))\n\
    end", "    local r = math.round(value)\n    return r\nend", "    local value =\
    \ tonumber(value)\n    if value >= 0 then\n        return math.floor(value + 0.5)\n\
    \    else\n        return math.ceil(value - 0.5)\n    end\nend", "    local n\
    \ = tonumber(value)\n    if n < 0 then\n        n = n - 0.5\n    else\n      \
    \  n = n + 0.5\n    end\n    return math.floor(n)\nend", "    if not value then\n\
    \        return 0\n    end\n    local num = tonumber(value)\n    if not num then\n\
    \        return 0\n    end\n    local i, f = math.modf(num)\n    if f >= 0.5 then\n\
    \        return i + 1\n    else\n        return i\n    end\nend", "  return math.floor(value\
    \ + 0.5)\nend", "  if not value then\n    return nil\n  end\n  local number =\
    \ tonumber(value)\n  if number then\n    return math.floor(number + 0.5)\n  end\n\
    \  return nil\nend", "  value = tonumber(value)\n  local floor = math.floor(value)\n\
    \  local ceiling = math.ceil(value)\n  if value - floor < ceiling - value then\n\
    \    return floor\n  else\n    return ceiling\n  end\nend", "\tlocal number =\
    \ tonumber(value)\n\tlocal closest = math.floor(number)\n\tif math.ceil(number)\
    \ - number < number - closest then\n\t\tclosest = math.ceil(number)\n\tend\n\t\
    return closest\nend", "    local num = tonumber(value)\n    if num - math.floor(num)\
    \ > 0.5 then\n        return math.ceil(num)\n    else\n        return math.floor(num)\n\
    \    end\nend", "  -- Implement this!\nend", "  return math.floor(value + 0.5)\n\
    end", "  return 0\nend", "    return math.floor(value + 0.5)\nend", "    -- Some\
    \ people don't like the math library, but I like it!\n    return math.floor(value\
    \ + 0.5)\nend", "  -- Insert code here\nend", "    local number = tonumber(value)\n\
    \    if number < 0 then\n        return -math.floor(-number + 0.5)\n    else\n\
    \        return math.floor(number + 0.5)\n    end\nend", "    local int, frac\
    \ = math.modf(tonumber(value))\n    if frac > 0.5 then\n        return int + 1\n\
    \    elseif frac < -0.5 then\n        return int - 1\n    else\n        return\
    \ int\n    end\nend", "  local number = tonumber(value)\n  local integer = math.floor(number)\n\
    \  local remainder = number - integer\n  if remainder < 0.5 then\n    return integer\n\
    \  else\n    return integer + 1\n  end\nend", "  return math.floor(value+0.5)\n\
    end", "  local number = tonumber(value)\n  if number > 0 then\n    return math.floor(number\
    \ + 0.5)\n  else\n    return math.ceil(number - 0.5)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
