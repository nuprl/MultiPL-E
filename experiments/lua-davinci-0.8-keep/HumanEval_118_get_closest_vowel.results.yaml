name: HumanEval_118_get_closest_vowel
language: lua
results:
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    local len = #word\n    for i = 1, len - 1 do\n        if (consonants:find(word:sub(i,\
    \ i), 1, true) and\n            vowels:find(word:sub(i + 1, i + 1), 1, true))\
    \ then\n            return word:sub(i + 1, i + 1)\n        end\n    end\n    return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cmz3b5u.lua:27:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmp6cmz3b5u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  return word:gsub(\".*([aeiouAEIOU]).*\", \"%1\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mukfvs8.lua:20:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp2mukfvs8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- returns the index of the first vowel in word that is between\n    -- two\
    \ consonants (not counting the first and last characters)\n    local function\
    \ get_vowel_index(word)\n        for i = 2, word:len() - 1 do\n            local\
    \ previous_character = word:sub(i - 1, i - 1)\n            local current_character\
    \ = word:sub(i, i)\n            local next_character = word:sub(i + 1, i + 1)\n\
    \            if current_character:match(\"[aeiou]\") and\n                not\
    \ previous_character:match(\"[aeiou]\") and\n                not next_character:match(\"\
    [aeiou]\") then\n                return i\n            end\n        end\n    \
    \    return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdjtdxws_.lua:46: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    if not word then return \"\" end\n    local vowels = \"aeiouAEIOU\"\n   \
    \ local cons = \"[^aeiouAEIOU]+\"\n    local first, second, rest = word:match(\"\
    (\"..cons..\")?([\"..vowels..\"])(\"..cons..\")\")\n    if second then\n     \
    \   return second\n    else\n        return \"\"\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe3bdz0h.lua:26:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbe3bdz0h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"AEIOUaeiou\"\n\tlocal out = \"\"\n\t\n\t-- simple solution\
    \ that is not optimal\n\tfor i = word:len(), 2, -1 do\n\t\tlocal vowel = word:sub(i,\
    \ i)\n\t\tlocal prev = word:sub(i - 1, i - 1)\n\t\tlocal after = word:sub(i +\
    \ 1, i + 1)\n\t\tif vowels:find(vowel) and not vowels:find(prev) and not vowels:find(after)\
    \ then\n\t\t\tout = vowel\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\treturn out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowel = {'a', 'e', 'i', 'o', 'u'}\n    local chars = {}\n    for i\
    \ = 1, #word do\n        table.insert(chars, word:sub(i, i))\n    end\n    local\
    \ distance = {}\n    for i = #chars, 2, -1 do\n        if not (table.contains(vowel,\
    \ chars[i]) or table.contains(vowel, chars[i - 1])) then\n            table.insert(distance,\
    \ {chars[i], #chars - i})\n        end\n    end\n    table.sort(distance, function(a,\
    \ b) return a[2] < b[2] end)\n    if #distance == 0 then\n        return ''\n\
    \    else\n        return distance[1][1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gs5jzed.lua:19:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp5gs5jzed.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp5gs5jzed.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tfor i = #word, 2, -1 do\n\t\tif string.find(\"aeiou\", word:sub(i, i)) and\n\
    \t\t   not string.find(\"aeiou\", word:sub(i - 1, i - 1)) and\n\t\t   not string.find(\"\
    aeiou\", word:sub(i + 1, i + 1)) then\n\t\t\treturn word:sub(i, i)\n\t\tend\n\t\
    end\n\treturn \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhn5ikoo.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnhn5ikoo.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    if type(word) ~= \"string\" then return nil end\n    local vowels = { [\"\
    a\"] = true, [\"e\"] = true, [\"i\"] = true, [\"o\"] = true, [\"u\"] = true }\n\
    \    local wordLen = #word\n    local prevConsonant, nextConsonant\n    for i\
    \ = wordLen, 1, -1 do\n        local currChar = word:sub(i, i)\n        local\
    \ prevConsonant = word:sub(i - 1, i - 1)\n        local nextConsonant = word:sub(i\
    \ + 1, i + 1)\n        if vowels[currChar] and not vowels[prevConsonant] and not\
    \ vowels[nextConsonant] then\n            return currChar\n        end\n    end\n\
    \    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dncm0_f.lua:33:\
    \ expected: \"\"\nactual: \"e\"\nstack traceback:\n\t/tmp/tmp1dncm0_f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    if word == nil then\n        return nil\n    end\n    local vowels = {[\"\
    a\"] = true, [\"e\"] = true, [\"i\"] = true, [\"o\"] = true, [\"u\"] = true}\n\
    \    local closest_vowel = \"\"\n    local closest_vowel_index = -1\n    local\
    \ prev_char_is_vowel = false\n    for i = 1, #word do\n        local current_char\
    \ = word:sub(i, i)\n        if vowels[current_char] then\n            if not prev_char_is_vowel\
    \ then\n                closest_vowel = current_char\n                closest_vowel_index\
    \ = i\n            end\n            prev_char_is_vowel = true\n        else\n\
    \            prev_char_is_vowel = false\n        end\n    end\n    if closest_vowel_index\
    \ == -1 then\n        return \"\"\n    end\n    return closest_vowel\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w3k06_7.lua:42:\
    \ expected: \"\"\nactual: \"e\"\nstack traceback:\n\t/tmp/tmp2w3k06_7.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local rword = string.reverse(word)\n\
    \  local rvowel = ''\n  for i = 1, #rword do\n    for _, vowel in ipairs(vowels)\
    \ do\n      if rword:sub(i, i) == vowel then\n        rvowel = vowel\n       \
    \ break\n      end\n    end\n    if rvowel ~= '' then\n      break\n    end\n\
    \  end\n  if rvowel == '' then\n    return ''\n  end\n  local vowel = string.reverse(rvowel)\n\
    \  local close_vowel = ''\n  local prev_is_consonant = false\n  for i = 1, #word\
    \ do\n    if word:sub(i, i) == vowel then\n      if prev_is_consonant then\n \
    \       close_vowel = vowel\n        break\n      end\n    else\n      prev_is_consonant\
    \ = true\n    end\n  end\n  return close_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz42x0t3.lua:50:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmptz42x0t3.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local found = \"\"\
    \n    for i=#word, 1, -1 do\n        local c = word:sub(i,i)\n        if table.contains(vowels,\
    \ c) then\n            if #found == 0 then\n                if i > 1 and i < #word\
    \ then\n                    local prev = word:sub(i-1,i-1)\n                 \
    \   local next = word:sub(i+1,i+1)\n                    if not table.contains(vowels,\
    \ prev) and\n                        not table.contains(vowels, next) then\n \
    \                       found = c\n                    end\n                end\n\
    \            end\n        end\n    end\n    return found\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8mwgwgh.lua:16:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpn8mwgwgh.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpn8mwgwgh.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_table = {}\n    for i = 1,\
    \ #vowels do\n        vowels_table[vowels:sub(i, i)] = i\n    end\n    local closest_vowel\
    \ = \"\"\n    local closest_i = math.huge\n    for i = #word - 1, 1, -1 do\n \
    \       local ch = word:sub(i, i)\n        if not vowels_table[ch] then\n    \
    \        local next_vowel = word:sub(i + 1, i + 1)\n            if vowels_table[next_vowel]\
    \ then\n                if closest_i - i < 2 then\n                    return\
    \ \"\"\n                end\n                closest_vowel = next_vowel\n    \
    \            closest_i = i\n            end\n        end\n    end\n    return\
    \ closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdtr_6ig.lua:38:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpbdtr_6ig.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \t-- code here\n\tlocal consonants = {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'}\n\
    \tfor i = #word, 1, -1 do\n\t\tfor j = 1, #consonants do\n\t\t\tif word:find(consonants[j],\
    \ i) then\n\t\t\t\tlocal found_consonant = true\n\t\t\t\tlocal start = word:find(consonants[j],\
    \ i)\n\t\t\t\tfor k = start - 1, 1, -1 do\n\t\t\t\t\tfor h = 1, #consonants do\n\
    \t\t\t\t\t\tif word:find(consonants[h], k) then\n\t\t\t\t\t\t\tfound_consonant\
    \ = false\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tif found_consonant\
    \ then\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif found_consonant\
    \ then\n\t\t\t\t\tfor k = start - 1, 1, -1 do\n\t\t\t\t\t\tif word:find('a', k)\
    \ or word:find('e', k) or word:find('i', k) or word:find('o', k) or word:find('u',\
    \ k) then\n\t\t\t\t\t\t\treturn word:sub(k, k)\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8i2rrutc.lua:46:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8i2rrutc.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- code here\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8jyzpp9.lua:19:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpo8jyzpp9.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  --..your code here..\n  local lookup = {a = 1, e = 1, i = 1, o = 1, u = 1,\
    \ A = 1, E = 1, I = 1, O = 1, U = 1}\n  local consonants = {}\n  local closest_vowel\
    \ = \"\"\n  local last_consonant = \"\"\n  local i = #word\n  while i >= 1 do\n\
    \    if not lookup[word:sub(i, i)] then\n      consonants[#consonants + 1] = word:sub(i,\
    \ i)\n    else\n      if #consonants > 0 then\n        closest_vowel = word:sub(i,\
    \ i)\n        break\n      end\n    end\n    i = i - 1\n  end\n  return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nhta3nf.lua:37:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp8nhta3nf.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local cidx = 0\n    for i=1,#word do\n        local c = word:sub(i,i)\n \
    \       if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n   \
    \         cidx = i\n        end\n    end\n    if cidx == 0 then\n        return\
    \ ''\n    end\n    return word:sub(cidx,cidx)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdotfrkq.lua:30:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpxdotfrkq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9c3p6pw.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpv9c3p6pw.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal target = nil\n\tfor i = #word - 1, 2, -1 do\n\t\tif is_vowel(word:sub(i,\
    \ i)) then\n\t\t\ttarget = i\n\t\t\tbreak\n\t\tend\n\tend\n\tif target then\n\t\
    \tfor i = target, 2, -1 do\n\t\t\tif not is_vowel(word:sub(i - 1, i - 1)) then\n\
    \t\t\t\treturn word:sub(i, i)\n\t\t\tend\n\t\tend\n\tend\n\treturn \"\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_o9jome.lua:14:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp3_o9jome.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp3_o9jome.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal search = string.match(word, '([^aeiou]*[aeiou].*[^aeiou])')\n\treturn\
    \ search and string.match(search, '[aeiou]([^aeiou]*)$') or ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgoxckudu.lua:19:\
    \ expected: \"u\"\nactual: \"rt\"\nstack traceback:\n\t/tmp/tmpgoxckudu.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tword = word:lower()\n\tlocal prev, next = nil, nil\n\tlocal length = word:len()\n\
    \tfor i = length, 1, -1 do\n\t\tif not prev and word:find(\"[aeiou]\", i) then\n\
    \t\t\tprev = word:sub(i, i)\n\t\telseif not next and word:find(\"[^aeiou]\", i)\
    \ then\n\t\t\tnext = prev\n\t\t\tprev = nil\n\t\tend\n\t\tif prev and next then\n\
    \t\t\treturn next\n\t\tend\n\tend\n\treturn \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkhov44v.lua:33:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqkhov44v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local len = word:len()\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1qwr82fo.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- Write your code here\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"\
    }\n    cons = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\",\
    \ \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"}\n    vowels_pos = {}\n    cons_pos = {}\n    for i = 1, #word do\n  \
    \      for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j] then\n\
    \                table.insert(vowels_pos, i)\n            end\n        end\n \
    \       for j = 1, #cons do\n            if word:sub(i, i) == cons[j] then\n \
    \               table.insert(cons_pos, i)\n            end\n        end\n    end\n\
    \    if #vowels_pos == 0 or #cons_pos == 0 then\n        return \"\"\n    end\n\
    \    right_pos = 0\n    for i = #cons_pos, 1, -1 do\n        if cons_pos[i] >\
    \ right_pos then\n            right_pos = cons_pos[i]\n        end\n    end\n\
    \    if right_pos > vowels_pos[#vowels_pos] then\n        return \"\"\n    end\n\
    \    min_gap = 100\n    res = \"\"\n    for i = 1, #vowels_pos do\n        if\
    \ vowels_pos[i] - right_pos < min_gap then\n            min_gap = vowels_pos[i]\
    \ - right_pos\n            res = vowels[i]\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvftrxsj.lua:55:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphvftrxsj.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  \n  local vowel = \"aieouAIEOU\"\n  local lv = string.len(vowel)\n  local function\
    \ is_vowel(c)\n    for i = 1, lv do\n      if c == string.sub(vowel, i, i) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  \n  local\
    \ lw = string.len(word)\n  local p = lw\n  while p > 0 do\n    local c = string.sub(word,\
    \ p, p)\n    if is_vowel(c) then\n      if p + 1 <= lw then\n        if not is_vowel(string.sub(word,\
    \ p + 1, p + 1)) then\n          return c\n        end\n      end\n      if p\
    \ - 1 > 0 then\n        if not is_vowel(string.sub(word, p - 1, p - 1)) then\n\
    \          return c\n        end\n      end\n    end\n    p = p - 1\n  end\n \
    \ \n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrauf_oz.lua:51:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpwrauf_oz.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    for i = #word, 1, -1 do\n        if string.find(\"AEIOUaeiou\", word:sub(i,\
    \ i)) then\n            if i < #word and not string.find(\"AEIOUaeiou\", word:sub(i\
    \ + 1, i + 1)) then\n                return word:sub(i, i)\n            end\n\
    \        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b6jbqb4.lua:27:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp9b6jbqb4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local result = nil\n\
    \  for i = string.len(word), 1, -1 do\n    local char = string.sub(word, i, i)\n\
    \    if table.contains(vowels, char) then\n      local prevChar = string.sub(word,\
    \ i - 1, i - 1)\n      if prevChar ~= nil and not table.contains(vowels, prevChar)\
    \ then\n        result = char\n        break\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6bjxwh9.lua:16:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpf6bjxwh9.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpf6bjxwh9.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- Write your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local last_vowel = ''\n    local last_consonant = ''\n    for i = #word, 1,\
    \ -1 do\n        if is_vowel(word[i]) then\n            last_vowel = word[i]\n\
    \        else\n            last_consonant = word[i]\n            break\n     \
    \   end\n    end\n    for i = #word, 1, -1 do\n        if not is_vowel(word[i])\
    \ and last_vowel then\n            return last_vowel\n        end\n        if\
    \ is_vowel(word[i]) then\n            last_vowel = word[i]\n        else\n   \
    \         last_consonant = word[i]\n        end\n    end\n    return ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0wjfd3jk.lua:17:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp0wjfd3jk.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp0wjfd3jk.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  if word == nil then\n    return nil\n  end\n  if word == \"\" then\n    return\
    \ \"\"\n  end\n  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local consonants\
    \ = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n \
    \ local found_consonant = false\n  local dist = math.huge\n  local closest_vowel\
    \ = \"\"\n  for i = #word, 1, -1 do\n    local c = word:sub(i, i)\n    local is_vowel\
    \ = false\n    for j = 1, #vowels do\n      if c == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      if found_consonant\
    \ then\n        local cur_dist = #word - i\n        if cur_dist < dist then\n\
    \          dist = cur_dist\n          closest_vowel = c\n        end\n      end\n\
    \    else\n      local is_consonant = false\n      for j = 1, #consonants do\n\
    \        if c == consonants[j] then\n          is_consonant = true\n         \
    \ break\n        end\n      end\n      if is_consonant then\n        found_consonant\
    \ = true\n      end\n    end\n  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m3e_n_7.lua:61:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp2m3e_n_7.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local last_consonant\
    \ = ''\n  local closest_vowel = ''\n  for idx, char in ipairs(word) do\n    for\
    \ _, vowel in ipairs(vowels) do\n      if char == vowel then\n        if #last_consonant\
    \ > 0 then\n          if #closest_vowel == 0 then\n            closest_vowel =\
    \ char\n          elseif idx - last_consonant:len() < closest_vowel:len() then\n\
    \            closest_vowel = char\n          end\n        end\n      else\n  \
    \      last_consonant = char\n      end\n    end\n  end\n  return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6q2safw.lua:36:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpc6q2safw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_yj1uq2.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpj_yj1uq2.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  for i=#word,2,-1 do\n    local c = word:sub(i,i)\n    if is_vowel(c) then\n\
    \      if is_consonant(word:sub(i-1,i-1)) and is_consonant(word:sub(i+1,i+1))\
    \ then\n        return c\n      end\n    end\n  end\n  return \"\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdo9dutfh.lua:14:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpdo9dutfh.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpdo9dutfh.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6h0yys_.lua:17:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpz6h0yys_.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  for i = string.len(word),\
    \ 1, -1 do\n    local char = string.sub(word, i, i)\n    for k, v in pairs(vowels)\
    \ do\n      if v == char then\n        local left_of_vowel = string.sub(word,\
    \ i-1, i-1)\n        local right_of_vowel = string.sub(word, i+1, i+1)\n     \
    \   if not left_of_vowel:match(\"[aeiou]\") and not right_of_vowel:match(\"[aeiou]\"\
    ) then\n          return char\n        end\n      end\n    end\n  end\n  return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_tyigmh.lua:35:\
    \ expected: \"\"\nactual: \"e\"\nstack traceback:\n\t/tmp/tmp9_tyigmh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- A short solution with string.match\n    -- return string.match(word, \"\
    .-([aeiouAEIOU])[^aeiouAEIOU]*$\") or \"\"\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm4pehsrz.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidine3ip.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpidine3ip.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzlhmgem.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmzlhmgem.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0aw9jsx.lua:19:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpi0aw9jsx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    return word:match(\".*([aeiou]).*[^aeiou]\") or \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4mkldnw.lua:20:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpa4mkldnw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local closest_vowel = ''\n    local closest_vowel_distance = 0\n    local\
    \ last_char = ''\n    local found_consonant = false\n    local distance = 0\n\
    \    local is_consonant = function(char)\n        if char == 'A' or char == 'E'\
    \ or char == 'I' or char == 'O' or char == 'U' then\n            return false\n\
    \        else\n            return true\n        end\n    end\n    for index =\
    \ string.len(word), 1, -1 do\n        local char = string.sub(word, index, index)\n\
    \        if is_consonant(char) then\n            if found_consonant then\n   \
    \             if closest_vowel_distance == 0 or distance < closest_vowel_distance\
    \ then\n                    closest_vowel = last_char\n                    closest_vowel_distance\
    \ = distance\n                end\n                break\n            else\n \
    \               found_consonant = true\n            end\n        else\n      \
    \      if found_consonant then\n                distance = distance + 1\n    \
    \        end\n        end\n        last_char = char\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96p0nz18.lua:49:\
    \ expected: \"u\"\nactual: \"t\"\nstack traceback:\n\t/tmp/tmp96p0nz18.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal distance, vowel = 0, \"\"\n\tword:gsub(\"(%a+)\", function(w)\n\t\tfor\
    \ i=1, #w do\n\t\t\tlocal l = w:sub(i, i)\n\t\t\tif 'aeiouAEIOU' : find(l) then\n\
    \t\t\t\tlocal n = #w - i + 1\n\t\t\t\tif distance == 0 or n < distance then\n\t\
    \t\t\t\tdistance, vowel = n, l\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend)\n\treturn\
    \ vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpufnna8hu.lua:16: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local cvowel = \"\
    \"\n    local found = false\n    local lword = string.lower(word)\n    local lcount\
    \ = string.len(lword)\n    local i\n    for i = lcount, 1, -1 do\n        local\
    \ c = string.sub(lword, i, i)\n        if c == \"a\" or c == \"e\" or c == \"\
    i\" or c == \"o\" or c == \"u\" then\n            cvowel = c\n            found\
    \ = true\n        elseif found then\n            return string.upper(cvowel)\n\
    \        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q3bep9f.lua:33:\
    \ expected: \"u\"\nactual: \"U\"\nstack traceback:\n\t/tmp/tmp_q3bep9f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = \"aeiouAEIOU\"\n   local idx, vowel, pos\n   for i = word:len(),\
    \ 1, -1 do\n      if word:sub(i, i):match(\"[aeiouAEIOU]\") then\n         if\
    \ vowel == nil then\n            vowel = word:sub(i, i)\n            pos = i\n\
    \         end\n      else\n         if vowel ~= nil then\n            return vowel\n\
    \         end\n      end\n   end\n   return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxz_83jog.lua:36:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmpxz_83jog.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tfor i = #word, 1, -1 do\n\t\tif string.find(\"aeiou\", word:sub(i, i)) then\n\
    \t\t\treturn word:sub(i, i)\n\t\tend\n\tend\n\treturn \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g9mraut.lua:25:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp9g9mraut.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {a = true, e = true, i = true, o = true, u = true, A = true,\
    \ E = true, I = true, O = true, U = true}\n  local l, r = #word, 1\n  while l\
    \ > r do\n    if vowels[word:sub(l, l)] and vowels[word:sub(r, r)] then\n    \
    \  return \"\"\n    elseif vowels[word:sub(l, l)] then\n      return word:sub(l,\
    \ l)\n    elseif vowels[word:sub(r, r)] then\n      return word:sub(r, r)\n  \
    \  end\n    l, r = l - 1, r + 1\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1svzqcb.lua:30:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpb1svzqcb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowel_counter =\
    \ 1\n\tlocal consonant_counter = 0\n\tfor i = #word, 1, -1 do\n\t\tfor j = 1,\
    \ #vowels do\n\t\t\tif word:sub(i, i) == vowels[j] then\n\t\t\t\tif vowel_counter\
    \ == 1 then\n\t\t\t\t\treturn word:sub(i, i)\n\t\t\t\telseif vowel_counter > 1\
    \ and consonant_counter > 0 then\n\t\t\t\t\treturn word:sub(i, i)\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\t\tconsonant_counter = consonant_counter + 1\n\t\tvowel_counter\
    \ = vowel_counter + 1\n\tend\n\treturn \"\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsg1zq09_.lua:36:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpsg1zq09_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local res = \"\"\n    local pos = 0\n    local vowels = { [\"a\"] = true,\
    \ [\"e\"] = true, [\"i\"] = true, [\"o\"] = true, [\"u\"] = true, [\"A\"] = true,\
    \ [\"E\"] = true, [\"I\"] = true, [\"O\"] = true, [\"U\"] = true }\n    for i\
    \ = #word, 1, -1 do\n        if vowels[word:sub(i, i)] then\n            if pos\
    \ ~= 0 then\n                res = word:sub(i, i)\n                break\n   \
    \         end\n        else\n            pos = pos + 1\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9542417f.lua:33:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp9542417f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {['a'] = true, ['e'] = true, ['i'] = true, ['o'] = true, ['u']\
    \ = true}\n  local last_consonant = ''\n  local last_vowel = ''\n  for i=#word,\
    \ 1, -1 do\n    local c = word:sub(i,i)\n    if not vowels[c] then\n      last_consonant\
    \ = c\n    else\n      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmsthydt.lua:32:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpgmsthydt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = \"aeiouAEIOU\"\n   local cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n   local got = false\n   local res = \"\"\n   for i = #word, 1, -1 do\n    \
    \  if vowels:find(word:sub(i, i)) then\n         got = false\n      elseif not\
    \ got and cons:find(word:sub(i, i)) then\n         got = true\n         res =\
    \ word:sub(i+1, i+1)\n      end\n   end\n   return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05q15dy8.lua:30:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmp05q15dy8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local function findVowel(c)\n    return c:find(\"[aeiouAEIOU]\")\n  end\n \
    \ for i=#word, 2, -1 do\n    if findVowel(word:sub(i,i)) then\n      if findVowel(word:sub(i-1,i-1))\
    \ then\n        break\n      else\n        return word:sub(i,i)\n      end\n \
    \   end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h8obhkr.lua:34:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmp_h8obhkr.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  for i = word:len(), 1, -1 do\n    if word:sub(i, i):match(\"[aeiou]\") then\n\
    \      if word:sub(i - 1, i - 1):match(\"[aeiou]\") then\n        -- Do nothing,\
    \ this is a double vowel\n      elseif word:sub(i + 1, i + 1):match(\"[aeiou]\"\
    ) then\n        -- do nothing, this is a double vowel\n      else\n        return\
    \ word:sub(i, i)\n      end\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcz9jj1as.lua:32:\
    \ expected: \"\"\nactual: \"e\"\nstack traceback:\n\t/tmp/tmpcz9jj1as.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {a = 1, e = 1, i = 1, o = 1, u = 1, y = 1}\n  local last_is_vowel\
    \ = true\n  local last_vowel = \"\"\n  for i = #word, 1, -1 do\n    local c =\
    \ word:sub(i, i)\n    if vowels[c:lower()] then\n      if not last_is_vowel then\n\
    \        return c\n      end\n      last_vowel = c\n    else\n      last_is_vowel\
    \ = false\n    end\n  end\n  return last_vowel\nend\nprint(get_closest_vowel(\"\
    \"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"l\"))\nprint(get_closest_vowel(\"\
    quick\"))\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"O\"\
    ))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"ab\"))\nprint(get_closest_vowel(\"\
    aBa\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "\na\n\ni\nu\nO\nU\na\na\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmphdc12_s3.lua:43: expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmphdc12_s3.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    if word then\n        local vowels = {'a', 'e', 'i', 'o', 'u'}\n        local\
    \ result = ''\n        for i = #word, 1, -1 do\n            if string.find(vowels,\
    \ word:sub(i, i)) then\n                for j = i, 2, -1 do\n                \
    \    if not string.find(vowels, word:sub(j, j)) then\n                       \
    \ result = word:sub(i, i)\n                        break\n                   \
    \ end\n                end\n            end\n        end\n        return result\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6kv2svq.lua:16:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpg6kv2svq.lua:16: in local 'candidate'\n\t/tmp/tmpg6kv2svq.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zeswzfa.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0zeswzfa.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  if word:match(\"[^%a]\") then return \"\" end\n  local v = \"\"\n  for i =\
    \ #word, 2, -1 do\n    local c = word:sub(i, i)\n    if c == \"a\" or c == \"\
    e\" or c == \"i\" or c == \"o\" or c == \"u\" or c == \"A\" or c == \"E\" or c\
    \ == \"I\" or c == \"O\" or c == \"U\" then\n      if word:sub(i - 1, i - 1):match(\"\
    [^%a]\") and word:sub(i + 1, i + 1):match(\"[^%a]\") then\n        v = c\n   \
    \     break\n      end\n    end\n  end\n  return v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2hrd1wy.lua:29:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpq2hrd1wy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local cons = {}\n  for\
    \ i = 1, string.len(word) do\n    if not table.search(vowels, string.sub(word,\
    \ i, i)) then\n      table.insert(cons, i)\n    end\n  end\n  if #cons == 0 then\
    \ return \"\" end\n  local cons_i = cons[#cons]\n  for i = cons_i, string.len(word)\
    \ do\n    if table.search(vowels, string.sub(word, i, i)) then\n      return string.sub(word,\
    \ i, i)\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptetdiu8m.lua:15:\
    \ attempt to call a nil value (field 'search')\nstack traceback:\n\t/tmp/tmptetdiu8m.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmptetdiu8m.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\t\n\tfor i = word:len(), 1, -1 do\n\
    \t\tlocal c = word:sub(i, i)\n\t\tif table.index_of(vowels, c) then\n\t\t\treturn\
    \ c\n\t\tend\n\tend\n\t\n\treturn ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdf_3w12.lua:16:\
    \ attempt to call a nil value (field 'index_of')\nstack traceback:\n\t/tmp/tmpjdf_3w12.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpjdf_3w12.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  \n  -- Extract the vowels from the word.\n  local vowels = string.gsub(word,\
    \ \"[^AEIOUaeiou]\", \"\")\n  \n  -- If the word contains no vowels, it can't\
    \ contain a vowel between two consonants.\n  if #vowels == 0 then\n    return\
    \ \"\"\n  end\n  \n  -- This holds a constant that we'll compare the distance\
    \ from the end of the word to a vowel.\n  local closest = #word\n  \n  -- This\
    \ stores the index of the closest vowel.\n  local index = 0\n  \n  -- This stores\
    \ the number of consonants that we've seen since the last vowel.\n  local cons\
    \ = 0\n  \n  -- For each index, start at the right and work our way to the left...\n\
    \  for i = #word, 1, -1 do\n    \n    -- If the character at this index is a vowel...\n\
    \    if string.find(vowels, string.sub(word, i, i)) then\n      \n      -- If\
    \ we've seen a consonant before this...\n      if cons > 0 then\n        \n  \
    \      -- Count this character as a vowel.\n        cons = 0\n        \n     \
    \   -- If the distance between this vowel and the end of the word is less than\
    \ our stored closest distance...\n        if #word - i < closest then\n      \
    \    \n          -- Update the closest distance.\n          closest = #word -\
    \ i\n          \n          -- Store the index of this vowel.\n          index\
    \ = i\n        end\n      end\n    else\n      -- Count this character as a consonant.\n\
    \      cons = cons + 1\n    end\n  end\n  \n  -- If our index is still 0, then\
    \ it never changed, which means that we never found a vowel between two consonants.\n\
    \  if index == 0 then\n    return \"\"\n  end\n  \n  -- Otherwise, return the\
    \ character at our index.\n  return string.sub(word, index, index)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji_lcz0b.lua:72:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpji_lcz0b.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83t33htx.lua:17:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp83t33htx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local result = \"\"\n  local current_index\n  for i = #word, 2, -1 do\n   \
    \ current_index = word:sub(i, i)\n    if current_index:match(\"[AEIOUaeiou]\"\
    ) then\n      result = current_index\n      if word:sub(i-1, i-1):match(\"[^AEIOUaeiou]\"\
    ) then\n        break\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw8ximd.lua:31:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpzrw8ximd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- write your code here\n    return word\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrzayk9f.lua:19:\
    \ expected: \"u\"\nactual: \"yogurt\"\nstack traceback:\n\t/tmp/tmpxrzayk9f.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pkdelg0.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_pkdelg0.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- TODO: Write your code here\n    -- DUMMY return value\n    return \"\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5mvq1l0.lua:20:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpg5mvq1l0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    if word == nil then\n        return ''\n    end\n    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_position\
    \ = math.huge\n    local closest_consonant_position = 0\n    for i = 1, #word\
    \ do\n        local letter = word:sub(i, i)\n        if not letter:find('[aeiou]')\
    \ then\n            closest_consonant_position = i\n        else\n           \
    \ if i > closest_consonant_position and i < closest_vowel_position then\n    \
    \            closest_vowel = letter\n                closest_vowel_position =\
    \ i\n            end\n        end\n    end\n    return closest_vowel\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptefkwcaj.lua:36:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmptefkwcaj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4z5wq6s.lua:17:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpg4z5wq6s.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local _, len = string.find(word, \"[^aeiou]+$\")\n  local vowels = {\n    [\"\
    a\"] = true,\n    [\"e\"] = true,\n    [\"i\"] = true,\n    [\"o\"] = true,\n\
    \    [\"u\"] = true,\n  }\n  if len then\n    for i = len, 1, -1 do\n      if\
    \ vowels[string.sub(word, i, i)] then\n        return string.sub(word, i, i)\n\
    \      end\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1_odfr7.lua:35:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpz1_odfr7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowel = {'a', 'e', 'i', 'o', 'u'}\n  local const = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n  local output = \"\"\n  for x = #word, 1, -1 do\n    for _, v in ipairs(vowel)\
    \ do\n      if v == word:sub(x, x) then\n        for _, c in ipairs(const) do\n\
    \          if c == word:sub(x - 1, x - 1) then\n            output = v\n     \
    \       break\n          end\n        end\n      end\n    end\n  end\n  return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphz9rb3fy.lua:33:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmphz9rb3fy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    for i = word:len(), 1, -1 do\n        if word:sub(i, i):match(\"[aeiou]\"\
    ) then\n            for j = i, 1, -1 do\n                if word:sub(j, j):match(\"\
    [^aeiou]\") then\n                    return word:sub(i, i)\n                end\n\
    \            end\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrmnz7kg.lua:31:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmpcrmnz7kg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- Get the closest vowel between two consonants in the right side.\n    --\
    \ Argument word: The string.\n    -- Return: The closest vowel.\n    local vowels\
    \ = {a = true, e = true, i = true, o = true, u = true, y = true}\n    local prev\
    \ = \"\"\n    for i = #word, 1, -1 do\n        local ch = word:sub(i, i)\n   \
    \     if vowels[ch] then\n            if prev ~= \"\" and not vowels[prev] then\n\
    \                return ch\n            end\n        end\n        prev = ch\n\
    \    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb4vg3_t.lua:34:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmphb4vg3_t.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local prev_vowel = \"\
    \"\n  local curr_vowel = \"\"\n  local closest_vowel = \"\"\n  local closest_vowel_ind\
    \ = 0\n  for i = 1, #word do\n    curr_vowel = word:sub(i, i)\n    if prev_vowel\
    \ ~= \"\" and table.contains(vowels, curr_vowel) then\n      if closest_vowel\
    \ == \"\" then\n        closest_vowel = prev_vowel\n        closest_vowel_ind\
    \ = i - 1\n      elseif math.abs(i - closest_vowel_ind) > math.abs(i - 1) then\n\
    \        closest_vowel = prev_vowel\n        closest_vowel_ind = i - 1\n     \
    \ end\n    end\n    prev_vowel = curr_vowel\n  end\n  return closest_vowel\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcor9m744.lua:19:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcor9m744.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpcor9m744.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    local len = word:len()\n    local first = 1\n    for i = 1, len do\n   \
    \     if cons:find(word:sub(i, i)) ~= nil then\n            first = i\n      \
    \      break\n        end\n    end\n    for i = len, first, -1 do\n        if\
    \ cons:find(word:sub(i, i)) ~= nil then\n            return word:sub(i - 1, i\
    \ - 1)\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp770_n3bp.lua:33:\
    \ expected: \"u\"\nactual: \"r\"\nstack traceback:\n\t/tmp/tmp770_n3bp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax2wx12c.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpax2wx12c.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local len = #word\n    local\
    \ found = false\n    local res = \"\"\n    for i = len, 1, -1 do\n        if not\
    \ found then\n            for j = 1, #vowels do\n                if word:sub(i,\
    \ i) == vowels[j] then\n                    found = true\n                   \
    \ res = word:sub(i, i)\n                end\n            end\n        else\n \
    \           for j = 1, #vowels do\n                if word:sub(i, i) == vowels[j]\
    \ then\n                    res = word:sub(i, i)\n                end\n      \
    \      end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbs70dvpl.lua:38:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpbs70dvpl.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal v = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vpos = {}\n\tlocal c\
    \ = 0\n\tfor i = 1, #word do\n\t\tif word:sub(i, i) == v[1] or word:sub(i, i)\
    \ == v[2] or word:sub(i, i) == v[3] or word:sub(i, i) == v[4] or word:sub(i, i)\
    \ == v[5] then\n\t\t\tvpos[#vpos + 1] = i\n\t\tend\n\tend\n\tfor i = #vpos, 1,\
    \ -1 do\n\t\tif word:sub(vpos[i] + 1, vpos[i] + 1) ~= v[1] and word:sub(vpos[i]\
    \ + 1, vpos[i] + 1) ~= v[2] and word:sub(vpos[i] + 1, vpos[i] + 1) ~= v[3] and\
    \ word:sub(vpos[i] + 1, vpos[i] + 1) ~= v[4] and word:sub(vpos[i] + 1, vpos[i]\
    \ + 1) ~= v[5] then\n\t\t\tc = c + 1\n\t\tend\n\t\tif c == 2 then\n\t\t\treturn\
    \ word:sub(vpos[i], vpos[i])\n\t\tend\n\tend\n\treturn \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebeojven.lua:34:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpebeojven.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    for i = word:len(), 1, -1 do\n        if word:sub(i, i):match(\"[aeiou]\"\
    ) then\n            return word:sub(i, i)\n        end\n    end\n    return \"\
    \"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup22mj_h.lua:25:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpup22mj_h.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  return word:gsub(\".*(%a[aeiou]%a).*\", \"%1\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dst0mos.lua:18:\
    \ expected: \"u\"\nactual: \"gur\"\nstack traceback:\n\t/tmp/tmp1dst0mos.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    if not is_string(word) then\n        return \"\"\n    end\n    local vowels\
    \ = {[\"a\"] = 1, [\"e\"] = 1, [\"i\"] = 1, [\"o\"] = 1, [\"u\"] = 1}\n    local\
    \ indexes = {}\n    for i = 1, #word do\n        if vowels[word:sub(i, i)] then\n\
    \            indexes[#indexes + 1] = i\n        end\n    end\n    if #indexes\
    \ == 0 then\n        return \"\"\n    end\n    local index = indexes[#indexes]\n\
    \    while word:sub(index, index) ~= word:sub(index - 1, index - 1) do\n     \
    \   index = index - 1\n    end\n    if index <= #word then\n        return word:sub(index,\
    \ index)\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrhiky6e.lua:12:\
    \ attempt to call a nil value (global 'is_string')\nstack traceback:\n\t/tmp/tmplrhiky6e.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmplrhiky6e.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"a e i o u A E I O U\"\n    local vowels_list = {}\n    for\
    \ v in vowels:gmatch(\"%a\") do\n        vowels_list[#vowels_list + 1] = v\n \
    \   end\n    local pos = word:len()\n    while pos > 1 do\n        local prev_c\
    \ = word:sub(pos - 1, pos - 1)\n        local c = word:sub(pos, pos)\n       \
    \ if not vowels_list[prev_c] and vowels_list[c] then\n            return c\n \
    \       end\n        pos = pos - 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepxbg85n.lua:32:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpepxbg85n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = word:len(), 2, -1 do\n\
    \        local char = word:sub(i, i)\n        if table.contains(vowels, char)\
    \ then\n            if not table.contains(vowels, word:sub(i - 1, i - 1)) and\n\
    \                not table.contains(vowels, word:sub(i + 1, i + 1)) then\n   \
    \             return char\n            end\n        end\n    end\n    return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzbuurq9k.lua:15:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpzbuurq9k.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpzbuurq9k.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  local vowels = \"aeiouAEIOU\"\n  local n_word = string.reverse(word)\n\
    \  local i_cons, j_cons = string.find(n_word, \"%g+[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]\"\
    )\n  local answer = \"\"\n  if i_cons == nil then return \"\" end\n  for i = i_cons,\
    \ i_cons + j_cons - 1 do\n    if string.find(vowels, string.sub(n_word, i, i))\
    \ then\n      return string.sub(n_word, i, i)\n    end\n  end\n  return \"\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkwl8ff6.lua:33:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmpfkwl8ff6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = string.len(word), 1, -1\
    \ do\n\t\tif word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i)\
    \ == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then\n\t\t\tif word:sub(i\
    \ - 1, i - 1) ~= 'a' and word:sub(i - 1, i - 1) ~= 'e' and word:sub(i - 1, i -\
    \ 1) ~= 'i' and word:sub(i - 1, i - 1) ~= 'o' and word:sub(i - 1, i - 1) ~= 'u'\
    \ then\n\t\t\t\treturn word:sub(i, i)\n\t\t\tend\n\t\tend\n\tend\n\treturn \"\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q_vxdn3.lua:28:\
    \ expected: \"\"\nactual: \"e\"\nstack traceback:\n\t/tmp/tmp8q_vxdn3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    for i = #word, 2, -1 do\n        local\
    \ char = word:sub(i, i)\n        if not vowels:find(char) then\n            local\
    \ prevChar = word:sub(i - 1, i - 1)\n            if vowels:find(prevChar) then\n\
    \                return prevChar\n            end\n        end\n    end\n    return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoadjma8l.lua:30:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpoadjma8l.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    a = true,\n    e = true,\n    i = true,\n    o = true,\n\
    \    u = true,\n    y = true,\n    A = true,\n    E = true,\n    I = true,\n \
    \   O = true,\n    U = true,\n    Y = true\n  }\n  local closest_vowel\n  local\
    \ last_consonant\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n\
    \    if not vowels[char] then\n      last_consonant = i\n      break\n    end\n\
    \  end\n  for i = last_consonant - 1, 1, -1 do\n    local char = word:sub(i, i)\n\
    \    if vowels[char] then\n      closest_vowel = char\n      break\n    end\n\
    \  end\n  return closest_vowel or \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26rfs76d.lua:50:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp26rfs76d.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  for i = #word - 1, 1,\
    \ -1 do\n    local prev, curr = word:sub(i, i), word:sub(i + 1, i + 1)\n    if\
    \ not prev:match(\"[aeiou]\") and curr:match(\"[aeiou]\") then\n      return curr\n\
    \    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfv5lat1.lua:29:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmpmfv5lat1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local closest_vowel =\
    \ \"\"\n  for i = string.len(word), 1, -1 do\n    for _,v in ipairs(vowels) do\n\
    \      if string.sub(word, i, i) == v then\n        if i < string.len(word) and\
    \ i > 1 then\n          if (string.sub(word, i + 1, i + 1) ~= \"a\" and\n    \
    \      string.sub(word, i + 1, i + 1) ~= \"e\" and\n          string.sub(word,\
    \ i + 1, i + 1) ~= \"i\" and\n          string.sub(word, i + 1, i + 1) ~= \"o\"\
    \ and\n          string.sub(word, i + 1, i + 1) ~= \"u\") and\n          (string.sub(word,\
    \ i - 1, i - 1) ~= \"a\" and\n          string.sub(word, i - 1, i - 1) ~= \"e\"\
    \ and\n          string.sub(word, i - 1, i - 1) ~= \"i\" and\n          string.sub(word,\
    \ i - 1, i - 1) ~= \"o\" and\n          string.sub(word, i - 1, i - 1) ~= \"u\"\
    ) then\n            closest_vowel = string.sub(word, i, i)\n          end\n  \
    \      end\n      end\n    end\n  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l33w9yg.lua:40:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmp6l33w9yg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \t-- body\n\tlocal vowel = {'a','e','i','o','u'}\n\tlocal right = string.reverse(word)\n\
    \tlocal left = string.reverse(right)\n\tfor i = 1, string.len(left)-1 do\n\t\t\
    if i == 1 then\n\t\t\tfor j = 1, #vowel do\n\t\t\t\tif vowel[j] == string.sub(left,\
    \ i, i) then\n\t\t\t\t\treturn string.sub(left, i, i)\n\t\t\t\tend\n\t\t\tend\n\
    \t\telse\n\t\t\tfor j = 1, #vowel do\n\t\t\t\tif vowel[j] == string.sub(left,\
    \ i, i) then\n\t\t\t\t\tif string.sub(left, i-1, i-1) == ' ' or string.sub(left,\
    \ i+1, i+1) == ' ' then\n\t\t\t\t\t\treturn string.sub(left, i, i)\n\t\t\t\t\t\
    end\n\t\t\t\t\tfor k = 1, #vowel do\n\t\t\t\t\t\tif vowel[k] == string.sub(left,\
    \ i-1, i-1) or vowel[k] == string.sub(left, i+1, i+1) then\n\t\t\t\t\t\t\treturn\
    \ ''\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\treturn string.sub(left, i, i)\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4bq4udp.lua:45:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpt4bq4udp.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local map = {}\n    for i=1, #vowels do\n\
    \        map[vowels:sub(i,i)] = i\n    end\n    local vowels_found = {}\n    for\
    \ i=1, #word do\n        local c = word:sub(i,i)\n        if map[c] then\n   \
    \         vowels_found[#vowels_found+1] = {i, c}\n        end\n    end\n    if\
    \ #vowels_found < 2 then\n        return \"\"\n    end\n    local lc = vowels_found[1][2]\n\
    \    local rc = vowels_found[2][2]\n    for i=2, #vowels_found-1 do\n        local\
    \ c = vowels_found[i]\n        local vl = vowels_found[i-1]\n        local vr\
    \ = vowels_found[i+1]\n        if c[1] - vl[1] <= vr[1] - c[1] then\n        \
    \    rc = vr[2]\n        else\n            lc = vl[2]\n        end\n    end\n\
    \    if map[lc] < map[rc] then\n        return lc\n    else\n        return rc\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69crgsie.lua:49:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmp69crgsie.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \t-- Check the case with empty string\n\tif word == \"\" then return \"\" end\n\
    \t-- Check the case with 1 letter string\n\tif word:len() == 1 then\n\t\tif \"\
    aeiouAEIOU\":find(word) then return word end\n\t\treturn \"\"\n\tend\n\t-- A table\
    \ of vowels\n\tlocal table_vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\"\
    , \"E\", \"I\", \"O\", \"U\"}\n\t-- Loop through the letters of the word\n\tfor\
    \ i = 1, word:len() - 1 do\n\t\t-- Not found a vowel\n\t\tlocal found = false\n\
    \t\t-- Loop through the table of vowels\n\t\tfor _, vowel in ipairs(table_vowels)\
    \ do\n\t\t\t-- Find a vowel\n\t\t\tif word:sub(i, i) == vowel then\n\t\t\t\t--\
    \ The letter on the left and right side of the vowel are not vowels\n\t\t\t\t\
    if \"aeiouAEIOU\":find(word:sub(i - 1, i - 1)) == nil and\n\t\t\t\t\t\"aeiouAEIOU\"\
    :find(word:sub(i + 1, i + 1)) == nil then\n\t\t\t\t\treturn vowel\n\t\t\t\tend\n\
    \t\t\t\tfound = true\n\t\t\tend\n\t\tend\n\t\t-- If we have found a vowel, skip\
    \ to the next position\n\t\tif found then i = i + 1 end\n\tend\n\treturn \"\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjcys0qjn.lua:16: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {a = true, e = true, i = true, o = true, u = true, A = true,\
    \ E = true, I = true, O = true, U = true}\n  for i = #word, 1, -1 do\n    if vowels[word:sub(i,\
    \ i)] then\n      return word:sub(i, i)\n    end\n  end\n  return \"\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zmwlf41.lua:26:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp9zmwlf41.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        a = true, e = true, i = true, o = true, u = true,\n\
    \        A = true, E = true, I = true, O = true, U = true\n    }\n    local x\
    \ = 1\n    while x <= #word do\n        if vowels[word:sub(x, x)] then\n     \
    \       if x == 1 or vowels[word:sub(x - 1, x - 1)] then\n                if x\
    \ == #word or vowels[word:sub(x + 1, x + 1)] then\n                    x = x +\
    \ 1\n                else\n                    return word:sub(x, x)\n       \
    \         end\n            else\n                return word:sub(x, x)\n     \
    \       end\n        else\n            x = x + 1\n        end\n    end\n    return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexk8oj_d.lua:38:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpexk8oj_d.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local result = nil\n  for i =\
    \ #word, 1, -1 do\n    if table.indexof(vowels, word:sub(i, i)) ~= nil then\n\
    \      if (i == 1) or (i == #word) then\n        return ''\n      end\n      if\
    \ table.indexof(vowels, word:sub(i - 1, i - 1)) == nil and table.indexof(vowels,\
    \ word:sub(i + 1, i + 1)) == nil then\n        return word:sub(i, i)\n      end\n\
    \    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ktgng_b.lua:15:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp6ktgng_b.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp6ktgng_b.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81xa8egp.lua:19:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp81xa8egp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnssdsytp.lua:18:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpnssdsytp.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_indices = {}\n\
    \    for i = 1, #word do\n        for j = 1, #vowels do\n            if word:sub(i,\
    \ i) == vowels[j] then\n                vowel_indices[#vowel_indices + 1] = i\n\
    \            end\n        end\n    end\n    if #vowel_indices == 0 then\n    \
    \    return ''\n    end\n    local min_diff = math.huge\n    local closest_vowel\
    \ = ''\n    for i = 1, #vowel_indices do\n        local diff = #word - vowel_indices[i]\n\
    \        if diff < min_diff then\n            min_diff = diff\n            closest_vowel\
    \ = word:sub(vowel_indices[i], vowel_indices[i])\n        end\n    end\n    return\
    \ closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji8cchf8.lua:41:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpji8cchf8.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    return word:gsub(\".*[bcdfghjklmnpqrstvwxyz]*([aeiou]).*\", \"%1\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmpnpd_d.lua:20:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmprmpnpd_d.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local index\n    for i = #word\
    \ - 1, 2, -1 do\n        if vowels[word:sub(i, i)] and vowels[word:sub(i + 1,\
    \ i + 1)] then\n            index = i\n            break\n        end\n    end\n\
    \    return index and word:sub(index, index) or ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw8jbwrz.lua:26:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpnw8jbwrz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowel = 'aeiou'\n  local last_vowel = \"\"\n  for i = #word, 1, -1 do\n\
    \    local l = word:sub(i, i)\n    local v = vowel:find(l)\n    if v then\n  \
    \    last_vowel = l\n      break\n    end\n  end\n  return last_vowel\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbga5_csa.lua:30:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpbga5_csa.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local idx = #word\n  while idx > 0 do\n    if \"aeiouAEIOU\".find(word:sub(idx,\
    \ idx), 1, true) then\n      local last = idx - 1\n      while last > 0 do\n \
    \       if \"aeiouAEIOU\".find(word:sub(last, last), 1, true) then\n         \
    \ last = last - 1\n        else\n          return word:sub(idx, idx)\n       \
    \ end\n      end\n    end\n    idx = idx - 1\n  end\n  return \"\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnayqozqj.lua:14: 'then' expected near '.'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {a = true, e = true, i = true, o = true, u = true, A = true,\
    \ E = true, I = true, O = true, U = true}\n  local closest_vowel, closest_vowel_idx\n\
    \  for i = #word, 1, -1 do\n    if not vowels[word:sub(i, i)] then\n      if closest_vowel\
    \ then\n        return closest_vowel\n      end\n    else\n      closest_vowel\
    \ = word:sub(i, i)\n      closest_vowel_idx = i\n    end\n  end\n  return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphek83hmd.lua:34:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmphek83hmd.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_iaanuj.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3_iaanuj.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- return (word:gsub(\"%u\", function(char)\n    --     return \"aeiou\"\
    [char % 5 + 1]\n    -- end))\n    -- local vowel = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local vowel = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local str = \"\"\n\
    \    local index = 0\n    for i = #word, 1, -1 do\n        for j = 1, #vowel do\n\
    \            if vowel[j] == word:sub(i, i) then\n                str = vowel[j]\n\
    \                index = i\n                break\n            end\n        end\n\
    \        if index ~= 0 then\n            return str\n        end\n    end\n  \
    \  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_saovss.lua:39:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp3_saovss.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspddtbx_.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpspddtbx_.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  local vowels = \"aeiouAEIOU\"\n  local prev_char_is_vowel = false\n\
    \  local next_char_is_vowel = false\n  local closest_vowel = \"\"\n  local vowel_found\
    \ = false\n  local length = string.len(word)\n  for i = length, 1, -1 do\n   \
    \ if not vowel_found then\n      if vowels:find(word:sub(i, i)) then\n       \
    \ if not prev_char_is_vowel then\n          closest_vowel = word:sub(i, i)\n \
    \         vowel_found = true\n        end\n        prev_char_is_vowel = true\n\
    \      else\n        prev_char_is_vowel = false\n      end\n    end\n  end\n \
    \ return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yrk0854.lua:40:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp1yrk0854.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal prev_letter = ''\n\tlocal\
    \ vowel = ''\n\tlocal closest_vowel = ''\n\tfor i = #word, 1, -1 do\n\t\tlocal\
    \ c = word:sub(i, i)\n\t\tlocal is_vowel = false\n\t\tfor _,v in ipairs(vowels)\
    \ do\n\t\t\tif c == v then\n\t\t\t\tis_vowel = true\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif is_vowel then\n\t\t\tvowel = c\n\t\telse\n\t\t\tif prev_letter\
    \ ~= '' then\n\t\t\t\tclosest_vowel = vowel\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tprev_letter = c\n\tend\n\treturn closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vo9c3hc.lua:41:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp5vo9c3hc.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    if word == nil then\n        return nil\n    end\n    -- TODO: Implement\
    \ this function\n    return \"U\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_9rys3a.lua:22:\
    \ expected: \"u\"\nactual: \"U\"\nstack traceback:\n\t/tmp/tmpv_9rys3a.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- Your code here!\n  for i = #word - 1, 1, -1 do\n    if 'aeiou'.find(word:sub(i,\
    \ i)) and 'bcdfghjklmnpqrstvwxyz'.find(word:sub(i - 1, i - 1)) and 'bcdfghjklmnpqrstvwxyz'.find(word:sub(i\
    \ + 1, i + 1)) then\n      return word:sub(i, i)\n    end\n  end\n  return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprlr_dbk5.lua:14: 'then' expected near '.'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local consonants\
    \ = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n \
    \ local vowels_index = {}\n  local consonants_index = {}\n  local index_tracker\
    \ = 0\n  local index_tracker_2 = 0\n  local temp_vowel_holder = \"\"\n  local\
    \ temp_consonant_holder = \"\"\n  local final_vowel_holder = \"\"\n  local answer\
    \ = \"\"\n  local answer_holder = \"\"\n  local temp_string = \"\"\n  --local\
    \ counter = 0\n  --local counter_2 = 0\n  local starter = false\n  local string_length\
    \ = string.len(word)\n  local last_vowel_index = 0\n  local last_consonant_index\
    \ = 0\n  local last_vowel_index_2 = 0\n  local last_consonant_index_2 = 0\n  for\
    \ index, value in ipairs(vowels) do\n    vowels_index[index] = string.find(word,\
    \ value)\n  end\n  for index, value in ipairs(consonants) do\n    consonants_index[index]\
    \ = string.find(word, value)\n  end\n  for index, value in ipairs(vowels_index)\
    \ do\n    if(value ~= nil) then\n      temp_vowel_holder = temp_vowel_holder ..\
    \ value .. \" \"\n    end\n  end\n  for index, value in ipairs(consonants_index)\
    \ do\n    if(value ~= nil) then\n      temp_consonant_holder = temp_consonant_holder\
    \ .. value .. \" \"\n    end\n  end\n  for index, value in ipairs(temp_vowel_holder)\
    \ do\n    local temp_string = string.sub(temp_vowel_holder, index, index + 1)\n\
    \    if(string.find(temp\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi7ta0jd6.lua:52: ')' expected (to close '(' at line 51) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzm942jo.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpzzm942jo.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhcynvug.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqhcynvug.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local conso = {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'}\n\
    \    local last_vowel = \"\"\n    local last_consonant = \"\"\n    local dist\n\
    \    local dist_old = 9999\n    for i = 1, #word do\n        local char = word:sub(i,i)\n\
    \        if (char:find(\"%a\")) then\n            if (char:find(\"%l\")) then\n\
    \                for j = 1, #conso do\n                    if (char == conso[j])\
    \ then\n                        last_consonant = conso[j]\n                  \
    \      break\n                    end\n                end\n            else\n\
    \                for j = 1, #conso do\n                    if (char:lower() ==\
    \ conso[j]) then\n                        last_consonant = conso[j]\n        \
    \                break\n                    end\n                end\n       \
    \     end\n        end\n        if (vowels:find(char)) then\n            last_vowel\
    \ = char\n            if (last_consonant ~= \"\") then\n                dist =\
    \ i - last_consonant:byte()\n                if (dist < dist_old) then\n     \
    \               dist_old = dist\n                    last_consonant = \"\"\n \
    \               end\n            end\n        end\n    end\n    return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqzdo03w.lua:56:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpnqzdo03w.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp972w_u8a.lua:19:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp972w_u8a.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowel_list = \"AEIOUaeiou\"\n    local cons_list = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    local word_len = word:len()\n    for i = word_len, 2, -1 do\n        if\
    \ cons_list:find(word:sub(i-1, i-1)) and cons_list:find(word:sub(i, i)) then\n\
    \            for j = 1, 10 do\n                if word:sub(i, i) == vowel_list:sub(j,\
    \ j) then\n                    return word:sub(i, i)\n                end\n  \
    \          end\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5aydz9o.lua:30:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz5aydz9o.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local result = word:match'([aeiou]%a+a$)' or\n        word:match'[aeiou]([bcdfghjklmnpqrstvwxyz]+)[aeiou]'\
    \ or\n        word:match'[aeiou]([bcdfghjklmnpqrstvwxyz]+)$'\n    return result\
    \ or ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqa8yjvv.lua:21:\
    \ expected: \"u\"\nactual: \"g\"\nstack traceback:\n\t/tmp/tmpiqa8yjvv.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local last_vowel_index = 0\n    for i\
    \ = #word, 1, -1 do\n        if vowels:find(word:sub(i, i)) then\n           \
    \ last_vowel_index = i\n            break\n        end\n    end\n    if last_vowel_index\
    \ == 0 then\n        return \"\"\n    end\n    for i = last_vowel_index - 1, 1,\
    \ -1 do\n        if not vowels:find(word:sub(i, i)) then\n            return word:sub(i\
    \ + 1, last_vowel_index)\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwalssece.lua:38:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmpwalssece.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    for i = #word - 1, 2, -1 do\n        if word:sub(i, i):match(\"[aeiou]\"\
    ) and not word:sub(i + 1, i + 1):match(\"[aeiou]\") then\n            return word:sub(i,\
    \ i)\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuyg55d5.lua:25:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpiuyg55d5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {[\"a\"] = true, [\"e\"] = true, [\"i\"] = true, [\"o\"] = true,\
    \ [\"u\"] = true}\n  local prev_vowel, next_vowel\n  local prev_index, next_index\n\
    \  local prev_dist, next_dist\n  for i=1, #word do\n    local char = word:sub(i,\
    \ i)\n    if vowels[char] then\n      if prev_vowel == nil then\n        prev_vowel\
    \ = char\n        prev_index = i\n      else\n        next_vowel = char\n    \
    \    next_index = i\n        break\n      end\n    end\n  end\n  if prev_vowel\
    \ == nil then\n    return \"\"\n  end\n  prev_dist = #word - prev_index\n  if\
    \ next_vowel ~= nil then\n    next_dist = next_index - 1\n  else\n    next_dist\
    \ = 0\n  end\n  if prev_dist < next_dist then\n    return prev_vowel\n  else\n\
    \    return next_vowel\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzje64mx.lua:49:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnzje64mx.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local pos = 1\n  local x,y\n  local vowel = {\"a\",\"\
    e\",\"i\",\"o\",\"u\"}\n  while pos <= #word do\n    local x = string.find(word,\
    \ \"[aeiou]\", pos)\n    if x ~= nil then\n      if pos == 1 then\n        y =\
    \ string.find(word, \"[bcdfghjklmnpqrstvwxyz]\", x + 1)\n      else\n        y\
    \ = string.find(word, \"[bcdfghjklmnpqrstvwxyz]\", pos)\n      end\n      if y\
    \ ~= nil then\n        return string.sub(word, x, x)\n      end\n    end\n   \
    \ pos = pos + 1\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dlk26as.lua:36:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmp0dlk26as.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local prev = ''\n  local letter\
    \ = ''\n  local dist = 0\n  local closest = ''\n  local closest_dist = -1\n  for\
    \ i=1, #word do\n    prev = letter\n    letter = word:sub(i, i)\n    if prev ==\
    \ '' then\n      for j=1, #vowels do\n        if letter == vowels[j] then\n  \
    \        prev = letter\n          break\n        end\n      end\n    else\n  \
    \    for j=1, #vowels do\n        if letter == vowels[j] then\n          dist\
    \ = i - i:match('^[^'..prev..']+()')\n          if dist > closest_dist then\n\
    \            closest_dist = dist\n            closest = letter\n          end\n\
    \          prev = letter\n          break\n        end\n      end\n    end\n \
    \ end\n  return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3n9j8_y.lua:31:\
    \ attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmpy3n9j8_y.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpy3n9j8_y.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code goes here\n  -- Define vowels\n  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  -- If there is no vowels, return empty string\n  if not word:find('a')\
    \ and not word:find('e') and not word:find('i') and not word:find('o') and not\
    \ word:find('u') then\n    return ''\n  end\n  -- Find the first vowel\n  local\
    \ first_vowel = word:find('a') or word:find('e') or word:find('i') or word:find('o')\
    \ or word:find('u')\n  -- Remove the first vowel and all consonants before it\n\
    \  local start_string = word:sub(first_vowel)\n  -- Compare the rest of the string\
    \ and take only consonants\n  local start_string_with_first_vowel = start_string:gsub('[aeiou]',\
    \ '')\n  -- If the start string has no consonants, return first vowel\n  if start_string_with_first_vowel\
    \ == '' then\n    return word:sub(first_vowel, first_vowel)\n  end\n  -- Get all\
    \ consonants in the word\n  local consonants = start_string_with_first_vowel:sub(1,\
    \ -2)\n  -- Get the last consonant\n  local last_consonant = consonants:sub(-1)\n\
    \  -- Reverse the string to get consonants from the right\n  local reversed_string\
    \ = start_string:reverse()\n  -- Remove vowels from the reversed string\n  local\
    \ reversed_string_with_vowels = reversed_string:gsub('[aeiou]', '')\n  -- Get\
    \ the index of the first consonant in the reversed string\n  local index_of_consonant\
    \ = #reversed_string_with_vowels + 1\n  -- Get the index of the first consonant\
    \ in the original string\n  local index_of_first_consonant = #reversed_string\
    \ - index_of_consonant + 1\n  -- Get the index of the second consonant in the\
    \ original string\n  local index_of_second_consonant\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpasi_6t8x.lua:62: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  local vowels = \"aeiouAEIOU\"\n  local word_len = word:len()\n \
    \ local cons_count = 0\n  local get_vowel = \"\"\n  local find_vowel = \"\"\n\
    \  local vowel_pos = 0\n  for i = word_len, 1, -1 do\n    if vowels:find(word:sub(i,i))\
    \ then\n      get_vowel = word:sub(i,i)\n      vowel_pos = i\n      if cons_count\
    \ == 1 then\n        break\n      end\n    else\n      cons_count = cons_count\
    \ + 1\n    end\n  end\n  if cons_count ~= 1 then\n    find_vowel = \"\"\n  else\n\
    \    find_vowel = get_vowel\n  end\n  return find_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ijaribk.lua:41:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp5ijaribk.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \t-- body\n\tlocal vowel = \"AEIOUaeiou\"\n\tlocal result = \"\"\n\tfor i = #word,\
    \ 1, -1 do\n\t\tif not string.find(vowel, word[i]) then\n\t\t\tfor j = i-1, 1,\
    \ -1 do\n\t\t\t\tif string.find(vowel, word[j]) then\n\t\t\t\t\tresult = word[j]\n\
    \t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeyefod45.lua:16:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpeyefod45.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpeyefod45.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local word_len = #word\n  for i = word_len, 1, -1 do\n    if is_consonant(word:sub(i,\
    \ i)) then\n      for j = i - 1, 1, -1 do\n        if is_vowel(word:sub(j, j))\
    \ then\n          return word:sub(j, j)\n        end\n      end\n    end\n  end\n\
    \  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc24ki65g.lua:14:\
    \ attempt to call a nil value (global 'is_consonant')\nstack traceback:\n\t/tmp/tmpc24ki65g.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpc24ki65g.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local i = #word\n  while i > 1 do\n    if string.find('aeiou', word:sub(i,\
    \ i)) then\n      if not string.find('aeiou', word:sub(i - 1, i - 1)) then\n \
    \       return word:sub(i, i)\n      end\n    end\n    i = i - 1\n  end\n  return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp43lywoq.lua:31:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmpp43lywoq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local pos = word:reverse():find('[^aeiou][aeiou][^aeiou]')\n  if pos then\n\
    \    return word:sub(#word - pos, #word - pos)\n  end\n  return ''\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  -- my solution is to simply loop through the word and return the\
    \ first vowel encountered\n  -- after consonants\n  -- instead, I'd probably just\
    \ start at the end and loop backwards\n  -- or maybe I'd do something like a Boyer-Moore\
    \ search from the back of the string\n  -- to find the last occurrence of a vowel\
    \ in the string\n  -- but, I'm not going to do any of those things\n  -- I'm going\
    \ to stick with my simple solution that just loops through the string forwards\n\
    \  local last_c = -1\n  for i=1,#word do\n    local c = word:sub(i,i)\n    if\
    \ c:find(\"[aeiou]\") then\n      if last_c == -1 then\n        -- no consonants\
    \ yet, so keep going\n      else\n        -- return the last vowel we found\n\
    \        return c\n      end\n    else\n      -- found a consonant\n      last_c\
    \ = i\n    end\n  end\n  -- if we get here, then there were no vowels or the last\
    \ vowel was at the end of the string\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnpe4vra.lua:42:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmptnpe4vra.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local idx_vowel = {['a'] = 1, ['e'] = 1, ['i'] = 1, ['o'] = 1, ['u'] = 1}\n\
    \    local a, b = string.byte(word, #word), string.byte(word, #word - 1)\n   \
    \ for i = #word - 1, 1, -1 do\n        if idx_vowel[string.char(a)] then \n  \
    \          return string.char(a)\n        elseif idx_vowel[string.char(b)] then\n\
    \            return string.char(b)\n        end\n        a, b = b, string.byte(word,\
    \ i - 1)\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldufcjnb.lua:30:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpldufcjnb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local x;\n    local found=false;\n    local vowel;\n    local consonant;\n\
    \    local res=\"\";\n    for i=string.len(word), 1, -1 do\n        x=string.sub(word,\
    \ i, i);\n        if found then\n            if vowel[x] then\n              \
    \  res=x;\n                break;\n            end\n        else\n           \
    \ if not vowel[x] then\n                consonant=x;\n                found=true;\n\
    \            end\n        end\n    end\n    return res;\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprl8z1xtb.lua:25:\
    \ attempt to index a nil value (local 'vowel')\nstack traceback:\n\t/tmp/tmprl8z1xtb.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmprl8z1xtb.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local last_consonant\
    \ = nil\n  local first_vowel = nil\n  for i = #word, 1, -1 do\n    if not table.contains(vowels,\
    \ word:sub(i, i)) then\n      last_consonant = i\n    else\n      first_vowel\
    \ = i\n      break\n    end\n  end\n  if last_consonant == nil or first_vowel\
    \ == nil then\n    return \"\"\n  end\n  local len = first_vowel - last_consonant\n\
    \  local min = math.huge\n  local index = nil\n  for i = 1, #vowels do\n    local\
    \ value = math.abs(len - vowels[i]:len())\n    if value < min then\n      min\
    \ = value\n      index = i\n    end\n  end\n  return vowels[index]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2vfuabb.lua:16:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpy2vfuabb.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpy2vfuabb.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local letter, idx = nil, nil\n\
    \    for i = #word, 1, -1 do\n        if not table.member(vowels, string.lower(word[i]))\
    \ then\n            letter = word[i]\n            idx = i\n            break\n\
    \        end\n    end\n    if letter == nil then return '' end\n    for i = idx\
    \ - 1, 1, -1 do\n        if table.member(vowels, string.lower(word[i])) then\n\
    \            return word[i]\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8dimnpm0.lua:15:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp8dimnpm0.lua:15: in local 'candidate'\n\t/tmp/tmp8dimnpm0.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- code here\n  local cons = \"bcdfghjklmnpqrstvwxyz\"\n  local vowels = \"\
    aeiou\"\n  local res = \"\"\n  for i = #word, 1, -1 do\n    if string.find(cons,\
    \ word:sub(i, i)) then\n      for j = i, 1, -1 do\n        if string.find(vowels,\
    \ word:sub(j, j)) then\n          return word:sub(j, j)\n        end\n      end\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxk0qooa.lua:33:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpdxk0qooa.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels, vowels_index = {}, {}\n\tword:gsub(\"[aeiou]\", function(vowel)\
    \ \n\t\ttable.insert(vowels, vowel)\n\t\tvowels_index[vowel] = word:find(vowel)\n\
    \tend)\n\t\n\tlocal vowels_index_length = #vowels_index\n\tif vowels_index_length\
    \ == 0 then\n\t\treturn \"\"\n\telseif vowels_index_length == 1 then\n\t\treturn\
    \ vowels[1]\n\telse\n\t\ttable.sort(vowels_index, function(a, b) return a < b\
    \ end)\n\t\tlocal closest = vowels_index[1]\n\t\tlocal closest_vowel = \"\"\n\t\
    \tfor _,vowel in ipairs(vowels) do\n\t\t\tif vowels_index[vowel] > closest then\n\
    \t\t\t\tclosest = vowels_index[vowel]\n\t\t\t\tclosest_vowel = vowel\n\t\t\tend\n\
    \t\tend\n\t\treturn closest_vowel\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9d9h3au.lua:40:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpd9d9h3au.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \t-- body\n\tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal wlen = word:len()\n\tlocal swvowels = {}\n\tlocal result\
    \ = \"\"\n\tfor i = 1, wlen do\n\t\tfor j = 1, vowels_count do\n\t\t\tif (word:sub(i,\
    \ i) == vowels[j]) then\n\t\t\t\tswvowels[#swvowels + 1] = i\n\t\t\tend\n\t\t\
    end\n\tend\n\tlocal vsize = #swvowels\n\tif (vsize == 0) then return \"\" end\n\
    \tfor i = 1, vsize do\n\t\tif (swvowels[i] == 1) then \n\t\t\tswvowels[i] = wlen\n\
    \t\tend\n\t\tif (swvowels[i] == wlen) then\n\t\t\tswvowels[i] = 1\n\t\tend\n\t\
    end\n\tlocal shortest_distance = wlen\n\tfor i = 1, vsize do\n\t\tlocal cur_distance\
    \ = math.abs(swvowels[i] - wlen)\n\t\tif (cur_distance < shortest_distance) then\n\
    \t\t\tshortest_distance = cur_distance\n\t\t\tresult = word:sub(swvowels[i], swvowels[i])\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h7qv0gp.lua:51:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp9h7qv0gp.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local i = #word - 1\n  while i > 0 do\n  \
    \  if vowels:find(word:sub(i, i)) and not vowels:find(word:sub(i + 1, i + 1))\
    \ then\n      return word:sub(i, i)\n    end\n    i = i - 1\n  end\n  return \"\
    \"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8guoxlqm.lua:28:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp8guoxlqm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    if type(word) ~= \"string\" then\n        error(\"arg #1 must be a string,\
    \ got \" .. type(word), 2)\n    end\n    local vowels = {\n        [\"a\"] = true,\n\
    \        [\"e\"] = true,\n        [\"i\"] = true,\n        [\"o\"] = true,\n \
    \       [\"u\"] = true,\n        [\"A\"] = true,\n        [\"E\"] = true,\n  \
    \      [\"I\"] = true,\n        [\"O\"] = true,\n        [\"U\"] = true\n    }\n\
    \    local last_letter = word:sub(-1)\n    if last_letter == \"y\" then\n    \
    \    return \"y\"\n    end\n    for i = #word, 1, -1 do\n        local letter\
    \ = word:sub(i, i)\n        if vowels[letter] then\n            if i == #word\
    \ then\n                return \"\"\n            end\n            local before_letter\
    \ = word:sub(i - 1, i - 1)\n            if not vowels[before_letter] then\n  \
    \              return letter\n            end\n        end\n    end\n    return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn91sh2sh.lua:51:\
    \ expected: \"\"\nactual: \"y\"\nstack traceback:\n\t/tmp/tmpn91sh2sh.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5z7k9tk.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpr5z7k9tk.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant\n    for\
    \ i=#word, 1, -1 do\n        local cur_ch = word:sub(i, i)\n        if cur_ch\
    \ == 'a' or cur_ch == 'e' or cur_ch == 'i' or cur_ch == 'o' or cur_ch == 'u' then\n\
    \            if last_consonant then\n                return cur_ch\n         \
    \   end\n        else\n            last_consonant = cur_ch\n        end\n    end\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2p7w38x.lua:32:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpn2p7w38x.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgnk48ud.lua:18:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbgnk48ud.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    for i=#word, 1, -1 do\n        if word:sub(i,i):match('[aeiou]') then\n \
    \           if word:sub(i-1,i-1):match('[^aeiou]') and word:sub(i+1,i+1):match('[^aeiou]')\
    \ then\n                return word:sub(i,i)\n            end\n        end\n \
    \   end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  if #word < 2 then return '' end\n  local idx, v, m\n  for i = 1, #word do\n\
    \    local ch = word:sub(i, i)\n    if 'aeiouAEIOU'\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo76t4625.lua:17: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal result = ''\n\tlocal cur_distance\
    \ = -1\n\tfor i = 1, #word do\n\t\tif i == 1 then\n\t\t\tif array_contains(vowels,\
    \ word:sub(i, i)) then\n\t\t\t\tcur_distance = -1\n\t\t\telse\n\t\t\t\tcur_distance\
    \ = 0\n\t\t\tend\n\t\telseif i == #word then\n\t\t\tif array_contains(vowels,\
    \ word:sub(i, i)) then\n\t\t\t\tif cur_distance > 0 then\n\t\t\t\t\tresult = word:sub(i,\
    \ i)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tcur_distance = -1\n\t\t\tend\n\t\telse\n\
    \t\t\tif array_contains(vowels, word:sub(i, i)) then\n\t\t\t\tif cur_distance\
    \ >= 0 then\n\t\t\t\t\tresult = word:sub(i, i)\n\t\t\t\t\tcur_distance = -1\n\t\
    \t\t\tend\n\t\t\telse\n\t\t\t\tif cur_distance < 0 then\n\t\t\t\t\tcur_distance\
    \ = 0\n\t\t\t\telse\n\t\t\t\t\tcur_distance = cur_distance + 1\n\t\t\t\tend\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9j1huqg.lua:17:\
    \ attempt to call a nil value (global 'array_contains')\nstack traceback:\n\t\
    /tmp/tmpk9j1huqg.lua:17: in local 'candidate'\n\t/tmp/tmpk9j1huqg.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local idx = word:reverse():find(\"\
    [^aeiou]*[aeiou]\")\n    if idx then\n        return word:sub(#word - idx + 2,\
    \ #word - idx + 2)\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfyims_i.lua:23:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmprfyims_i.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowel_list = {'a', 'e', 'i', 'o', 'u'}\n    for i = #word, 2, -1 do\n\
    \        if not (table.indexOf(vowel_list, word:sub(i, i)) == -1) and\n      \
    \  not (table.indexOf(vowel_list, word:sub(i - 1, i - 1)) == -1) then\n      \
    \      return word:sub(i, i)\n        end\n    end\n    return \"\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmpf5jf0i.lua:14:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmpmpf5jf0i.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpmpf5jf0i.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   -- your code here\n   local res = ''\n   local is_start_with_vowel = string.find(word,\
    \ '^[aeiouAEIOU]') ~= nil\n   local is_end_with_vowel = string.find(word, '[aeiouAEIOU]$')\
    \ ~= nil\n   if is_start_with_vowel then\n      word = string.sub(word, 2)\n \
    \  end\n   if is_end_with_vowel then\n      word = string.sub(word, 1, -2)\n \
    \  end\n   for i = #word - 1, 1, -1 do\n      local first = string.sub(word, i,\
    \ i)\n      local second = string.sub(word, i + 1, i + 1)\n      if string.find(first,\
    \ '[aeiouAEIOU]') == nil and string.find(second, '[aeiouAEIOU]') ~= nil then\n\
    \         return second\n      end\n   end\n   return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy_f988c.lua:44:\
    \ expected: \"\"\nactual: \"u\"\nstack traceback:\n\t/tmp/tmpgy_f988c.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local v = {a = 0, e = 0, i = 0, o = 0, u = 0}\n  local w = word:reverse()\n\
    \  for i = 2, #w do\n    if v[w:sub(i, i)] > 0 then\n      v[w:sub(i, i)] = i\n\
    \    end\n    if v[w:sub(i - 1, i - 1)] > 0 then\n      v[w:sub(i - 1, i - 1)]\
    \ = 0\n    end\n  end\n  local min = 0\n  local min_vowel = \"\"\n  for k, v in\
    \ pairs(v) do\n    if v > 0 and v > min then\n      min = v\n      min_vowel =\
    \ k\n    end\n  end\n  return min_vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp23o64vvj.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp23o64vvj.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp23o64vvj.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- your code goes here\n    -- When we find a consonant, we seek the next\
    \ one\n    -- Then we seek the closest vowel between the two\n    -- If there's\
    \ a vowel before the consonant, it doesn't count\n    -- If there's a vowel after\
    \ the consonant, it doesn't count\n    -- If there's no consonant, return \"\"\
    \n    local function is_vowel(c)\n        return c == \"a\" or c == \"e\" or c\
    \ == \"i\" or c == \"o\" or c == \"u\"\n    end\n    local function is_consonant(c)\n\
    \        return not is_vowel(c)\n    end\n    local vowels = {\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    local last_consonant = 0\n    local ret = \"\"\n    local\
    \ i = string.len(word)\n    while i > 0 do\n        if is_consonant(string.sub(word,\
    \ i, i)) then\n            if last_consonant == 0 then\n                last_consonant\
    \ = i\n            else\n                ret = ret .. string.sub(word, last_consonant,\
    \ i - 1)\n                last_consonant = 0\n            end\n        end\n \
    \       i = i - 1\n    end\n    if ret == \"\" then\n        return \"\"\n   \
    \ end\n    i = 1\n    while i <= string.len(ret) do\n        if is_vowel(string.sub(ret,\
    \ i, i)) then\n            return string.sub(ret, i, i)\n        end\n       \
    \ i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx6k5irr.lua:55:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwx6k5irr.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code goes here\n  local vowel = {'a','e','i','o','u'}\n  local distance\
    \ = 0\n  local index = 0\n  local flag = false\n  for i = 1,string.len(word) do\n\
    \    local w = string.sub(word,i,i)\n    for j = 1,#vowel do\n      if w == vowel[j]\
    \ then\n        if flag then\n          local dis = math.abs(i - index)\n    \
    \      if distance == 0 then\n            distance = dis\n            index =\
    \ i\n          elseif dis < distance then\n            distance = dis\n      \
    \      index = i\n          end\n        end\n        flag = false\n      else\n\
    \        flag = true\n      end\n    end\n  end\n  if index == 0 then\n    return\
    \ \"\"\n  else\n    return string.sub(word,index,index)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqc4h8e3s.lua:47:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpqc4h8e3s.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowel = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels = {}\n\
    \    local prev_vowel = ''\n    for i = #word, 1, -1 do\n        if prev_vowel\
    \ ~= '' then\n            if not table.contains(vowel, word:sub(i, i)) then\n\
    \                return prev_vowel\n            end\n        else\n          \
    \  if table.contains(vowel, word:sub(i, i)) then\n                prev_vowel =\
    \ word:sub(i, i)\n            end\n        end\n    end\n    return \"\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjsr9nmap.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpjsr9nmap.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpjsr9nmap.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local closest_vowel\n    local closest_distance\n    local\
    \ first_vowel_position\n    local last_vowel_position\n    local index\n    local\
    \ right_positions = {}\n    local right_distance\n    local letter\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0kpkholw.lua:41: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyzbw6_2.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkyzbw6_2.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    for i = string.len(word), 1, -1 do\n        local char = string.sub(word,\
    \ i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char ==\
    \ \"o\" or char == \"u\" then\n            local is_consonant = false\n      \
    \      local next_char = string.sub(word, i - 1, i - 1)\n            local prev_char\
    \ = string.sub(word, i + 1, i + 1)\n            if next_char ~= \"a\" and next_char\
    \ ~= \"e\" and next_char ~= \"i\" and next_char ~= \"o\" and next_char ~= \"u\"\
    \ then\n                is_consonant = true\n            end\n            if prev_char\
    \ ~= \"a\" and prev_char ~= \"e\" and prev_char ~= \"i\" and prev_char ~= \"o\"\
    \ and prev_char ~= \"u\" then\n                if is_consonant then\n        \
    \            return char\n                end\n            end\n        end\n\
    \    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0jz0j_i.lua:37:\
    \ expected: \"\"\nactual: \"e\"\nstack traceback:\n\t/tmp/tmph0jz0j_i.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local closest_vowel = \"\"\n\
    \  local index = 0\n  for i = #word, 1, -1 do\n    for j = 1, #vowels do\n   \
    \   if word:sub(i, i) == vowels[j] then\n        if index == 0 then\n        \
    \  index = i\n        else\n          if index - i > 1 then\n            index\
    \ = i\n          end\n        end\n      end\n    end\n  end\n  if index ~= 0\
    \ then\n    closest_vowel = word:sub(index, index)\n  end\n  return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmh1964u.lua:37:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpfmh1964u.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  \n  if word:match(\"^[^aeiou]*[aeiou][^aeiou]*$\") then return \"\" end\n \
    \ \n  local s, e, res\n  s, e = word:find(\"[^aeiou]+[aeiou][^aeiou]+\")\n  if\
    \ s then res = word:sub(s+1, e) end\n  \n  if res and res:match(\"[^aeiou]\")\
    \ then\n    res = res:sub(1, res:find(\"[^aeiou]\"))\n  end\n  \n  return res\
    \ or \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq2qasa_.lua:29:\
    \ expected: \"u\"\nactual: \"og\"\nstack traceback:\n\t/tmp/tmplq2qasa_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    --\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkts10bvo.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \t-- write your code here\n\t-- get right side of word\n\tlocal word_len = string.len(word)\n\
    \tlocal right_side = string.sub(word, word_len)\n\t-- loop through right side\
    \ of word\n\tfor i=1, word_len do\n\t\t-- get char\n\t\tlocal char = string.sub(right_side,\
    \ i, i)\n\t\t-- if char is consenant and next char is vowel, return vowel\n\t\t\
    if char ~= 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~= 'u'\
    \ then\n\t\t\t-- if next char is vowel, return next char\n\t\t\tlocal next_char\
    \ = string.sub(right_side, i+1, i+1)\n\t\t\tif next_char == 'a' or next_char ==\
    \ 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n\t\t\t\
    \treturn next_char\n\t\t\tend\n\t\tend\n\tend\n\treturn \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bohe8oa.lua:35:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_bohe8oa.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4u6px7g.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpy4u6px7g.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- YOUR CODE HERE\n  local arr = {\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\"\
    ,\"I\",\"O\",\"U\"}\n  local res = \"\"\n  local max = 0\n  local chk = string.find(word,\
    \ \"[^aeiouAEIOU]*[aeiouAEIOU][^aeiouAEIOU]*[aeiouAEIOU]\")\n  if not chk then\n\
    \    return \"\"\n  end\n  for i=1,#arr do\n    local count = string.match(word,\
    \ arr[i])\n    if count then\n      if i < 6 then\n        if i > max then\n \
    \         max = i\n          res = arr[i]\n        end\n      elseif i == max\
    \ + 5 then\n        if i > max then\n          max = i\n          res = arr[i]\n\
    \        end\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32qsulgv.lua:43:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp32qsulgv.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  if not word then return \"\" end\n  local vowel_table = {\n    [\"a\"] = true,\n\
    \    [\"e\"] = true,\n    [\"i\"] = true,\n    [\"o\"] = true,\n    [\"u\"] =\
    \ true,\n    [\"A\"] = true,\n    [\"E\"] = true,\n    [\"I\"] = true,\n    [\"\
    O\"] = true,\n    [\"U\"] = true,\n  }\n  local last_letter\n  local last_vowel\n\
    \  for i = #word, 1, -1 do\n    local letter = word:sub(i, i)\n    if not vowel_table[letter]\
    \ then\n      if last_vowel then\n        return last_vowel\n      else\n    \
    \    return \"\"\n      end\n    else\n      last_vowel = letter\n    end\n  end\n\
    \  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtjyeuai.lua:45:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwtjyeuai.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tword = word:reverse()\n\tfor i = 1, #word do\n\t\tif word:sub(i, i):match(\"\
    [AEIOUaeiou]\") then\n\t\t\tif word:sub(i + 1, i + 1):match(\"[^AEIOUaeiou]\"\
    ) then\n\t\t\t\treturn word:sub(i, i)\n\t\t\tend\n\t\tend\n\tend\n\treturn \"\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp318xh5ha.lua:30:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmp318xh5ha.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal last_vowel = 0\n\tlocal word_size\
    \ = word:len()\n\tfor i = word_size, 1, -1 do\n\t\tfor _,v in ipairs(vowels) do\n\
    \t\t\tif word:sub(i, i) == v then\n\t\t\t\tlast_vowel = i\n\t\t\t\tbreak\n\t\t\
    \tend\n\t\tend\n\t\tif last_vowel > 0 then\n\t\t\tbreak\n\t\tend\n\tend\n\tif\
    \ last_vowel == 0 then\n\t\treturn ''\n\tend\n\tfor i = last_vowel, word_size,\
    \ 1 do\n\t\tfor _,v in ipairs(vowels) do\n\t\t\tif word:sub(i, i) == v then\n\t\
    \t\t\treturn v\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstk3zbt7.lua:44:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpstk3zbt7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx0ezt7f.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpzx0ezt7f.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal c = \"\"\n\tlocal\
    \ d = 0\n\tlocal last = string.len(word)\n\tfor i = last, 1, -1 do\n\t\tif c ==\
    \ \"\" then\n\t\t\tc = string.sub(word, i, i)\n\t\t\tif c == \"a\" or c == \"\
    e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\t\t\t\tc = \"\"\n\t\t\telse\n\
    \t\t\t\tfor j = 1, #vowels do\n\t\t\t\t\td = string.find(word, vowels[j], i)\n\
    \t\t\t\t\tif d ~= nil then\n\t\t\t\t\t\td = d - i\n\t\t\t\t\t\tbreak\n\t\t\t\t\
    \tend\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tif c == \"a\" or c == \"e\" or\
    \ c == \"i\" or c == \"o\" or c == \"u\" then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\
    \t\tfor j = 1, #vowels do\n\t\t\t\t\tlocal n = string.find(word, vowels[j], i)\n\
    \t\t\t\t\tif n ~= nil then\n\t\t\t\t\t\tif n - i < d then\n\t\t\t\t\t\t\td = n\
    \ - i\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn string.sub(word, last - d + 1, last - d + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxz05q4lx.lua:37:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxz05q4lx.lua:37:\
    \ in local 'candidate'\n\t/tmp/tmpxz05q4lx.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    for i = string.len(word), 1, -1 do\n        local ch = string.sub(word, i,\
    \ i)\n        if ch == \"A\" or ch == \"E\" or ch == \"I\" or ch == \"O\" or ch\
    \ == \"U\" then\n            local prev = string.sub(word, i - 1, i - 1)\n   \
    \         if prev ~= \"A\" and prev ~= \"E\" and prev ~= \"I\" and prev ~= \"\
    O\" and prev ~= \"U\" then\n                return ch\n            end\n     \
    \   end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp4oypto.lua:27:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmp4oypto.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp57i9e2.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmp57i9e2.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  if not word:match(\"[^aeiouAEIOU]\") then return \"\"\
    \ end\n  local vowel = {a = 1, e = 1, i = 1, o = 1, u = 1, A = 1, E = 1, I = 1,\
    \ O = 1, U = 1}\n  local last_vowel = nil\n  for i = #word, 1, -1 do\n    if vowel[word:sub(i,\
    \ i)] then\n      last_vowel = i\n      break\n    end\n  end\n  if not last_vowel\
    \ then return \"\" end\n  local next_vowel = nil\n  for i = last_vowel - 1, 1,\
    \ -1 do\n    if vowel[word:sub(i, i)] then\n      next_vowel = i\n      break\n\
    \    end\n  end\n  if not next_vowel then return word:sub(last_vowel, last_vowel)\
    \ end\n  if next_vowel - 1 == 0 then return \"\" end\n  if vowel[word:sub(next_vowel\
    \ - 1, next_vowel - 1)] then return \"\" end\n  return word:sub(next_vowel, next_vowel)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1td3lx_.lua:39:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpj1td3lx_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal pattern = \"[^AEIOUaeiou]?[AEIOUaeiou][^AEIOUaeiou]?\"\n\tlocal vowel\
    \ = string.match(word, pattern)\n\treturn vowel and vowel:sub(2, 2) or \"\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduahhugn.lua:20:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpduahhugn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    ['a'] = true,\n    ['e'] = true,\n    ['i'] = true,\n\
    \    ['o'] = true,\n    ['u'] = true,\n    ['A'] = true,\n    ['E'] = true,\n\
    \    ['I'] = true,\n    ['O'] = true,\n    ['U'] = true\n  }\n  local reverse_word\
    \ = word:reverse()\n  local next_vowel = false\n  for c in reverse_word:gmatch('.')\
    \ do\n    if vowels[c] then\n      if next_vowel then\n        return c\n    \
    \  end\n    else\n      next_vowel = true\n    end\n  end\n  return ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34kvgsay.lua:43:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp34kvgsay.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowel = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal result = \"\"\n\t\
    for i=word:len(),1,-1 do\n\t\tfor k,v in pairs(vowel) do\n\t\t\tif word:sub(i,i)\
    \ == v then\n\t\t\t\tif result == \"\" then\n\t\t\t\t\tresult = v\n\t\t\t\telse\n\
    \t\t\t\t\treturn result\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tresult = \"\"\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8yu6a40.lua:33:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpj8yu6a40.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppibcyl8m.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmppibcyl8m.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal pos = #word\n\t\
    local result = \"\"\n\twhile pos > 1 do\n\t\tlocal char = word:sub(pos, pos)\n\
    \t\tif char:find(\"[a-zA-Z]\") and not char:find(\"[aeiouAEIOU]\") then\n\t\t\t\
    result = word:sub(pos+1, pos+1)\n\t\t\tif result:find(\"[aeiouAEIOU]\") then\n\
    \t\t\t\treturn result\n\t\t\tend\n\t\tend\n\t\tpos = pos - 1\n\tend\n\treturn\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi616mpxu.lua:32:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpi616mpxu.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local prev = nil\n  local\
    \ current = nil\n  local found = nil\n  for i = #word, 1, -1 do\n    current =\
    \ string.sub(word, i, i)\n    if current == \"a\" or current == \"e\" or current\
    \ == \"i\" or current == \"o\" or current == \"u\" then\n      if prev ~= nil\
    \ and prev ~= \"a\" and prev ~= \"e\" and prev ~= \"i\" and prev ~= \"o\" and\
    \ prev ~= \"u\" then\n        found = current\n        break\n      end\n    end\n\
    \    prev = current\n  end\n  return found\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9xj59is.lua:34:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpl9xj59is.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8b2f7wdl.lua:17:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp8b2f7wdl.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    local g = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj18tm93l.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local index = -1\n    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2zgprnz1.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local len = #word\n    for i = 1, len\
    \ do\n        local curr = word:sub(i, i)\n        if vowels:find(curr) then\n\
    \            if i == 1 then\n                local next = word:sub(i + 1, i +\
    \ 1)\n                if not vowels:find(next) then\n                    return\
    \ curr\n                end\n            elseif i == len then\n              \
    \  local prev = word:sub(i - 1, i - 1)\n                if not vowels:find(prev)\
    \ then\n                    return curr\n                end\n            else\n\
    \                local prev = word:sub(i - 1, i - 1)\n                local next\
    \ = word:sub(i + 1, i + 1)\n                if not vowels:find(prev) and not vowels:find(next)\
    \ then\n                    return curr\n                end\n            end\n\
    \        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqst7bykb.lua:42:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpqst7bykb.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {a = true, e = true, i = true, o = true, u = true,\n       \
    \           A = true, E = true, I = true, O = true, U = true}\n  local ans = ''\n\
    \  local last_c = ''\n  for i = 1, #word do\n    local char = word:sub(i, i)\n\
    \    if not vowels[char] then\n      if i == #word then\n        return ''\n \
    \     end\n      last_c = char\n    else\n      if last_c == '' then\n       \
    \ return ''\n      end\n      return char\n    end\n  end\n  return ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqd_64il.lua:36:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpqqd_64il.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  local vowels = \"aeiouAEIOU\"\n  local index_1 = 0\n  local index_2\
    \ = 0\n  local count = 0\n  for i = #word, 1, -1 do\n    for j = 1, string.len(vowels)\
    \ do\n      if word:sub(i, i) == vowels:sub(j, j) then\n        index_1 = i\n\
    \        count = count + 1\n        break\n      end\n    end\n    if count ==\
    \ 1 then\n      break\n    end\n  end\n  count = 0\n  for i = index_1, 1, -1 do\n\
    \    for j = 1, string.len(vowels) do\n      if word:sub(i, i) == vowels:sub(j,\
    \ j) then\n        index_2 = i\n        count = count + 1\n        break\n   \
    \   end\n    end\n    if count == 1 then\n      break\n    end\n  end\n  if index_1\
    \ == 0 then\n    return \"\"\n  else\n    return word:sub(index_2, index_2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdjcnj62.lua:54:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpxdjcnj62.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tword = word:reverse()\n\tlocal i = word:find('[aeiou]')\n\tif i == 1 then return\
    \ '' end\n\treturn word:sub(i - 1, i - 1):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpp4m1i9.lua:21:\
    \ expected: \"u\"\nactual: \"r\"\nstack traceback:\n\t/tmp/tmptpp4m1i9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    for i = #word, 1, -1 do\n        if word:sub(i, i):match(\"[aeiouAEIOU]\"\
    ) then\n            if i > 1 and i < #word then\n                if not word:sub(i\
    \ - 1, i - 1):match(\"[aeiouAEIOU]\") and not word:sub(i + 1, i + 1):match(\"\
    [aeiouAEIOU]\") then\n                    return word:sub(i, i)\n            \
    \    end\n            end\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local count = 0\n    local prev = ' '\n    local res = ''\n    for i = word:len(),\
    \ 1, -1 do\n        local c = word:sub(i, i)\n        if prev ~= ' ' and c:find('[AEIOUaeiou]')\
    \ then\n            if count == 1 then\n                res = c\n            \
    \    break\n            end\n            count = 1\n        elseif prev == ' '\
    \ and c:find('[AEIOUaeiou]') then\n            count = 0\n        elseif prev:find('[AEIOUaeiou]')\
    \ then\n            count = 0\n        else\n            count = count + 1\n \
    \       end\n        prev = c\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67l31uua.lua:38:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp67l31uua.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  return string.match(word, \"[^aeiou]*([aeiou]+)[^aeiou]*$\") or \"\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdalowhdd.lua:20:\
    \ expected: \"\"\nactual: \"ea\"\nstack traceback:\n\t/tmp/tmpdalowhdd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- fill your code in here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw46eck7e.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpw46eck7e.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal loc = {}\n\tfor i, c in ipairs(word) do\n\t\tif c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n\t\t\tloc[#loc + 1] = i\n\t\tend\n\t\
    end\n\tif #loc == 0 then\n\t\treturn ''\n\tend\n\tlocal c = string.byte(word,\
    \ -1)\n\tif c == string.byte('a') or c == string.byte('e') or c == string.byte('i')\
    \ or c == string.byte('o') or c == string.byte('u') then\n\t\treturn word:sub(-1)\n\
    \tend\n\tfor i = 1, #loc do\n\t\tlocal v = loc[i]\n\t\tif v == #word then\n\t\t\
    \treturn ''\n\t\tend\n\t\tif word:sub(v + 1, v + 1) ~= 'a' and word:sub(v + 1,\
    \ v + 1) ~= 'e' and word:sub(v + 1, v + 1) ~= 'i' and word:sub(v + 1, v + 1) ~=\
    \ 'o' and word:sub(v + 1, v + 1) ~= 'u' then\n\t\t\treturn word:sub(v, v)\n\t\t\
    end\n\tend\n\treturn ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqqps64r.lua:40:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbqqps64r.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9dqy972.lua:17:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpk9dqy972.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local start_consonant = word:match(\"^([^aeiou]+)\")\n    local end_consonant\
    \ = word:match(\"([^aeiou]+)$\")\n    local middle = word:gsub(\"^\" .. start_consonant,\
    \ \"\"):gsub(end_consonant .. \"$\", \"\")\n    local closest = middle:match(\"\
    ([aeiou])[^aeiou]+$\") or \"\"\n    return closest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4gxd_ml.lua:22:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpm4gxd_ml.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tfor i = word:len(), 1, -1 do\n\t\tlocal c =\
    \ word:sub(i, i)\n\t\tlocal c_prev = word:sub(i - 1, i - 1)\n\t\tlocal c_next\
    \ = word:sub(i + 1, i + 1)\n\t\tif vowels:find(c) and not vowels:find(c_prev)\
    \ and not vowels:find(c_next) then\n\t\t\treturn c\n\t\tend\n\tend\n\treturn \"\
    \"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  word = word:reverse()\n  local index = 0\n  local vowels = {\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n  for k, v in ipairs(word)\
    \ do\n    for _, j in ipairs(vowels) do\n      if j == v then\n        if word:sub(k\
    \ + 1, k + 1) ~= v and word:sub(k - 1, k - 1) ~= v then\n          return v\n\
    \        end\n      end\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e8g0vt7.lua:30:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7e8g0vt7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local v = {['a']=true,['e']=true,['i']=true,['o']=true,['u']=true,['A']=true,['E']=true,['I']=true,['O']=true,['U']=true}\n\
    \  local found = false\n  local distance = nil\n  local letter = nil\n  local\
    \ index = nil\n  for i=1, #word do\n    if word:sub(i,i) == 'y' or word:sub(i,i)\
    \ == 'Y' then\n      word = word:sub(1,i-1)..'a'..word:sub(i+1)\n    end\n  end\n\
    \  for i=#word, 1, -1 do\n    if v[word:sub(i,i)] and not found then\n      index\
    \ = i\n      letter = word:sub(i,i)\n      found = true\n    elseif not v[word:sub(i,i)]\
    \ and found then\n      distance = #word - i\n      break\n    end\n  end\n  if\
    \ distance == nil then return '' end\n  return letter, distance\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j9vhha9.lua:42:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp_j9vhha9.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0te43f6r.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0te43f6r.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local d = {a = 1, e = 1, i = 1, o = 1, u = 1, A = 1, E = 1, I = 1, O = 1,\
    \ U = 1}\n    local p = 1\n    local i = string.len(word)\n    while i > 0 do\n\
    \        local v = string.sub(word, i, i)\n        if d[v] then\n            if\
    \ p == 2 then\n                return v\n            end\n            p = 1\n\
    \        else\n            p = 2\n        end\n        i = i - 1\n    end\n  \
    \  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpioklme23.lua:35:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpioklme23.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local word = word:lower()\n\
    \  for i = #word, 1, -1 do\n    for j = 1, #vowels do\n      if word:sub(i, i)\
    \ == vowels[j] then\n        return word:sub(i, i)\n      end\n    end\n  end\n\
    \  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sqdbeom.lua:29:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp3sqdbeom.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- here you must write your code\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsix4ch76.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsix4ch76.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  local vowel = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local res =\
    \ \"\"\n  local flag = true\n  for i = #word, 1, -1 do\n    if not flag then\n\
    \      if word:sub(i, i) == \"a\" or word:sub(i, i) == \"e\" or word:sub(i, i)\
    \ == \"i\" or word:sub(i, i) == \"o\" or word:sub(i, i) == \"u\" then\n      \
    \  res = word:sub(i, i)\n        break\n      end\n    else\n      if word:sub(i,\
    \ i) == \"a\" or word:sub(i, i) == \"e\" or word:sub(i, i) == \"i\" or word:sub(i,\
    \ i) == \"o\" or word:sub(i, i) == \"u\" then\n        flag = false\n      end\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw5lzm82.lua:34:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpkw5lzm82.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- YOUR CODE GOES HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp241bqpwj.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp241bqpwj.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf3du5n5.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkf3du5n5.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- TODO: implement get_closest_vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1d70wnn.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpv1d70wnn.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {['a'] = true, ['e'] = true, ['i'] = true, ['o'] = true, ['u']\
    \ = true}\n    local found = nil\n    for i = #word, 1, -1 do\n        if vowels[word:sub(i,\
    \ i)] then\n            if i < #word and vowels[word:sub(i + 1, i + 1)] then \n\
    \                found = i\n            elseif i > 1 and vowels[word:sub(i - 1,\
    \ i - 1)] then\n                found = i\n            end\n        end\n    end\n\
    \    return found and word:sub(found, found) or ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0azgso4.lua:29:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpq0azgso4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2y0ns6c.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpw2y0ns6c.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvfnuu0q.lua:18:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpuvfnuu0q.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  word = word:lower()\n  for i = #word, 1, -1 do\n    if word:find(\"[aeiou]\"\
    , i) then\n      if word:find(\"[^aeiou]\", i - 1) and word:find(\"[^aeiou]\"\
    , i + 1) then\n        return word:sub(i, i)\n      end\n    end\n  end\n  return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdmhq6ok.lua:28:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpcdmhq6ok.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local e = word:find('[^%l]') or #word + 1\n    local s = word:find('[%l]',\
    \ e - #word - 1) or 1\n    for i = e - 1, s, -1 do\n        if word:sub(i, i):find('[aeiou]')\
    \ then\n            return word:sub(i, i)\n        end\n    end\n    return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ysptq79.lua:27:\
    \ expected: \"\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp0ysptq79.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vwls = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local len = string.len(word)\n\
    \    local pre, post = 0, 0\n    for i = len, 1, -1 do\n        local c = string.sub(word,\
    \ i, i)\n        if c ~= \"a\" and c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and\
    \ c ~= \"u\" then\n            pre = i\n            break\n        end\n    end\n\
    \    for i = pre, len do\n        local c = string.sub(word, i, i)\n        if\
    \ c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n  \
    \          post = i\n            break\n        end\n    end\n    if pre == 0\
    \ or post == 0 then\n        return \"\"\n    end\n    local last = string.sub(word,\
    \ post, post)\n    return last\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph681gptg.lua:39:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmph681gptg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
