name: HumanEval_63_fibfib
language: lua
results:
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local f1, f2, f3 = 0, 0, 1\n  for i = 2, n\
    \ do\n    f1, f2, f3 = f2, f3, f1 + f2 + f3\n  end\n  return f3\nend\nassert(fibfib(1)\
    \ == 0)\nassert(fibfib(5) == 4)\nassert(fibfib(8) == 24)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmywrp0z4.lua:20: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpmywrp0z4.lua:20: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyfc8bgj.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpbyfc8bgj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n <= 1 then\n        return 0\n    elseif\
    \ n == 2 then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg69e_1p.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmg69e_1p.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal s = {}\n\tlocal last = 1\n\tfor i = 1,\
    \ n do\n\t\tlocal v = s[i-3] or 0\n\t\tv = v + (s[i-2] or 0) + (s[i-1] or 0)\n\
    \t\ts[i] = v\n\t\tlast = v\n\tend\n\treturn last\nend\nprint(fibfib(1))\nprint(fibfib(5))\n\
    print(fibfib(8))\nprint(fibfib(9))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "0\n0\n0\n0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctv16pk5.lua:32:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpctv16pk5.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local memo = {}\n    local function fibfib_rec(n)\n\
    \        if n <= 2 then\n            return n - 1\n        end\n        local\
    \ res = memo[n]\n        if res then\n            return res\n        end\n  \
    \      res = fibfib_rec(n - 1) + fibfib_rec(n - 2) + fibfib_rec(n - 3)\n     \
    \   memo[n] = res\n        return res\n    end\n    return fibfib_rec(n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_kpu46o.lua:35:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpx_kpu46o.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local arr = {0, 0, 1}\n  for i = 3, n do\n\
    \    arr[i] = arr[i-1] + arr[i-2] + arr[i-3]\n  end\n  return arr[n]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6l9v5lr.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl6l9v5lr.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  return\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvsv1mox.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpcvsv1mox.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ - 1 do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvbges2r.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqvbges2r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oqboh5g.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp6oqboh5g.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- TODO: write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbo1lisb.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpgbo1lisb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- Write your code here\n    if n <= 0 then\n\
    \        return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2\
    \ then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal fib1, fib2, fib3 = 0, 0, 1\n\tfor i =\
    \ 3, n do\n\t\tfib1, fib2, fib3 = fib2, fib3, fib1 + fib2 + fib3\n\tend\n\treturn\
    \ fib3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjlh0yu5.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphjlh0yu5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2342bbqb.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp2342bbqb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return nil\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  for i = 1, n - 1 do\n    a, b, c = b, c, a + b + c\n  end\n\
    \  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15zwnked.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp15zwnked.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tassert(type(n) == \"number\" and n >= 0, \"\
    n must be a non-negative number.\")\n\tif n <= 1 then\n\t\treturn 0\n\telseif\
    \ n == 2 then\n\t\treturn 1\n\telse\n\t\tlocal a, b, c = 0, 0, 1\n\t\tfor i =\
    \ 3, n do\n\t\t\ta, b, c = b, c, a + b + c\n\t\tend\n\t\treturn c\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllkf7czq.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpllkf7czq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- TODO: Write fibfib(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmj5jyv_4.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpmj5jyv_4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 3 then\n    return n - 1\n  end\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewjn_54h.lua:25:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpewjn_54h.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local result = {}\n  for i = 0, n do\n    result[i]\
    \ = 0\n  end\n  result[0] = 0\n  result[1] = 0\n  result[2] = 1\n  for i = 3,\
    \ n do\n    result[i] = result[i-1] + result[i-2] + result[i-3]\n  end\n  return\
    \ result[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  assert(n >= 0)\n  if n == 0 then return 0 end\n\
    \  if n == 1 then return 0 end\n  if n == 2 then return 1 end\n  local fn0, fn1,\
    \ fn2 = 0, 0, 1\n  for i = 3, n do\n    fn0, fn1, fn2 = fn1, fn2, fn0 + fn1 +\
    \ fn2\n  end\n  return fn2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgupofuuf.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpgupofuuf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcb6d3vl3.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpcb6d3vl3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then return -1 end\n  if n == 0 then\
    \ return 0 end\n  if n == 1 then return 0 end\n  if n == 2 then return 1 end\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 3 then\n    return n-1\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  for i = 3, n do\n    a, b, c = b, c, c + b + a\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    return fibfib.helper(n, fibfib.cache)\nend\n\
    fibfib.cache = { 0, 0, 1 }\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz0sg7hy_.lua:16: attempt to index a function value (local\
    \ 'fibfib')\nstack traceback:\n\t/tmp/tmpz0sg7hy_.lua:16: in main chunk\n\t[C]:\
    \ in ?\n"
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local f1, f2, f3 = 0, 0, 1\n    for i = 2,\
    \ n do\n        f1, f2, f3 = f2, f3, f1 + f2 + f3\n    end\n    return f3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqja9f0d.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwqja9f0d.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n-1\n    end\n\
    \    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b, c, c +\
    \ b + a\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local first_fib = 0\n    local second_fib\
    \ = 0\n    local third_fib = 1\n    if n == 0 then\n        return first_fib\n\
    \    elseif n == 1 then\n        return second_fib\n    elseif n == 2 then\n \
    \       return third_fib\n    else\n        for i = 3, n do\n            first_fib\
    \ = second_fib\n            second_fib = third_fib\n            third_fib = first_fib\
    \ + second_fib + third_fib\n        end\n        return third_fib\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaevi9q3h.lua:38:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpaevi9q3h.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local table = {0, 0, 1}\n    for i = 3, n\
    \ do\n        table[i] = table[i-1] + table[i-2] + table[i-3]\n    end\n    return\
    \ table[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatxvok5k.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpatxvok5k.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\t-- t[1] = 0\n\t-- t[2] = 0\n\t-- t[3] = 1\n\
    \t-- for i = 4, n do\n\t-- \tt[i] = t[i-1] + t[i-2] + t[i-3]\n\t-- end\n\t-- return\
    \ t[n]\n\tlocal a, b, c = 0, 0, 1\n\tlocal d = 0\n\tfor i = 4, n do\n\t\td = a\
    \ + b + c\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjfql6j3.lua:35:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqjfql6j3.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local n1, n2, n3 = 0, 0, 1\n    local fibfib_n\
    \ = 0\n    for i = 3, n do\n        fibfib_n = n1 + n2 + n3\n        n1, n2, n3\
    \ = n2, n3, fibfib_n\n    end\n    return fibfib_n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yk4lh83.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2yk4lh83.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local cache = {0, 0, 1}\n    return (function(n)\n\
    \        if not cache[n] then\n            cache[n] = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        end\n        return cache[n]\n    end)(n)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j0wbp9d.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4j0wbp9d.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzdobp5e.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpxzdobp5e.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local fib = {0, 0, 1}\n  for i = 3, n do\n\
    \    fib[i+1] = fib[i] + fib[i-1] + fib[i-2]\n  end\n  return fib[n+1]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n <= 1 then\n\t\treturn 0\n\telseif n ==\
    \ 2 then\n\t\treturn 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return nil\n  end\n  if\
    \ n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 0\n  end\n  if\
    \ n == 2 then\n    return 1\n  end\n  local a, b, c = 0, 0, 1\n  for i = 3, n\
    \ do\n    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local v1, v2, v3 = 0, 0, 1\n  if n == 0 then\
    \ return v1 end\n  if n == 1 then return v2 end\n  if n == 2 then return v3 end\n\
    \  for i = 3, n do\n    v1, v2, v3 = v2, v3, v2 + v3 + v1\n  end\n  return v3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal one, two, three = 0, 0, 1\n\tif n ==\
    \ 0 then\n\t\treturn one\n\telseif n == 1 then\n\t\treturn two\n\telseif n ==\
    \ 2 then\n\t\treturn three\n\telse\n\t\tfor i = 3, n do\n\t\t\tone, two, three\
    \ = two, three, one + two + three\n\t\tend\n\t\treturn three\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n <= 1 then\n        return 0\n    elseif\
    \ n == 2 then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal cache = {}\n\treturn fibfibhelp(n, cache)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphexzq5_o.lua:15:\
    \ attempt to call a nil value (global 'fibfibhelp')\nstack traceback:\n\t/tmp/tmphexzq5_o.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmphexzq5_o.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_7beie6.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmps_7beie6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local fib3 = 0\n  local fib2 = 0\n  local fib1\
    \ = 1\n  if n == 0 then\n    return fib3\n  elseif n == 1 then\n    return fib2\n\
    \  elseif n == 2 then\n    return fib1\n  else\n    for i = 3, n do\n      local\
    \ fib = fib3 + fib2 + fib1\n      fib3 = fib2\n      fib2 = fib1\n      fib1 =\
    \ fib\n    end\n    return fib1\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n-1\n    end\n\
    \    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b, c, a+b+c\n\
    \    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    assert(n >= 0, \"Please enter an integer\
    \ greater than or equal to 0\")\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  assert(type(n) == \"number\" and n == math.floor(n)\
    \ and n >= 0, \"usage: fibfib(n) where n is a non-negative integer\")\n  local\
    \ cache = {[0] = 0, [1] = 0, [2] = 1}\n  local function fib(n)\n    assert(type(n)\
    \ == \"number\" and n == math.floor(n) and n >= 0, \"fib(n) where n is a non-negative\
    \ integer\")\n    local f = cache[n]\n    if f == nil then\n      f = fib(n-1)\
    \ + fib(n-2) + fib(n-3)\n      cache[n] = f\n    end\n    return f\n  end\n  return\
    \ fib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    assert(n >= 0)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3qluwnl.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpo3qluwnl.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- base cases\n    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 0 end\n    if n == 2 then return 1 end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplx7tk35m.lua:31: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    while n > 0\
    \ do\n        a, b, c = b, c, a + b + c\n        n = n - 1\n    end\n    return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n <= 1 then\n    return 0\n  elseif n ==\
    \ 2 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n <= 1 then\n    return 0\n  elseif n ==\
    \ 2 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n <= 2 then\n    return n-1\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  for i = 3, n do\n    a, b, c = b, c, a+b+c\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n <= 1 then\n\t\treturn 0\n\telseif n ==\
    \ 2 then\n\t\treturn 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, b + c + a\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdviglydy.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpdviglydy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then return nil end\n  if n == 0 then\
    \ return 0 end\n  if n == 1 then return 0 end\n  if n == 2 then return 1 end\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local one = 0\n    local two = 0\n    local\
    \ three = 1\n    local four = 0\n    local i = 0\n    if n == 0 then\n       \
    \ return 0\n    elseif n == 1 then\n        return 0\n    elseif n == 2 then\n\
    \        return 1\n    else\n        while i < n - 2 do\n            four = one\
    \ + two + three\n            one = two\n            two = three\n            three\
    \ = four\n            i = i + 1\n        end\n        return four\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 1, n - 1\
    \ do\n    a, b, c = b, c, c + b + a\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppia05oh8.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppia05oh8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local f = {0, 0, 1}\n    for i = 3, n do\n\
    \        f[i % 3 + 1] = f[i % 3 + 1] + f[(i - 1) % 3 + 1] + f[(i - 2) % 3 + 1]\n\
    \    end\n    return f[n % 3 + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local f0, f1, f2 = 0, 0, 1\n  for i = 1, n\
    \ - 2 do\n    f0, f1, f2 = f1, f2, f0 + f1 + f2\n  end\n  return f2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1m37ek9.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpo1m37ek9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp0p0rur.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpqp0p0rur.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n < 3 then\n\t\treturn n - 1\n\tend\n\t\n\
    \tlocal m = 1\n\tlocal l = 0\n\tlocal k = 0\n\tlocal next = 0\n\t\n\twhile n >\
    \ 2 do\n\t\tnext = m + l + k\n\t\tk = l\n\t\tl = m\n\t\tm = next\n\t\tn = n -\
    \ 1\n\tend\n\t\n\treturn next\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- TODO: Implement\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5v7rxae.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpd5v7rxae.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_ecbohz.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp2_ecbohz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if (n < 0) then\n        error(\"fibfib(\"\
    \ .. n .. \") : n must be >= 0\")\n    end\n    local curr, prev, preprev = 0,\
    \ 0, 0\n    for i = 1, n do\n        curr, prev, preprev = prev + preprev, curr,\
    \ prev\n    end\n    return curr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4svtylhb.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4svtylhb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal a, b, c = 0, 0, 1\n\tfor i = 1, n - 1\
    \ do\n\t\ta, b, c = b, c, a + b + c\n\tend\n\treturn a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hxlh4b1.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3hxlh4b1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    assert(type(n) == \"number\" and n >= 0 and\
    \ n == math.floor(n), \"Invalid argument!\")\n    local t1, t2, t3 = 0, 0, 1\n\
    \    for i = 3, n do\n        t1, t2, t3 = t2, t3, t1 + t2 + t3\n    end\n   \
    \ return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7oh62it.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi7oh62it.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- TODO: Put your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ty88cc_.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp9ty88cc_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- TODO: implement\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5__2xh1r.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp5__2xh1r.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local prev, cur, next = 0, 0, 1\n  for i =\
    \ 2, n do\n    prev, cur, next = cur, next, next + cur + prev\n  end\n  return\
    \ next\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3r05eqm2.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3r05eqm2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 2, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_dxrie8.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa_dxrie8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal t = {0, 0, 1}\n\tfor i = 3, n do\n\t\t\
    t[i] = t[i-1] + t[i-2] + t[i-3]\n\tend\n\treturn t[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ltab8l9.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2ltab8l9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then return nil end\n  if n < 2 then\
    \ return 0 end\n  if n == 2 then return 1 end\n  local f0, f1, f2 = 0, 0, 1\n\
    \  for i = 3, n do\n    f0, f1, f2 = f1, f2, f0 + f1 + f2\n  end\n  return f2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n <= 2 then\n        return n - 1\n  \
    \  end\n    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b,\
    \ c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    if n == 0 then\n\
    \        return a\n    elseif n == 1 then\n        return b\n    elseif n == 2\
    \ then\n        return c\n    else\n        for i = 3, n do\n            a, b,\
    \ c = b, c, a + b + c\n        end\n        return c\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif (n == 0) then\n\t\treturn 0\n\telseif (n\
    \ == 1) then\n\t\treturn 0\n\telseif (n == 2) then\n\t\treturn 1\n\telse\n\t\t\
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n - 1\n   \
    \ end\n    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b,\
    \ c, c + b + a\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n <= 2 then\n    return n-1\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  for i = 3, n do\n    a, b, c = b, c, a+b+c\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- TODO\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpku9a1s3l.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpku9a1s3l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal m = 1\n\tlocal a, b, c = 0, 0, 1\n\t\
    while (m <= n) do\n\t\ta, b, c = b, c, c + b + a\n\t\tm = m + 1\n\tend\n\treturn\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- TODO: implement\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33ggjk14.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp33ggjk14.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n <= 1 then\n    return 0\n  elseif n ==\
    \ 2 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 3 then\n    return 0\n  elseif n ==\
    \ 3 then\n    return 1\n  else\n    local a, b, c = 0, 0, 1\n    for i = 4, n\
    \ do\n      a, b, c = b, c, a + b + c\n    end\n    return c\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqujtj8xi.lua:30:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqujtj8xi.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, c + b + a\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu2kp2hp.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphu2kp2hp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppugfw5n2.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmppugfw5n2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a = 0\n  local b = 0\n  local c = 1\n\
    \  for i = 1, n do\n    local d = a + b + c\n    a = b\n    b = c\n    c = d\n\
    \  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1td23_x.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpy1td23_x.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- ... TODO: implement this function\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3rchs80.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpr3rchs80.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local prev1, prev2, prev3 = 0, 0, 1\n  if n\
    \ == 0 then return prev1 end\n  if n == 1 then return prev2 end\n  for i = 3,\
    \ n do\n    prev1, prev2, prev3 = prev2, prev3, prev1 + prev2 + prev3\n  end\n\
    \  return prev3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  assert(type(n) == \"number\", \"Parameter n\
    \ is not a number.\")\n  assert(n == math.floor(n), \"Parameter n is not an integer.\"\
    )\n  assert(n >= 0, \"Parameter n is not non-negative.\")\n  local fib = {0, 0,\
    \ 1}\n  for i = 3, n do\n    fib[i+1] = fib[i] + fib[i-1] + fib[i-2]\n  end\n\
    \  return fib[n+1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local f = {}\n    f[0] = 0\n    f[1] = 0\n\
    \    f[2] = 1\n    for i = 3, n do\n        f[i] = f[i-1] + f[i-2] + f[i-3]\n\
    \    end\n    return f[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- Implement your solution here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06631uaf.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp06631uaf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal a, b, c = 0, 0, 1\n\tfor i = 3, n do\n\
    \t\ta, b, c = b, c, a + b + c\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpny3yle5n.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpny3yle5n.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 2 then\n    return n\n  end\n  local\
    \ n_3, n_2, n_1 = 0, 0, 1\n  for i = 3, n do\n    n_3, n_2, n_1 = n_2, n_1, n_2\
    \ + n_1 + n_3\n  end\n  return n_1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo4bow7y.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyo4bow7y.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local x, y, z = 0, 0, 1\n  while n > 0 do\n\
    \    x, y, z = y, z, y + z + x\n    n = n - 1\n  end\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n <= 1 then\n        return 0\n    elseif\
    \ n == 2 then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local memo = {}\n  local function fib(n)\n\
    \    if not memo[n] then\n      if n < 3 then\n        memo[n] = n - 1\n     \
    \ else\n        memo[n] = fib(n - 1) + fib(n - 2) + fib(n - 3)\n      end\n  \
    \  end\n    return memo[n]\n  end\n  return fib(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3apajc4o.lua:33:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3apajc4o.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- implement your solution\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0beozmy.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpu0beozmy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    if n == 0 then\n\
    \        return a\n    elseif n == 1 then\n        return b\n    elseif n == 2\
    \ then\n        return c\n    else\n        local i = 3\n        while i <= n\
    \ do\n            a, b, c = b, c, a + b + c\n            i = i + 1\n        end\n\
    \        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return nil\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  for i = 1, n do\n    a, b, c = b, c, a + b + c\n  end\n\
    \  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal a, b, c = 0, 0, 1\n\tfor i = 2, n do\n\
    \t\ta, b, c = b, c, a + b + c\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2de0nb_.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpb2de0nb_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4tas17r.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpm4tas17r.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    print(fibfib(2))\nprint(fibfib(5))\nprint(fibfib(8))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "1\n4\n24\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ - 1 do\n        a, b, c = b, c, c + b + a\n    end\n    return a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9ad4bm2.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl9ad4bm2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local memo = {}\n  local function _fibfib(n)\n\
    \    if n == 0 then return 0 end\n    if n == 1 then return 0 end\n    if n ==\
    \ 2 then return 1 end\n    if memo[n] then return memo[n] end\n    memo[n] = _fibfib(n-1)\
    \ + _fibfib(n-2) + _fibfib(n-3)\n    return memo[n]\n  end\n  return _fibfib(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local m = {0, 0, 1}\n  for i = 3, n do\n  \
    \  m[i % 3 + 1] = m[(i - 1) % 3 + 1] + m[(i - 2) % 3 + 1] + m[(i - 3) % 3 + 1]\n\
    \  end\n  return m[n % 3 + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n <= 1 then\n\t\treturn 0\n\telseif n ==\
    \ 2 then\n\t\treturn 1\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    assert(fibfib(1) == 0)\nassert(fibfib(5) == 4)\nassert(fibfib(8) == 24)\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n <= 2 then\n    return n - 1\n  end\n \
    \ local a, b, c = 0, 0, 1\n  for i = 2, n do\n    local d = a + b + c\n    a,\
    \ b, c = b, c, d\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72cd5z1_.lua:30:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp72cd5z1_.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnee32n4w.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpnee32n4w.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrx23ti_.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpcrx23ti_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal a, b, c = 0, 0, 1\n\tfor i = 3, n do\n\
    \t\ta, b, c = b, c, a + b + c\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bgp6zgv.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3bgp6zgv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 3 then\n    return n - 1\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  local ret = 0\n  while n > 2 do\n    ret = a + b + c\n\
    \    a, b, c = b, c, ret\n    n = n - 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local cache = {\n        [0] = 0,\n     \
    \   [1] = 0,\n        [2] = 1,\n    }\n    local function fib(m)\n        local\
    \ ret = cache[m]\n        if ret then\n            return ret\n        end\n \
    \       ret = fib(m-1) + fib(m-2) + fib(m-3)\n        cache[m] = ret\n       \
    \ return ret\n    end\n    return fib(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- This seems like a good place to use a\
    \ recursive function!\n    -- So, let's think about our base cases.\n    -- What\
    \ are the smallest numbers that satisfy the constraints?\n    -- We know that\
    \ fibfib(0) == 0, so that's a base case.\n    -- We also know that fibfib(1) ==\
    \ 0, so that's a base case.\n    -- We know that fibfib(2) == 1, so that's our\
    \ third base case.\n    -- Thus, we'll want to return 0 if n == 0, return 0 if\
    \ n == 1, and return 1 if n == 2.\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  -- Now, we have our base cases, so we can start thinking about the recursive\
    \ portion of our function.\n    -- We know that fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3), so let's rewrite that as part of our function.\n    else\n  \
    \      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 2, n\
    \ do\n        c = a + b + c\n        a = b\n        b = c\n    end\n    return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdh8aryv.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzdh8aryv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a = 0\n  local b = 0\n  local c = 1\n\
    \  local d = 0\n  for i = 1, n do\n    d = a + b + c\n    a = b\n    b = c\n \
    \   c = d\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfexx7np6.lua:30:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfexx7np6.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local mem = {0, 0, 1}\n    local function\
    \ _fibfib(n)\n        if n < 0 then\n            return 0\n        elseif n ==\
    \ 0 then\n            return mem[1]\n        elseif n == 1 then\n            return\
    \ mem[2]\n        elseif n == 2 then\n            return mem[3]\n        else\n\
    \            local a, b, c = unpack(mem)\n            local i = 3\n          \
    \  while i <= n do\n                mem[i%3+1] = a + b + c\n                a,\
    \ b, c = unpack(mem)\n                i = i + 1\n            end\n           \
    \ return mem[n%3+1]\n        end\n    end\n    return _fibfib(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppdfo08dp.lua:25:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppdfo08dp.lua:25:\
    \ in function </tmp/tmppdfo08dp.lua:15>\n\t(...tail calls...)\n\t/tmp/tmppdfo08dp.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- Your solution goes here.\n    -- Use recursion.\n\
    \    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return\
    \ 0\n    elseif n == 2 then\n        return 1\n    else\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  -- One of the ways to solve this problem is\
    \ to use the definition of the Fibbonacci sequence (used to solve the\n  -- problem\
    \ above) but with a different starting point. If we start from a point where both\
    \ fibfib(0) and fibfib(1)\n  -- are equal to 0, we see that the formula can be\
    \ written with three variables. With this in mind we can use the\n  -- fib(n-1)\
    \ sequence solution, but use a starting point of three zeros.\n  local f0, f1,\
    \ f2 = 0, 0, 1\n  local i = 1\n  while i < n do\n    f0, f1, f2 = f1, f2, f1 +\
    \ f2 + f0\n    i = i + 1\n  end\n  return f2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6d3_3k8x.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6d3_3k8x.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  assert(n >= 0, \"n must be >= 0\")\n  return\
    \ (n == 0 and 0) or (n == 1 and 0) or (n == 2 and 1) or\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return nil\n  end\n  local\
    \ table = {0, 0, 1}\n  if n < 3 then\n    return table[n]\n  end\n  for i = 3,\
    \ n do\n    table[1], table[2], table[3] = table[2], table[3], table[1] + table[2]\
    \ + table[3]\n  end\n  return table[3]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhck973x.lua:30:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplhck973x.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 2 then\n        return n\n    end\n\
    \    local a, b, c = 0, 0, 1\n    for i = 2, n do\n        a, b, c = b, c, a +\
    \ b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakblk_vw.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpakblk_vw.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudyhngct.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpudyhngct.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 1, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgu60jcd.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpkgu60jcd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n - 1\n   \
    \ end\n    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b,\
    \ c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n <= 2 then\n        return n - 1\n  \
    \  end\n    local f0, f1, f2 = 0, 0, 1\n    for i = 3, n do\n        f0, f1, f2\
    \ = f1, f2, f0 + f1 + f2\n    end\n    return f2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9aibz9c.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpl9aibz9c.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n <= 1 then\n    return 0\n  elseif n ==\
    \ 2 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if (n == 0) then\n        return 0\n    elseif\
    \ (n == 1) then\n        return 0\n    elseif (n == 2) then\n        return 1\n\
    \    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n - 1\n   \
    \ end\n    local v1, v2, v3 = 0, 0, 1\n    for i = 3, n do\n        v1, v2, v3\
    \ = v2, v3, v1 + v2 + v3\n    end\n    return v3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\t-- FILL IN CODE HERE\n\treturn 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4u773uo.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmph4u773uo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  if n == 0 then return\
    \ a end\n  if n == 1 then return b end\n  if n == 2 then return c end\n  for i\
    \ = 3, n do\n    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a = 0\n    local b = 0\n    local c\
    \ = 1\n    if n == 0 then\n        return a\n    elseif n == 1 then\n        return\
    \ b\n    elseif n == 2 then\n        return c\n    else\n        for i = 1, n\
    \ - 2 do\n            a = b\n            b = c\n            c = a + b + c\n  \
    \      end\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuskc4b59.lua:38:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpuskc4b59.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygd1y31e.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpygd1y31e.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- Enter your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7a2o2ye.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpd7a2o2ye.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_by_8y6.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpn_by_8y6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    if n == 0 then\n\
    \        return a\n    elseif n == 1 then\n        return b\n    elseif n == 2\
    \ then\n        return c\n    else\n        for i = 3, n do\n            a, b,\
    \ c = b, c, a + b + c\n        end\n        return c\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local fib0, fib1, fib2 = 0, 0, 1\n  for i =\
    \ 3, n do\n    fib0, fib1, fib2 = fib1, fib2, fib0 + fib1 + fib2\n  end\n  return\
    \ fib2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zf42vd8.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6zf42vd8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n <= 2 then\n    return n - 1\n  end\n \
    \ local a, b, c = 0, 0, 1\n  for i = 3, n do\n    a, b, c = b, c, a + b + c\n\
    \  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal f_min1 = 0\n\tlocal f_min2 = 0\n\tlocal\
    \ f_min3 = 1\n\tlocal f = 0\n\tif n <= 0 then\n\t\treturn 0\n\telseif n == 1 then\n\
    \t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\tfor i = 3, n do\n\
    \t\t\tf = f_min1 + f_min2 + f_min3\n\t\t\tf_min1 = f_min2\n\t\t\tf_min2 = f_min3\n\
    \t\t\tf_min3 = f\n\t\tend\n\t\treturn f\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8sqhl_i.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpd8sqhl_i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2i6e0nyk.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp2i6e0nyk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 2 then\n        return n\n    end\n\
    \    local fn_3 = 0\n    local fn_2 = 0\n    local fn_1 = 1\n    local fn\n  \
    \  for i = 3, n do\n        fn = fn_1 + fn_2 + fn_3\n        fn_3 = fn_2\n   \
    \     fn_2 = fn_1\n        fn_1 = fn\n    end\n    return fn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyue9mjj.lua:33:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpiyue9mjj.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a = 0\n    local b = 0\n    local c\
    \ = 1\n    local d = 0\n    for i = 1, n-1 do\n        d = a + b + c\n       \
    \ a = b\n        b = c\n        c = d\n    end\n    return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2mzrvjd.lua:32:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmpg2mzrvjd.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4wjhki_.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa4wjhki_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
