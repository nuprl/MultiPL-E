name: HumanEval_56_correct_bracketing
language: lua
results:
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- Initialize an empty stack.\n    local stack\
    \ = {}\n    -- Define a function that pops one element from the stack and returns\
    \ it,\n    -- or nil if the stack is empty.\n    local function pop()\n      \
    \  local result = table.remove(stack)\n        return result\n    end\n    --\
    \ Define a function that pushes an element to the stack.\n    local function push(x)\n\
    \        table.insert(stack, x)\n    end\n    -- Check each character of brackets\n\
    \    for i = 1, #brackets do\n        local b = brackets:sub(i, i)\n        if\
    \ b == \"<\" then\n            -- Just push an opening bracket on the stack.\n\
    \            push(b)\n        else\n            -- Try to pop one element from\
    \ the stack.\n            local opening_bracket = pop()\n            -- If the\
    \ stack is empty, or the popped element is not an opening\n            -- bracket,\
    \ then the brackets are not correct.\n            if opening_bracket == nil or\
    \ opening_bracket ~= \"<\" then\n                return false\n            end\n\
    \        end\n    end\n    -- All brackets are correct iff the stack is empty\
    \ now.\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            opening = opening\
    \ + 1\n        else\n            opening = opening - 1\n        end\n        if\
    \ opening < 0 then\n            return false\n        end\n    end\n    return\
    \ opening == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- body\n    local count = 0\n    for i=1,#brackets\
    \ do\n        local char = brackets:sub(i,i)\n        if char == \"<\" then\n\
    \            count = count + 1\n        elseif char == \">\" then\n          \
    \  count = count - 1\n        end\n        if count < 0 then\n            return\
    \ false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local balance = 0\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"<\" then\n            balance = balance + 1\n     \
    \   elseif c == \">\" then\n            balance = balance - 1\n        end\n \
    \       if balance < 0 then\n            return false\n        end\n    end\n\
    \    return balance == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = {}\n\tfor i = 1, string.len(brackets)\
    \ do\n\t\tlocal bracket = string.sub(brackets, i, i)\n\t\tif bracket == \"<\"\
    \ then\n\t\t\ttable.insert(stack, bracket)\n\t\telseif bracket == \">\" then\n\
    \t\t\tlocal popped = table.remove(stack)\n\t\t\tif popped == nil then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\tend\n\tif #stack == 0 then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            stack = stack +\
    \ 1\n        else\n            stack = stack - 1\n        end\n        if stack\
    \ < 0 then\n            return false\n        end\n    end\n    return stack ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- TODO\n    local stack = {}\n    for i =\
    \ 1, #brackets do\n        local b = brackets:sub(i, i)\n        if b == \"<\"\
    \ then\n            table.insert(stack, b)\n        elseif b == \">\" then\n \
    \           if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal level = 0\n\tfor b in brackets:gmatch(\"\
    .\") do\n\t\tif b == \"<\" then\n\t\t\tlevel = level + 1\n\t\telseif b == \">\"\
    \ then\n\t\t\tlevel = level - 1\n\t\tend\n\t\tif level < 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn level == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- YOUR CODE HERE\n  numOpen = 0\n  for i=1,string.len(brackets)\
    \ do\n    if (string.sub(brackets,i,i) == \"<\") then\n      numOpen = numOpen\
    \ + 1\n    elseif (string.sub(brackets,i,i) == \">\") then\n      numOpen = numOpen\
    \ - 1\n    end\n    if (numOpen < 0) then\n      return false\n    end\n  end\n\
    \  if (numOpen == 0) then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = 0\n  for i = 1, #brackets\
    \ do\n    if brackets:sub(i, i) == \"<\" then\n      open_brackets = open_brackets\
    \ + 1\n    else\n      open_brackets = open_brackets - 1\n    end\n    if open_brackets\
    \ < 0 then\n      return false\n    end\n  end\n  return open_brackets == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal n = brackets:len()\n\tif n == 0 then\n\
    \t\treturn true\n\telseif n % 2 == 1 then\n\t\treturn false\n\telse\n\t\tlocal\
    \ counter = 0\n\t\tfor i = 1, n do\n\t\t\tlocal c = brackets:sub(i, i)\n\t\t\t\
    if c == \"<\" then\n\t\t\t\tcounter = counter + 1\n\t\t\telseif c == \">\" then\n\
    \t\t\t\tcounter = counter - 1\n\t\t\tend\n\t\t\tif counter < 0 then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\t\treturn counter == 0\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local cnt = 0\n  for c in brackets:gmatch\"\
    .\" do\n    if c == \"<\" then\n      cnt = cnt + 1\n    elseif c == \">\" then\n\
    \      cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return false\n    end\n\
    \  end\n  return cnt == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = {}\n\tlocal len = brackets:len()\n\
    \tfor i = 1, len do\n\t\tlocal b = brackets:sub(i, i)\n\t\tif b == \"<\" then\n\
    \t\t\ttable.insert(stack, b)\n\t\telseif b == \">\" then\n\t\t\tif table.remove(stack)\
    \ ~= \"<\" then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tfor i=1,#brackets do\n\t\t\
    if brackets:sub(i,i) == \"<\" then\n\t\t\tcount = count + 1\n\t\telseif brackets:sub(i,i)\
    \ == \">\" then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:gsub(\"[^<>]\", \"\"):len()\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm_2z4dr.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvm_2z4dr.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local closed_count = 0\n    local opened_count\
    \ = 0\n    for i=1,#brackets do\n        if brackets:sub(i,i) == \"<\" then\n\
    \            opened_count = opened_count + 1\n        elseif brackets:sub(i,i)\
    \ == \">\" then\n            closed_count = closed_count + 1\n        end\n  \
    \      if closed_count > opened_count then\n            return false\n       \
    \ end\n    end\n    return opened_count == closed_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  while brackets:find(\"<>\") do\n    brackets\
    \ = brackets:gsub(\"<>\", \"\")\n  end\n  return brackets == \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      table.insert(stack,\
    \ c)\n    elseif c == \">\" then\n      if #stack == 0 then\n        return false\n\
    \      end\n      table.remove(stack)\n    end\n  end\n  return #stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal bracket_count = 0\n\tfor i = 1, #brackets\
    \ do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\tbracket_count = bracket_count\
    \ + 1\n\t\telseif brackets:sub(i, i) == \">\" then\n\t\t\tbracket_count = bracket_count\
    \ - 1\n\t\tend\n\t\tif bracket_count < 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if string.find(brackets, \"[^<>]\") then\n \
    \   error(\"invalid input string\")\n  end\n  local test = 0\n  for i = 1, #brackets\
    \ do\n    if brackets:sub(i, i) == \"<\" then\n      test = test + 1\n    else\n\
    \      test = test - 1\n    end\n    if test < 0 then\n      return false\n  \
    \  end\n  end\n  return test == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tfor char in brackets:gmatch\"\
    .\" do\n\t\tif char == \"<\" then\n\t\t\tcount = count + 1\n\t\telseif char ==\
    \ \">\" then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"<\" then\n            count = count + 1\n        elseif\
    \ c == \">\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening = 0\n\tlocal closing = 0\n\tfor\
    \ _, v in ipairs(brackets) do\n\t\tif v == '<' then\n\t\t\topening = opening +\
    \ 1\n\t\telseif v == '>' then\n\t\t\tclosing = closing + 1\n\t\tend\n\tend\n\t\
    return opening == closing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrw2zwpp.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbrw2zwpp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_xkpnxsa.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if type(brackets) ~= \"string\" then\n   \
    \     error(\"brackets must be a string.\")\n    end\n    local stack = Stack:new()\n\
    \    for i = 1, string.len(brackets) do\n        local c = string.sub(brackets,\
    \ i, i)\n        if c == \"<\" then\n            stack:push(c)\n        elseif\
    \ c == \">\" then\n            if stack:pop() == nil then\n                return\
    \ false\n            end\n        else\n            error(\"brackets must contain\
    \ only '<' and '>'.\")\n        end\n    end\n    return stack:isempty()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuer8ibp8.lua:15:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpuer8ibp8.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpuer8ibp8.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:gsub(\"<>\", \"\"):len() ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50upggsg.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp50upggsg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for b in brackets:gmatch(\"\
    .\") do\n    local top = stack[#stack]\n    if b == \"<\" then\n      table.insert(stack,\
    \ \"<\")\n    elseif b == \">\" then\n      if not (top == \"<\") then\n     \
    \   return false\n      end\n      table.remove(stack)\n    end\n  end\n  return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            open_brackets =\
    \ open_brackets + 1\n        elseif brackets:sub(i, i) == \">\" then\n       \
    \     open_brackets = open_brackets - 1\n        end\n        if open_brackets\
    \ < 0 then\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal open_brackets = 0\n\tfor i = 1, #brackets\
    \ do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\topen_brackets = open_brackets\
    \ + 1\n\t\telseif brackets:sub(i, i) == \">\" then\n\t\t\topen_brackets = open_brackets\
    \ - 1\n\t\tend\n\t\tif open_brackets < 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn open_brackets == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = Stack()\n\tfor b in brackets:gmatch(\"\
    .\") do\n\t\tif b == \"<\" then\n\t\t\tstack:push(b)\n\t\telseif b == \">\" then\n\
    \t\t\tif stack:top() == \"<\" then\n\t\t\t\tstack:pop()\n\t\t\telse\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1scmdjlw.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp1scmdjlw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1scmdjlw.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for i = 1, #brackets\
    \ do\n        local bracket = brackets:sub(i, i)\n        if bracket == \"<\"\
    \ then\n            stack:push(bracket)\n        elseif bracket == \">\" then\n\
    \            if stack:empty() then\n                return false\n           \
    \ else\n                stack:pop()\n            end\n        end\n    end\n \
    \   return stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkahoxczt.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpkahoxczt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpkahoxczt.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n_left = brackets:gsub(\"[^<]\", \"\"\
    ):len()\n    local n_right = brackets:gsub(\"[^>]\", \"\"):len()\n    return n_left\
    \ == n_right\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k6y1elp.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6k6y1elp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_count = 0\n  for k = 1, #brackets\
    \ do\n    if brackets:sub(k, k) == \"<\" then\n      bracket_count = bracket_count\
    \ + 1\n    elseif brackets:sub(k, k) == \">\" then\n      bracket_count = bracket_count\
    \ - 1\n    end\n    if bracket_count < 0 then\n      return false\n    end\n \
    \ end\n  return bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local _, n = brackets:gsub(\"[<>]\", \"\") --\
    \ number of brackets\n  if n % 2 ~= 0 then -- if not even\n    return false\n\
    \  end\n  for i = 1, n, 2 do\n    if brackets:sub(i, i + 1) ~= \"<>\" then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe6lphku.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbe6lphku.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local current = brackets:sub(i, i)\n        if current == \"<\"\
    \ then\n            table.insert(stack, current)\n        elseif current == \"\
    >\" then\n            if #stack == 0 then\n                return false\n    \
    \        else\n                table.remove(stack)\n            end\n        end\n\
    \    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i=1,#brackets do\n\
    \        if brackets:sub(i,i) == \"<\" then\n            count = count + 1\n \
    \       elseif brackets:sub(i,i) == \">\" then\n            count = count - 1\n\
    \        end\n        if count < 0 then\n            return false\n        end\n\
    \    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack:new()\n    for b in brackets:gmatch(\"\
    .\") do\n        if b == \"<\" then\n            stack:push(\"<\")\n        elseif\
    \ b == \">\" then\n            if stack:pop() == nil then\n                return\
    \ false\n            end\n        end\n    end\n    return stack:pop() == nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc69miw0n.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpc69miw0n.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpc69miw0n.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_stack = {}\n  for i=1,#brackets\
    \ do\n    local b = brackets:sub(i,i)\n    if b == \"<\" then\n      table.insert(bracket_stack,\
    \ b)\n    else\n      -- must be \">\"\n      if #bracket_stack == 0 then\n  \
    \      return false\n      else\n        table.remove(bracket_stack)\n      end\n\
    \    end\n  end\n  return #bracket_stack == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"<\" then\n      count = count + 1\n    else\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n_open = 0\n  for i=1,#brackets do\n \
    \   if brackets:sub(i,i) == \"<\" then\n      n_open = n_open + 1\n    elseif\
    \ brackets:sub(i,i) == \">\" then\n      n_open = n_open - 1\n    end\n    if\
    \ n_open < 0 then\n      return false\n    end\n  end\n  return n_open == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    count = 0\n    for i=1,#brackets do\n    \
    \    count = count + (brackets:sub(i,i) == \"<\" and 1 or -1)\n        if count\
    \ < 0 then return false end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1,#brackets do\n\
    \    local char = brackets:sub(i,i)\n    if char == \"<\" then\n      table.insert(stack,\
    \ char)\n    elseif char == \">\" then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal open = 0\n\tfor i = 1, #brackets do\n\t\
    \tif brackets:sub(i, i) == \"<\" then\n\t\t\topen = open + 1\n\t\telse\n\t\t\t\
    open = open - 1\n\t\tend\n\t\tif open < 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local balanced, level = true, 0\n    for c\
    \ in brackets:gmatch(\".\") do\n        if c == \"<\" then\n            level\
    \ = level + 1\n        elseif c == \">\" then\n            level = level - 1\n\
    \            if level < 0 then\n                balanced = false\n           \
    \     break\n            end\n        end\n    end\n    return balanced and level\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local sum = 0\n    for i = 1, #brackets do\n\
    \        local ch = brackets:sub(i, i)\n        if ch == \"<\" then\n        \
    \    sum = sum + 1\n        elseif ch == \">\" then\n            sum = sum - 1\n\
    \        end\n        if sum < 0 then\n            return false\n        end\n\
    \    end\n    return sum == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal str = \"\"\n\tfor i = 1, #brackets do\n\
    \t\tif str == \"\" and brackets:sub(i, i) == \">\" then\n\t\t\treturn false\n\t\
    \telseif brackets:sub(i, i) == \"<\" then\n\t\t\tstr = str .. \"<\"\n\t\telseif\
    \ brackets:sub(i, i) == \">\" then\n\t\t\tstr = str:sub(1, -2)\n\t\tend\n\tend\n\
    \tif str == \"\" then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for b in brackets:gmatch(\"\
    .\") do\n    if b == \"<\" then\n      count = count + 1\n    elseif b == \">\"\
    \ then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local OPEN_BRACKET = '<'\n  local CLOSE_BRACKET\
    \ = '>'\n  local _, opened = brackets:gsub(OPEN_BRACKET, \"\")\n  local _, closed\
    \ = brackets:gsub(CLOSE_BRACKET, \"\")\n  return opened == closed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphazek1ro.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphazek1ro.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal n = 0\n\tfor _, ch in utf8.codes(brackets)\
    \ do\n\t\tif ch == 60 then\n\t\t\tn = n + 1\n\t\telseif ch == 62 then\n\t\t\t\
    n = n - 1\n\t\t\tif n < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local function check(str, num)\n        if\
    \ #str < 1 then\n            return num == 0\n        elseif str:sub(1, 1) ==\
    \ \"<\" then\n            return check(str:sub(2), num + 1)\n        elseif str:sub(1,\
    \ 1) == \">\" then\n            return num > 0 and check(str:sub(2), num - 1)\n\
    \        else\n            return false\n        end\n    end\n    return check(brackets,\
    \ 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for c in brackets:gmatch\"\
    .\" do\n        if c == \"<\" then\n            count = count + 1\n        elseif\
    \ c == \">\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- All opening brackets are on a stack.  For\
    \ every closing bracket, remove\n\t-- one opening bracket from the stack.  Return\
    \ true if the stack is empty\n\t-- at the end.\n\tlocal stack = {}\n\tfor i =\
    \ 1, #brackets do\n\t\tlocal bracket = brackets:sub(i, i)\n\t\tif bracket == \"\
    <\" then\n\t\t\ttable.insert(stack, bracket)\n\t\telseif bracket == \">\" then\n\
    \t\t\ttable.remove(stack)\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobd0kmes.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpobd0kmes.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- make sure the brackets start with an opening\
    \ one\n  if brackets:sub(1,1) == \">\" then\n    return false\n  end\n  -- make\
    \ sure the brackets end with a closing one\n  if brackets:sub(-1,-1) == \"<\"\
    \ then\n    return false\n  end\n  -- any number of opening brackets can be followed\
    \ by any number of closing\n  -- brackets\n  local function  good(br)\n    local\
    \ close = br:find(\">\", 1, true)\n    if close == nil then\n      return false\n\
    \    end\n    local open = br:find(\"<\", 1, true)\n    if open == nil then\n\
    \      return true\n    end\n    if open > close then\n      return false\n  \
    \  end\n    return good(br:sub(close + 1))\n  end\n  return good(brackets)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsic1bfx.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxsic1bfx.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_count = 0\n  for i=1,#brackets\
    \ do\n    local c = brackets:sub(i,i)\n    if c == \"<\" then\n      bracket_count\
    \ = bracket_count + 1\n    elseif c == \">\" then\n      bracket_count = bracket_count\
    \ - 1\n    end\n    if bracket_count < 0 then\n      return false\n    end\n \
    \ end\n  return bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack:new()\n    for _, bracket\
    \ in ipairs(brackets:split(\"\")) do\n        if bracket == \"<\" then\n     \
    \       stack:push(\"<\")\n        elseif bracket == \">\" then\n            if\
    \ stack:is_empty() then\n                return false\n            else\n    \
    \            stack:pop()\n            end\n        end\n    end\n    return stack:is_empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzjpxa_tg.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpzjpxa_tg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzjpxa_tg.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:gsub('<>', '') == ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tpb_k2q.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_tpb_k2q.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            open_brackets =\
    \ open_brackets + 1\n        elseif brackets:sub(i, i) == \">\" then\n       \
    \     open_brackets = open_brackets - 1\n        end\n        if open_brackets\
    \ < 0 then\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local i = 1\n    local len = string.len(brackets)\n\
    \    local stack = Stack()\n    while i <= len do\n        local ch = string.sub(brackets,\
    \ i, i)\n        if ch == \"<\" then\n            stack:push(ch)\n        elseif\
    \ ch == \">\" then\n            if stack:empty() then\n                return\
    \ false\n            else\n                stack:pop()\n            end\n    \
    \    end\n        i = i + 1\n    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi9yuu8i1.lua:14:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpi9yuu8i1.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpi9yuu8i1.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = 0\n    for i=1,#brackets do\n  \
    \      if brackets:sub(i,i) == \"<\" then\n            n = n + 1\n        else\n\
    \            n = n - 1\n        end\n        if n < 0 then\n            return\
    \ false\n        end\n    end\n    return n == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = Stack()\n  for k, v in pairs(brackets)\
    \ do\n    if v == \"<\" then\n      stack:push(v)\n    elseif v == \">\" then\n\
    \      if stack:pop() == nil then\n        return false\n      end\n    end\n\
    \  end\n  return stack:pop() == nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn67a_tmv.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpn67a_tmv.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpn67a_tmv.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local depth = 0\n  for char in brackets:gmatch(\"\
    .\") do\n    if char == \"<\" then\n      depth = depth + 1\n    elseif char ==\
    \ \">\" then\n      depth = depth - 1\n    end\n    if depth < 0 then\n      return\
    \ false\n    end\n  end\n  return depth == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local len = string.len(brackets)\n  local opening\
    \ = 0\n  local closing = 0\n  for i = 1, len do\n    local bracket = string.sub(brackets,\
    \ i, i)\n    if bracket == \"<\" then\n      opening = opening + 1\n    elseif\
    \ bracket == \">\" then\n      closing = closing + 1\n    end\n    if closing\
    \ > opening then\n      return false\n    end\n  end\n  return opening == closing\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_count = 0\n  for ch in brackets:gmatch(\"\
    .\") do\n    if ch == \"<\" then\n      bracket_count = bracket_count + 1\n  \
    \  elseif ch == \">\" then\n      bracket_count = bracket_count - 1\n    end\n\
    \    if bracket_count < 0 then\n      return false\n    end\n  end\n  return bracket_count\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for char in brackets:gmatch(\"\
    .\") do\n    if char == \"<\" then\n      table.insert(stack, char)\n    elseif\
    \ char == \">\" then\n      if #stack == 0 then\n        return false\n      else\n\
    \        table.remove(stack)\n      end\n    end\n  end\n  return #stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local ch = brackets:sub(i, i)\n        if ch == \"<\" then\n   \
    \         table.insert(stack, ch)\n        elseif ch == \">\" then\n         \
    \   if #stack == 0 then\n                return false\n            else\n    \
    \            table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for i=1,brackets:len()\
    \ do\n        if brackets:sub(i,i) == \"<\" then\n            stack:push(brackets:sub(i,i))\n\
    \        elseif brackets:sub(i,i) == \">\" then\n            if stack:empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_bbbv9o6.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp_bbbv9o6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_bbbv9o6.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open = string.match(brackets, \"^<*\"\
    )\n  local rest = string.match(brackets, \"<*>*$\")\n  if rest == \"\" then\n\
    \    return true\n  elseif open == rest then\n    return correct_bracketing(string.sub(brackets,\
    \ string.len(open) + 1, -string.len(rest) - 1))\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxy5wcyj.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzxy5wcyj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"<\" then\n      count = count + 1\n    else\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i = 1, #brackets\
    \ do\n        local letter = brackets:sub(i, i)\n        if letter == \"<\" then\n\
    \            count = count + 1\n        elseif letter == \">\" then\n        \
    \    count = count - 1\n        end\n        if count < 0 then\n            return\
    \ false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for character in brackets:gmatch(\"\
    .\") do\n        if character == \"<\" then\n            count = count + 1\n \
    \       elseif character == \">\" then\n            count = count - 1\n      \
    \  end\n        if count < 0 then\n            return false\n        end\n   \
    \ end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- simple implementation, by keeping a balance\
    \ of opening and closing brackets.\n  local balance = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxkmgz012.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tfor _, bracket in brackets:gmatch(\"\
    ()(.)\") do\n\t\tif bracket == \"<\" then\n\t\t\tcount = count + 1\n\t\telseif\
    \ bracket == \">\" then\n\t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack:new()\n    for i = 1,\
    \ #brackets do\n        local c = brackets:sub(i, i)\n        if c == \"<\" then\n\
    \            stack:push(c)\n        elseif c == \">\" then\n            if stack:is_empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:is_empty()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0n48d5w.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpv0n48d5w.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpv0n48d5w.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local level = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"<\" then\n      level = level + 1\n    elseif c == \">\"\
    \ then\n      level = level - 1\n    end\n    if level < 0 then\n      return\
    \ false\n    end\n  end\n  return level == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local i, j, cnt = 1, #brackets, 0\n  while i\
    \ <= j do\n    if brackets:sub(i, i) == \"<\" then\n      cnt = cnt + 1\n    else\n\
    \      cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return false\n    end\n\
    \    i = i + 1\n  end\n  return cnt == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local index = 0\n    for bracket in brackets:gmatch(\"\
    .\") do\n        if bracket == \"<\" then\n            index = index + 1\n   \
    \     elseif bracket == \">\" then\n            index = index - 1\n        end\n\
    \        if index < 0 then\n            return false\n        end\n    end\n \
    \   return index == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_count = 0\n    for i = 1, #brackets\
    \ do\n        local char = brackets:sub(i, i)\n        if char == \"<\" then\n\
    \            bracket_count = bracket_count + 1\n        elseif char == \">\" then\n\
    \            bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local depth = 0\n  for i = 1,#brackets do\n\
    \    if brackets:sub(i,i) == \"<\" then\n      depth = depth + 1\n    elseif brackets:sub(i,i)\
    \ == \">\" then\n      depth = depth - 1\n    end\n    if depth < 0 then\n   \
    \   return false\n    end\n  end\n  return depth == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- Fill in the code here\n    local bracket_counter\
    \ = 0\n    for i = 1, #brackets do\n        if string.sub(brackets, i, i) == \"\
    <\" then\n            bracket_counter = bracket_counter + 1\n        elseif string.sub(brackets,\
    \ i, i) == \">\" then\n            bracket_counter = bracket_counter - 1\n   \
    \     end\n        if bracket_counter < 0 then\n            return false\n   \
    \     end\n    end\n    if bracket_counter == 0 then\n        return true\n  \
    \  else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, math.floor(#brackets / 2) do\n  \
    \  if brackets:sub(i, i) == \"<\" and brackets:sub(#brackets - i + 1, #brackets\
    \ - i + 1) ~= \">\" then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lr3v_5n.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9lr3v_5n.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for idx = 1, #brackets do\n\
    \    local b = brackets:sub(idx, idx)\n    if b == \"<\" then\n      table.insert(stack,\
    \ 1, \">\")\n    elseif b == \">\" then\n      if #stack == 0 then\n        return\
    \ false\n      end\n      table.remove(stack, 1)\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- TODO: implement function\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy1zj3w9.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyy1zj3w9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for b in brackets:gmatch(\"\
    .\") do\n        if b == \"<\" then\n            count = count + 1\n        elseif\
    \ b == \">\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm89mmow5.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpm89mmow5.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack:new()\n    for i = 1,\
    \ string.len(brackets) do\n        local c = string.sub(brackets, i, i)\n    \
    \    if c == \"<\" then\n            stack:push(c)\n        elseif c == \">\"\
    \ then\n            local top = stack:pop()\n            if top == nil then\n\
    \                return false\n            end\n        end\n    end\n    if stack:pop()\
    \ ~= nil then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphuwart8y.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmphuwart8y.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphuwart8y.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local brackets_stack = Stack()\n    local\
    \ opening_brackets = \"<\"\n    local closing_brackets = \">\"\n    for i = 1,\
    \ #brackets do\n        if not brackets_stack:is_empty() and brackets_stack:peek()\
    \ == opening_brackets and brackets:sub(i, i) == closing_brackets then\n      \
    \      brackets_stack:pop()\n        else\n            brackets_stack:push(brackets:sub(i,\
    \ i))\n        end\n    end\n    return brackets_stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsgbjq8qn.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpsgbjq8qn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpsgbjq8qn.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local depth = 0\n    for char in brackets:gmatch(\"\
    .\") do\n        if char == \"<\" then\n            depth = depth + 1\n      \
    \  elseif char == \">\" then\n            depth = depth - 1\n        end\n   \
    \     if depth < 0 then\n            return false\n        end\n    end\n    return\
    \ depth == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            count = count +\
    \ 1\n        elseif brackets:sub(i, i) == \">\" then\n            count = count\
    \ - 1\n        end\n        if count < 0 then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- YOUR CODE HERE\n    if string.sub(brackets,\
    \ -1) == \"<\" then\n        return false\n    end\n    local n, nopen = 0, 0\n\
    \    for i = 1, #brackets do\n        if string.sub(brackets, i, i) == \"<\" then\n\
    \            nopen = nopen + 1\n        else\n            nopen = nopen - 1\n\
    \        end\n        if nopen < 0 then\n            return false\n        end\n\
    \    end\n    return nopen == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets:find(\"^<\") == nil then return\
    \ false end\n    if brackets:find(\">$\") == nil then return false end\n    if\
    \ brackets:find(\">>\") ~= nil then return false end\n    if brackets:find(\"\
    <<\") ~= nil then return false end\n    if brackets:find(\"^<>$\") ~= nil then\
    \ return true end\n    return correct_bracketing(brackets:sub(2, -2))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3qkv4na.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx3qkv4na.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracketing = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            bracketing = bracketing\
    \ + 1\n        else\n            bracketing = bracketing - 1\n        end\n  \
    \      if bracketing < 0 then\n            return false\n        end\n    end\n\
    \    return bracketing == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_length = string.len(brackets)\n\
    \  local open_brackets = 0\n  for i = 1, bracket_length do\n    local bracket\
    \ = string.sub(brackets, i, i)\n    if bracket == \"<\" then\n      open_brackets\
    \ = open_brackets + 1\n    elseif bracket == \">\" then\n      open_brackets =\
    \ open_brackets - 1\n    end\n    if open_brackets < 0 then\n      return false\n\
    \    end\n  end\n  return open_brackets == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for _, bracket in utf8.codes(brackets) do\n\
    \    if bracket == 60 then\n      table.insert(stack, bracket)\n    elseif bracket\
    \ == 62 then\n      table.remove(stack)\n    end\n  end\n  return #stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvjqbja6.lua:14:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmplvjqbja6.lua:14: in local 'candidate'\n\t/tmp/tmplvjqbja6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local function helper(left, right, n)\n    --\
    \ base case\n    if n > #brackets then\n      return left == right\n    end\n\
    \    -- recursive case\n    local char = brackets:sub(n, n)\n    if char == \"\
    <\" then\n      return helper(left + 1, right, n + 1)\n    elseif char == \">\"\
    \ then\n      if left > right then\n        return helper(left, right + 1, n +\
    \ 1)\n      else\n        return false\n      end\n    else\n      return false\n\
    \    end\n  end\n  return helper(0, 0, 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- TODO: Implement.\n  return brackets == \"\
    \"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit4cql36.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpit4cql36.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_types = {\n    [\"<\"] = 1,\n\
    \    [\">\"] = -1\n  }\n  local sum = 0\n  for i = 1, #brackets do\n    local\
    \ bracket = brackets:sub(i, i)\n    sum = sum + bracket_types[bracket]\n    if\
    \ sum < 0 then\n      return false\n    end\n  end\n  return sum == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for b in brackets:gmatch(\"\
    .\") do\n        if b == \"<\" then\n            count = count + 1\n        elseif\
    \ b == \">\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tfor b in brackets:gmatch(\"\
    .\") do\n\t\tif b == '<' then\n\t\t\tcount = count + 1\n\t\telseif b == '>' then\n\
    \t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  while brackets ~= brackets:gsub(\"<>\", \"\"\
    ) do\n    brackets = brackets:gsub(\"<>\", \"\")\n  end\n  return brackets ==\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open = 0\n    for b in brackets:gmatch(\"\
    .\") do\n        if b == \"<\" then\n            open = open + 1\n        elseif\
    \ b == \">\" then\n            open = open - 1\n        end\n        if open <\
    \ 0 then\n            return false\n        end\n    end\n    return open == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local size = #brackets\n    local result =\
    \ true\n    local count = 0\n    for i = 1, size do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \"<\" then\n            count = count + 1\n        elseif\
    \ c == \">\" then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            result = false\n            break\n        end\n    end\n\
    \    if count ~= 0 then\n        result = false\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvwpzz7v2.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local found_match = true\n  local unmatch =\
    \ 0\n  local match = 0\n  local function test_bracket(b)\n    if b == '<' then\n\
    \      unmatch = unmatch + 1\n    elseif b == '>' then\n      match = match +\
    \ 1\n    end\n    if match > unmatch then\n      found_match = false\n    end\n\
    \  end\n  for i = 1, #brackets do\n    test_bracket(brackets:sub(i, i))\n  end\n\
    \  return found_match and match == unmatch\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open = 0\n    for bracket in brackets:gmatch(\"\
    .\") do\n        if bracket == \"<\" then\n            open = open + 1\n     \
    \   elseif bracket == \">\" then\n            open = open - 1\n        end\n \
    \       if open < 0 then\n            return false\n        end\n    end\n   \
    \ return open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local b = brackets:sub(i, i)\n        if b == \"<\" then\n     \
    \       table.insert(stack, b)\n        elseif b == \">\" then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i=1,brackets:len() do\n\
    \    local x = brackets:sub(i,i)\n    if x == \"<\" then\n      table.insert(stack,\
    \ i)\n    elseif x == \">\" then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = new_stack()\n    local cb =\
    \ brackets:gmatch(\".\")\n    local b = cb()\n    while b do\n        if b ==\
    \ \"<\" then\n            stack:push(b)\n        else\n            if stack:is_empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n        b = cb()\n    end\n    return stack:is_empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmc_v3gk.lua:12:\
    \ attempt to call a nil value (global 'new_stack')\nstack traceback:\n\t/tmp/tmpxmc_v3gk.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxmc_v3gk.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == \"<\" then\n      for j = i + 1, #brackets do\n        if brackets:sub(j,\
    \ j) == \">\" then\n          return correct_bracketing(brackets:sub(1, i - 1)\
    \ .. brackets:sub(i + 1, j - 1) .. brackets:sub(j + 1))\n        end\n      end\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9f05k7et.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9f05k7et.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local n = 0\n  for c in brackets:gmatch(\".\"\
    ) do\n    if c == \"<\" then\n      n = n + 1\n    elseif c == \">\" then\n  \
    \    n = n - 1\n    end\n    if n < 0 then\n      return false\n    end\n  end\n\
    \  return n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for char in brackets:gmatch(\"\
    .\") do\n    if char == \"<\" then\n      count = count + 1\n    elseif char ==\
    \ \">\" then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tfor i=1,#brackets do\n\t\t\
    local b = brackets:sub(i,i)\n\t\tif b == \"<\" then\n\t\t\tcount = count + 1\n\
    \t\telseif b == \">\" then\n\t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn count == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = Stack:new()\n\tfor i=1,#brackets\
    \ do\n\t\tif brackets:sub(i,i) == \"<\" then\n\t\t\tstack:push(1)\n\t\telse\n\t\
    \t\tif stack:isempty() then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack:pop()\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn stack:isempty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8u3hsj7.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpk8u3hsj7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpk8u3hsj7.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if #brackets % 2 ~= 0 then\n        return\
    \ false\n    end\n    local bracket_depth = 0\n    for i = 1, #brackets do\n \
    \       if brackets:sub(i, i) == \"<\" then\n            bracket_depth = bracket_depth\
    \ + 1\n        else\n            bracket_depth = bracket_depth - 1\n        end\n\
    \        if bracket_depth < 0 then\n            return false\n        end\n  \
    \  end\n    return bracket_depth == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            count = count +\
    \ 1\n        elseif brackets:sub(i, i) == \">\" then\n            count = count\
    \ - 1\n        end\n        if count < 0 then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = Stack()\n\tfor c in brackets:gmatch(\"\
    .\") do\n\t\tif c == \"<\" then\n\t\t\tstack:push(\"<\")\n\t\telseif c == \">\"\
    \ then\n\t\t\tif stack:empty() then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\t\
    stack:pop()\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6wav1fb.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpg6wav1fb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpg6wav1fb.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for i = 1, #brackets\
    \ do\n        local c = brackets:sub(i, i)\n        if c == \"<\" then\n     \
    \       stack:push(c)\n        elseif c == \">\" then\n            if stack:empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7v55ayxi.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp7v55ayxi.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7v55ayxi.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for i = 1, #brackets\
    \ do\n        local bracket = brackets:sub(i, i)\n        if bracket == \"<\"\
    \ then\n            stack:push(bracket)\n        elseif bracket == \">\" then\n\
    \            if stack:isempty() then\n                return false\n         \
    \   else\n                stack:pop()\n            end\n        end\n    end\n\
    \    return stack:isempty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcylh35r.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpzcylh35r.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzcylh35r.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb75tca90.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpb75tca90.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal left_count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsz6ytj4x.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, brackets:len()\
    \ do\n        local char = brackets:sub(i, i)\n        if char == \"<\" then\n\
    \            stack[#stack + 1] = char\n        elseif char == \">\" then\n   \
    \         if #stack == 0 then\n                return false\n            end\n\
    \            stack[#stack] = nil\n        end\n    end\n    return #stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvv18fsrx.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local brackets_num = string.len(brackets)\n\
    \    if brackets_num == 0 then\n        return true\n    end\n    if brackets_num\
    \ % 2 == 1 then\n        return false\n    end\n    for index = 1, brackets_num,\
    \ 2 do\n        if brackets:sub(index, index) ~= \"<\" then\n            return\
    \ false\n        end\n        if brackets:sub(index + 1, index + 1) ~= \">\" then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj871kk7.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptj871kk7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_count = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            bracket_count =\
    \ bracket_count + 1\n        elseif brackets:sub(i, i) == \">\" then\n       \
    \     bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- your code here\n  local curr = 0\n  for i=1,#brackets\
    \ do\n  \tif brackets:sub(i,i) == \"<\" then\n  \t\tcurr = curr + 1\n  \telseif\
    \ brackets:sub(i,i) == \">\" then\n  \t\tcurr = curr - 1\n  \tend\n  \tif curr\
    \ < 0 then\n  \t\treturn false\n  \tend\n  end\n  if curr == 0 then\n  \treturn\
    \ true\n  else\n  \treturn false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = Stack:new()\n  for c in brackets:gmatch\"\
    .\" do\n    if c == \"<\" then\n      stack:push(c)\n    elseif c == \">\" then\n\
    \      if stack:is_empty() then\n        return false\n      else\n        stack:pop()\n\
    \      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvwx6ix75.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpvwx6ix75.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpvwx6ix75.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqd7o3la.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppqd7o3la.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local matches = {[\"><\"] = true, [\"<>\"\
    ] = true}\n    local num_left = 0\n    local total_left = 0\n    local total_right\
    \ = 0\n    local current = \"\"\n    local correct = true\n    local i = 1\n \
    \   while i <= #brackets do\n        local char = brackets:sub(i, i)\n       \
    \ if char == \"<\" then\n            total_left = total_left + 1\n           \
    \ current = current .. char\n            num_left = num_left + 1\n        elseif\
    \ char == \">\" then\n            total_right = total_right + 1\n            current\
    \ = current .. char\n            if num_left > 0 then\n                num_left\
    \ = num_left - 1\n            else\n                correct = false\n        \
    \        break\n            end\n        end\n        i = i + 1\n    end\n   \
    \ return correct and total_left == total_right\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local openings = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"<\" then\n      openings = openings + 1\n    elseif\
    \ openings == 0 then\n      return false\n    else\n      openings = openings\
    \ - 1\n    end\n  end\n  return openings == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      count = count\
    \ + 1\n    elseif c == \">\" then\n      count = count - 1\n    end\n    if count\
    \ < 0 then\n      return false\n    end\n  end\n  return count == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local s = Stack()\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            s:push(\"<\")\n\
    \        else\n            if s:is_empty() then\n                return false\n\
    \            else\n                s:pop()\n            end\n        end\n   \
    \ end\n    return s:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp79_n9nv.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpp79_n9nv.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpp79_n9nv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"<\" then\n      count = count + 1\n    else\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:match(\"^>*<>*$\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sop0l4g.lua:18:\
    \ expected: true, actual: \"<>\"\nstack traceback:\n\t/tmp/tmp4sop0l4g.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack()\n    for c in brackets:gmatch('.')\
    \ do\n        if c == '<' then\n            stack:push(c)\n        elseif c ==\
    \ '>' then\n            if stack:is_empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8wc9g9qf.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp8wc9g9qf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8wc9g9qf.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opened = 0\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"<\" then\n            opened = opened + 1\n       \
    \ elseif c == \">\" then\n            opened = opened - 1\n        end\n     \
    \   if opened < 0 then\n            return false\n        end\n    end\n    return\
    \ opened == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp987hj2gd.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp987hj2gd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = {}\n\tlocal len = string.len(brackets)\n\
    \tfor i = 1, len do\n\t\tlocal c = string.sub(brackets, i, i)\n\t\tif c == \"\
    <\" then\n\t\t\ttable.insert(stack, c)\n\t\telseif c == \">\" then\n\t\t\tif #stack\
    \ > 0 then\n\t\t\t\ttable.remove(stack)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for i=1, #brackets do\n\
    \        local c = brackets:sub(i,i)\n        if c == \"<\" then\n           \
    \ count = count + 1\n        elseif c == \">\" then\n            count = count\
    \ - 1\n        end\n        if count < 0 then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local a = 0\n    for i = 1, string.len(brackets)\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            a = a + 1\n   \
    \     elseif brackets:sub(i, i) == \">\" then\n            a = a - 1\n       \
    \ end\n        if a < 0 then\n            return false\n        end\n    end\n\
    \    if a == 0 then\n        return true\n    else\n        return false\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for i = 1, #brackets\
    \ do\n        local br = brackets:sub(i, i)\n        if br == \"<\" then\n   \
    \         table.insert(stack, br)\n        elseif br == \">\" then\n         \
    \   local top = table.remove(stack)\n            if top ~= \"<\" then\n      \
    \          return false\n            end\n        end\n    end\n    return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- TODO\n    local index = 0\n    local length\
    \ = string.len(brackets)\n    while index < length do\n        local b = string.sub(brackets,\
    \ index, index)\n        if b == \"<\" then\n            local a = string.sub(brackets,\
    \ index + 1, index + 1)\n            if a == \">\" then\n                brackets\
    \ = string.sub(brackets, 1, index - 1) .. string.sub(brackets, index + 2, length)\n\
    \                length = length - 2\n                index = index - 1\n    \
    \        else\n                return false\n            end\n        end\n  \
    \      index = index + 1\n    end\n    if brackets == \"\" then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkg60m30i.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkg60m30i.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local is_correct = true\n  local count = 0\n\
    \  for i = 1, #brackets do\n    if brackets:sub(i, i) == \"<\" then\n      count\
    \ = count + 1\n    elseif brackets:sub(i, i) == \">\" then\n      count = count\
    \ - 1\n    end\n    if count < 0 then\n      is_correct = false\n      break\n\
    \    end\n  end\n  if count ~= 0 then\n    is_correct = false\n  end\n  return\
    \ is_correct\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal level = 0\n\tfor c in brackets:gmatch(\"\
    .\") do\n\t\tif c == \"<\" then\n\t\t\tlevel = level + 1\n\t\telseif c == \">\"\
    \ then\n\t\t\tlevel = level - 1\n\t\t\tif level < 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn level == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"<\" then\n      table.insert(stack, c)\n    elseif c ==\
    \ \">\" then\n      if #stack == 0 then\n        return false\n      else\n  \
    \      table.remove(stack)\n      end\n    end\n  end\n  return #stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    --local ret = 0\n    local stack = {0}\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplw9n9xxr.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local matches = {[\"<\"] = \">\", [\"(\"] =\
    \ \")\", [\"{\"] = \"}\"}\n  local stack = {}\n  for i = 1, #brackets do\n   \
    \ local c = brackets:sub(i, i)\n    local stack_top = stack[#stack]\n    if matches[stack_top]\
    \ == c then\n      stack[#stack] = nil\n    else\n      stack[#stack + 1] = c\n\
    \    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0ds8z5ts.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    error \"implement me\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81ykcr7g.lua:12:\
    \ implement me\nstack traceback:\n\t/tmp/tmp81ykcr7g.lua:12: in local 'candidate'\n\
    \t/tmp/tmp81ykcr7g.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tfor i=1,#brackets do\n\t\t\
    if brackets:sub(i,i) == \"<\" then\n\t\t\tcount = count + 1\n\t\telseif brackets:sub(i,i)\
    \ == \">\" then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- YOUR CODE HERE\n    local counter = 0\n\
    \    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n  \
    \          counter = counter + 1\n        elseif brackets:sub(i, i) == \">\" then\n\
    \            counter = counter - 1\n        end\n        if counter < 0 then\n\
    \            return false\n        end\n    end\n    if counter == 0 then\n  \
    \      return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for char in brackets:gmatch(\"\
    .\") do\n        if char == \"<\" then\n            table.insert(stack, char)\n\
    \        elseif char == \">\" then\n            if table.remove(stack) ~= \"<\"\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnvmafel2.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:match(\"^[<>]*$\") and brackets:match(\"\
    ^<*>>*$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_h6b3ic.lua:18:\
    \ expected: true, actual: \"<>\"\nstack traceback:\n\t/tmp/tmpd_h6b3ic.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal depth = 0\n\tfor i = 1, #brackets do\n\
    \t\tif brackets:sub(i, i) == \"<\" then\n\t\t\tdepth = depth + 1\n\t\telseif brackets:sub(i,\
    \ i) == \">\" then\n\t\t\tdepth = depth - 1\n\t\t\tif depth < 0 then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\tend\n\tend\n\treturn depth == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = Stack:new()\n  local n = string.len(brackets)\n\
    \  for i = 1, n do\n    local c = string.sub(brackets, i, i)\n    if c == \"<\"\
    \ then\n      stack:push(c)\n    else\n      if stack:size() == 0 then\n     \
    \   return false\n      end\n      local d = stack:pop()\n      if d ~= \"<\"\
    \ then\n        return false\n      end\n    end\n  end\n  return stack:size()\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwldov96.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpwwldov96.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwwldov96.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    count = 0\n    for i = 1, #brackets do\n \
    \       if brackets:sub(i, i) == \"<\" then\n            count = count + 1\n \
    \       elseif brackets:sub(i, i) == \">\" then\n            count = count - 1\n\
    \        end\n        if count < 0 then\n            return false\n        end\n\
    \    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open = 0\n    for i = 1, #brackets do\n\
    \        if brackets:sub(i, i) == \"<\" then\n            open = open + 1\n  \
    \      else\n            open = open - 1\n        end\n        if open < 0 then\n\
    \            return false\n        end\n    end\n    return open == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub('%[%]', '')\n  while\
    \ brackets:find('%[%[%]%]') do\n    brackets = brackets:gsub('%[%[%]%]', '')\n\
    \  end\n  return brackets == ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyz093nw.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcyz093nw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local o, c = 0, 0\n  for b in brackets:gmatch(\"\
    .\") do\n    if b == \"<\" then\n      o = o + 1\n    elseif b == \">\" then\n\
    \      c = c + 1\n    end\n  end\n  return o == c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiitnys1.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoiitnys1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = {}\n\tfor c in brackets:gmatch(\"\
    .\") do\n\t\tif c == \"<\" then\n\t\t\ttable.insert(stack, c)\n\t\telseif c ==\
    \ \">\" then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\
    \t\ttable.remove(stack)\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- YOUR CODE HERE\n\tlocal stack = Stack.new()\n\
    \tlocal right = Stack.new()\n\tfor i=1,#brackets do\n\t\tstack:push(brackets:sub(i,i))\n\
    \tend\n\twhile not stack:is_empty() do\n\t\tlocal a = stack:pop()\n\t\tif a ==\
    \ \"<\" then\n\t\t\tright:push(a)\n\t\telse\n\t\t\tif right:is_empty() then\n\t\
    \t\t\treturn false\n\t\t\telse\n\t\t\t\tright:pop()\n\t\t\tend\n\t\tend\n\tend\n\
    \tif right:is_empty() then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31uya4wz.lua:13:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp31uya4wz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp31uya4wz.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"<\" then\n      count = count + 1\n    else\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local count = 0\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      count = count\
    \ + 1\n    elseif c == \">\" then\n      count = count - 1\n    end\n    if count\
    \ < 0 then\n      return false\n    end\n  end\n  return count == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_count = 0\n    for i = 1, string.len(brackets)\
    \ do\n        local char = string.sub(brackets, i, i)\n        if char == \"<\"\
    \ then\n            open_count = open_count + 1\n        elseif char == \">\"\
    \ then\n            open_count = open_count - 1\n        end\n        if open_count\
    \ < 0 then\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local count = 0\n    for char in brackets:gmatch(\"\
    .\") do\n        if char == \"<\" then\n            count = count + 1\n      \
    \  elseif char == \">\" then\n            count = count - 1\n        end\n   \
    \     if count < 0 then\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"<\" then\n      stack[#stack + 1] = \">\"\n    elseif c\
    \ == \">\" then\n      if #stack == 0 then\n        return false\n      end\n\
    \      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local function next_close_bracket(i)\n    return\
    \ brackets:find(\">\", i, true)\n  end\n  local function next_open_bracket(i)\n\
    \    return brackets:find(\"<\", i, true)\n  end\n  local i = 1\n  while i <=\
    \ #brackets do\n    local j = next_close_bracket(i)\n    if j then\n      local\
    \ k = next_open_bracket(j)\n      if k and k < j then\n        i = k\n      else\n\
    \        return false\n      end\n    else\n      return true\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bf6s51k.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_bf6s51k.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local depth = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            depth = depth +\
    \ 1\n        elseif brackets:sub(i, i) == \">\" then\n            depth = depth\
    \ - 1\n        end\n        if depth < 0 then\n            return false\n    \
    \    end\n    end\n    return depth == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp29uvriyq.lua:31: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal count = 0\n\tfor i = 1, #brackets do\n\
    \t\tif brackets:sub(i, i) == \"<\" then\n\t\t\tcount = count + 1\n\t\telseif brackets:sub(i,\
    \ i) == \">\" then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local accum = 0\n  for i=1,#brackets do\n  \
    \  if brackets:sub(i,i) == \"<\" then\n      accum = accum + 1\n    else\n   \
    \   accum = accum - 1\n    end\n    if accum < 0 then\n      return false\n  \
    \  end\n  end\n  return accum == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- TODO\n  local count = 0\n  for i = 1,#brackets\
    \ do\n    if brackets:sub(i,i) == \"<\" then\n      count = count + 1\n    elseif\
    \ brackets:sub(i,i) == \">\" then\n      count = count - 1\n    end\n    if count\
    \ < 0 then\n      return false\n    end\n  end\n  if count ~= 0 then\n    return\
    \ false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bracket_count = 0\n  for i=1, #brackets\
    \ do\n    if brackets:sub(i,i) == \"<\" then\n      bracket_count = bracket_count\
    \ + 1\n    elseif brackets:sub(i,i) == \">\" then\n      bracket_count = bracket_count\
    \ - 1\n    end\n    if bracket_count < 0 then\n      return false\n    end\n \
    \ end\n  return bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local counter = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == \"<\" then\n            counter = counter\
    \ + 1\n        elseif brackets:sub(i, i) == \">\" then\n            counter =\
    \ counter - 1\n        end\n        if counter < 0 then\n            return false\n\
    \        end\n    end\n    return counter == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local br_count = 0\n  for i=1, #brackets do\n\
    \    local br = brackets:sub(i,i)\n    if br == \"<\" then\n      br_count = br_count\
    \ + 1\n    elseif br == \">\" then\n      br_count = br_count - 1\n    end\n \
    \   if br_count < 0 then\n      return false\n    end\n  end\n  return br_count\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local left, right = brackets:match(\"^(<*)(>*)$\"\
    )\n    return (left:len() == right:len())\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgj3h69ey.lua:13:\
    \ attempt to index a nil value (local 'left')\nstack traceback:\n\t/tmp/tmpgj3h69ey.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgj3h69ey.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening_brackets = { [\"<\"] = true }\n\
    \tlocal closing_brackets = { [\">\"] = true }\n\treturn brackets_match(brackets,\
    \ opening_brackets, closing_brackets)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0ize3g4.lua:14:\
    \ attempt to call a nil value (global 'brackets_match')\nstack traceback:\n\t\
    /tmp/tmpw0ize3g4.lua:14: in local 'candidate'\n\t/tmp/tmpw0ize3g4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local left = 0\n  for i = 1, #brackets do\n\
    \    if brackets:sub(i, i) == \"<\" then\n      left = left + 1\n    else\n  \
    \    left = left - 1\n    end\n    if left < 0 then\n      return false\n    end\n\
    \  end\n  return left == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_count = 0\n    for i = 1, #brackets\
    \ do\n        local c = brackets:sub(i, i)\n        if c == \"<\" then\n     \
    \       bracket_count = bracket_count + 1\n        elseif c == \">\" then\n  \
    \          bracket_count = bracket_count - 1\n        end\n        if bracket_count\
    \ < 0 then\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- init '<' and '>' count\n    local lt_count\
    \ = 0\n    local gt_count = 0\n    -- iterate through the brackets\n    for i\
    \ = 1, #brackets do\n        local char = brackets:sub(i, i)\n        if char\
    \ == '<' then\n            lt_count = lt_count + 1\n        elseif char == '>'\
    \ then\n            gt_count = gt_count + 1\n        end\n    end\n    -- return\
    \ false if '<' count is greater than '>' count\n    if lt_count > gt_count then\n\
    \        return false\n    end\n    -- return true if '<' count is equal to '>'\
    \ count\n    if lt_count == gt_count then\n        return true\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpveml3qp3.lua:41:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpveml3qp3.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local max_brackets = 0\n    local _, count\
    \ = brackets:gsub(\"<\", \"\")\n    for _, b in ipairs(brackets:totable()) do\n\
    \        if b == \"<\" then\n            max_brackets = max_brackets + 1\n   \
    \     else\n            max_brackets = max_brackets - 1\n        end\n       \
    \ if max_brackets < 0 then\n            return false\n        end\n    end\n \
    \   return max_brackets == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54ztchl2.lua:14:\
    \ attempt to call a nil value (method 'totable')\nstack traceback:\n\t/tmp/tmp54ztchl2.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp54ztchl2.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local last_bracket = nil\n    for i = 1, #brackets\
    \ do\n        local bracket = brackets:sub(i, i)\n        if bracket == \"<\"\
    \ then\n            last_bracket = bracket\n        elseif bracket == \">\" then\n\
    \            if last_bracket == nil then\n                return false\n     \
    \       end\n            last_bracket = nil\n        end\n    end\n    return\
    \ last_bracket == nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqov9zlu.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvqov9zlu.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local left = 0\n  for i = 1, string.len(brackets)\
    \ do\n    if (string.sub(brackets, i, i) == \"<\") then\n      left = left + 1\n\
    \    else\n      left = left - 1\n    end\n    if (left < 0) then\n      return\
    \ false\n    end\n  end\n  return left == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = Stack:new()\n    local bracket_map\
    \ = {\n        ['<'] = '>',\n        ['['] = ']',\n        ['{'] = '}',\n    \
    \    ['('] = ')'\n    }\n    for i = 1, #brackets do\n        local char = brackets:sub(i,\
    \ i)\n        if bracket_map[char] then\n            stack:push(char)\n      \
    \  elseif char == '>' then\n            local top = stack:pop()\n            if\
    \ top ~= '<' then\n                return false\n            end\n        elseif\
    \ char == ']' then\n            local top = stack:pop()\n            if top ~=\
    \ '[' then\n                return false\n            end\n        elseif char\
    \ == '}' then\n            local top = stack:pop()\n            if top ~= '{'\
    \ then\n                return false\n            end\n        elseif char ==\
    \ ')' then\n            local top = stack:pop()\n            if top ~= '(' then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_y4c00pj.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp_y4c00pj.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_y4c00pj.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n_left, n_right = 0, 0\n    for i =\
    \ 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n            n_left\
    \ = n_left + 1\n        else\n            n_right = n_right + 1\n        end\n\
    \        if n_right > n_left then\n            return false\n        end\n   \
    \ end\n    return n_left == n_right\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:len() == 0 or brackets:match(\"\
    ^><.*\") == nil and\n        correct_bracketing(brackets:gsub(\"<>\", \"\"))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3jgvd9al.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp3jgvd9al.lua:13: in upvalue 'correct_bracketing'\n\
    \t/tmp/tmp3jgvd9al.lua:13: in upvalue 'correct_bracketing'\n\t/tmp/tmp3jgvd9al.lua:13:\
    \ in upvalue 'correct_bracketing'\n\t/tmp/tmp3jgvd9al.lua:13: in upvalue 'correct_bracketing'\n\
    \t/tmp/tmp3jgvd9al.lua:13: in upvalue 'correct_bracketing'\n\t/tmp/tmp3jgvd9al.lua:13:\
    \ in upvalue 'correct_bracketing'\n\t/tmp/tmp3jgvd9al.lua:13: in upvalue 'correct_bracketing'\n\
    \t/tmp/tmp3jgvd9al.lua:13: in upvalue 'correct_bracketing'\n\t/tmp/tmp3jgvd9al.lua:13:\
    \ in upvalue 'correct_bracketing'\n\t...\n\t/tmp/tmp3jgvd9al.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp3jgvd9al.lua:23: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.310 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  while brackets:find('><') do\n    brackets =\
    \ brackets:gsub('><', '')\n  end\n  return brackets == ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsy0nc25c.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsy0nc25c.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = 0\n    for character in brackets:gmatch('.')\
    \ do\n        if character == '<' then\n            opening = opening + 1\n  \
    \      elseif character == '>' then\n            opening = opening - 1\n     \
    \   end\n        if opening < 0 then\n            return false\n        end\n\
    \    end\n    return opening == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local n = string.len(brackets)\n    local\
    \ max_level = 0\n    local level = 0\n    for i = 1, n do\n        local c = string.sub(brackets,\
    \ i, i)\n        if c == \"<\" then\n            level = level + 1\n         \
    \   if level > max_level then\n                max_level = level\n           \
    \ end\n        elseif c == \">\" then\n            level = level - 1\n       \
    \     if level < 0 then\n                return false\n            end\n     \
    \   else\n            error(\"unexpected character\")\n        end\n    end\n\
    \    return level == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    error(\"Not yet implemented!\")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacnnm9tr.lua:12:\
    \ Not yet implemented!\nstack traceback:\n\t/tmp/tmpacnnm9tr.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmpacnnm9tr.lua:18: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = 0\n  for i = 1, #brackets\
    \ do\n    if brackets:sub(i, i) == \"<\" then\n      open_brackets = open_brackets\
    \ + 1\n    else\n      open_brackets = open_brackets - 1\n    end\n    if open_brackets\
    \ < 0 then\n      return false\n    end\n  end\n  return open_brackets == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opened = 0\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"<\" then\n            opened = opened + 1\n       \
    \ elseif c == \">\" then\n            opened = opened - 1\n        end\n     \
    \   if opened < 0 then\n            return false\n        end\n    end\n    return\
    \ opened == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      table.insert(stack,\
    \ c)\n    elseif c == \">\" then\n      local b = table.remove(stack)\n      if\
    \ b ~= \"<\" then\n        return false\n      end\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1g6buro.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1g6buro.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local last_open = 0\n    local last_close\
    \ = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n\
    \            last_open = i\n        elseif brackets:sub(i, i) == \">\" then\n\
    \            last_close = i\n        end\n        if last_close < last_open then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3lf77jd.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk3lf77jd.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- We want to iterate over the entire string,\n\
    \  -- but we want to look ahead by one character at each step.\n  -- So we begin\
    \ by peeking at the first character.\n  local prev_char = brackets:sub(1,1)\n\
    \  local index = 2\n  local string_length = brackets:len()\n  while index <= string_length\
    \ do\n    local curr_char = brackets:sub(index,index)\n    if prev_char == \"\
    <\" and curr_char == \">\" then\n      -- Remove the characters we just consumed\n\
    \      -- The length will change as we delete characters\n      brackets = brackets:sub(1,index-2)\
    \ .. brackets:sub(index+1)\n      -- We need to look at the character after these.\n\
    \      -- To make sure to do this, we decrement the index\n      -- by 2 rather\
    \ than 1.\n      index = index - 2\n      string_length = string_length - 2\n\
    \    end\n    prev_char = curr_char\n    index = index + 1\n  end\n  return brackets:len()\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzokopgq.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxzokopgq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_count = 0\n  for i=1,#brackets do\n\
    \    if brackets:sub(i,i) == \"<\" then\n      open_count = open_count + 1\n \
    \   elseif brackets:sub(i,i) == \">\" then\n      open_count = open_count - 1\n\
    \    end\n    if open_count < 0 then\n      return false\n    end\n  end\n  return\
    \ open_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local bcount = 0\n  for c in brackets:gmatch\"\
    .\" do\n    if c == \"<\" then\n      bcount = bcount + 1\n    elseif c == \"\
    >\" then\n      bcount = bcount - 1\n    end\n    if bcount < 0 then\n      return\
    \ false\n    end\n  end\n  return bcount == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_count = 0\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"<\" then\n            open_count = open_count + 1\n\
    \        elseif c == \">\" then\n            open_count = open_count - 1\n   \
    \     end\n        if open_count < 0 then\n            return false\n        end\n\
    \    end\n    return open_count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- TODO: Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn40bhf2.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpnn40bhf2.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, #brackets do\n\
    \    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      table.insert(stack,\
    \ i)\n    elseif c == \">\" then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal num_seen = 0\n\tfor i = 1, #brackets do\n\
    \t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\t\t\tnum_seen = num_seen\
    \ + 1\n\t\telseif c == \">\" then\n\t\t\tnum_seen = num_seen - 1\n\t\t\tif num_seen\
    \ < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn num_seen\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
