name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return list of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefixes = {}\n  for n=1,#string do\n    table.insert(prefixes,\
    \ string:sub(1,n))\n  end\n  return prefixes\nend", "    local result = {}\n \
    \   for i = 1, string:len() do\n        result[i] = string:sub(1, i)\n    end\n\
    \    return result\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend", "\t\
    local prefixes = {}\n\tlocal length = string.len(string)\n\tfor i = 1, length\
    \ do\n\t\tprefixes[i] = string.sub(string, 1, i)\n\tend\n\treturn prefixes\nend",
  "    local result = {}\n    for i = 1, #string do\n        result[i] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "  local r = {}\n  for i = 1, #string\
    \ do\n    r[i] = string:sub(1, i)\n  end\n  return r\nend", "    local prefixes\
    \ = {}\n    for i = 1, string:len() do\n        prefixes[i] = string:sub(1, i)\n\
    \    end\n    return prefixes\nend", "    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end", "    local res = {}\n    for i = 1, string:len() do\n        res[i] = string:sub(1,\
    \ i)\n    end\n    return res\nend", "  local result = {}\n  local prefix = ''\n\
    \  for c in string:gmatch('.') do\n    prefix = prefix .. c\n    result[#result\
    \ + 1] = prefix\n  end\n  return result\nend", "    local result = {}\n    local\
    \ prefix = ''\n    for i = 1, #string do\n        prefix = prefix .. string.sub(string,\
    \ i, i)\n        table.insert(result, prefix)\n    end\n    return result\nend",
  "  local result = {}\n  for i = 1, #string do\n    table.insert(result, string:sub(1,\
    \ i))\n  end\n  return result\nend", "    local result = {}\n    local s = ''\n\
    \    for char in string:gmatch('.') do\n        s = s .. char\n        result[#result\
    \ + 1] = s\n    end\n    return result\nend", "\tlocal res = {}\n\tlocal prefix\
    \ = \"\"\n\tfor i = 1, #string do\n\t\tprefix = prefix .. string:sub(i, i)\n\t\
    \tres[#res + 1] = prefix\n\tend\n\treturn res\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n\
    \  return prefixes\nend", "    local result = {}\n    for i = 1, #string do\n\
    \        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "  local result = {}\n  local\
    \ length = string:len()\n  for i = 1, length do\n    result[i] = string:sub(1,\
    \ i)\n  end\n  return result\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend", "    local result = {}\n    for i = 1, #string do\n        table.insert(result,\
    \ string:sub(1, i))\n    end\n    return result\nend", "  return _.map(_.range(1,\
    \ #string), function(i) return string:sub(1, i) end)\nend", "    local result\
    \ = {}\n    for i = 1, string:len() do\n        result[i] = string:sub(1, i)\n\
    \    end\n    return result\nend", "    -- TODO\n    local prefixes = {}\n   \
    \ local length = string.len(string)\n    for i = 1, length do\n        prefixes[i]\
    \ = string.sub(string,1,i)\n    end\n    return prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, string:len() do\n        prefixes[i] = string:sub(1, i)\n\
    \    end\n    return prefixes\nend", "  local len = string.len(string)\n  local\
    \ prefixes = {}\n  for i = 1, len do\n    prefixes[i] = string.sub(string, 1,\
    \ i)\n  end\n  return prefixes\nend", "    local list = {}\n    for i = 1, string:len()\
    \ do\n        list[i] = string:sub(1, i)\n    end\n    return list\nend", "  \
    \  local result = {}\n    for i = 1, #string do\n        result[i] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "    local prefixes = {}\n    for i =\
    \ 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n    end\n \
    \   return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n \
    \   table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend",
  "    local t = {}\n    for i = 1, #string do\n        table.insert(t, string:sub(1,\
    \ i))\n    end\n    return t\nend", "  -- We just need to return the substring\
    \ at each index\n  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i]\
    \ = string:sub(1, i)\n  end\n  return prefixes\nend", "    local ret = {}\n  \
    \  for i = 1, #string do\n        table.insert(ret, string:sub(1, i))\n    end\n\
    \    return ret\nend", "    local out = {}\n    for i = 1, #string do\n      \
    \  out[i] = string:sub(1, i)\n    end\n    return out\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "    local r = {}\n    for i = 1, string:len() do\n        r[i] = string:sub(1,\
    \ i)\n    end\n    return r\nend", "  local prefixes = {}\n  for len = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = sub(string, 1, len)\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string:sub(1,\
    \ i)\n  end\n  return prefixes\nend", "    local result = {}\n    for len = 1,\
    \ #string do\n        result[#result + 1] = string:sub(1, len)\n    end\n    return\
    \ result\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i]\
    \ = string:sub(1, i)\n  end\n  return prefixes\nend", "    return { string:sub(1,\
    \ i) for i = 1, #string }\nend", "    local prefixes = {}\n    for end_at = 1,\
    \ #string do\n        prefixes[#prefixes + 1] = string:sub(1, end_at)\n    end\n\
    \    return prefixes\nend", "  local len = string.len(string)\n  local prefixes\
    \ = {}\n  for i = 1, len do\n    prefixes[i] = string.sub(string, 1, i)\n  end\n\
    \  return prefixes\nend", "\tlocal results = {}\n\tfor i = 1, #string do\n\t\t\
    table.insert(results, string:sub(1, i))\n\tend\n\treturn results\nend", "  local\
    \ function inner(string,acc)\n    if string == \"\" then\n      return acc\n \
    \   else\n      local new_acc = {}\n      for _, v in ipairs(acc) do\n       \
    \ table.insert(new_acc, v)\n      end\n      table.insert(new_acc, string)\n \
    \     return inner(string:sub(1,#string-1), new_acc)\n    end\n  end\n  return\
    \ inner(string,{string:sub(1,1)})\nend", "  local out = {}\n  for i = 1, #string\
    \ do\n    table.insert(out, string:sub(1, i))\n  end\n  return out\nend", "  \
    \  if not string then return {} end\n    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end", "\tlocal ret = {}\n\tfor i = 1, #string do\n\t\ttable.insert(ret, string:sub(1,\
    \ i))\n\tend\n\treturn ret\nend", "    return map(function(i) return string:sub(1,\
    \ i) end, range(1, string:len()))\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[i] = string:sub(1, i)\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string:sub(1,\
    \ i)\n  end\n  return prefixes\nend", "    -- TODO: improve speed by using only\
    \ one list instead of a list of lists\n    local prefixes = map(function(l) return\
    \ strsub(string, 1, l) end,\n                         range(0, #string))\n   \
    \ return prefixes\nend", "    local result = {}\n    for i = 1, #string do\n \
    \       result[i] = string:sub(1, i)\n    end\n    return result\nend", "    local\
    \ result = {}\n    for i = 1, #string do\n        table.insert(result, string:sub(1,\
    \ i))\n    end\n    return result\nend", "  local len = #string\n  local prefixes\
    \ = {}\n  for i = 1, len do\n    prefixes[i] = string:sub(1, i)\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i]\
    \ = string:sub(1, i)\n  end\n  return prefixes\nend", "    local t = {}\n    for\
    \ i = 1, #string do\n        t[i] = string:sub(1, i)\n    end\n    return t\n\
    end", "    local res = {}\n    for i = 1, #string do\n        res[i] = string:sub(1,\
    \ i)\n    end\n    return res\nend", "  local result = {}\n  local length = string:len()\n\
    \  for i = 1, length do\n    result[i] = string:sub(1, i)\n  end\n  return result\n\
    end", "    local end_at = string:len()\n    local result = {}\n    for i = 1,\
    \ end_at do\n        result[i] = string:sub(1, i)\n    end\n    return result\n\
    end", "  local ret = {}\n  for i = 1, #string do\n    ret[i] = string:sub(1, i)\n\
    \  end\n  return ret\nend", "    local result = {}\n    for i = 1, #string do\n\
    \        result[i] = string:sub(1, i)\n    end\n    return result\nend", "   \
    \ local list = {}\n    for i = 1, #string do\n        list[i] = string:sub(1,\
    \ i)\n    end\n    return list\nend", "    local output = {}\n    for i = 1, string:len()\
    \ do\n        output[i] = string:sub(1, i)\n    end\n    return output\nend",
  "    local output = {}\n    for i = 1, string:len() do\n        local prefix = string:sub(1,\
    \ i)\n        table.insert(output, prefix)\n    end\n    return output\nend",
  "    local output = {}\n    for i = 1, string:len() do\n        table.insert(output,\
    \ string:sub(1, i))\n    end\n    return output\nend", "    return string:gmatch\"\
    %w*[%w-]*\"\nend", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "    local result = {}\n  \
    \  for i = 1, #string do\n        table.insert(result, string:sub(1, i))\n   \
    \ end\n    return result\nend", "    local ret = {}\n    for i = 1, #string do\n\
    \        table.insert(ret, string:sub(1, i))\n    end\n    return ret\nend", " \
    \ local r = {}\n  for i = 1, #string do\n    r[i] = string:sub(1, i)\n  end\n\
    \  return r\nend", "    local n = #string\n    local out = {}\n    for i = 1,\
    \ n do\n        out[i] = string:sub(1, i)\n    end\n    return out\nend", "  local\
    \ results = {}\n  for i = 1, #string do\n    results[i] = string:sub(1, i)\n \
    \ end\n  return results\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n\
    \    end\n    return prefixes\nend", "    -- Iterate from 1 to length\n    local\
    \ result = {}\n    for i = 1, #string do\n        table.insert(result, string:sub(1,\
    \ i))\n    end\n    return result\nend", "    local prefixes = {}\n    for i =\
    \ 1, #string do\n        local prefix = string:sub(1, i)\n        table.insert(prefixes,\
    \ prefix)\n    end\n    return prefixes\nend", "  local t = {}\n  for i = 1, #string\
    \ do\n    t[i] = string:sub(1, i)\n  end\n  return t\nend", "\tlocal list = {}\n\
    \tfor start = 1, #string do\n\t\tlist[#list + 1] = string:sub(1, start)\n\tend\n\
    \treturn list\nend", "    local num_chars = utf8.len(string)\n    local result\
    \ = {}\n    for i = 1, num_chars do\n        table.insert(result, utf8.sub(string,\
    \ 1, i))\n    end\n    return result\nend", "  local prefixes = {}\n  for i =\
    \ 1, string:len() do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return\
    \ prefixes\nend", "\tlocal len = string:len()\n\tlocal prefixes = {}\n\tfor i\
    \ = 1, len do\n\t\tprefixes[i] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string:sub(1,\
    \ i)\n  end\n  return prefixes\nend", "  local result = {}\n  for length = 1,\
    \ #string do\n    table.insert(result, string:sub(1, length))\n  end\n  return\
    \ result\nend", "\tlocal ret = {}\n\tfor i = 1, #string do\n\t\tret[#ret + 1]\
    \ = string:sub(1, i)\n\tend\n\treturn ret\nend", "    local result = {}\n    for\
    \ i = 1, #string do\n        result[i] = string:sub(1, i)\n    end\n    return\
    \ result\nend", "    local out = {}\n    for i = 1, #string do\n        table.insert(out,\
    \ string:sub(1, i))\n    end\n    return out\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n\
    \  return prefixes\nend", "\tlocal result = {}\n\tfor i = 1, #string do\n\t\t\
    table.insert(result, string:sub(1, i))\n\tend\n\treturn result\nend", "    local\
    \ string_len = #string\n    local out = {}\n    for i = 1, string_len do\n   \
    \     table.insert(out, string:sub(1, i))\n    end\n    return out\nend", "  local\
    \ result = {}\n  for i = 1, #string do\n    table.insert(result, string:sub(1,\
    \ i))\n  end\n  return result\nend", "    local ret = {}\n    for i = 1, #string\
    \ do\n        table.insert(ret, string:sub(1, i))\n    end\n    return ret\nend",
  "    local output = {}\n    for i = 1, #string do\n        output[#output + 1] =\
    \ string:sub(1, i)\n    end\n    return output\nend", "\treturn range(#string):map(string.sub,\
    \ string)\nend", "    local prefixes = {}\n    for index=1,#string do\n      \
    \  prefixes[#prefixes+1] = string:sub(1, index)\n    end\n    return prefixes\n\
    end", "    local result = {}\n    for i = 1, #string do\n        result[i] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "\tlocal prefixes = {}\n\tlocal len =\
    \ #string\n\tfor i = 1, len do\n\t\tprefixes[i] = string:sub(1, i)\n\tend\n\t\
    return prefixes\nend", "    local result = {}\n    for i = 1, #string do\n   \
    \     table.insert(result, string:sub(1, i))\n    end\n    return result\nend",
  "\tlocal results = {}\n\tlocal length = #string\n\tfor i = 1, length do\n\t\ttable.insert(results,\
    \ string:sub(1, i))\n\tend\n\treturn results\nend", "  local prefixes = {}\n \
    \ for i = 1, string:len() do\n    prefixes[i] = string:sub(1, i)\n  end\n  return\
    \ prefixes\nend", "    local length = string.len(string)\n    local index = length\n\
    \    local result = {}\n    while index > 0 do\n        index = index - 1\n  \
    \      table.insert(result, string.sub(string, 1, index))\n    end\n    return\
    \ result\nend", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "  local t = {}\n  for i =\
    \ 1, #string do\n    table.insert(t, string:sub(1, i))\n  end\n  return t\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        table.insert(t, string:sub(1, i))\n    end\n    return t\nend",
  "  local subs = {}\n  for i = 1, string:len() do\n    table.insert(subs, string:sub(1,\
    \ i))\n  end\n  return subs\nend", "    local prefixes = {}\n    for index = 1,\
    \ #string do\n        prefixes[#prefixes + 1] = string:sub(1, index)\n    end\n\
    \    return prefixes\nend", "    local out = {}\n    for i = 1, #string do\n \
    \       table.insert(out, string:sub(1, i))\n    end\n    return out\nend", " \
    \   local result = {}\n    for i = 1, #string do\n        result[i] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "    local m = string.len(string)\n  \
    \  local prefixes = {}\n    for i = 1, m do\n        table.insert(prefixes, string.sub(string,\
    \ 1, i))\n    end\n    return prefixes\nend", "  local result = {}\n  for i =\
    \ 1, #string do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\n\
    end", "\tlocal prefixes = {}\n\tfor i = 1, #string do\n\t\tprefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ string:len() do\n    prefixes[i] = string:sub(1, i)\n  end\n  return prefixes\n\
    end", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "    local n = #string\n  \
    \  local prefixes = {}\n    for i = 1, n do\n        prefixes[i] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "    local result = {}\n    for i =\
    \ 1, #string do\n        result[i] = string:sub(1, i)\n    end\n    return result\n\
    end", "\tlocal result = {}\n\tfor i = 1, #string do\n\t\tresult[i] = string:sub(1,\
    \ i)\n\tend\n\treturn result\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end", "    local result = {}\n    for i = 1, #string do\n        result[i] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "    local prev = ''\n    local prefixes\
    \ = {}\n    for i=1,#string do\n        prefixes[i] = prev .. string:sub(i,i)\n\
    \        prev = prefixes[i]\n    end\n    return prefixes\nend", "    local ret\
    \ = {}\n    for i = 1, #string do\n        table.insert(ret, string:sub(1, i))\n\
    \    end\n    return ret\nend", "    local result = {}\n    local prefix = ''\n\
    \    for c in string:gmatch('.') do\n        table.insert(result, prefix)\n  \
    \      prefix = prefix .. c\n    end\n    return result\nend", "  local rv = {}\n\
    \  for i = 1, #string do\n    table.insert(rv, string:sub(1, i))\n  end\n  return\
    \ rv\nend", "  if #string == 0 then\n    return {\"\"}\n  else\n    local head\
    \ = string:sub(1, 1)\n    local tail = string:sub(2)\n    local tail_prefixes\
    \ = all_prefixes(tail)\n    local result = table.pack(head)\n    for i = 1, #tail_prefixes\
    \ do\n      table.insert(result, head .. tail_prefixes[i])\n    end\n    return\
    \ result\n  end\nend", "  return map(seq(1, #string), function(i) return string:sub(1,\
    \ i) end)\nend", "    local prefixes = {}\n    for i = 1, #string do\n       \
    \ prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\nend",
  "    local length = #string\n    local prefixes = {}\n    for i = 1, length do\n\
    \        prefixes[i] = string:sub(1, i)\n    end\n    return prefixes\nend", " \
    \ local len = #string\n  local output = {}\n  for i = 1, len do\n    local sub\
    \ = string:sub(1, i)\n    table.insert(output, sub)\n  end\n  return output\n\
    end", "  local prefixes = {}\n  for i = 1, string:len() do\n    prefixes[i] =\
    \ string:sub(1, i)\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, string:len() do\n    prefixes[i] = string:sub(1, i)\n  end\n  return\
    \ prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n      \
    \  prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "    local res = {}\n    for i = 1, #string do\n        res[i] = string:sub(1,\
    \ i)\n    end\n    return res\nend", "    local ret = {}\n    for i = 1, string:len()\
    \ do\n        table.insert(ret, string:sub(1, i))\n    end\n    return ret\nend",
  "    local output = {}\n    for i = 1, string:len() do\n        output[i] = string:sub(1,\
    \ i)\n    end\n    return output\nend", "\tlocal res = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(res, string:sub(1, i))\n\tend\n\treturn res\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string:sub(1, i)\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string:sub(1, i)\n  end\n  return prefixes\nend", "  \
    \  local characters = {}\n    for character in string:gmatch('.') do\n       \
    \ table.insert(characters, character)\n    end\n    local prefixes = {}\n    for\
    \ i = 1, #characters do\n        table.insert(prefixes, table.concat(characters,\
    \ '', 1, i))\n    end\n    return prefixes\nend", "    local n = #string\n   \
    \ local result = {}\n    for i = 1, n do\n        result[i] = string:sub(1, i)\n\
    \    end\n    return result\nend", "    local list = {}\n    for length = 1, #string\
    \ do\n        list[#list + 1] = string:sub(1, length)\n    end\n    return list\n\
    end", "    local rv = {}\n    for i = 1, #string do\n        table.insert(rv,\
    \ string:sub(1, i))\n    end\n    return rv\nend", "    -- Prefix accumulator\n\
    \    local prefixes = {}\n    -- Loop from string start to string end\n    for\
    \ i = 1, string:len() do\n        -- Insert the prefixes, shorter to longer\n\
    \        table.insert(prefixes, string:sub(1, i))\n    end\n    -- Return the\
    \ prefixes\n    return prefixes\nend", "    local result = {}\n    for i = 1,\
    \ #string do\n        table.insert(result, string:sub(1, i))\n    end\n    return\
    \ result\nend", "    local chars = {}\n    for i = 1, #string do\n        table.insert(chars,\
    \ string:sub(1, i))\n    end\n    return chars\nend", "    local prefixes = {}\n\
    \    for prefix_size = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ prefix_size)\n    end\n    return prefixes\nend", "    local result = {}\n \
    \   for length = 1, #string do\n        local prefix = string:sub(1, length)\n\
    \        result[#result + 1] = prefix\n    end\n    return result\nend", "\tlocal\
    \ result = {}\n\tlocal len = string:len()\n\tfor i = 1, len do\n\t\tresult[i]\
    \ = string:sub(1, i)\n\tend\n\treturn result\nend", "    local prefixes = {}\n\
    \    for i = 1, string:len() do\n        table.insert(prefixes, string:sub(1,\
    \ i))\n    end\n    return prefixes\nend", "    local ret = {}\n    for i = 1,\
    \ #string do\n        table.insert(ret, string:sub(1, i))\n    end\n    return\
    \ ret\nend", "  local len = #string\n  local prefixes = {}\n  for i = 1, len do\n\
    \    prefixes[i] = string:sub(1, i)\n  end\n  return prefixes\nend", "    local\
    \ prefixes = {}\n    for i = 1, string:len() do\n        prefixes[i] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "  local l = {}\n  for i = 1, #string\
    \ do\n    l[i] = string:sub(1, i)\n  end\n  return l\nend", "    local result\
    \ = {}\n    for i = 1, #string do\n        result[i] = string:sub(1, i)\n    end\n\
    \    return result\nend", "  local result = {}\n  for i = 1, #string do\n    result[i]\
    \ = string:sub(1, i)\n  end\n  return result\nend", "  local res = {}\n  for i\
    \ = 1, string:len() do\n    table.insert(res, string:sub(1, i))\n  end\n  return\
    \ res\nend", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "    local parts = {}\n   \
    \ for i = 1, #string do\n        table.insert(parts, string:sub(1, i))\n    end\n\
    \    return parts\nend", "\tlocal result = {}\n\tfor i = 1, #string do\n\t\tresult[i]\
    \ = string:sub(1, i)\n\tend\n\treturn result\nend", "  local l = {}\n  for i =\
    \ 1, #string do\n    l[i] = string:sub(1, i)\n  end\n  return l\nend", "    local\
    \ prefixes = {}\n    for i = 1, string:len() do\n        prefixes[i] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "    local ret = {}\n    for i = 1,\
    \ #string do\n        ret[#ret + 1] = string:sub(1, i)\n    end\n    return ret\n\
    end", "\tlocal arr = {}\n\tfor i = 1, #string do\n\t\ttable.insert(arr, string:sub(1,\
    \ i))\n\tend\n\treturn arr\nend", "    if #string == 0 then\n        return {}\n\
    \    else\n        local ps = all_prefixes(string:sub(1, -2))\n        local len\
    \ = #ps\n        for i = 1, len do\n            ps[len + i] = ps[i] .. string:sub(-1)\n\
    \        end\n        return ps\n    end\nend", "    local prefixes = {}\n   \
    \ for i = 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n  \
    \  end\n    return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend", "    local result = {}\n    for i = 1, #string do\n        table.insert(result,\
    \ string:sub(1, i))\n    end\n    return result\nend", "    local out = {}\n \
    \   for i = 1, #string do\n        out[i] = string:sub(1, i)\n    end\n    return\
    \ out\nend", "    local l = {}\n    for i = 1, string:len() do\n        table.insert(l,\
    \ string:sub(1, i))\n    end\n    return l\nend", "    local ret = {}\n    for\
    \ i = 1, #string do\n        table.insert(ret, string:sub(1, i))\n    end\n  \
    \  return ret\nend", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "\tlocal result = {}\n\tfor\
    \ i = 1, #string do\n\t\tresult[i] = string:sub(1, i)\n\tend\n\treturn result\n\
    end", "  return function(state, var)\n    if state.i > #string then\n      return\
    \ nil\n    else\n      var[1] = string:sub(1, state.i)\n      state.i = state.i\
    \ + 1\n      return var\n    end\n  end, {i = 1}, {}\nend", "  local res = {}\n\
    \  for i = 1, #string do\n    res[i] = string:sub(1, i)\n  end\n  return res\n\
    end", "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n    end\n    return prefixes\nend", "    local ret\
    \ = {}\n    for i = 1, #string do\n        ret[#ret + 1] = string:sub(1, i)\n\
    \    end\n    return ret\nend", "    if type(string) ~= 'string' then\n      \
    \  error('Parameter must be string')\n    end\n    local list = {}\n    for i\
    \ = 1, #string do\n        local prefix = string:sub(1, i)\n        table.insert(list,\
    \ prefix)\n    end\n    return list\nend", "    local prefixes = {}\n    for i\
    \ = 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n    end\n\
    \    return prefixes\nend", "    local result = {}\n    for i = 1, #string do\n\
    \        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end", "    local all_prefixes = {}\n    for i = 1, #string do\n        all_prefixes[#all_prefixes\
    \ + 1] = string:sub(1, i)\n    end\n    return all_prefixes\nend", "    local\
    \ prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] =\
    \ string:sub(1, i)\n    end\n    return prefixes\nend", "  local result = {}\n\
    \  for pos = 1, #string do\n    local prefix = string:sub(1, pos)\n    result[#result\
    \ + 1] = prefix\n  end\n  return result\nend", "\tlocal ret = {}\n\tfor i = 1,\
    \ #string do\n\t\tret[#ret + 1] = string:sub(1, i)\n\tend\n\treturn ret\nend",
  "    local results = {}\n    for i = 1, #string do\n        table.insert(results,\
    \ string:sub(1, i))\n    end\n    return results\nend", "  return map(compose(partial(sub,\
    \ string), range), range(1, #string))\nend", "    local prefixes = {}\n    for\
    \ idx = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1, idx)\n\
    \    end\n    return prefixes\nend", "  local result = {}\n  local len = #string\n\
    \  for i = 1, len do\n    result[i] = string:sub(1, i)\n  end\n  return result\n\
    end", "    local ret = {}\n    for i = 1, #string do\n        table.insert(ret,\
    \ string:sub(1, i))\n    end\n    return ret\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n\
    \    end\n    return prefixes\nend", "    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end", "  local r = {}\n  for i = 1, #string do\n    r[i] = string:sub(1, i)\n\
    \  end\n  return r\nend", "  local len = #string\n  local prefixes = {}\n  for\
    \ i = 1, len do\n    prefixes[i] = string:sub(1, i)\n  end\n  return prefixes\n\
    end", "  local result = {}\n  for i = 1, #string do\n    local prefix = string:sub(1,\
    \ i)\n    table.insert(result, prefix)\n  end\n  return result\nend", "    local\
    \ result = {}\n    local length = #string\n    for i = 1, length do\n        table.insert(result,\
    \ string:sub(1, i))\n    end\n    return result\nend", "  return map(flip(take)(string),\
    \ len(string) - 1, 1)\nend", "\tlocal result = {}\n\tfor i = 1, #string do\n\t\
    \tresult[i] = string:sub(1, i)\n\tend\n\treturn result\nend", "    local t = {}\n\
    \    for i = 1, #string do\n        t[i] = string:sub(1, i)\n    end\n    return\
    \ t\nend", "    local prefixes = {}\n    for i = 1, string:len() do\n        prefixes[i]\
    \ = string:sub(1, i)\n    end\n    return prefixes\nend", "    local result =\
    \ {}\n    for i = 1, #string do\n        table.insert(result, string:sub(1, i))\n\
    \    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
