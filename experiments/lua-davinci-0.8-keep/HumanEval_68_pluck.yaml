name: HumanEval_68_pluck
language: lua
prompt: "-- \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The\
  \ plucked node should be the node with the smallest even value.\n-- If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n-- If there are no even values or the given array is empty, return [].\n\
  -- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n-- Example 2:\n-- Input: [1,2,3]\n\
  -- Output: [2, 1]\n-- Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n-- Example 3:\n-- Input: []\n-- Output: []\n-- Example 4:\n\
  -- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n-- so we will choose the first zero, which has\
  \ the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n-- * 0\
  \ <= node.value\nlocal function pluck(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
  \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
  \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0,\
  \ 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
  \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: [end, "    local l1, l2 = {}, {}\n    for i = 1, #arr do\n        if\
    \ arr[i] % 2 == 0 then\n            if not l1[1] or arr[i] < l1[1] then\n    \
    \            l1 = {arr[i], i}\n            end\n        else\n            if not\
    \ l2[1] or arr[i] < l2[1] then\n                l2 = {arr[i], i}\n           \
    \ end\n        end\n    end\n    return l1[1] and l1 or l2\nend", "  local smallest_even,\
    \ smallest_index\n  for i,v in ipairs(arr) do\n    if v%2 == 0 then\n      if\
    \ not smallest_even or v < smallest_even then\n        smallest_even = v\n   \
    \     smallest_index = i\n      end\n    end\n  end\n  return smallest_even and\
    \ {smallest_even, smallest_index} or {}\nend\nreturn pluck", "    -- body\n  \
    \  if #arr < 1 then\n        return {}\n    end\n    local smallest = math.huge\n\
    \    local smallestIndex = math.huge\n    for i, v in ipairs(arr) do\n       \
    \ if v%2 == 0 and v < smallest then\n            smallest = v\n            smallestIndex\
    \ = i\n        end\n    end\n    if smallest == math.huge then\n        return\
    \ {}\n    end\n    return {smallest, smallestIndex}\nend\nreturn pluck", "   \
    \ local min, idx = arr[1], 1\n    for i = 2, #arr do\n        if arr[i] < min\
    \ then\n            min, idx = arr[i], i\n        end\n    end\n    return min,\
    \ idx\nend", "  local min = math.huge\n  local min_i = math.huge\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_i\
    \ = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  end\n  return\
    \ {min, min_i}\nend", "  local evens = {}\n  for i, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 then\n      table.insert(evens, {v, i})\n    end\n  end\n  if #evens\
    \ == 0 then\n    return {}\n  end\n  table.sort(evens, function(a, b)\n    if\
    \ a[1] == b[1] then\n      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n\
    \  end)\n  return evens[1]\nend", "  local min = math.huge\n  local min_idx =\
    \ math.huge\n  for idx, val in ipairs(arr) do\n    if val % 2 == 0 and val < min\
    \ then\n      min = val\n      min_idx = idx\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, min_idx}\n  end\nend", "  local\
    \ evens = {}\n  for i, num in ipairs(arr) do\n    if num % 2 == 0 then\n     \
    \ table.insert(evens, { num, i })\n    end\n  end\n  if #evens == 0 then\n   \
    \ return {}\n  end\n  table.sort(evens, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n  end)\n  return evens[1]\n\
    end", "  local min = math.huge\n  local min_index = nil\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 and arr[i] < min then\n      min = arr[i]\n      min_index\
    \ = i\n    end\n  end\n  if min_index == nil then\n    return {}\n  else\n   \
    \ return {min, min_index}\n  end\nend", "  local res = { math.huge, 0 }\n  for\
    \ i, num in ipairs(arr) do\n    if num % 2 == 0 and num < res[1] then\n      res\
    \ = { num, i }\n    end\n  end\n  return res[1] ~= math.huge and res or {}\nend",
  "    local min = 2^31\n    local minIndex = 2^31\n    for i, v in ipairs(arr) do\n\
    \        if v % 2 == 0 and v < min then\n            min = v\n            minIndex\
    \ = i\n        end\n    end\n    if min == 2^31 then\n        return {}\n    end\n\
    \    return {min, minIndex}\nend", "  if #arr == 0 then return {} end\n  local\
    \ res = {math.huge, math.huge}\n  for i, n in ipairs(arr) do\n    if n % 2 ==\
    \ 0 and n < res[1] then\n      res = {n, i}\n    end\n  end\n  if res[1] == math.huge\
    \ then return {} end\n  return res\nend", "    if #arr == 0 then\n        return\
    \ {}\n    end\n    local min = math.huge\n    local minPos = -1\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 and arr[i] < min then\n            min =\
    \ arr[i]\n            minPos = i\n        end\n    end\n    if minPos == -1 then\n\
    \        return {}\n    end\n    return {min, minPos}\nend", "    local smallestIndex\
    \ = nil\n    local smallestValue = nil\n    for i, value in ipairs(arr) do\n \
    \       if value % 2 == 0 then\n            if smallestValue == nil or value <\
    \ smallestValue then\n                smallestValue = value\n                smallestIndex\
    \ = i\n            end\n        end\n    end\n    if smallestValue == nil then\n\
    \        return {}\n    else\n        return {smallestValue, smallestIndex}\n\
    \    end\nend", "  local min, minIndex\n  for i, value in ipairs(arr) do\n   \
    \ if value % 2 == 0 then\n      if not min then\n        min = value\n       \
    \ minIndex = i\n      elseif value < min then\n        min = value\n        minIndex\
    \ = i\n      end\n    end\n  end\n  return min and {min, minIndex} or {}\nend",
  "    local res = { }\n    local smallestValue = math.huge\n    local smallestIndex\
    \ = math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < smallestValue\
    \ then\n            smallestValue = v\n            smallestIndex = i\n       \
    \ end\n    end\n    if smallestValue == math.huge then\n        return res\n \
    \   end\n    return { smallestValue, smallestIndex }\nend", "    if #arr == 0\
    \ then\n        return {}\n    end\n    -- find the smallest even value\n    local\
    \ min, min_idx\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n \
    \           if min == nil or v < min then\n                min = v\n         \
    \       min_idx = i\n            end\n        end\n    end\n    if min == nil\
    \ then\n        return {}\n    end\n    return {min, min_idx}\nend", "    -- TODO\n\
    end", "  local min, minIndex = math.huge, nil\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 and arr[i] < min then\n      min, minIndex = arr[i], i\n    end\n \
    \ end\n  return minIndex and {min, minIndex} or {}\nend\nreturn pluck", "    local\
    \ min = math.huge\n    local min_ind = math.huge\n    for i = 1, #arr do\n   \
    \     if arr[i] % 2 == 0 and arr[i] < min then\n            min = arr[i]\n   \
    \         min_ind = i\n        end\n    end\n    if min == math.huge then\n  \
    \      return {}\n    end\n    return {min, min_ind}\nend", "    if (#arr == 0)\
    \ then\n        return {}\n    end\n    local min_even, min_idx = math.huge, math.huge\n\
    \    for idx,val in ipairs(arr) do\n        if (val % 2 == 0) then\n         \
    \   if (val < min_even) then\n                min_even = val\n               \
    \ min_idx = idx\n            elseif (val == min_even) then\n                if\
    \ (idx < min_idx) then\n                    min_idx = idx\n                end\n\
    \            end\n        end\n    end\n    if (min_even == math.huge) then\n\
    \        return {}\n    end\n    return {min_even, min_idx}\nend", "    local\
    \ evens = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n      \
    \      table.insert(evens, {i, arr[i]})\n        end\n    end\n    if #evens ==\
    \ 0 then\n        return {}\n    end\n    table.sort(evens, function(a, b)\n \
    \       if a[2] == b[2] then\n            return a[1] < b[1]\n        end\n  \
    \      return a[2] < b[2]\n    end)\n    return evens[1]\nend", "\tlocal min_index\
    \ = math.huge\n\tlocal min_value = math.huge\n\tfor i = 1, #arr do\n\t\tif arr[i]\
    \ % 2 == 0 and arr[i] < min_value then\n\t\t\tmin_value = arr[i]\n\t\t\tmin_index\
    \ = i\n\t\tend\n\tend\n\tif min_index == math.huge then\n\t\treturn {}\n\tend\n\
    \treturn {min_value, min_index}\nend", "    local smallest = {nil, nil}\n    for\
    \ i,v in ipairs(arr) do\n        if (v > 0) and (v % 2 == 0) then\n          \
    \  if (smallest[1] == nil) or (v < smallest[1]) then\n                smallest\
    \ = {v, i}\n            end\n        end\n    end\n    return smallest\nend",
  "  local smallest = nil\n  local index = nil\n  for i, v in ipairs(arr) do\n   \
    \ if v % 2 == 0 then\n      if smallest == nil or v < smallest then\n        smallest\
    \ = v\n        index = i\n      end\n    end\n  end\n  if smallest == nil then\n\
    \    return {}\n  end\n  return {smallest, index}\nend", "  if #arr < 1 then return\
    \ {} end\n  local min_even = math.huge\n  local min_even_index = 0\n  for i =\
    \ 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < min_even then\n      min_even\
    \ = arr[i]\n      min_even_index = i\n    end\n  end\n  if min_even == math.huge\
    \ then return {} end\n  return {min_even, min_even_index}\nend", "  local min\
    \ = math.huge\n  local min_idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if\
    \ min ~= math.huge then\n    return {min, min_idx}\n  end\n  return {}\nend",
  "    local evens = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            table.insert(evens, { arr[i], i })\n        end\n    end\n    if\
    \ #evens > 0 then\n        table.sort(evens, function(a, b) return a[1] < b[1]\
    \ end)\n        return evens[1]\n    end\n    return {}\nend", "    -- check empty\n\
    \    if not arr or #arr == 0 then\n        return {}\n    end\n    -- loop array,\
    \ find min value\n    local min = 1000000\n    local pos = 0\n    for i, v in\
    \ ipairs(arr) do\n        if v % 2 == 0 and v < min then\n            min = v\n\
    \            pos = i\n        end\n    end\n    -- check empty\n    if min ==\
    \ 1000000 then\n        return {}\n    end\n    -- return plucked\n    return\
    \ {min, pos}\nend", "    local minVal, minValIdx\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            if not minVal then\n           \
    \     minVal = v\n                minValIdx = i\n            elseif v < minVal\
    \ then\n                minVal = v\n                minValIdx = i\n          \
    \  end\n        end\n    end\n    if minVal then\n        return {minVal, minValIdx}\n\
    \    else\n        return {}\n    end\nend", "  local candidate = nil\n  local\
    \ idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if candidate\
    \ == nil or v < candidate then\n        candidate = v\n        idx = i\n     \
    \ end\n    end\n  end\n  if candidate == nil then\n    return {}\n  else\n   \
    \ return {candidate, idx}\n  end\nend", "  local min_even = math.huge\n  local\
    \ min_i = math.huge\n  for i = 1, #arr do\n    local elem = arr[i]\n    if elem\
    \ % 2 == 0 and elem < min_even then\n      min_even = elem\n      min_i = i\n\
    \    end\n  end\n  if min_even ~= math.huge then\n    return {min_even, min_i}\n\
    \  else\n    return {}\n  end\nend", "    -- your code here\n    local min_even_num,\
    \ min_even_index, min_index\n    for i, v in ipairs(arr) do\n        if v % 2\
    \ == 0 then\n            if not min_even_num or v < min_even_num then\n      \
    \          min_even_num = v\n                min_even_index = i\n            end\n\
    \        end\n        if not min_index or i < min_index then\n            min_index\
    \ = i\n        end\n    end\n    return min_even_num and {min_even_num, min_even_index}\
    \ or {min_index and arr[min_index] or 0, min_index or 0}\nend", "  -- your code\
    \ here\nend", "\tlocal smallest, smallest_i\n\tfor i, v in ipairs(arr) do\n\t\t\
    if v % 2 == 0 then\n\t\t\tif smallest == nil or v < smallest then\n\t\t\t\tsmallest\
    \ = v\n\t\t\t\tsmallest_i = i\n\t\t\tend\n\t\tend\n\tend\n\tif smallest ~= nil\
    \ then\n\t\treturn { smallest, smallest_i }\n\telse\n\t\treturn {}\n\tend\nend",
  "  local min_even = nil\n  local min_even_index = nil\n  for i, v in ipairs(arr)\
    \ do\n    if v%2 == 0 then\n      if min_even == nil or v < min_even then\n  \
    \      min_even = v\n        min_even_index = i\n      end\n    end\n  end\n \
    \ if min_even == nil then\n    return {}\n  else\n    return {min_even, min_even_index}\n\
    \  end\nend", "  if #arr == 0 then return {} end\n  local min = math.huge\n  local\
    \ minIdx = math.huge\n  for idx, val in ipairs(arr) do\n    if val > 0 and val\
    \ % 2 == 0 and val < min then\n      min = val\n      minIdx = idx\n    end\n\
    \  end\n  if min == math.huge then return {} end\n  return {min, minIdx}\nend",
  "    local smallest\n    local smallest_index\n    for i, v in ipairs(arr) do\n\
    \        if (v % 2 == 0) then\n            if (smallest == nil) then\n       \
    \         smallest = v\n                smallest_index = i\n            elseif\
    \ (v < smallest) then\n                smallest = v\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if (smallest == nil) then\n\
    \        return {}\n    else\n        return {smallest, smallest_index}\n    end\n\
    end", "    local result = {-1, -1}\n    for i, v in ipairs(arr) do\n        if\
    \ v % 2 == 0 and (result[1] == -1 or v < result[1]) then\n            result =\
    \ {v, i}\n        end\n    end\n    if result[1] == -1 then\n        return {}\n\
    \    end\n    return result\nend\nreturn pluck", "    if #arr == 0 then\n    \
    \    return {}\n    end\n    local smallestValue = 10001\n    local smallestIndex\
    \ = 10001\n    for i, value in ipairs(arr) do\n        if value % 2 == 0 and value\
    \ < smallestValue then\n            smallestValue = value\n            smallestIndex\
    \ = i\n        end\n    end\n    if smallestValue == 10001 then\n        return\
    \ {}\n    end\n    return {smallestValue, smallestIndex}\nend", "  if #arr ==\
    \ 0 then return {} end\n  local idx = -1\n  local smallest = math.huge\n  for\
    \ i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < smallest then\n      smallest\
    \ = arr[i]\n      idx = i\n    end\n  end\n  if idx == -1 then return {} end\n\
    \  return { smallest, idx }\nend", "  local min, idx = math.huge, -1\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min, idx = v,\
    \ i\n    end\n  end\n  return idx ~= -1 and {min, idx} or {}\nend", "  -- write\
    \ your code in Lua (5.3)\n  return nil\nend", "  local res = {}\n  local minEven\
    \ = math.huge\n  local minEvenIdx = math.huge\n  for idx, val in ipairs(arr) do\n\
    \    if val % 2 == 0 and val < minEven then\n      minEven = val\n      minEvenIdx\
    \ = idx\n    end\n  end\n  if minEven ~= math.huge then\n    res[1] = minEven\n\
    \    res[2] = minEvenIdx\n  end\n  return res\nend", "    local min = math.huge\n\
    \    local idx = nil\n    for i, v in ipairs(arr) do\n        if v%2 == 0 and\
    \ v < min then\n            min = v\n            idx = i\n        end\n    end\n\
    \    if idx then\n        return {min, idx}\n    else\n        return {}\n   \
    \ end\nend\nassert(pluck({}) == {})\nassert(pluck({5, 0, 3, 0, 4, 2}) == {0, 1})\n\
    assert(pluck({1,2,3}) == {2, 1})\nassert(pluck({4,2,3}) == {2, 1})\nprint('OK')",
  "    local node = {value = math.huge, index = math.huge}\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < node.value then\n            node.value =\
    \ v\n            node.index = i\n        end\n    end\n    if node.value == math.huge\
    \ then return {} end\n    return {node.value, node.index}\nend", "    local min\
    \ = math.huge\n    local minIndex = -1\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 and arr[i] < min then\n            min = arr[i]\n            minIndex\
    \ = i\n        end\n    end\n    if min == math.huge then\n        return {}\n\
    \    end\n    return {min, minIndex}\nend", "\tlocal function find(i, arr, min,\
    \ idx)\n\t\tif i > #arr then\n\t\t\treturn min and {min, idx} or {}\n\t\tend\n\
    \t\tif arr[i] % 2 == 0 then\n\t\t\tif not min or arr[i] < min then\n\t\t\t\tmin\
    \ = arr[i]\n\t\t\t\tidx = i\n\t\t\tend\n\t\tend\n\t\treturn find(i + 1, arr, min,\
    \ idx)\n\tend\n\treturn find(1, arr)\nend", "    local smallest_even_idx = nil\n\
    \    local smallest_even_val = nil\n    for i, v in ipairs(arr) do\n        if\
    \ not v % 2 then\n            if not smallest_even_val or v < smallest_even_val\
    \ then\n                smallest_even_val = v\n                smallest_even_idx\
    \ = i\n            end\n        end\n    end\n    if smallest_even_idx then\n\
    \        return { smallest_even_val, smallest_even_idx }\n    else\n        return\
    \ {}\n    end\nend", "  local even_val = math.huge\n  local even_idx = 0\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < even_val then\n      even_val\
    \ = v\n      even_idx = i\n    end\n  end\n  if even_val < math.huge then\n  \
    \  return {even_val, even_idx}\n  else\n    return {}\n  end\nend", "  local evens\
    \ = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ {i, v})\n    end\n  end\n  table.sort(evens, function(a, b) return a[2] < b[2]\
    \ end)\n  if #evens > 0 then\n    return evens[1]\n  else\n    return {}\n  end\n\
    end", "\tlocal min = math.huge\n\tlocal index = nil\n\tfor i, v in ipairs(arr)\
    \ do\n\t\tif v % 2 == 0 and v < min then\n\t\t\tmin = v\n\t\t\tindex = i\n\t\t\
    end\n\tend\n\tif index then\n\t\treturn {min, index}\n\telse\n\t\treturn {}\n\t\
    end\nend", "    local min, min_idx, idx, e\n    for idx, e in ipairs(arr) do\n\
    \        if e % 2 == 0 then\n            if not min or e < min then\n        \
    \        min = e\n                min_idx = idx\n            end\n        end\n\
    \    end\n    return min_idx and {min, min_idx} or {}\nend", "    -- idx is index\
    \ of the node with smallest even value\n    local idx = 0\n    -- even is the\
    \ smallest even value\n    local even = math.huge\n    -- loop through the array,\
    \ \n    -- find the smallest even value and its index\n    for i = 1, #arr do\n\
    \        if arr[i] ~= nil and arr[i] % 2 == 0 and arr[i] < even then\n       \
    \     even = arr[i]\n            idx = i\n        end\n    end\n    -- if an even\
    \ value is found\n    if even ~= math.huge then\n        -- return the smallest\
    \ even value and its index\n        return {even, idx}\n    end\n    -- otherwise,\
    \ return nil\n    return nil\nend", "  local index = 0\n  local prev_value = nil\n\
    \  local prev_index = nil\n  for i, value in ipairs(arr) do\n    if value % 2\
    \ == 0 then\n      if index == 0 then\n        index = i\n        prev_value =\
    \ value\n        prev_index = i\n      else\n        if value < prev_value then\n\
    \          index = i\n          prev_value = value\n          prev_index = i\n\
    \        elseif value == prev_value then\n          if i < prev_index then\n \
    \           index = i\n            prev_value = value\n            prev_index\
    \ = i\n          end\n        end\n      end\n    end\n  end\n  if index == 0\
    \ then\n    return {}\n  else\n    return { prev_value, index }\n  end\nend",
  "  local result = {}\n  local hasEven = false\n  for i,v in ipairs(arr) do\n   \
    \ if v % 2 == 0 then\n      hasEven = true\n      if not result[1] or result[1]\
    \ > v then\n        result[1] = v\n        result[2] = i\n      end\n    end\n\
    \  end\n  if hasEven then\n    return result\n  else\n    return {}\n  end\nend",
  "\tif type(arr) ~= \"table\" then return nil end\n\tif #arr == 0 then return {}\
    \ end\n\tlocal m = {num = math.huge, idx = math.huge}\n\tfor k, v in ipairs(arr)\
    \ do\n\t\tif v % 2 == 0 and v < m.num then\n\t\t\tm.num = v\n\t\t\tm.idx = k\n\
    \t\tend\n\tend\n\tif m.num == math.huge then return {} end\n\treturn {m.num, m.idx}\n\
    end", "  local even = {math.huge}\n  local evenIndex = math.huge\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < even[1] then\n      even = {v, i}\n\
    \    end\n  end\n  return even[1] ~= math.huge and even or {}\nend", "    if #arr\
    \ == 0 then\n        return {}\n    end\n    local min = math.maxinteger\n   \
    \ local pos = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v <\
    \ min then\n            min = v\n            pos = i\n        end\n    end\n \
    \   if min == math.maxinteger then\n        return {}\n    end\n    return {min,\
    \ pos}\nend", "  local min_val = math.huge\n  local min_idx = math.huge\n  for\
    \ i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < min_val then\n      min_val\
    \ = arr[i]\n      min_idx = i\n    end\n  end\n  if min_val == math.huge then\n\
    \    return {}\n  else\n    return {min_val, min_idx}\n  end\nend", "  if #arr\
    \ == 0 then return {} end\n  local evens = {}\n  for i,v in ipairs(arr) do\n \
    \   if v % 2 == 0 then\n      table.insert(evens, {i, v})\n    end\n  end\n  if\
    \ #evens == 0 then return {} end\n  table.sort(evens, function(a,b) return a[2]\
    \ < b[2] end)\n  local v = evens[1][2]\n  local t = {}\n  for i=1,#evens do\n\
    \    if evens[i][2] == v then\n      table.insert(t, evens[i])\n    end\n  end\n\
    \  table.sort(t, function(a,b) return a[1] < b[1] end)\n  return { t[1][2], t[1][1]\
    \ }\nend", "  local smallest, index\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 then\n      if smallest == nil or v < smallest then\n        smallest\
    \ = v\n        index = i\n      end\n    end\n  end\n  return smallest ~= nil\
    \ and {smallest, index} or {}\nend", "  local min = math.huge\n  local min_i =\
    \ math.huge\n  for i,v in ipairs(arr) do\n    if v ~= 0 and v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_i = i\n    end\n  end\n  if min_i == math.huge\
    \ then\n    return {}\n  else\n    return {min, min_i}\n  end\nend", "  local\
    \ minVal,minInd,found=math.huge,math.huge,false\n  for i,v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      if v < minVal then\n        minVal,minInd,found=v,i,true\n\
    \      end\n    end\n  end\n  return found and {minVal,minInd} or {}\nend", " \
    \ local res = {}\n  local even\n  for idx, val in ipairs(arr) do\n    if val %\
    \ 2 == 0 then\n      if not even or val < even then\n        even = val\n    \
    \    res = { val, idx }\n      end\n    end\n  end\n  return res\nend", "    local\
    \ smallest = math.huge\n    local ret = {}\n    for i = 1, #arr do\n        if\
    \ arr[i] % 2 == 0 and arr[i] < smallest then\n            smallest = arr[i]\n\
    \            ret = {smallest, i}\n        end\n    end\n    return ret\nend",
  "    if type(arr) ~= \"table\" then\n        return\n    end\n    local min, minIndex\n\
    \    for i,v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min\
    \ == nil or v < min then\n                min = v\n                minIndex =\
    \ i\n            end\n        end\n    end\n    if min ~= nil then\n        return\
    \ {min, minIndex}\n    end\nend", "  local nums = {}\n  local indexes = {}\n \
    \ for i = 1, #arr do\n    local num = arr[i]\n    if num % 2 == 0 then\n     \
    \ table.insert(nums, num)\n      table.insert(indexes, i)\n    end\n  end\n  local\
    \ min = math.min(unpack(nums))\n  if min == math.huge then\n    return {}\n  end\n\
    \  local min_index = indexes[1]\n  for i = 1, #nums do\n    if nums[i] == min\
    \ then\n      min_index = indexes[i]\n      break\n    end\n  end\n  return {min,\
    \ min_index}\nend", "  local even = {}\n  local min = {}\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      table.insert(even, arr[i])\n      table.insert(min,\
    \ arr[i])\n    end\n  end\n  if #even == 0 then\n    return {}\n  end\n  table.sort(min)\n\
    \  local min_val = min[1]\n  local min_idx = 1\n  for i = 1, #arr do\n    if arr[i]\
    \ == min_val then\n      min_idx = i\n      break\n    end\n  end\n  return {min_val,\
    \ min_idx}\nend", "  local index = #arr\n  local value = 1/0\n  for i, a in ipairs(arr)\
    \ do\n    if a % 2 == 0 and a < value then\n      index = i\n      value = a\n\
    \    end\n  end\n  if value == 1/0 then\n    return {}\n  else\n    return {value,\
    \ index}\n  end\nend", "    local evens = {}\n    for i, v in ipairs(arr) do\n\
    \        if v % 2 == 0 then\n            evens[i] = v\n        end\n    end\n\
    \    if #evens == 0 then\n        return {}\n    end\n    local smallest = nil\n\
    \    local index = nil\n    for i, v in pairs(evens) do\n        if not smallest\
    \ or v < smallest then\n            smallest = v\n            index = i\n    \
    \    end\n    end\n    return {smallest, index}\nend", "  -- your code here\n\
    end", "  local minEven = math.huge\n  local minEvenIndex = nil\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < minEven then\n      minEven = v\n\
    \      minEvenIndex = i\n    end\n  end\n  if minEvenIndex then\n    return {minEven,\
    \ minEvenIndex}\n  else\n    return {}\n  end\nend", "    local evens = {}\n \
    \   for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ {v, i})\n        end\n    end\n    if #evens == 0 then\n        return {}\n\
    \    end\n    table.sort(evens, function(a, b) return a[1] < b[1] end)\n    return\
    \ evens[1]\nend", "    local min = math.huge\n    local min_i = nil\n    for i\
    \ = 1, #arr do\n        if arr[i] < min and arr[i] % 2 == 0 then\n           \
    \ min = arr[i]\n            min_i = i\n        end\n    end\n    if min == math.huge\
    \ then\n        return {}\n    else\n        return {min, min_i}\n    end\nend",
  "    if #arr == 0 then\n        return {}\n    end\n    local min = math.huge\n\
    \    local minIndex = math.huge\n    for i = 1, #arr do\n        if arr[i] % 2\
    \ == 0 and arr[i] < min then\n            min = arr[i]\n            minIndex =\
    \ i\n        end\n    end\n    if min == math.huge then\n        return {}\n \
    \   end\n    return {min, minIndex}\nend", "  local min_evn, min_ind = nil, nil\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min_evn == nil\
    \ or v < min_evn then\n        min_evn = v\n        min_ind = i\n      end\n \
    \   end\n  end\n  return {min_evn, min_ind}\nend", "  local min_even, min_even_idx\
    \ = math.huge, math.huge\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i]\
    \ < min_even then\n      min_even, min_even_idx = arr[i], i\n    end\n  end\n\
    \  if min_even ~= math.huge then\n    return {min_even, min_even_idx}\n  end\n\
    \  return {}\nend", "    local smallest = nil\n    local smallest_index = nil\n\
    \    for i = 1, #arr do\n        if arr[i] ~= 0 and arr[i] % 2 == 0 then\n   \
    \         if smallest == nil or arr[i] < smallest then\n                smallest\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest == nil then\n        return {}\n    else\n        return\
    \ {smallest, smallest_index}\n    end\nend", "  -- print(arr)\n  local index =\
    \ -1\n  local smallest = 10001\n  for i, node in ipairs(arr) do\n    if node %\
    \ 2 == 0 and node < smallest then\n      smallest = node\n      index = i\n  \
    \  end\n  end\n  if index == -1 then\n    return {}\n  end\n  return {smallest,\
    \ index}\nend", end, "    local m = math.huge\n    local ind = math.huge\n   \
    \ for i = 1, #arr do\n        if arr[i] ~= 0 and arr[i] % 2 == 0 and arr[i] <\
    \ m then\n            m = arr[i]\n            ind = i\n        end\n    end\n\
    \    if m == math.huge then\n        return {}\n    end\n    return {m, ind}\n\
    end", "    local min,min_idx,min_even\n    for i,v in ipairs(arr) do\n       \
    \ if (v%2 == 0) then\n            if not min_even or v < min_even then\n     \
    \           min_even = v\n                min_idx = i\n            end\n     \
    \   end\n    end\n    return min_even and {min_even,min_idx} or {}\nend", "\t\
    local idx, val = math.huge, math.huge\n\tfor i, e in ipairs(arr) do\n\t\tif e\
    \ % 2 == 0 and e < val then\n\t\t\tidx, val = i, e\n\t\tend\n\tend\n\treturn idx\
    \ < math.huge and { val, idx } or {}\nend", end, "    local n = #arr\n    local\
    \ i = 1\n    local found\n    while i <= n do\n        if arr[i] % 2 == 0 then\n\
    \            found = i\n            break\n        end\n        i = i + 1\n  \
    \  end\n    if not found then\n        return {}\n    end\n    local val = arr[found]\n\
    \    i = found + 1\n    while i <= n do\n        if arr[i] % 2 == 0 and arr[i]\
    \ < val then\n            found = i\n            val = arr[i]\n        end\n \
    \       i = i + 1\n    end\n    return {val, found}\nend", "  local min, minIdx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min, minIdx = v, i\n    end\n  end\n  return min == math.huge\
    \ and {} or {min, minIdx}\nend", "  local even_elems = {}\n  for i,v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      table.insert(even_elems, {v, i})\n    end\n\
    \  end\n  table.sort(even_elems, function(a,b)\n    if a[1] == b[1] then\n   \
    \   return a[2] < b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  if #even_elems > 0 then\n    return even_elems[1]\n  else\n    return {}\n\
    \  end\nend", "  local function is_even(x)\n    return math.fmod(x, 2) == 0\n\
    \  end\n  if #arr == 0 then\n    return {}\n  end\n  local min_val = math.huge\n\
    \  local min_idx = 1\n  for i = 1, #arr do\n    if is_even(arr[i]) and arr[i]\
    \ < min_val then\n      min_val = arr[i]\n      min_idx = i\n    end\n  end\n\
    \  if min_val == math.huge then\n    return {}\n  end\n  return {min_val, min_idx}\n\
    end", "  local sm, si = math.huge, -1\n  for i, v in ipairs(arr) do\n    if v\
    \ % 2 == 0 and v < sm then\n      sm, si = v, i\n    end\n  end\n  return si ~=\
    \ -1 and {sm, si} or {}\nend", "    local min_even, min_index\n    for i, v in\
    \ ipairs(arr) do\n        if v % 2 == 0 then\n            if not min_even or v\
    \ < min_even then\n                min_even = v\n                min_index = i\n\
    \            end\n        end\n    end\n    return min_even and {min_even, min_index}\
    \ or {}\nend", "  local even = {}\n  local index = {}\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      even[#even + 1] = arr[i]\n      index[#index\
    \ + 1] = i\n    end\n  end\n  if #even > 0 then\n    local min = math.min(unpack(even))\n\
    \    for i = 1, #even do\n      if even[i] == min then\n        return { min,\
    \ index[i] }\n      end\n    end\n  end\n  return {}\nend", "\tif arr == nil or\
    \ #arr == 0 then\n\t\treturn {}\n\tend\n\tlocal minEven = math.huge\n\tlocal minIdx\
    \ = math.huge\n\tfor i = 1, #arr do\n\t\tif arr[i] % 2 == 0 then\n\t\t\tif arr[i]\
    \ < minEven then\n\t\t\t\tminEven = arr[i]\n\t\t\t\tminIdx = i\n\t\t\telseif arr[i]\
    \ == minEven and i < minIdx then\n\t\t\t\tminIdx = i\n\t\t\tend\n\t\tend\n\tend\n\
    \tif minEven ~= math.huge then\n\t\treturn {minEven, minIdx}\n\telse\n\t\treturn\
    \ {}\n\tend\nend", "  local res = {0, 0}\n  local last = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < res[1] then\n      res[1] = v\n      res[2] =\
    \ i\n      last = i\n    end\n  end\n  if res[1] == 0 then return {} end\n  return\
    \ res\nend", "    local ret = {}\n    local idx = -1\n    local mval = -1\n  \
    \  for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if idx\
    \ == -1 then\n                ret = { v, i }\n                idx = i\n      \
    \          mval = v\n            else\n                if v < mval then\n    \
    \                ret = { v, i }\n                    idx = i\n               \
    \     mval = v\n                end\n            end\n        end\n    end\n \
    \   return ret\nend", "    local evens = {}\n    for i = 1, #arr do\n        if\
    \ arr[i] % 2 == 0 then\n            table.insert(evens, arr[i])\n        end\n\
    \    end\n    if #evens == 0 then\n        return {}\n    end\n    local min_i,\
    \ min_v = 0, math.huge\n    for i = 1, #evens do\n        if evens[i] < min_v\
    \ then\n            min_i, min_v = i, evens[i]\n        end\n    end\n    return\
    \ { min_v, min_i }\nend", "  local node = {}\n  local idx = 0\n  local f = true\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if f then\n     \
    \   node.value = v\n        node.index = i\n        f = false\n      else\n  \
    \      if v < node.value then\n          node.value = v\n          node.index\
    \ = i\n        end\n      end\n    end\n  end\n  if not f then\n    return {node.value,\
    \ node.index}\n  else\n    return {}\n  end\nend", "  local min, minIdx\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min or v < min\
    \ then\n        min = v\n        minIdx = i\n      end\n    end\n  end\n  return\
    \ min and {min, minIdx} or {}\nend", "  local min = math.huge\n  local result\
    \ = {}\n  local index = 0\n  for k, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min = v\n      index = k\n    end\n  end\n  if min ~= math.huge\
    \ then\n    table.insert(result, min)\n    table.insert(result, index)\n  end\n\
    \  return result\nend", "    local minI = 0\n    local minV = math.huge\n    for\
    \ i, v in ipairs(arr) do\n        if v > 0 and v % 2 == 0 and v < minV then\n\
    \            minI = i\n            minV = v\n        end\n    end\n    if minV\
    \ == math.huge then\n        return {}\n    else\n        return {minV, minI}\n\
    \    end\nend", "    local first, second, idx = nil, nil, 0\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            if not first then\n            \
    \    first, idx = v, i\n            elseif v < first then\n                second,\
    \ first, idx = first, v, i\n            elseif v < second then\n             \
    \   second = v\n            end\n        end\n    end\n    return first and {first,\
    \ idx} or {}\nend\nreturn pluck", "    if #arr == 0 then\n        return {}\n\
    \    end\n    local min = arr[1]\n    local minIdx = 1\n    for i = 2, #arr do\n\
    \        if arr[i] == 0 then\n            return {0, i}\n        end\n       \
    \ if arr[i] < min and arr[i] % 2 == 0 then\n            min = arr[i]\n       \
    \     minIdx = i\n        end\n    end\n    if min % 2 == 0 then\n        return\
    \ {min, minIdx}\n    end\n    return {}\nend", "  local smallest_value = math.huge\n\
    \  local smallest_index = math.huge\n  for i,v in ipairs(arr) do\n    if v%2 ==\
    \ 0 and v < smallest_value then\n      smallest_value = v\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value < math.huge then\n    return {smallest_value,\
    \ smallest_index}\n  else\n    return {}\n  end\nend", "    local even_and_its_index\
    \ = {}\n    local min_even_and_its_index = {}\n    local min_even = math.huge\n\
    \    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            table.insert(even_and_its_index,\
    \ {arr[i], i})\n            if arr[i] < min_even then\n                min_even\
    \ = arr[i]\n                min_even_and_its_index = {arr[i], i}\n           \
    \ end\n        end\n    end\n    return #even_and_its_index > 0 and min_even_and_its_index\
    \ or {}\nend", "    local min, min_idx = math.huge, nil\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 and arr[i] < min then\n            min = arr[i]\n\
    \            min_idx = i\n        end\n    end\n    if min == math.huge then\n\
    \        return {}\n    else\n        return {min, min_idx}\n    end\nend", " \
    \ local min_even, min_idx\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if not min_even or v < min_even then\n        min_even = v\n        min_idx\
    \ = i\n      end\n    end\n  end\n  return min_even and {min_even, min_idx} or\
    \ {}\nend", "  -- we are going to try every strategy\n  -- and return the result\
    \ of the best strategy", "  local s = {}\n  for k, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 then\n      table.insert(s, {v, k})\n    end\n  end\n  table.sort(s,\
    \ function(a, b) return a[1] < b[1] end)\n  return #s > 0 and s[1] or {}\nend",
  "    if #arr == 0 then\n        return {}\n    end\n    local min = arr[1]\n   \
    \ local index = 1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v\
    \ < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if min % 2 == 0 then\n        return {min, index}\n    else\n        return\
    \ {}\n    end\nend", "  -- print('pluck', #arr)\n  if #arr == 0 then return {}\
    \ end\n  local min_value, min_index\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 then\n      if min_value == nil or v < min_value then\n        min_value\
    \ = v\n        min_index = i\n      end\n    end\n  end\n  if min_value then\n\
    \    return {min_value, min_index}\n  else\n    return {}\n  end\nend", "  local\
    \ smallest_value = nil\n  local smallest_index = nil\n  for i = 1, #arr do\n \
    \   if arr[i] % 2 == 0 then\n      if smallest_value == nil or arr[i] < smallest_value\
    \ then\n        smallest_value = arr[i]\n        smallest_index = i\n      end\n\
    \    end\n  end\n  if smallest_value == nil then\n    return {}\n  else\n    return\
    \ {smallest_value, smallest_index}\n  end\nend", "    local l=0\n    local v=nil\n\
    \    local i=0\n    local k=0\n    for k,v in ipairs(arr) do\n        if v % 2\
    \ == 0 then\n            if i == 0 or v < l then\n                l = v\n    \
    \            i = k\n            end\n        end\n    end\n    if i > 0 then\n\
    \        return {l, i}\n    else\n        return {}\n    end\nend", "  local evenNodes\
    \ = {}\n  for i = 1, #arr do\n    if (arr[i] % 2 == 0) then\n      table.insert(evenNodes,\
    \ { arr[i], i })\n    end\n  end\n  if (#evenNodes == 0) then\n    return {}\n\
    \  end\n  table.sort(evenNodes, function(a, b) return a[1] < b[1] end)\n  return\
    \ evenNodes[1]\nend", "  local min, minIndex = math.huge, math.huge\n  for i =\
    \ 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < min then\n      min, minIndex\
    \ = arr[i], i\n    end\n  end\n  if min == math.huge then return {} end\n  return\
    \ {min, minIndex}\nend\nreturn pluck", "  if #arr == 0 then return {} end\n  local\
    \ min\n  local res = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if not min or v < min then\n        min = v\n        res = { v, i }\n \
    \     end\n    end\n  end\n  return res\nend", "  local minEven, minIndex = math.huge,\
    \ math.huge\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < minEven\
    \ then\n      minEven = arr[i]\n      minIndex = i\n    end\n  end\n  if minEven\
    \ == math.huge then\n    return {}\n  end\n  return {minEven, minIndex}\nend",
  end, "    local min_v, min_i\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 then\n            if not min_v or v < min_v then\n                min_v =\
    \ v\n                min_i = i\n            end\n        end\n    end\n    return\
    \ min_v and {min_v, min_i} or {}\nend", "  local min = math.huge\n  local ind\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      ind = i\n    end\n  end\n  if min == math.huge then\n  \
    \  return {}\n  end\n  return {min, ind}\nend", "  local minVal = math.huge\n\
    \  local minValIndex = nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i]\
    \ < minVal then\n      minVal = arr[i]\n      minValIndex = i\n    end\n  end\n\
    \  if minValIndex == nil then\n    return {}\n  else\n    return {minVal, minValIndex}\n\
    \  end\nend", "  local min, idx = math.huge, math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min, idx = v, i\n    end\n  end\n\
    \  return min == math.huge and {} or {min, idx}\nend", "    local min, minIdx\
    \ = math.huge, -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v\
    \ < min then\n            min, minIdx = v, i\n        end\n    end\n    return\
    \ minIdx >= 0 and {min, minIdx} or {}\nend", "    local min_idx, min_val\n   \
    \ for idx, val in ipairs(arr) do\n        if val % 2 == 0 then\n            if\
    \ not min_val or val < min_val then\n                min_val = val\n         \
    \       min_idx = idx\n            end\n        end\n    end\n    return min_val\
    \ and {min_val, min_idx} or {}\nend", "    local min = nil\n    local minIdx =\
    \ nil\n    for i = 1, #arr do\n        if not min and arr[i] % 2 == 0 then\n \
    \           min = arr[i]\n            minIdx = i\n        elseif min and arr[i]\
    \ % 2 == 0 and arr[i] < min then\n            min = arr[i]\n            minIdx\
    \ = i\n        end\n    end\n    if min then\n        return {min, minIdx}\n \
    \   else\n        return {}\n    end\nend\nreturn pluck", "    local minimum =\
    \ math.huge\n    local index = -1\n    for i, v in ipairs(arr) do\n        if\
    \ v > 0 and v % 2 == 0 and v < minimum then\n            minimum = v\n       \
    \     index = i\n        end\n    end\n    if index > 0 then\n        return {minimum,\
    \ index}\n    else\n        return {}\n    end\nend", "\tlocal smallest, smallesti\
    \ = nil, nil\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\t\t\tif smallest\
    \ == nil or v < smallest then\n\t\t\t\tsmallest, smallesti = v, i\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn smallest and { smallest, smallesti } or {}\nend", " \
    \   local mn = nil\n    local index = 0\n    for i, v in ipairs(arr) do\n    \
    \    if v % 2 == 0 then\n            if mn == nil or v < mn then\n           \
    \     mn = v\n                index = i\n            end\n        end\n    end\n\
    \    if mn == nil then\n        return {}\n    end\n    return {mn, index}\nend",
  "    local even, index\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n\
    \            if not even or v < even then\n                even = v\n        \
    \        index = i\n            end\n        end\n    end\n    return even and\
    \ {even, index} or {}\nend", "  local min, minIndex\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if not min or v < min then\n        min =\
    \ v\n        minIndex = i\n      end\n    end\n  end\n  return {min, minIndex}\n\
    end", "    if not arr or #arr == 0 then\n        return {}\n    end\n    local\
    \ evens = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n      \
    \      table.insert(evens, { arr[i], i })\n        end\n    end\n    if #evens\
    \ == 0 then\n        return {}\n    end\n    table.sort(evens, function(x, y)\n\
    \        if x[1] == y[1] then\n            return x[2] < y[2]\n        end\n \
    \       return x[1] < y[1]\n    end)\n    return evens[1]\nend", "  local even_nums\
    \ = {}\n  local smallest_even_num_index = math.huge\n  for index, value in ipairs(arr)\
    \ do\n    if value % 2 == 0 then\n      even_nums[index] = value\n      if value\
    \ < smallest_even_num_index then\n        smallest_even_num_index = value\n  \
    \    end\n    end\n  end\n  for index, value in ipairs(even_nums) do\n    if value\
    \ == smallest_even_num_index then\n      return { value, index }\n    end\n  end\n\
    \  return {}\nend", "  local min, idx\n  for i,v in ipairs(arr) do\n    if (v\
    \ % 2 == 0) and (min == nil or v < min) then\n      min = v\n      idx = i\n \
    \   end\n  end\n  return min and {min, idx} or {}\nend", "  local minVal = math.huge\n\
    \  local minValIndex = math.huge\n  for i = 1, #arr do\n    if arr[i] % 2 == 0\
    \ and arr[i] < minVal then\n      minVal = arr[i]\n      minValIndex = i\n   \
    \ end\n  end\n  if minVal == math.huge then\n    return {}\n  end\n  return {minVal,\
    \ minValIndex}\nend\nreturn pluck", "\tlocal res\n\tlocal idx\n\tfor i, v in ipairs(arr)\
    \ do\n\t\tif not (v % 2) then\n\t\t\tif not res or v < res then\n\t\t\t\tres =\
    \ v\n\t\t\t\tidx = i\n\t\t\tend\n\t\tend\n\tend\n\treturn res and {res, idx} or\
    \ {}\nend", "    local smallest_even_node_value, smallest_even_node_index = math.huge,\
    \ math.huge\n    for index, node_value in ipairs(arr) do\n        if node_value\
    \ % 2 == 0 and node_value < smallest_even_node_value then\n            smallest_even_node_value\
    \ = node_value\n            smallest_even_node_index = index\n        end\n  \
    \  end\n    if smallest_even_node_value ~= math.huge then\n        return { smallest_even_node_value,\
    \ smallest_even_node_index }\n    else\n        return {}\n    end\nend", "  \
    \  local res = {}\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n\
    \            if #res == 0 then\n                res = {v, i}\n            elseif\
    \ v < res[1] then\n                res = {v, i}\n            end\n        end\n\
    \    end\n    return res\nend", "  local r, i, n = {}, 1, 0\n  for _, v in ipairs(arr)\
    \ do\n    if v%2 == 0 then\n      n = n + 1\n      if n == 1 then\n        r =\
    \ {v, i}\n      elseif v < r[1] then\n        r = {v, i}\n      end\n    end\n\
    \    i = i + 1\n  end\n  return r\nend", "    local min, min_ind = 10001, -1\n\
    \    for i,v in ipairs(arr) do\n        if v % 2 == 0 and v < min then\n     \
    \       min = v\n            min_ind = i\n        end\n    end\n    if min_ind\
    \ == -1 then\n        return {}\n    else\n        return {min, min_ind}\n   \
    \ end\nend", end, "    local minVal = nil\n    local minValIndex = nil\n    for\
    \ i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if minVal == nil\
    \ or arr[i] < minVal then\n                minVal = arr[i]\n                minValIndex\
    \ = i\n            end\n        end\n    end\n    if minVal == nil then\n    \
    \    return {}\n    else\n        return {minVal, minValIndex}\n    end\nend",
  "  local evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n    \
    \  table.insert(evens, {value = v, index = i})\n    end\n  end\n  if #evens ==\
    \ 0 then\n    return {}\n  end\n  table.sort(evens, function(a, b) return a.value\
    \ < b.value end)\n  return {evens[1].value, evens[1].index}\nend", "  local min_val\
    \ = math.huge\n  local min_ind = math.huge\n  for i, v in ipairs(arr) do\n   \
    \ if v % 2 == 0 and v < min_val then\n      min_val = v\n      min_ind = i\n \
    \   end\n  end\n  if min_val == math.huge then\n    return {}\n  else\n    return\
    \ {min_val, min_ind}\n  end\nend", "    local smallest, smallestIndex = 10001,\
    \ 0\n    for i, v in ipairs(arr) do\n        if v ~= 0 and v % 2 == 0 and v <\
    \ smallest then\n            smallest = v\n            smallestIndex = i\n   \
    \     end\n    end\n    if smallestIndex == 0 then\n        return {}\n    else\n\
    \        return {smallest, smallestIndex}\n    end\nend", "    if #arr == 0 then\n\
    \        return {}\n    end\n    local min_val, min_idx = math.huge, math.huge\n\
    \    for i, val in ipairs(arr) do\n        if val % 2 == 0 and val < min_val then\n\
    \            min_val, min_idx = val, i\n        end\n    end\n    if min_val ==\
    \ math.huge then\n        return {}\n    end\n    return {min_val, min_idx}\n\
    end", "  local min = math.huge\n  local minIdx = 0\n  for i = 1, #arr do\n   \
    \ if (arr[i] % 2 == 0) and (arr[i] < min) then\n      min = arr[i]\n      minIdx\
    \ = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  end\n  return\
    \ {min, minIdx}\nend", "  if #arr == 0 then return {} end\n  local min = math.huge\n\
    \  local idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      idx = i\n    end\n  end\n  if idx == -1 then return\
    \ {} end\n  return { min, idx }\nend", "  local result = {}\n  local max_index\
    \ = 0\n  local min_value = nil\n  for index, value in ipairs(arr) do\n    if value\
    \ % 2 == 0 then\n      if min_value == nil or value < min_value then\n       \
    \ min_value = value\n        max_index = index\n      end\n    end\n  end\n  if\
    \ min_value ~= nil then\n    table.insert(result, min_value)\n    table.insert(result,\
    \ max_index)\n  end\n  return result\nend\nreturn pluck", "    local min, minIdx\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ min or v < min then\n                min = v\n                minIdx = i\n \
    \           end\n        end\n    end\n    return min and {min, minIdx} or {}\n\
    end\nreturn pluck", "  local v, idx\n  for i = 1, #arr do\n    if (v == nil or\
    \ arr[i] < v) and arr[i] % 2 == 0 then\n      v = arr[i]\n      idx = i\n    end\n\
    \  end\n  return {v, idx}\nend\nreturn pluck", "    if #arr == 0 then\n      \
    \  return {}\n    end\n    local min_even = math.huge\n    local min_even_idx\
    \ = nil\n    for i, val in ipairs(arr) do\n        if val % 2 == 0 and val < min_even\
    \ then\n            min_even = val\n            min_even_idx = i\n        end\n\
    \    end\n    if min_even_idx == nil then\n        return {}\n    end\n    return\
    \ {min_even, min_even_idx}\nend", "    return {}\nend", "    local smallest =\
    \ nil\n    local smallest_idx = nil\n    for idx,val in ipairs(arr) do\n     \
    \   if val % 2 == 0 then\n            if smallest == nil or val < smallest then\n\
    \                smallest = val\n                smallest_idx = idx\n        \
    \    end\n        end\n    end\n    if smallest == nil then\n        return {}\n\
    \    else\n        return {smallest, smallest_idx}\n    end\nend", "  local min_even,\
    \ min_even_idx = nil, 0\n  for i, x in ipairs(arr) do\n    if min_even == nil\
    \ and x % 2 == 0 then\n      min_even, min_even_idx = x, i\n    elseif min_even\
    \ ~= nil and x % 2 == 0 and x < min_even then\n      min_even, min_even_idx =\
    \ x, i\n    end\n  end\n  return min_even ~= nil and {min_even, min_even_idx}\
    \ or {}\nend", "    local smallestEvenVal, idx = math.huge, -1\n    for i, v in\
    \ ipairs(arr) do\n        if v % 2 == 0 and v < smallestEvenVal then\n       \
    \     smallestEvenVal = v\n            idx = i\n        end\n    end\n    return\
    \ smallestEvenVal == math.huge and {} or {smallestEvenVal, idx}\nend", "    local\
    \ evens = {}\n    for i,n in ipairs(arr) do\n        if n % 2 == 0 then\n    \
    \        evens[#evens+1] = {i, n}\n        end\n    end\n    table.sort(evens,\
    \ function(a,b)\n        if a[2] < b[2] then\n            return true\n      \
    \  elseif a[2] == b[2] then\n            return a[1] < b[1]\n        else\n  \
    \          return false\n        end\n    end)\n    if #evens > 0 then\n     \
    \   return evens[1]\n    else\n        return {}\n    end\nend", "    local minEvenValue\
    \ = 0\n    local minEvenIndex = 0\n    local first = true\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if first then\n           \
    \     minEvenValue = arr[i]\n                minEvenIndex = i\n              \
    \  first = false\n            else\n                if arr[i] < minEvenValue then\n\
    \                    minEvenValue = arr[i]\n                    minEvenIndex =\
    \ i\n                end\n            end\n        end\n    end\n    if first\
    \ then\n        return {}\n    else\n        return {minEvenValue, minEvenIndex}\n\
    \    end\nend", "    local min = -1\n    local mini = 0\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            if min == -1 then\n            \
    \    min = v\n                mini = i\n            elseif v < min then\n    \
    \            min = v\n                mini = i\n            end\n        end\n\
    \    end\n    if min == -1 then\n        return {}\n    else\n        return {min,\
    \ mini}\n    end\nend", "  local smallest, smallest_i\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if not smallest then\n        smallest = v\n\
    \        smallest_i = i\n      elseif v < smallest then\n        smallest = v\n\
    \        smallest_i = i\n      end\n    end\n  end\n  if smallest then\n    return\
    \ {smallest, smallest_i}\n  else\n    return {}\n  end\nend", "  if not arr or\
    \ #arr == 0 then return {} end\n  local sm = nil\n  local smi = nil\n  for i,\
    \ v in ipairs(arr) do\n    if not sm and v % 2 == 0 then sm = v; smi = i; end\n\
    \    if sm and v % 2 == 0 and v < sm then sm = v; smi = i; end\n  end\n  if not\
    \ sm then return {} end\n  return {sm, smi}\nend", "  if not arr or not next(arr)\
    \ then return {} end\n  local smallest, smallestIndex\n  for i, v in ipairs(arr)\
    \ do\n    if (v % 2 == 0) and (smallest == nil or v < smallest) then\n      smallest\
    \ = v\n      smallestIndex = i\n    end\n  end\n  return smallest ~= nil and {smallest,\
    \ smallestIndex} or {}\nend\nreturn pluck", "  local min = math.huge\n  local\
    \ idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      idx = i\n    end\n  end\n  if idx == -1 then\n    return\
    \ {}\n  else\n    return { min, idx }\n  end\nend", "  local res, res_i = { math.huge\
    \ }, 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < res[1] then\n\
    \      res[1], res[2], res_i = arr[i], i, 1\n    end\n  end\n  return res_i >\
    \ 0 and res or {}\nend", "  if #arr == 0 then return {} end\n  local min_even_value,\
    \ min_even_index\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n     \
    \ if not min_even_value or v < min_even_value then\n        min_even_value = v\n\
    \        min_even_index = i\n      end\n    end\n  end\n  if not min_even_value\
    \ then return {} end\n  return {min_even_value, min_even_index}\nend", "    local\
    \ smallest_even_value, smallest_even_index\n    for index, value in ipairs(arr)\
    \ do\n        if value % 2 == 0 then\n            if not smallest_even_value or\
    \ value < smallest_even_value then\n                smallest_even_value = value\n\
    \                smallest_even_index = index\n            end\n        end\n \
    \   end\n    if smallest_even_value then\n        return {smallest_even_value,\
    \ smallest_even_index}\n    else\n        return {}\n    end\nend", "  local smallest_even\
    \ = nil\n  local smallest_even_idx = nil\n  for i = 1, #arr do\n    if (arr[i]\
    \ % 2 == 0) then\n      if (smallest_even == nil) then\n        smallest_even\
    \ = arr[i]\n        smallest_even_idx = i\n      elseif (arr[i] < smallest_even)\
    \ then\n        smallest_even = arr[i]\n        smallest_even_idx = i\n      end\n\
    \    end\n  end\n  if (smallest_even == nil) then\n    return {}\n  else\n   \
    \ return {smallest_even, smallest_even_idx}\n  end\nend", "  local min = math.huge\n\
    \  local idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min = v\n      idx = i\n    end\n  end\n  if min ~= math.huge\
    \ then\n    return {min, idx}\n  end\n  return {}\nend", "    if #arr == 0 then\n\
    \        return {}\n    end\n    local min = 2^64-1\n    local min_idx = -1\n\
    \    for i=1,#arr do\n        if arr[i] % 2 == 0 and arr[i] < min then\n     \
    \       min = arr[i]\n            min_idx = i\n        end\n    end\n    if min\
    \ == 2^64-1 then\n        return {}\n    end\n    return {min, min_idx}\nend",
  "  local evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n    \
    \  evens[#evens + 1] = { v, i }\n    end\n  end\n  if #evens == 0 then\n    return\
    \ {}\n  end\n  table.sort(evens, function(a, b)\n    if a[1] == b[1] then\n  \
    \    return a[2] < b[2]\n    end\n    return a[1] < b[1]\n  end)\n  return evens[1]\n\
    end", "    if #arr == 0 then\n        return {}\n    end\n    local ans = { value\
    \ = -1, index = -1 }\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if ans.value == -1 or arr[i] < ans.value then\n                ans.value\
    \ = arr[i]\n                ans.index = i\n            end\n        end\n    end\n\
    \    if ans.value == -1 then\n        return {}\n    end\n    return { ans.value,\
    \ ans.index }\nend", "    local min_even = nil\n    local min_even_index = nil\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min_even\
    \ == nil or v < min_even then\n                min_even = v\n                min_even_index\
    \ = i\n            end\n        end\n    end\n    if min_even == nil then\n  \
    \      return {}\n    else\n        return {min_even, min_even_index}\n    end\n\
    end", "    if #arr == 0 then\n        return {}\n    end\n    local minVal = nil\n\
    \    local minValIndex = nil\n    for i, v in ipairs(arr) do\n        if v % 2\
    \ == 0 then\n            if minVal == nil or v < minVal then\n               \
    \ minVal = v\n                minValIndex = i\n            end\n        end\n\
    \    end\n    if minValIndex == nil then\n        return {}\n    end\n    return\
    \ {minVal, minValIndex}\nend\nreturn pluck", "  local out = {}\n  local smallest\
    \ = math.huge\n  local smallest_index = -1\n  for i,v in ipairs(arr) do\n    if\
    \ (v > 0) and (v % 2 == 0) and (v < smallest) then\n      smallest = v\n     \
    \ smallest_index = i\n    end\n  end\n  if smallest_index >= 0 then\n    out[1]\
    \ = smallest\n    out[2] = smallest_index\n  end\n  return out\nend", "  if #arr\
    \ == 0 then return {} end\n  local min = math.huge\n  local minIndex = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      minIndex = i\n    end\n  end\n  if min == math.huge then return {}\
    \ end\n  return {min, minIndex}\nend", "\tif #arr == 0 then\n\t\treturn {}\n\t\
    end\n\tlocal evens = {}\n\tfor i,v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\
    \t\t\tevens[#evens+1] = {v, i}\n\t\tend\n\tend\n\tif #evens == 0 then\n\t\treturn\
    \ {}\n\tend\n\ttable.sort(evens, function(a,b)\n\t\tif a[1] == b[1] then\n\t\t\
    \treturn a[2] < b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\t\
    return evens[1]\nend", "  local evens = {}\n  for i, v in ipairs(arr) do\n   \
    \ if v % 2 == 0 then\n      evens[#evens + 1] = {v, i}\n    end\n  end\n  table.sort(evens,\
    \ function(a, b) return a[1] < b[1] end)\n  return #evens > 0 and evens[1] or\
    \ {}\nend", "  local res = {-1, -1}\n  for i = 1, #arr do\n    if arr[i] % 2 ==\
    \ 0 and (res[1] == -1 or arr[i] < res[1]) then\n      res = {arr[i], i}\n    end\n\
    \  end\n  if res[1] == -1 then\n    return {}\n  end\n  return res\nend", "  \
    \  local lo, hi, min_i, min_v = nil, nil, nil, math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_v then\n            min_v = v\n      \
    \      min_i = i\n        end\n    end\n    if min_i then\n        return {min_v,\
    \ min_i}\n    else\n        return {}\n    end\nend", "    local r = {}\n    local\
    \ l = #arr\n    if l == 0 then\n        return r\n    end\n    for i = 1, l do\n\
    \        if arr[i] % 2 == 0 then\n            r[#r + 1] = {\n                val\
    \ = arr[i],\n                idx = i\n            }\n        end\n    end\n  \
    \  if #r == 0 then\n        return r\n    end\n    table.sort(r, function(a, b)\n\
    \        if a.val == b.val then\n            return a.idx < b.idx\n        end\n\
    \        return a.val < b.val\n    end)\n    return { r[1].val, r[1].idx }\nend",
  "    local even = function(x) return x % 2 == 0 end\n    local min = function(x,\
    \ y) return (x < y) and x or y end\n    local min_idx = function(arr, x)\n   \
    \     local len = #arr\n        for i = 1, len do\n            if arr[i] == x\
    \ then\n                return i\n            end\n        end\n    end\n    local\
    \ res = {}\n    local len = #arr\n    if len == 0 then\n        return {}\n  \
    \  end\n    local m = math.huge\n    for i = 1, len do\n        if even(arr[i])\
    \ then\n            m = min(m, arr[i])\n        end\n    end\n    if m == math.huge\
    \ then\n        return {}\n    end\n    return {m, min_idx(arr, m)}\nend", " \
    \ local min = {\n    value = math.huge,\n    index = math.huge\n  }\n  for i =\
    \ 1, #arr do\n    if arr[i] ~= 0 and arr[i] % 2 == 0 and arr[i] < min.value then\n\
    \      min.value = arr[i]\n      min.index = i\n    end\n  end\n  if min.value\
    \ == math.huge then\n    return {}\n  end\n  return { min.value, min.index }\n\
    end", "\t-- body\n\tlocal r = {}\n\tlocal res = {}\n\tfor i = 1, #arr do\n\t\t\
    if arr[i] % 2 == 0 then\n\t\t\tr[#r + 1] = {arr[i], i}\n\t\tend\n\tend\n\tlocal\
    \ min = math.huge\n\tfor i = 1, #r do\n\t\tif r[i][1] < min then\n\t\t\tmin =\
    \ r[i][1]\n\t\t\tres = r[i]\n\t\tend\n\tend\n\treturn res\nend", "  local index\
    \ = nil\n  local value = nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if value == nil or arr[i] < value then\n        value = arr[i]\n      \
    \  index = i\n      end\n    end\n  end\n  if value == nil then\n    return {}\n\
    \  else\n    return {value, index}\n  end\nend", "    local res = {}\n    for\
    \ i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if #res == 0\
    \ then\n                res = { v, i }\n            elseif v < res[1] then\n \
    \               res = { v, i }\n            end\n        end\n    end\n    return\
    \ res\nend", "    local min = math.huge\n    local min_idx = -1\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 and arr[i] < min then\n            min =\
    \ arr[i]\n            min_idx = i\n        end\n    end\n    if min == math.huge\
    \ then\n        return {}\n    else\n        return {min, min_idx}\n    end\n\
    end", "    local smaller = nil\n    local ret = {}\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            if smaller == nil or arr[i] < smaller\
    \ then\n                smaller = arr[i]\n                ret = { smaller, i }\n\
    \            end\n        end\n    end\n    return ret\nend", "    local ret =\
    \ {}\n    local idx = 0\n    for k, v in ipairs(arr) do\n        if (v % 2 ==\
    \ 0) and (ret[1] == nil or v < ret[1]) then\n            ret[1] = v\n        \
    \    ret[2] = k\n        end\n    end\n    return ret\nend", "  -- your code here\n\
    end", end, "    local min_even = math.huge\n    local idx = math.huge\n    for\
    \ i,v in ipairs(arr) do\n        if v % 2 == 0 and v < min_even then\n       \
    \     min_even = v\n            idx = i\n        end\n    end\n    if min_even\
    \ == math.huge then\n        return {}\n    else\n        return {min_even, idx}\n\
    \    end\nend", "    local even, index = math.huge, 0\n    for i = 1, #arr do\n\
    \        if arr[i] ~= 0 and arr[i] % 2 == 0 and arr[i] < even then\n         \
    \   even, index = arr[i], i\n        end\n    end\n    return even == math.huge\
    \ and {} or {even, index}\nend", "  if #arr == 0 then return {} end\n  local i,\
    \ minv = math.huge, math.huge\n  for j = 1, #arr do\n    if arr[j] % 2 == 0 and\
    \ arr[j] < minv then\n      i, minv = j, arr[j]\n    end\n  end\n  if i == math.huge\
    \ then return {} end\n  return {minv, i}\nend", "\tif #arr == 0 then\n\t\treturn\
    \ {}\n\tend\n\tlocal min_value, min_index = math.huge, math.huge\n\tfor i, v in\
    \ ipairs(arr) do\n\t\tif v ~= 0 and v % 2 == 0 and v < min_value then\n\t\t\t\
    min_value, min_index = v, i\n\t\tend\n\tend\n\tif min_value == math.huge then\n\
    \t\treturn {}\n\tend\n\treturn {min_value, min_index}\nend\nassert(pluck({4,2,3})\
    \ == {2, 1})\nassert(pluck({1,2,3}) == {2, 1})\nassert(pluck({}) == {})\nassert(pluck({5,\
    \ 0, 3, 0, 4, 2}) == {0, 1})", "    local evens = {}\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            evens[#evens + 1] = {\n        \
    \        value = arr[i],\n                index = i\n            }\n        end\n\
    \    end\n    table.sort(evens, function(a, b)\n        return a.value < b.value\n\
    \    end)\n    if #evens > 0 then\n        return { evens[1].value, evens[1].index\
    \ }\n    end\n    return {}\nend\nreturn pluck", "  local min = math.huge\n  local\
    \ idx\n  for i, v in ipairs(arr) do\n    if v > 0 and v % 2 == 0 and v < min then\n\
    \      min = v\n      idx = i\n    end\n  end\n  return min == math.huge and {}\
    \ or {min, idx}\nend", "  local evens = {}\n  for i,v in ipairs(arr) do\n    if\
    \ v % 2 == 0 then\n      evens[#evens+1] = {v, i}\n    end\n  end\n  if #evens\
    \ == 0 then\n    return {}\n  end\n  table.sort(evens, function(a,b)\n    if a[1]\
    \ < b[1] then\n      return true\n    elseif a[1] > b[1] then\n      return false\n\
    \    else\n      return a[2] < b[2]\n    end\n  end)\n  return evens[1]\nend",
  "    local minv = math.huge\n    local mini = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < minv then\n            minv = v\n        \
    \    mini = i\n        end\n    end\n    if minv == math.huge then\n        return\
    \ {}\n    else\n        return {minv, mini}\n    end\nend", "    local minValue\
    \ = math.huge\n    local minIndex = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 and arr[i] < minValue then\n            minValue = arr[i]\n       \
    \     minIndex = i\n        end\n    end\n    if minValue == math.huge then\n\
    \        return {}\n    else\n        return {minValue, minIndex}\n    end\nend",
  "  local minEven, minEvenIdx\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if not minEven or v < minEven then\n        minEven = v\n        minEvenIdx\
    \ = i\n      end\n    end\n  end\n  if minEven then\n    return {minEven, minEvenIdx}\n\
    \  else\n    return {}\n  end\nend\nassert(#pluck({}) == 0)\nassert(#pluck({1,2,3})\
    \ == 2)\nassert(pluck({1,2,3})[1] == 2)\nassert(pluck({1,2,3})[2] == 2)\nassert(#pluck({4,2,3})\
    \ == 2)\nassert(pluck({4,2,3})[1] == 2)\nassert(pluck({4,2,3})[2] == 2)\nassert(#pluck({5,\
    \ 0, 3, 0, 4, 2}) == 2)\nassert(pluck({5, 0, 3, 0, 4, 2})[1] == 0)\nassert(pluck({5,\
    \ 0, 3, 0, 4, 2})[2] == 2)", "  local min\n  local min_index\n  for i, v in ipairs(arr)\
    \ do\n    if not min and v % 2 == 0 then\n      min = v\n      min_index = i\n\
    \    elseif min and v % 2 == 0 and v < min then\n      min = v\n      min_index\
    \ = i\n    end\n  end\n  if min then\n    return {min, min_index}\n  else\n  \
    \  return {}\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
