name: HumanEval_59_largest_prime_factor
language: lua
results:
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i = 2,math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max = 1\n    local limit\
    \ = math.floor(math.sqrt(n))\n    while max <= limit do\n        while n % max\
    \ == 0 do\n            n = n / max\n        end\n        max = max + 1\n    end\n\
    \    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = {}\n \
    \   local i = 2\n    while n > 1 do\n        if n % i == 0 then\n            table.insert(prime_factors,\
    \ i)\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return prime_factors[#prime_factors]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local t = {n}\n    local i =\
    \ 2\n    while t[#t] > 1 do\n        while t[#t] % i == 0 do\n            t[#t]\
    \ = t[#t] / i\n            table.insert(t, i)\n        end\n        i = i + 1\n\
    \    end\n    return t[#t-1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal r = math.floor(math.sqrt(n))\n\
    \tfor i = r, 2, -1 do\n\t\tif n % i == 0 and is_prime(i) then\n\t\t\treturn i\n\
    \t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmponq5sqq4.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmponq5sqq4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmponq5sqq4.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal factors = prime_factors(n)\n\
    \treturn factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplu8zdpsl.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmplu8zdpsl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplu8zdpsl.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- I happen to know that the\
    \ largest prime factor of n is less than sqrt(n).\n    local upper_bound = math.sqrt(n)\n\
    \    local i = 1\n    while true do\n        -- Get the next prime number starting\
    \ from i.\n        i = next_prime(i)\n        if i > upper_bound then\n      \
    \      -- We've found the largest prime factor.\n            return n\n      \
    \  elseif n % i == 0 then\n            -- n is divisible by i.\n            --\
    \ n = n / i.\n            n = n / i\n            -- i is the largest prime factor\
    \ of n, but the largest prime factor\n            -- of n / i could be larger.\
    \ We'll have to start the search over\n            -- again.\n            i =\
    \ 1\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5b19qq2u.lua:12:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmp5b19qq2u.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp5b19qq2u.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for i = 2, #primes do\n    if\
    \ n % primes[i] == 0 then\n      return primes[i]\n    end\n  end\n  return primes[#primes]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowr90rc2.lua:7:\
    \ attempt to get length of a nil value (global 'primes')\nstack traceback:\n\t\
    /tmp/tmpowr90rc2.lua:7: in local 'candidate'\n\t/tmp/tmpowr90rc2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\t-- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64b6pwdu.lua:13:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmp64b6pwdu.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal largest_prime = n\n\tlocal\
    \ counter = 2\n\twhile counter <= n do\n\t\tif n % counter == 0 then\n\t\t\tlargest_prime\
    \ = counter\n\t\t\tn = n / counter\n\t\tend\n\t\tcounter = counter + 1\n\tend\n\
    \treturn largest_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v3mfjqx.lua:23:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmp5v3mfjqx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p = 2\n\twhile p <= n do\n\
    \t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp = p + 1\n\t\tend\n\t\
    end\n\treturn p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            return largest_prime_factor(n / i)\n\
    \        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n \
    \   i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max = math.floor(math.sqrt(n))\n\
    \    for i = max, 2, -1 do\n        if n % i == 0 and is_prime(i) then\n     \
    \       return i\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgw3u7v3.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmppgw3u7v3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppgw3u7v3.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_factor = 1\n  local\
    \ current_factor = 2\n  while n > 1 do\n    while n % current_factor == 0 do\n\
    \      n = n / current_factor\n      largest_factor = current_factor\n    end\n\
    \    current_factor = current_factor + 1\n  end\n  return largest_factor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max_factor = 0\n    local\
    \ d = 2\n    while d <= n do\n        while n % d == 0 do\n            n = n /\
    \ d\n            max_factor = d\n        end\n        d = d + 1\n    end\n   \
    \ return max_factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = n\n    for i=3,\
    \ math.floor(math.sqrt(n)), 2 do\n        if n % i == 0 then\n            largest\
    \ = largest_prime_factor(n / i)\n            break\n        end\n    end\n   \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk1lyqao.lua:23:\
    \ expected: 11, actual: 22\nstack traceback:\n\t/tmp/tmpzk1lyqao.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i = 2, n-1 do\n        if\
    \ is_prime(i) and n % i == 0 then\n            return largest_prime_factor(n /\
    \ i)\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcw4komr5.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcw4komr5.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpcw4komr5.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- We will use a hash table for\
    \ the prime factors\n  local factors = {}\n  local current = n\n  -- The function\
    \ will stop when the current number is the prime factor\n  while not is_prime(current)\
    \ do\n    -- Find a prime number that is a factor of the current number\n    local\
    \ factor = next(prime_factors(current))\n    -- Update the current number by dividing\
    \ it by the prime factor\n    current = current / factor\n    -- Store the prime\
    \ factor\n    factors[factor] = true\n  end\n  -- Return the largest prime factor\n\
    \  return next(factors, current)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc8ua9se_.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpc8ua9se_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpc8ua9se_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_factor = 0\n \
    \   for i=1,n do\n        if n % i == 0 and is_prime(i) then\n            largest_factor\
    \ = i\n        end\n    end\n    return largest_factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfg8z2ypn.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpfg8z2ypn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfg8z2ypn.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime_factor =\
    \ 1\n    local factor = 2\n    while factor <= n do\n        if n % factor ==\
    \ 0 then\n            largest_prime_factor = factor\n            while n % factor\
    \ == 0 do\n                n = n / factor\n            end\n        end\n    \
    \    factor = factor + 1\n    end\n    return largest_prime_factor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- See if n is divisible by\
    \ 2.\n    if n % 2 == 0 then\n        return largest_prime_factor(n / 2)\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8os3q7ap.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while n > 1 do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal factors = {}\n\tfor i =\
    \ 2, math.floor(math.sqrt(n)) do\n\t\twhile n % i == 0 do\n\t\t\tn = n / i\n\t\
    \t\tfactors[#factors + 1] = i\n\t\tend\n\tend\n\tif n > 1 then\n\t\tfactors[#factors\
    \ + 1] = n\n\tend\n\treturn factors[#factors]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p, d = 2, n/2\n\tlocal pf\
    \ = 1\n\twhile p <= d do\n\t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\t\tpf =\
    \ p\n\t\t\td = n / 2\n\t\tend\n\t\tp = next_prime(p)\n\tend\n\treturn pf\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9pck52_r.lua:15:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmp9pck52_r.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9pck52_r.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while n % i ~=\
    \ 0 do\n    i = i + 1\n  end\n  if n == i then\n    return n\n  else\n    return\
    \ largest_prime_factor(n / i)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    if is_prime(n) then\n      \
    \  return n\n    end\n    local factor = nil\n    local root = math.floor(math.sqrt(n))\n\
    \    for i = 2, root do\n        if n % i == 0 then\n            factor = i\n\
    \            break\n        end\n    end\n    if factor then\n        return largest_prime_factor(n\
    \ // factor)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9k5i6v0.lua:7:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpw9k5i6v0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpw9k5i6v0.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tfor i=2,n do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn largest_prime_factor(n / i)\n\t\tend\n\tend\n\treturn n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sjuaroh.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp_sjuaroh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- First get the prime factors\
    \ of n\n  local prime_factors = prime_factors(n)\n  -- Return the last element\n\
    \  return prime_factors[#prime_factors]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpao0wo7rx.lua:8:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpao0wo7rx.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpao0wo7rx.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local divisor = 3\n    local\
    \ largest = nil\n    while n > 1 do\n        if n % divisor == 0 then\n      \
    \      largest = divisor\n            n = n / divisor\n        else\n        \
    \    divisor = divisor + 2\n        end\n    end\n    return largest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local max = 2\n  while n > max\
    \ do\n    if n % max == 0 then\n      n = n / max\n    else\n      max = max +\
    \ 1\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tfor i=math.floor(math.sqrt(n)),1,-1\
    \ do\n\t\tif n % i == 0 and is_prime(i) then\n\t\t\treturn i\n\t\tend\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxuv1ntnq.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpxuv1ntnq.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpxuv1ntnq.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = prime_factors(n)\n\
    \    return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnqegghkp.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpnqegghkp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnqegghkp.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\tlocal largest_factor\
    \ = 1\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\tlargest_factor\
    \ = i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn largest_factor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 0\n    while\
    \ n % 2 == 0 do\n        largest = 2\n        n = n / 2\n    end\n    local f\
    \ = 3\n    while f * f <= n do\n        if n % f == 0 then\n            largest\
    \ = f\n            n = n / f\n        else\n            f = f + 2\n        end\n\
    \    end\n    if n > largest then\n        largest = n\n    end\n    return largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal max = 1\n\tlocal i = 2\n\
    \twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tmax = i\n\t\t\twhile n % i ==\
    \ 0 do\n\t\t\t\tn = n / i\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    if n == 2 then\n        return\
    \ 2\n    end\n    for i = 3, n, 2 do\n        if n % i == 0 then\n           \
    \ local factor = n / i\n            if is_prime(factor) then\n               \
    \ return factor\n            end\n        end\n    end\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_xxbs3jt.lua:13:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_xxbs3jt.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_xxbs3jt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for i = n, 2, -1 do\n    if n\
    \ % i == 0 and is_prime(i) then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfxmwscu.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcfxmwscu.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpcfxmwscu.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local divisor = 2\n  while n >\
    \ 1 do\n    if n % divisor == 0 then\n      n = n / divisor\n    else\n      divisor\
    \ = divisor + 1\n    end\n  end\n  return divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- We start with the first prime,\
    \ 2.\n    local largest_prime_factor = 2\n    -- To find prime factors, we divide\
    \ n by our prime factor, as long as\n    -- the result is even.\n    while n %\
    \ largest_prime_factor == 0 do\n        n = n / largest_prime_factor\n    end\n\
    \    -- After we've divided out 2 as many times as possible, we can skip\n   \
    \ -- testing all even numbers as potential factors. Just look at the odds.\n \
    \   -- Note that we have to start with 3, as 2 was our last prime factor.\n  \
    \  for i = 3, math.sqrt(n), 2 do\n        -- If i divides n, then i is our largest\
    \ prime factor.\n        while n % i == 0 do\n            n = n / i\n        \
    \    largest_prime_factor = i\n        end\n    end\n    -- At this point, either\
    \ we've already found the largest prime factor\n    -- (and it's a prime, so n\
    \ = 1) or n is a prime larger than the\n    -- largest prime factor.\n    return\
    \ largest_prime_factor > n and largest_prime_factor or n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local max = n\n  local i = 2\n\
    \  local j = 0\n  while (i < n) do\n    if n % i == 0 then\n      n = n / i\n\
    \      if i > max then\n        max = i\n      end\n    else\n      i = i + 1\n\
    \    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3x_dann.lua:26:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmpc3x_dann.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\t-- These are the primes needed\
    \ to factorize n.\n\tlocal primes = primes_up_to(n)\n\t-- We can stop searching\
    \ once we've reached the square root of n.\n\tlocal m = math.floor(math.sqrt(n))\n\
    \t-- This will hold the largest prime factor found so far.\n\tlocal largest_factor\
    \ = 1\n\tfor _,p in ipairs(primes) do\n\t\tif n % p == 0 then\n\t\t\t-- Check\
    \ if the larger factor is prime.\n\t\t\tlocal f = n / p\n\t\t\tif is_prime(f)\
    \ then\n\t\t\t\tlargest_factor = f\n\t\t\telse\n\t\t\t\tlargest_factor = p\n\t\
    \t\tend\n\t\tend\n\t\tif p > m then\n\t\t\tbreak\n\t\tend\n\tend\n\treturn largest_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpja0lud0x.lua:8:\
    \ attempt to call a nil value (global 'primes_up_to')\nstack traceback:\n\t/tmp/tmpja0lud0x.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpja0lud0x.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 0\n  local factor\
    \ = 2\n  while factor <= n do\n    if n % factor == 0 then\n      largest = factor\n\
    \      n = n / factor\n    else\n      factor = factor + 1\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local n_new = n\n    local p\
    \ = 2\n    while n_new > 1 do\n        if n_new % p == 0 then\n            n_new\
    \ = n_new / p\n        else\n            p = p + 1\n        end\n    end\n   \
    \ return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local f = n\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            f = i\n            n = n / i\n\
    \            while n % i == 0 do\n                n = n / i\n            end\n\
    \        end\n    end\n    return f\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local ret = 1\n    local i =\
    \ 2\n    while i * i <= n do\n        if n % i == 0 then\n            ret = i\n\
    \            while n % i == 0 do\n                n = n / i\n            end\n\
    \        end\n        i = i + 1\n    end\n    if n > 1 then\n        ret = n\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local prime_factors = {}\n  local\
    \ divisor = 2\n  while n > 1 do\n    if n % divisor == 0 then\n      n = n / divisor\n\
    \      table.insert(prime_factors, divisor)\n    else\n      divisor = divisor\
    \ + 1\n    end\n  end\n  return prime_factors[#prime_factors]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  if n == 1 then return 1 end\n\
    \  for i = 2, n do\n    local factor, remainder = divmod(n, i)\n    if remainder\
    \ == 0 then\n      if is_prime(factor) then\n        return factor\n      else\n\
    \        return largest_prime_factor(factor)\n      end\n    end\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuoxjcu4g.lua:9:\
    \ attempt to call a nil value (global 'divmod')\nstack traceback:\n\t/tmp/tmpuoxjcu4g.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpuoxjcu4g.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for i = 2, n - 1 do\n    if n\
    \ % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local max = 0\n  local f = 2\n\
    \  while n ~= 1 do\n    while n % f == 0 do\n      n = n / f\n      max = f\n\
    \    end\n    f = f + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local divisor = 2\n  local max_divisor\
    \ = math.sqrt(n)\n  while n > 1 and divisor <= max_divisor do\n    if n % divisor\
    \ == 0 then\n      n = n / divisor\n      max_divisor = math.sqrt(n)\n    else\n\
    \      divisor = divisor + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  if is_prime(n) then\n    return\
    \ n\n  end\n  local factor = first_prime_factor(n)\n  return largest_prime_factor(n\
    \ / factor)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22exqrm0.lua:7:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp22exqrm0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp22exqrm0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while n > 1 do\n\
    \    if (n % i) == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local d = n - 1\n  while n % d\
    \ ~= 0 do\n    d = d - 1\n  end\n  local i = d - 1\n  while n % i ~= 0 do\n  \
    \  i = i - 1\n  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnl5z7094.lua:21:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpnl5z7094.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- Find the smallest odd prime\
    \ factor of n.\n  local primes = assert(primes_up_to(math.sqrt(n)))\n  for i =\
    \ #primes, 1, -1 do\n    local p = primes[i]\n    if n % p == 0 then\n      local\
    \ q = n / p\n      return math.max(p, largest_prime_factor(q))\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0tabij8z.lua:8:\
    \ attempt to call a nil value (global 'primes_up_to')\nstack traceback:\n\t/tmp/tmp0tabij8z.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp0tabij8z.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal primes = primes_upto(n)\n\
    \tlocal larget_prime = 0\n\tfor i, prime in ipairs(primes) do\n\t\tif n % prime\
    \ == 0 then\n\t\t\tlarget_prime = prime\n\t\tend\n\tend\n\treturn larget_prime\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9ivmcq4.lua:7:\
    \ attempt to call a nil value (global 'primes_upto')\nstack traceback:\n\t/tmp/tmpl9ivmcq4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpl9ivmcq4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = m, 2, -1 do\n    if n % i == 0 and is_prime(i) then\n      return i\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp087g8752.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp087g8752.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp087g8752.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i = 2, n - 1 do\n      \
    \  if n % i == 0 then\n            return largest_prime_factor(n / i)\n      \
    \  end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local f = 2\n  while f < n do\n\
    \    if n % f == 0 then\n      n = n / f\n    else\n      f = f + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local k = 2\n  local largest_prime\
    \ = nil\n  while k * k <= n do\n    if n % k == 0 then\n      n = n / k\n    \
    \  largest_prime = k\n    else\n      k = k + 1\n    end\n  end\n  return largest_prime\
    \ or n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvp1fqpi.lua:23:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpdvp1fqpi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  assert(n > 1, \"n must be > 1\"\
    )\n  local biggest = nil\n  local lf = 2\n  while (n > 1) do\n    if (n % lf ==\
    \ 0) then\n      biggest = lf\n      n = n / lf\n    else\n      lf = lf + 1\n\
    \    end\n  end\n  return biggest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local min_factor = smallest_prime_factor(n)\n\
    \  local n_divided = n / min_factor\n  if is_prime(n_divided) then\n    return\
    \ n_divided\n  else\n    return largest_prime_factor(n_divided)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cjlee8y.lua:7:\
    \ attempt to call a nil value (global 'smallest_prime_factor')\nstack traceback:\n\
    \t/tmp/tmp1cjlee8y.lua:7: in local 'candidate'\n\t/tmp/tmp1cjlee8y.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local divisor = 2\n    while\
    \ (divisor * divisor) <= n do\n        if n % divisor == 0 then\n            n\
    \ = n / divisor\n        else\n            divisor = divisor + 1\n        end\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    if n == 1 then\n        return\
    \ 1\n    end\n    local divisor = get_divisor(n)\n    return largest_prime_factor(n\
    \ / divisor)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppagsczg0.lua:10:\
    \ attempt to call a nil value (global 'get_divisor')\nstack traceback:\n\t/tmp/tmppagsczg0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppagsczg0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 1\n    local p2 =\
    \ 1\n    while n > 1 do\n        p = smallest_prime_factor(n)\n        if p >\
    \ p2 then\n            p2 = p\n        end\n        n = n // p\n    end\n    return\
    \ p2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa807yovh.lua:10:\
    \ attempt to call a nil value (global 'smallest_prime_factor')\nstack traceback:\n\
    \t/tmp/tmpa807yovh.lua:10: in local 'candidate'\n\t/tmp/tmpa807yovh.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    assert(n > 1, \"n must be greater\
    \ than 1\")\n    local prime_factor = math.floor(math.sqrt(n))\n    while prime_factor\
    \ > 1 do\n        if is_prime(prime_factor) and n % prime_factor == 0 then\n \
    \           return prime_factor\n        end\n        prime_factor = prime_factor\
    \ - 1\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5dr6zp7b.lua:10:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5dr6zp7b.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5dr6zp7b.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max = math.floor(math.sqrt(n))\n\
    \    for i = 2, max do\n        if is_prime(i) and n % i == 0 then\n         \
    \   return i\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpijsy0o33.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpijsy0o33.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpijsy0o33.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for i=2,n do\n    if n % i ==\
    \ 0 then\n      local f = n / i\n      if is_prime(f) then\n        return f\n\
    \      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr9t5zc95.lua:10:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpr9t5zc95.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpr9t5zc95.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 1\n  \
    \  for p in primes(n) do\n        if n % p == 0 then\n            largest_prime\
    \ = p\n        end\n    end\n    return largest_prime\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp250yfee.lua:8:\
    \ attempt to call a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmpp250yfee.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpp250yfee.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 0\n  local factor\
    \ = 3\n  while factor * factor <= n do\n    while n % factor == 0 do\n      n\
    \ = n / factor\n      largest = factor\n    end\n    factor = factor + 2\n  end\n\
    \  if n > 1 then\n    largest = n\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn4e3f54.lua:28:\
    \ expected: 11, actual: 22\nstack traceback:\n\t/tmp/tmpmn4e3f54.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local sieve = sieve_eratosthenes(n)\n\
    \    for i = #sieve, 1, -1 do\n        if n % sieve[i] == 0 then\n           \
    \ return sieve[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpskftzkiw.lua:7:\
    \ attempt to call a nil value (global 'sieve_eratosthenes')\nstack traceback:\n\
    \t/tmp/tmpskftzkiw.lua:7: in local 'candidate'\n\t/tmp/tmpskftzkiw.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local x = n\n  for d = 2, math.sqrt(n)\
    \ do\n    while x % d == 0 do\n      x = x / d\n    end\n  end\n  return x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfi1s0dp.lua:20:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpyfi1s0dp.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal factor = 1\n\tlocal p =\
    \ prime(2)\n\twhile p <= n do\n\t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\t\t\
    factor = p\n\t\tend\n\t\tp = prime(p + 1)\n\tend\n\treturn factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdegtc6fb.lua:8:\
    \ attempt to call a nil value (global 'prime')\nstack traceback:\n\t/tmp/tmpdegtc6fb.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpdegtc6fb.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max = 1\n    while n %\
    \ 2 == 0 do\n        max = 2\n        n = n / 2\n    end\n    for i = 3, math.sqrt(n),\
    \ 2 do\n        while n % i == 0 do\n            max = i\n            n = n /\
    \ i\n        end\n    end\n    if n > 2 then\n        max = n\n    end\n    return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    assert(n > 1)\n    -- assert(not\
    \ is_prime(n))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy2beoync.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local limit = math.sqrt(n)\n\
    \    for i = 3, limit, 2 do\n        if n % i == 0 then\n            local m =\
    \ n / i\n            if is_prime(m) then\n                return m\n         \
    \   end\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxms1agfb.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpxms1agfb.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxms1agfb.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local smallest_factor = smallest_factor(n)\n\
    \    if smallest_factor == 1 then\n        return n\n    else\n        return\
    \ largest_prime_factor(n // smallest_factor)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsoinjzbb.lua:7:\
    \ attempt to call a nil value (global 'smallest_factor')\nstack traceback:\n\t\
    /tmp/tmpsoinjzbb.lua:7: in local 'candidate'\n\t/tmp/tmpsoinjzbb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local max = n\n  while n % 2 ==\
    \ 0 do\n    max = 2\n    n = n / 2\n  end\n  local d = 3\n  while d * d <= n do\n\
    \    if n % d == 0 then\n      max = d\n      n = n / d\n    else\n      d = d\
    \ + 2\n    end\n  end\n  return math.max(max, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal limit = math.sqrt(n)\n\t\
    local factor = n\n\tfor f = 2, limit do\n\t\tif n % f == 0 then\n\t\t\tif is_prime(f)\
    \ then\n\t\t\t\tfactor = f\n\t\t\tend\n\t\tend\n\tend\n\treturn factor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubxvpajl.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpubxvpajl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpubxvpajl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal function __lpf(n, ps)\n\t\
    \tif n == 1 then\n\t\t\treturn nil\n\t\tend\n\t\tif ps.x == 1 then\n\t\t\treturn\
    \ n\n\t\tend\n\t\tif n % ps.x == 0 then\n\t\t\treturn __lpf(n / ps.x, ps)\n\t\t\
    end\n\t\treturn __lpf(n, ps.next)\n\tend\n\treturn __lpf(n, primes(math.floor(math.sqrt(n))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyf15yur8.lua:19:\
    \ attempt to call a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmpyf15yur8.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpyf15yur8.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- ensure n is odd\n  if n % 2\
    \ == 0 then\n    n = n / 2\n  end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 2\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal k = 2\n\tlocal m = n\n\t\
    while m > 1 do\n\t\tif is_prime(k) and m % k == 0 then\n\t\t\tm = m / k\n\t\t\t\
    k = 2\n\t\telse\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn k\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0y48jwai.lua:10:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp0y48jwai.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp0y48jwai.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local m = n\n  local factor =\
    \ 1\n  local i = 2\n  while i*i <= m do\n    if m % i == 0 then\n      factor\
    \ = i\n      m = m/i\n    else\n      i = i + 1\n    end\n  end\n  if m > 1 then\
    \ factor = m end\n  return factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local max_factor = 1\n  local\
    \ factor = 2\n  while n > 1 do\n    while n % factor == 0 do\n      n = n / factor\n\
    \      max_factor = factor\n    end\n    factor = factor + 1\n  end\n  return\
    \ max_factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  if n < 2 then return nil end\n\
    \  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      local factor = n\
    \ / i\n      return math.max(largest_prime_factor(factor), largest_prime_factor(i))\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = get_factors(n)\n\
    \  local max = 0\n  for i = 1, #factors do\n    if max < factors[i] then\n   \
    \   max = factors[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp06bp5knb.lua:7:\
    \ attempt to call a nil value (global 'get_factors')\nstack traceback:\n\t/tmp/tmp06bp5knb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp06bp5knb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, n - 1 do\n        if n % i == 0 and is_prime(i) then\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkfg4e1hq.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkfg4e1hq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkfg4e1hq.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local divisor = 2\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4q_k2com.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local prime_factors = prime_factors(n)\n\
    \    local largest_prime_factor = prime_factors[#prime_factors]\n    return largest_prime_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2on17bdh.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp2on17bdh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2on17bdh.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  local m =\
    \ n\n  while m > 1 do\n    if m % factor == 0 then\n      m = m / factor\n   \
    \ else\n      factor = factor + 1\n    end\n  end\n  return factor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- TODO: put your code here\n\
    \  for i=2, n do\n    if is_prime(i) and n % i == 0 then\n      n = n / i\n  \
    \  end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqnmtum13.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpqnmtum13.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqnmtum13.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tassert(n > 1, \"expected n > 1\"\
    )\n\t-- starting from 2 and incrementing by 1, divide by n until n is 1\n\t--\
    \ this gives us the prime factors of n\n\tlocal p = 2\n\twhile p <= n do\n\t\t\
    if n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp = p + 1\n\t\tend\n\tend\n\
    \treturn p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local lpf = 1\n  local f = 2\n\
    \  while f * f <= n do\n    if n % f == 0 then\n      lpf = f\n      while n %\
    \ f == 0 do\n        n = n / f\n      end\n    end\n    f = f + 1\n  end\n  if\
    \ n > 1 then\n    lpf = n\n  end\n  return lpf\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i=primes.sieve(n-1),2,-1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1a_1je4_.lua:7:\
    \ attempt to index a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmp1a_1je4_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1a_1je4_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- All primes larger than 3 have\
    \ the form 6k+1 or 6k-1.\n  local function find_divisor(n, k)\n    local f1 =\
    \ 6*k - 1\n    local f2 = 6*k + 1\n    local r1 = math.mod(n, f1)\n    local r2\
    \ = math.mod(n, f2)\n    if r1 == 0 then\n      return f1\n    elseif r2 == 0\
    \ then\n      return f2\n    else\n      return nil\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpan8emvbd.lua:32: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local biggest_prime = 0\n  for\
    \ i = 2, math.floor(math.sqrt(n)) do\n    if n % i == 0 then\n      local is_prime\
    \ = true\n      for j = 2, math.floor(math.sqrt(i)) do\n        if i % j == 0\
    \ then\n          is_prime = false\n          break\n        end\n      end\n\
    \      if is_prime then\n        biggest_prime = i\n      end\n    end\n  end\n\
    \  return biggest_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapcd36bg.lua:28:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpapcd36bg.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return largest_prime_factor(n //\
    \ i)\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for p in primes() do\n     \
    \   if n % p == 0 then\n            return n / p\n        end\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppip50d02.lua:7:\
    \ attempt to call a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmppip50d02.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppip50d02.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = primes.prime_factors(n)\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxr7zniu.lua:7:\
    \ attempt to index a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmptxr7zniu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmptxr7zniu.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  local largest =\
    \ 1\n  while i * i <= n do\n    while n % i == 0 do\n      largest = i\n     \
    \ n = n / i\n    end\n    i = i + 1\n  end\n  if n > 1 then\n    largest = n\n\
    \  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- Find factors of n\n    local\
    \ factors = factors(n)\n    -- Remove all non-prime factors\n    local prime_factors\
    \ = table.filter(factors, is_prime)\n    -- Return the largest prime factor\n\
    \    return math.max(table.unpack(prime_factors))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1o7j_mz.lua:8:\
    \ attempt to call a nil value (global 'factors')\nstack traceback:\n\t/tmp/tmpt1o7j_mz.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpt1o7j_mz.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local last_factor = 2\n  while\
    \ n > last_factor do\n    if n % last_factor == 0 then\n      n = n / last_factor\n\
    \    else\n      last_factor = last_factor + 1\n    end\n  end\n  return last_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- TODO:\n  local divisor = 2\n\
    \  while divisor <= n do\n    if n % divisor == 0 then\n      n = n/divisor\n\
    \    else\n      divisor = divisor + 1\n    end\n  end\n  return divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local k = 1\n  local largest_prime\
    \ = 1\n  while k * k <= n do\n    while n % k == 0 do\n      largest_prime = k\n\
    \      n = n / k\n    end\n    k = k + 1\n  end\n  return largest_prime\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local x = 3\n  while x <= math.sqrt(n)\
    \ do\n    if n % x == 0 then\n      n = n / x\n    else\n      x = x + 2\n   \
    \ end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_oif9s4f.lua:24:\
    \ expected: 11, actual: 22\nstack traceback:\n\t/tmp/tmp_oif9s4f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while n > 1\
    \ do\n        if n % i == 0 then\n            n = n / i\n        else\n      \
    \      i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- If n is divisible by 2, then\
    \ we can divide it out and recurse on it.\n    if n % 2 == 0 then\n        return\
    \ largest_prime_factor(n/2)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy5aoc0ck.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local f = 2\n  while n % f ~=\
    \ 0 do\n    f = f + 1\n  end\n  local d = n / f\n  return d == 1 and f or largest_prime_factor(d)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local f = primes()\n    local\
    \ p\n    while true do\n        p = f()\n        if p * p > n then\n         \
    \   return n\n        end\n        while n % p == 0 do\n            n = n / p\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmparqthsgo.lua:7:\
    \ attempt to call a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmparqthsgo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmparqthsgo.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- Since n is not a prime, we\
    \ can divide n by any other prime number.\n    -- Find the largest prime number\
    \ smaller than n, then we can get the\n    -- largest prime factor of n.\n   \
    \ for i = n - 1, 1, -1 do\n        if is_prime(i) then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi0dw4hbl.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpi0dw4hbl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpi0dw4hbl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = prime_factors(n)\n\
    \    return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu84wz47n.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpu84wz47n.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu84wz47n.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- Insert implementation here.\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbijm4hxt.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpbijm4hxt.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for i = math.floor(math.sqrt(n)),\
    \ 1, -1 do\n    if n % i == 0 and is_prime(i) then\n      return i\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5xjiyh6.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmps5xjiyh6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmps5xjiyh6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        while n % i == 0 do\n            n = n / i\n        end\n    end\n\
    \    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb6q6hfq.lua:19:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmphb6q6hfq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for i = #fSieve(n, 2), 1, -1 do\n\
    \    if n % fSieve(n, i) == 0 then\n      return fSieve(n, i)\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsmqd8arl.lua:7:\
    \ attempt to call a nil value (global 'fSieve')\nstack traceback:\n\t/tmp/tmpsmqd8arl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsmqd8arl.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime_factor =\
    \ 1\n    while n % 2 == 0 do\n        largest_prime_factor = 2\n        n = n\
    \ / 2\n    end\n    for i = 3, math.sqrt(n), 2 do\n        while n % i == 0 do\n\
    \            largest_prime_factor = i\n            n = n / i\n        end\n  \
    \  end\n    if n > 2 then\n        largest_prime_factor = n\n    end\n    return\
    \ largest_prime_factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  if (n == 1) then\n    return 1\n\
    \  end\n  local largest = 1\n  for i = 1, n do\n    if (n % i == 0) then\n   \
    \   if (largest_prime_factor(i) == 1) then\n        largest = i\n      end\n \
    \   end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp33jtp81e.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp33jtp81e.lua:13: in upvalue 'largest_prime_factor'\n\
    \t/tmp/tmp33jtp81e.lua:13: in upvalue 'largest_prime_factor'\n\t/tmp/tmp33jtp81e.lua:13:\
    \ in upvalue 'largest_prime_factor'\n\t/tmp/tmp33jtp81e.lua:13: in upvalue 'largest_prime_factor'\n\
    \t/tmp/tmp33jtp81e.lua:13: in upvalue 'largest_prime_factor'\n\t/tmp/tmp33jtp81e.lua:13:\
    \ in upvalue 'largest_prime_factor'\n\t/tmp/tmp33jtp81e.lua:13: in upvalue 'largest_prime_factor'\n\
    \t/tmp/tmp33jtp81e.lua:13: in upvalue 'largest_prime_factor'\n\t/tmp/tmp33jtp81e.lua:13:\
    \ in upvalue 'largest_prime_factor'\n\t...\n\t/tmp/tmp33jtp81e.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp33jtp81e.lua:24: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.080 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local f = 2\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkb1faqd8.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tassert(n > 1, \"n must be greater\
    \ than 1\")\n\tassert(not is_prime(n), \"n must not be a prime\")\n\tlocal result\
    \ = 2\n\twhile n % result == 0 do\n\t\tn = n / result\n\tend\n\tfor i = 3, n/2,\
    \ 2 do\n\t\twhile n % i == 0 do\n\t\t\tn = n / i\n\t\t\tresult = i\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5zo48hjn.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5zo48hjn.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5zo48hjn.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- Find all prime factors of n.\n\
    \  local factors = {}\n  while n > 1 do\n    local new_n = n\n    -- Find the\
    \ smallest prime factor of n.\n    for k = 2, math.sqrt(n) do\n      if n % k\
    \ == 0 then\n        new_n = n / k\n        table.insert(factors, k)\n       \
    \ break\n      end\n    end\n    -- If no prime factor was found, then n is prime\
    \ and we're done.\n    if new_n == n then\n      table.insert(factors, n)\n  \
    \    break\n    end\n    n = new_n\n  end\n  -- Return the largest prime factor.\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp975cufn4.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp975cufn4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp975cufn4.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tif n % 2 == 0 then\n\t\treturn\
    \ largest_prime_factor(n / 2)\n\tend\n\tfor i = 3, n - 1, 2 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn largest_prime_factor(n / i)\n\t\tend\n\tend\n\treturn n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i = primes_up_to(n), 2,\
    \ -1 do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaok6x2iv.lua:7:\
    \ attempt to call a nil value (global 'primes_up_to')\nstack traceback:\n\t/tmp/tmpaok6x2iv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaok6x2iv.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  local last_factor\
    \ = 1\n  while n > 1 do\n    if n % factor == 0 then\n      last_factor = factor\n\
    \      n = n / factor\n      while n % factor == 0 do\n        n = n / factor\n\
    \      end\n    end\n    factor = factor + 1\n  end\n  return last_factor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  assert(n > 1, \"n must be greater\
    \ than 1\")\n  local prime = 2\n  local factor = 0\n  while n > 1 do\n    if math.fmod(n,\
    \ prime) == 0 then\n      n = n / prime\n      factor = prime\n    else\n    \
    \  prime = prime + 1\n    end\n  end\n  return factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = nil\n  local prime\
    \ = 2\n  while n > 1 do\n    while (n % prime) == 0 do\n      n = n / prime\n\
    \      largest = prime\n    end\n    prime = prime + 1\n  end\n  return largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  repeat\n    if\
    \ is_prime(p) and n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n\
    \    end\n  until n == 1\n  return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpicfinn8s.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpicfinn8s.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpicfinn8s.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tif is_prime(n) then\n\t\treturn\
    \ n\n\tend\n\tfor i = 2, n-1 do\n\t\tif n % i == 0 and is_prime(i) then\n\t\t\t\
    return largest_prime_factor(n/i)\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd9d_x2zh.lua:7:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpd9d_x2zh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd9d_x2zh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal d = 2\n\twhile d * d <=\
    \ n do\n\t\tif n % d == 0 then\n\t\t\tn = n / d\n\t\telse\n\t\t\td = d + 1\n\t\
    \tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p_factors = prime_factors(n)\n\
    \tlocal max = p_factors[1]\n\tfor i = 2, #p_factors do\n\t\tif p_factors[i] >\
    \ max then\n\t\t\tmax = p_factors[i]\n\t\tend\n\tend\n\treturn max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45xkkyva.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp45xkkyva.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp45xkkyva.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local n = n\n    local i = 2\n\
    \    while n ~= 1 do\n        if n % i == 0 then\n            n = n / i\n    \
    \    else\n            i = i + 1\n        end\n    end\n    return i\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 0\n  \
    \  for d = 2, math.sqrt(n) do\n        if n % d == 0 then\n            n = n /\
    \ d\n            if is_prime(d) then\n                largest_prime = d\n    \
    \        end\n        end\n    end\n    return largest_prime\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkhc_vbea.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkhc_vbea.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpkhc_vbea.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal limit = math.floor(math.sqrt(n))\n\
    \tfor k = limit, 2, -1 do\n\t\tif n % k == 0 and is_prime(k) then\n\t\t\treturn\
    \ k\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu_ain0vr.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpu_ain0vr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu_ain0vr.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 0\n  \
    \  local i = 2\n    local max = math.sqrt(n)\n    while i <= max do\n        if\
    \ n % i == 0 then\n            largest_prime = i\n            n = n / i\n    \
    \        max = math.sqrt(n)\n        else\n            i = i + 1\n        end\n\
    \    end\n    if n > largest_prime then\n        largest_prime = n\n    end\n\
    \    return largest_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal largest_pf = 2\n\tlocal\
    \ d = n\n\tlocal p = 2\n\twhile d > 1 do\n\t\tif d % p == 0 then\n\t\t\td = d\
    \ / p\n\t\t\tlargest_pf = p\n\t\telse\n\t\t\tp = next_prime(p)\n\t\tend\n\tend\n\
    \treturn largest_pf\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4lm3jw9.lua:15:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpk4lm3jw9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpk4lm3jw9.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local function _larges\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv97g00bf.lua:8: '(' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local f = next(factor(n))\n  while\
    \ n ~= f do\n    n = n // f\n    f = next(factor(n))\n  end\n  return f\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqqstrlp.lua:7:\
    \ attempt to call a nil value (global 'factor')\nstack traceback:\n\t/tmp/tmpqqqstrlp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqqqstrlp.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local f = 2\n  while f * f <=\
    \ n do\n    if n % f == 0 then\n      n = n / f\n    else\n      f = f + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local known_primes = get_primes_less_than(2*n)\n\
    \    for _, prime in ipairs(known_primes) do\n        if n % prime == 0 then\n\
    \            return prime\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1re1e1nn.lua:7:\
    \ attempt to call a nil value (global 'get_primes_less_than')\nstack traceback:\n\
    \t/tmp/tmp1re1e1nn.lua:7: in local 'candidate'\n\t/tmp/tmp1re1e1nn.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local m = math.floor(math.sqrt(n))\n\
    \  local ret = 1\n  for p in prime_generator(m) do\n    if n % p == 0 then\n \
    \     ret = p\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpom2zae24.lua:9:\
    \ attempt to call a nil value (global 'prime_generator')\nstack traceback:\n\t\
    /tmp/tmpom2zae24.lua:9: in local 'candidate'\n\t/tmp/tmpom2zae24.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tfor i=2,n do\n\t\tif(is_prime(i)\
    \ and (n % i == 0)) then\n\t\t\treturn i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgqp904mf.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpgqp904mf.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpgqp904mf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    if is_prime(n) then\n      \
    \  return n\n    end\n    for i=2,n/2 do\n        if n % i == 0 then\n       \
    \     return largest_prime_factor(n/i)\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuec0e7xj.lua:7:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpuec0e7xj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpuec0e7xj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i * i <=\
    \ n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\
    \tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = factor(n)\n  return\
    \ factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnj_e6kgn.lua:7:\
    \ attempt to call a nil value (global 'factor')\nstack traceback:\n\t/tmp/tmpnj_e6kgn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnj_e6kgn.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for i=math.floor(math.sqrt(n)),2,-1\
    \ do\n    if n % i == 0 and is_prime(i) then\n      return i\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgslpvp81.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpgslpvp81.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpgslpvp81.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tif n % 2 == 0 then\n\t\treturn\
    \ largest_prime_factor(n / 2)\n\tend\n\tfor i = 3, math.sqrt(n), 2 do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn largest_prime_factor(n / i)\n\t\tend\n\tend\n\t\
    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal max_prime_factor = 2\n\t\
    local divisor = 2\n\twhile divisor^2 <= n do\n\t\tif n % divisor == 0 then\n\t\
    \t\tn = n / divisor\n\t\t\tmax_prime_factor = math.max(max_prime_factor, divisor)\n\
    \t\telse\n\t\t\tdivisor = divisor + 1\n\t\tend\n\tend\n\treturn math.max(max_prime_factor,\
    \ n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = factors(n)[#factors(n)]\n\
    \  if p == nil then return nil end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_qvomf4.lua:7:\
    \ attempt to call a nil value (global 'factors')\nstack traceback:\n\t/tmp/tmpt_qvomf4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt_qvomf4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      while n % i == 0 do\n        n = n / i\n\
    \      end\n    end\n    i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i88vnjg.lua:23:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp9i88vnjg.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- Start at 2.  If n is divisible\
    \ by 2, divide n by 2.\n    -- Then, move on to 3, 4, 5, etc.\n    -- Once the\
    \ current factor is larger than sqrt(n), we're done.\n    --\n    -- I.e.,\n \
    \   -- 1. factor = 2\n    -- 2. while factor <= sqrt(n)\n    --    1. while n\
    \ is divisible by factor, divide n by factor\n    --    2. factor = factor + 1\n\
    \    -- 3. return n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptcy6btup.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    -- print(\"#\", n)\n    -- for\
    \ i = 2, math.floor(math.sqrt(n)) do\n    for i = 2, n do\n        -- print(\"\
    ##\", i)\n        if is_prime(i) and n % i == 0 then\n            local j = n\
    \ / i\n            -- print(\"##\", j)\n            return largest_prime_factor(j)\n\
    \        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgoyovj6.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvgoyovj6.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpvgoyovj6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while n > 1 do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  assert(n > 1)\n  local i = n\n\
    \  while i > 1 do\n    if n % i == 0 and is_prime(i) then\n      return i\n  \
    \  end\n    i = i - 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3w531swp.lua:10:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp3w531swp.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3w531swp.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local x = 2\n    while n ~=\
    \ x do\n        if n % x == 0 then\n            n = n / x\n        else\n    \
    \        x = x + 1\n        end\n    end\n    return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local f = 2\n    while f < n\
    \ do\n        if n % f == 0 then\n            n = n / f\n        else\n      \
    \      f = f + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- FIXME: Most likely not the\
    \ most efficient algorithm...\n  local p = 2\n  local max = n\n  while p < max\
    \ do\n    if (n % p) == 0 then\n      max = n / p\n    end\n    p = next_prime(p)\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvytw5uqr.lua:14:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpvytw5uqr.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpvytw5uqr.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- Do it here.\n  --\n  -- \uD398\
    \uB974\uB9C8\uC758 \uC18C\uC815\uB9AC\uC5D0 \uC758\uD574, n\uC774 \uC18C\uC218\
    \uAC00 \uC544\uB2CC \uC815\uC218\uC77C \uACBD\uC6B0 n\uC744 p^a * q^b * r^c *\
    \ ... \uB85C \uC18C\uD574\uC11C \uD45C\uD604\uD560 \uC218 \uC788\uB2E4.\n  --\
    \ \uC774 \uB54C, p\uB294 \uC815\uC218\uC758 \uC18C\uC778\uC218 \uC911 \uAC00\uC7A5\
    \ \uD070 \uC218\uC774\uB2E4.\n  -- \uC989, \uC774 \uBB38\uC81C\uB294 n\uC744 \uC18C\
    \uC778\uC218\uB85C \uB098\uB204\uC5B4 \uAC00\uBA74\uC11C \uC18C\uC778\uC218\uC758\
    \ \uAC00\uC7A5 \uD070 \uC218\uB97C \uAD6C\uD558\uB294 \uAC83\uC774\uB2E4.\n  --\
    \ \uC774 \uB54C, n\uC744 \uD640\uC218\uB85C \uB098\uB220 \uB5A8\uC5B4\uC9C0\uC9C0\
    \ \uC54A\uB294\uB2E4\uBA74, n\uC740 2\uC758 \uC81C\uACF1\uC774\uB2E4.\n  -- \uC774\
    \ \uB54C, \uC774\uB97C \uACC4\uC18D \uB098\uB220 \uB5A8\uC5B4\uC9C0\uC9C0 \uC54A\
    \uC744 \uB54C\uAE4C\uC9C0 \uB098\uB204\uBA74 \uB41C\uB2E4.\n  --\n  -- \uADF8\
    \ \uB2E4\uC74C, 2\uB97C \uBE80 \uB098\uBA38\uC9C0 \uC218\uB97C 3\uC73C\uB85C \uB098\
    \uB220 \uB5A8\uC5B4\uC9C0\uC9C0 \uC54A\uB294\uB2E4\uBA74, \uC774 \uC218\uB294\
    \ 3\uC758 \uC81C\uACF1\uC774\uB2E4.\n  --\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxeuf520v.lua:28: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local prime_factors = {}\n  local\
    \ n2 = n\n  local d = 2\n  while n2 > 1 do\n    if n2 % d == 0 then\n      table.insert(prime_factors,\
    \ d)\n      n2 = n2 / d\n    else\n      d = d + 1\n    end\n  end\n  return prime_factors[#prime_factors]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- This has to be the slowest\
    \ algorithm, but I'm short on time.\n  local largest = 1\n  local i = 2\n  while\
    \ n > 1 do\n    if n % i == 0 then\n      n = n / i\n      largest = i\n    else\n\
    \      i = i + 1\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    for i = math.floor(math.sqrt(n)),\
    \ 2, -1 do\n        if n % i == 0 and is_prime(i) then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzdsz9t8g.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpzdsz9t8g.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzdsz9t8g.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p = 2\n\twhile p <= math.sqrt(n)\
    \ do\n\t\tif is_prime(p) and n % p == 0 then\n\t\t\treturn p\n\t\tend\n\t\tp =\
    \ p + 1\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi5_zvj5.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpyi5_zvj5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyi5_zvj5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- Yes, there are more efficent\
    \ ways to do this.\n  local factors = prime_factors(n)\n  return factors[#factors]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptk_tfcq_.lua:8:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmptk_tfcq_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmptk_tfcq_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local root = math.sqrt(n)\n\
    \    local quotient = n\n    local factor = 2\n    while quotient % factor ~=\
    \ 0 do\n        factor = factor + 1\n    end\n    if factor > root then\n    \
    \    return n\n    else\n        return largest_prime_factor(quotient / factor)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local r = math.floor(math.sqrt(n))\n\
    \  local i = r - 1\n  while i > 1 do\n    if n % i == 0 and is_prime(i) then\n\
    \      return i\n    end\n    i = i - 1\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kozipt8.lua:21:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmp0kozipt8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if math.fmod(n, i) == 0 then\n      -- n is divisible by i, so i must be\
    \ a factor of n.\n      -- Divide n by i and return i if i is prime.\n      n\
    \ = n / i\n      if is_prime(i) then\n        return i\n      end\n    else\n\
    \      -- Increment i if i is not a factor of n.\n      i = i + 1\n    end\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp74fh9t7_.lua:13:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp74fh9t7_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp74fh9t7_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local t = {}\n    local max_factor\
    \ = 1\n    while not is_prime(n) do\n        local f = smallest_factor(n)\n  \
    \      -- print(n, f)\n        table.insert(t, f)\n        max_factor = math.max(max_factor,\
    \ f)\n        n = n // f\n    end\n    -- print(n)\n    return math.max(max_factor,\
    \ n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5xl33r6c.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5xl33r6c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5xl33r6c.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while (i <= math.sqrt(n))\
    \ do\n    if n % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n\
    \    i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal primes = prime_factor(n)\n\
    \treturn primes[#primes]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpll4u9s9i.lua:7:\
    \ attempt to call a nil value (global 'prime_factor')\nstack traceback:\n\t/tmp/tmpll4u9s9i.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpll4u9s9i.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal largest = 0\n\t-- Check\
    \ all the numbers that are less than or equal to the square root of n.\n\tfor\
    \ i = 2, math.sqrt(n) do\n\t\t-- If i is a prime factor of n.\n\t\tif (n % i ==\
    \ 0) and is_prime(i) then\n\t\t\tlargest = i\n\t\tend\n\tend\n\t-- Return the\
    \ largest prime factor.\n\treturn largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__vbvcp4.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp__vbvcp4.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp__vbvcp4.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = primes:first_ge(math.sqrt(n))\n\
    \  while p and n % p ~= 0 do\n    p = primes:next(p)\n  end\n  return p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0e088lw.lua:7:\
    \ attempt to index a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmpk0e088lw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpk0e088lw.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w67fuvr.lua:13:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmp5w67fuvr.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p, fac = n, 2\n\twhile fac\
    \ <= p do\n\t\tif p % fac == 0 then\n\t\t\tp = p / fac\n\t\telse\n\t\t\tfac =\
    \ fac + 1\n\t\tend\n\tend\n\treturn p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhij1r7v.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpbhij1r7v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprkm8jn_m.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmprkm8jn_m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprkm8jn_m.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  local last_factor\
    \ = 1\n  while n > 1 do\n    if n % factor == 0 then\n      last_factor = factor\n\
    \      n = n / factor\n      while n % factor == 0 do\n        n = n / factor\n\
    \      end\n    end\n    factor = factor + 1\n  end\n  return last_factor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      return largest_prime_factor(n/i)\n    end\n   \
    \ i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while n > 1\
    \ do\n        if n % i == 0 then\n            n = n / i\n        else\n      \
    \      i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    if n % 2 == 0 then\n       \
    \ return largest_prime_factor(n / 2)\n    end\n    for i = 3, math.floor(math.sqrt(n)),\
    \ 2 do\n        if n % i == 0 then\n            return largest_prime_factor(n\
    \ / i)\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- works for the cases tested,\
    \ but there is a better solution\n  for d = n - 1, 2, -1 do\n    if n % d == 0\
    \ and is_prime(d) then\n      return d\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp20sth29j.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp20sth29j.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp20sth29j.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local d = 2\n  local largest =\
    \ 1\n  while d <= n do\n    if n % d == 0 then\n      n = n / d\n      largest\
    \ = d\n    else\n      d = d + 1\n    end\n  end\n  return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while n % p\
    \ == 0 do\n        n = n / p\n    end\n    p = 3\n    while n > 1 do\n       \
    \ while n % p == 0 do\n            n = n / p\n        end\n        p = p + 2\n\
    \    end\n    return p - 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  -- TODO: Implement solution\n\
    \  local max = 0\n  for i = 2, n do\n    if (n % i == 0) then\n      max = math.max(max,largest_prime_factor(n\
    \ / i))\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dwz77pj.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp9dwz77pj.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i < n\
    \ do\n        if math.fmod(n, i) == 0 then\n            return largest_prime_factor(n\
    \ / i)\n        end\n        i = i + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for i = math.floor(math.sqrt(n)),\
    \ 2, -1 do\n    if n % i == 0 and is_prime(i) then\n      return i\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9awz6vg9.lua:8:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9awz6vg9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp9awz6vg9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max_prime_factor = 1\n\
    \    local candidate = 2\n    while candidate * candidate <= n do\n        while\
    \ n % candidate == 0 do\n            max_prime_factor = candidate\n          \
    \  n = n / candidate\n        end\n        candidate = candidate + 1\n    end\n\
    \    if n > 1 then\n        max_prime_factor = n\n    end\n    return max_prime_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal largest = 1\n\tlocal i =\
    \ 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\tlargest\
    \ = i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local primes = {1}\n    local\
    \ function sieve(n)\n        local primes = {}\n        local visited = {}\n \
    \       for i = 2, n do\n            if not visited[i] then\n                primes[#primes\
    \ + 1] = i\n                for j = i + i, n, i do\n                    visited[j]\
    \ = true\n                end\n            end\n        end\n        return primes\n\
    \    end\n    local function largest_prime_factor(n)\n        local largest =\
    \ 1\n        local index = 1\n        while index <= #primes and primes[index]\
    \ * primes[index] <= n do\n            local prime = primes[index]\n         \
    \   while n % prime == 0 do\n                largest = prime\n               \
    \ n = n / prime\n            end\n            index = index + 1\n        end\n\
    \        if n > 1 then\n            largest = n\n        end\n        return largest\n\
    \    end\n    primes = sieve(math.sqrt(n))\n    return largest_prime_factor(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local max_prime = -1\n    while\
    \ n % 2 == 0 do\n        max_prime = 2\n        n = n / 2\n    end\n    -- n is\
    \ odd at this point\n    for i = 3, math.sqrt(n), 2 do\n        while n % i ==\
    \ 0 do\n            max_prime = i\n            n = n / i\n        end\n    end\n\
    \    if n > 2 then\n        max_prime = n\n    end\n    return max_prime\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local function helper(n, k)\n\
    \    if n == k then\n      return n\n    elseif n % k == 0 then\n      return\
    \ helper(n / k, k)\n    else\n      return helper(n, k + 1)\n    end\n  end\n\
    \  return helper(n, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal factors = {}\n\trepeat\n\
    \t\tlocal factor = smallest_prime_factor(n)\n\t\tif not factor then break end\n\
    \t\tt_insert(factors, factor)\n\t\tn = n // factor\n\tuntil n == 1\n\treturn factors[#factors]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqr2hu89.lua:9:\
    \ attempt to call a nil value (global 'smallest_prime_factor')\nstack traceback:\n\
    \t/tmp/tmpaqr2hu89.lua:9: in local 'candidate'\n\t/tmp/tmpaqr2hu89.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p = n\n\tlocal i = 2\n\t\
    while i * i <= p do\n\t\tif p % i == 0 then\n\t\t\tp = p / i\n\t\telse\n\t\t\t\
    i = i + 1\n\t\tend\n\tend\n\treturn p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local fact = small_prime_factors(n)\n\
    \    return fact[#fact]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpim1srtgd.lua:7:\
    \ attempt to call a nil value (global 'small_prime_factors')\nstack traceback:\n\
    \t/tmp/tmpim1srtgd.lua:7: in local 'candidate'\n\t/tmp/tmpim1srtgd.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    return largest_prime_factor_aux(n,\
    \ primes_lte(math.floor(math.sqrt(n))))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0lgalgf1.lua:7:\
    \ attempt to call a nil value (global 'primes_lte')\nstack traceback:\n\t/tmp/tmp0lgalgf1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0lgalgf1.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  for p in primes() do\n    if n\
    \ % p == 0 then\n      --\n      -- a = b * c = (b1 * b2 * b3 * ...) * (c1 * c2\
    \ * c3 * ...)\n      -- = b1 * b2 * b3 * ... * c1 * c2 * c3 * ...\n      --\n\
    \      -- a / b1 = b2 * b3 * ... * c1 * c2 * c3 * ...\n      -- a / b2 = b1 *\
    \ b3 * ... * c1 * c2 * c3 * ...\n      -- a / b3 = b1 * b2 * ... * c1 * c2 * c3\
    \ * ...\n      -- ...\n      --\n      -- So a / p = b1 * b2 * b3 * ... * c1 *\
    \ c2 * c3 * ...\n      -- a / p < b1 * b2 * b3 * ... * c1 * c2 * c3 * ...\n  \
    \    --\n      -- So if a / p == b1 * b2 * b3 * ... * c1 * c2 * c3 * ..., then\n\
    \      -- a / p must be a prime.\n      --\n      return n / p\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpux8djl7a.lua:7:\
    \ attempt to call a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmpux8djl7a.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpux8djl7a.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p = 2\n\twhile p <= math.sqrt(n)\
    \ do\n\t\tif n % p == 0 then\n\t\t\treturn largest_prime_factor(n / p)\n\t\tend\n\
    \t\tp = p + 1\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
