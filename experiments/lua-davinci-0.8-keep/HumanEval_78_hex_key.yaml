name: HumanEval_78_hex_key
language: lua
prompt: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n-- digits that are primes\
  \ (prime number, or a prime, is a natural number \n-- greater than 1 that is not\
  \ a product of two smaller natural numbers).\n-- Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n-- So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may assume the input is\
  \ always correct or empty string, \n-- and symbols A,B,C,D,E,F are always uppercase.\n\
  -- Examples:\n-- For num = \"AB\" the output should be 1.\n-- For num = \"1077E\"\
  \ the output should be 2.\n-- For num = \"ABED1A33\" the output should be 4.\n--\
  \ For num = \"123456789ABCDEF0\" the output should be 6.\n-- For num = \"2020\"\
  \ the output should be 2.\nlocal function hex_key(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
  \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
  \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
  \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
  \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local hex_key = {\n    [\"0\"] = 1, [\"1\"] = 1, [\"2\"] = 1, [\"\
    3\"] = 1, [\"4\"] = 1, [\"5\"] = 1, [\"6\"] = 1,\n    [\"7\"] = 1, [\"8\"] = 1,\
    \ [\"9\"] = 1, [\"A\"] = 1, [\"B\"] = 1, [\"C\"] = 1, [\"D\"] = 1,\n    [\"E\"\
    ] = 1, [\"F\"] = 1\n  }\n  for i = 1, #num do\n    if hex_key[num:sub(i, i)] ==\
    \ nil then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ dict = {[\"2\"] = true, [\"3\"] = true, [\"5\"] = true, \n  [\"7\"] = true,\
    \ [\"B\"] = true, [\"D\"] = true}\n  local c = 0\n  for i = 1, #num do\n    if\
    \ dict[num:sub(i,i)] then c = c + 1 end\n  end\n  return c\nend", "\tlocal hex_decimal\
    \ = {\n\t\t[\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4, [\"\
    5\"] = 5,\n\t\t[\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9, [\"A\"] = 10,\
    \ [\"B\"] = 11,\n\t\t[\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15\n\t\
    }\n\tlocal cnt = 0\n\tlocal primes = {2, 3, 5, 7, 11, 13}\n\tfor n in num:gmatch(\"\
    .\") do\n\t\tif hex_decimal[n] > 1 then\n\t\t\tfor i = 1, #primes do\n\t\t\t\t\
    if hex_decimal[n] == primes[i] then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn cnt\nend", "  local hex_primes = {\n    ['2']\
    \ = true, ['3'] = true, ['5'] = true, ['7'] = true,\n    ['B'] = true, ['D'] =\
    \ true, ['F'] = true\n  }\n  local sum = 0\n  for i = 1, string.len(num) do\n\
    \    if hex_primes[string.sub(num, i, i)] then\n      sum = sum + 1\n    end\n\
    \  end\n  return sum\nend", "    local primes = {\n        [2] = 1, [3] = 1, [5]\
    \ = 1, [7] = 1, [11] = 1, [13] = 1, [17] = 1,\n        [19] = 1, [23] = 1, [29]\
    \ = 1, [31] = 1, [37] = 1, [41] = 1, [43] = 1,\n        [47] = 1, [53] = 1, [59]\
    \ = 1, [61] = 1, [67] = 1, [71] = 1, [73] = 1,\n        [79] = 1, [83] = 1, [89]\
    \ = 1, [97] = 1, [101] = 1, [103] = 1, [107] = 1,\n        [109] = 1, [113] =\
    \ 1, [127] = 1, [131] = 1, [137] = 1, [139] = 1,\n        [149] = 1, [151] = 1,\
    \ [157] = 1, [163] = 1, [167] = 1, [173] = 1,\n        [179] = 1, [181] = 1, [191]\
    \ = 1, [193] = 1, [197] = 1, [199] = 1,\n        [211] = 1, [223] = 1, [227] =\
    \ 1, [229] = 1, [233] = 1, [239] = 1,\n        [241] = 1, [251] = 1, [257] = 1,\
    \ [263] = 1, [269] = 1, [271] = 1,\n        [277] = 1, [281] = 1, [283] = 1, [293]\
    \ = 1, [307] = 1, [311] = 1,\n        [313] = 1, [317] = 1, [331] = 1, [337] =\
    \ 1, [347] = 1, [349] = 1,\n        [353] = 1, [359] = 1, [367] = 1, [373] = 1,\
    \ [379] = 1, [383] = 1,\n        [389] = 1, [397] = 1, [401] = 1, [409] = 1",
  "    local pattern = \"([0123456789ABCDEF]+)\"\n    return num:match(pattern)\n\
    end", "    local hex = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n    local key\
    \ = {}\n    for i = 1, #num do\n        key[i] = string.sub(num, i, i)\n    end\n\
    \    return key\nend", "    return tonumber(num, 16)\nend", "    local primes\
    \ = {2, 3, 5, 7, 11, 13}\n    local t = {}\n    for i = 0, 15 do\n        t[string.format(\"\
    %X\", i)] = i\n    end\n    for i = 1, #num do\n        local ch = string.sub(num,\
    \ i, i)\n        local k = t[ch]\n        if k then\n            t[ch] = (k+1)\
    \ * primes[k]\n        end\n    end\n    local count = 0\n    for i = 1, #num\
    \ do\n        local ch = string.sub(num, i, i)\n        if t[ch] == primes[t[ch]\
    \ / ch] then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local hex = {\n        ['A'] = 10, ['B'] = 11, ['C'] = 12,\
    \ ['D'] = 13, ['E'] = 14, ['F'] = 15\n    }\n    local total = 0\n    local n\
    \ = tonumber(num)\n    if n then\n        while n > 0 do\n            local d\
    \ = n % 10\n            if d == 2 or d == 3 or d == 5 or d == 7 then\n       \
    \         total = total + 1\n            end\n            n = math.floor(n / 10)\n\
    \        end\n    else\n        for d in num:gmatch('.') do\n            if d\
    \ == '2' or d == '3' or d == '5' or d == '7' or hex[d] == 11 or hex[d] == 13 then\n\
    \                total = total + 1\n            end\n        end\n    end\n  \
    \  return total\nend", "    local prim_key = {[1] = 2, [2] = 3, [3] = 5, [4] =\
    \ 7, [5] = 11, [6] = 13}\n    local prim_key_2 = {[1] = 0, [2] = 1, [3] = 2, [4]\
    \ = 3, [5] = 4, [6] = 5,\n                        [7] = 6, [8] = 7, [9] = 8, [10]\
    \ = 9, [11] = 'A',\n                        [12] = 'B', [13] = 'C', [14] = 'D',\
    \ [15] = 'E',\n                        [16] = 'F'}\n    local hex_num = {}\n \
    \   local n = #num\n    local counter = 0\n    for i = 1, n do\n        hex_num[i]\
    \ = tonumber(num:sub(i, i), 16)\n    end\n    for i = 1, n do\n        if hex_num[i]\
    \ <= 16 then\n            for j = 1, 6 do\n                if hex_num[i] == prim_key[j]\
    \ then\n                    counter = counter + 1\n                end\n     \
    \       end\n        else\n            for k = 1, 16 do\n                if num:sub(i,\
    \ i) == prim_key_2[k] then\n                    counter = counter + 1\n      \
    \          end\n            end\n        end\n    end\n    return counter\nend",
  "  local conv_table = {\n    ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13,\n \
    \   ['E'] = 14, ['F'] = 15\n  }\n  local prime_table = {\n    [2] = true, [3]\
    \ = true, [5] = true, [7] = true,\n    [11] = true, [13] = true\n  }\n  local\
    \ prime_cnt = 0\n  for num_char in num:gmatch('%w') do\n    if num_char:match('[A-F]')\
    \ then\n      local value = conv_table[num_char]\n      if prime_table[value]\
    \ then\n        prime_cnt = prime_cnt + 1\n      end\n    else\n      local value\
    \ = tonumber(num_char)\n      if prime_table[value] then\n        prime_cnt =\
    \ prime_cnt + 1\n      end\n    end\n  end\n  return prime_cnt\nend", "  local\
    \ sum = 0\n  local str = \"ABCDEF\"\n  for i = 1, #num do\n    if num:sub(i,i)\
    \ == \"2\" or num:sub(i,i) == \"3\" or num:sub(i,i) == \"5\" or num:sub(i,i) ==\
    \ \"7\" then\n      sum = sum + 1\n    elseif num:sub(i,i) == \"B\" or num:sub(i,i)\
    \ == \"D\" then\n      sum = sum + 1\n    end\n  end\n  return sum\nend", "  local\
    \ cnt = 0\n  for i = 1, #num do\n    local b = tonumber(num:sub(i, i), 16)\n \
    \   if b == 2 or b == 3 or b == 5 or b == 7 or b == 11 or b == 13 then\n     \
    \ cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "  local dec={}\n  local\
    \ key={}\n  local hex={['0']=0,['1']=1,['2']=2,['3']=3,['4']=4,['5']=5,['6']=6,['7']=7,['8']=8,['9']=9,['A']=10,['B']=11,['C']=12,['D']=13,['E']=14,['F']=15}\n\
    \  for i=1, #num do \n    dec[i]=hex[num:sub(i,i)]\n  end\n  for i=1, #dec do\n\
    \    if dec[i]==2 or dec[i]==3 or dec[i]==5 or dec[i]==7 or dec[i]==11 or dec[i]==13\
    \ then\n      key[i]=1\n    else\n      key[i]=0\n    end\n  end\n  local r=0\n\
    \  for i=1, #key do\n    r=r+key[i]\n  end\n  return r\nend", "  local alphabet\
    \ = \"0123456789ABCDEF\"\n  local numbers = \"0123456789\"\n  local hexa = {}\n\
    \  local ind = 1\n  for i = 1,#num do\n    for j = 1,#alphabet do\n      if num:sub(i,i)\
    \ == alphabet:sub(j,j) then\n        hexa[ind] = j-1\n        ind = ind + 1\n\
    \      end\n    end\n  end\n  return hexa\nend", "  local key = {['0'] = true,\
    \ ['1'] = true, ['2'] = true, ['3'] = true, ['4'] = true,\n               ['5']\
    \ = true, ['6'] = true, ['7'] = true, ['8'] = true, ['9'] = true,\n          \
    \     ['A'] = true, ['B'] = true, ['C'] = true, ['D'] = true, ['E'] = true,\n\
    \               ['F'] = true}\n  return key[num]\nend", "    local hex = \"0123456789ABCDEF\"\
    \n    local key_index = {}\n    for i = 1, #hex do\n        key_index[hex:sub(i,\
    \ i)] = i\n    end\n    return key_index\nend", "    local my_table = {\n    \
    \    [\"0\"] = 1,\n        [\"1\"] = 1,\n        [\"2\"] = 1,\n        [\"3\"\
    ] = 1,\n        [\"4\"] = 1,\n        [\"5\"] = 1,\n        [\"6\"] = 1,\n   \
    \     [\"7\"] = 1,\n        [\"8\"] = 1,\n        [\"9\"] = 1,\n        [\"A\"\
    ] = 1,\n        [\"B\"] = 1,\n        [\"C\"] = 1,\n        [\"D\"] = 1,\n   \
    \     [\"E\"] = 1,\n        [\"F\"] = 1,\n    }\n    local length = #num\n   \
    \ local result = 0\n    for i = 1, length do\n        if my_table[num:sub(i, i)]\
    \ == 1 then\n            result = result + 1\n        end\n    end\n    return\
    \ result\nend", "    local digits = {}\n    local dig_cnt = 0\n    for digit in\
    \ num:gmatch('%w') do\n        dig_cnt = dig_cnt + 1\n        digits[dig_cnt]\
    \ = digit\n    end\n    return digits, dig_cnt\nend", "\tlocal a = {\n\t\t[\"\
    0\"] = 0,\n\t\t[\"1\"] = 1,\n\t\t[\"2\"] = 2,\n\t\t[\"3\"] = 3,\n\t\t[\"4\"] =\
    \ 4,\n\t\t[\"5\"] = 5,\n\t\t[\"6\"] = 6,\n\t\t[\"7\"] = 7,\n\t\t[\"8\"] = 8,\n\
    \t\t[\"9\"] = 9,\n\t\t[\"A\"] = 10,\n\t\t[\"B\"] = 11,\n\t\t[\"C\"] = 12,\n\t\t\
    [\"D\"] = 13,\n\t\t[\"E\"] = 14,\n\t\t[\"F\"] = 15,\n\t}\n\tlocal num = string.upper(num)\n\
    \tlocal b = {}\n\tfor i = 1, #num do\n\t\tb[i] = a[num:sub(i,i)]\n\tend\n\treturn\
    \ b\nend", "    local lookup = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, [string.byte(\"\
    A\")] = 10,\n                    [string.byte(\"B\")] = 11, [string.byte(\"C\"\
    )] = 12,\n                    [string.byte(\"D\")] = 13, [string.byte(\"E\")]\
    \ = 14,\n                    [string.byte(\"F\")] = 15}\n    local cnt = 0\n \
    \   for k in num:gmatch(\".\") do\n        if lookup[string.byte(k)] then\n  \
    \          cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "    local\
    \ primes = {2, 3, 5, 7, 11, 13}\n    local h = {}\n    for i = 0, 9 do\n     \
    \   h[tostring(i)] = i\n    end\n    h['A'] = 10\n    h['B'] = 11\n    h['C']\
    \ = 12\n    h['D'] = 13\n    h['E'] = 14\n    h['F'] = 15\n    local sum = 0\n\
    \    for i = 1, #num do\n        if h[num:sub(i, i)] in primes then\n        \
    \    sum = sum + 1\n        end\n    end\n    return sum\nend", "    num = string.upper(num)\n\
    \    local s_hex = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"\
    ,\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"}\n    local hex2dec = {}\n    for k,v in\
    \ ipairs(s_hex) do\n        hex2dec[v] = k-1\n    end\n    local len, i, s, e\
    \ = string.len(num), 1, 0, 0\n    while i <= len do\n        local h = string.sub(num,\
    \ i, i)\n        s = s + hex2dec[h] * math.pow(16, len-i)\n        i = i + 1\n\
    \    end\n    return s\nend", "    local hex_key = {\n        0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, \n        [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13,\
    \ [\"E\"] = 14, [\"F\"] = 15,\n    }\n    return function(c)\n        return hex_key[c]\n\
    \    end\nend", "  local hex_tab = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2']\
    \ = 2,\n    ['3'] = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7']\
    \ = 7,\n    ['8'] = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n   \
    \ ['C'] = 12,\n    ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15\n  }\n  local\
    \ count = 0\n  for c in num:gmatch('.') do\n    if hex_tab[c] > 1 and hex_tab[c]\
    \ % 2 ~= 0 and \n      hex_tab[c] % 3 ~= 0 and hex_tab[c] % 5 ~= 0 and \n    \
    \  hex_tab[c] % 7 ~= 0 and hex_tab[c] % 11 ~= 0 and \n      hex_tab[c] % 13 ~=\
    \ 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", "  --\
    \ see http://lua-users.org/wiki/SwitchStatement\n  local cases = {\n    ['2']\
    \ = true,\n    ['3'] = true,\n    ['5'] = true,\n    ['7'] = true,\n    ['B']\
    \ = true,\n    ['D'] = true,\n  }\n  local cnt = 0\n  for i = 1, #num do\n   \
    \ cnt = cnt + (cases[num:sub(i,i)] and 1 or 0)\n  end\n  return cnt\nend", " \
    \   local primes = {2, 3, 5, 7, 11, 13}\n    local table = {\n        ['0'] =\
    \ 0, ['1'] = 1, ['2'] = 2, ['3'] = 3,\n        ['4'] = 4, ['5'] = 5, ['6'] = 6,\
    \ ['7'] = 7,\n        ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11,\n        ['C']\
    \ = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15\n    }\n    local count = 0\n    for\
    \ i = 1, #num do\n        for j = 1, #primes do\n            if table[num:sub(i,\
    \ i)] == primes[j] then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend\nprint(hex_key(\"AB\"))\nprint(hex_key(\"\
    1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\n\
    print(hex_key(\"2020\"))", "    local keys = { ['0'] = '0', ['1'] = '1', ['2']\
    \ = '2', ['3'] = '3', ['4'] = '4',\n                   ['5'] = '5', ['6'] = '6',\
    \ ['7'] = '7', ['8'] = '8', ['9'] = '9',\n                   ['A'] = '10', ['B']\
    \ = '11', ['C'] = '12', ['D'] = '13', ['E'] = '14', ['F'] = '15'}\n    local n\
    \ = \"\"\n    for i = 1, #num do\n        n = n .. keys[num:sub(i,i)]\n    end\n\
    \    return n\nend", "    local n = 0\n    for i = 1, #num do\n        if num:sub(i,\
    \ i) == '2' then\n            n = n + 1\n        elseif num:sub(i, i) == '3' then\n\
    \            n = n + 1\n        elseif num:sub(i, i) == '5' then\n           \
    \ n = n + 1\n        elseif num:sub(i, i) == '7' then\n            n = n + 1\n\
    \        elseif num:sub(i, i) == 'B' then\n            n = n + 1\n        elseif\
    \ num:sub(i, i) == 'D' then\n            n = n + 1\n        end\n    end\n   \
    \ return n\nend", "    local a = 0\n    local l = 0\n    local r = \"\"\n    for\
    \ i = 1, string.len(num) do\n        a = tonumber(string.sub(num, i, i), 16)\n\
    \        l = a + l\n        r = r .. string.format(\"%d,\", a)\n    end\n    return\
    \ r .. string.format(\"%d\", l)\nend", "    local key = {[\"2\"] = true, [\"3\"\
    ] = true, [\"5\"] = true, [\"7\"] = true, [\"B\"] = true, [\"D\"] = true}\n  \
    \  local count = 0\n    for c in num:gmatch(\".\") do\n        if key[c] then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    local set = {'2','3','5','7','B','D'}\n    for i = 1,\
    \ string.len(num) do\n        if set[num:sub(i,i)] then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local hex = {\n    [0]\
    \ = true,\n    [1] = true,\n    [2] = true,\n    [3] = true,\n    [4] = true,\n\
    \    [5] = true,\n    [6] = true,\n    [7] = true,\n    [8] = true,\n    [9] =\
    \ true,\n    [\"A\"] = true,\n    [\"B\"] = true,\n    [\"C\"] = true,\n    [\"\
    D\"] = true,\n    [\"E\"] = true,\n    [\"F\"] = true\n  }\n  local res = 0\n\
    \  for i = 1, #num do\n    local key = num:sub(i, i)\n    if hex[key] == true\
    \ then\n      res = res + 1\n    end\n  end\n  return res\nend", "  local alph\
    \ = '23456789ABCDEF'\n  local res = 0\n  local p = 7\n  for i = 1, #num do\n \
    \   local a = string.sub(num, i, i)\n    local key = string.find(alph, a)\n  \
    \  res = (res * 16) + key\n  end\n  return res, p\nend", "\tlocal i, n, t = 1,\
    \ num:len(), {}\n\twhile i <= n do\n\t\tt[#t + 1] = tonumber(num:sub(i, i + 1),\
    \ 16)\n\t\ti = i + 2\n\tend\n\treturn t\nend", "    local count = 0\n    local\
    \ hex = '0123456789ABCDEF'\n    local primelist = {}\n    local hex_primes = {}\n\
    \    local hex_prime_count = 0\n    local hex_prime_test = {}\n    local hex_prime_test_count\
    \ = 0\n    local test_num\n    local num_table = {}\n    local hex_table = {}\n\
    \    local hex_list = {}\n    local hex_list_count = 0\n    for i=1, 16 do\n \
    \       primelist[i] = 0\n    end\n    for i=1, string.len(num) do\n        test_num\
    \ = tonumber(string.sub(num, i, i), 16)\n        if(primelist[test_num] == 0)\
    \ then\n            primelist[test_num] = 1\n            count = count + 1\n \
    \       end\n    end\n    return count\nend", "  local res = {}\n  local primes\
    \ = {2, 3, 5, 7, 11, 13}\n  for i = 0, 9 do res[i] = false end\n  for i = 10,\
    \ 15 do res[string.format(\"%X\", i)] = false end\n  for _,v in ipairs(primes)\
    \ do\n    if v < 10 then res[v] = true\n    else res[string.format(\"%X\", v)]\
    \ = true end\n  end\n  return res\nend", "\treturn tonumber(num, 16)\nend", " \
    \   local num = num:upper()\n    local key_table = {'2','3','5','7','B','D'}\n\
    \    local count = 0\n    for i=1,#num do\n        for j=1,#key_table do\n   \
    \         if num:sub(i,i) == key_table[j] then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ all_hex = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \    local hex_num = {}\n    for i = 1, string.len(num) do\n        hex_num[i]\
    \ = string.sub(num, i, i)\n    end\n    local count = 0\n    for i = 1, #hex_num\
    \ do\n        for j = 1, #all_hex do\n            if hex_num[i] == all_hex[j]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local dict = {\n    '0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9',\n    'A', 'B', 'C', 'D', 'E', 'F'\n  }\n  local count =\
    \ 0\n  for i = 1, #num do\n    if dict[1] == num:sub(i, i) or dict[2] == num:sub(i,\
    \ i) then\n      count = count + 1\n    elseif dict[3] == num:sub(i, i) or dict[5]\
    \ == num:sub(i, i) or\n       dict[11] == num:sub(i, i) or dict[13] == num:sub(i,\
    \ i) then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ len = string.len(num)\n  local hex_key = {\n    A = \"10\", B = \"11\", C =\
    \ \"12\", D = \"13\", E = \"14\", F = \"15\"\n  }\n  local out = {}\n  for i =\
    \ 1, len do\n    local n = string.sub(num, i, i)\n    if string.find(n, \"[0-9]\"\
    ) then\n      table.insert(out, n)\n    else\n      table.insert(out, hex_key[n])\n\
    \    end\n  end\n  return table.concat(out)\nend", "    local hex = {\n      \
    \  [0] = true,\n        [1] = true,\n        [2] = true,\n        [3] = true,\n\
    \        [4] = true,\n        [5] = true,\n        [6] = true,\n        [7] =\
    \ true,\n        [8] = true,\n        [9] = true,\n        A = true,\n       \
    \ B = true,\n        C = true,\n        D = true,\n        E = true,\n       \
    \ F = true\n    }\n    local res = 0\n    for i=1, #num do\n        if hex[num:sub(i,i)]\
    \ then\n            res = res + 1\n        end\n    end\n    return res\nend",
  "    local n = #num\n    local count = 0\n    local i = 1\n    while i <= n do\n\
    \        local digit = num:sub(i, i)\n        if hex_prime[digit] then\n     \
    \       count = count + 1\n        end\n        i = i + 1\n    end\n    return\
    \ count\nend", "  local arr = {2, 3, 5, 7, 11, 13}\n  local out = 0\n  for i =\
    \ 1, #num do\n    local byte = string.byte(num, i)\n    if byte >= 48 and byte\
    \ <= 57 then\n      out = out + (byte % 2 == 1 and 1 or 0)\n    elseif byte >=\
    \ 65 and byte <= 70 then\n      out = out + (arr[byte % 13] and 1 or 0)\n    end\n\
    \  end\n  return out\nend", "    local digits = {\n        ['0'] = 0, ['1'] =\
    \ 1, ['2'] = 2, ['3'] = 3,\n        ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7'] = 7,\n\
    \        ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11,\n        ['C'] = 12, ['D']\
    \ = 13, ['E'] = 14, ['F'] = 15,\n    }\n    local primes = {[2] = true, [3] =\
    \ true, [5] = true, [7] = true, [11] = true, [13] = true}\n    local count = 0\n\
    \    for i = 1, #num do\n        if primes[digits[num:sub(i, i)]] then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "   \
    \ local lookup = {\n        [\"2\"] = true,\n        [\"3\"] = true,\n       \
    \ [\"5\"] = true,\n        [\"7\"] = true,\n        [\"B\"] = true,\n        [\"\
    D\"] = true,\n    }\n    local count = 0\n    for c in num:gmatch\".\" do\n  \
    \      if lookup[c] then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local map = {\n    ['0'] = 0, ['1'] = 1, ['2'] = 2,\
    \ ['3'] = 3, ['4'] = 4,\n    ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9']\
    \ = 9,\n    ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F']\
    \ = 15,\n  }\n  return map[num]\nend", "    local digits = {\n        ['0'] =\
    \ 0,\n        ['1'] = 1,\n        ['2'] = 2,\n        ['3'] = 3,\n        ['4']\
    \ = 4,\n        ['5'] = 5,\n        ['6'] = 6,\n        ['7'] = 7,\n        ['8']\
    \ = 8,\n        ['9'] = 9,\n        ['A'] = 10,\n        ['B'] = 11,\n       \
    \ ['C'] = 12,\n        ['D'] = 13,\n        ['E'] = 14,\n        ['F'] = 15,\n\
    \    }\n    local primes = {\n        [2] = true,\n        [3] = true,\n     \
    \   [5] = true,\n        [7] = true,\n        [11] = true,\n        [13] = true,\n\
    \    }\n    local count = 0\n    for char in num:gmatch('%w') do\n        if primes[digits[char]]\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local primes = { 2, 3, 5, 7, 11, 13 }\n    local hex = \"0123456789ABCDEF\"\
    \n    local digits = 0\n    local prim = 0\n    for i = 1, string.len(num) do\n\
    \        local d = string.sub(num, i, i)\n        digits = digits + 1\n      \
    \  for i = 1, #primes do\n            if d == hex[primes[i] + 1] then\n      \
    \          prim = prim + 1\n            end\n        end\n    end\n    return\
    \ prim\nend", "    local z = {\n        A = 10,\n        B = 11,\n        C =\
    \ 12,\n        D = 13,\n        E = 14,\n        F = 15\n    }\n    local numbers\
    \ = {2, 3, 5, 7, 11, 13}\n    local r = 0\n    for i = 1, #num do\n        local\
    \ n = num:sub(i, i)\n        local j = tonumber(n) or z[n]\n        if numbers[j]\
    \ then\n            r = r + 1\n        end\n    end\n    return r\nend", "   \
    \ local primes = {\n        [\"2\"] = true,\n        [\"3\"] = true,\n       \
    \ [\"5\"] = true,\n        [\"7\"] = true,\n        [\"B\"] = true,\n        [\"\
    D\"] = true,\n    }\n    local hex_digit = string.match(num, \".\")\n    local\
    \ sum = 0\n    while hex_digit do\n        if primes[hex_digit] then\n       \
    \     sum = sum + 1\n        end\n        num = string.sub(num, 2)\n        hex_digit\
    \ = string.match(num, \".\")\n    end\n    return sum\nend", "  local hex_key_tb\
    \ = {\n    ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6']\
    \ = 6,\n    ['7'] = 7, ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11, ['C'] = 12,\
    \ ['D'] = 13,\n    ['E'] = 14, ['F'] = 15\n  }\n  return hex_key_tb[num]\nend",
  "    local key = '0123456789ABCDEF'\n    local t = {}\n    for i=1,16 do\n     \
    \   t[key:sub(i,i)] = i\n    end\n    return t\nend", "    local t = {\n     \
    \   [\"0\"] = true,\n        [\"1\"] = true,\n        [\"2\"] = true,\n      \
    \  [\"3\"] = true,\n        [\"4\"] = true,\n        [\"5\"] = true,\n       \
    \ [\"6\"] = true,\n        [\"7\"] = true,\n        [\"8\"] = true,\n        [\"\
    9\"] = true,\n        [\"A\"] = true,\n        [\"B\"] = true,\n        [\"C\"\
    ] = true,\n        [\"D\"] = true,\n        [\"E\"] = true,\n        [\"F\"] =\
    \ true,\n    }\n    return t[num] or false\nend", "\tlocal hex_keys = {\n\t\t\
    [\"0\"] = 0,\n\t\t[\"1\"] = 1,\n\t\t[\"2\"] = 2,\n\t\t[\"3\"] = 3,\n\t\t[\"4\"\
    ] = 4,\n\t\t[\"5\"] = 5,\n\t\t[\"6\"] = 6,\n\t\t[\"7\"] = 7,\n\t\t[\"8\"] = 8,\n\
    \t\t[\"9\"] = 9,\n\t\t[\"A\"] = 10,\n\t\t[\"B\"] = 11,\n\t\t[\"C\"] = 12,\n\t\t\
    [\"D\"] = 13,\n\t\t[\"E\"] = 14,\n\t\t[\"F\"] = 15,\n\t}\n\treturn hex_keys[num]\n\
    end", "  local res = 0\n  for i = 1, #num do\n    local char = num:sub(i, i)\n\
    \    if char == '2' or char == '3' or char == '5' or char == '7' or char == 'B'\
    \ or char == 'D' then\n      res = res + 1\n    end\n  end\n  return res\nend",
  "    local key = num\n    for i = 0, 9 do\n        key = key:gsub(i, \"\")\n   \
    \ end\n    key = key:gsub(\"A\", \"\")\n    key = key:gsub(\"B\", \"\")\n    key\
    \ = key:gsub(\"C\", \"\")\n    key = key:gsub(\"D\", \"\")\n    key = key:gsub(\"\
    E\", \"\")\n    key = key:gsub(\"F\", \"\")\n    key = key:gsub(\"a\", \"\")\n\
    \    key = key:gsub(\"b\", \"\")\n    key = key:gsub(\"c\", \"\")\n    key = key:gsub(\"\
    d\", \"\")\n    key = key:gsub(\"e\", \"\")\n    key = key:gsub(\"f\", \"\")\n\
    \    return key\nend", "    local lu = {\n        [\"0\"] = 0,\n        [\"1\"\
    ] = 1,\n        [\"2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n   \
    \     [\"5\"] = 5,\n        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"\
    ] = 8,\n        [\"9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n \
    \       [\"C\"] = 12,\n        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"\
    F\"] = 15,\n    }\n    return lu[num]\nend", "    local hex_nums = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \    local hex_primes = {2,3,5,7,11,13}\n    local hex_num_counts = {}\n    for\
    \ i = 1, #hex_nums do\n        hex_num_counts[hex_nums[i]] = 0\n    end\n    for\
    \ i = 1, #num do\n        hex_num_counts[num:sub(i,i)] = hex_num_counts[num:sub(i,i)]\
    \ + 1\n    end\n    local prime_count = 0\n    for i = 1, #hex_primes do\n   \
    \     prime_count = prime_count + hex_num_counts[tostring(hex_primes[i])]\n  \
    \  end\n    return prime_count\nend", "    local hex_key = {}\n    local hex_val\
    \ = {\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n        10, 11, 12, 13, 14, 15\n\
    \    }\n    local hex_digit = {\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\",\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\"\n    }\n    for i = 1, #hex_digit do\n        hex_key[hex_digit[i]] = hex_val[i]\n\
    \    end\n    return hex_key\nend", "\tlocal t = {\n\t\t\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\",\n\t\t\"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"\n\t}\n\tlocal a = {}\n\tfor k, v in ipairs(t) do\n\t\ta[v] = k\n\
    \tend\n\treturn a\nend", "\tlocal map = {}\n\tmap[\"0\"] = 0\n\tmap[\"1\"] = 1\n\
    \tmap[\"2\"] = 2\n\tmap[\"3\"] = 3\n\tmap[\"4\"] = 4\n\tmap[\"5\"] = 5\n\tmap[\"\
    6\"] = 6\n\tmap[\"7\"] = 7\n\tmap[\"8\"] = 8\n\tmap[\"9\"] = 9\n\tmap[\"A\"] =\
    \ 10\n\tmap[\"B\"] = 11\n\tmap[\"C\"] = 12\n\tmap[\"D\"] = 13\n\tmap[\"E\"] =\
    \ 14\n\tmap[\"F\"] = 15\n\treturn map[num]\nend", "    local primes = {\n    \
    \    [\"0\"] = false,\n        [\"1\"] = false,\n        [\"2\"] = true,\n   \
    \     [\"3\"] = true,\n        [\"4\"] = false,\n        [\"5\"] = true,\n   \
    \     [\"6\"] = false,\n        [\"7\"] = true,\n        [\"8\"] = false,\n  \
    \      [\"9\"] = false,\n        [\"A\"] = false,\n        [\"B\"] = true,\n \
    \       [\"C\"] = false,\n        [\"D\"] = true,\n        [\"E\"] = false,\n\
    \        [\"F\"] = false,\n    }\n    return primes[num]\nend", "    local key\
    \ = {[\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4,\n      \
    \           [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n\
    \                 [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"\
    E\"] = 14,\n                 [\"F\"] = 15}\n    local sum = 0\n    for i = 1,\
    \ #num do\n        sum = sum + key[num:sub(i, i)]\n    end\n    return sum\nend",
  "  local i, n = 0, 0\n  return function()\n    i = i + 1\n    local d = string.sub(num,\
    \ i, i)\n    if d == '' then return nil end\n    n = n + (d == '2' or d == '3'\
    \ or d == '5' or d == '7' or d == 'B' or d == 'D')\n    return i, d\n  end\nend",
  "    local c = 0\n    for i = 1, #num do\n        local n = tonumber(num:sub(i,\
    \ i), 16)\n        if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n ==\
    \ 13 then\n            c = c + 1\n        end\n    end\n    return c\nend", " \
    \   local r = 0\n    for i = 1, #num do\n        local n = tonumber(num:sub(i,\
    \ i), 16)\n        if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n ==\
    \ 13 then\n            r = r + 1\n        end\n    end\n    return r\nend", " \
    \   local lookup = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local dec = 0\n    local power = 0\n    local is_prime = 0\n    local count\
    \ = 0\n    local primes = {2, 3, 5, 7, 11, 13}\n    for i = string.len(num), 1,\
    \ -1 do\n        local key = string.sub(num, i, i)\n        dec = dec + lookup[key]\
    \ * (16 ^ power)\n        power = power + 1\n    end\n    for i = 1, #primes do\n\
    \        if primes[i] == dec then\n            is_prime = 1\n            break\n\
    \        end\n    end\n    if is_prime == 1 then\n        count = 1\n    end\n\
    \    return count\nend", "  local count = 0\n  local primes = {2, 3, 5, 7, 11,\
    \ 13}\n  for i = 1, #num do\n    for j = 1, #primes do\n      if string.format(\"\
    %x\", primes[j]) == string.sub(num, i, i) then\n        count = count + 1\n  \
    \    end\n    end\n  end\n  return count\nend", "  assert(type(num) == \"string\"\
    )\n  local chars = {}\n  for c in num:gmatch(\".\") do\n    chars[#chars + 1]\
    \ = c\n  end\n  for i = 1, #chars do\n    local v = chars[i]\n    if v == \"A\"\
    \ then\n      chars[i] = 10\n    elseif v == \"B\" then\n      chars[i] = 11\n\
    \    elseif v == \"C\" then\n      chars[i] = 12\n    elseif v == \"D\" then\n\
    \      chars[i] = 13\n    elseif v == \"E\" then\n      chars[i] = 14\n    elseif\
    \ v == \"F\" then\n      chars[i] = 15\n    else\n      chars[i] = tonumber(v)\n\
    \    end\n  end\n  return chars\nend", "  local primes = {\n    [\"0\"] = false,\n\
    \    [\"1\"] = false,\n    [\"2\"] = true,\n    [\"3\"] = true,\n    [\"4\"] =\
    \ false,\n    [\"5\"] = true,\n    [\"6\"] = false,\n    [\"7\"] = true,\n   \
    \ [\"8\"] = false,\n    [\"9\"] = false,\n    [\"A\"] = false,\n    [\"B\"] =\
    \ true,\n    [\"C\"] = false,\n    [\"D\"] = true,\n    [\"E\"] = false,\n   \
    \ [\"F\"] = false\n  }\n  local count = 0\n  for i=1,#num do\n    if primes[num:sub(i,i)]\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ primes = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    local result = 0\n\
    \    local length = #num\n    local i = 1\n    while i <= length do\n        local\
    \ hex = string.sub(num, i, i)\n        for _, val in ipairs(primes) do\n     \
    \       if hex == val then\n                result = result + 1\n            end\n\
    \        end\n        i = i + 1\n    end\n    return result\nend", "    local\
    \ v = {\n        [ \"0\" ] = 0, [ \"1\" ] = 1, [ \"2\" ] = 2, [ \"3\" ] = 3, [\
    \ \"4\" ] = 4,\n        [ \"5\" ] = 5, [ \"6\" ] = 6, [ \"7\" ] = 7, [ \"8\" ]\
    \ = 8, [ \"9\" ] = 9,\n        [ \"A\" ] = 10, [ \"B\" ] = 11, [ \"C\" ] = 12,\
    \ [ \"D\" ] = 13, [ \"E\" ] = 14, [ \"F\" ] = 15,\n    }\n    return v[num]\n\
    end", "    local primes = {\n        [0x02] = true,\n        [0x03] = true,\n\
    \        [0x05] = true,\n        [0x07] = true,\n        [0x0B] = true,\n    \
    \    [0x0D] = true,\n    }\n    local hex = \"0123456789ABCDEF\"\n    local count\
    \ = 0\n    for _,c in pairs(num:upper():gmatch(\".\")) do\n        local i = hex:find(c)\n\
    \        if primes[i] then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local ids = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \  local primes = {false,false,true,true,false,true,false,true,false,false,\n\
    \    false,true,false,true,false,false}\n  local hex_to_dec = {}\n  for idx, val\
    \ in ipairs(ids) do\n    hex_to_dec[val] = idx\n  end\n  local function is_prime(num)\n\
    \    return primes[hex_to_dec[num]]\n  end\n  local count = 0\n  for idx = 1,\
    \ #num do\n    if is_prime(num:sub(idx,idx)) then\n      count = count + 1\n \
    \   end\n  end\n  return count\nend", "    return \"ABCDEF\"\nend", "    local\
    \ key = {[\"0\"] = true, [\"1\"] = true, [\"2\"] = true, [\"3\"] = true,\n   \
    \              [\"4\"] = true, [\"5\"] = true, [\"6\"] = true, [\"7\"] = true,\n\
    \                 [\"8\"] = true, [\"9\"] = true, [\"A\"] = true, [\"B\"] = true,\n\
    \                 [\"C\"] = true, [\"D\"] = true, [\"E\"] = true, [\"F\"] = true}\n\
    \    local count = 0\n    for i = 1, #num do\n        if key[num:sub(i, i)] then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  -- this function get a number in hexadecimal and return the same number \n  --\
    \ in decimal\n  local hex = {A=10,B=11,C=12,D=13,E=14,F=15}\n  local decimal =\
    \ 0\n  local mult = 1\n  for i=#num,1,-1 do\n    if hex[num:sub(i,i)] then\n \
    \     decimal = decimal + hex[num:sub(i,i)]*mult\n    else\n      decimal = decimal\
    \ + tonumber(num:sub(i,i))*mult\n    end\n    mult = mult*16\n  end\n  return\
    \ decimal\nend", "    if string.find(\"0123456789ABCDEF\", num) then\n       \
    \ return 1\n    end\n    return 0\nend", "  local l_num = string.lower(num)\n\
    \  local count = 0\n  local prime = {[2]=2,[3]=3,[5]=5,[7]=7,[11]=11,[13]=13}\n\
    \  for i = 1, #l_num do\n    local x = l_num:sub(i,i)\n    local v = tonumber(x,16)\n\
    \    if not v then\n      if x == \"b\" then\n        v = 11\n      elseif x ==\
    \ \"d\" then\n        v = 13\n      end\n    end\n    if prime[v] then\n     \
    \ count = count + 1\n    end\n  end\n  return count\nend", "    local result =\
    \ 0\n    local hex_primes = {3, 5, 7, 11, 13}\n    for i = 1, string.len(num)\
    \ do\n        local curr_num = tonumber(string.sub(num, i, i), 16)\n        if\
    \ curr_num == nil then curr_num = tonumber(string.byte(string.sub(num, i, i)))\
    \ end\n        for j = 1, #hex_primes do\n            if curr_num == hex_primes[j]\
    \ then\n                result = result + 1\n            end\n        end\n  \
    \  end\n    return result\nend", "    local key={}\n    for i=1,16 do\n      \
    \  local c=string.char(i+55)\n        key[c]=i\n    end\n    for i=0,9 do\n  \
    \      local c=string.char(i+48)\n        key[c]=i\n    end\n    return key\n\
    end", "    local digits = \"0123456789ABCDEF\"\n    local count = 0\n    for i\
    \ = 1, #num do\n        local digit = num:sub(i, i)\n        if digit == \"2\"\
    \ or digit == \"3\" or digit == \"5\" or digit == \"7\" or digit == \"B\" or digit\
    \ == \"D\" then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local prime = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\
    \    local sum = 0\n    for i = 1, #num do\n        for j = 1, #prime do\n   \
    \         if num:sub(i, i) == prime[j] then\n                sum = sum + 1\n \
    \           end\n        end\n    end\n    return sum\nend", "\tlocal count =\
    \ 0\n\tfor i = 1, #num do\n\t\tlocal x = num:sub(i, i)\n\t\tif x == \"2\" or x\
    \ == \"3\" or x == \"5\" or x == \"7\" or x == \"B\" or x == \"D\" then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local t = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \    local r = {}\n    for k,v in pairs(t) do\n        r[v] = k\n    end\n   \
    \ return r\nend", "    local hex = {\n        [\"0\"] = 0, [\"1\"] = 1, [\"2\"\
    ] = 2, [\"3\"] = 3, [\"4\"] = 4,\n        [\"5\"] = 5, [\"6\"] = 6, [\"7\"] =\
    \ 7, [\"8\"] = 8, [\"9\"] = 9,\n        [\"A\"] = 10, [\"B\"] = 11, [\"C\"] =\
    \ 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15\n    }\n    local i = 0\n    local\
    \ key = 0\n    while i < #num do\n        key = key + hex[num:sub(i+1,i+1)]\n\
    \        i = i + 1\n    end\n    return key\nend", "    local function is_prime(n)\n\
    \        if n < 2 then return false end\n        for i = 2, n - 1 do\n       \
    \     if n % i == 0 then return false end\n        end\n        return true\n\
    \    end\n    local count = 0\n    for c in num:gmatch('.') do\n        if is_prime(tonumber(c,\
    \ 16)) then count = count + 1 end\n    end\n    return count\nend", "  local result\
    \ = 0\n  local hex = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n\
    \  for i = 1, #num do\n    local key = num:sub(i, i)\n    if hex[key] then\n \
    \     if key == \"2\" or key == \"3\" or key == \"5\" or key == \"7\" or key ==\
    \ \"B\" or key == \"D\" then\n        result = result + 1\n      end\n    end\n\
    \  end\n  return result\nend", "  local digits = string.gsub(num, \"%W\", \"\"\
    )\n  local keys = {}\n  for i = 1, #digits do\n    keys[#keys + 1] = tonumber(digits:sub(i,\
    \ i), 16)\n  end\n  return keys\nend", "  local n = num:upper()\n  local l = #n\n\
    \  local c = 0\n  for i = 1, l do\n    local hex = n:sub(i, i)\n    if hex ==\
    \ 'A' or hex == 'B' or hex == 'D' or hex == 'F' then\n      c = c + 1\n    elseif\
    \ hex == 'C' or hex == 'E' then\n      c = c + 0\n    else\n      local d = tonumber(hex)\n\
    \      if d == 2 or d == 3 or d == 5 or d == 7 then\n        c = c + 1\n     \
    \ end\n    end\n  end\n  return c\nend", "  local sum = 0\n  local n = tonumber(num,\
    \ 16)\n  while n > 0 do\n    sum = sum + n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return sum\nend", "  local tab, hex_digits = {},{'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \  for k,v in pairs(hex_digits) do\n    tab[v] = true\n  end\n  return tab\nend",
  "  local list = {}\n  local i\n  for i = 1, #num do\n    if list[num:sub(i,i)] ==\
    \ nil then\n      list[num:sub(i,i)] = 1\n    else\n      list[num:sub(i,i)] =\
    \ list[num:sub(i,i)] + 1\n    end\n  end\n  return list\nend", "  local prime_digits\
    \ = { \"2\", \"3\", \"5\", \"7\", \"B\", \"D\" }\n  local ret = 0\n  for i = 1,\
    \ #num do\n    for j = 1, #prime_digits do\n      if num:sub(i, i) == prime_digits[j]\
    \ then\n        ret = ret + 1\n      end\n    end\n  end\n  return ret\nend",
  "    local primes = { [1] = 2, 3, 5, 7, [11] = 11, [13] = 13 }\n    local count\
    \ = 0\n    for i = 1, #num do\n        local digit = num:sub(i, i)\n        if\
    \ primes[tonumber(digit, 16)] then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    return {\n        ['0'] = 0,\n        ['1']\
    \ = 1,\n        ['2'] = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5']\
    \ = 5,\n        ['6'] = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9']\
    \ = 9,\n        ['A'] = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n      \
    \  ['D'] = 13,\n        ['E'] = 14,\n        ['F'] = 15,\n    }[num]\nend", " \
    \   local arr = {\n        [\"2\"] = 1,\n        [\"3\"] = 1,\n        [\"5\"\
    ] = 1,\n        [\"7\"] = 1,\n        [\"B\"] = 1,\n        [\"D\"] = 1\n    }\n\
    \    local res = 0\n    for key in string.gmatch(num, \"[%a%d]\") do\n       \
    \ if arr[key] == 1 then\n            res = res + 1\n        end\n    end\n   \
    \ return res\nend", "    local base_nums = {\n        [0] = true,\n        [1]\
    \ = true,\n        [2] = true,\n        [3] = true,\n        [4] = true,\n   \
    \     [5] = true,\n        [6] = true,\n        [7] = true,\n        [8] = true,\n\
    \        [9] = true,\n        A = true,\n        B = true,\n        C = true,\n\
    \        D = true,\n        E = true,\n        F = true\n    }\n    local primes\
    \ = {\n        [2] = true,\n        [3] = true,\n        [5] = true,\n       \
    \ [7] = true,\n        [11] = true,\n        [13] = true\n    }\n    local count\
    \ = 0\n    for i=1,#num do\n        if primes[tonumber(num:sub(i,i),16)] then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"]\
    \ = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local count = 0\n    local primes = {2, 3, 5, 7, 11, 13}\n    for i = 1, #num\
    \ do\n        if primes[hex[num:sub(i, i)]] then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nprint(hex_key(\"AB\"))\nprint(hex_key(\"\
    1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\n\
    print(hex_key(\"2020\"))", "    local hex = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n\
    \    local sum = 0\n    local prime_counter = 0\n    local primes = {2,3,5,7,11,13}\n\
    \    local hex_nums = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \    local pos_1 = 0\n    local pos_2 = 0\n    local pos_3 = 0\n    local pos_4\
    \ = 0\n    local pos_5 = 0\n    local pos_6 = 0\n    if #num == 0 then\n     \
    \   return 0\n    end\n    for i = 1, #num do\n        for k, v in pairs(hex_nums)\
    \ do\n            if num:sub(i,i) == v then\n                sum = sum + hex[k]\n\
    \            end\n        end\n    end\n    while sum > 0 do\n        pos_1 =\
    \ sum % 10\n        pos_2 = math.floor(sum / 10) % 10\n        pos_3 = math.floor(sum\
    \ / 100) % 10\n        pos_4 = math.floor(sum / 1000) % 10\n        pos_5 = math.floor(sum\
    \ / 10000) % 10\n        pos_6 = math.floor(sum / 100000) % 10\n        if pos_1\
    \ == 1 or pos_1 == 3 or pos_1 == 7 or pos_1 == 9 then\n            prime_counter\
    \ = prime_counter + 1\n        end\n        if pos_2 == 1 or pos_2 == 3 or pos_2\
    \ == 7 or pos_2 == 9 then\n            prime_counter = prime_counter + 1\n   \
    \     end\n        if pos_3 == 1 or pos_3 == 3 or pos_3 == 7 or pos_3 == 9 then\n\
    \            prime_counter = prime_counter + 1\n        end\n        if pos_4\
    \ == 1 or pos_4 == 3 or pos_4 == 7 or pos_4 == 9 then\n            prime_counter\
    \ = prime_counter + 1\n        end\n        if pos_5 == 1 or pos_5 == 3 or pos",
  "  local nums = {\n    [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"\
    ] = 4,\n    [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n\
    \    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"\
    F\"] = 15\n  }\n  local result = 0\n  for i = 1, #num do\n    local n = nums[num:sub(i,\
    \ i)]\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 then\n\
    \      result = result + 1\n    end\n  end\n  return result\nend", "    return\
    \ tonumber(num, 16)\nend", "    local values = {\n        [\"2\"] = true,\n  \
    \      [\"3\"] = true,\n        [\"5\"] = true,\n        [\"7\"] = true,\n   \
    \     [\"B\"] = true,\n        [\"D\"] = true,\n    }\n    local count = 0\n \
    \   for i=1, #num do\n        local c = num:sub(i,i)\n        if values[c] then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local res = 0\n    local keys = {'A', 'B', 'D', 'E'}\n    for k, v in pairs(keys)\
    \ do\n        if v == num then\n            res = 1\n            break\n     \
    \   end\n    end\n    return res\nend", "    local h = {\n        ['0'] = 0,\n\
    \        ['1'] = 1,\n        ['2'] = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n\
    \        ['5'] = 5,\n        ['6'] = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n\
    \        ['9'] = 9,\n        ['A'] = 10,\n        ['B'] = 11,\n        ['C'] =\
    \ 12,\n        ['D'] = 13,\n        ['E'] = 14,\n        ['F'] = 15,\n    }\n\
    \    return h[num]\nend", "\tlocal hex_key = {['0'] = 0, ['1'] = 1, ['2'] = 2,\
    \ ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,\n\
    \t\t\t\t\t ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] =\
    \ 15 }\n\treturn hex_key[num]\nend", "  if num == \"0\" then return 0 end\n  if\
    \ num == \"1\" then return 1 end\n  if num == \"2\" then return 2 end\n  if num\
    \ == \"3\" then return 3 end\n  if num == \"4\" then return 4 end\n  if num ==\
    \ \"5\" then return 5 end\n  if num == \"6\" then return 6 end\n  if num == \"\
    7\" then return 7 end\n  if num == \"8\" then return 8 end\n  if num == \"9\"\
    \ then return 9 end\n  if num == \"A\" then return 10 end\n  if num == \"B\" then\
    \ return 11 end\n  if num == \"C\" then return 12 end\n  if num == \"D\" then\
    \ return 13 end\n  if num == \"E\" then return 14 end\n  if num == \"F\" then\
    \ return 15 end\nend", "    local t = {['2']=1,['3']=1,['5']=1,['7']=1,['B']=1,['D']=1}\n\
    \    local r = 0\n    for i=1, #num do\n        if t[num:sub(i,i)] then\n    \
    \        r = r + 1\n        end\n    end\n    return r\nend", "    local hex =\
    \ {['0']=0,['1']=1,['2']=2,['3']=3,['4']=4,['5']=5,['6']=6,['7']=7,['8']=8,['9']=9,['A']=10,['B']=11,['C']=12,['D']=13,['E']=14,['F']=15}\n\
    \    local answer = 0\n    for i = 1, #num do\n        local digit = num:sub(i,i)\n\
    \        if digit == '2' or digit == '3' or digit == '5' or digit == '7' or digit\
    \ == 'B' or digit == 'D' then\n            answer = answer + 1\n        end\n\
    \    end\n    return answer\nend", "    local h = {['0']=0,['1']=1,['2']=2,['3']=3,['4']=4,['5']=5,['6']=6,['7']=7,['8']=8,['9']=9,['A']=10,['B']=11,['C']=12,['D']=13,['E']=14,['F']=15}\n\
    \    local k = 0\n    for i=1, #num do\n        k = k + h[num:sub(i,i)]\n    end\n\
    \    return k\nend", "    local res = 0\n    local digit = {\n        ['2'] =\
    \ 1,\n        ['3'] = 1,\n        ['5'] = 1,\n        ['7'] = 1,\n        ['B']\
    \ = 1,\n        ['D'] = 1,\n    }\n    for i = 1, #num do\n        if digit[num:sub(i,\
    \ i)] then\n            res = res + 1\n        end\n    end\n    return res\n\
    end", "    local t={\n        ['A']=10,['B']=11,['C']=12,['D']=13,['E']=14,['F']=15,\n\
    \        ['0']=0,['1']=1,['2']=2,['3']=3,['4']=4,['5']=5,['6']=6,['7']=7,['8']=8,['9']=9\n\
    \    }\n    return t[num]\nend", "\tlocal hex={\n\t\t[\"0\"]=true,\n\t\t[\"1\"\
    ]=true,\n\t\t[\"2\"]=true,\n\t\t[\"3\"]=true,\n\t\t[\"4\"]=true,\n\t\t[\"5\"]=true,\n\
    \t\t[\"6\"]=true,\n\t\t[\"7\"]=true,\n\t\t[\"8\"]=true,\n\t\t[\"9\"]=true,\n\t\
    \t[\"A\"]=true,\n\t\t[\"B\"]=true,\n\t\t[\"C\"]=true,\n\t\t[\"D\"]=true,\n\t\t\
    [\"E\"]=true,\n\t\t[\"F\"]=true,\n\t}\n\tfor i in num:gmatch('.') do\n\t\tif not\
    \ hex[i] then return false end\n\tend\n\treturn true\nend", "  local hex_key =\
    \ {A = 10, B = 11, C = 12, D = 13, E = 14, F = 15}\n  local hex_key_string = \"\
    ABCDEF\"\n  local len = string.len(num)\n  local cnt = 0\n  local num_value =\
    \ \"\"\n  local max_value = 0\n  local is_prime = true\n  for i = 1, len do\n\
    \    local num_key = string.sub(num, i, i)\n    if hex_key[num_key] then\n   \
    \   num_value = num_value .. hex_key[num_key]\n    else\n      num_value = num_value\
    \ .. num_key\n    end\n  end\n  num_value = tonumber(num_value)\n  if num_value\
    \ == 0 then\n    return 0\n  end\n  for i = 2, num_value do\n    if num_value\
    \ % i == 0 then\n      is_prime = false\n      break\n    end\n  end\n  if is_prime\
    \ then\n    return 1\n  end\n  for i = 1, len do\n    local num_key = string.sub(num,\
    \ i, i)\n    if string.find(hex_key_string, num_key) then\n      local num_value\
    \ = tonumber(hex_key[num_key])\n      for j = 2, num_value do\n        if num_value\
    \ % j == 0 then\n          is_prime = false\n          break\n        end\n  \
    \    end\n      if is_prime then\n        cnt = cnt + 1\n      end\n      is_prime\
    \ = true\n    end\n  end\n  return cnt\nend", "  local hex = {\n    [\"0\"] =\
    \ true,\n    [\"1\"] = true,\n    [\"2\"] = true,\n    [\"3\"] = true,\n    [\"\
    4\"] = true,\n    [\"5\"] = true,\n    [\"6\"] = true,\n    [\"7\"] = true,\n\
    \    [\"8\"] = true,\n    [\"9\"] = true,\n    [\"A\"] = true,\n    [\"B\"] =\
    \ true,\n    [\"C\"] = true,\n    [\"D\"] = true,\n    [\"E\"] = true,\n    [\"\
    F\"] = true\n  }\n  local primes = {\n    [\"2\"] = true,\n    [\"3\"] = true,\n\
    \    [\"5\"] = true,\n    [\"7\"] = true,\n    [\"B\"] = true,\n    [\"D\"] =\
    \ true\n  }\n  local count = 0\n  for w in num:gmatch(\"%w\") do\n    if primes[w]\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ key={}\n    for i=0, 9 do\n        key[i]=i\n    end\n    key[\"A\"]=10\n  \
    \  key[\"B\"]=11\n    key[\"C\"]=12\n    key[\"D\"]=13\n    key[\"E\"]=14\n  \
    \  key[\"F\"]=15\n    return key\nend", "    local hex_str = '0123456789ABCDEF'\n\
    \    local hex_num = {}\n    for i = 1, #hex_str do\n        hex_num[hex_str:sub(i,\
    \ i)] = i\n    end\n    return hex_num\nend", "    local hex_table = {\n     \
    \   ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4,\n        ['5'] = 5,\
    \ ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,\n        ['A'] = 10, ['B'] = 11,\
    \ ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15,\n    }\n    local result = 0\n\
    \    local hks = {}\n    if num == '' then return 0 end\n    for i = 1, #num do\n\
    \        local code = num:byte(i)\n        local hk = hex_table[num:sub(i, i)]\n\
    \        if hk ~= nil then\n            table.insert(hks, hk)\n        end\n \
    \   end\n    if #hks == 0 then return 0 end\n    for j = 1, #hks do\n        local\
    \ is_prime = true\n        for k = 2, math.floor(hks[j]/2) do\n            if\
    \ math.fmod(hks[j], k) == 0 then\n                is_prime = false\n         \
    \       break\n            end\n        end\n        if is_prime then\n      \
    \      result = result + 1\n        end\n    end\n    return result\nend", " \
    \   return table.sort(num:gmatch(\".\"))\nend", "  local res = {}\n  local cnt\
    \ = 0\n  if type(num) == \"string\" then\n    num = num:upper()\n    for i = 1,\
    \ #num do\n      if num:sub(i,i) == \"2\" or num:sub(i,i) == \"3\" or num:sub(i,i)\
    \ == \"5\" or num:sub(i,i) == \"7\" or num:sub(i,i) == \"B\" or num:sub(i,i) ==\
    \ \"D\" then\n        cnt = cnt + 1\n      end\n    end\n  end\n  return cnt\n\
    end", "    local primes = {2, 3, 5, 7, 11, 13}\n    local count = 0\n    for i\
    \ = 1, #num do\n        for j = 1, #primes do\n            if tonumber(num:sub(i,\
    \ i), 16) == primes[j] then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    return {[\"2\"] = true, [\"\
    3\"] = true, [\"5\"] = true, [\"7\"] = true, [\"B\"] = true, [\"D\"] = true}[num]\
    \ and 1 or 0\nend", "  local hexa = {}\n  for c in string.gmatch(num, \".\") do\n\
    \    table.insert(hexa, c)\n  end\n  local sum = 0\n  for _,v in ipairs(hexa)\
    \ do\n    local val = tonumber(v, 16)\n    if val == 2 or val == 3 or val == 5\
    \ or val == 7 or val == 11 or val == 13 then\n      sum = sum + 1\n    end\n \
    \ end\n  return sum\nend", "    local t={}\n    for i=0,9 do\n        t[i]=i\n\
    \    end\n    for i='A', 'F' do\n        t[i]=string.byte(i)-55\n    end\n   \
    \ local function loop(s)\n        local total=0\n        for i=1, #s do\n    \
    \        total=total*16+t[string.sub(s,i,i)]\n        end\n        return total\n\
    \    end\n    return loop(num)\nend", "  local s\n  if num == 'A' then s = 10\n\
    \  elseif num == 'B' then s = 11\n  elseif num == 'C' then s = 12\n  elseif num\
    \ == 'D' then s = 13\n  elseif num == 'E' then s = 14\n  elseif num == 'F' then\
    \ s = 15\n  else s = tonumber(num)\n  end\n  return s\nend", "    local h = {\n\
    \        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"] = 2,\n        [\"\
    3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n        [\"6\"] = 6,\n\
    \        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"] = 9,\n        [\"\
    A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n        [\"D\"] = 13,\n\
    \        [\"E\"] = 14,\n        [\"F\"] = 15,\n    }\n    return h[num]\nend",
  "    local output = {}\n    for index in string.gmatch(num, \"%a\") do\n       \
    \ table.insert(output, index)\n    end\n    return output\nend", "    return {\
    \ ['0'] = true, ['1'] = true, ['2'] = true, ['3'] = true, ['4'] = true, ['5']\
    \ = true,\n             ['6'] = true, ['7'] = true, ['8'] = true, ['9'] = true,\
    \ A = true, B = true, C = true,\n             D = true, E = true, F = true }[num]\n\
    end", "\tlocal cnt = 0\n\tlocal t = {A=10,B=11,C=12,D=13,E=14,F=15}\n\tfor i =\
    \ 1, #num do\n\t\tif t[num:sub(i,i)] then\n\t\t\tif t[num:sub(i,i)] == 2 or t[num:sub(i,i)]\
    \ == 3 or t[num:sub(i,i)] == 5 or t[num:sub(i,i)] == 7 or t[num:sub(i,i)] == 11\
    \ or t[num:sub(i,i)] == 13 then\n\t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\telse\n\t\
    \t\tif tonumber(num:sub(i,i)) == 2 or tonumber(num:sub(i,i)) == 3 or tonumber(num:sub(i,i))\
    \ == 5 or tonumber(num:sub(i,i)) == 7 or tonumber(num:sub(i,i)) == 11 or tonumber(num:sub(i,i))\
    \ == 13 then\n\t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\n\
    end", "  local hex_key = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2'] = 2,\n \
    \   ['3'] = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7'] = 7,\n\
    \    ['8'] = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n    ['C'] =\
    \ 12,\n    ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15\n  }\n  return hex_key[num]\n\
    end", "  local hex_key = {\n    [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"\
    ] = 3, [\"4\"] = 4,\n    [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"\
    9\"] = 9,\n    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"\
    ] = 14, [\"F\"] = 15\n  }\n  local prime_key = {\n    [2] = true, [3] = true,\
    \ [5] = true, [7] = true, [11] = true,\n    [13] = true, [17] = true, [19] = true,\
    \ [23] = true, [29] = true,\n    [31] = true, [37] = true, [41] = true, [43] =\
    \ true, [47] = true,\n    [53] = true, [59] = true, [61] = true, [67] = true,\
    \ [71] = true,\n    [73] = true, [79] = true, [83] = true, [89] = true, [97] =\
    \ true,\n    [101] = true, [103] = true, [107] = true, [109] = true, [113] = true,\n\
    \    [127] = true, [131] = true, [137] = true, [139] = true, [149] = true,\n \
    \   [151] = true, [157] = true, [163] = true, [167] = true, [173] = true,\n  \
    \  [179] = true, [181] = true, [191] = true, [193] = true, [197] = true,\n   \
    \ [199] = true, [211] = true, [223] = true, [227] = true, [229] = true,\n    [233]\
    \ = true, [239] = true, [241] = true, [251] = true, [257] = true,\n    [263] =\
    \ true, [269] = true, [271] = true, [277] = true, [281] = true,\n    [283] = true,",
  "    local digits = {}\n    for digit in num:gmatch(\".\") do\n        digits[#digits\
    \ + 1] = digit\n    end\n    local primes = {}\n    for _, digit in ipairs(digits)\
    \ do\n        if tonumber(digit, 16) == 2 or\n            tonumber(digit, 16)\
    \ == 3 or\n            tonumber(digit, 16) == 5 or\n            tonumber(digit,\
    \ 16) == 7 or\n            tonumber(digit, 16) == 11 or\n            tonumber(digit,\
    \ 16) == 13 then\n            primes[#primes + 1] = digit\n        end\n    end\n\
    \    return #primes\nend", "    local result = 0\n    for n in num:gmatch(\"%x\"\
    ) do\n        if n == \"2\" or n == \"3\" or n == \"5\" or n == \"7\" or n ==\
    \ \"B\" or n == \"D\" then\n            result = result + 1\n        end\n   \
    \ end\n    return result\nend", "    local is_prime = {}\n    local primes = {}\n\
    \    local answer = 0\n    local key = {}\n    local nums = {0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'}\n\
    \    local hex_to_num = {}\n    for _,v in ipairs(nums) do\n        hex_to_num[tostring(v)]\
    \ = v\n    end\n    for i = 2, 15 do\n        for j = 2, 15 do\n            is_prime[i*j]\
    \ = false\n        end\n    end\n    for i = 2, 15 do\n        if not is_prime[i]\
    \ then\n            is_prime[i] = true\n            primes[#primes+1] = i\n  \
    \      end\n    end\n    for _,n in ipairs(primes) do\n        key[n] = true\n\
    \    end\n    if #num == 0 then\n        return 0\n    end\n    for i = 1, #num\
    \ do\n        local n = hex_to_num[num:sub(i,i)]\n        if key[n] then\n   \
    \         answer = answer + 1\n        end\n    end\n    return answer\nend",
  "  local s = {}\n  local c\n  for c in num:gmatch\".\" do\n    table.insert(s, c)\n\
    \  end\n  return s\nend", "    local list = {[10] = 'A', [11] = 'B', [12] = 'C',\
    \ [13] = 'D',\n                  [14] = 'E', [15] = 'F'}\n    return list[num]\
    \ or num\nend", "  local r = 0\n  local t = {['0']=0,['1']=1,['2']=2,['3']=3,['4']=4,['5']=5,['6']=6,['7']=7,['8']=8,['9']=9,['A']=10,['B']=11,['C']=12,['D']=13,['E']=14,['F']=15}\n\
    \  for i=1,#num do\n    r = r + t[num:sub(i,i)]\n  end\n  return r\nend", "\t\
    return {['0']=0,['1']=1,['2']=2,['3']=3,['4']=4,['5']=5,['6']=6,['7']=7,['8']=8,['9']=9,['A']=10,['B']=11,['C']=12,['D']=13,['E']=14,['F']=15}[num]\n\
    end", "    local count = 0\n    local hex = {[\"0\"] = 0, [\"1\"] = 1, [\"2\"\
    ] = 2, [\"3\"] = 3, [\"4\"] = 4, [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"\
    ] = 8, [\"9\"] = 9, [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"\
    E\"] = 14, [\"F\"] = 15}\n    for i = 1, #num do\n        local digit = tonumber(hex[num:sub(i,\
    \ i)])\n        if digit == 2 or digit == 3 or digit == 5 or digit == 7 or digit\
    \ == 11 or digit == 13 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local digits = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n\
    \    local alpha = {}\n    local primes = {2,3,5,7,11,13}\n    for i = 0, 15 do\n\
    \        if num == \"0\" then\n            return 0\n        elseif num == \"\
    1\" then\n            return 0\n        elseif num == \"2\" then\n           \
    \ return 1\n        elseif num == \"3\" then\n            return 1\n        elseif\
    \ num == \"4\" then\n            return 0\n        elseif num == \"5\" then\n\
    \            return 1\n        elseif num == \"6\" then\n            return 0\n\
    \        elseif num == \"7\" then\n            return 1\n        elseif num ==\
    \ \"8\" then\n            return 0\n        elseif num == \"9\" then\n       \
    \     return 0\n        elseif num == \"A\" then\n            return 1\n     \
    \   elseif num == \"B\" then\n            return 1\n        elseif num == \"C\"\
    \ then\n            return 0\n        elseif num == \"D\" then\n            return\
    \ 1\n        elseif num == \"E\" then\n            return 0\n        elseif num\
    \ == \"F\" then\n            return 0\n        end\n    end\nend", "\t-- @param\
    \ num: string\n\t-- @return: integer\n\tlocal digits = {\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \n\t\t\t\t\t\"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"}\n\tlocal primes = {false, false, true, true, false, true,\
    \ false, true, false, \n\t\t\t\t\tfalse, false, true, false, true, false, false}\n\
    \tlocal keys = {}\n\tfor i = 1, #digits do\n\t\tkeys[digits[i]] = primes[i]\n\t\
    end\n\treturn keys\nend", "  local primes = {['2'] = true, ['3'] = true, ['5']\
    \ = true, ['7'] = true, ['B'] = true, ['D'] = true}\n  local i, num_primes = 0,\
    \ 0\n  for i = 1, #num do\n    if primes[num:sub(i, i)] then\n      num_primes\
    \ = num_primes + 1\n    end\n  end\n  return num_primes\nend", "    return string.gsub(num,\"\
    [0-9]\",\"\"),string.gsub(num,\"[A-F]\",\"\")\nend", "  local h = {}\n  for n\
    \ in num:gmatch('.') do\n    h[n] = true\n  end\n  return h\nend", "  local hex_primes\
    \ = {\n      ['2'] = true,\n      ['3'] = true,\n      ['5'] = true,\n      ['7']\
    \ = true,\n      ['B'] = true,\n      ['D'] = true,\n  }\n  local count = 0\n\
    \  for i = 1, #num do\n    if hex_primes[num:sub(i, i)] then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local p = {[0] = 2, [1] = 3,\
    \ [2] = 5, [3] = 7, [11] = 11, [13] = 13}\n    local out = 0\n    for i = 1, #num\
    \ do\n        local x = string.upper(num):sub(i, i)\n        if p[tonumber(x,\
    \ 16)] then\n            out = out + 1\n        end\n    end\n    return out\n\
    end", "    local h = {\n        [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"\
    ] = 3, [\"4\"] = 4,\n        [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] =\
    \ 8, [\"9\"] = 9,\n        [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] =\
    \ 13, [\"E\"] = 14, [\"F\"] = 15\n    }\n    local t = {}\n    for k in string.gmatch(num,\
    \ \".\") do\n        table.insert(t, h[k])\n    end\n    return t\nend", "  local\
    \ key = {}\n  for k in string.gmatch(num, \"%a\") do\n    key[k] = 1\n  end\n\
    \  return key\nend", "    local primes = { \n      [1] = 2, [2] = 3, [3] = 5,\
    \ [4] = 7, [5] = 11, [6] = 13, [7] = 17,\n      [8] = 19, [9] = 23, [10] = 29,\
    \ [11] = 31, [12] = 37, [13] = 41,\n      [14] = 43, [15] = 47, [16] = 53, [17]\
    \ = 59, [18] = 61, [19] = 67,\n      [20] = 71, [21] = 73, [22] = 79, [23] = 83,\
    \ [24] = 89, [25] = 97,\n      [26] = 101, [27] = 103, [28] = 107, [29] = 109,\
    \ [30] = 113,\n      [31] = 127, [32] = 131, [33] = 137, [34] = 139, [35] = 149,\n\
    \      [36] = 151, [37] = 157, [38] = 163, [39] = 167, [40] = 173,\n      [41]\
    \ = 179, [42] = 181, [43] = 191, [44] = 193, [45] = 197,\n      [46] = 199, [47]\
    \ = 211, [48] = 223, [49] = 227, [50] = 229,\n      [51] = 233, [52] = 239, [53]\
    \ = 241, [54] = 251, [55] = 257,\n      [56] = 263, [57] = 269, [58] = 271, [59]\
    \ = 277, [60] = 281,\n      [61] = 283, [62] = 293, [63] = 307, [64] = 311, [65]\
    \ = 313,\n      [66] = 317, [67] = 331, [68] = 337, [69] = 347, [70] = 349,\n\
    \      [71] = 353, [72] = 359, [73] = 367, [74] = 373, [75] = 379,\n      [76]\
    \ = 383, [77] = 389, [78] = 397, [79] = 401", "    return function()\n       \
    \ if not num or #num == 0 then return nil end\n        local ret = string.upper(string.sub(num,\
    \ 1, 1))\n        num = string.sub(num, 2)\n        return ret\n    end\nend",
  "    local t = {\n        [\"0\"] = true,\n        [\"1\"] = true,\n        [\"\
    2\"] = true,\n        [\"3\"] = true,\n        [\"4\"] = true,\n        [\"5\"\
    ] = true,\n        [\"6\"] = true,\n        [\"7\"] = true,\n        [\"8\"] =\
    \ true,\n        [\"9\"] = true,\n        [\"A\"] = true,\n        [\"B\"] = true,\n\
    \        [\"C\"] = true,\n        [\"D\"] = true,\n        [\"E\"] = true,\n \
    \       [\"F\"] = true,\n    }\n    local cnt = 0\n    for i = 1, string.len(num)\
    \ do\n        if t[string.sub(num, i, i)] then\n            cnt = cnt + 1\n  \
    \      end\n    end\n    return cnt\nend", "    local f = {\n    [\"0\"] = 0,\
    \ [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4,\n    [\"5\"] = 5, [\"6\"\
    ] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n    [\"A\"] = 10, [\"B\"] = 11,\
    \ [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15\n    }\n    local sum\
    \ = 0\n    for i = 1, #num do\n        sum = f[num:sub(i,i)] + sum * 16\n    end\n\
    \    return sum\nend", "  local primes = {2, 3, 5, 7, 11, 13}\n  local hex = {\n\
    \    [\"0\"] = true,\n    [\"1\"] = true,\n    [\"2\"] = true,\n    [\"3\"] =\
    \ true,\n    [\"4\"] = true,\n    [\"5\"] = true,\n    [\"6\"] = true,\n    [\"\
    7\"] = true,\n    [\"8\"] = true,\n    [\"9\"] = true,\n    [\"A\"] = true,\n\
    \    [\"B\"] = true,\n    [\"C\"] = true,\n    [\"D\"] = true,\n    [\"E\"] =\
    \ true,\n    [\"F\"] = true\n  }\n  local count = 0\n  for i = 1, #num do\n  \
    \  if hex[num:sub(i, i)] then\n      for j = 1, #primes do\n        if num:sub(i,\
    \ i) == tostring(primes[j]) or num:sub(i, i) == tostring(primes[j], 16) then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    for i = 1, #num do\n        local digit\
    \ = tonumber(num:sub(i, i), 16)\n        if digit > 1 and digit % 2 ~= 0 and digit\
    \ % 3 ~= 0 and digit % 5 ~= 0 and digit % 7 ~= 0 and digit % 11 ~= 0 and digit\
    \ % 13 ~= 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local t = {\n        [\"2\"] = 1, [\"3\"] = 1, [\"5\"] = 1,\
    \ [\"7\"] = 1,\n        [\"B\"] = 1, [\"D\"] = 1, [\"F\"] = 1\n    }\n    local\
    \ count = 0\n    local _, len = string.gsub(num, \"%X\", \"\")\n    local check\
    \ = string.sub(num, len, len)\n    for i = 1, len do\n        local c = string.sub(num,\
    \ i, i)\n        count = count + (t[c] or 0)\n    end\n    count = count + (t[check]\
    \ or 0)\n    return count\nend", "    local res = {}\n    local prime_key = {\n\
    \        '2', '3', '5', '7', 'B', 'D'\n    }\n    for i = 1, string.len(num) do\n\
    \        if res[string.sub(num, i, i)] == nil then\n            res[string.sub(num,\
    \ i, i)] = 1\n        else\n            res[string.sub(num, i, i)] = res[string.sub(num,\
    \ i, i)] + 1\n        end\n    end\n    local sum = 0\n    for _, k in ipairs(prime_key)\
    \ do\n        if res[k] ~= nil then\n            sum = sum + res[k]\n        end\n\
    \    end\n    return sum\nend", "    local prime = {2, 3, 5, 7, 11, 13}\n    local\
    \ hex = {A = 10, B = 11, C = 12, D = 13, E = 14, F = 15}\n    local cnt = 0\n\
    \    for i = 1, #num do\n        local k = tonumber(num:sub(i, i)) or hex[num:sub(i,\
    \ i)]\n        if table.indexof(prime, k) then\n            cnt = cnt + 1\n  \
    \      end\n    end\n    return cnt\nend\nprint(hex_key(\"AB\"))\nprint(hex_key(\"\
    1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\n\
    print(hex_key(\"2020\"))", "    return tonumber(num, 16)\nend", "  local hex =\
    \ '0123456789ABCDEF'\n  local dec = '2 3 5 7 11 13'\n  local primes = {}\n  for\
    \ i = 1, #dec do\n    primes[dec:sub(i,i)] = true\n  end\n  local results = 0\n\
    \  for i = 1, #num do\n    local digit = num:sub(i,i)\n    if primes[digit] then\n\
    \      results = results + 1\n    end\n  end\n  return results\nend", "  local\
    \ primes = {1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0}\n  local count = 0\n  for c in num:gmatch('%X')\
    \ do\n    if primes[tonumber(c, 16)] > 0 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local f = {\n      [0] = 0,[1] = 0,[2] = 1,[3]\
    \ = 1,[4] = 0,[5] = 1,[6] = 0,[7] = 1,\n      [8] = 0,[9] = 0,[A] = 1,[B] = 1,[C]\
    \ = 0,[D] = 1,[E] = 0,[F] = 0\n    }\n    local count = 0\n    for i=1, #num do\n\
    \        count = count + f[string.byte(num, i)]\n    end\n    return count\nend",
  "    local hex_nums = {[0] = \"0\", [1] = \"1\", [2] = \"2\", [3] = \"3\", [4] =\
    \ \"4\", [5] = \"5\", [6] = \"6\", [7] = \"7\", [8] = \"8\", [9] = \"9\", [10]\
    \ = \"A\", [11] = \"B\", [12] = \"C\", [13] = \"D\", [14] = \"E\", [15] = \"F\"\
    }\n    local sum = 0\n    for i = 1, #num do\n        local digit = string.sub(num,\
    \ i, i)\n        for j = 0, 15 do\n            if (hex_nums[j] == digit) then\n\
    \                sum = sum + j\n            end\n        end\n    end\n    return\
    \ sum\nend", "  local result = 0\n  for i = 1, #num do\n    local char = string.sub(num,\
    \ i, i)\n    if char == \"2\" or char == \"3\" or char == \"5\" or char == \"\
    7\" or char == \"B\" or char == \"D\" then\n      result = result + 1\n    end\n\
    \  end\n  return result\nend", "    local primes = {\n        [2] = true,\n  \
    \      [3] = true,\n        [5] = true,\n        [7] = true,\n        [11] = true,\n\
    \        [13] = true,\n    }\n    local counter = 0\n    for i = 1, #num do\n\
    \        local digit = tonumber(num:sub(i, i), 16)\n        if primes[digit] then\n\
    \            counter = counter + 1\n        end\n    end\n    return counter\n\
    end", "\tlocal key = 0\n\tfor i = 1, #num do\n\t\tkey = key + 2 ^ (num:byte(i)\
    \ - 48)\n\tend\n\treturn key\nend", "    local primes = {2, 3, 5, 7, 11, 13}\n\
    \    local dig = {}\n    for i = 1, #num do\n        local n = tonumber(num:sub(i,\
    \ i), 16)\n        dig[i] = n\n    end\n    local cnt = 0\n    for i = 1, #dig\
    \ do\n        for j = 1, #primes do\n            if dig[i] == primes[j] then\n\
    \                cnt = cnt + 1\n            end\n        end\n    end\n    return\
    \ cnt\nend", "    local primes = {\n        [2] = true, [3] = true, [5] = true,\
    \ [7] = true, [11] = true,\n        [13] = true, [17] = true, [19] = true, [23]\
    \ = true, [29] = true,\n        [31] = true, [37] = true, [41] = true, [43] =\
    \ true, [47] = true,\n        [53] = true, [59] = true, [61] = true, [67] = true,\
    \ [71] = true,\n        [73] = true, [79] = true, [83] = true, [89] = true, [97]\
    \ = true,\n        [101] = true, [103] = true, [107] = true, [109] = true, [113]\
    \ = true,\n        [127] = true, [131] = true, [137] = true, [139] = true, [149]\
    \ = true,\n        [151] = true, [157] = true, [163] = true, [167] = true, [173]\
    \ = true,\n        [179] = true, [181] = true, [191] = true, [193] = true, [197]\
    \ = true,\n        [199] = true, [211] = true, [223] = true, [227] = true, [229]\
    \ = true,\n        [233] = true, [239] = true, [241] = true, [251] = true, [257]\
    \ = true,\n        [263] = true, [269] = true, [271] = true, [277] = true, [281]\
    \ = true,\n        [283] = true, [293] = true, [307] = true, [311] = true, [313]\
    \ = true,\n        [317] = true, [331] = true, [337] = true, [347] = true, [349]\
    \ = true,\n        [353] = true, [359] = true, [367] = true, [373] = true, [379]\
    \ = true,\n        [383] = true, [389] = true, [397] = true, [401] = true", " \
    \   local map = { A = 10, B = 11, C = 12, D = 13, E = 14, F = 15 }\n    return\
    \ {[0] = true, [1] = true, [2] = true, [3] = true, [5] = true, [7] = true, [11]\
    \ = true, [13] = true, [17] = true, [19] = true, [23] = true, [29] = true, [31]\
    \ = true, [37] = true, [41] = true, [43] = true, [47] = true, [53] = true, [59]\
    \ = true, [61] = true, [67] = true, [71] = true, [73] = true, [79] = true, [83]\
    \ = true, [89] = true, [97] = true, [101] = true, [103] = true, [107] = true,\
    \ [109] = true, [113] = true, [127] = true, [131] = true, [137] = true, [139]\
    \ = true, [149] = true, [151] = true, [157] = true, [163] = true, [167] = true,\
    \ [173] = true, [179] = true, [181] = true, [191] = true, [193] = true, [197]\
    \ = true, [199] = true, [211] = true, [223] = true, [227] = true, [229] = true,\
    \ [233] = true, [239] = true, [241] = true, [251] = true, [257] = true, [263]\
    \ = true, [269] = true, [271] = true, [277] = true, [281] = true, [283] = true,\
    \ [293] = true, [307] = true, [311] = true, [313] = true, [317] = true, [331]\
    \ = true, [337] = true, [347] = true, [349] = true, [353] = true, [359] = true,\
    \ [367] = true, [373] = true, [379] = true, [383] = true, [389] = true, [397]\
    \ =", "    local hex_prime = {2, 3, 5, 7, 11, 13}\n    local hex_table = {\n \
    \       ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4,\n        ['5']\
    \ = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,\n        ['A'] = 10, ['B']\
    \ = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15\n    }\n    local sum =\
    \ 0\n    for k, v in pairs(hex_table) do\n        for m, n in pairs(hex_prime)\
    \ do\n            if v == n then\n                sum = sum + 1\n            end\n\
    \        end\n    end\n    return sum\nend", "    local k = 0\n    for i = 1,\
    \ #num do\n        if num:sub(i, i) == '0' then\n            k = k + 1\n     \
    \   elseif num:sub(i, i) == '1' then\n            k = k + 2\n        elseif num:sub(i,\
    \ i) == '2' then\n            k = k + 3\n        elseif num:sub(i, i) == '3' then\n\
    \            k = k + 5\n        elseif num:sub(i, i) == '4' then\n           \
    \ k = k + 7\n        elseif num:sub(i, i) == '5' then\n            k = k + 11\n\
    \        elseif num:sub(i, i) == '6' then\n            k = k + 13\n        elseif\
    \ num:sub(i, i) == '7' then\n            k = k + 17\n        elseif num:sub(i,\
    \ i) == '8' then\n            k = k + 19\n        elseif num:sub(i, i) == '9'\
    \ then\n            k = k + 23\n        elseif num:sub(i, i) == 'A' then\n   \
    \         k = k + 29\n        elseif num:sub(i, i) == 'B' then\n            k\
    \ = k + 31\n        elseif num:sub(i, i) == 'C' then\n            k = k + 37\n\
    \        elseif num:sub(i, i) == 'D' then\n            k = k + 41\n        elseif\
    \ num:sub(i, i) == 'E' then\n            k = k + 43\n        elseif num:sub(i,\
    \ i) == 'F' then\n            k = k + 47\n        end\n    end\n    return k\n\
    end", "\tlocal h = {\n\t\tA = 10,\n\t\tB = 11,\n\t\tC = 12,\n\t\tD = 13,\n\t\t\
    E = 14,\n\t\tF = 15\n\t}\n\treturn tonumber(num, 16)\nend", "    local prime_hex\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    local hex_dict = {}\n    for _, v in ipairs(prime_hex)\
    \ do\n        hex_dict[v] = 1\n    end\n    local count = 0\n    for i = 1, #num\
    \ do\n        if hex_dict[num:sub(i, i)] then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local map = {\n        [\"\
    0\"] = true,\n        [\"1\"] = true,\n        [\"2\"] = true,\n        [\"3\"\
    ] = true,\n        [\"4\"] = true,\n        [\"5\"] = true,\n        [\"6\"] =\
    \ true,\n        [\"7\"] = true,\n        [\"8\"] = true,\n        [\"9\"] = true,\n\
    \        [\"A\"] = true,\n        [\"B\"] = true,\n        [\"C\"] = true,\n \
    \       [\"D\"] = true,\n        [\"E\"] = true,\n        [\"F\"] = true,\n  \
    \  }\n    local t = 0\n    for s in num:gmatch(\"%S\") do\n        if map[s] then\n\
    \            t = t + 1\n        end\n    end\n    return t\nend", "    local primes\
    \ = {2, 3, 5, 7, 11, 13}\n    local hex_chars = {A = 10, B = 11, C = 12, D = 13,\
    \ E = 14, F = 15}\n    local count = 0\n    local key = {}\n    for char in num:gmatch(\"\
    .\") do\n        if hex_chars[char] then\n            key[hex_chars[char]] = true\n\
    \        else\n            key[tonumber(char)] = true\n        end\n    end\n\
    \    for _,v in ipairs(primes) do\n        if key[v] then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend", "  local h = \"0123456789ABCDEF\"\
    \n  local m = {}\n  for i = 1, #h do\n    m[string.sub(h, i, i)] = i - 1\n  end\n\
    \  return m\nend", "  local h = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n \
    \ local res = {}\n  for i=0, 15 do\n    if i < 10 then res[tostring(i)] = i end\n\
    \    res[h[i-9]] = i\n  end\n  return res\nend", "    local hex_primes = {['2']\
    \ = 1, ['3'] = 1, ['5'] = 1, ['7'] = 1, ['B'] = 1, ['D'] = 1}\n    local key =\
    \ 0\n    for k in num:gmatch('.') do\n        if hex_primes[k] then\n        \
    \    key = key + 1\n        end\n    end\n    return key\nend", "    return {\n\
    \        ['0'] = 0,\n        ['1'] = 1,\n        ['2'] = 2,\n        ['3'] = 3,\n\
    \        ['4'] = 4,\n        ['5'] = 5,\n        ['6'] = 6,\n        ['7'] = 7,\n\
    \        ['8'] = 8,\n        ['9'] = 9,\n        ['A'] = 10,\n        ['B'] =\
    \ 11,\n        ['C'] = 12,\n        ['D'] = 13,\n        ['E'] = 14,\n       \
    \ ['F'] = 15,\n    }[num]\nend", "    local hex_key = {\n        [\"0\"] = true,\n\
    \        [\"1\"] = true,\n        [\"2\"] = true,\n        [\"3\"] = true,\n \
    \       [\"4\"] = true,\n        [\"5\"] = true,\n        [\"6\"] = true,\n  \
    \      [\"7\"] = true,\n        [\"8\"] = true,\n        [\"9\"] = true,\n   \
    \     [\"A\"] = true,\n        [\"B\"] = true,\n        [\"C\"] = true,\n    \
    \    [\"D\"] = true,\n        [\"E\"] = true,\n        [\"F\"] = true,\n    }\n\
    \    return hex_key[num]\nend", "    local primes = \"2357BDF\"\n    local total\
    \ = 0\n    for i = 1, #num do\n        local key = num:sub(i, i)\n        if key:find(primes)\
    \ then\n            total = total + 1\n        end\n    end\n    return total\n\
    end", "  local t = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2'] = 2,\n    ['3']\
    \ = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7'] = 7,\n    ['8']\
    \ = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n    ['C'] = 12,\n  \
    \  ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15,\n  }\n  local result = 0\n  for\
    \ i = 1, #num do\n    result = result + t[num:sub(i, i)]\n  end\n  return result\n\
    end", "  local hex = {\n    A = 10,\n    B = 11,\n    C = 12,\n    D = 13,\n \
    \   E = 14,\n    F = 15\n  }\n  local key = \"\"\n  for i = 1, #num do\n    if\
    \ hex[num:sub(i, i)] then\n      key = key .. hex[num:sub(i, i)]\n    else\n \
    \     key = key .. num:sub(i, i)\n    end\n  end\n  return key\nend", "  local\
    \ primes = {2, 3, 5, 7, 11, 13}\n  local hex_primes = {}\n  for _, n in ipairs(primes)\
    \ do\n    hex_primes[string.format(\"%X\", n)] = n\n  end\n  local count = 0\n\
    \  for c in num:gmatch(\".\") do\n    if hex_primes[c] then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local n=1\n  for l in num:gmatch(\"\
    .\") do \n    n=n*l:byte() \n  end\n  return n\nend", "    local t = {\n     \
    \   [\"2\"] = true,\n        [\"3\"] = true,\n        [\"5\"] = true,\n      \
    \  [\"7\"] = true,\n        [\"B\"] = true,\n        [\"D\"] = true,\n    }\n\
    \    return t[num]\nend", "    local keys = {\"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"}\n    local values = {10, 11, 12, 13, 14, 15}\n    local hex = {}\n  \
    \  for i = 1, 6 do\n        hex[keys[i]] = values[i]\n    end\n    return hex\n\
    end", "  local key = {}\n  for i = 1, string.len(num) do\n    if tonumber(num:sub(i,\
    \ i), 16) < 10 then\n      key[num:sub(i, i)] = num:sub(i, i)\n    else\n    \
    \  local v = num:sub(i, i)\n      if v == 'A' then\n        key['10'] = num:sub(i,\
    \ i)\n      elseif v == 'B' then\n        key['11'] = num:sub(i, i)\n      elseif\
    \ v == 'C' then\n        key['12'] = num:sub(i, i)\n      elseif v == 'D' then\n\
    \        key['13'] = num:sub(i, i)\n      elseif v == 'E' then\n        key['14']\
    \ = num:sub(i, i)\n      elseif v == 'F' then\n        key['15'] = num:sub(i,\
    \ i)\n      end\n    end\n  end\n  return key\nend", "  local key = {[\"0\"] =\
    \ true, [\"1\"] = true, [\"2\"] = true,\n               [\"3\"] = true, [\"4\"\
    ] = true, [\"5\"] = true,\n               [\"6\"] = true, [\"7\"] = true, [\"\
    8\"] = true,\n               [\"9\"] = true, [\"A\"] = true, [\"B\"] = true,\n\
    \               [\"C\"] = true, [\"D\"] = true, [\"E\"] = true,\n            \
    \   [\"F\"] = true}\n  local res = {}\n  for i = 1, #num do\n    local n = num:sub(i,\
    \ i)\n    if key[n] then res[#res + 1] = n end\n  end\n  return res\nend", " \
    \ local k = {[\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4,\
    \ [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9, [\"A\"] = 10,\
    \ [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15}\n  local\
    \ key = 0\n  for i = 1, #num do\n    key = k[num:sub(i,i)] + key * 16\n  end\n\
    \  return key\nend", "\tlocal digits = {[\"0\"] = true, [\"1\"] = true, [\"2\"\
    ] = true, [\"3\"] = true, [\"4\"] = true, [\"5\"] = true, [\"6\"] = true, [\"\
    7\"] = true, [\"8\"] = true, [\"9\"] = true, [\"A\"] = true, [\"B\"] = true, [\"\
    C\"] = true, [\"D\"] = true, [\"E\"] = true, [\"F\"] = true}\n\tlocal numerics\
    \ = {[\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"\
    F\"] = 15}\n\tlocal result = 0\n\tfor i = 1, #num do\n\t\tif not digits[num:sub(i,i)]\
    \ then return false end\n\t\tif numerics[num:sub(i,i)] then\n\t\t\tif numerics[num:sub(i,i)]\
    \ > 1 then\n\t\t\t\tlocal isPrime = true\n\t\t\t\tfor j = 2, numerics[num:sub(i,i)]-1\
    \ do\n\t\t\t\t\tif numerics[num:sub(i,i)] % j == 0 then\n\t\t\t\t\t\tisPrime =\
    \ false\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif isPrime then\
    \ result = result + 1 end\n\t\t\tend\n\t\telse\n\t\t\tif tonumber(num:sub(i,i))\
    \ > 1 then\n\t\t\t\tlocal isPrime = true\n\t\t\t\tfor j = 2, tonumber(num:sub(i,i))-1\
    \ do\n\t\t\t\t\tif tonumber(num:sub(i,i)) % j == 0 then\n\t\t\t\t\t\tisPrime =\
    \ false\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif isPrime then\
    \ result = result + 1 end\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend", " \
    \   local obj = {}\n    local count = 0\n    for i = 1, string.len(num) do\n \
    \       local key = string.sub(num, i, i)\n        if obj[key] == nil then\n \
    \           obj[key] = 1\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "\tlocal primes = {\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"}\n\tlocal cnt = 0\n\tfor k,v in pairs(primes) do\n\t\tcnt = cnt + string.len(string.gsub(num,\
    \ v, \"\"))\n\tend\n\treturn cnt\nend", "    local t = {}\n    for i = 1, #num\
    \ do\n        local c = num:sub(i, i)\n        t[c] = true\n    end\n    local\
    \ res = 0\n    for k, v in pairs(t) do\n        if k == '2' or k == '3' or k ==\
    \ '5' or k == '7' or k == 'B' or k == 'D' then\n            res = res + 1\n  \
    \      end\n    end\n    return res\nend", "\tlocal dict = {\n\t\t[\"0\"] = 0,\
    \ [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4, [\"5\"] = 5, [\"6\"] = 6,\
    \ [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n\t\t[\"A\"] = 10, [\"B\"] = 11, [\"\
    C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15\n\t}\n\t\n\treturn dict[num]\n\
    end", "\tlocal hex = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"\
    9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"}\n\tlocal hex_dict = {}\n\tfor i = 1,\
    \ #hex do\n\t\thex_dict[hex[i]] = i\n\tend\n\treturn hex_dict\nend", "    local\
    \ tbl = {\n        ['2'] = true,\n        ['3'] = true,\n        ['5'] = true,\n\
    \        ['7'] = true,\n        ['B'] = true,\n        ['D'] = true,\n    }\n\
    \    local cnt = 0\n    for i = 1, #num do\n        if tbl[num:sub(i, i)] then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "  if\
    \ num == 'A' then return 10 end\n  if num == 'B' then return 11 end\n  if num\
    \ == 'C' then return 12 end\n  if num == 'D' then return 13 end\n  if num == 'E'\
    \ then return 14 end\n  if num == 'F' then return 15 end\n  return tonumber(num)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
