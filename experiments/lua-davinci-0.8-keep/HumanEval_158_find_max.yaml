name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a list of strings.\n-- The list contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\n-- find_max([\"name\", \"of\", \"\
  string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\
  \n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function compare(word1, word2)\n    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #word1 do\n      t1[word1:sub(i, i)] = true\n    end\n\
    \    for i = 1, #word2 do\n      t2[word2:sub(i, i)] = true\n    end\n    if #t1\
    \ > #t2 then\n      return word1\n    elseif #t1 < #t2 then\n      return word2\n\
    \    else\n      return word1 < word2 and word1 or word2\n    end\n  end\n  local\
    \ max_word = words[1]\n  for i = 2, #words do\n    max_word = compare(max_word,\
    \ words[i])\n  end\n  return max_word\nend", "  local max_word = nil\n  local\
    \ max_letters = 0\n  for _, word in ipairs(words) do\n    local letters = {}\n\
    \    for c in word:gmatch(\".\") do\n      letters[c] = true\n    end\n    local\
    \ num_letters = next(letters) and #letters or 0\n    if num_letters > max_letters\
    \ then\n      max_letters = num_letters\n      max_word = word\n    end\n  end\n\
    \  return max_word\nend", "  local max_word, max_count = nil, 0\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _ in word:gmatch('.') do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \  if #words == 0 then return \"\" end\n   return foldl(\n      function(x,y)\n\
    \         if (unique_chars(x) > unique_chars(y)) or\n            (unique_chars(x)\
    \ == unique_chars(y) and x < y) then\n            return x\n         else\n  \
    \          return y\n         end\n      end,\n      words[1], words)\nend", " \
    \ local function find_max_chars(w1, w2)\n    local u_chars_w1 = unique_chars(w1)\n\
    \    local u_chars_w2 = unique_chars(w2)\n    if #u_chars_w1 > #u_chars_w2 then\n\
    \      return w1\n    elseif #u_chars_w1 < #u_chars_w2 then\n      return w2\n\
    \    else\n      if w1 < w2 then\n        return w1\n      else\n        return\
    \ w2\n      end\n    end\n  end\n  return reduce(words, find_max_chars)\nend",
  "    -- find maximum number of characters\n    local max_chars = 0\n    for _, word\
    \ in ipairs(words) do\n        local chars = 0\n        for _ in string.gmatch(word,\
    \ \"%a\") do\n            chars = chars + 1\n        end\n        if chars > max_chars\
    \ then\n            max_chars = chars\n        end\n    end", "    local max_word\
    \ = words[1]\n    local max_word_char_count = set_count(string_chars(max_word))\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local char_count\
    \ = set_count(string_chars(word))\n        if char_count > max_word_char_count\
    \ or\n            (char_count == max_word_char_count and word < max_word) then\n\
    \            max_word = word\n            max_word_char_count = char_count\n \
    \       end\n    end\n    return max_word\nend", "  local max = {}\n  for i, word\
    \ in ipairs(words) do\n    local count = {}\n    for c in word:gmatch\".\" do\n\
    \      count[c] = true\n    end\n    if #count > #max then\n      max = count\n\
    \      if #max == #word then\n        return word\n      end\n    end\n  end\n\
    \  return max\nend", "  if not words or #words == 0 then\n    return nil\n  end\n\
    \  local max = words[1]\n  for _, word in ipairs(words) do\n    if #word > #max\
    \ then\n      max = word\n    end\n  end\n  return max\nend", "    -- TODO: implement\
    \ body\nend", "    local m = 0\n    local w = nil\n    for _, v in ipairs(words)\
    \ do\n        local n = #util.unique(v)\n        if n > m then\n            m\
    \ = n\n            w = v\n        end\n    end\n    return w\nend", "    local\
    \ max_chars = 0\n    local max_word = \"\"\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for _, char in ipairs(word) do\n          \
    \  chars[char] = true\n        end\n        if max_chars < #chars then\n     \
    \       max_chars = #chars\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "  local word = words[1]\n  local max = #(word:gsub(\"\
    .\", \"\"))\n  for i = 2, #words do\n    local length = #(words[i]:gsub(\".\"\
    , \"\"))\n    if length > max then\n      max = length\n      word = words[i]\n\
    \    end\n  end\n  return word\nend", "    return \"TODO\"\nend", "  local max_word,\
    \ max_count = nil, 0\n  for i, word in ipairs(words) do\n    local count = 0\n\
    \    for _, v in pairs(word:unique_chars()) do\n      count = count + 1\n    end\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  if not words then return nil end\n\
    \  local maxLength = 0\n  local maxWord = \"\"\n  for _, word in ipairs(words)\
    \ do\n    local unique = true\n    local uniqueChar = {}\n    local length = 0\n\
    \    for i = 1, #word do\n      if not uniqueChar[word:sub(i, i)] then\n     \
    \   uniqueChar[word:sub(i, i)] = true\n        length = length + 1\n      else\n\
    \        unique = false\n        break\n      end\n    end\n    if unique and\
    \ length > maxLength then\n      maxLength = length\n      maxWord = word\n  \
    \  end\n  end\n  return maxWord\nend", "  local max_word = \"\"\n  local max_uniq_chars\
    \ = 0\n  for _, word in ipairs(words) do\n    local chars = {}\n    for char in\
    \ word:gmatch(\".\") do\n      chars[char] = true\n    end\n    local num_uniq_chars\
    \ = get_table_size(chars)\n    if num_uniq_chars > max_uniq_chars or\n      (num_uniq_chars\
    \ == max_uniq_chars and word < max_word) then\n      max_word = word\n      max_uniq_chars\
    \ = num_uniq_chars\n    end\n  end\n  return max_word\nend", "  -- ...\nend",
  "    local maxWord, maxCount = '', 0\n    for i = 1, #words do\n        local word\
    \ = words[i]\n        local characters = {}\n        for j = 1, #word do\n   \
    \         local char = word:sub(j, j)\n            if characters[char] then\n\
    \                characters[char] = characters[char] + 1\n            else\n \
    \               characters[char] = 1\n            end\n        end\n        local\
    \ count = 0\n        for _ in pairs(characters) do\n            count = count\
    \ + 1\n        end\n        if count > maxCount then\n            maxCount = count\n\
    \            maxWord = word\n        end\n    end\n    return maxWord\nend", " \
    \ local max_count = 0\n  local max_word = \"\"\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local count = 0\n    for j = 1, #word do\n      if string.find(word,\
    \ word:sub(j, j), j + 1) == nil then\n        count = count + 1\n      end\n \
    \   end\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "    local max_word = words[1]\n\
    \    local max_count = #words[1]\n    for i = 2, #words do\n        local cur_word\
    \ = words[i]\n        local cur_count = #cur_word\n        if cur_count > max_count\
    \ then\n            max_word = cur_word\n            max_count = cur_count\n \
    \       end\n    end\n    return max_word\nend", "  local result = \"\"\n  local\
    \ max_unique = 0\n  for _, word in ipairs(words) do\n    if #(utils.set(word))\
    \ > max_unique then\n      result = word\n      max_unique = #(utils.set(word))\n\
    \    end\n  end\n  return result\nend", "  local maxWord = \"\"\n  local maxNum\
    \ = 0\n  for _, word in ipairs(words) do\n    local count = 0\n    for i = 1,\
    \ #word do\n      if count == maxNum then\n        break\n      end\n      if\
    \ string.find(word, word:sub(i, i), i + 1) == nil then\n        count = count\
    \ + 1\n      end\n    end\n    if count > maxNum then\n      maxNum = count\n\
    \      maxWord = word\n    end\n  end\n  return maxWord\nend", "    local max\
    \ = words[1]\n    for _, word in ipairs(words) do\n        if word > max then\n\
    \            max = word\n        end\n    end\n    return max\nend", "    local\
    \ max_word = \"\"\n    local max_count = 0\n    for _, w in ipairs(words) do\n\
    \        local count = 0\n        for i = 1, #w do\n            if not string.find(w,\
    \ w:sub(i, i), i + 1) then\n                count = count + 1\n            end\n\
    \        end\n        if count > max_count then\n            max_count = count\n\
    \            max_word = w\n        end\n    end\n    return max_word\nend", " \
    \   local function f(s1, s2)\n        local uc1 = #s1:unique_chars()\n       \
    \ local uc2 = #s2:unique_chars()\n        if uc1 ~= uc2 then\n            return\
    \ uc1 > uc2\n        else\n            return s1 < s2\n        end\n    end\n\
    \    table.sort(words, f)\n    return words[1]\nend", "    if type(words) ~= \"\
    table\" then return false end\n    local max_len = 0\n    local max_word = words[1]\n\
    \    for i, word in ipairs(words) do\n        if type(word) ~= \"string\" then\
    \ return false end\n        local len = #word\n        local cnt = 0\n       \
    \ local letter = {}\n        local unique = true\n        for i = 1, len do\n\
    \            local c = word:sub(i, i)\n            if not letter[c] then\n   \
    \             letter[c] = true\n                cnt = cnt + 1\n            end\n\
    \        end\n        if cnt > max_len then\n            max_len = cnt\n     \
    \       max_word = word\n        elseif cnt == max_len then\n            if word\
    \ < max_word then\n                max_word = word\n            end\n        end\n\
    \    end\n    return max_word\nend", "    local max_word, max_uniq = words[1],\
    \ 0\n    for _, word in ipairs(words) do\n        local uniq = uniq_chars(word)\n\
    \        if uniq > max_uniq then\n            max_word, max_uniq = word, uniq\n\
    \        end\n    end\n    return max_word\nend", "    local max = 0\n    local\
    \ word = \"\"\n    for i = 1, #words do\n        local cur = words[i]\n      \
    \  local uniques = {}\n        for i = 1, #cur do\n            uniques[cur:sub(i,\
    \ i)] = true\n        end\n        local count = 0\n        for i in pairs(uniques)\
    \ do\n            count = count + 1\n        end\n        if count > max then\n\
    \            max = count\n            word = cur\n        end\n    end\n    return\
    \ word\nend", end, "  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for i = 1, #word do\n      if\
    \ not string.find(word, word:sub(i, i), i + 1) then\n        count = count + 1\n\
    \      end\n    end\n    if count > max_count then\n      max_count = count\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "    -- body\n\
    end", "  -- your code goes here\nend", "  local function count_unique(word)\n\
    \    local seen = {}\n    for i = 1, word:len() do\n      seen[word:sub(i, i)]\
    \ = true\n    end\n    return table.getn(seen)\n  end", "    if #words == 0 then\n\
    \        return nil\n    end\n    local max_words = {}\n    local max_letters\
    \ = {}\n    for i, word in ipairs(words) do\n        local letters = {}\n    \
    \    for _, char in ipairs(word) do\n            if not letters[char] then\n \
    \               letters[char] = true\n            end\n        end\n        local\
    \ n = 0\n        for _ in pairs(letters) do\n            n = n + 1\n        end\n\
    \        if #max_words == 0 then\n            max_words = {word}\n           \
    \ max_letters = {n}\n        elseif n > max_letters[1] then\n            max_words\
    \ = {word}\n            max_letters = {n}\n        elseif n == max_letters[1]\
    \ then\n            table.insert(max_words, word)\n            table.insert(max_letters,\
    \ n)\n        end\n    end\n    if #max_words == 1 then\n        return max_words[1]\n\
    \    end\n    table.sort(max_words)\n    return max_words[1]\nend", "    local\
    \ cmp = function(a, b)\n        if #a > #b then\n            return true\n   \
    \     elseif #a < #b then\n            return false\n        else\n          \
    \  return a < b\n        end\n    end\n    table.sort(words, cmp)\n    local max\
    \ = words[1]\n    for i = 2, #words do\n        if #max < #words[i] then\n   \
    \         max = words[i]\n        end\n    end\n    return max\nend", "  local\
    \ max = {}\n  local max_len = 0\n  for k, v in ipairs(words) do\n    local unique\
    \ = {}\n    for i = 1, #v do\n      unique[v:sub(i, i)] = true\n    end\n    local\
    \ len = 0\n    for k, v in pairs(unique) do\n      len = len + 1\n    end\n  \
    \  if len > max_len then\n      max = {v}\n      max_len = len\n    elseif len\
    \ == max_len then\n      table.insert(max, v)\n    end\n  end\n  table.sort(max)\n\
    \  return max[1]\nend", "  local str, max = nil, -1\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _ in word:gmatch(\".\") do\n      count = count\
    \ + 1\n    end\n    if count > max then\n      str, max = word, count\n    end\n\
    \  end\n  return str\nend", "    local max_len = 0\n    local max_str = nil\n\
    \    for _, word in ipairs(words) do\n        local set = {}\n        for i =\
    \ 1, #word do\n            set[word:sub(i, i)] = true\n        end\n        local\
    \ len = #table.keys(set)\n        if len > max_len then\n            max_len =\
    \ len\n            max_str = word\n        end\n    end\n    return max_str\n\
    end", "  local max_count = 0\n  local max_word = \"\"\n  for _, word in ipairs(words)\
    \ do\n    local count = set.size(set.from_list(string.gmatch(word, \".\")))\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "\t-- maximum number of unique characters\n\
    \tlocal max = 0\n\t-- the string with max number of unique characters\n\tlocal\
    \ result = nil\n\tfor _, word in ipairs(words) do\n\t\tlocal word_set = {}\n\t\
    \tfor c in word:gmatch(\".\") do\n\t\t\tword_set[c] = true\n\t\tend\n\t\tlocal\
    \ number_of_unique_chars = 0\n\t\tfor c in pairs(word_set) do\n\t\t\tnumber_of_unique_chars\
    \ = number_of_unique_chars + 1\n\t\tend\n\t\tif number_of_unique_chars > max then\n\
    \t\t\tmax = number_of_unique_chars\n\t\t\tresult = word\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local tmp = {}\n    for i, v in ipairs(words) do\n      \
    \  local unique = 0\n        local prev = nil\n        for _, c in utf8.codes(v)\
    \ do\n            if c ~= prev then\n                unique = unique + 1\n   \
    \             prev = c\n            end\n        end\n        tmp[i] = { unique,\
    \ v }\n    end\n    table.sort(tmp, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] < b[2]\n        else\n            return a[1] > b[1]\n\
    \        end\n    end)\n    return tmp[1][2]\nend", "  local word_with_max_chars\
    \ = nil\n  local max_chars = 0\n  for _, word in ipairs(words) do\n    local unique_chars\
    \ = 0\n    for i = 1, #word do\n      if string.find(word, word:sub(i, i), i +\
    \ 1) == nil then\n        unique_chars = unique_chars + 1\n      end\n    end\n\
    \    if unique_chars > max_chars then\n      max_chars = unique_chars\n      word_with_max_chars\
    \ = word\n    end\n  end\n  return word_with_max_chars\nend", "  local c = -1\n\
    \  local mx = nil\n  for i, v in ipairs(words) do\n    local s = #v\n    local\
    \ u = #(v:unique())\n    if u > c then\n      c = u\n      mx = v\n    elseif\
    \ u == c then\n      if v < mx then\n        mx = v\n      end\n    end\n  end\n\
    \  return mx\nend", "  return \"TODO\"\nend", "    local function count_chars(word)\n\
    \        local t = {}\n        for c in word:gmatch(\".\") do\n            t[c]\
    \ = true\n        end\n        return t\n    end", "  return nil\nend", "    local\
    \ max = { word = \"\", count = 0 }\n    for _, word in ipairs(words) do\n    \
    \    local count = {}\n        for _, ch in ipairs(word) do\n            count[ch]\
    \ = true\n        end\n        local len = 0\n        for _ in pairs(count) do\n\
    \            len = len + 1\n        end\n        if len > max.count then\n   \
    \         max.word = word\n            max.count = len\n        end\n    end\n\
    \    return max.word\nend", "    -- body\nend", "   local max_unique_char_count\
    \ = 0\n   local string_with_max_unique_char_count\n   for _, word in ipairs(words)\
    \ do\n      local unique_char_count = get_unique_char_count(word)\n      if unique_char_count\
    \ > max_unique_char_count then\n         max_unique_char_count = unique_char_count\n\
    \         string_with_max_unique_char_count = word\n      end\n   end\n   return\
    \ string_with_max_unique_char_count\nend", "  if not words then return end\n \
    \ if #words == 0 then return end\n  local max_unique = {}\n  local max_uniques\
    \ = 0\n  for _, w in ipairs(words) do\n    if not max_unique[w] then\n      local\
    \ unique = {}\n      local uniques = 0\n      for i = 1, #w do\n        if not\
    \ unique[w:sub(i, i)] then\n          unique[w:sub(i, i)] = true\n          uniques\
    \ = uniques + 1\n        end\n      end\n      max_unique[w] = uniques\n     \
    \ if uniques > max_uniques then\n        max_uniques = uniques\n      end\n  \
    \  end\n  end\n  if max_uniques == 0 then return end\n  local max_word = \"\"\n\
    \  for word, uniques in pairs(max_unique) do\n    if uniques == max_uniques then\n\
    \      if max_word > word then\n        max_word = word\n      end\n    end\n\
    \  end\n  return max_word\nend", "  local freq = {}\n  local max = 0\n  local\
    \ result = \"\"\n  for i = 1, #words do\n    local curr = words[i]\n    local\
    \ len = string.len(curr)\n    local curr_freq = {}\n    for j = 1, len do\n  \
    \    local char = string.sub(curr, j, j)\n      curr_freq[char] = 1\n    end\n\
    \    if #curr_freq > max then\n      result = curr\n      max = #curr_freq\n \
    \   end\n  end\n  return result\nend", "  local max = \"\"\n  for _, word in ipairs(words)\
    \ do\n    local unique = {}\n    for _, char in utf8.codes(word) do\n      unique[char]\
    \ = true\n    end\n    if #unique > #max then\n      max = word\n    end\n  end\n\
    \  return max\nend", "  local word = words[1]\n  local max = 0\n  for i, w in\
    \ ipairs(words) do\n    local count = 0\n    for j = 1, #w do\n      if w:sub(j,\
    \ j) ~= w:sub(j + 1, j + 1) then\n        count = count + 1\n      end\n    end\n\
    \    if count > max then\n      max = count\n      word = w\n    end\n  end\n\
    \  return word\nend", "  local max_word = \"\"\n  local max_length = 0\n  for\
    \ i, word in ipairs(words) do\n    local length = #word\n    local letters = {}\n\
    \    for i = 1, length do\n      letters[word:sub(i, i)] = true\n    end\n   \
    \ local count = 0\n    for letter in pairs(letters) do\n      count = count +\
    \ 1\n    end\n    if count > max_length then\n      max_length = count\n     \
    \ max_word = word\n    end\n  end\n  return max_word\nend", "    local max_word,\
    \ max_len = words[1], #words[1]\n    for _, word in ipairs(words) do\n       \
    \ if #word > max_len then\n            max_word, max_len = word, #word\n     \
    \   end\n    end\n    for _, word in ipairs(words) do\n        if #word == max_len\
    \ and word < max_word then\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "  local result = words[1]\n  local result_length\
    \ = #result\n  for i = 2, #words do\n    local word = words[i]\n    local word_length\
    \ = #word\n    if word_length > result_length then\n      result = word\n    \
    \  result_length = word_length\n    end\n  end\n  return result\nend", "    local\
    \ max_str = \"\"\n    local max_num = 0\n    for _, word in ipairs(words) do\n\
    \        local uniques = {}\n        for _, char in ipairs(word) do\n        \
    \    uniques[char] = true\n        end\n        local num = 0\n        for _ in\
    \ pairs(uniques) do\n            num = num + 1\n        end\n        if num >\
    \ max_num then\n            max_num = num\n            max_str = word\n      \
    \  end\n    end\n    return max_str\nend", "    local res = \"\"\n    local max\
    \ = 0\n    for i,word in ipairs(words) do\n        local len = string.len(word)\n\
    \        local chars = {}\n        for j = 1, len do\n            local c = string.sub(word,\
    \ j, j)\n            if chars[c] == nil then\n                chars[c] = true\n\
    \            end\n        end\n        local count = 0\n        for c,_ in pairs(chars)\
    \ do\n            count = count + 1\n        end\n        if count > max then\n\
    \            max = count\n            res = word\n        elseif count == max\
    \ then\n            if word < res then\n                res = word\n         \
    \   end\n        end\n    end\n    return res\nend", "    local max = 0\n    local\
    \ max_word = \"\"\n    for _, word in ipairs(words) do\n        local uniques\
    \ = count_unique(word)\n        if uniques > max then\n            max = uniques\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    if #words < 1 then\n        return nil\n    end\n    local max_word = words[1]\n\
    \    local max_number = unique_chars(max_word)\n    for i, word in ipairs(words)\
    \ do\n        local count = unique_chars(word)\n        if count > max_number\
    \ then\n            max_number = count\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    -- TODO: Implement me\nend", "    local\
    \ max = 0\n    local max_word = nil\n    for _, word in ipairs(words) do\n   \
    \     local s = Set(word:iter_chars())\n        if #s > max then\n           \
    \ max = #s\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    local max_word = words[1]\n    local max_uniq = #(words[1])", "   \
    \ local max_word = nil\n    local max_unique_chars = 0\n    for _, word in ipairs(words)\
    \ do\n        local unique_chars = 0\n        for i = 1, #word do\n          \
    \  if word:find(word:sub(i, i), i + 1) == nil then\n                unique_chars\
    \ = unique_chars + 1\n            end\n        end\n        if unique_chars >\
    \ max_unique_chars then\n            max_unique_chars = unique_chars\n       \
    \     max_word = word\n        end\n    end\n    return max_word\nend", "  --\
    \ find the word with maximum number of unique characters\n  -- return that word\n\
    \  -- if multiple strings have maximum number of unique characters, return the\
    \ one which comes first in lexicographical order\n  local max = \"\"\n  for _,word\
    \ in ipairs(words) do\n    local function count_unique_chars(str)\n      local\
    \ n_uniques = 0\n      local seen = {}\n      for c in str:gmatch\".\" do\n  \
    \      if not seen[c] then\n          n_uniques = n_uniques + 1\n          seen[c]\
    \ = true\n        end\n      end\n      return n_uniques\n    end\n    if count_unique_chars(word)\
    \ > count_unique_chars(max) then\n      max = word\n    end\n  end\n  return max\n\
    end", "    local max_word = \"\"\n    local max_unique_chars = 0\n    for i, word\
    \ in ipairs(words) do\n        local unique_chars = {}\n        for i = 1, #word\
    \ do\n            unique_chars[word:sub(i, i)] = true\n        end\n        if\
    \ #unique_chars > max_unique_chars then\n            max_unique_chars = #unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "    -- Your code here\nend", "    local max_word = words[1]\n    local max_count\
    \ = num_unique_chars(max_word)\n    for _, word in ipairs(words) do\n        local\
    \ count = num_unique_chars(word)\n        if count > max_count then\n        \
    \    max_count = count\n            max_word = word\n        end\n    end\n  \
    \  return max_word\nend", "    local best_word = words[1]\n    local best_count\
    \ = -1\n    for _, word in ipairs(words) do\n        local count = 0\n       \
    \ for char in string.gmatch(word, \".\") do\n            if not string.find(best_word,\
    \ char) then\n                count = count + 1\n            end\n        end\n\
    \        if count > best_count then\n            best_count = count\n        \
    \    best_word = word\n        end\n    end\n    return best_word\nend", "   local\
    \ max, lmax = 0, 0\n   local maxw, lmaxw = \"\", \"\"\n   for _, w in ipairs(words)\
    \ do\n      local uc = table.unique(w:split(\"\"))\n      if #uc > max then\n\
    \         max, maxw = #uc, w\n      elseif #uc == max then\n         if w < maxw\
    \ then\n            max, maxw = #uc, w\n         end\n      end\n      if #uc\
    \ > lmax then\n         lmax, lmaxw = #uc, w\n      end\n   end\n   if max > lmax\
    \ then\n      return maxw\n   else\n      return lmaxw\n   end\nend", "    local\
    \ max_len = 0\n    local max_word = nil\n    for _, word in ipairs(words) do\n\
    \        local len = 0\n        for c in word:gmatch(\".\") do\n            if\
    \ not (word:find(c, word:find(c)+1)) then\n                len = len + 1\n   \
    \         end\n        end\n        if len > max_len then\n            max_len\
    \ = len\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "  local unique_char_words = {}\n  for i, word in ipairs(words) do\n   \
    \ local unique_chars = {}\n    for _, char in ipairs(word) do\n      if not table.contains(unique_chars,\
    \ char) then\n        table.insert(unique_chars, char)\n      end\n    end\n \
    \   table.insert(unique_char_words, {\n      word = word,\n      chars = unique_chars,\n\
    \    })\n  end\n  table.sort(unique_char_words, function(a, b)\n    if #a.chars\
    \ == #b.chars then\n      return a.word < b.word\n    else\n      return #a.chars\
    \ > #b.chars\n    end\n  end)\n  return unique_char_words[1].word\nend", "  local\
    \ max_word, max_chars = words[1], words[1]:len()\n  for _, w in ipairs(words)\
    \ do\n    if w:len() > max_chars then\n      max_word, max_chars = w, w:len()\n\
    \    end\n  end\n  return max_word\nend", "    -- TODO\nend", "  local word, word_num\
    \ = words[1], 0\n  for i = 1, #words do\n    local current_word, current_num =\
    \ words[i], 0\n    for j = 1, #current_word do\n      local letter = current_word:sub(j,\
    \ j)\n      if not current_word:match(letter .. \".*\" .. letter) then\n     \
    \   current_num = current_num + 1\n      end\n    end\n    if current_num > word_num\
    \ then\n      word_num = current_num\n      word = current_word\n    end\n  end\n\
    \  return word\nend", "    -- Write your code here\nend\n```", "\t-- body\nend",
  "    -- TODO: implementation\nend", "  local max_len = 0\n  local max_len_word =\
    \ \"\"\n  for _, word in ipairs(words) do\n    local set = {}\n    for _, v in\
    \ utf8.codes(word) do\n      if not set[v] then\n        set[v] = true\n     \
    \ end\n    end\n    local len = 0\n    for _ in pairs(set) do\n      len = len\
    \ + 1\n    end\n    if len > max_len then\n      max_len = len\n      max_len_word\
    \ = word\n    end\n  end\n  return max_len_word\nend", "    local max_word, max_len\
    \ = words[1], #(words[1])\n    for i = 2, #words do\n        local word = words[i]\n\
    \        local len = #word\n        if len > max_len then\n            max_word,\
    \ max_len = word, len\n        end\n    end\n    return max_word\nend", "  local\
    \ max_so_far = \"\"\n  for _,v in ipairs(words) do\n    if v:len() > max_so_far:len()\
    \ then\n      max_so_far = v\n    end\n  end\n  return max_so_far\nend", "   local\
    \ t = {}\n   local unique_chars = {}\n   local max_word = \"\"\n   local max_word_char_count\
    \ = 0\n   for k, v in pairs(words) do\n      unique_chars[v] = 0\n      for _,\
    \ char in ipairs(v:split(\"\")) do\n         if not t[char] then\n           \
    \ t[char] = true\n            unique_chars[v] = unique_chars[v] + 1\n        \
    \ end\n      end\n      t = {}\n      if unique_chars[v] > max_word_char_count\
    \ then\n         max_word_char_count = unique_chars[v]\n         max_word = v\n\
    \      end\n   end\n   return max_word\nend", "  -- TODO\nend", "    local max_length\
    \ = 0\n    local max_length_word = ''\n    for _, word in ipairs(words) do\n \
    \       local length = #(string.gsub(word, '[%a]', ''))\n        if length > max_length\
    \ then\n            max_length = length\n            max_length_word = word\n\
    \        end\n    end\n    return max_length_word\nend", "  local unique_max =\
    \ 0\n  local max_word = \"\"\n  for _, word in ipairs(words) do\n    local uniques\
    \ = {}\n    for char in word:gmatch(\".\") do\n      uniques[char] = true\n  \
    \  end\n    local unique_count = table.count(uniques)\n    if unique_count > unique_max\
    \ or\n      (unique_count == unique_max and word < max_word) then\n      unique_max\
    \ = unique_count\n      max_word = word\n    end\n  end\n  return max_word\nend",
  "    local max_word = words[1]\n    local max_len = #{w for w in max_word:gmatch(\"\
    .\")}\n    for _,word in ipairs(words) do\n        local len = #{w for w in word:gmatch(\"\
    .\")}\n        if len > max_len then\n            max_word = word\n          \
    \  max_len = len\n        end\n    end\n    return max_word\nend", "    local\
    \ max_word = words[1]\n    local max_length = 1\n    for i = 2, #words do\n  \
    \      local word = words[i]\n        local word_length = #tostring(word)\n  \
    \      if word_length > max_length then\n            max_word = word\n       \
    \     max_length = word_length\n        end\n    end\n    return max_word\nend",
  "  local max_word = \"\"\n  local max_size = 0\n  for i, word in ipairs(words) do\n\
    \    local set = {}\n    for _, char in ipairs(word) do\n      set[char] = true\n\
    \    end\n    local size = table.size(set)\n    if size > max_size then\n    \
    \  max_size = size\n      max_word = word\n    end\n  end\n  return max_word\n\
    end", "\treturn \"\"\nend", "   local max_word, max_len = words[1], 0\n   for\
    \ _, word in ipairs(words) do\n      local len = #word\n      for i = 1, len -\
    \ 1 do\n         for j = i + 1, len do\n            if word:sub(i, i) == word:sub(j,\
    \ j) then\n               len = len - 1\n               break\n            end\n\
    \         end\n      end\n      if len > max_len then\n         max_word, max_len\
    \ = word, len\n      end\n   end\n   return max_word\nend", "\tif #words < 1 then\n\
    \t\treturn \"\"\n\tend\n\tlocal num_uniq = {}\n\tfor i = 1, #words do\n\t\tnum_uniq[words[i]]\
    \ = len_uniq(words[i])\n\tend\n\tlocal max_uniq = 0\n\tlocal res = \"\"\n\tfor\
    \ k, v in pairs(num_uniq) do\n\t\tif v > max_uniq then\n\t\t\tmax_uniq = v\n\t\
    \t\tres = k\n\t\tend\n\tend\n\treturn res\nend", "  local max = \"\"\n  for i\
    \ = 1, #words do\n    local word = words[i]\n    if #unique_chars(word) > #unique_chars(max)\
    \ then\n      max = word\n    end\n  end\n  return max\nend\nprint(find_max({\"\
    name\", \"of\", \"string\"}))\nprint(find_max({\"name\", \"enam\", \"game\"}))\n\
    print(find_max({\"aaaaaaa\", \"bb\" ,\"cc\"}))", "  if #words == 0 then return\
    \ \"\" end\n  local max_chars = \"\"\n  local max_length = 0\n  for _, word in\
    \ ipairs(words) do\n    local unique_chars = {}\n    for char in word:gmatch(\"\
    .\") do\n      unique_chars[char] = true\n    end\n    local length = table.len(unique_chars)\n\
    \    if length > max_length then\n      max_length = length\n      max_chars =\
    \ word\n    end\n  end\n  return max_chars\nend", "    -- length of list\n   \
    \ local len = #words\n    -- local variables\n    local max = 0\n    local max_word\
    \ = \"\"\n    -- iterate through words\n    for _, word in ipairs(words) do\n\
    \        -- set variable of found letters\n        local letters = {}\n      \
    \  -- iterate through characters\n        for i = 1, #word do\n            --\
    \ if the letter has not been found in the word\n            if not letters[word:sub(i,\
    \ i)] then\n                -- count that letter\n                letters[word:sub(i,\
    \ i)] = true\n            end\n        end\n        -- if the word has more letters\
    \ than the max\n        if #letters > max then\n            -- set the word to\
    \ the max word\n            max_word = word\n            -- set the count to the\
    \ max count\n            max = #letters\n        end\n    end\n    -- return the\
    \ maximum word found\n    return max_word\nend", "    if #words == 0 then\n  \
    \      return nil\n    end\n    if #words == 1 then\n        return words[1]\n\
    \    end\n    local max_length = -1\n    local max_word = nil\n    for _, word\
    \ in ipairs(words) do\n        local chars = {}\n        for _, c in ipairs(word)\
    \ do\n            chars[c] = 1\n        end\n        local length = table.maxn(chars)\n\
    \        if length > max_length then\n            max_length = length\n      \
    \      max_word = word\n        end\n    end\n    return max_word\nend", "  local\
    \ longWord = nil\n  local maxLength = 0\n  for _, word in ipairs(words) do\n \
    \   local length = #set(word:lower():split_on_chars(\"\"))\n    if length > maxLength\
    \ then\n      maxLength = length\n      longWord = word\n    end\n  end\n  return\
    \ longWord\nend", "  local max = 0\n  local ret = nil\n  for _, word in ipairs(words)\
    \ do\n    local chars = {}\n    for i = 1, #word do\n      local c = word:sub(i,\
    \ i)\n      chars[c] = true\n    end\n    local count = 0\n    for k, _ in pairs(chars)\
    \ do\n      count = count + 1\n    end\n    if max < count then\n      max = count\n\
    \      ret = word\n    elseif max == count then\n      if ret > word then\n  \
    \      ret = word\n      end\n    end\n  end\n  return ret\nend", "    local max_char_count\
    \ = 0\n    local max_char_count_word = \"\"\n    for _, word in ipairs(words)\
    \ do\n        local unique_chars = {}\n        for char in word:gmatch(\".\")\
    \ do\n            unique_chars[char] = true\n        end\n        local char_count\
    \ = table_size(unique_chars)\n        if char_count > max_char_count then\n  \
    \          max_char_count = char_count\n            max_char_count_word = word\n\
    \        end\n    end\n    return max_char_count_word\nend", "    if #words ==\
    \ 0 then\n        return nil\n    end\n    local max_word, max_word_occurences\
    \ = nil, nil\n    for _, word in ipairs(words) do\n        local word_occurences\
    \ = {}\n        for i = 1, #word do\n            local ch = word:sub(i, i)\n \
    \           word_occurences[ch] = true\n        end\n        if not max_word or\
    \ max_word_occurences < table.size(word_occurences) then\n            max_word,\
    \ max_word_occurences = word, table.size(word_occurences)\n        end\n    end\n\
    \    return max_word\nend", "    local uniq = {}\n    local c = 0\n    local w\
    \ = ''\n    for i = 1, #words do\n        uniq[i] = #words[i]\n        for j =\
    \ 1, #words[i] do\n            uniq[i] = uniq[i] - #string.gsub(words[i], words[i]:sub(j,\
    \ j), '')\n        end\n        if uniq[i] > c then\n            c = uniq[i]\n\
    \            w = words[i]\n        end\n    end\n    return w\nend", "    local\
    \ max_word = \"\"\n    local max_count = 0\n    for i = 1, #words do\n       \
    \ local word = words[i]\n        local count = 0\n        for j = 1, #word do\n\
    \            if not string.find(max_word, word:sub(j, j)) then\n             \
    \   count = count + 1\n            end\n        end\n        if count > max_count\
    \ then\n            max_count = count\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    -- YOUR CODE HERE\nend", "  local max_value\
    \ = 0\n  local max_word = \"\"\n  for _, word in ipairs(words) do\n    local seen\
    \ = {}\n    for c in word:gmatch(\".\") do\n      seen[c] = true\n    end\n  \
    \  local value = #seen\n    if value > max_value then\n      max_value = value\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "  local max\
    \ = 0\n  local max_word = \"\"\n  for _, word in ipairs(words) do\n    local len\
    \ = #unpack(word:gmatch(\"(.)\"))\n    if len > max then\n      max = len\n  \
    \    max_word = word\n    end\n  end\n  return max_word\nend\nprint(find_max({\"\
    name\", \"of\", \"string\"}))\nprint(find_max({\"name\", \"enam\", \"game\"}))\n\
    print(find_max({\"aaaaaaa\", \"bb\" ,\"cc\"}))", "    --[[\n    in case of same\
    \ number of unique characters compare them by\n    lexicographical order.\n  \
    \  ]]\n    local _, max_word =\n        _.reduce(\n        words,\n        function(acc,\
    \ word)\n            -- acc.max_word => string\n            -- acc.max_count =>\
    \ number\n            local count = _.count_unique(word)\n            if acc.max_count\
    \ == count then\n                -- make lexicographical order comparison\n  \
    \              -- order by the first different char of words\n               \
    \ if string.byte(word) < string.byte(acc.max_word) then\n                    acc.max_word\
    \ = word\n                end\n            elseif acc.max_count < count then\n\
    \                acc.max_word = word\n                acc.max_count = count\n\
    \            end\n            return acc\n        end,\n        {\n          \
    \  max_word = \"\",\n            max_count = 0\n        }\n    )\n    return max_word\n\
    end", "   local function compare(word1, word2)\n      local uniques1 = {}\n  \
    \    local uniques2 = {}\n      for i = 1, #word1 do\n         if not uniques1[word1:sub(i,\
    \ i)] then\n            uniques1[word1:sub(i, i)] = true\n         end\n     \
    \ end\n      for i = 1, #word2 do\n         if not uniques2[word2:sub(i, i)] then\n\
    \            uniques2[word2:sub(i, i)] = true\n         end\n      end\n     \
    \ if #uniques1 > #uniques2 then\n         return word1\n      elseif #uniques1\
    \ < #uniques2 then\n         return word2\n      else\n         return (word1\
    \ > word2) and word1 or word2\n      end\n   end\n   return table.reduce(words,\
    \ compare)\nend", "    if type(words) ~= \"table\" then\n        return nil\n\
    \    end\n    local max_len = 0\n    local max_word = \"\"\n    for _, word in\
    \ ipairs(words) do\n        local unique_chars = {}\n        for i = 1, #word\
    \ do\n            unique_chars[word:sub(i, i)] = true\n        end\n        local\
    \ unique_len = 0\n        for _ in pairs(unique_chars) do\n            unique_len\
    \ = unique_len + 1\n        end\n        if unique_len > max_len then\n      \
    \      max_len = unique_len\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "\tlocal maxlen = 0\n\tlocal max = \"\"\n\tfor i,word\
    \ in ipairs(words) do\n\t\tlocal len = #uniq(word)\n\t\tif len > maxlen then\n\
    \t\t\tmaxlen = len\n\t\t\tmax = word\n\t\tend\n\tend\n\treturn max\nend", "  local\
    \ unique = {}\n  local unique_max = 0\n  local unique_max_word = \"\"\n  for _,\
    \ word in ipairs(words) do\n    local uniq = 0\n    for i = 1, word:len() do\n\
    \      local ch = word:sub(i, i)\n      if not unique[ch] then\n        unique[ch]\
    \ = true\n        uniq = uniq + 1\n      end\n    end\n    if uniq > unique_max\
    \ then\n      unique_max = uniq\n      unique_max_word = word\n    end\n    for\
    \ k in pairs(unique) do\n      unique[k] = nil\n    end\n  end\n  return unique_max_word\n\
    end", "    local max_word = \"\"\n    local max_uniq = 0\n    for _, word in ipairs(words)\
    \ do\n        local uniq = 0\n        for _, letter in ipairs(word) do\n     \
    \       if word:find(letter, 1, true) == nil then\n                uniq = uniq\
    \ + 1\n            end\n        end\n        if uniq > max_uniq then\n       \
    \     max_uniq = uniq\n            max_word = word\n        end\n    end\n   \
    \ return max_word\nend", end, "\tlocal max, mword = 0, ''\n\tfor i, word in ipairs(words)\
    \ do\n\t\tlocal char_count = {}\n\t\tfor j = 1, #word do\n\t\t\tchar_count[word:sub(j,\
    \ j)] = true\n\t\tend\n\t\tlocal count = 0\n\t\tfor k, v in pairs(char_count)\
    \ do\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count > max then\n\t\t\tmax, mword\
    \ = count, word\n\t\tend\n\tend\n\treturn mword\nend", "    local function get_unique_count(word)\n\
    \        local count = 0\n        local used = {}\n        for i = 1, #word do\n\
    \            local c = word:sub(i, i)\n            if not used[c] then\n     \
    \           count = count + 1\n                used[c] = true\n            end\n\
    \        end\n        return count\n    end", "    local max, index = 0, 0\n \
    \   for i = 1, #words do\n        local word = words[i]\n        local count =\
    \ 0\n        for j = 1, #word do\n            local c = word:sub(j, j)\n     \
    \       if not word:sub(1, j - 1):find(c) then\n                count = count\
    \ + 1\n            end\n        end\n        if count > max then\n           \
    \ max, index = count, i\n        end\n    end\n    return words[index]\nend",
  "    return table.pack(table.unpack(words))\nend", end, "    local max, res = 0,\
    \ nil\n    for _, w in ipairs(words) do\n        local count = 0\n        for\
    \ i = 1, #w do\n            if string.find(w, w:sub(i, i), i + 1) == nil then\n\
    \                count = count + 1\n            end\n        end\n        if count\
    \ > max then\n            max, res = count, w\n        end\n    end\n    return\
    \ res\nend", "  local max_word = words[1]\n  local max_unique_count = unique_count(max_word)\n\
    \  for i = 2, #words do\n    local cur_word = words[i]\n    local cur_unique_count\
    \ = unique_count(cur_word)\n    if cur_unique_count > max_unique_count then\n\
    \      max_word = cur_word\n      max_unique_count = cur_unique_count\n    end\n\
    \  end\n  return max_word\nend", "\tlocal max, ans = 0, \"\"\n\tfor _, word in\
    \ ipairs(words) do\n\t\tlocal unique_chars = {}\n\t\tfor i = 1, #word do\n\t\t\
    \tunique_chars[word:sub(i, i)] = true\n\t\tend\n\t\tlocal n = 0\n\t\tfor _ in\
    \ pairs(unique_chars) do\n\t\t\tn = n + 1\n\t\tend\n\t\tif n > max then\n\t\t\t\
    max, ans = n, word\n\t\tend\n\tend\n\treturn ans\nend", "  -- Your code here\n\
    end", "  local max_word\n  local max_unique_chars = 0\n  for _, word in ipairs(words)\
    \ do\n    local unique_chars = count_unique_chars(word)\n    if unique_chars >\
    \ max_unique_chars then\n      max_unique_chars = unique_chars\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = 0\n  local maxWord\
    \ = \"\"\n  for i = 1, #words do\n    local word = words[i]\n    local set = {}\n\
    \    for j = 1, #word do\n      local c = word:sub(j, j)\n      set[c] = true\n\
    \    end\n    local unique = 0\n    for k, _ in pairs(set) do\n      unique =\
    \ unique + 1\n    end\n    if unique > max then\n      max = unique\n      maxWord\
    \ = word\n    end\n  end\n  return maxWord\nend", "    local max_len = 0\n   \
    \ local final_wrd = nil\n    for _, wrd in ipairs(words) do\n        local wrd_set\
    \ = {}\n        for _, char in ipairs(wrd:split(\"\")) do\n            wrd_set[char]\
    \ = true\n        end\n        local wrd_len = table.length(wrd_set)\n       \
    \ if wrd_len > max_len then\n            max_len = wrd_len\n            final_wrd\
    \ = wrd\n        end\n    end\n    return final_wrd\nend", "  local max_length\
    \ = 0\n  local max_words = {}\n  for _, word in ipairs(words) do\n    local length\
    \ = #word\n    if length > max_length then\n      max_length = length\n      max_words\
    \ = {word}\n    elseif length == max_length then\n      table.insert(max_words,\
    \ word)\n    end\n  end\n  local max_char_num = 0\n  local max_char_words = {}\n\
    \  for _, word in ipairs(max_words) do\n    local char_num = 0\n    for c in word:gmatch(\"\
    .\") do\n      char_num = char_num + 1\n    end\n    if char_num > max_char_num\
    \ then\n      max_char_num = char_num\n      max_char_words = {word}\n    elseif\
    \ char_num == max_char_num then\n      table.insert(max_char_words, word)\n  \
    \  end\n  end\n  return max_char_words[1]\nend", "  local max = 0\n  local max_word\
    \ = ''\n  for _, v in ipairs(words) do\n    local word = v\n    local word_len\
    \ = word:len()\n    local table = {}\n    local count = 0\n    for i = 1, word_len\
    \ do\n      local char = word:sub(i, i)\n      if not table[char] then\n     \
    \   table[char] = true\n        count = count + 1\n      end\n    end\n    if\
    \ count > max then\n      max = count\n      max_word = word\n    end\n  end\n\
    \  return max_word\nend", end, "\tlocal max_word, max_len = \"\", 0\n\tfor i =\
    \ 1, #words do\n\t\tlocal word = words[i]\n\t\tlocal letters = {}\n\t\tfor j =\
    \ 1, #word do\n\t\t\tlocal letter = word:sub(j, j)\n\t\t\tletters[letter] = true\n\
    \t\tend\n\t\tlocal len = 0\n\t\tfor letter in pairs(letters) do\n\t\t\tlen = len\
    \ + 1\n\t\tend\n\t\tif len > max_len then\n\t\t\tmax_word, max_len = word, len\n\
    \t\tend\n\tend\n\treturn max_word\nend", "    local max = 0\n    local chars =\
    \ 0\n    local word = \"\"\n    for _,v in ipairs(words) do\n        chars = 0\n\
    \        for c in v:gmatch\".\" do\n            chars = chars + 1\n        end\n\
    \        if chars > max then\n            max = chars\n            word = v\n\
    \        end\n    end\n    return word\nend", end, "  local len = 0\n  local word\
    \ = \"\"\n  for _, w in ipairs(words) do\n    local u = 0\n    for _ in w:gmatch(\"\
    .\") do\n      u = u + 1\n    end\n    if len < u then\n      len = u\n      word\
    \ = w\n    end\n  end\n  return word\nend", "   local function count_unique(s)\n\
    \      local t = {}\n      for i = 1, #s do\n         t[s:sub(i, i)] = true\n\
    \      end\n      return #t\n   end\n   local unique = 0\n   local index = 0\n\
    \   for i, w in ipairs(words) do\n      local u = count_unique(w)\n      if u\
    \ > unique then\n         unique = u\n         index = i\n      end\n   end\n\
    \   return words[index]\nend", end, "  -- body\nend", "  local max = nil\n  local\
    \ max_len = 0\n  for _, word in ipairs(words) do\n    local len = #unique_chars(word)\n\
    \    if max_len < len then\n      max = word\n      max_len = len\n    end\n \
    \ end\n  return max\nend", "    local function get_unique_chars(str)\n       \
    \ local function iter(state, c)\n            if not state.found[c] then\n    \
    \            state.found[c] = true\n                state.count = state.count\
    \ + 1\n            end\n            return c\n        end\n        local state\
    \ = {found = {}, count = 0}\n        return string.gsub(str, \".\", iter), state.count\n\
    \    end\n    local max = {word = \"\", count = 0}\n    for _, w in ipairs(words)\
    \ do\n        local unique_chars, unique_count = get_unique_chars(w)\n       \
    \ if unique_count > max.count or\n           (unique_count == max.count and w\
    \ < max.word) then\n            max.word = w\n            max.count = unique_count\n\
    \        end\n    end\n    return max.word\nend", "  local max_unique = 0\n  local\
    \ max_unique_word = \"\"\n  for _, word in ipairs(words) do\n    local unique\
    \ = 0\n    for i = 1, #word do\n      if string.find(word, word:sub(i, i), i +\
    \ 1) == nil then\n        unique = unique + 1\n      end\n    end\n    if unique\
    \ > max_unique then\n      max_unique = unique\n      max_unique_word = word\n\
    \    end\n  end\n  return max_unique_word\nend\nprint(find_max({\"name\", \"of\"\
    , \"string\"}))\nprint(find_max({\"name\", \"enam\", \"game\"}))\nprint(find_max({\"\
    aaaaaaa\", \"bb\" ,\"cc\"}))", "    if words == nil or words == {} then\n    \
    \    return nil\n    end\n    local max_len = -1\n    local max_index = 1\n  \
    \  for i, word in ipairs(words) do\n        if word == nil then\n            return\
    \ nil\n        end\n        local unique_chars = {}\n        for _, char in ipairs(word)\
    \ do\n            unique_chars[char] = true\n        end\n        local len =\
    \ 0\n        for _, _ in pairs(unique_chars) do\n            len = len + 1\n \
    \       end\n        if len > max_len then\n            max_len = len\n      \
    \      max_index = i\n        end\n    end\n    return words[max_index]\nend",
  "  if not words or #words == 0 then\n    return nil\n  end\n  local max_key, max_count\
    \ = words[1], 0\n  for k, word in ipairs(words) do\n    local count = 0\n    for\
    \ i = 1, #word do\n      if word:find(word:sub(i, i), i + 1) == nil then\n   \
    \     count = count + 1\n      end\n    end\n    if count > max_count then\n \
    \     max_key, max_count = word, count\n    end\n  end\n  return max_key\nend",
  "    local max = ''\n    local max_len = 0\n    for _, v in ipairs(words) do\n \
    \       local len = #v - #v:gsub('(.)', '')\n        if len > max_len then\n \
    \           max_len = len\n            max = v\n        end\n    end\n    return\
    \ max\nend", "    local max = 0\n    local max_word = \"\"\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        if not is_string(word) then\n   \
    \         error(\"find_max: value at index \" .. i .. \" is not a string\")\n\
    \        end\n        local count = count_unique_characters(word)\n        if\
    \ count > max then\n            max = count\n            max_word = word\n   \
    \     end\n    end\n    return max_word\nend\nassert(find_max({\"name\", \"of\"\
    , \"string\"}) == \"string\")\nassert(find_max({\"name\", \"enam\", \"game\"})\
    \ == \"enam\")\nassert(find_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\
    )\nassert(find_max({\"bb\", \"cc\", \"aaaaaaa\"}) == \"aaaaaaa\")\nassert(find_max({\"\
    cc\", \"bb\", \"aaaaaaa\"}) == \"aaaaaaa\")\nassert(find_max({\"cc\", \"aaaaaaa\"\
    , \"bb\"}) == \"aaaaaaa\")", "    local max_word, max_length = nil, 0\n    for\
    \ _,word in ipairs(words) do\n        local unique_letters = util.unique(word)\n\
    \        if #unique_letters > max_length then\n            max_word, max_length\
    \ = word, #unique_letters\n        end\n    end\n    return max_word\nend", end,
  "  local max_word = words[1]\n  local max_set = Set(max_word:to_chars())\n  for\
    \ i = 2, #words do\n    local word = words[i]\n    local set = Set(word:to_chars())\n\
    \    if set:size() > max_set:size() then\n      max_word = word\n      max_set\
    \ = set\n    end\n  end\n  return max_word\nend", "    local max_word, max_len\
    \ = \"\", 0\n    for _, word in ipairs(words) do\n        local unique_chars =\
    \ {}\n        for i = 1, #word do\n            unique_chars[word:sub(i, i)] =\
    \ true\n        end\n        local unique_chars_count = 0\n        for _ in pairs(unique_chars)\
    \ do\n            unique_chars_count = unique_chars_count + 1\n        end\n \
    \       if unique_chars_count > max_len then\n            max_word, max_len =\
    \ word, unique_chars_count\n        end\n    end\n    return max_word\nend", "\t\
    local function max(a, b)\n\t\tif a == nil then return b end\n\t\tif b == nil then\
    \ return a end\n\t\treturn #a > #b and a or b\n\tend\n\treturn reduce(function(x,\
    \ y) return max(x, y) end, words)\nend\nprint(find_max({\"name\", \"of\", \"string\"\
    }))\nprint(find_max({\"name\", \"enam\", \"game\"}))\nprint(find_max({\"aaaaaaa\"\
    , \"bb\" ,\"cc\"}))\nprint()", "  local result = words[1]\n  local char_map =\
    \ {}\n  for _,word in ipairs(words) do\n    if word:len() > result:len() then\n\
    \      result = word\n    elseif word:len() == result:len() then\n      if char_map[result]\
    \ == nil then\n        char_map[result] = {}\n        for i = 1,result:len() do\n\
    \          char_map[result][result:sub(i,i)] = true\n        end\n      end\n\
    \      if char_map[word] == nil then\n        char_map[word] = {}\n        for\
    \ i = 1,word:len() do\n          char_map[word][word:sub(i,i)] = true\n      \
    \  end\n      end\n      if table.getn(char_map[word]) > table.getn(char_map[result])\
    \ then\n        result = word\n      end\n    end\n  end\n  return result\nend",
  "    -- Code here\nend", "  local count = {}\n  local max_count = 0\n  local max_word\
    \ = ''\n  for _, word in ipairs(words) do\n    local n = #util.unique_chars(word)\n\
    \    count[word] = n\n    if n > max_count then\n      max_count = n\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "    -- TODO\nend", "   local\
    \ max_num_chars, res = 0, ''\n   for _, w in ipairs(words) do\n      local num_chars\
    \ = 0\n      for _ in string.gmatch(w, '.') do\n         num_chars = num_chars\
    \ + 1\n      end\n      if num_chars > max_num_chars then\n         max_num_chars,\
    \ res = num_chars, w\n      end\n   end\n   return res\nend", "  if #words ==\
    \ 0 then return \"\" end\n  local max, max_word = #words[1], words[1]\n  for i\
    \ = 2, #words do\n    local word = words[i]\n    local len = #word\n    if len\
    \ > max then\n      max, max_word = len, word\n    end\n  end\n  return max_word\n\
    end", "    local max_word, max_unique_chars = '', 0\n    for _, word in ipairs(words)\
    \ do\n        local unique_chars = 0\n        for _, char in ipairs(word:totable())\
    \ do\n            unique_chars = unique_chars + 1\n        end\n        if unique_chars\
    \ > max_unique_chars then\n            max_word, max_unique_chars = word, unique_chars\n\
    \        end\n    end\n    return max_word\nend", "  local max_len = 0\n  local\
    \ max_word = \"\"\n  for _, word in ipairs(words) do\n    local chars = {}\n \
    \   for c in word:gmatch\".\" do\n      chars[c] = true\n    end\n    local len\
    \ = 0\n    for _ in pairs(chars) do\n      len = len + 1\n    end\n    if len\
    \ > max_len then\n      max_len = len\n      max_word = word\n    end\n  end\n\
    \  return max_word\nend", "  local max_length, max_length_word = 0, nil\n  for\
    \ _, word in ipairs(words) do\n    local length = #string.unique(word)\n    if\
    \ length > max_length then\n      max_length = length\n      max_length_word =\
    \ word\n    end\n  end\n  return max_length_word\nend", "    local max_word =\
    \ nil\n    local max_uniq = 0\n    for _, word in ipairs(words) do\n        local\
    \ cur_uniq = 0\n        for i = 1, #word do\n            local c = word:sub(i,\
    \ i)\n            if word:find(c, i + 1) == nil then\n                cur_uniq\
    \ = cur_uniq + 1\n            end\n        end\n        if cur_uniq > max_uniq\
    \ then\n            max_uniq = cur_uniq\n            max_word = word\n       \
    \ end\n    end\n    return max_word\nend", "  -- Put your code here\nend\n```",
  "  return \"returned_value\"\nend", "  local max = \"\"\n  for _, word in ipairs(words)\
    \ do\n    if #max < #word then\n      max = word\n    end\n  end\n  return max\n\
    end", "    if not words then return nil end\n    local function count_uniq(word)\n\
    \        local uniq = {}\n        for char in word:gmatch(\".\") do\n        \
    \    uniq[char] = true\n        end\n        return table.getn(uniq)\n    end\n\
    \    local candidates = {}\n    local max = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = count_uniq(word)\n        if count > max then\n  \
    \          max = count\n            candidates = {word}\n        elseif count\
    \ == max then\n            table.insert(candidates, word)\n        end\n    end\n\
    \    table.sort(candidates)\n    return candidates[1]\nend", "    local max_word\
    \ = nil\n    local max_num = 0\n    for i, word in ipairs(words) do\n        local\
    \ num = string.len(word) - string.len(word:gsub(\"[^%w]\", \"\"))\n        if\
    \ num > max_num then\n            max_num = num\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend", "  local max_word = words[1]\n\
    \  local max_chars = 0\n  for i, word in ipairs(words) do\n    local chars = {}\n\
    \    for c in string.gmatch(word, \".\") do\n      chars[c] = true\n    end\n\
    \    if #chars > max_chars then\n      max_chars = #chars\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "    local curr_max = \"\"\n    local\
    \ curr_max_len = 0\n    for i,word in ipairs(words) do\n        local unique_char_count\
    \ = 0\n        local unique_chars = {}\n        for j=1,#word do\n           \
    \ local c = word:sub(j,j)\n            if unique_chars[c] == nil then\n      \
    \          unique_char_count = unique_char_count + 1\n                unique_chars[c]\
    \ = true\n            end\n        end\n        if unique_char_count > curr_max_len\
    \ then\n            curr_max = word\n            curr_max_len = unique_char_count\n\
    \        end\n    end\n    return curr_max\nend", "    local max_chars = -1\n\
    \    local max_word = \"\"\n    for i,word in ipairs(words) do\n        local\
    \ n = #word\n        local m = uniq_chars(word)\n        if m > max_chars then\n\
    \            max_chars = m\n            max_word = word\n        elseif m == max_chars\
    \ then\n            if word < max_word then\n                max_word = word\n\
    \            end\n        end\n    end\n    return max_word\nend", end, "  local\
    \ max_count, res = 0, nil\n  for _, word in ipairs(words) do\n    local unique_chars\
    \ = {}\n    for c in word:gmatch(\".\") do\n      unique_chars[c] = true\n   \
    \ end\n    if #unique_chars > max_count then\n      max_count = #unique_chars\n\
    \      res = word\n    end\n  end\n  return res\nend", "    local _, result =\
    \ next(words)\n    for _, word in ipairs(words) do\n        if util.count_unique_characters(word)\
    \ > util.count_unique_characters(result) then\n            result = word\n   \
    \     end\n    end\n    return result\nend", "  local max_chars = 0\n  local max_word\
    \ = \"\"\n  for i = 1, #words do\n    local word = words[i]\n    local unique_chars\
    \ = 0\n    for j = 1, #word do\n      local char = word:sub(j, j)\n      if not\
    \ word:match(char .. \"+\") then\n        unique_chars = unique_chars + 1\n  \
    \    end\n    end\n    if unique_chars > max_chars then\n      max_chars = unique_chars\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "    local max\
    \ = 0\n    local max_word = nil\n    for i, w in ipairs(words) do\n        local\
    \ s = {}\n        for c in w:gmatch('.') do\n            s[c] = true\n       \
    \ end\n        local len = 0\n        for _ in pairs(s) do\n            len =\
    \ len + 1\n        end\n        if len > max then\n            max = len\n   \
    \         max_word = w\n        end\n    end\n    return max_word\nend", "   \
    \ local max, max_word = 0, nil\n    for _, word in ipairs(words) do\n        local\
    \ unique_chars = 0\n        for _, char in ipairs(word:split(\"\")) do\n     \
    \       if not (char:match(\"[a-zA-Z]\")) then\n                unique_chars =\
    \ unique_chars + 1\n            end\n        end\n        if unique_chars > max\
    \ then\n            max = unique_chars\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    local max_char_count = 0\n    local\
    \ max_word = nil\n    for i, word in ipairs(words) do\n        local unique_char_count\
    \ = {}\n        for _, char in utf8.codes(word) do\n            unique_char_count[char]\
    \ = 1\n        end\n        local count = 0\n        for _ in pairs(unique_char_count)\
    \ do\n            count = count + 1\n        end\n        if max_char_count <\
    \ count then\n            max_char_count = count\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend", "    local max_word = words[1]\n\
    \    local max_chars = 0\n    for k, word in ipairs(words) do\n        local chars\
    \ = count_unique_chars(word)\n        if chars > max_chars then\n            max_chars\
    \ = chars\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    local word = words[1]\n    local max = #(word:gsub(\"%W\", \"\"))\n\
    \    for i = 2, #words do\n        local curr = #(words[i]:gsub(\"%W\", \"\"))\n\
    \        if curr > max then\n            max = curr\n            word = words[i]\n\
    \        end\n    end\n    return word\nend", "    -- code goes here\nend", " \
    \   local function max_unique(w1, w2)\n        local u1 = #(w1:gsub(\"(.)\", \"\
    %1\"):gsub(\"%1%1\", \"\"))\n        local u2 = #(w2:gsub(\"(.)\", \"%1\"):gsub(\"\
    %1%1\", \"\"))\n        if u1 > u2 then\n            return true\n        elseif\
    \ u1 < u2 then\n            return false\n        else\n            return w1\
    \ < w2\n        end\n    end\n    table.sort(words, max_unique)\n    return words[1]\n\
    end", "  local max = \"\"\n  for _, word in ipairs(words) do\n    if #(set(word))\
    \ > #(set(max)) or\n       (#(set(word)) == #(set(max)) and word < max) then\n\
    \      max = word\n    end\n  end\n  return max\nend", "  local max = \"\"\n \
    \ for _,w in ipairs(words) do\n    if #(utils.unique(w)) > #(utils.unique(max))\
    \ then\n      max = w\n    end\n  end\n  return max\nend", "    local ret = words[1]\n\
    \    local max_len = 0\n    for i, w in ipairs(words) do\n        local unique_chars\
    \ = {}\n        for c in w:gmatch('.') do\n            unique_chars[c] = true\n\
    \        end\n        local len = 0\n        for k, _ in pairs(unique_chars) do\n\
    \            len = len + 1\n        end\n        if len > max_len then\n     \
    \       max_len = len\n            ret = w\n        end\n    end\n    return ret\n\
    end", "  local words_list = {}\n  for i, word in ipairs(words) do\n    words_list[i]\
    \ = {\n      word = word,\n      unique_chars = #(util.unique(word))\n    }\n\
    \  end\n  local max_unique_chars = nil\n  local max_unique_chars_word = nil\n\
    \  for _, word in ipairs(words_list) do\n    if max_unique_chars_word == nil or\n\
    \        (word.unique_chars > max_unique_chars) or\n        (word.unique_chars\
    \ == max_unique_chars and\n            word.word < max_unique_chars_word) then\n\
    \      max_unique_chars = word.unique_chars\n      max_unique_chars_word = word.word\n\
    \    end\n  end\n  return max_unique_chars_word\nend", "  return \"Not Implemented\"\
    \nend", "   local max = {}\n   for i = 1, #words do\n      local word = words[i]\n\
    \      local uniques = {}\n      for j = 1, #word do\n         uniques[word:sub(j,\
    \ j)] = true\n      end\n      uniques = #(table.keys(uniques))\n      if max.uniques\
    \ then\n         if uniques > max.uniques then\n            max = {\n        \
    \       word = word,\n               uniques = uniques\n            }\n      \
    \   elseif uniques == max.uniques then\n            if word < max.word then\n\
    \               max = {\n                  word = word,\n                  uniques\
    \ = uniques\n               }\n            end\n         end\n      else\n   \
    \      max = {\n            word = word,\n            uniques = uniques\n    \
    \     }\n      end\n   end\n   return max.word\nend", "    -- TODO\nend", "  \
    \  -- TODO: implement function\nend", "    local max_word, max_word_count = \"\
    \", 0\n    for _, word in ipairs(words) do\n        local count = 0\n        for\
    \ c in word:gmatch(\".\") do\n            count = count + 1\n        end\n   \
    \     if count > max_word_count then\n            max_word_count = count\n   \
    \         max_word = word\n        end\n    end\n    return max_word\nend\nassert(find_max({\"\
    name\", \"of\", \"string\"}) == \"string\")\nassert(find_max({\"name\", \"enam\"\
    , \"game\"}) == \"enam\")\nassert(find_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"\
    aaaaaaa\")", "    local max_word = words[1]\n    local max_len = #words[1]\n \
    \   for i = 2, #words do\n        local word = words[i]\n        local len = #word\n\
    \        if len > max_len then\n            max_word = word\n            max_len\
    \ = len\n        end\n    end\n    return max_word\nend", "  if #words == 0 then\
    \ return nil end\n  local max = {\n    word = words[1],\n    num = string.len(words[1])\n\
    \  }\n  for _, word in ipairs(words) do\n    local unique = {}\n    for i = 1,\
    \ string.len(word) do\n      if unique[string.sub(word, i, i)] == nil then\n \
    \       unique[string.sub(word, i, i)] = true\n      end\n    end\n    if string.len(word)\
    \ > max.num then\n      max.word = word\n      max.num = string.len(word)\n  \
    \  end\n  end\n  return max.word\nend", "  local max_word\n  local max_chars =\
    \ -1\n  for i, word in ipairs(words) do\n    local chars = {}\n    for c in word:gmatch(\"\
    .\") do\n      chars[c] = true\n    end\n    local n_chars = 0\n    for c in pairs(chars)\
    \ do\n      n_chars = n_chars + 1\n    end\n    if n_chars > max_chars then\n\
    \      max_chars = n_chars\n      max_word = word\n    end\n  end\n  return max_word\n\
    end", "    local res = words[1]\n    local max_len = #(res)\n    for i = 2, #words\
    \ do\n        local str = words[i]\n        local set = {}\n        for i = 1,\
    \ #str do\n            set[str:sub(i, i)] = true\n        end\n        local len\
    \ = #(str)\n        if #(set) > max_len then\n            max_len = #(set)\n \
    \           res = str\n        elseif #(set) == max_len and str < res then\n \
    \           res = str\n        end\n    end\n    return res\nend", "  local max\
    \ = 0\n  local max_word = \"\"\n  for i = 1, #words do\n    local chars = {}\n\
    \    local count = 0\n    for j = 1, #words[i] do\n      local c = words[i]:sub(j,\
    \ j)\n      if not chars[c] then\n        chars[c] = true\n        count = count\
    \ + 1\n      end\n    end\n    if count > max then\n      max = count\n      max_word\
    \ = words[i]\n    end\n  end\n  return max_word\nend", "    if type(words) ~=\
    \ \"table\" then\n        return nil\n    end\n    local max_count = 0\n    local\
    \ max_word = \"\"\n    for _, word in ipairs(words) do\n        local count =\
    \ 0\n        for i = 1, string.len(word) do\n            local c = string.sub(word,\
    \ i, i)\n            if string.find(word, c, i + 1) == nil then\n            \
    \    count = count + 1\n            end\n        end\n        if count > max_count\
    \ then\n            max_count = count\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "  local max_word = \"\"\n  local max_len\
    \ = 0\n  for _, word in ipairs(words) do\n    local len = count_unique_chars(word)\n\
    \    if len > max_len then\n      max_len = len\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend", "  local max_word, max_num = words[1], 0\n  for\
    \ _, w in ipairs(words) do\n    local word_num = 0\n    for i = 1, #w do\n   \
    \   local char = w:sub(i, i)\n      if not w:sub(1, i-1):find(char) then\n   \
    \     word_num = word_num + 1\n      end\n    end\n    if word_num > max_num then\n\
    \      max_word, max_num = w, word_num\n    end\n  end\n  return max_word\nend",
  "    local max_count = 0\n    local result = nil\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for i = 1, #word do\n            local\
    \ found = false\n            for j = 1, i - 1 do\n                if word:sub(i,\
    \ i) == word:sub(j, j) then\n                    found = true\n              \
    \      break\n                end\n            end\n            if not found then\n\
    \                count = count + 1\n            end\n        end\n        if count\
    \ > max_count then\n            max_count = count\n            result = word\n\
    \        end\n    end\n    return result\nend", "  local max = {}\n  for i, word\
    \ in ipairs(words) do\n    local t = {}\n    for i = 1, #word do\n      t[word:sub(i,\
    \ i)] = true\n    end\n    max[#max + 1] = {word, t}\n  end\n  local n = 0\n \
    \ for i, word in ipairs(max) do\n    n = math.max(n, #word[2])\n  end\n  local\
    \ unique = {}\n  for i, word in ipairs(max) do\n    if #word[2] == n then\n  \
    \    unique[#unique + 1] = word[1]\n    end\n  end\n  if #unique == 1 then\n \
    \   return unique[1]\n  end\n  table.sort(unique)\n  return unique[1]\nend", " \
    \ local unique = {}\n  local max = 0\n  local result = \"\"\n  for _, word in\
    \ ipairs(words) do\n    local tmp = {}\n    for _, v in ipairs(word) do\n    \
    \  tmp[v] = true\n    end\n    local count = 0\n    for _ in pairs(tmp) do\n \
    \     count = count + 1\n    end\n    if count > max then\n      max = count\n\
    \      result = word\n    end\n  end\n  return result\nend", "    local max =\
    \ \"\"\n    local max_count = 0\n    for _, word in ipairs(words) do\n       \
    \ local count = {}\n        for i = 1, #word do\n            count[word:sub(i,\
    \ i)] = true\n        end\n        if #count > max_count then\n            max\
    \ = word\n            max_count = #count\n        end\n    end\n    return max\n\
    end", "    local max_word = words[1]\n    local max_unique_characters = count_unique_characters(max_word)\n\
    \    for i=2, #words do\n        local current_word = words[i]\n        local\
    \ current_unique_characters = count_unique_characters(current_word)\n        if\
    \ current_unique_characters > max_unique_characters then\n            max_word\
    \ = current_word\n            max_unique_characters = current_unique_characters\n\
    \        end\n    end\n    return max_word\nend", "   local max_wrd, max_chars\
    \ = \"\", 0\n   for _, wrd in ipairs(words) do\n      local chars = {}\n     \
    \ for i = 1, #wrd do\n         chars[wrd:sub(i, i)] = true\n      end\n      if\
    \ #chars > max_chars then\n         max_wrd, max_chars = wrd, #chars\n      end\n\
    \   end\n   return max_wrd\nend", "    local max_len = 0\n    local min_len =\
    \ math.huge\n    local len_to_words = {}\n    for _, w in ipairs(words) do\n \
    \       local len = #w\n        len_to_words[len] = len_to_words[len] or {}\n\
    \        table.insert(len_to_words[len], w)\n        if len > max_len then\n \
    \           max_len = len\n        end\n        if len < min_len then\n      \
    \      min_len = len\n        end\n    end\n    -- now len_to_words[l] is a list\
    \ of words which have length l\n    local max_len_words = len_to_words[max_len]\n\
    \    local index = 1\n    local w = max_len_words[index]\n    local min_len_words\
    \ = len_to_words[min_len]\n    if min_len_words and max_len_words then\n     \
    \   local min_len_w = min_len_words[1]\n        if min_len_w then\n          \
    \  while w do\n                if #w == #min_len_w then\n                    return\
    \ min_len_w\n                end\n                index = index + 1\n        \
    \        w = max_len_words[index]\n            end\n        end\n    end\n   \
    \ if max_len_words then\n        return max_len_words[1]\n    end\n    return\
    \ \"\"\nend", "  local max = \"\"\n  for _, word in ipairs(words) do\n    if #word\
    \ > #max then\n      local m = {}\n      for i = 1, #word do\n        m[word:sub(i,\
    \ i)] = true\n      end\n      if #m > #max then\n        max = word\n      end\n\
    \    end\n  end\n  return max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
