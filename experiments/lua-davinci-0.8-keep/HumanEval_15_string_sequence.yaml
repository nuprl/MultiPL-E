name: HumanEval_15_string_sequence
language: lua
prompt: "-- Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n--\
  \ '0 1 2 3 4 5'\nlocal function string_sequence(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
  \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0 1\
  \ 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = {}\n  for i = 0, n do\n    s[i+1] = tostring(i)\n  end\n\
    \  return table.concat(s, ' ')\nend", "  local result = { }\n  for i = 0, n do\n\
    \    result[i + 1] = tostring(i)\n  end\n  return table.concat(result, ' ')\n\
    end", "  if n == 0 then\n    return '0'\n  else\n    return string_sequence(n-1)\
    \ .. ' ' .. tostring(n)\n  end\nend", "    local s = ''\n    for i = 0, n do\n\
    \        s = s .. tostring(i) .. ' '\n    end\n    return s\nend", "    if n ==\
    \ 0 then\n        return '0'\n    else\n        return string_sequence(n-1) ..\
    \ ' ' .. tostring(n)\n    end\nend", "  local t = {}\n  for i = 0, n do\n    t[#t\
    \ + 1] = i\n  end\n  return concat(t, ' ')\nend", "\tlocal seq = { 0 }\n\tfor\
    \ i = 1, n do\n\t\tseq[i + 1] = i\n\tend\n\treturn table.concat(seq, ' ')\nend",
  "  local s = ''\n  for i = 0, n do\n    s = s .. (i > 0 and ' ' or '') .. i\n  end\n\
    \  return s\nend", "\tlocal t = {}\n\tfor i = 0, n do t[#t+1] = tostring(i) end\n\
    \treturn table.concat(t, ' ')\nend", "  if n == 0 then\n    return '0'\n  else\n\
    \    return (string_sequence(n-1) .. ' ' .. tostring(n))\n  end\nend", "    local\
    \ r = {}\n    for i = 0, n do\n        r[#r + 1] = i\n    end\n    return table.concat(r,\
    \ ' ')\nend", "  if n < 0 then return '' end\n  local res = {}\n  for i = 0, n\
    \ do res[#res+1] = tostring(i) end\n  return table.concat(res, ' ')\nend", " \
    \   if n == 0 then\n        return '0'\n    else\n        return string_sequence(n-1)\
    \ .. ' ' .. tostring(n)\n    end\nend", "  if n == 0 then\n    return \"0\"\n\
    \  else\n    return table.concat(map(tostring, range(n+1)), \" \")\n  end\nend",
  "  local s = \"\"\n  for i = 0, n do\n    s = s .. i .. \" \"\n  end\n  return s\n\
    end", "  local str = ' '\n  if n == 0 then\n    return '0'\n  end\n  local i =\
    \ 0\n  while i <= n do\n    str = str .. tostring(i) .. ' '\n    i = i + 1\n \
    \ end\n  return str\nend", "    if n == 0 then\n        return '0'\n    else\n\
    \        return string_sequence(n-1) .. ' ' .. tostring(n)\n    end\nend", " \
    \   local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n\
    \    return table.concat(t, ' ')\nend", "  local ret = {}\n  for i = 0, n do\n\
    \    ret[i + 1] = i\n  end\n  return table.concat(ret, ' ')\nend", "    local\
    \ t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return\
    \ table.concat(t, ' ')\nend", "    local str = tostring(n)\n    for i = n - 1,\
    \ 0, -1 do\n        str = tostring(i) .. ' ' .. str\n    end\n    return str\n\
    end", "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = tostring(i)\n  end\n\
    \  return table.concat(t, ' ')\nend", "  local i = 0\n  local t = {}\n  while\
    \ i <= n do\n    t[#t+1] = i\n    i = i + 1\n  end\n  return table.concat(t, '\
    \ ')\nend", "    if n > 0 then\n        return string_sequence(n-1) .. ' ' ..\
    \ tostring(n)\n    else\n        return '0'\n    end\nend", "  local table_result\
    \ = {}\n  for i = 0, n do\n    table.insert(table_result, i)\n  end\n  return\
    \ table.concat(table_result, ' ')\nend", "    local s = ''\n    for i = 0, n do\n\
    \        s = s .. ' ' .. i\n    end\n    return s\nend", "    local out = {}\n\
    \    for i = 0, n do\n        out[#out + 1] = tostring(i)\n    end\n    return\
    \ table.concat(out, ' ')\nend", "  return string.format((\"%s%s\"):rep(n + 1),\
    \ table.concat(range(n + 1), \" \"))\nend", "  return table.concat({ '0' , string_range(1,\
    \ n) }, ' ')\nend", "    local s = ''\n    for i = 0, n do\n        s = s .. i\
    \ .. ' '\n    end\n    return s\nend", "  local numbers = {}\n  for i = 0, n do\n\
    \    numbers[i + 1] = tostring(i)\n  end\n  return table.concat(numbers, ' ')\n\
    end", "    local sequence = { }\n    for i = 0, n do\n        table.insert(sequence,\
    \ tostring(i))\n    end\n    return table.concat(sequence, ' ')\nend", "\tif n\
    \ == 0 then\n\t\treturn '0'\n\telse\n\t\treturn string_sequence(n-1) .. ' ' ..\
    \ tostring(n)\n\tend\nend", "  local res = {}\n  for i = 0, n do\n    res[i +\
    \ 1] = tostring(i)\n  end\n  return concat(res, ' ')\nend", "    local t = {}\n\
    \    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend", "  return concat((function()\n                   local _accum_0\
    \ = { }\n                   local _len_0 = 1\n                   for i = 0, n\
    \ do\n                     _accum_0[_len_0] = tostring(i)\n                  \
    \   _len_0 = _len_0 + 1\n                   end\n                   return _accum_0\n\
    \                 end)(), \" \")\nend", "\treturn table.concat(table.map_to_array(function\
    \ (x) return tostring(x) end, sequence(n)), ' ')\nend", "  local s = ''\n  for\
    \ i = 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend", "  local s = {}\n\
    \  for i = 0, n do\n    s[i+1] = i\n  end\n  return table.concat(s, ' ')\nend",
  "    if n == 0 then\n        return '0'\n    else\n        return string_sequence(n-1)\
    \ .. ' ' .. tostring(n)\n    end\nend", "  local result = {}\n  for i = 0, n do\n\
    \    result[i + 1] = tostring(i)\n  end\n  return table.concat(result, ' ')\n\
    end", "  return table.concat({table.unpack(sequence(n))}, ' ')\nend", "  local\
    \ out = {}\n  for i = 0, n do\n    out[#out + 1] = i\n  end\n  return table.concat(out,\
    \ ' ')\nend", "    return table.concat(array_sequence(n), ' ')\nend", "    local\
    \ buffer = {}\n    for i = 0, n do\n        buffer[#buffer + 1] = tostring(i)\n\
    \    end\n    return table.concat(buffer, ' ')\nend", "  return table.concat(seq(n),\
    \ \" \")\nend", "\tlocal str = ''\n\tfor i = 0, n do\n\t\tstr = str .. tostring(i)\
    \ .. ' '\n\tend\n\treturn str\nend", "    local str = \"\"\n    for i = 0, n do\n\
    \        str = str .. i .. \" \"\n    end\n    return str\nend", "    local tbl\
    \ = {};\n    for i = 0, n do\n        tbl[#tbl + 1] = tostring(i);\n    end\n\
    \    return table.concat(tbl, ' ');\nend", "    return table.concat(slices(n+1,\
    \ 1, join, {}), ' ')\nend", "  if n == 0 then\n    return '0'\n  else\n    return\
    \ string_sequence(n-1) .. ' ' .. tostring(n)\n  end\nend", "    local s = \"\"\
    \n    for i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend",
  "  if n <= 0 then\n    return \"0\"\n  else\n    return string_sequence(n-1) ..\
    \ \" \" .. tostring(n)\n  end\nend", "    local seq = {}\n    for i = 0, n do\n\
    \        seq[i + 1] = i\n    end\n    return table.concat(seq, ' ')\nend", "\t\
    local result = ''\n\tfor i = 0, n do\n\t\tresult = result .. tostring(i) .. '\
    \ '\n\tend\n\treturn result\nend", "    local res = ''\n    for i = 0, n do\n\
    \        res = res .. i .. ' '\n    end\n    return res\nend", "    local seq\
    \ = \"\"\n    for i = 0, n do\n        seq = seq .. tostring(i) .. \" \"\n   \
    \ end\n    return seq\nend", "    local buffer = { }\n    for i = 0, n do\n  \
    \      buffer[#buffer + 1] = tostring(i)\n    end\n    return table.concat(buffer,\
    \ ' ')\nend", "  local i = 0\n  local a = {}\n  while i <= n do\n    a[#a+1] =\
    \ i\n    i = i + 1\n  end\n  return table.concat(a, ' ')\nend", "    local buf\
    \ = {}\n    for i = 0, n do\n        buf[#buf + 1] = tostring(i)\n    end\n  \
    \  return table.concat(buf, ' ')\nend", "\tlocal result = {}\n\tfor i = 0, n do\n\
    \t\tresult[i + 1] = tostring(i)\n\tend\n\treturn table.concat(result, ' ')\nend",
  "  local output = {}\n  for i = 0, n do\n    output[#output + 1] = tostring(i)\n\
    \  end\n  return table.concat(output, ' ')\nend", "    local s = ''\n    for i\
    \ = 0, n do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\nend",
  "    local r = {}\n    for i = 0, n do\n        r[#r + 1] = tostring(i)\n    end\n\
    \    return table.concat(r, ' ')\nend", "    return table.concat(sequence(n),\
    \ ' ')\nend", "    local r = {}\n    for i = 0, n do\n        r[#r + 1] = tostring(i)\n\
    \    end\n    return table.concat(r, ' ')\nend", "    local str = \"\"\n    for\
    \ i = 0, n do\n        str = str .. \" \" .. i\n    end\n    return str\nend",
  "    return table.concat(sequences.number(n), ' ')\nend", "    if n == 0 then\n\
    \        return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend", "    if n <= 0 then\n        return tostring(0)\n    else\n  \
    \      return string_sequence(n-1) .. ' ' .. tostring(n)\n    end\nend", "  local\
    \ t = {}\n  for i = 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t,\
    \ ' ')\nend", "    return table.concat(table.mapi(function(i) return tostring(i)\
    \ end, table.new(n+1, 0)), ' ')\nend", "\tlocal ret = ''\n\tfor i = 0, n do\n\t\
    \tret = ret .. ' ' .. i\n\tend\n\treturn ret\nend", "    local x = {}\n    for\
    \ i = 0, n do\n        x[i + 1] = tostring(i)\n    end\n    return table.concat(x,\
    \ ' ')\nend", "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = tostring(i)\n\
    \  end\n  return table.concat(t, ' ')\nend", "    local table = { }\n    for i\
    \ = 0, n do\n        table[i] = tostring(i)\n    end\n    return table.concat(table,\
    \ ' ')\nend", "    local t = {}\n    for i = 0, n do t[#t+1] = tostring(i) end\n\
    \    return table.concat(t, ' ')\nend", "    local t = {}\n    for i = 0, n do\n\
    \        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, ' ')\nend",
  "  local s = \"\"\n  for i = 0, n do\n    s = string.format(\"%s %i\", s, i)\n \
    \ end\n  return s\nend", "\treturn table.concat({string.range(0, n)}, ' ')\nend",
  "    assert(type(n) == 'number')\n    assert(n >= 0)\n    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, ' ')\nend", "  local s = \"\"\n  for i =\
    \ 0, n do\n    s = s .. i .. \" \"\n  end\n  return s\nend", "    local res =\
    \ { }\n    for i = 0, n do\n        res[#res + 1] = tostring(i)\n    end\n   \
    \ return table.concat(res, ' ')\nend", "\tlocal result = \"\"\n\tlocal first =\
    \ true\n\tfor i = 0, n do\n\t\tif first then\n\t\t\tfirst = false\n\t\telse\n\t\
    \t\tresult = result .. \" \"\n\t\tend\n\t\tresult = result .. tostring(i)\n\t\
    end\n\treturn result\nend", "  if n == 0 then\n    return \"0\"\n  else\n    return\
    \ string_sequence(n-1) .. \" \" .. tostring(n)\n  end\nend", "\tlocal ret = ''\n\
    \tfor i = 0, n do\n\t\tret = ret .. i .. ' '\n\tend\n\treturn ret\nend", "   \
    \ local seq = ''\n    for i = 0, n do\n        seq = seq .. ' ' .. i\n    end\n\
    \    return seq\nend", "    local t = {}\n    for i = 0, n do\n        t[#t +\
    \ 1] = tostring(i)\n    end\n    return table.concat(t, ' ')\nend", "    if n\
    \ == 0 then\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ .. \" \" .. tostring(n)\n    end\nend", "  local result = {}\n  for i = 0, n\
    \ do\n    result[i+1] = tostring(i)\n  end\n  return table.concat(result, ' ')\n\
    end", "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = tostring(i)\n  end\n\
    \  return table.concat(t, ' ')\nend", "    local s = {}\n    for i = 0, n do\n\
    \        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s, ' ')\nend",
  "    return string.rep(\" \" .. n, n) .. \" \" .. n\nend", "  local t = {}\n  for\
    \ i = 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t, '\
    \ ')\nend", "    local s = ''\n    for i = 0, n do\n        s = s .. ' ' .. i\n\
    \    end\n    return string.sub(s, 2)\nend", "  local s = {}\n  for i = 0, n do\n\
    \    s[i + 1] = i\n  end\n  return table.concat(s, ' ')\nend", "  local t = {}\n\
    \  for i = 0, n do\n    t[#t + 1] = tostring(i)\n  end\n  return table.concat(t,\
    \ ' ')\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, ' ')\nend", "  if n == 0 then\n    return\
    \ \"0\"\n  else\n    return string_sequence(n-1) .. \" \" .. tostring(n)\n  end\n\
    end", "    if n == 0 then\n        return \"0\"\n    else\n        return table.concat(table.range(0,\
    \ n), \" \")\n    end\nend", "    local t = {}\n    for i = 0, n do\n        t[#t\
    \ + 1] = tostring(i)\n    end\n    return table.concat(t, ' ')\nend", "  if n\
    \ == 0 then\n    return '0'\n  else\n    return string_sequence(n-1) .. ' ' ..\
    \ tostring(n)\n  end\nend", "\tlocal result = { }\n\tfor i = 0, n do\n\t\tresult[#result\
    \ + 1] = tostring(i)\n\tend\n\treturn table.concat(result, ' ')\nend", "    if\
    \ n == 0 then\n        return '0'\n    else\n        return table.concat(sequence(n),\
    \ ' ')\n    end\nend", "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = i\n\
    \  end\n  return table.concat(t, ' ')\nend", "    local r = {}\n    for i = 0,\
    \ n do\n        r[#r + 1] = tostring(i)\n    end\n    return table.concat(r, '\
    \ ')\nend", "  if n == 0 then\n    return '0'\n  else\n    return string_sequence(n-1)\
    \ .. ' ' .. tostring(n)\n  end\nend", "    local s = {}\n    for i = 0, n do\n\
    \        s[#s + 1] = tostring(i)\n    end\n    return table.concat(s, ' ')\nend",
  "  local s = {}\n  for i = 0, n do\n    s[i + 1] = i\n  end\n  return table.concat(s,\
    \ ' ')\nend", "    local s = {}\n    for i = 0, n do\n        s[#s + 1] = i\n\
    \    end\n    return table.concat(s, ' ')\nend", "    local t = {}\n    for i\
    \ = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend", "    local result = \"\"\n    for i = 0, n do\n        result =\
    \ result .. i .. \" \"\n    end\n    return result\nend", "  local seq = {}\n\
    \  for i = 0, n do\n    seq[i + 1] = tostring(i)\n  end\n  return table.concat(seq,\
    \ ' ')\nend", "    if n == 0 then\n        return \"0\"\n    else\n        return\
    \ string_sequence(n-1) .. \" \" .. tostring(n)\n    end\nend", "    local s =\
    \ ''\n    for i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\n\
    end", "    local s = \"\"\n    for i = 0, n do\n        s = s .. tostring(i) ..\
    \ \" \"\n    end\n    return string.sub(s, 1, -2)\nend", "\tlocal string = ''\n\
    \tfor i = 0, n do\n\t\tstring = string .. ' ' .. i\n\tend\n\treturn string\nend",
  "  return table.concat(num_sequence(n), ' ')\nend", "    return List.concat(List.map(List.range(0,\
    \ n), tostring), ' ')\nend", "    return table.concat(number_sequence(n), ' ')\n\
    end", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, ' ')\nend", "    return table.concat(util.range(n+1),\
    \ ' ')\nend", "    local s = ''\n    for i = 0, n do\n        s = s .. ' ' ..\
    \ i\n    end\n    return s\nend", "    local result = {}\n    for i = 0, n do\n\
    \        result[i+1] = tostring(i)\n    end\n    return table.concat(result, '\
    \ ')\nend", "  local ret = {}\n  for i = 0, n do\n    ret[i + 1] = tostring(i)\n\
    \  end\n  return table.concat(ret, ' ')\nend", "  local s = {}\n  for i = 0, n\
    \ do\n    s[i + 1] = tostring(i)\n  end\n  return table.concat(s, ' ')\nend",
  "    local result = {}\n    for i = 0, n do\n        result[i + 1] = tostring(i)\n\
    \    end\n    return table.concat(result, ' ')\nend", "\tlocal s = ''\n\tfor i\
    \ = 0, n do\n\t\ts = s .. ' ' .. i\n\tend\n\treturn s\nend", "    local t = {}\n\
    \    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend", "  local s = ''\n  for i = 0, n do\n    s = s .. ' ' .. i\n  end\n\
    \  return s\nend", "  if n <= 0 then\n    return '0'\n  else\n    return string_sequence(n-1)\
    \ .. ' ' .. tostring(n)\n  end\nend", "  if n == 0 then\n    return '0'\n  else\n\
    \    return string_sequence(n-1) .. ' ' .. tostring(n)\n  end\nend", "    local\
    \ str = \"\"\n    for i = 0, n do\n        str = str .. \" \" .. i\n    end\n\
    \    return str\nend", "\tlocal arr = {}\n\tfor i = 0, n do\n\t\tarr[i] = i\n\t\
    end\n\treturn table.concat(arr, ' ')\nend", "\tlocal res = {};\n\tfor i = 0, n\
    \ do\n\t\tres[#res + 1] = tostring(i);\n\tend\n\treturn table.concat(res, ' ');\n\
    end", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, ' ')\nend", "    local t = {}\n    for i\
    \ = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ ' ')\nend", "    local s = {}\n    for i = 0, n do\n        s[#s + 1] = i\n\
    \    end\n    return table.concat(s, ' ')\nend", "  local seq = {}\n  for i =\
    \ 0, n do\n    seq[i+1] = tostring(i)\n  end\n  return table.concat(seq, ' ')\n\
    end", "    local s = {}\n    for i = 0, n do\n        s[#s + 1] = tostring(i)\n\
    \    end\n    return table.concat(s, ' ')\nend", "    local i = 0\n    local t\
    \ = {}\n    while i <= n do\n        t[#t+1] = i\n        i = i + 1\n    end\n\
    \    return table.concat(t, ' ')\nend", "  local result = \"\"\n  for i = 0, n\
    \ do\n    result = result .. \" \" .. i\n  end\n  return result\nend", "  local\
    \ result = ''\n  for i = 0, n do\n    result = result .. ' ' .. i\n  end\n  return\
    \ result\nend", "  local a = {}\n  for i = 0, n do\n    a[i + 1] = i\n  end\n\
    \  return table.concat(a, ' ')\nend", "    local list = {}\n    for i = 0, n do\n\
    \        list[#list + 1] = i\n    end\n    return table.concat(list, ' ')\nend",
  "    local s = \"\"\n    for i = 0, n do\n        s = s .. \" \" .. i\n    end\n\
    \    return s\nend", "  local s = {}\n  for i = 0, n do\n    s[i + 1] = tostring(i)\n\
    \  end\n  return table.concat(s, ' ')\nend", "    assert(n >= 0, \"string_sequence()\
    \ expects a positive number or zero.\")\n    local sequence = \"\"\n    for i\
    \ = 0, n do\n        sequence = sequence .. tostring(i) .. \" \"\n    end\n  \
    \  return sequence\nend", "  local s = '0'\n  for i = 1, n do\n    s = s .. '\
    \ ' .. i\n  end\n  return s\nend", "    local str = ''\n    for i = 0, n do\n\
    \        str = str .. tostring(i) .. ' '\n    end\n    return str\nend", "\tlocal\
    \ t = {}\n\tfor i = 0, n do\n\t\tt[#t + 1] = i\n\tend\n\treturn table.concat(t,\
    \ ' ')\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, ' ')\nend", "    local sequence = {}\n  \
    \  for i = 0, n do\n        table.insert(sequence, tostring(i))\n    end\n   \
    \ return table.concat(sequence, ' ')\nend", "  local sequence = {}\n  for i =\
    \ 0, n do\n    table.insert(sequence, tostring(i))\n  end\n  return table.concat(sequence,\
    \ ' ')\nend", "  local s = \"\"\n  for i = 0, n do\n    s = s .. i .. \" \"\n\
    \  end\n  return s\nend", "    local t = {}\n    for i = 0, n do\n        t[#t\
    \ + 1] = tostring(i)\n    end\n    return table.concat(t, ' ')\nend", "    local\
    \ str = ''\n    for i = 0, n do\n        str = str .. i .. ' '\n    end\n    return\
    \ str\nend", "    local s = {}\n    for i = 0, n do\n        s[#s + 1] = i\n \
    \   end\n    return table.concat(s, ' ')\nend", "  local t = {}\n  for i = 0,\
    \ n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend", "    local\
    \ s = \"\"\n    for i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return\
    \ s\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, ' ')\nend", "    assert(n >= 0, 'n must be\
    \ positive')\n    return table.concat(array_sequence(n), ' ')\nend", "    local\
    \ t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ ' ')\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[#t + 1] = tostring(i)\n\
    \tend\n\treturn table.concat(t, ' ')\nend", "    if n > 0 then\n        return\
    \ table.concat({string_sequence(n-1), tostring(n)}, ' ')\n    else\n        return\
    \ tostring(n)\n    end\nend", "    local s = \"\"\n    for i = 0, n do\n     \
    \   s = s .. \" \" .. i\n    end\n    return s\nend", "  local str = \"\"\n  for\
    \ i = 0, n do\n    str = str .. i .. \" \"\n  end\n  return str\nend", "    local\
    \ l = {}\n    for i = 0, n do\n        l[#l + 1] = tostring(i)\n    end\n    return\
    \ table.concat(l, ' ')\nend", "\tlocal numbers = {}\n\tfor i = 0, n do\n\t\tnumbers[i]\
    \ = i\n\tend\n\treturn table.concat(numbers, ' ')\nend", "  local s = \"\"\n \
    \ for i = 0, n do\n    s = s .. \" \" .. i\n  end\n  return s\nend", "    if n\
    \ == 0 then\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ .. \" \" .. tostring(n)\n    end\nend", "    local l = ''\n    for i = 0, n\
    \ do\n        l = l .. i .. ' '\n    end\n    return l\nend", "    local str =\
    \ \"\"\n    for i = 0, n do\n        str = str .. tostring(i) .. ' '\n    end\n\
    \    return str\nend", "    if n == 0 then\n        return '0'\n    else\n   \
    \     return string_sequence(n-1) .. ' ' .. tostring(n)\n    end\nend", "    local\
    \ t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return\
    \ table.concat(t, ' ')\nend", "  local s = ''\n  for i = 0, n do\n    s = s ..\
    \ ' ' .. i\n  end\n  return s\nend", "  return tostring(n):gsub(\"%d\", \"%0 \"\
    ):gsub(\"^ *(.-) *$\", \"%1\")\nend", "\tif n < 0 then return '' end\n\tif n ==\
    \ 0 then return '0' end\n\tlocal res = {}\n\tfor i = 0, n do\n\t\tres[#res + 1]\
    \ = tostring(i)\n\tend\n\treturn table.concat(res, ' ')\nend", "    local s =\
    \ ''\n    for i = 0, n, 1 do\n        s = s .. tostring(i) .. ' '\n    end\n \
    \   return s\nend", "    local s = \"\"\n    for i = 0, n do\n        s = s ..\
    \ \" \" .. i\n    end\n    return string.sub(s, 2)\nend", "  local t = {}\n  for\
    \ i = 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend",
  "  local x = {}\n  for i = 0, n do\n    x[i+1] = tostring(i)\n  end\n  return table.concat(x,\
    \ ' ')\nend", "  local s = ''\n  for i = 0, n do\n    s = s .. ' ' .. i\n  end\n\
    \  return s\nend", "  return tostring(n):gsub('.',function(d)\n    return ' '..d\n\
    \  end)\nend", "  local t = {}\n  for i = 0, n do t[#t+1] = tostring(i) end\n\
    \  return table.concat(t, ' ')\nend", "    if n < 0 then\n        error(\"string_sequence:\
    \ negative argument not supported\")\n    end\n    local s = {}\n    for i = 0,\
    \ n do\n        s[#s + 1] = i\n    end\n    return table.concat(s, \" \")\nend",
  "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = i\n  end\n  return table.concat(t,\
    \ ' ')\nend", "  local arr = {}\n  for i = 0, n do\n    arr[i] = tostring(i)\n\
    \  end\n  return table.concat(arr, ' ')\nend", "    if n == 0 then\n        return\
    \ '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n \
    \   end\nend", "  local result = \"\"\n  for i = 0, n do\n    result = result\
    \ .. \" \" .. i\n  end\n  return result\nend", "  local t = {}\n  for i = 0, n\
    \ do\n    t[#t + 1] = i\n  end\n  return table.concat(t, ' ')\nend", "    local\
    \ s = ''\n    for i = 0, n, 1 do\n        s = s .. ' ' .. i\n    end\n    return\
    \ string.gsub(s, '^ ', '')\nend", "  assert(type(n) == 'number')\n  local sequence\
    \ = {}\n  for i = 0, n do table.insert(sequence, tostring(i)) end\n  return table.concat(sequence,\
    \ ' ')\nend", "  local t = {}\n  for i = 0, n do\n    t[#t + 1] = tostring(i)\n\
    \  end\n  return table.concat(t, ' ')\nend", "    local t = {}\n    for i = 0,\
    \ n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, '\
    \ ')\nend", "\tlocal s = \"\"\n\tfor i = 0, n do\n\t\ts = s .. i .. \" \"\n\t\
    end\n\treturn s\nend", "    local t = {}\n    for i = 0, n do\n        t[#t +\
    \ 1] = tostring(i)\n    end\n    return table.concat(t, ' ')\nend", "  if n ==\
    \ 0 then\n    return '0'\n  else\n    return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \  end\nend", "\tlocal s = {}\n\tfor i = 0, n do\n\t\ts[i+1] = tostring(i)\n\t\
    end\n\treturn table.concat(s, ' ')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
