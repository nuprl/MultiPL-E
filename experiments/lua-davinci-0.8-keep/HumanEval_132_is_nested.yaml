name: HumanEval_132_is_nested
language: lua
prompt: "-- Create a function that takes a string as input which contains only square\
  \ brackets.\n-- The function should return True if and only if there is a valid\
  \ subsequence of brackets \n-- where at least one bracket in the subsequence is\
  \ nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]') \u279E\
  \ False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n--\
  \ is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal function\
  \ is_nested(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
  \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
  \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
  \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
  \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
  \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
  \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
  \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return string:find(\"%[%[\") ~= nil\nend", "    local count_left\
    \ = 0\n    local count_right = 0\n    for s in string:gmatch\".\" do\n       \
    \ if s == \"[\" then count_left = count_left + 1\n        elseif s == \"]\" then\
    \ count_right = count_right + 1 end\n    end\n    if count_left == 0 and count_right\
    \ == 0 then return false end\n    return count_left == count_right\nend", "  local\
    \ stack = {}\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if char == '[' then\n      table.insert(stack, 1, char)\n    elseif\
    \ char == ']' then\n      if #stack > 0 then\n        table.remove(stack, 1)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #stack\
    \ == 0\nend", "    -- body\nend", "  local stack = {}\n  for i=1,#string do\n\
    \    if string:sub(i,i) == '[' then\n      table.insert(stack, 'l')\n    elseif\
    \ string:sub(i,i) == ']' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend", "    local last_position = string:len()\n    local count\
    \ = 0\n    for i = 1, last_position do\n        count = string:sub(i, i) == '['\
    \ and count + 1 or count - 1\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "\treturn false\nend", " \
    \   local bracket_status = 0\n    for i=1,#string do\n        if string:sub(i,i)\
    \ == '[' then\n            bracket_status = bracket_status + 1\n        elseif\
    \ string:sub(i,i) == ']' then\n            bracket_status = bracket_status - 1\n\
    \        end\n        if bracket_status < 0 then\n            return false\n \
    \       end\n    end\n    return bracket_status > 0\nend\nprint(is_nested('[[]]'))\n\
    print(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[][]]'))\nprint(is_nested('[[]][['))\nprint(is_nested('[[]]'))\n\
    print(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "    local depth = 0\n\
    \    for char in string:gmatch('.') do\n        if char == '[' then\n        \
    \    depth = depth + 1\n        elseif char == ']' then\n            depth = depth\
    \ - 1\n        end\n        if depth < 0 then\n            return false\n    \
    \    end\n    end\n    return depth > 0\nend", "    -- body\nend", "    if not\
    \ string:match(\"[[]]\") then\n        return false\n    end\n    local string_new\
    \ = string:gsub(\"%[%]\", \"\")\n    while string_new ~= string do\n        string\
    \ = string_new\n        string_new = string:gsub(\"%[%]\", \"\")\n    end\n  \
    \  return string == \"\"\nend\nprint(is_nested(\"[[]]\"))\nprint(is_nested(\"\
    []]]]]]][[[[[]\"))\nprint(is_nested(\"[][]\"))\nprint(is_nested(\"[]\"))\nprint(is_nested(\"\
    [[][]]\"))\nprint(is_nested(\"[[]][[\"))", "  if #string < 2 then return false\
    \ end\n  local last = 0\n  local first = string:find(']')\n  while first do\n\
    \    last = string:find(']', first + 1)\n    first = string:find('[', last or\
    \ 1)\n  end\n  return last and last > 1\nend", "    string = string:gsub(']%[',\
    \ '')\n    local temp_string = string\n    while true do\n        temp_string\
    \ = temp_string:gsub('%[%]', '')\n        if #temp_string == 0 then\n        \
    \    return true\n        elseif #temp_string == #string then\n            return\
    \ false\n        end\n        string = temp_string\n    end\nend\nassert(is_nested('[[]]'))\n\
    assert(not is_nested('[]]]]]]][[[[[]'))\nassert(not is_nested('[][]'))\nassert(not\
    \ is_nested('[]'))\nassert(is_nested('[[][]]'))\nassert(is_nested('[[]][['))",
  "  local stack = {}\n  for i=1,#string do\n    local c = string:sub(i,i)\n    if\
    \ c == '[' then\n      table.insert(stack,c)\n    elseif c == ']' then\n     \
    \ if stack[#stack] == '[' then\n        table.remove(stack)\n      else\n    \
    \    return false\n      end\n    end\n  end\n  return #stack == 0\nend", "  \
    \  -- body\nend", "\treturn string:match('%[+%[+%[+') or string:match('%[+%[+%[+%[+')\
    \ or string:match('%[+%[+%[+%[+%[+')\nend", "    local open = {[\"[\"] = 1}\n\
    \    local close = {[\"]\"] = -1}\n    local count = 0\n    for i=1,#string do\n\
    \        count = count + (open[string:sub(i,i)] or close[string:sub(i,i)] or 0)\n\
    \        if count < 0 then return false end\n    end\n    return count == 0\n\
    end", "  while string ~= string:gsub('%[%]', '') do\n    string = string:gsub('%[%]',\
    \ '')\n  end\n  return string == ''\nend", "\tlocal stack = {}\n\tfor i=1, #string\
    \ do\n\t\tif string[i] == '[' then\n\t\t\ttable.insert(stack, '(')\n\t\telseif\
    \ string[i] == ']' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\
    \telse\n\t\t\t\ttable.remove(stack)\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack\
    \ == 0\nend", "\tlocal previous_element = nil\n\tlocal stack = Stack.new()\n\t\
    for i = 1, #string do\n\t\tlocal current_element = string:sub(i, i)\n\t\tif current_element\
    \ == \"[\" then\n\t\t\tif previous_element == \"[\" then\n\t\t\t\tstack:push(previous_element)\n\
    \t\t\tend\n\t\t\tprevious_element = current_element\n\t\telseif current_element\
    \ == \"]\" then\n\t\t\tprevious_element = current_element\n\t\t\tif stack:is_empty()\
    \ then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack:pop()\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn stack:is_empty()\nend", "\nend", "    local arr = split(string,\
    \ '')\n    local count = 0\n    for i = 1, #arr do\n        if arr[i] == '[' then\n\
    \            count = count + 1\n        elseif arr[i] == ']' then\n          \
    \  count = count - 1\n        end\n        if count < 0 then\n            return\
    \ false\n        end\n    end\n    return count == 0\nend", "\tlocal matches =\
    \ 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == '[' then\n\t\t\tmatches\
    \ = matches + 1\n\t\telseif string:sub(i, i) == ']' then\n\t\t\tmatches = matches\
    \ - 1\n\t\tend\n\t\tif matches < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return matches > 0\nend", "  \nend", "    local valid = {[\"[\"] = \"]\"}\n  \
    \  local stack = {}\n    for _, char in ipairs(string) do\n        if valid[char]\
    \ then\n            table.insert(stack, char)\n        elseif #stack > 0 and valid[stack[#stack]]\
    \ == char then\n            table.remove(stack)\n        else\n            return\
    \ false\n        end\n    end\n    return #stack == 0\nend", "\t-- your code here\n\
    end", "  local open_brackets = 0\n  local closed_brackets = 0\n  for i = 1, #string\
    \ do\n    if string:sub(i, i) == '[' then\n      open_brackets = open_brackets\
    \ + 1\n    elseif string:sub(i, i) == ']' then\n      closed_brackets = closed_brackets\
    \ + 1\n    end\n  end\n  if open_brackets == 0 and closed_brackets == 0 then\n\
    \    return false\n  elseif open_brackets == closed_brackets then\n    return\
    \ false\n  else\n    return true\n  end\nend", "  local c = 0\n  for _,v in pairs({string.match(string,\
    \ '[]]')}) do\n    if #v > 0 then\n      c = c + 1\n    end\n  end\n  return c\
    \ > 0\nend", "    local stack = {}\n    for i = 1, #string do\n        local char\
    \ = string:sub(i, i)\n        if char == '[' then\n            table.insert(stack,\
    \ char)\n        elseif char == ']' then\n            if #stack > 0 then\n   \
    \             table.remove(stack)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "    local\
    \ open, close = 0, 0\n    for i = 1, #string do\n        if string:sub(i, i) ==\
    \ '[' then\n            open = open + 1\n        else\n            close = close\
    \ + 1\n        end\n        if close > open then\n            return false\n \
    \       end\n    end\n    return open > close\nend", "  local leftSquareBracket\
    \ = 0\n  local rightSquareBracket = 0\n  for i=1, #string do\n    if string:sub(i,i)\
    \ == '[' then\n      leftSquareBracket = leftSquareBracket + 1\n    elseif string:sub(i,i)\
    \ == ']' then\n      rightSquareBracket = rightSquareBracket + 1\n    end\n  end\n\
    \  return leftSquareBracket == rightSquareBracket and leftSquareBracket > 1\n\
    end", "\tlocal nest_count = 0\n\tfor i = 1, string.len(string) do\n\t\tif string.sub(string,\
    \ i, i) == \"[\" then\n\t\t\tnest_count = nest_count + 1\n\t\telseif string.sub(string,\
    \ i, i) == \"]\" then\n\t\t\tnest_count = nest_count - 1\n\t\tend\n\t\tif nest_count\
    \ < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn nest_count > 0\nend",
  "  if string:match(\"%b[]\") == string then\n    return true\n  else\n    return\
    \ false\n  end\nend\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\n\
    print(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\n\
    print(is_nested('[[]][['))", "    -- code here\nend", "    local count_open =\
    \ 0\n    local count_close = 0\n    for i=1, #string do\n        if string:sub(i,i)\
    \ == '[' then\n            count_open = count_open + 1\n        elseif string:sub(i,i)\
    \ == ']' then\n            count_close = count_close + 1\n        end\n    end\n\
    \    return count_open < count_close\nend", "  return string:find('%[%[') and\
    \ true or false\nend", "    local stack = {}\n    for idx = 1, string.len(string)\
    \ do\n        if string.sub(string, idx, idx) == '[' then\n            table.insert(stack,\
    \ ']')\n        else\n            if #stack == 0 then\n                return\
    \ false\n            else\n                table.remove(stack)\n            end\n\
    \        end\n    end\n    return #stack == 0\nend", "    local is_nested = false\n\
    \    local prev_close = 0\n    for i = 1, #string do\n        if string:sub(i,\
    \ i) == '[' then\n            is_nested = true\n        elseif string:sub(i, i)\
    \ == ']' then\n            if i < prev_close then\n                is_nested =\
    \ false\n            end\n            prev_close = i\n        end\n    end\n \
    \   return is_nested\nend", "\tlocal count = 0\n\tlocal end_count = 0\n\tfor i\
    \ = 1, #string do\n\t\tif string:sub(i, i) == '[' then\n\t\t\tcount = count +\
    \ 1\n\t\telseif string:sub(i, i) == ']' then\n\t\t\tend_count = end_count + 1\n\
    \t\tend\n\tend\n\tif end_count > count then\n\t\treturn false\n\telseif count\
    \ - end_count == 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  '    local count = 0', "    local left = {}\n    local last_left = 0\n    for c\
    \ in string:gmatch('[%[%]?]') do\n        if c == '[' then\n            last_left\
    \ = last_left + 1\n            left[last_left] = true\n        elseif c == ']'\
    \ then\n            if last_left == 0 then\n                return false\n   \
    \         end\n            last_left = last_left - 1\n        end\n    end\n \
    \   return last_left == 0\nend", "    local s,e,b,i,c=1,#string,0,0,0\n    local\
    \ t={}\n    for i=s,e do\n        if string:sub(i,i)=='[' then\n            table.insert(t,1)\n\
    \            b=b+1\n        elseif string:sub(i,i)==']' then\n            table.insert(t,2)\n\
    \            b=b-1\n        end\n        if b<0 then\n            break\n    \
    \    end\n    end\n    if b==0 then\n        for i=1,#t-1 do\n            if t[i]==1\
    \ and t[i+1]==2 then\n                c=c+1\n            end\n        end\n  \
    \      if c>0 then\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend", "    local\
    \ right_count = 0\n    local left_count = 0\n    for i = 1, #string do\n     \
    \   if string:sub(i, i) == '[' then\n            left_count = left_count + 1\n\
    \        elseif string:sub(i, i) == ']' then\n            right_count = right_count\
    \ + 1\n        end\n    end\n    if right_count < left_count then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  local counter = 0\n\
    \  for i = 1, #string do\n    if string:sub(i, i) == '[' then\n      counter =\
    \ counter + 1\n    elseif string:sub(i, i) == ']' then\n      counter = counter\
    \ - 1\n    end\n    if counter < 0 then\n      return false\n    end\n  end\n\
    \  return counter == 0\nend", "    local parens = 0\n    for i = 1, string.len(string)\
    \ do\n        local char = string.sub(string, i, i)\n        if char == '[' then\n\
    \            parens = parens + 1\n        elseif char == ']' then\n          \
    \  parens = parens - 1\n        end\n        if parens < 0 then\n            return\
    \ false\n        end\n    end\n    return parens == 0\nend", "    local input\
    \ = string:gsub('%[%]', '')\n    while input:find('%[%[') ~= nil do\n        input\
    \ = input:gsub('%[%[', '')\n    end\n    if input == '' then\n        return true\n\
    \    else\n        return false\n    end\nend", "  return string:find('%[%[')\n\
    end", "    local stack = {}\n    for c in string:gmatch('.') do\n        if c\
    \ == '[' then\n            table.insert(stack, c)\n        elseif c == ']' then\n\
    \            table.remove(stack)\n        end\n    end\n    return #stack == 0\n\
    end", "  if #string % 2 ~= 0 then\n    return false\n  end\n  local counter =\
    \ 0\n  for i = 1, #string do\n    if string:sub(i, i) == '[' then\n      counter\
    \ = counter + 1\n    else\n      counter = counter - 1\n    end\n    if counter\
    \ < 0 then\n      return false\n    end\n  end\n  return counter > 0\nend", " \
    \   if string:find(']') then\n        string = string:gsub(']%[','')\n       \
    \ return is_nested(string)\n    else\n        return string:find('%[') == nil\n\
    \    end\nend", "    local stack = {}\n    for i = 1, #string do\n        local\
    \ char = string:sub(i, i)\n        if char == '[' then\n            table.insert(stack,\
    \ char)\n        elseif char == ']' then\n            if #stack == 0 then\n  \
    \              return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nprint(is_nested('[[]]'))\n\
    print(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "    local count = 0\n\
    \    for i = 1, string.len(string) do\n        if string.sub(string, i, i) ==\
    \ '[' then\n            count = count + 1\n        elseif string.sub(string, i,\
    \ i) == ']' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    -- local count = 0\n    -- for i = 1, string.len(string) do\n\
    \    --     if string.sub(string, i, i) == '[' then\n    --         count = count\
    \ + 1\n    --     elseif string.sub(string, i, i) == ']' then\n    --        \
    \ count = count - 1\n    --     end\n    --     if count < 0 then\n    --    \
    \     return false\n    --     end\n    -- end\n    -- return count == 0", " \
    \   local brackets = {['['] = true, [']'] = true}\n    for i = 1, string.len(string)\
    \ do\n        if brackets[string:sub(i, i)] then\n            local last_open\
    \ = string:find('%[', i)\n            local first_close = string:find('%]', i)\n\
    \            if last_open and first_close and last_open < first_close then\n \
    \               return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    -- find all \"[[]]\"\n    -- string.gsub(str, \"(pattern)\"\
    , replace)\n    local res = string.gsub(string, \"%[%[%]%]\", \"\")\n    if #res\
    \ ~= #string then\n        return true\n    end\n    return false\nend\nprint(is_nested(\"\
    [][]\"))\nprint(is_nested(\"[[]]\"))\nprint(is_nested(\"[[]][[]\"))", "  local\
    \ bracket_stack = {}\n  for i=1, #string do\n    local char = string:sub(i,i)\n\
    \    if char == '[' then\n      table.insert(bracket_stack, char)\n    elseif\
    \ char == ']' then\n      if #bracket_stack > 0 then\n        table.remove(bracket_stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #bracket_stack\
    \ == 0\nend", "    return string:match('%[%[%]]') or string:match('%[%[]%][%[%]]')\n\
    end", "  local stack = Stack:new()\n  for idx = 1, #string do\n    local char\
    \ = string:sub(idx, idx)\n    if char == '[' then\n      stack:push(char)\n  \
    \  elseif char == ']' then\n      if stack:size() == 0 then\n        return false\n\
    \      else\n        stack:pop()\n      end\n    end\n  end\n  return stack:size()\
    \ == 0\nend", "    local stack = {}\n    for i = 1, string.len(string) do\n  \
    \      local char = string.sub(string, i, i)\n        if char == '[' then\n  \
    \          table.insert(stack, 1, char)\n        elseif char == ']' then\n   \
    \         if #stack > 0 then\n                table.remove(stack, 1)\n       \
    \     else\n                return false\n            end\n        end\n    end\n\
    \    return (#stack == 0)\nend", "  local index = 1\n  local current = 1\n  local\
    \ max = 1\n  local count = 0\n  for i = 1, #string do\n    if string.sub(string,\
    \ i, i) == '[' then\n      index = index + 1\n      if current > max then\n  \
    \      max = current\n      end\n      current = 1\n    else\n      current =\
    \ current + 1\n    end\n  end\n  if max == 1 then\n    count = 0\n  else\n   \
    \ count = max - 1\n  end\n  return index > count\nend", "\t-- body\nend", "  \
    \  local bracket_open_no_closed = 0\n    local bracket_closed_no_open = 0\n  \
    \  for _, char in string:gmatch(char) do\n        if char == '[' then\n      \
    \      bracket_open_no_closed = bracket_open_no_closed + 1\n        elseif char\
    \ == ']' then\n            bracket_closed_no_open = bracket_closed_no_open + 1\n\
    \        end\n    end\n    return bracket_open_no_closed > 0 and bracket_closed_no_open\
    \ > 0\nend", "    local left = 0\n    local right = 0\n    for i = 1, #string\
    \ do\n        if (string.sub(string, i, i) == '[') then\n            left = left\
    \ + 1\n        elseif (string.sub(string, i, i) == ']') then\n            right\
    \ = right + 1\n        end\n    end\n    if (left > right) then\n        return\
    \ true\n    else \n        return false\n    end\nend", "    -- your code here\n\
    end", "  \n  -- write your code here\n  return true\nend", "  if string:match(\"\
    %[%]\") then\n    return true\n  else\n    return false\n  end\nend", '    return
    string:match("^%[%[]%[%]%]$") or string:match("^%[%[]%[%[%[%]%]%]%]$") or string:match("^%[%[]%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[',
  "    for i = 1, string.len(string) do\n        if string.sub(string, i, i) == '['\
    \ and string.sub(string, i + 1, i + 1) == ']' then\n            return false\n\
    \        end\n    end\n    return true\nend\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\n\
    print(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\n\
    print(is_nested('[[]][['))", "  local stack = {}\n  for i = 1, #string do\n  \
    \  if string[i] == '[' then\n      table.insert(stack, '[[')\n    elseif string[i]\
    \ == ']' then\n      if stack[#stack] == '[[]' then\n        return true\n   \
    \   else\n        table.remove(stack)\n      end\n    end\n  end\n  return false\n\
    end\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\n\
    print(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))",
  "  local stack = {}\n  for _, char in ipairs(string) do\n    if char == '[' then\n\
    \      table.insert(stack, char)\n    elseif char == ']' then\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack > 0\nend", '    return (string:match("^%[%[%[%[%]]%]]%]]"))
    or (string:match("^%[%[%[]%[%[%[%]]%]]%]]")) or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%]]%]]"))
    or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%[%]]%]]")) or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]"))
    or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%]]%]]")) or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%]]%]]"))
    or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]"))
    or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%]]%]]"))
    or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%]]%]]"))
    or (string:match("^%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%[%[%[%]]%]]%]]%[%[%',
  "  local stack = {}\n  for i = 1, #string do\n    if string:sub(i, i) == '[' then\n\
    \      table.insert(stack, '(')\n    else\n      if #stack == 0 then\n       \
    \ return false\n      else\n        table.remove(stack)\n      end\n    end\n\
    \  end\n  return #stack > 0\nend", "    local stack = {}\n    for i = 1, #string\
    \ do\n        local c = string:sub(i, i)\n        if c == '[' then\n         \
    \   table.insert(stack, c)\n        elseif c == ']' then\n            if stack[#stack]\
    \ == '[' then\n                table.remove(stack)\n            else\n       \
    \         return false\n            end\n        end\n    end\n    return #stack\
    \ == 0\nend", '  local brackets = 0', "  if string == nil then return false end\n\
    \  local f, i = 0, 1\n  while i <= #string do\n    local c = string:sub(i, i)\n\
    \    if c == '[' then\n      f = f + 1\n    elseif c == ']' then\n      f = f\
    \ - 1\n    end\n    if f < 0 then\n      return false\n    end\n    i = i + 1\n\
    \  end\n  return true\nend", "\tlocal stack = {}\n\tfor i = 1, #string do\n\t\t\
    local current_char = string:sub(i, i)\n\t\tif current_char == '[' then\n\t\t\t\
    table.insert(stack, current_char)\n\t\telseif current_char == ']' then\n\t\t\t\
    local previous_char = table.remove(stack)\n\t\t\tif previous_char ~= '[' then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend", "\t\
    local leftBracket, rightBracket = 0, 0\n\tfor i=1, #string do\n\t\tif string:sub(i,i)\
    \ == '[' then\n\t\t\tleftBracket = leftBracket + 1\n\t\telse\n\t\t\trightBracket\
    \ = rightBracket + 1\n\t\tend\n\tend\n\tif leftBracket > rightBracket then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend", "    local count = 0\n \
    \   for i = 1, string.len(string) do\n        if string.sub(string, i, i) == '['\
    \ then\n            count = count + 1\n        elseif string.sub(string, i, i)\
    \ == ']' then\n            count = count - 1\n        end\n        if count <\
    \ 0 then return false end\n    end\n    return count == 0\nend", "    local stack\
    \ = {}\n    for i = 1, string.len(string) do\n        local current = string.sub(string,\
    \ i, i)\n        if current == '[' then\n            table.insert(stack, current)\n\
    \        elseif current == ']' then\n            if #stack == 0 then\n       \
    \         return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "    local\
    \ state = 0\n    for i = 1, string.len(string) do\n        if string.sub(string,\
    \ i, i) == '[' then\n            state = state + 1\n        else\n           \
    \ state = state - 1\n        end\n        if state < 0 then\n            return\
    \ false\n        end\n    end\n    return state > 0\nend", "  local count = 0\n\
    \  for i = 1, #string do\n    if count < 0 then\n      return false\n    end\n\
    \    if string:sub(i, i) == '[' then\n      count = count + 1\n    else\n    \
    \  count = count - 1\n    end\n  end\n  return count == 0\nend", "  local brackets,\
    \ valid_brackets = string:gsub('%[%]',''), string:gsub('%[%]','')\n  return brackets\
    \ ~= valid_brackets, valid_brackets\nend", "    local prev = ' '\n    for _,v\
    \ in ipairs(string) do\n        if v == '[' and prev == '[' then\n           \
    \ return true\n        end\n        prev = v\n    end\n    return false\nend",
  "  local stack = {}\n  for i = 1, #string do\n    local current = string:sub(i,\
    \ i)\n    if current == '[' then\n      table.insert(stack, 1, current)\n    elseif\
    \ current == ']' then\n      if stack[1] == '[' then\n        table.remove(stack,\
    \ 1)\n      else\n        return false\n      end\n    end\n  end\n  return (#stack\
    \ == 0)\nend", "    local initialBrackets = 0\n    local finalBrackets = 0\n \
    \   for i = 1, string.len(string) do\n        if string.sub(string, i, i) == '['\
    \ then\n            initialBrackets = initialBrackets + 1\n        elseif string.sub(string,\
    \ i, i) == ']' then\n            finalBrackets = finalBrackets + 1\n        end\n\
    \    end\n    if initialBrackets == finalBrackets then\n        return false\n\
    \    else\n        return true\n    end\nend", "    local s = ''\n    for _, v\
    \ in ipairs(string) do\n        if v == '[' then\n            s = s .. v\n   \
    \     elseif v == ']' then\n            if s == '' then\n                return\
    \ false\n            else\n                s = s:sub(1, -2)\n            end\n\
    \        end\n    end\n    return s == ''\nend", "    local stack = {}\n    for\
    \ _, char in ipairs(string) do\n        if char == '[' then table.insert(stack,\
    \ char)\n        elseif char == ']' then table.remove(stack) end\n    end\n  \
    \  return #stack == 0\nend\nassert(is_nested('[[]]') == true)\nassert(is_nested('[]]]]]]][[[[[]')\
    \ == false)\nassert(is_nested('[][]') == false)\nassert(is_nested('[]') == false)\n\
    assert(is_nested('[[][]]') == true)\nassert(is_nested('[[]][[') == true)", " \
    \   local open = 0\n    local closed = 0\n    for c in string:gmatch('.') do\n\
    \        if c == '[' then\n            open = open + 1\n        elseif c == ']'\
    \ then\n            closed = closed + 1\n        end\n    end\n    if open ==\
    \ closed then\n        return open ~= 0\n    end\n    return false\nend", "  \
    \  local count = 0\n    for i = 1, string.len(string) do\n        if string.sub(string,\
    \ i, i) == '[' then\n            count = count + 1\n        elseif string.sub(string,\
    \ i, i) == ']' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local len = string.len(string)\n    local left = 0\n    local right\
    \ = 0\n    for i = 1, len do\n        local char = string.sub(string, i, i)\n\
    \        if char == '[' then\n            left = left + 1\n        elseif char\
    \ == ']' then\n            right = right + 1\n        end\n    end\n    return\
    \ (left > 0 and right > 0)\nend\nreturn is_nested", "  -- Check if string is empty\n\
    \  if string == \"\" then\n    return false\n  end\n  -- Remove outer brackets\
    \ until string is empty or has only one character left\n  while string:sub(1,1)\
    \ == '[' and string:sub(-1,-1) == ']' and #string > 1 do\n    string = string:sub(2,-2)\n\
    \  end\n  return #string == 0\nend", "  while true do\n    local is = string:find('][')\n\
    \    if is == nil then\n      break\n    end\n    string = string:sub(1, is-1)\
    \ .. string:sub(is+2)\n  end\n  return string:len() > 0\nend", "    return string:match('.*%[%[.+%]%].*')\
    \ and true or false\nend", "    local stack = {}\n    for i=1, #string do\n  \
    \      local c = string:sub(i,i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "  local\
    \ stack = {}\n  for i = 1, #string do\n    local c = string:sub(i, i)\n    if\
    \ c == '[' then\n      table.insert(stack, c)\n    elseif c == ']' then\n    \
    \  if #stack == 0 then\n        return false\n      else\n        table.remove(stack)\n\
    \      end\n    end\n  end\n  return #stack == 0\nend", "  local count = 0\n \
    \ for i = 1, string.len(string) do\n    if string.sub(string, i, i) == '[' then\n\
    \      count = count + 1\n    elseif string.sub(string, i, i) == ']' then\n  \
    \    count = count - 1\n    end\n    if count < 0 then return false end\n  end\n\
    \  return count == 0\nend", "    if string:match('[[]]') or string:match('[][]')\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \   local stack = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if c == '[' then\n            table.insert(stack, c)\n        elseif\
    \ c == ']' then\n            local c2 = table.remove(stack)\n            if c2\
    \ ~= '[' then\n                return false\n            end\n        end\n  \
    \  end\n    return stack[1] == nil\nend", "  -- SOLUTION:\n  -- return #string\
    \ ~= string:gsub('%[%[',''):gsub('%[%]',''):len()\n  -- \n  -- -- ALTERNATIVE:\n\
    \  -- return string:find('%[%[') and string:find('%[%]') or false\n  -- \n  --\
    \ -- ALTERNATIVE:\n  -- return string:match('%[%[') and string:match('%[%]') or\
    \ false\n  -- \n  -- -- ALTERNATIVE:\n  -- for i=1,#string do\n  --   if string:find('%[%[',i)\
    \ and string:find('%[%]',i) then\n  --     return true\n  --   end\n  -- end\n\
    \  -- return false\n  -- \n  -- -- ALTERNATIVE:\n  -- for i=1,#string do\n  --\
    \   if string:match('%[%[',i) and string:match('%[%]',i) then\n  --     return\
    \ true\n  --   end\n  -- end\n  -- return false\n  -- \n  -- -- ALTERNATIVE:\n\
    \  -- return not not string:match('%[%[') and not not string:match('%[%]')\n \
    \ -- \n  -- -- ALTERNATIVE:\n  -- local last_index = 0\n  -- for i=1,#string do\n\
    \  --   if string:find('%[%[',i) then\n  --     for ii=i,#string do\n  --    \
    \   if string:find('%[%]',ii) then\n  --         last_index = ii\n  --       \
    \  return true\n  --       end\n  --     end\n  --   end\n  -- end\n  -- return\
    \ false\n  -- \n  -- -- ALTERNATIVE:\n  -- local last_index = 0\n  -- for i=1,#string\
    \ do\n  --   if string:match('%[%[',i) then\n  --     for ii=i,#string do\n  --\
    \       if string:match('%[%]',ii) then\n  --         last_index = ii\n  --  \
    \       return true\n  --       end\n  --     end\n  --   end", "\nend", "  return\
    \ string:match('%[%[+%].-%]%[+%]') and true or false\nend", "  local open_brackets\
    \ = 0\n  local closed_brackets = 0\n  for c in string:gmatch\".\" do\n    if c\
    \ == '[' then open_brackets = open_brackets + 1 end\n    if c == ']' then closed_brackets\
    \ = closed_brackets + 1 end\n    if closed_brackets > open_brackets then return\
    \ false end\n  end\n  return closed_brackets > 0\nend", "    -- local bracket_pairs\
    \ = {\n    --     ['['] = ']',\n    --     ['{'] = '}',\n    --     ['('] = ')'\n\
    \    -- }\n    local bracket_pairs = {\n        [']'] = '[',\n        ['}'] =\
    \ '{',\n        [')'] = '('\n    }\n    local bracket_stack = {}\n    for i=1,#string\
    \ do\n        local bracket = string:sub(i,i)\n        if bracket_pairs[bracket]\
    \ then\n            if bracket_stack[#bracket_stack] == bracket_pairs[bracket]\
    \ then\n                table.remove(bracket_stack)\n            else\n      \
    \          return false\n            end\n        else\n            table.insert(bracket_stack,\
    \ bracket)\n        end\n    end\n    return #bracket_stack == 0\nend", "  return\
    \ string:match('%[%[.*%]%]') ~= nil\nend", "    if string == \"\" then return\
    \ false end\n    local open = 0\n    local close = 0\n    for i = 1, string.len(string)\
    \ do\n        if string.sub(string, i, i) == \"[\" then\n            open = open\
    \ + 1\n        elseif string.sub(string, i, i) == \"]\" then\n            close\
    \ = close + 1\n        end\n    end\n    return open > 0 and close > 0 and open\
    \ < close\nend", "    local sum = 0\n    for i = 1, #string do\n        if string:sub(i,\
    \ i) == '[' then\n            sum = sum + 1\n        else\n            sum = sum\
    \ - 1\n        end\n        if sum < 0 then\n            return false\n      \
    \  end\n    end\n    return sum == 0\nend", "  local stack = {}\n  for i = 1,\
    \ #string do\n    local c = string:sub(i, i)\n    if (c == '[') then table.insert(stack,\
    \ c)\n    elseif (c == ']') then\n      if (#stack == 0) then return false end\n\
    \      table.remove(stack)\n    end\n  end\n  return (#stack == 0)\nend", "\t\
    local open_brackets = 0\n\tlocal closed_brackets = 0\n\tfor i = 1, string.len(string)\
    \ do\n\t\tif string.sub(string, i, i) == '[' then\n\t\t\topen_brackets = open_brackets\
    \ + 1\n\t\telseif string.sub(string, i, i) == ']' then\n\t\t\tclosed_brackets\
    \ = closed_brackets + 1\n\t\tend\n\tend\n\tif closed_brackets > open_brackets\
    \ then\n\t\treturn false\n\telseif closed_brackets == open_brackets then\n\t\t\
    return false\n\telse\n\t\treturn true\n\tend\nend\nprint(is_nested('[][][][[]'))",
  "  local stack = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if char == '[' then\n      table.insert(stack, char)\n    elseif char ==\
    \ ']' then\n      if #stack > 0 then\n        table.remove(stack)\n      else\n\
    \        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
  "    -- your code here\nend", "  \n  local count = 0\n  for i = 1, #string do\n\
    \    if string[i] == '[' then\n      count = count + 1\n    elseif string[i] ==\
    \ ']' then\n      count = count - 1\n    end\n    if count < 0 then return false\
    \ end\n  end\n  return true\nend\nprint(is_nested('[[][]]'))\nprint(is_nested('[[][][]]'))\n\
    print(is_nested('[[]][[]]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[[]][['))\n\
    print(is_nested('[[][]]'))", "  for i=1,#string do\n    if string:sub(i,i) ==\
    \ \"[\" then\n      for j=i+1,#string do\n        if string:sub(j,j) == \"]\"\
    \ then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "  local c = 0\n  for i = 1, #string do\n    local v = string:sub(i,\
    \ i)\n    if v == '[' then\n      c = c + 1\n    elseif v == ']' then\n      c\
    \ = c - 1\n    end\n    if c < 0 then\n      return false\n    end\n  end\n  return\
    \ c == 0\nend", "\nend", "  local stack = 0\n  for i = 1, #string do\n    if string:sub(i,\
    \ i) == '[' then\n      stack = stack + 1\n    else\n      stack = stack - 1\n\
    \    end\n    if stack < 0 then\n      return false\n    end\n  end\n  return\
    \ stack > 0\nend", "    local bracket_count = 0\n    for _, char in ipairs(string)\
    \ do\n        if char == '[' then\n            bracket_count = bracket_count +\
    \ 1\n        elseif char == ']' then\n            bracket_count = bracket_count\
    \ - 1\n        end\n        if bracket_count < 0 then\n            return false\n\
    \        end\n    end\n    return bracket_count > 0\nend", "    local has_nested\
    \ = false\n    local stack = Stack()\n    for c in string:gmatch(\".\") do\n \
    \       if c == \"[\" then\n            stack:push(c)\n        elseif c == \"\
    ]\" then\n            if stack:peek() == \"[\" then\n                stack:pop()\n\
    \                has_nested = true\n            else\n                stack:push(c)\n\
    \            end\n        end\n    end\n    return has_nested and stack:empty()\n\
    end", "    local open, close = 0, 0\n    for _, char in ipairs(string) do\n  \
    \      if char == '[' then\n            open = open + 1\n        elseif char ==\
    \ ']' then\n            close = close + 1\n        end\n    end\n    return open\
    \ > close\nend", "  local pre1 = string:gsub('%[%]', '')\n  local pre2 = pre1:gsub('%[[%]%]',\
    \ '')\n  local pre3 = pre2:gsub('%[[%[%]%]%]', '')\n  local pre4 = pre3:gsub('%[[%[%[%]%]%]%]',\
    \ '')\n  local pre5 = pre4:gsub('%[[%[%[%[%]%]%]%]%]', '')\n  local pre6 = pre5:gsub('%[[%[%[%[%[%]%]%]%]%]%]',\
    \ '')\n  local pre7 = pre6:gsub('%[[%[%[%[%[%[%]%]%]%]%]%]%]', '')\n  local pre8\
    \ = pre7:gsub('%[[%[%[%[%[%[%[%]%]%]%]%]%]%]%]', '')\n  local pre9 = pre8:gsub('%[[%[%[%[%[%[%[%[%]%]%]%]%]%]%]%]%]',\
    \ '')\n  local pre10 = pre9:gsub('%[[%[%[%[%[%[%[%[%[%]%]%]%]%]%]%]%]%]%]', '')\n\
    \  if pre10 == '' then\n    return true\n  else\n    return false\n  end\nend",
  "    local stack, new_string = {}, \"\"\n    for i=1,#string do\n        local char\
    \ = string:sub(i,i)\n        if char == \"[\" then\n            table.insert(stack,\
    \ \"[\")\n        elseif char == \"]\" then\n            table.remove(stack)\n\
    \        end\n        new_string = new_string .. char\n        if #stack == 0\
    \ then\n            break\n        end\n    end\n    local reverse_string = string.reverse(new_string)\n\
    \    local open_count, close_count = 0, 0\n    for i=1,#reverse_string do\n  \
    \      local char = reverse_string:sub(i,i)\n        if char == \"[\" then\n \
    \           open_count = open_count + 1\n        elseif char == \"]\" then\n \
    \           close_count = close_count + 1\n        end\n        if open_count\
    \ > 0 and close_count > 0 then\n            return true\n        end\n    end\n\
    \    return false\nend", "  local brackets = { ['['] = ']', [']'] = '[' }\n  local\
    \ s_len, buffer = string.len(string), {}\n  local bracket, match", "    -- number\
    \ of opening brackets\n    local open = 0", "    stack = Stack.new()\n    for\
    \ i = 1, #string do\n        local char = string:sub(i, i)\n        if char ==\
    \ '[' then\n            stack:push(char)\n        elseif char == ']' then\n  \
    \          if stack:is_empty() then\n                return false\n          \
    \  else\n                stack:pop()\n            end\n        end\n    end\n\
    \    return stack:is_empty()\nend", "\tlocal count = 0\n\tfor i = 1, #string do\n\
    \t\tif string:sub(i, i) == '[' then\n\t\t\tcount = count + 1\n\t\telseif string:sub(i,\
    \ i) == ']' then\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn count > 0\nend", "  local results = {\
    \ [\"{\"] = \"}\", [\"[\"] = \"]\", [\"(\"] = \")\" }\n  local left, right = {},\
    \ {}\n  for i = 1, #string do\n    if string.sub(string, i, i) == \"{\" or string.sub(string,\
    \ i, i) == \"[\" or string.sub(string, i, i) == \"(\" then\n      table.insert(left,\
    \ string.sub(string, i, i))\n    elseif string.sub(string, i, i) == \"}\" or string.sub(string,\
    \ i, i) == \"]\" or string.sub(string, i, i) == \")\" then\n      table.insert(right,\
    \ string.sub(string, i, i))\n    end\n  end\n  local left_count, right_count =\
    \ 0, 0\n  for i = 1, #left do\n    if results[left[i]] == right[i] then\n    \
    \  left_count = left_count + 1\n    end\n  end\n  for i = 1, #right do\n    if\
    \ results[left[i]] == right[i] then\n      right_count = right_count + 1\n   \
    \ end\n  end\n  if left_count > 0 and right_count > 0 then\n    return true\n\
    \  else\n    return false\n  end\nend", "  return string:find('%[%]')\nend", " \
    \   local right_brackets = {[\"}\"] = \"{\"; [\"]\"] = \"[\"; [\")\"] = \"(\"\
    }\n    local stack = {}\n    for i = 1, #string do\n        local ch = string:sub(i,\
    \ i)\n        if ch == \"(\" or ch == \"[\" or ch == \"{\" then\n            table.insert(stack,\
    \ ch)\n        elseif ch == \")\" or ch == \"]\" or ch == \"}\" then\n       \
    \     if #stack > 0 and stack[#stack] == right_brackets[ch] then\n           \
    \     table.remove(stack)\n            else\n                return false\n  \
    \          end\n        end\n    end\n    return #stack == 0\nend", "  local length\
    \ = string.len(string)\n  local output = false\n  local currentCharacter\n  local\
    \ buffer = ''\n  for i = 1, length do\n    currentCharacter = string.sub(string,\
    \ i, i)\n    if currentCharacter == '[' then\n      buffer = buffer .. currentCharacter\n\
    \    elseif currentCharacter == ']' then\n      buffer = buffer .. currentCharacter\n\
    \      if buffer == '[]' then\n        output = true\n        break\n      end\n\
    \    end\n  end\n  return output\nend", "    local counter = 0\n    for i=1,#string\
    \ do\n        if string:sub(i,i) == '[' then\n            counter = counter +\
    \ 1\n        elseif string:sub(i,i) == ']' then\n            counter = counter\
    \ - 1\n        end\n        if counter < 0 then\n            return false\n  \
    \      end\n    end\n    return counter == 0\nend", "    local count = 0\n   \
    \ for i = 1, #string do\n        if count < 0 then return false end\n        if\
    \ string:sub(i, i) == '[' then\n            count = count + 1\n        else\n\
    \            count = count - 1\n        end\n    end\n    return count == 0\n\
    end", "    local balance = 0\n    for i = 1, #string do\n        if string[i]\
    \ == '[' then\n            balance = balance + 1\n        else\n            balance\
    \ = balance - 1\n        end\n        if balance < 0 then\n            return\
    \ false\n        end\n    end\n    return balance > 0\nend", "    for i = 1, #string\
    \ do\n        if string:find('[]') or string:find('[[][]]') then\n           \
    \ return true\n        end\n    end\n    return false\nend", "    return string:match(\"\
    .[[]\") or string:match(\"[[].\")\nend", "\nend", "  local patterns = {'\\\\[\\\
    \\[\\\\]\\\\]', '\\\\[\\\\[\\\\]', '\\\\]\\\\]\\\\[\\\\[', '\\\\]\\\\]\\\\[',\
    \ '\\\\[\\\\]\\\\]\\\\[', '\\\\[\\\\]\\\\]', '\\\\[\\\\]\\\\[\\\\]', '\\\\[\\\\\
    ]\\\\[', '\\\\]\\\\[\\\\]\\\\]'}\n  for i, pattern in ipairs(patterns) do\n  \
    \  string = string:gsub(pattern, '')\n  end\n  return #string == 0\nend", "  \
    \  local depth = 0\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if char == '[' then\n            depth = depth + 1\n        elseif\
    \ char == ']' then\n            depth = depth - 1\n        end\n        if depth\
    \ < 0 then\n            return false\n        end\n    end\n    return depth >\
    \ 0\nend", "\tif string == '' then return false end\n\tif string:match('%[%]')\
    \ then return true end\n\tlocal function nest( string )\n\t\tif string:match('%[%]')\
    \ then return true end\n\t\tif string:match('^%[%]') then return nest(string:sub(3))\
    \ end\n\t\tif string:match('%[%]$') then return nest(string:sub(1,-3)) end\n\t\
    \tif string:match('%[%]') then return nest(string:gsub('%[%]','')) end\n\t\treturn\
    \ false\n\tend\n\treturn nest(string)\nend", "    local num = 0\n    for i = 1,\
    \ #string do\n        if string[i] == '[' then\n            num = num + 1\n  \
    \      else\n            num = num - 1\n        end\n        if num < 0 then\n\
    \            return false\n        end\n    end\n    return num == 0\nend\nprint(is_nested('[[]]'))\n\
    print(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "    local even = 0\n\
    \    local odd = 0\n    for i = 1, #string do\n        if i % 2 == 0 then\n  \
    \          if string.sub(string, i, i) == '[' then\n                even = even\
    \ + 1\n            end\n        else\n            if string.sub(string, i, i)\
    \ == ']' then\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    if even == odd then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    local count = 0\n    for i = 1, #string do\n    \
    \    if string:sub(i, i) == '[' then\n            count = count + 1\n        elseif\
    \ string:sub(i, i) == ']' then\n            count = count - 1\n        end\n \
    \       if count < 0 then\n            return false\n        end\n    end\n  \
    \  return count == 0\nend", "    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "  -- code\
    \ here\nend", "    return string:match('(%[%])%1*') and true or false\nend", " \
    \ \n  local str_table = {}\n  for i = 1, string.len(string) do\n    if (string.sub(string,\
    \ i, i) == '[') then\n      table.insert(str_table, '[')\n    elseif (string.sub(string,\
    \ i, i) == ']') then\n      table.remove(str_table)\n    end\n  end\n  \n  return\
    \ #str_table == 0, #str_table\n  \nend", "  if string:match('[^%[%]]') then return\
    \ false end\n  while string:match('%[%[') or string:match('%]%]') do\n    string\
    \ = string:gsub('%[%[',''):gsub('%]%]','')\n  end\n  return string:len() < 1\n\
    end", "    local stack = {}\n    for c in string:gmatch '.' do\n        if c ==\
    \ '[' then\n            table.insert(stack, c)\n        elseif c == ']' then\n\
    \            if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend", "  if string:match(\".*%[%[.*%]%].*\") then\n \
    \   return true\n  else\n    return false\n  end\nend\nprint(is_nested('[[]]'))\n\
    print(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\n\
    print(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "    local list = {}\n\
    \    for _, c in pairs(string) do\n        if c == '[' then\n            table.insert(list,\
    \ 1, c)\n        elseif c == ']' then\n            if #list == 0 then\n      \
    \          return false\n            else\n                table.remove(list,\
    \ 1)\n            end\n        end\n    end\n    return #list == 0\nend", "\t\
    local seq = {};\n\tfor i = 1, string.len(string) do\n\t\tlocal char = string.sub(string,\
    \ i, i);\n\t\tif char == '[' then\n\t\t\ttable.insert(seq, char);\n\t\telseif\
    \ char == ']' then\n\t\t\tif table.remove(seq) ~= '[' then\n\t\t\t\treturn false;\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn #seq == 0;\nend", "  local open = {}\n  for\
    \ _, c in ipairs({string.byte(string, 1, #string)}) do\n    if c == 91 then\n\
    \      table.insert(open, c)\n    elseif c == 93 then\n      if #open == 0 then\n\
    \        return false\n      else\n        table.remove(open)\n      end\n   \
    \ end\n  end\n  return #open == 0\nend", "  if type(string) ~= \"string\" then\
    \ return end\n  local stack = {}\n  for i=1,#string do\n    local char = string:sub(i,i)\n\
    \    if char == \"[\" then\n      table.insert(stack, \"]\")\n    elseif char\
    \ == \"]\" then\n      if stack[#stack] == \"]\" then\n        table.remove(stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #stack\
    \ == 0\nend", "  local nesting = 0\n  for i = 1, #string do\n    if string[i]\
    \ == '[' then\n      nesting = nesting + 1\n    else\n      nesting = nesting\
    \ - 1\n    end\n    if nesting < 0 then\n      return false\n    end\n  end\n\
    \  return nesting == 0\nend", "  local stack = {}\n  for i = 1, #string do\n \
    \   if (string[i] == '[') then\n      table.insert(stack, '[')\n    elseif (string[i]\
    \ == ']') then\n      if (#stack == 0) then\n        return false\n      else\n\
    \        table.remove(stack)\n      end\n    end\n  end\n  return (#stack == 0)\n\
    end", "\treturn string:match('%[%[.-%]%]')\nend\nassert(is_nested('[[]]') == true)\n\
    assert(is_nested('[]]]]]]][[[[[]') == false)\nassert(is_nested('[][]') == false)\n\
    assert(is_nested('[]') == false)\nassert(is_nested('[[][]]') == true)\nassert(is_nested('[[]][[')\
    \ == true)\nassert(is_nested('[][][][]') == false)\nassert(is_nested('[][][[[]]]')\
    \ == true)\nassert(is_nested('[][][][]') == false)\nassert(is_nested('[][][[]]')\
    \ == true)\nassert(is_nested('[][[][][]]') == true)\nassert(is_nested('[][[[][][]]]')\
    \ == true)", "  local count = 0\n  for i = 1, #string do\n    if count < 0 then\n\
    \      return false\n    end\n    if string:sub(i, i) == '[' then\n      count\
    \ = count + 1\n    else\n      count = count - 1\n    end\n  end\n  return count\
    \ == 0\nend", "  -- ...\nend", "\tstring = string:gsub('[^%[%]]', '')\n\tlocal\
    \ len = string:len()\n\tfor i = 1, len do\n\t\tstring = string:gsub('%[%]', '')\n\
    \tend\n\treturn len ~= string:len()\nend", "    local stack = {}\n    for i =\
    \ 1, #string do\n        local char = string:sub(i, i)\n        if char == '['\
    \ then\n            table.insert(stack, char)\n        elseif char == ']' then\n\
    \            if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\n\
    print(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\n\
    print(is_nested('[[]][['))", "    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        if string.sub(string, i, i) == '[' then\n            count = count\
    \ + 1\n        elseif string.sub(string, i, i) == ']' then\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    local n = string:len()\n\
    \    local depth = 0\n    for i = 1, n do\n        local ch = string:sub(i, i)\n\
    \        if ch == '[' then\n            depth = depth + 1\n        elseif ch ==\
    \ ']' then\n            depth = depth - 1\n        end\n        if depth < 0 then\n\
    \            return false\n        end\n    end\n    return depth == 0\nend\n\
    assert(is_nested('[[]]') == true)\nassert(is_nested('[]]]]]]][[[[[]') == false)\n\
    assert(is_nested('[][]') == false)\nassert(is_nested('[]') == false)\nassert(is_nested('[[][]]')\
    \ == true)\nassert(is_nested('[[]][[') == true)\nassert(is_nested('[[') == false)\n\
    assert(is_nested(']]') == false)\nassert(is_nested('[[[]]') == false)\nassert(is_nested('[[[[[[[]]]]]]]')\
    \ == true)\nassert(is_nested('[[][]]]') == false)\nassert(is_nested('[]]]') ==\
    \ false)\nassert(is_nested('[[[]]]]') == false)\nassert(is_nested(']][[') == false)\n\
    assert(is_nested('[[][[') == false)\nassert(is_nested('][[[') == false)\nassert(is_nested('][]')\
    \ == false)\nassert(is_nested('[]][[]') == false)\nassert(is_nested('[]][') ==\
    \ false)\nassert(is_nested('][') == false)\nassert(is_nested('[][') == false)\n\
    assert(is_nested(']][') == false)\nassert(is_nested('[]]') == false)\nassert(is_nested('[[][')\
    \ == false)\nassert(is_nested('[[[[[[[[[]]]]]]]]]') == true)\nassert(is_nested('[][]]]')\
    \ == false)\nassert(is_nested('[][][]') == false)\nassert(is_", "  for i = 1,\
    \ string.len(string) do\n    for j = i, string.len(string) do\n      local p =\
    \ string.sub(string, i, j)\n      if string.match(p, \"%[%]\") then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "    local nested = false\n\
    \    local lvl = 0\n    for i = 1, string.len(string) do\n        if string.sub(string,\
    \ i, i) == '[' then\n            lvl = lvl + 1\n        elseif string.sub(string,\
    \ i, i) == ']' then\n            lvl = lvl - 1\n        end\n        if lvl >\
    \ 1 then\n            nested = true\n        end\n    end\n    return nested\n\
    end", "    string:gsub('[^[]', '')\n    if string:find('[[') == nil then return\
    \ false end\n    if string:find(']]') == nil then return false end\n    if string:find('[[')\
    \ > string:find(']]') then return false end\n    return true\nend", "\t\nend",
  "    local stack = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if char == '[' then\n            table.insert(stack, 1, char)\n\
    \        elseif char == ']' then\n            if #stack > 0 then\n           \
    \     table.remove(stack, 1)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "  local\
    \ stack = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '[' then\n  \
    \    stack = stack + 1\n    else\n      stack = stack - 1\n    end\n    if stack\
    \ < 0 then\n      return false\n    end\n  end\n  return stack > 0\nend", "  local\
    \ seq = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '[' then\n    \
    \  seq = seq + 1\n    else\n      seq = seq - 1\n    end\n    if seq < 0 then\n\
    \      return false\n    end\n  end\n  return seq == 0\nend", "    local sum =\
    \ 0\n    for i = 1, #string do\n        if string[i] == '[' then\n           \
    \ sum = sum + 1\n        else\n            sum = sum - 1\n        end\n      \
    \  if sum < 0 then\n            return false\n        end\n    end\n    return\
    \ sum == 0\nend", "    return string:find(\"%[%[\") and string:find(\"%]%]\")\n\
    end", "    local s = string:gsub('%[%[%]%]', '')\n    return #s == 0\nend", "\t\
    local stack = {}\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\
    \t\tif (char == \"[\") then\n\t\t\ttable.insert(stack, char)\n\t\telseif (#stack\
    \ > 0) then\n\t\t\ttable.remove(stack)\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn (#stack == 0)\nend", "\nend", "    local length = #string\n  \
    \  local brackets = {}\n    local i = 1\n    while i <= length do\n        if\
    \ string:sub(i, i) == '[' then\n            table.insert(brackets, string:sub(i,\
    \ i))\n        elseif string:sub(i, i) == ']' then\n            if #brackets ==\
    \ 0 then\n                return false\n            else\n                table.remove(brackets)\n\
    \            end\n        end\n        i = i + 1\n    end\n    return #brackets\
    \ == 0\nend", "    local count = 0\n    for i = 1, #string do\n        if string:sub(i,\
    \ i) == '[' then\n            count = count + 1\n        elseif string:sub(i,\
    \ i) == ']' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend", "    -- if ends don't match, return false\n    if string:sub(1,1) ==\
    \ ']' or string:sub(-1) == '[' then\n        return false\n    end\n    -- iterate\
    \ through string and return false if it sees \n    -- a closing before an opening\n\
    \    for i = 1, #string - 1 do\n        if string:sub(i,i) == ']' and string:sub(i+1,i+1)\
    \ == '[' then\n            return false\n        end\n    end\n    return true\n\
    end", "\tlocal count = 0", "  local num = 0\n  for i = 1, #string do\n    if string:sub(i,\
    \ i) == '[' then\n      num = num + 1\n    else\n      num = num - 1\n    end\n\
    \    if num < 0 then\n      return false\n    end\n  end\n  return num == 0\n\
    end", "\tlocal level = 0\n\tlocal has_open = false\n\tfor i = 1, string.len(string)\
    \ do\n\t\tif string.sub(string, i, i) == '[' then\n\t\t\tlevel = level + 1\n\t\
    \t\thas_open = true\n\t\telse\n\t\t\tlevel = level - 1\n\t\tend\n\t\tif level\
    \ < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn has_open and level ==\
    \ 0\nend", "    local stack = {}\n    for i = 1, string.len(string) do\n     \
    \   local ch = string.sub(string, i, i)\n        if ch == '[' then\n         \
    \   table.insert(stack, ch)\n        elseif ch == ']' then\n            if #stack\
    \ == 0 then\n                return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "  return\
    \ false\nend", "    -- First, get the amount of bracket pairs found in the string.\n\
    \    local i = string:gsub('%[%]', '')\n    if i == 0 then return false end\n\
    \    -- Next, check if the brackets are in place.\n    local j = string:match('%[%]')\n\
    \    if j == nil then return false end\n    -- Finally, remove all bracket pairs,\
    \ and if there are any left, return false.\n    local k = string:gsub('%[%]',\
    \ '')\n    if k == '' then return true else return false end\nend", "  local stack\
    \ = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char\
    \ == '[' then\n      table.insert(stack, char)\n    elseif char == ']' then\n\
    \      if #stack == 0 then\n        return false\n      else\n        table.remove(stack)\n\
    \      end\n    end\n  end\n  return #stack > 0\nend", "    while string:find('[]')\
    \ do\n        string = string:gsub('[]', '')\n    end\n    return string == ''\n\
    end", "    local count=0\n    for i=1,#string do\n        if string:sub(i,i)=='['\
    \ then\n            count=count+1\n        elseif string:sub(i,i)==']' then\n\
    \            count=count-1\n        end\n        if count<0 then\n           \
    \ return false\n        end\n    end\n    return count>0\nend\nassert(is_nested('[[]]')==true)\n\
    assert(is_nested('[]]]]]]][[[[[]')==false)\nassert(is_nested('[][]')==false)\n\
    assert(is_nested('[]')==false)\nassert(is_nested('[[][]]')==true)\nassert(is_nested('[[]][[')==true)",
  "\tlocal stack = {}\n\tlocal lookup = {\n\t\t[\"[\"] = \"]\",\n\t\t[\"{\"] = \"\
    }\",\n\t\t[\"(\"] = \")\"\n\t}\n\tfor _, val in ipairs(string:split(\"\")) do\n\
    \t\tif lookup[val] then\n\t\t\ttable.insert(stack, val)\n\t\telseif #stack > 0\
    \ and lookup[stack[#stack]] == val then\n\t\t\ttable.remove(stack)\n\t\telse\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn #stack == 0\nend", "  local stack\
    \ = {}\n  for _, char in ipairs(string) do\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      table.remove(stack)\n    end\n  end\n\
    \  return #stack > 0\nend", "    assert(type(string) == \"string\")\n    local\
    \ list = {}\n    for i=1, #string do\n        local c = string:sub(i,i)\n    \
    \    if c == \"[\" then\n            table.insert(list, 1, c)\n        elseif\
    \ c == \"]\" then\n            table.remove(list, 1)\n        end\n    end\n \
    \   return #list == 0\nend", "\tlocal stack = {}\n\tfor i = 1, #string do\n\t\t\
    local char = string:sub(i, i)\n\t\tif char == '[' then\n\t\t\ttable.insert(stack,\
    \ char)\n\t\telseif char == ']' then\n\t\t\tif #stack > 0 then\n\t\t\t\ttable.remove(stack)\n\
    \t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack ==\
    \ 0\nend", "    local left_brackets = {}\n    local right_brackets = {}\n    for\
    \ i=1, #string do\n        if string:sub(i,i) == '[' then\n            table.insert(left_brackets,\
    \ i)\n        else\n            table.insert(right_brackets, i)\n        end\n\
    \    end\n    if #left_brackets == 0 and #right_brackets == 0 then\n        return\
    \ false\n    end\n    for i=1, #left_brackets do\n        if left_brackets[i]\
    \ > right_brackets[i] then\n            return false\n        end\n    end\n \
    \   return true\nend", "\tlocal open=0\n\tlocal close=0\n\tfor c in string:gmatch(\"\
    .\") do\n\t\tif c==\"[\" then\n\t\t\topen=open+1\n\t\telseif c==\"]\" then\n\t\
    \t\tclose=close+1\n\t\tend\n\tend\n\tif open==close then\n\t\treturn false\n\t\
    else\n\t\treturn true\n\tend\nend", "    local stack = Stack()\n    for c in string:gmatch(\"\
    .\") do\n        if c == \"[\" then\n            stack:push(\"x\")\n        elseif\
    \ c == \"]\" then\n            if stack:empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return stack:empty()\nend", "    local stack = {}\n    for i = 1,\
    \ string.len(string) do\n        if string.sub(string, i, i) == '[' then\n   \
    \         table.insert(stack, 1, i)\n        elseif string.sub(string, i, i) ==\
    \ ']' then\n            table.remove(stack, 1)\n        end\n    end\n    return\
    \ next(stack) == nil\nend", "  local brackets = {\n    ['['] = true,\n    [']']\
    \ = true\n  }\n  local stack = {}\n  for index, char in ipairs(string) do\n  \
    \  if brackets[char] then\n      stack[#stack + 1] = char\n    end\n  end\n  if\
    \ #stack % 2 ~= 0 then\n    return false\n  end\n  local parentheses = 0\n  for\
    \ _, char in ipairs(stack) do\n    if char == '[' then\n      parentheses = parentheses\
    \ + 1\n    else\n      parentheses = parentheses - 1\n    end\n    if parentheses\
    \ < 0 then\n      return false\n    end\n  end\n  return true\nend", "\tlocal\
    \ seq = {}\n\tlocal seq_start = 0\n\tlocal function is_pair(a, b)\n\t\tif (a ==\
    \ \"[\" and b == \"]\") then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\n\tfor i = 1, string.len(string) do\n\t\tlocal char = string.sub(string,\
    \ i, i)\n\t\tif (is_pair(char, seq[seq_start])) then\n\t\t\tseq_start = seq_start\
    \ - 1\n\t\telse\n\t\t\tseq_start = seq_start + 1\n\t\t\tseq[seq_start] = char\n\
    \t\tend\n\tend\n\tif (seq_start == 0) then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nprint(is_nested(\"[[]]\"))\nprint(is_nested(\"[]]]]]]][[[[[]\"\
    ))\nprint(is_nested(\"[][]\"))\nprint(is_nested(\"[]\"))\nprint(is_nested(\"[[][]]\"\
    ))\nprint(is_nested(\"[[]][[\"))", "    --local brackets = {\"[\", \"]\"}\n  \
    \  local left = 0\n    local right = 0\n    local i = 1\n    while i <= #string\
    \ do\n        if string.sub(string, i, i) == \"[\" then\n            left = left\
    \ + 1\n        elseif string.sub(string, i, i) == \"]\" then\n            right\
    \ = right + 1\n        end\n        i = i + 1\n    end\n    if left == right then\n\
    \        return false\n    else\n        return true\n    end\nend", "  local\
    \ len = string.len(string)\n  local s = 0\n  for i = 1, len do\n    if (string.sub(string,\
    \ i, i) == '[') then\n      s = s + 1\n    else\n      s = s - 1\n    end\n  \
    \  if (s < 0) then\n      return false\n    end\n  end\n  return s == 0\nend",
  "    local count = 0\n    for i = 1, #string do\n        if string:sub(i, i) ==\
    \ '[' then\n            count = count + 1\n        elseif string:sub(i, i) ==\
    \ ']' then\n            count = count - 1\n        end\n        if count < 0 then\n\
    \            return false\n        end\n    end\n    return count > 0\nend", " \
    \ local l, r = 0, 0\n  for _, v in ipairs(string) do\n    if v == '[' then l =\
    \ l + 1\n    elseif v == ']' then r = r + 1 end\n    if r > l then return false\
    \ end\n  end\n  return l > 0 and l == r\nend", "    local count = 0\n    for i\
    \ = 1, #string do\n        local bracket = string:sub(i, i)\n        if bracket\
    \ == '[' then\n            count = count + 1\n        elseif bracket == ']' then\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend", "  --\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
