name: HumanEval_122_add_elements
language: lua
results:
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local function get_sum(arr,\
    \ k)\n    local sum = 0\n    for i=1,k do\n      if arr[i] <= 99 then\n      \
    \  sum = sum + arr[i]\n      end\n    end\n    return sum\n  end\n  return get_sum(arr,\
    \ k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v < 100 then\n            sum = sum + v\n\
    \            k = k - 1\n            if k == 0 then\n                break\n  \
    \          end\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yph45nn.lua:27:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmp9yph45nn.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local t = {}\n  for i\
    \ = 1, k do\n    if arr[i] < 100 then\n      table.insert(t, arr[i])\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbuzggal2.lua:22:\
    \ expected: -4, actual: {1, -2, -3}\nstack traceback:\n\t/tmp/tmpbuzggal2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local acc = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            acc = acc + arr[i]\n\
    \        end\n    end\n    return acc\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local result = 0\n \
    \   for i = 1, k do\n        if arr[i] < 100 then\n            result = result\
    \ + arr[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    if #arr < k then\n \
    \       return nil\n    end\n    local sum = 0\n    for i = 1, k do\n        if\
    \ #tostring(arr[i]) <= 2 then\n            sum = sum + arr[i]\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, #arr do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \            k = k - 1\n        end\n        if k == 0 then\n            break\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstrbq0x8.lua:27:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmpstrbq0x8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local num = arr[i]\n    if num < 100 then\n      sum = sum +\
    \ num\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v < 100 then\n            sum = sum + v\n\
    \            k = k - 1\n            if k == 0 then\n                break\n  \
    \          end\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bpse8mz.lua:27:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmp3bpse8mz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ j = 0\n  for i = 1, #arr do\n    if arr[i] < 100 then\n      j = j + 1\n   \
    \   sum = sum + arr[i]\n      if j == k then\n        break\n      end\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9svn3za0.lua:28:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmp9svn3za0.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local k = math.min(k,\
    \ #arr)\n  local sum = 0\n  for i = 1, k do\n    local value = arr[i]\n    if\
    \ value < 100 then\n      sum = sum + value\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    local\
    \ i = 1\n    while i <= k do\n        local x = arr[i]\n        if x < 10 then\n\
    \            sum = sum + x\n        elseif x < 100 then\n            sum = sum\
    \ + x % 10 + x / 10\n        else\n            sum = sum + 9 + 9\n        end\n\
    \        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0x7nir3i.lua:30:\
    \ expected: 0, actual: 36\nstack traceback:\n\t/tmp/tmp0x7nir3i.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local result = 0\n  local\
    \ i = 1\n  while i <= k do\n    if arr[i] < 100 then\n      result = result +\
    \ arr[i]\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- start i from 0\n  --\
    \ initialize the result\n  -- iterate upto k\n  -- if the element is less than\
    \ or equal to 99, add it to the result\n  -- else break the loop\n  -- return\
    \ the result\n  local i, result = 0, 0\n  while i < k do\n    local el = arr[i\
    \ + 1]\n    if el <= 99 then\n      result = result + el\n    else\n      break\n\
    \    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8xjq5ln.lua:35:\
    \ expected: 24, actual: 0\nstack traceback:\n\t/tmp/tmpa8xjq5ln.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local function sum(t)\n\
    \        local s = 0\n        for _, e in ipairs(t) do\n            s = s + e\n\
    \        end\n        return s\n    end\n    local a = {}\n    for i = 1, k do\n\
    \        local e = arr[i]\n        if e < 100 then\n            table.insert(a,\
    \ e)\n        end\n    end\n    return sum(a)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] <= 99 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i=1,\
    \ k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local num = arr[i]\n    if num < 100 then\n      sum = sum +\
    \ num\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local val = arr[i]\n    if val >= 0 and val < 100 then\n \
    \     if i > k then\n        break\n      end\n      sum = sum + val\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppy09oekt.lua:26:\
    \ expected: -4, actual: 1\nstack traceback:\n\t/tmp/tmppy09oekt.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local res = 0\n    for\
    \ i = 1, k do\n        local v = arr[i]\n        if v < 100 then\n           \
    \ res = res + v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- TODO:\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxstwle2_.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmpxstwle2_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, k do\n    local n = arr[i]\n    if n < 100 then\n      total = total\
    \ + n\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local n = 0\n    for\
    \ i = 1, k do\n        local x = arr[i]\n        if x > 9 and x < 100 then\n \
    \           n = n + x\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9muhe539.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp9muhe539.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local num = arr[i]\n    if num <= 9 then\n      sum = sum + num\n\
    \    elseif num <= 99 then\n      sum = sum + num % 10 + math.floor(num / 10)\n\
    \    else\n      sum = sum + num % 10 + math.floor(num / 10) % 10 + math.floor(num\
    \ / 100)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ccojpgc.lua:28:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmp5ccojpgc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num >= 100 then\n      \
    \      num = num % 100\n        end\n        sum = sum + num\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gbt0f26.lua:25:\
    \ expected: 0, actual: 32\nstack traceback:\n\t/tmp/tmp1gbt0f26.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    if #arr[i] <= 2 then\n      sum = sum + arr[i]\n      k =\
    \ k - 1\n    end\n    if k == 0 then\n      break\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctw8ee8h.lua:12:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpctw8ee8h.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpctw8ee8h.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal sum = 0\n\tlocal\
    \ digits\n\tfor i = 1, k do\n\t\tdigits = #(tostring(arr[i]))\n\t\tif digits <=\
    \ 2 then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ i = 1\n  while i <= k do\n    if arr[i] >= 10 and arr[i] < 100 then\n      sum\
    \ = sum + arr[i]\n    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h_iqm5w.lua:24:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp1h_iqm5w.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local count = 0\n  local\
    \ ret = 0\n  for i = 1, #arr do\n    if #tostring(arr[i]) <= 2 then\n      count\
    \ = count + 1\n      ret = ret + arr[i]\n    end\n    if count == k then\n   \
    \   break\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy8k7hsr.lua:28:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmpgy8k7hsr.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal r = 0\n\tfor i =\
    \ 1, k do\n\t\tlocal n = arr[i]\n\t\tif n < 100 then\n\t\t\tr = r + n\n\t\tend\n\
    \tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local num = arr[i]\n    local digit_count = 0\n    repeat\n \
    \     digit_count = digit_count + 1\n      num = num // 10\n    until num == 0\n\
    \    if digit_count <= 2 then\n      sum = sum + arr[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    -- TODO: Add code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66gi4699.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmp66gi4699.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i=1,k\
    \ do\n    local n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, #arr do\n        if k == 0 then\n            break\n        end\n   \
    \     local d1 = arr[i] % 10\n        local d2 = math.floor(arr[i] / 10) % 10\n\
    \        if d2 == 0 then\n            sum = sum + arr[i]\n        elseif d2 <\
    \ 10 then\n            sum = sum + d1 + d2 * 10\n        else\n            sum\
    \ = sum + 99\n        end\n        k = k - 1\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8xq6hpn.lua:32:\
    \ expected: -4, actual: 196\nstack traceback:\n\t/tmp/tmpb8xq6hpn.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local s = 0\n  for i =\
    \ 1, k do\n    if arr[i] < 100 then\n      s = s + arr[i]\n    end\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ i = 1\n  while i <= k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n\
    \    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local x = arr[i]\n    if x < 100 then\n      sum = sum + x\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if #tostring(arr[i]) <= 2 then\n            sum = sum +\
    \ arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local function add_two_digits(n)\n\
    \        return math.floor(n / 10) + (n % 10)\n    end\n    local function is_two_digits(n)\n\
    \        return add_two_digits(n) < 10\n    end\n    local sum = 0\n    for i\
    \ = 1, k do\n        local n = arr[i]\n        if n > 99 then\n            n =\
    \ 99\n        elseif is_two_digits(n) then\n            n = add_two_digits(n)\n\
    \        end\n        sum = sum + n\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9u66viwy.lua:32:\
    \ expected: -4, actual: 14\nstack traceback:\n\t/tmp/tmp9u66viwy.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local v = arr[i]\n    if v <= 99 then\n      sum = sum + v\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] <= 99 then\n      sum = sum + arr[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- the array is between\
    \ 1 and 100 elements, so we can assume that any\n  -- element of the array is\
    \ at most 3 digits\n  local result = 0\n  for i = 1, math.min(k, #arr) do\n  \
    \  if arr[i] < 100 then\n      result = result + arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local elements = {}\n\
    \    local sum = 0\n    for i = 1, k do\n        if arr[i] < 100 then\n      \
    \      elements[#elements + 1] = arr[i]\n        end\n    end\n    for i = 1,\
    \ #elements do\n        sum = sum + elements[i]\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local elem = arr[i]\n    if elem < 100 then\n      sum = sum\
    \ + elem\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local res = 0\n    for\
    \ i = 1, k do\n        if arr[i] <= 99 then\n            res = res + arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local result = 0\n  for\
    \ i = 1, k do\n    local value = arr[i]\n    if value < 100 then\n      result\
    \ = result + value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ count = 0\n  local i = 1\n  while count < k and i <= #arr do\n    local num\
    \ = arr[i]\n    if num >= 10 and num < 100 then\n      sum = sum + num\n     \
    \ count = count + 1\n    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2zj_ybw.lua:27:\
    \ expected: -4, actual: 174\nstack traceback:\n\t/tmp/tmpz2zj_ybw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, #arr do\n        if i > k then\n            break\n        end\n    \
    \    local val = arr[i]\n        if val < 100 then\n            sum = sum + val\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local result = 0\n \
    \   for i = 1, k do\n        if arr[i] < 100 then\n            result = result\
    \ + arr[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local v = arr[i]\n    if v < 100 then\n      sum = sum + v\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ len = #arr\n  for i = 1, len do\n    if arr[i] >= 10 and arr[i] < 100 then\n\
    \      sum = sum + arr[i]\n      k = k - 1\n    end\n    if k == 0 then\n    \
    \  break\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5k_vjek.lua:27:\
    \ expected: -4, actual: 174\nstack traceback:\n\t/tmp/tmpz5k_vjek.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = tostring(arr[i])\n        if #num < 3 then\n\
    \            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i=1,k\
    \ do\n    if arr[i] >= 10 and arr[i] < 100 then\n      sum = sum + arr[i]\n  \
    \  end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehdz8p_z.lua:22:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpehdz8p_z.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 100 then\n       \
    \     sum = sum + num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local arr_sum = 0\n\
    \    for i = 1, #arr do\n        if #tostring(arr[i]) <= 2 then\n            arr_sum\
    \ = arr_sum + arr[i]\n            k = k - 1\n            if k == 0 then\n    \
    \            break\n            end\n        end\n    end\n    return arr_sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_gwuo44.lua:27:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmpy_gwuo44.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local a = arr[i]\n        if a < 10 then\n            sum\
    \ = sum + a\n        elseif a < 100 then\n            sum = sum + a\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal sum = 0\n\tlocal\
    \ n = #arr\n\tfor i = 1, k do\n\t\tif arr[i] <= 99 then\n\t\t\tsum = sum + arr[i]\n\
    \t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, math.min(k, #arr) do\n    if arr[i] < 100 then\n      total = total +\
    \ arr[i]\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local elem = arr[i]\n        if elem < 100 then\n     \
    \       sum = sum + elem\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local elem = arr[i]\n    if elem < 100 then\n      sum = sum\
    \ + elem\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    return\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph196bipp.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmph196bipp.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local result = 0\n \
    \   for i = 1, k do\n        local num = arr[i]\n        if num >= 10 and num\
    \ < 100 then\n            result = result + num\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml51mj9l.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpml51mj9l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if k > 0 and (v < 10 or v < 100) then\n    \
    \        sum = sum + v\n            k = k - 1\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh9g3z5w.lua:24:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmphh9g3z5w.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local digits = {}\n\
    \    local result = 0\n    for i, v in ipairs(arr) do\n        table.insert(digits,\
    \ v)\n        if i == k then\n            break\n        end\n    end\n    for\
    \ _, v in ipairs(digits) do\n        if v < 100 then\n            result = result\
    \ + v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal sum = 0\n\tfor i\
    \ = 1, k do\n\t\tif arr[i] < 100 then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\
    \treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Note: we use \"rawget\"\
    \ to access the variable in the array\n  -- using a string index (instead of a\
    \ numerical index)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjtvacieh.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local res = 0\n    for\
    \ i = 1, k do\n        local x = arr[i]\n        if x < 100 then\n           \
    \ res = res + x\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, #arr do\n    local n = tonumber(arr[i])\n    if n and n <= 99 then\n\
    \      total = total + n\n      k = k - 1\n      if k == 0 then\n        break\n\
    \      end\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8099kfhf.lua:28:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmp8099kfhf.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local num = arr[i]\n    if num < 100 then\n      sum = sum +\
    \ num\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, math.min(k, #arr) do\n    local e = arr[i]\n    if e < 100 then\n     \
    \ sum = sum + e\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local s, i = 0, 1\n\
    \    while i <= k do\n        local e = arr[i]\n        if e < 100 then\n    \
    \        s = s + e\n        end\n        i = i + 1\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    if i <= k then\n      local tostring = tostring(arr[i])\n\
    \      if #tostring <= 2 then\n        sum = sum + arr[i]\n      end\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] >= 10 and arr[i] < 100 then\n            sum\
    \ = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl57fsatv.lua:22:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpl57fsatv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n >= 10 and n < 100 then\n\
    \            sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a3tzgke.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp6a3tzgke.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ b\n  for i = 1, #arr do\n    b = arr[i] // 10\n    if b == 0 then\n      sum\
    \ = sum + arr[i]\n    elseif b == 1 then\n      sum = sum + (arr[i] % 10)\n  \
    \  end\n    if i == k then break end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wp56768.lua:27:\
    \ expected: -4, actual: 1\nstack traceback:\n\t/tmp/tmp_wp56768.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local result = 0\n  for\
    \ i = 1, math.min(k, #arr) do\n    if arr[i] < 100 then\n      result = result\
    \ + arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal idx = 1\n\tlocal\
    \ acc = 0\n\twhile k > 0 do\n\t\tlocal n = arr[idx]\n\t\tif n >= 10 and n < 100\
    \ then\n\t\t\tacc = acc + n\n\t\t\tk = k - 1\n\t\tend\n\t\tidx = idx + 1\n\tend\n\
    \treturn acc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnt_h837m.lua:26:\
    \ expected: -4, actual: 174\nstack traceback:\n\t/tmp/tmpnt_h837m.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local num = arr[i]\n    local n = #tostring(num)\n    if n <=\
    \ 2 then\n      sum = sum + num\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobbzkvyn.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmpobbzkvyn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local res = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 100 then\n       \
    \     res = res + num\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    local\
    \ i = 1\n    while i <= k do\n        local x = arr[i]\n        if x < 10 then\n\
    \            sum = sum + x\n        elseif x < 100 then\n            sum = sum\
    \ + x\n        end\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local x = arr[i]\n    if x <= 9 then\n      sum = sum + x\n \
    \   elseif x <= 99 then\n      sum = sum + (x % 10) + (x / 10)\n    else\n   \
    \   sum = sum + (x % 10) + (x / 10 % 10) + (x / 100)\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_0jen0r.lua:28:\
    \ expected: 0, actual: 7.52\nstack traceback:\n\t/tmp/tmp0_0jen0r.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if (arr[i] > 9 and arr[i] < 100) then\n      sum = sum + arr[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuixdd89e.lua:22:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpuixdd89e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i=1,k\
    \ do\n    local el = arr[i]\n    if el < 100 then\n      sum = sum + el\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n < 100 then\n           \
    \ sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local res = 0\n    for\
    \ i = 1, k do\n        local e = arr[i]\n        if e <= 9 then\n            res\
    \ = res + e\n        elseif e <= 99 then\n            res = res + e\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local s = 0\n    for\
    \ i = 1, k do\n        local v = arr[i]\n        if v < 100 then\n           \
    \ s = s + v\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, k do\n    local n = arr[i]\n    if n <= 99 then\n      total = total\
    \ + n\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local element = arr[i]\n    if element < 100 then\n      sum\
    \ = sum + element\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local arr = arr or {}\n\
    \    local k = k or 0\n    local sum = 0\n    for i = 1, k do\n        local v\
    \ = arr[i]\n        if v >= 10 and v < 100 then\n            sum = sum + v\n \
    \       end\n    end\n    return sum\nend\nprint(\"add_elements({111,21,3,4000,5,6,7,8,9},\
    \ 4)\")\nprint(add_elements({111,21,3,4000,5,6,7,8,9}, 4))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "add_elements({111,21,3,4000,5,6,7,8,9}, 4)\n21\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmp6c88ica1.lua:27: expected: -4, actual: 0\nstack traceback:\n\
    \t/tmp/tmp6c88ica1.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  if #arr < 1 or #arr >\
    \ 100 or k < 1 or k > #arr then\n    return false\n  end\n  local sum = 0\n  for\
    \ i = 1, k do\n    if math.floor(arr[i] / 10) == 0 then\n      sum = sum + arr[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w3kgjxq.lua:25:\
    \ expected: -4, actual: 1\nstack traceback:\n\t/tmp/tmp2w3kgjxq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local j = arr[i]\n    if j >= 10 and j < 100 then\n      sum\
    \ = sum + j\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hzi96cf.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp3hzi96cf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if #tostring(arr[i]) > 2 then\n            break\n    \
    \    end\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwsp63b3.lua:26:\
    \ expected: 24, actual: 0\nstack traceback:\n\t/tmp/tmprwsp63b3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local function is_two_digit(num)\n\
    \    return num >= 10 and num < 100\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa7teks6p.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if (#tostring(arr[i]) <= 2) then\n      sum = sum + arr[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal sum = 0\n\tlocal\
    \ w = 0\n\tfor i=1, k do\n\t\tlocal v = arr[i]\n\t\tw = w + 1\n\t\tif w <= 2 then\n\
    \t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprghved40.lua:25:\
    \ expected: -4, actual: -1\nstack traceback:\n\t/tmp/tmprghved40.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrx_75sm.lua:15:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmprrx_75sm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if math.floor(num / 10) ==\
    \ 0 then\n            sum = sum + num\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm48zwhmv.lua:23:\
    \ expected: -4, actual: 1\nstack traceback:\n\t/tmp/tmpm48zwhmv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if math.floor(arr[i] / 10) == 0 then\n            sum =\
    \ sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7bg9om8.lua:22:\
    \ expected: -4, actual: 1\nstack traceback:\n\t/tmp/tmpj7bg9om8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] >= 10 and arr[i] < 100 then\n      sum = sum + arr[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9swluhyx.lua:22:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp9swluhyx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ i = 1\n  while i <= k do\n    local n = arr[i]\n    if #tostring(n) <= 2 then\n\
    \      sum = sum + n\n    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local function is_2_digit(n)\n\
    \    local d = n % 100\n    return d > 9 and d < 100\n  end\n  local sum = 0\n\
    \  for i = 1, k do\n    local v = arr[i]\n    if v < 10 or is_2_digit(v) then\n\
    \      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6n4ep18.lua:28:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpt6n4ep18.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if #tostring(v) <= 2 then\n            sum =\
    \ sum + v\n            k = k - 1\n            if k == 0 then\n               \
    \ break\n            end\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q7th22f.lua:27:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmp6q7th22f.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if #tostring(arr[i]) <= 2 then\n      sum = sum + arr[i]\n  \
    \  end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i=1,k do\n        local n = arr[i]\n        if n < 100 then\n            sum\
    \ = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local number = arr[i]\n        if number < 100 then\n \
    \           sum = sum + number\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local elem = arr[i]\n        if elem < 100 then\n     \
    \       sum = sum + elem\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ i = 1\n  while i <= k do\n    local n = arr[i]\n    if n >= 100 then\n     \
    \ n = 99\n    elseif n >= 10 then\n      n = 9\n    end\n    sum = sum + n\n \
    \   i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde1x37xd.lua:29:\
    \ expected: 0, actual: 198\nstack traceback:\n\t/tmp/tmpde1x37xd.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if #tostring(arr[i]) <= 2 then\n            sum = sum +\
    \ arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num < 10 then\n        \
    \    sum = sum + num\n        elseif num < 100 then\n            sum = sum + num\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal sum = 0\n\tfor i\
    \ = 1, k do\n\t\tlocal x = arr[i]\n\t\tlocal xs = tostring(x)\n\t\tif #xs < 3\
    \ then\n\t\t\tsum = sum + x\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n >= 10 and n < 100 then\n\
    \            sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhsllgpl.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpyhsllgpl.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local result = 0\n  for\
    \ i = 1, k do\n    local element = arr[i]\n    if element < 100 then\n      result\
    \ = result + element\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Time O(n) Space O(1)\n\
    \  local sum = 0\n  for i = 1, k do\n    local v = arr[i]\n    if v < 10 then\n\
    \      sum = sum + v\n    elseif v < 100 then\n      sum = sum + v\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ i = 1\n  while i <= k do\n    local n = arr[i]\n    if n < 10 then\n      sum\
    \ = sum + n\n    elseif n < 100 then\n      sum = sum + n\n    end\n    i = i\
    \ + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local s = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            s = s + arr[i]\n    \
    \    end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local elem = arr[i]\n    if elem < 100 then\n      sum = sum\
    \ + elem\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i=1,k do\n        if arr[i] >= 10 and arr[i] < 100 then\n            sum = sum\
    \ + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqkdmug6.lua:22:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpxqkdmug6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i=1,\
    \ k do\n    local v = arr[i]\n    if v < 100 then\n      sum = sum + v\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i=1,k\
    \ do\n    local n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ count = 0\n  local idx = 1\n  while count < k and idx <= #arr do\n    if arr[idx]\
    \ >= 10 and arr[idx] < 100 then\n      sum = sum + arr[idx]\n      count = count\
    \ + 1\n    end\n    idx = idx + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8at3v__.lua:26:\
    \ expected: -4, actual: 174\nstack traceback:\n\t/tmp/tmpb8at3v__.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    local\
    \ m = k\n    if #arr < k then\n        m = #arr\n    end\n    for i = 1, m do\n\
    \        if arr[i] < 100 then\n            sum = sum + arr[i]\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local e = arr[i]\n        if e < 10 then\n            sum\
    \ = sum + e\n        elseif e < 100 then\n            sum = sum + e\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ c = 0\n  for i = 1, #arr do\n    if c == k then\n      break\n    end\n    local\
    \ val = arr[i]\n    if val < 100 then\n      sum = sum + val\n      c = c + 1\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_01n4bhd.lua:29:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmp_01n4bhd.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  if not arr or #arr ==\
    \ 0 then\n    return nil\n  end\n  local sum = 0\n  for i=1,k do\n    if arr[i]\
    \ > 9 and arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3cdu8j8.lua:25:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpr3cdu8j8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, #arr do\n    if i > k then break end\n    local val = arr[i]\n    if\
    \ val < 100 then\n      total = total + val\n    end\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, #arr do\n        if i > k then\n            break\n        end\n    \
    \    if #arr[i] <= 2 then\n            sum = sum + arr[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg2yjs25s.lua:15:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpg2yjs25s.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpg2yjs25s.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local function get_sum(n)\n\
    \        local sum = 0\n        for i = 1, #n do\n            sum = sum + n[i]\n\
    \        end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7915r79z.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i=1,k do\n        local n = arr[i]\n        if n >= 100 then\n            sum\
    \ = sum + n\n        elseif n >= 10 then\n            sum = sum + n\n        else\n\
    \            sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7vc1vsw.lua:28:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpg7vc1vsw.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n <= 99 then\n           \
    \ sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local res = 0\n  for i\
    \ = 1, k do\n    local n = arr[i]\n    if n < 100 then\n      res = res + n\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v >= 100 then\n      break\n    end\n    sum = sum\
    \ + v\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptx5qpzqq.lua:30:\
    \ expected: 24, actual: 0\nstack traceback:\n\t/tmp/tmptx5qpzqq.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local a = arr[i]\n    if a <= 99 then\n      sum = sum + a\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local num = arr[i]\n    if num < 100 then\n      sum = sum +\
    \ num\n    end\n  end\n  return sum\nend\nprint(add_elements({111,21,3,4000,5,6,7,8,9},\
    \ 4))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "24\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local num = arr[i]\n        if num <= 99 then\n       \
    \     sum = sum + num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    -- [1, 100]\n    assert(#arr\
    \ >= 1 and #arr <= 100)\n    -- k = [1, len(arr)]\n    assert(k >= 1 and k <=\
    \ #arr)\n    local sum = 0\n    for i = 1, k do\n        local v = arr[i]\n  \
    \      if v <= 99 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nreturn add_elements\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfblz1uym.lua:24: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local r = 0\n  for i=1,k\
    \ do\n    local e = arr[i]\n    if e > 99 then\n      r = r + 99\n    else\n \
    \     r = r + e\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzjceu76.lua:26:\
    \ expected: 0, actual: 198\nstack traceback:\n\t/tmp/tmpnzjceu76.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            sum = sum + arr[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local function is_two_digit(i)\n\
    \    local str = tostring(i)\n    if #str <= 2 then\n      return true\n    end\n\
    \    return false\n  end\n  local s = 0\n  for i = 1, k do\n    if is_two_digit(arr[i])\
    \ then\n      s = s + arr[i]\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local result = 0\n \
    \   for i = 1, k do\n        local value = arr[i]\n        local number_of_digits\
    \ = 0\n        while value > 0 do\n            value = math.floor(value / 10)\n\
    \            number_of_digits = number_of_digits + 1\n        end\n        if\
    \ number_of_digits <= 2 then\n            result = result + arr[i]\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal sum = 0\n\tfor i=1,k\
    \ do\n\t\tif arr[i] <= 99 then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    local\
    \ i = 1\n    while i <= k do\n        local n = arr[i]\n        if n >= 100 then\n\
    \            break\n        end\n        sum = sum + n\n        i = i + 1\n  \
    \  end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp083w4nv5.lua:29:\
    \ expected: 24, actual: 0\nstack traceback:\n\t/tmp/tmp083w4nv5.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local x = arr[i]\n    if x < 100 then\n      sum = sum + x\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local c = 0\n    for\
    \ i = 1, #arr do\n        if arr[i] >= 10 and arr[i] < 100 then\n            c\
    \ = c + arr[i]\n        end\n        if i == k then\n            break\n     \
    \   end\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb218nznh.lua:25:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpb218nznh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local function is_2_digit(n)\n\
    \        return #tostring(n) == 2\n    end\n    local sum = 0\n    for i = 1,\
    \ k do\n        local n = arr[i]\n        if is_2_digit(n) then\n            sum\
    \ = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i837ysx.lua:26:\
    \ expected: -4, actual: -5\nstack traceback:\n\t/tmp/tmp3i837ysx.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local cur = arr[i]\n        if cur < 10 then\n        \
    \    sum = sum + cur\n        elseif cur < 100 then\n            sum = sum + cur\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local n, res = 0, 0\n\
    \    while n < k do\n        local x = arr[n + 1]\n        if x < 100 then\n \
    \           res = res + x\n        end\n        n = n + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if #tostring(arr[i]) <= 2 then\n      sum = sum + arr[i]\n  \
    \  end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local a = arr[i]\n    if a > 9 and a < 100 then\n      sum =\
    \ sum + a\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pyn1_w0.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp8pyn1_w0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local val = arr[i]\n        if val < 100 then\n       \
    \     sum = sum + val\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        local elem = arr[i]\n        if elem > 99 then\n      \
    \      sum = sum + elem\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu2zkifw.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpyu2zkifw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, k do\n    if arr[i] < 100 then\n      total = total + arr[i]\n    end\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Write your code here\n\
    \  local total = 0\n  for i = 1, k do\n    if arr[i] < 100 then\n      total =\
    \ total + arr[i]\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local s = 0\n  for i =\
    \ 1, k do\n    if arr[i] >= 10 and arr[i] < 100 then\n      s = s + arr[i]\n \
    \   end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4oolb1gh.lua:22:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp4oolb1gh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gxkcshn.lua:15:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmp5gxkcshn.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local elem = arr[i]\n    if elem < 100 then\n      sum = sum\
    \ + elem\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        if #(tostring(arr[i])) > 2 then\n            break\n  \
    \      end\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7eomhdiu.lua:26:\
    \ expected: 24, actual: 0\nstack traceback:\n\t/tmp/tmp7eomhdiu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local v = arr[i]\n    if v < 100 then\n      sum = sum + v\n\
    \    end\n    if i == k then\n      break\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local s = 0\n    for\
    \ i = 1, k do\n        local n = arr[i]\n        if n < 100 then\n           \
    \ s = s + n\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, math.min(k, #arr) do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local k = k or #arr\n\
    \    local sum = 0\n    for i = 1, k do\n        local n = arr[i]\n        if\
    \ n < 100 then\n            sum = sum + n\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    local\
    \ arr_k = arr[k]\n    if arr_k and arr_k >= 100 then\n        return sum\n   \
    \ end\n    for i=1, k do\n        local n = arr[i]\n        if n < 100 then\n\
    \            sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp0076u4.lua:30:\
    \ expected: 24, actual: 0\nstack traceback:\n\t/tmp/tmpgp0076u4.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local res = 0\n  for i\
    \ = 1, k do\n    local n = arr[i]\n    if n < 100 then\n      res = res + n\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- TODO: implement the\
    \ solution\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6acecoz.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmpt6acecoz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  if k == 0 then\n    return\
    \ 0\n  end\n  local sum = 0\n  for i = 1, k do\n    if arr[i] < 100 then\n   \
    \   sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] <= 99 then\n      sum = sum + arr[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ n = #arr\n  for i = 1, k do\n    if (arr[i] > 9 and arr[i] < 100) then\n   \
    \   sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwde1atti.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpwde1atti.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local result = 0\n  for\
    \ i = 1, #arr do\n    if i > k then\n      break\n    end\n    local a = arr[i]\n\
    \    if a > 9 and a < 100 then\n      result = result + a\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx6j_urx.lua:26:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpwx6j_urx.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- TODO: Implement the\
    \ solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ipx_68y.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmp8ipx_68y.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  local\
    \ i = 1\n  while i <= k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n\
    \    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local s = 0\n    for\
    \ i = 1, k do\n        if arr[i] < 100 then\n            s = s + arr[i]\n    \
    \    end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  if #arr < k then return\
    \ -1 end\n  local sum = 0\n  for i = 1, k do\n    local e = arr[i]\n    if e <\
    \ 10 then\n      sum = sum + e\n    elseif e < 100 then\n      sum = sum + e\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if math.abs(arr[i]) < 100 then\n      sum = sum + arr[i]\n  \
    \  end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal sum = 0\n\tfor i\
    \ = 1, k do\n\t\tif arr[i] < 100 then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\
    \treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i=1,k do\n        local n = arr[i]\n        if n > 9 and n < 100 then\n    \
    \        sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__z3lm4l.lua:23:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp__z3lm4l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, k do\n    local str = tostring(arr[i])\n    if #str < 3 then\n      total\
    \ = total + arr[i]\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, k do\n    if arr[i] < 100 then\n      total = total + arr[i]\n    end\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, k do\n    if (arr[i] < 100) then\n      total = total + arr[i]\n    end\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    local curr = arr[i]\n    if curr <= 99 then\n      sum = sum\
    \ + curr\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, #arr do\n        if #tostring(arr[i]) <= 2 then\n            sum = sum\
    \ + arr[i]\n            k = k - 1\n        end\n        if k == 0 then\n     \
    \       break\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe893lphp.lua:27:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmpe893lphp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    if arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for _,\
    \ v in ipairs(arr) do\n    if #(tostring(v)) <= 2 then\n      sum = sum + v\n\
    \      k = k - 1\n      if k == 0 then break end\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp187zingf.lua:25:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmp187zingf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local total = 0\n  for\
    \ i = 1, math.min(k, #arr) do\n    local number = arr[i]\n    if number <= 9 then\n\
    \      total = total + number\n    elseif number <= 99 then\n      total = total\
    \ + number % 10 + math.floor(number / 10)\n    else\n      total = total + 1 +\
    \ 2 + 3\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuxxd2jc.lua:28:\
    \ expected: 0, actual: 12\nstack traceback:\n\t/tmp/tmppuxxd2jc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local i = 1\n  local sum\
    \ = 0\n  while i <= k do\n    local num = arr[i]\n    if num >= 10 and num < 100\
    \ then\n      sum = sum + num\n    end\n    i = i + 1\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7o6mz3c.lua:25:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmpn7o6mz3c.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local count = 0\n  \
    \  local sum = 0\n    for i, v in ipairs(arr) do\n        if i <= k then\n   \
    \         if v >= 100 then\n                count = count + 1\n            else\n\
    \                sum = sum + v\n            end\n        end\n    end\n    return\
    \ count + sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhzvv2rc.lua:28:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpqhzvv2rc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, math.min(k, #arr) do\n        local n = tonumber(arr[i])\n        if\
    \ n and n >= 10 and n < 100 then\n            sum = sum + n\n        end\n   \
    \ end\n    return sum\nend\nprint(add_elements({111,21,3,4000,5,6,7,8,9}, 4))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "21\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4k8elm9l.lua:24:\
    \ expected: -4, actual: 0\nstack traceback:\n\t/tmp/tmp4k8elm9l.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n\tlocal result = 0\n\tfor\
    \ i=1,k do\n\t\tlocal value = arr[i]\n\t\tif value < 100 then\n\t\t\tresult =\
    \ result + value\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
