name: HumanEval_105_by_length
language: lua
prompt: "-- Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- arr = [2, 1, 1, 4, 5,\
  \ 8, 2, 3]   \n-- -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n-- -> reverse arr ->\
  \ [8, 5, 4, 3, 2, 2, 1, 1]\n-- return [\"Eight\", \"Five\", \"Four\", \"Three\"\
  , \"Two\", \"Two\", \"One\", \"One\"]\n-- If the array is empty, return an empty\
  \ array:\n-- arr = []\n-- return []\n-- If the array has any strange number ignore\
  \ it:\n-- arr = [1, -1 , 55] \n-- -> sort arr -> [-1, 1, 55]\n-- -> reverse arr\
  \ -> [55, 1, -1]\n-- return = ['One']\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if #arr == 0 then\n        return {}\n    end\n    local len =\
    \ 0\n    for i = 1, #arr do\n        if len < string.len(arr[i]) then\n      \
    \      len = string.len(arr[i])\n        end\n    end\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if string.len(arr[i]) == len then\n           \
    \ table.insert(res, arr[i])\n        end\n    end\n    return res\nend", "\t--\
    \ your code here\n\tfor i=1,#arr do\n\t\tlocal key = arr[i]\n\t\tlocal j = i-1\n\
    \t\twhile j >= 0 and string.len(arr[j]) > string.len(key) do\n\t\t\tarr[j+1] =\
    \ arr[j]\n\t\t\tj = j-1\n\t\tend\n\t\tarr[j+1] = key\n\tend\n\treturn arr\nend",
  "    table.sort(arr, function(a, b) return #a < #b end)\n    return arr\nend", "\t\
    -- TODO: Implement\nend", "    local t = {}\n    for k, v in pairs(arr) do\n \
    \       local length = string.len(v)\n        t[length] = t[length] or {}\n  \
    \      table.insert(t[length], v)\n    end\n    return t\nend", "  \n  local str\
    \ = {}\n  local r = {}\n  local n = {}\n  local num = 0\n  local strfinal = \"\
    \"\n  local t = 0\n  local a = 1\n  local b = 1\n  local ind = 0\n  local s =\
    \ \"\"\n  local count = 0\n  local strnum = \"\"\n  local res = {}\n  local i\
    \ = 1\n  local j = 1\n  local k = 1\n  local l = 1\n  local m = 1\n  local temp\
    \ = 0\n  local d = 1\n  local e = 1\n  local f = 1\n  local g = 1\n  local h =\
    \ 1\n  local q = 1\n  local w = 1\n  local y = 1\n  local z = 1\n  local x = 1\n\
    \  local u = 1\n  local v = 1\n  local str1 = \"\"\n  local str2 = \"\"\n  local\
    \ str3 = \"\"\n  local str4 = \"\"\n  local str5 = \"\"\n  local str6 = \"\"\n\
    \  local str7 = \"\"\n  local str8 = \"\"\n  local str9 = \"\"\n  local str10\
    \ = \"\"\n  local str11 = \"\"\n  local str12 = \"\"\n  local str13 = \"\"\n \
    \ local str14 = \"\"\n  local str15 = \"\"\n  local str16 = \"\"\n  local str17\
    \ = \"\"\n  local str18 = \"\"\n  local str19 = \"\"\n  local str20 = \"\"\n \
    \ local str21 = \"\"\n  local str22 = \"\"\n  local str23 = \"\"\n  local str24\
    \ = \"\"\n  local str25 = \"\"\n  local str26 = \"\"\n  local str27 = \"\"\n \
    \ local str28 = \"\"\n  local str29 = \"\"\n  local str30 = \"\"\n  local str31\
    \ = \"\"\n  local str32 = \"\"\n  local str33 = \"\"\n  local str34 = \"\"\n \
    \ local str35 = \"\"\n  local str36 = \"\"\n  local str37 = \"\"\n  local str38\
    \ = \"\"\n  local str39 = \"\"\n  local str40 = \"\"\n  local str41 = \"\"\n \
    \ local str42 = \"\"\n  local str43 = \"\"\n  local str44 = \"\"\n  local str45\
    \ = \"\"\n  local str46 = \"\"", "\ttable.sort(arr, function(a, b) return string.len(a)\
    \ < string.len(b) end)\n\treturn arr\nend", "  if not (type(arr) == 'table') then\
    \ return {} end\n  local temp_arr = {}\n  for k, v in pairs(arr) do\n    if (v\
    \ >= 1 and v <= 9) then table.insert(temp_arr, v) end\n  end\n  table.sort(temp_arr)\n\
    \  table.reverse(temp_arr)\n  local result = {}\n  for k, v in pairs(temp_arr)\
    \ do\n    if v == 1 then table.insert(result, 'One') end\n    if v == 2 then table.insert(result,\
    \ 'Two') end\n    if v == 3 then table.insert(result, 'Three') end\n    if v ==\
    \ 4 then table.insert(result, 'Four') end\n    if v == 5 then table.insert(result,\
    \ 'Five') end\n    if v == 6 then table.insert(result, 'Six') end\n    if v ==\
    \ 7 then table.insert(result, 'Seven') end\n    if v == 8 then table.insert(result,\
    \ 'Eight') end\n    if v == 9 then table.insert(result, 'Nine') end\n  end\n \
    \ return result\nend", "    local unique_numbers = {}\n    local res = {}\n  \
    \  for i, v in ipairs(arr) do\n        if unique_numbers[v] == nil then\n    \
    \        unique_numbers[v] = v\n            table.insert(res, v)\n        end\n\
    \    end\n    local string_res = {}\n    for i, v in ipairs(res) do\n        if\
    \ v == 1 then\n            table.insert(string_res, \"One\")\n        elseif v\
    \ == 2 then\n            table.insert(string_res, \"Two\")\n        elseif v ==\
    \ 3 then\n            table.insert(string_res, \"Three\")\n        elseif v ==\
    \ 4 then\n            table.insert(string_res, \"Four\")\n        elseif v ==\
    \ 5 then\n            table.insert(string_res, \"Five\")\n        elseif v ==\
    \ 6 then\n            table.insert(string_res, \"Six\")\n        elseif v == 7\
    \ then\n            table.insert(string_res, \"Seven\")\n        elseif v == 8\
    \ then\n            table.insert(string_res, \"Eight\")\n        elseif v == 9\
    \ then\n            table.insert(string_res, \"Nine\")\n        end\n    end\n\
    \    return string_res\nend", "\tlocal sort_arr = {}\n\tlocal new_arr = {}\n\t\
    local sort_arr = {}\n\tlocal temp_arr = {}\n\t\n\tfor key,val in pairs(arr) do\n\
    \t\tif val >= 1 and val <= 9 then\n\t\t\ttable.insert(temp_arr, val)\n\t\tend\n\
    \tend\n\ttable.sort(temp_arr)\n\tfor i=#temp_arr,1,-1 do\n\t\ttable.insert(sort_arr,\
    \ temp_arr[i])\n\tend\n\tfor key,val in pairs(sort_arr) do\n\t\tif val == 1 then\n\
    \t\t\ttable.insert(new_arr, \"One\")\n\t\telseif val == 2 then\n\t\t\ttable.insert(new_arr,\
    \ \"Two\")\n\t\telseif val == 3 then\n\t\t\ttable.insert(new_arr, \"Three\")\n\
    \t\telseif val == 4 then\n\t\t\ttable.insert(new_arr, \"Four\")\n\t\telseif val\
    \ == 5 then\n\t\t\ttable.insert(new_arr, \"Five\")\n\t\telseif val == 6 then\n\
    \t\t\ttable.insert(new_arr, \"Six\")\n\t\telseif val == 7 then\n\t\t\ttable.insert(new_arr,\
    \ \"Seven\")\n\t\telseif val == 8 then\n\t\t\ttable.insert(new_arr, \"Eight\"\
    )\n\t\telseif val == 9 then\n\t\t\ttable.insert(new_arr, \"Nine\")\n\t\tend\n\t\
    end\n\treturn new_arr\nend", "    return table.sort(arr, function(a, b) return\
    \ #a < #b end)\nend", "    -- your code here\nend", "\tif #arr < 1 then return\
    \ {} end\n\tlocal res = {}\n\tlocal map = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\tfor i = 1, #arr do\n\t\
    \tif arr[i] < 10 and arr[i] > 0 then\n\t\t\ttable.insert(res, arr[i])\n\t\tend\n\
    \tend\n\ttable.sort(res)\n\tfor i = 1, #res do\n\t\tres[i] = map[res[i]]\n\tend\n\
    \treturn res\nend", "\tlocal temp = {}\n\tfor k, v in pairs(arr) do\n\t\tlocal\
    \ len = 0\n\t\tfor i in pairs(v) do len = len + 1 end\n\t\ttemp[k] = len\n\tend\n\
    \treturn temp\nend", "\ttable.sort(arr, function(a, b)\n\t\treturn #a < #b\n\t\
    end)\nend", "  local index = {}\n  for i, v in ipairs(arr) do\n    index[v] =\
    \ index[v] or {}\n    table.insert(index[v], i)\n  end\n  local keys = {}\n  for\
    \ k in pairs(index) do\n    table.insert(keys, k)\n  end\n  table.sort(keys)\n\
    \  local result = {}\n  for _, k in ipairs(keys) do\n    for _, v in ipairs(index[k])\
    \ do\n      table.insert(result, arr[v])\n    end\n  end\n  return result\nend",
  "  table.sort(arr, function(a, b) return #a < #b end)\n  return arr\nend", "   \
    \ local function sort(a, b)\n        return #a < #b\n    end\n    table.sort(arr,\
    \ sort)\n    return arr\nend", "    local function swap(arr, i, j)\n        local\
    \ tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n    end\n    for\
    \ i = 1, #arr do\n        for j = i, #arr do\n            if arr[i] > arr[j] then\n\
    \                swap(arr, i, j)\n            end\n        end\n    end\n    local\
    \ reverse_arr = {}\n    for i = #arr, 1, -1 do\n        table.insert(reverse_arr,\
    \ arr[i])\n    end\n    local numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    local res = {}\n   \
    \ for _, v in ipairs(reverse_arr) do\n        if v > 0 and v < 10 then\n     \
    \       table.insert(res, numbers[v])\n        end\n    end\n    return res\n\
    end", "  local len = #arr\n  local count = 1\n  while count <= len do\n    local\
    \ number = tonumber(arr[count])\n    if (number == nil) or (number < 1) or (number\
    \ > 9) then\n      arr[count] = nil\n      table.remove(arr, count)\n      len\
    \ = len - 1\n    else\n      count = count + 1\n    end\n  end\n  table.sort(arr)\n\
    \  local res = {}\n  for i, v in ipairs(arr) do\n    res[i] = arr[len + 1 - i]\n\
    \  end\n  local words = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}\n  for i, v in ipairs(res) do\n    res[i] =\
    \ words[tonumber(v)]\n  end\n  return res\nend", "\tfor i = 1, #arr do\n\t\tfor\
    \ j = i + 1, #arr do\n\t\t\tif arr[i]:len() > arr[j]:len() then\n\t\t\t\tarr[i],\
    \ arr[j] = arr[j], arr[i]\n\t\t\tend\n\t\tend\n\tend\n\treturn arr\nend", "  \
    \  local output = {}\n    for _, v in ipairs(arr) do\n        output[#output +\
    \ 1] = tostring(v)\n    end\n    table.sort(output, function(a, b) return #a <\
    \ #b end)\n    return output\nend", "\ttable.sort(arr, function(a, b) return string.len(a)\
    \ < string.len(b) end)\n\treturn arr\nend", "  table.sort(arr, function(a, b)\
    \ return #a < #b end)\n  return arr\nend", "    local sorted = {}\n    for i =\
    \ 0, 9 do\n        local temp = {}\n        for j = 1, #arr do\n            if\
    \ arr[j] == i then\n                table.insert(temp, arr[j])\n            end\n\
    \        end\n        if #temp > 0 then\n            table.insert(sorted, temp)\n\
    \        end\n    end\n    return sorted\nend", "    table.sort(arr, function(a,\
    \ b)\n        return string.len(a) < string.len(b)\n    end)\n    return arr\n\
    end", "    local lut = {\n        ['One'] = 1,\n        ['Two'] = 2,\n       \
    \ ['Three'] = 3,\n        ['Four'] = 4,\n        ['Five'] = 5,\n        ['Six']\
    \ = 6,\n        ['Seven'] = 7,\n        ['Eight'] = 8,\n        ['Nine'] = 9\n\
    \    }\n    local reversed = {}\n    for i, v in ipairs(arr) do\n        if lut[v]\
    \ then\n            reversed[i] = lut[v]\n        end\n    end\n    reversed =\
    \ quick_sort(reversed)\n    reversed = table.reverse(reversed)\n    local res\
    \ = {}\n    for i, v in ipairs(reversed) do\n        for k, l in pairs(lut) do\n\
    \            if v == l then\n                res[i] = k\n            end\n   \
    \     end\n    end\n    return res\nend", "  local words = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  local arr1 = {}\n  local\
    \ newArr = {}\n  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n  \
    \    table.insert(arr1, v)\n    end\n  end\n  table.sort(arr1)\n  for i, v in\
    \ ipairs(arr1) do\n    for i1, v1 in ipairs(words) do\n      if i1 == v then\n\
    \        table.insert(newArr, v1)\n      end\n    end\n  end\n  return newArr\n\
    end", "\treturn #arr\nend", "  local max_length = 0\n  for i = 1, #arr do\n  \
    \  if string.len(arr[i]) > max_length then\n      max_length = string.len(arr[i])\n\
    \    end\n  end\n  return max_length\nend", "  local count = #arr\n  local m =\
    \ {}\n  local sorted = {}\n  for i=1,count do\n    local index = arr[i]\n    local\
    \ value = #index\n    if not m[value] then\n      m[value] = {}\n    end\n   \
    \ table.insert(m[value], index)\n  end\n  for k,v in pairs(m) do\n    for i=1,#v\
    \ do\n      table.insert(sorted, v[i])\n    end\n  end\n  return sorted\nend",
  "  return arr[2]\nend", "  local function by_length_iter(a, i)\n    if i > #a then\
    \ return nil end\n    return i, a[i]\n  end\n  return by_length_iter, arr, 0\n\
    end", "  -- your code here\nend", "    local nums = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    local new_arr = {}\n    local\
    \ result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n\
    \    for i = #new_arr, 1, -1 do\n        table.insert(result, nums[new_arr[i]])\n\
    \    end\n    return result\nend", "    local tab = {}\n    for k,v in pairs(arr)\
    \ do\n        if (type(v) == \"string\") then\n            if not tab[#v] then\n\
    \                tab[#v] = {}\n            end\n            table.insert(tab[#v],\
    \ v)\n        end\n    end\n    local ret = {}\n    for k,v in pairs(tab) do\n\
    \        table.sort(v)\n        for _,val in pairs(v) do\n            table.insert(ret,\
    \ val)\n        end\n    end\n    return ret\nend", "  table.sort(arr, function(a,\
    \ b) return #a < #b end)\n  return arr\nend", "    return arr\nend", "\tlocal\
    \ length_cache = {}\n\tfor idx, val in ipairs(arr) do\n\t\tlength_cache[idx] =\
    \ val:len()\n\tend\n\ttable.sort(length_cache)\n\tfor idx, val in ipairs(length_cache)\
    \ do\n\t\tlength_cache[idx] = arr[val]\n\tend\n\treturn length_cache\nend", "\t\
    table.sort(arr, function(a, b) return a.length < b.length end)\nend", "    return\
    \ table.sort(arr, function(a, b)\n        return #a < #b\n    end)\nend", "  if\
    \ #arr == 0 then return {} end\n  local ret = {}\n  for i = 1, #arr do\n    if\
    \ arr[i] < 1 or arr[i] > 9 then goto continue end\n    ret[#ret + 1] = arr[i]\n\
    \    ::continue::\n  end\n  table.sort(ret)\n  table.reverse(ret)\n  for i = 1,\
    \ #ret do\n    if ret[i] == 1 then ret[i] = \"One\"\n    elseif ret[i] == 2 then\
    \ ret[i] = \"Two\"\n    elseif ret[i] == 3 then ret[i] = \"Three\"\n    elseif\
    \ ret[i] == 4 then ret[i] = \"Four\"\n    elseif ret[i] == 5 then ret[i] = \"\
    Five\"\n    elseif ret[i] == 6 then ret[i] = \"Six\"\n    elseif ret[i] == 7 then\
    \ ret[i] = \"Seven\"\n    elseif ret[i] == 8 then ret[i] = \"Eight\"\n    elseif\
    \ ret[i] == 9 then ret[i] = \"Nine\"\n    end\n  end\n  return ret\nend", "  if\
    \ not arr or not next(arr) then return {} end\n  local n = {}\n  for _, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      table.insert(n, v)\n    end\n  end\n\
    \  table.sort(n)\n  local r = {}\n  for i = #n, 1, -1 do\n    r[#r + 1] = n[i]\n\
    \  end\n  local m = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n  local res = {}\n  for _, v in ipairs(r) do\n    res[#res + 1] = m[v]\n\
    \  end\n  return res\nend", "    local count_array = {}\n    local num_count =\
    \ 0\n    for i,v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n      \
    \      num_count = num_count + 1\n            count_array[num_count] = v\n   \
    \     end\n    end\n    table.sort(count_array)\n    table.reverse(count_array)\n\
    \    local sort_reverse_array = {}\n    for i,v in ipairs(count_array) do\n  \
    \      if v == 1 then\n            sort_reverse_array[i] = \"One\"\n        elseif\
    \ v == 2 then\n            sort_reverse_array[i] = \"Two\"\n        elseif v ==\
    \ 3 then\n            sort_reverse_array[i] = \"Three\"\n        elseif v == 4\
    \ then\n            sort_reverse_array[i] = \"Four\"\n        elseif v == 5 then\n\
    \            sort_reverse_array[i] = \"Five\"\n        elseif v == 6 then\n  \
    \          sort_reverse_array[i] = \"Six\"\n        elseif v == 7 then\n     \
    \       sort_reverse_array[i] = \"Seven\"\n        elseif v == 8 then\n      \
    \      sort_reverse_array[i] = \"Eight\"\n        elseif v == 9 then\n       \
    \     sort_reverse_array[i] = \"Nine\"\n        end\n    end\n    return sort_reverse_array\n\
    end\n \nprint(table.concat(by_length({2, 1, 1, 4, 5, 8, 2, 3}), \", \")) -- =>\
    \ \"Eight, Five, Four, Three, Two, Two, One, One\"\nprint(table.concat(by_length({2,\
    \ 1, 1, -4, 5, 8, 2, 3}), \", \")) -- => \"One\"\nprint(table.concat(by_length({}),\
    \ \", \")) -- => \"\"\nprint(table.concat(by_length({1, 5, 2, 3, 7, 3, 5, 9, 9,\
    \ 5, 2, 7, 6, 1, 8, 4, 6, 1, 8, 10, 9, 10, 4, 8, 10, 2, 3, 6, 9, 4, 2,", "  local\
    \ result = {}\n  for i = 1, #arr do\n    local n = arr[i]\n    local name = tostring(n)\n\
    \    result[i] = name\n  end\n  return result\nend", "  local buffer = {}\n  local\
    \ output = {}\n  local words = {\n    'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'\n  }\n  for k, v in pairs(arr) do\n    if v > 0 and\
    \ v < 10 then\n      table.insert(buffer, v)\n    end\n  end\n  table.sort(buffer)\n\
    \  for k, v in pairs(buffer) do\n    table.insert(output, words[v])\n  end\n \
    \ return output\nend", "\tlocal function by_length(a, b)\n\t\tif a.length == b.length\
    \ then return a.number < b.number end\n\t\treturn a.length < b.length\n\tend\n\
    \ttable.sort(arr, by_length)\n\treturn arr\nend", "    local temp = {}\n    local\
    \ result = {}\n    local count = 1\n    local k = 1\n    local j = 1\n    local\
    \ t = 1\n    local p = 1\n    local e = 1\n    local f = 1\n    local a = 1\n\
    \    local i = 1\n    local n = 1\n    local g = 1\n    local h = 1\n    local\
    \ length = #arr\n    for i = 1, length do\n        if arr[i] == 1 then\n     \
    \       temp[k] = arr[i]\n            k = k + 1\n        elseif arr[i] == 2 then\n\
    \            temp[k] = arr[i]\n            k = k + 1\n        elseif arr[i] ==\
    \ 3 then\n            temp[k] = arr[i]\n            k = k + 1\n        elseif\
    \ arr[i] == 4 then\n            temp[k] = arr[i]\n            k = k + 1\n    \
    \    elseif arr[i] == 5 then\n            temp[k] = arr[i]\n            k = k\
    \ + 1\n        elseif arr[i] == 6 then\n            temp[k] = arr[i]\n       \
    \     k = k + 1\n        elseif arr[i] == 7 then\n            temp[k] = arr[i]\n\
    \            k = k + 1\n        elseif arr[i] == 8 then\n            temp[k] =\
    \ arr[i]\n            k = k + 1\n        elseif arr[i] == 9 then\n           \
    \ temp[k] = arr[i]\n            k = k + 1\n        end\n    end\n    for j = 1,\
    \ #temp do\n        for t = j + 1, #temp do\n            if temp[j] > temp[t]\
    \ then\n                count = temp[j]\n                temp[j] = temp[t]\n \
    \               temp[t] = count\n            end\n        end\n    end\n    for\
    \ p = #temp, 1, -1 do\n        result[e] = temp[p]\n        e = e + 1\n    end\n\
    \    local length_result = #result\n    for f = 1, length_result do\n        if\
    \ result[f] == 1 then\n            result[f] = \"One\"\n", "\tif #arr == 0 then\
    \ return {} end\n\tlocal result = {}\n\ttable.sort(arr)\n\tfor i = #arr, 1, -1\
    \ do\n\t\tif arr[i] >= 1 and arr[i] <= 9 then\n\t\t\ttable.insert(result, arr[i])\n\
    \t\tend\n\tend\n\tlocal names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\tfor i = 1, #result do\n\t\tresult[i]\
    \ = names[result[i]]\n\tend\n\treturn result\nend", "  if #arr == 0 then\n   \
    \ return {}\n  end\n  table.sort(arr)\n  reverse(arr)\n  local output = {}\n \
    \ for _, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(output,\
    \ num_to_str[v])\n    end\n  end\n  return output\nend", "  table.sort(arr, function(a,\
    \ b) return #a < #b end)\n  return arr\nend", "  table.sort(arr, function(a, b)\
    \ return string.len(a) < string.len(b) end)\n  return arr\nend", "\tfor i=1,#arr\
    \ do\n\t\tfor j=1,#arr-1 do\n\t\t\tif #arr[j] > #arr[j+1] then\n\t\t\t\tarr[j],arr[j+1]\
    \ = arr[j+1],arr[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn arr\nend", "  return\
    \ arr[1] < arr[2]\nend", "  local n = #arr\n  local arr1 = {}\n  local arr2 =\
    \ {}\n  local swap\n  repeat\n    swap = false\n    for i = 1, n-1 do\n      if\
    \ #arr[i] > #arr[i+1] then\n        arr1[i] = arr[i]\n        arr1[i+1] = arr[i+1]\n\
    \        arr2[i] = arr[i+1]\n        arr2[i+1] = arr[i]\n        swap = true\n\
    \      end\n    end\n    arr = arr2\n  until not swap\n  return arr\nend", " \
    \ local function sort_by_length(word1, word2)\n    return #word1 < #word2\n  end\n\
    \  table.sort(arr, sort_by_length)\n  return arr\nend", "    table.sort(arr, function(a,\
    \ b) return #a < #b end)\n    return arr\nend", "  local f = function(x, y)\n\
    \    if x == y then\n      return x\n    end\n    if math.abs(x) > math.abs(y)\
    \ then\n      return y\n    else\n      return x\n    end\n  end\n  return f\n\
    end", "  return #arr\nend", "  local ret = {}\n  for _,s in ipairs(arr) do\n \
    \   ret[#ret+1] = s\n  end\n  table.sort(ret, function(a,b) return #a < #b end)\n\
    \  return ret\nend", "  local t = {}\n  for i = 1, #arr do\n    local str = arr[i]\n\
    \    if (t[#str] == nil) then\n      t[#str] = {}\n    end\n    table.insert(t[#str],\
    \ str)\n  end\n  local res = {}\n  for i = 1, #t do\n    for j = 1, #t[i] do\n\
    \      table.insert(res, t[i][j])\n    end\n  end\n  return res\nend", "\tif not\
    \ arr then return nil end\n\tlocal res = {}\n\tfor _, s in ipairs(arr) do\n\t\t\
    res[#res + 1] = {s, #s}\n\tend\n\ttable.sort(res, function(a, b) return a[2] <\
    \ b[2] end)\n\tfor i, n in ipairs(res) do\n\t\tres[i] = n[1]\n\tend\n\treturn\
    \ res\nend", "  if #arr == 0 then return arr end\n  local result = {}\n  local\
    \ tmp = {}\n  local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n\
    \      table.insert(tmp, arr[i])\n    end\n  end\n  table.sort(tmp)\n  for i =\
    \ #tmp, 1, -1 do\n    table.insert(result, numbers[tmp[i]])\n  end\n  return result\n\
    end", "  local n, res = #arr, {}\n  for i = 1, n do\n    res[i] = string.format(\"\
    %s%d\", arr[i], string.len(arr[i]))\n  end\n  return res\nend", "    table.sort(arr,\
    \ function(s1, s2) return #s1 < #s2 end)\n    return arr\nend", "  local res =\
    \ {}\n  for _, v in ipairs(arr) do \n    if not res[#v] then\n      res[#v] =\
    \ {}\n    end\n    table.insert(res[#v], v)\n  end\n  return res\nend", "    local\
    \ t = {}\n    for i, v in ipairs(arr) do\n        t[#t + 1] = {i, v}\n    end\n\
    \    table.sort(t, function(a, b) return a[2] < b[2] end)\n    local res = {}\n\
    \    for i, v in ipairs(t) do\n        res[i] = v[1]\n    end\n    return res\n\
    end", "    for i=1,#arr do\n        for j=1,#arr-1 do\n            if string.len(arr[j])\
    \ > string.len(arr[j+1]) then\n                local temp = arr[j]\n         \
    \       arr[j] = arr[j+1]\n                arr[j+1] = temp\n            end\n\
    \        end\n    end\n    return arr\nend", "  if arr == nil then\n    return\
    \ {}\n  end\n  local len = #arr\n  local t = {}\n  local result = {}\n  local\
    \ temp = {}\n  local c = 1\n  local key = 0\n  local arr_len = 0\n  for i = 1,len\
    \ do\n    if(type(arr[i]) == \"number\") then\n      if (arr[i] >= 1 and arr[i]\
    \ <= 9) then\n        t[c] = arr[i]\n        c = c + 1\n      end\n    end\n \
    \ end\n  table.sort(t)\n  table.reverse(t)\n  len = #t\n  for i = 1,len do\n \
    \   temp[i] = tostring(t[i])\n  end\n  len = #temp\n  for i = 1,len do\n    if(temp[i]\
    \ == \"1\") then\n      result[i] = \"One\"\n    elseif(temp[i] == \"2\") then\n\
    \      result[i] = \"Two\"\n    elseif(temp[i] == \"3\") then\n      result[i]\
    \ = \"Three\"\n    elseif(temp[i] == \"4\") then\n      result[i] = \"Four\"\n\
    \    elseif(temp[i] == \"5\") then\n      result[i] = \"Five\"\n    elseif(temp[i]\
    \ == \"6\") then\n      result[i] = \"Six\"\n    elseif(temp[i] == \"7\") then\n\
    \      result[i] = \"Seven\"\n    elseif(temp[i] == \"8\") then\n      result[i]\
    \ = \"Eight\"\n    elseif(temp[i] == \"9\") then\n      result[i] = \"Nine\"\n\
    \    end\n  end\n  return result\nend", "\tlocal index = 1\n\twhile index <= #arr\
    \ do\n\t\tlocal current = arr[index]\n\t\tlocal j = index + 1\n\t\twhile j <=\
    \ #arr do\n\t\t\tif #arr[j] < #current then\n\t\t\t\tcurrent, arr[j] = arr[j],\
    \ current\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tarr[index] = current\n\t\t\
    index = index + 1\n\tend\n\treturn arr\nend", "    local t = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] < 10 and arr[i] > 0 then\n            t[#t + 1] =\
    \ arr[i]\n        end\n    end\n    table.sort(t)\n    for i = 1, #t do\n    \
    \    if t[i] == 1 then\n            t[i] = \"One\"\n        elseif t[i] == 2 then\n\
    \            t[i] = \"Two\"\n        elseif t[i] == 3 then\n            t[i] =\
    \ \"Three\"\n        elseif t[i] == 4 then\n            t[i] = \"Four\"\n    \
    \    elseif t[i] == 5 then\n            t[i] = \"Five\"\n        elseif t[i] ==\
    \ 6 then\n            t[i] = \"Six\"\n        elseif t[i] == 7 then\n        \
    \    t[i] = \"Seven\"\n        elseif t[i] == 8 then\n            t[i] = \"Eight\"\
    \n        elseif t[i] == 9 then\n            t[i] = \"Nine\"\n        end\n  \
    \  end\n    return t\nend", "\tlocal len=0\n\tfor i=1,#arr do\n\t\tif arr[i]:len()>len\
    \ then\n\t\t\tlen=arr[i]:len()\n\t\tend\n\tend\n\treturn len\nend", "    local\
    \ r = {}\n    for k,v in pairs(arr) do\n        if r[v] == nil then\n        \
    \    r[v] = {k}\n        else\n            table.insert(r[v], k)\n        end\n\
    \    end\n    return r\nend", "  -- your code here\nend", "    local index = 1\n\
    \    local function sort_func(a, b)\n        if index < #arr then\n          \
    \  if a:len() < b:len() then\n                index = index + 1\n            \
    \    return true\n            else\n                index = index + 1\n      \
    \          return false\n            end\n        else\n            index = 1\n\
    \            return false\n        end\n    end\n    table.sort(arr, sort_func)\n\
    \    return arr\nend", "  return function(a, b) return #a > #b end\nend", "  \
    \  local function compare(a, b)\n        return string.len(a) < string.len(b)\n\
    \    end\n    table.sort(arr, compare)\n    return arr\nend", "  local sorted\
    \ = {}\n  for i = 1, #arr do\n    local str = arr[i]\n    sorted[#sorted + 1]\
    \ = str\n  end\n  table.sort(sorted, function(a, b) return #a < #b end)\n  return\
    \ sorted\nend", "  local result = {}\n  local f = {}\n  for _,v in ipairs(arr)\
    \ do \n    f[v] = true\n  end\n  for k,v in pairs(f) do\n    table.insert(result,\
    \ k)\n  end\n  return result\nend", "    local t = {}\n    for i,v in ipairs(arr)\
    \ do \n        t[#t+1] = {str = v, len = #v}\n    end\n    table.sort(t, function(a,b)\
    \ return a.len > b.len end)\n    local result = {}\n    for i,v in ipairs(t) do\n\
    \        result[#result+1] = v.str\n    end\n    return result\nend", "    local\
    \ max = 0\n    for i = 1, #arr do\n        if arr[i] > max then\n            max\
    \ = arr[i]\n        end\n    end\n    local function get_digit(digit)\n      \
    \  if digit == 1 then\n            return \"One\"\n        elseif digit == 2 then\n\
    \            return \"Two\"\n        elseif digit == 3 then\n            return\
    \ \"Three\"\n        elseif digit == 4 then\n            return \"Four\"\n   \
    \     elseif digit == 5 then\n            return \"Five\"\n        elseif digit\
    \ == 6 then\n            return \"Six\"\n        elseif digit == 7 then\n    \
    \        return \"Seven\"\n        elseif digit == 8 then\n            return\
    \ \"Eight\"\n        elseif digit == 9 then\n            return \"Nine\"\n   \
    \     end\n    end\n    local function count_sort(arr, digit)\n        local count\
    \ = {}\n        local output = {}\n        for i = 0, 9 do\n            count[i]\
    \ = 0\n        end\n        for i = 1, #arr do\n            count[arr[i] % 10\
    \ ^ digit / 10 ^ (digit - 1)] = count[arr[i] % 10 ^ digit / 10 ^ (digit - 1)]\
    \ + 1\n        end\n        for i = 1, 9 do\n            count[i] = count[i] +\
    \ count[i - 1]\n        end\n        for i = #arr, 1, -1 do\n            local\
    \ idx = count[arr[i] % 10 ^ digit / 10 ^ (digit - 1)]\n            output[idx]\
    \ = arr[i]\n            count[arr[i] % 10 ^ digit / 10 ^ (digit - 1)] = count[arr[i]\
    \ % 10 ^ digit / 10 ^ (digit - 1)] - 1\n        end\n        return output\n \
    \   end\n    local output = {}\n    for i = 1, max do\n        output = count_sort(output,\
    \ i)\n    end\n    for i = 1, #output do\n        output[i] = get_digit(output[i])\n\
    \    end\n    return output\nend", "    local maxLen = 0\n    for _,v in ipairs(arr)\
    \ do\n        maxLen = math.max(maxLen, #v)\n    end\n    table.sort(arr, function(a,b)\n\
    \        return #a < #b\n    end)\n    return arr\nend", "  table.sort(arr, function(a,\
    \ b) return #a < #b end)\n  return arr\nend", "    local new_arr = {}\n    local\
    \ result = {}\n    local count = 0\n    -- code here\n    for i = 1, #arr do\n\
    \        if type(arr[i]) == \"number\" and arr[i] >= 1 and arr[i] <= 9 then\n\
    \            count = count + 1\n            new_arr[count] = arr[i]\n        end\n\
    \    end\n    table.sort(new_arr)\n    table.reverse(new_arr)\n    for i = 1,\
    \ #new_arr do\n        local digit = new_arr[i]\n        if digit == 1 then\n\
    \            table.insert(result, \"One\")\n        elseif digit == 2 then\n \
    \           table.insert(result, \"Two\")\n        elseif digit == 3 then\n  \
    \          table.insert(result, \"Three\")\n        elseif digit == 4 then\n \
    \           table.insert(result, \"Four\")\n        elseif digit == 5 then\n \
    \           table.insert(result, \"Five\")\n        elseif digit == 6 then\n \
    \           table.insert(result, \"Six\")\n        elseif digit == 7 then\n  \
    \          table.insert(result, \"Seven\")\n        elseif digit == 8 then\n \
    \           table.insert(result, \"Eight\")\n        elseif digit == 9 then\n\
    \            table.insert(result, \"Nine\")\n        end\n    end\n    return\
    \ result\nend", "\ttable.sort(arr, function(a, b) return string.len(a) < string.len(b)\
    \ end)\n\treturn arr\nend", "  table.sort(arr, function(a, b) return string.len(a)\
    \ < string.len(b) end)\n  return arr\nend", "    table.sort(arr, function(a, b)\n\
    \        return a:len() < b:len()\n    end)\nend", "    local strs = {}\n    for\
    \ _, v in ipairs(arr) do\n        table.insert(strs, string.format(\"%d\", v))\n\
    \    end\n    table.sort(strs, function(a, b)\n        return #a < #b\n    end)\n\
    \    return strs\nend", "    table.sort(arr, function(a, b)\n        return #a\
    \ < #b\n    end)\n    return arr\nend", "  local numbers = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  local result = {}\n  if\
    \ #arr == 0 then return arr end\n  for i = 1, #arr do\n    if arr[i] < 1 or arr[i]\
    \ > 9 then\n      break\n    end\n    result[i] = numbers[arr[i]]\n  end\n  return\
    \ result\nend", "  local count = {}\n  for i = 1, #arr do\n    count[#arr[i]]\
    \ = count[#arr[i]] or {}\n    table.insert(count[#arr[i]], arr[i])\n  end\n  local\
    \ result = {}\n  for i = 1, #count do\n    for j = 1, #count[i] do\n      table.insert(result,\
    \ count[i][j])\n    end\n  end\n  return result\nend", "    table.sort(arr, function(a,\
    \ b)\n        if (#a == #b) then\n            return a > b\n        else\n   \
    \         return #a > #b\n        end\n    end)\n    return arr\nend", "  local\
    \ t = {}\n  for k,v in pairs(arr) do\n    local s = v:len()\n    t[s] = t[s] or\
    \ {}\n    table.insert(t[s], v)\n  end\n  return t\nend", "    local sorted =\
    \ {}\n    for i = 1,#arr do\n        sorted[i] = arr[i]\n    end\n    for i =\
    \ 1,#sorted-1 do\n        for j = 1,#sorted-1 do\n            if #sorted[j] >\
    \ #sorted[j+1] then\n                sorted[j], sorted[j+1] = sorted[j+1], sorted[j]\n\
    \            end\n        end\n    end\n    return sorted\nend", "\tfor i = 1,\
    \ #arr do\n\t\tif arr[i] > 9 or arr[i] < 1 then\n\t\t\ttable.remove(arr, i)\n\t\
    \tend\n\tend\n\treturn arr\nend", "    table.sort(arr, function(a, b) return a:len()\
    \ < b:len() end)\n    return arr\nend", "    return arr\nend", "    local newArr\
    \ = {}\n    for k,v in pairs(arr) do\n        table.insert(newArr, #v)\n    end\n\
    \    return newArr\nend", "    local res = {}\n    for i = 1, #arr do\n      \
    \  if res[#arr[i]] == nil then\n            res[#arr[i]] = {}\n        end\n \
    \       table.insert(res[#arr[i]], arr[i])\n    end\n    return res\nend", " \
    \   local function cmp(a, b)\n        return a[1] < b[1]\n    end\n    table.sort(arr,\
    \ cmp)\n    return arr\nend", "  local sortByLength = {}\n  for _,v in ipairs(arr)\
    \ do\n    if not sortByLength[v] then sortByLength[v] = 1\n    else sortByLength[v]\
    \ = sortByLength[v] + 1 end\n  end\n  local newArr = {}\n  for key, value in pairs(sortByLength)\
    \ do\n    for i = 1, value do\n      table.insert(newArr, key)\n    end\n  end\n\
    \  return newArr\nend", "  local sorted = {}\n  for i = 1, #arr do\n    local\
    \ element = arr[i]\n    if sorted[#element] == nil then\n      sorted[#element]\
    \ = {element}\n    else\n      table.insert(sorted[#element], element)\n    end\n\
    \  end\n  return sorted\nend", "  return table.sort(arr, function(a, b) return\
    \ a:len() < b:len() end)\nend", "\ttable.sort(arr, function(a, b) return string.len(a)\
    \ < string.len(b) end)\n\treturn arr\nend", "    table.sort(arr, function(a, b)\
    \ return string.len(a) < string.len(b) end)\n    return arr\nend", "  return #arr\n\
    end", "    if not arr or #arr == 0 then return {} end\n    table.sort(arr, function(a,\
    \ b) return string.len(a) < string.len(b) end)\n    local res = {}\n    for i\
    \ = 1, #arr do\n        res[i] = arr[i]\n    end\n    return res\nend", "   local\
    \ len = {}\n   for i = 1, #arr do\n      len[i] = string.len(arr[i])\n   end\n\
    \   return len\nend", "    local aux = {}\n    for i = 1, #arr do\n        if\
    \ arr[i] < 10 and arr[i] > 0 then\n            table.insert(aux, arr[i])\n   \
    \     end\n    end\n    table.sort(aux)\n    for i = 1, #aux do\n        aux[i]\
    \ = tostring(aux[i])\n    end\n    return aux\nend", "    table.sort(arr, function(a,\
    \ b)\n        return #a < #b\n    end)\n    return arr\nend", "    local t = {}\n\
    \    for _, word in ipairs(arr) do\n        local length = string.len(word)\n\
    \        if (t[length] == nil) then\n            t[length] = {}\n        end\n\
    \        table.insert(t[length], word)\n    end\n    return t\nend", "  table.sort(arr,\
    \ function(a, b) return #a < #b end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b) return #a < #b end)\n  return arr\nend", "\tlocal function comp(a, b)\n\t\
    \treturn #a < #b\n\tend\n\ttable.sort(arr, comp)\nend", "\ttable.sort(arr, function(a,\
    \ b)\n\t\treturn #a < #b\n\tend)\nend", "  return #arr\nend", "    local len =\
    \ #arr\n    local res = {}\n    for i = 1, len do\n        res[i] = arr[len -\
    \ i + 1]\n    end\n    return res\nend", "  local arr_len = #arr\n  local result\
    \ = {}\n  local filtered_arr = {}\n  local current_index = 1\n  for i = 1, arr_len\
    \ do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(filtered_arr,\
    \ arr[i])\n    end\n  end\n  local filtered_arr_len = #filtered_arr\n  if filtered_arr_len\
    \ == 0 then\n    return result\n  end\n  table.sort(filtered_arr)\n  for i = filtered_arr_len,\
    \ 1, -1 do\n    local current_num = filtered_arr[i]\n    if current_num == 1 then\n\
    \      result[current_index] = 'One'\n    elseif current_num == 2 then\n     \
    \ result[current_index] = 'Two'\n    elseif current_num == 3 then\n      result[current_index]\
    \ = 'Three'\n    elseif current_num == 4 then\n      result[current_index] = 'Four'\n\
    \    elseif current_num == 5 then\n      result[current_index] = 'Five'\n    elseif\
    \ current_num == 6 then\n      result[current_index] = 'Six'\n    elseif current_num\
    \ == 7 then\n      result[current_index] = 'Seven'\n    elseif current_num ==\
    \ 8 then\n      result[current_index] = 'Eight'\n    elseif current_num == 9 then\n\
    \      result[current_index] = 'Nine'\n    end\n    current_index = current_index\
    \ + 1\n  end\n  return result\nend", "  local h = {}\n  for i = 1, #arr do\n \
    \   local len = string.len(arr[i])\n    if h[len] == nil then\n      h[len] =\
    \ {}\n    end\n    table.insert(h[len], arr[i])\n  end\n  return h\nend", "  \
    \  table.sort(arr, function(a, b) return string.len(a) < string.len(b) end)\n\
    \    return arr\nend", "    table.sort(arr, function(a, b) return #a < #b end)\n\
    \    return arr\nend", "  local t = {}\n  for i = 1, #arr do\n    local v = arr[i]\n\
    \    if t[v] == nil then\n      t[v] = {v}\n    else\n      table.insert(t[v],\
    \ v)\n    end\n  end\n  return t\nend", "  local hash = {}\n  for i = 1, #arr\
    \ do\n    local l = arr[i]\n    if hash[l] == nil then\n      hash[l] = {}\n \
    \   end\n    table.insert(hash[l], arr[i])\n  end\n  local length_list = {}\n\
    \  for key, value in pairs(hash) do\n    table.insert(length_list, value)\n  end\n\
    \  local n = #length_list\n  for i = 1, n - 1 do\n    for j = i + 1, n do\n  \
    \    if #length_list[i] > #length_list[j] then\n        length_list[i], length_list[j]\
    \ = length_list[j], length_list[i]\n      end\n    end\n  end\n  return length_list\n\
    end\nprint(table.concat(by_length{'A','AB','ABC','ABCD','ABCDE','ABCDEF'},'\\\
    n'))", "  local hash = {}\n  for i,s in ipairs(arr) do\n    if s:len() ~= 0 then\n\
    \      hash[s:len()] = s\n    end\n  end\n  return hash\nend", "  if #arr == 0\
    \ then\n    return arr\n  end\n  local temp = {}\n  local result = {}\n  for i\
    \ = 1, #arr do\n    if tonumber(arr[i]) >= 1 and tonumber(arr[i]) <= 9 then\n\
    \      table.insert(temp, arr[i])\n    end\n  end\n  table.sort(temp)\n  for i\
    \ = #temp, 1, -1 do\n    table.insert(result, temp[i])\n  end\n  local names =\
    \ {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"}\n  for i = 1, #result do\n    result[i] = names[tonumber(result[i])]\n\
    \  end\n  return result\nend", "\tfor i = 1, #arr do\n\t\tfor j = 1, #arr - 1\
    \ do\n\t\t\tif (#arr[j] > #arr[j + 1]) then\n\t\t\t\tlocal a = arr[j]\n\t\t\t\t\
    arr[j] = arr[j + 1]\n\t\t\t\tarr[j + 1] = a\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ arr\nend", "\tlocal out={}\n\tfor i=1, #arr do\n\t\tout[i]=arr[i]\n\tend\n\t\
    local len=#out\n\tfor i=1,len do\n\t\tfor j=1,len-1 do\n\t\t\tif #out[j]<#out[j+1]\
    \ then\n\t\t\t\tout[j],out[j+1]=out[j+1],out[j]\n\t\t\tend\n\t\tend\n\tend\n\t\
    return out\nend", "  table.sort(arr, function(a, b)\n    return #a < #b\n  end)\n\
    \  return arr\nend", "    return arr[1]\nend", "    local min_int, max_int = 1,\
    \ 9\n    local result = {}\n    if #arr == 0 then return result end\n    local\
    \ function is_int(n) return n == math.floor(n) end\n    for i = 1, #arr do\n \
    \       local n = arr[i]\n        if n >= min_int and n <= max_int and is_int(n)\
    \ then\n            result[#result + 1] = n\n        end\n    end\n    table.sort(result)\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = int_to_string[result[i]]\n\
    \    end\n    return result\nend", "    table.sort(arr, function(a, b) return\
    \ #a < #b end)\n    return arr\nend", "  local strings = {}\n  local sorted =\
    \ {}\n  for k, v in pairs(arr) do\n    table.insert(strings, string.format(\"\
    %d%d\", #v, k))\n  end\n  table.sort(strings)\n  for k, v in pairs(strings) do\n\
    \    local i = tonumber(string.sub(v, 2))\n    table.insert(sorted, arr[i])\n\
    \  end\n  return sorted\nend", "  local temp = {}\n  local res = {}\n  for i =\
    \ 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(temp,\
    \ arr[i])\n    end\n  end\n  table.sort(temp)\n  for i = #temp, 1, -1 do\n   \
    \ if temp[i] == 1 then\n      table.insert(res, \"One\")\n    elseif temp[i] ==\
    \ 2 then\n      table.insert(res, \"Two\")\n    elseif temp[i] == 3 then\n   \
    \   table.insert(res, \"Three\")\n    elseif temp[i] == 4 then\n      table.insert(res,\
    \ \"Four\")\n    elseif temp[i] == 5 then\n      table.insert(res, \"Five\")\n\
    \    elseif temp[i] == 6 then\n      table.insert(res, \"Six\")\n    elseif temp[i]\
    \ == 7 then\n      table.insert(res, \"Seven\")\n    elseif temp[i] == 8 then\n\
    \      table.insert(res, \"Eight\")\n    elseif temp[i] == 9 then\n      table.insert(res,\
    \ \"Nine\")\n    end\n  end\n  return res\nend", "    return arr\nend", "  table.sort(arr,\
    \ function(a, b) return #a < #b end)\n  return arr\nend", "    for i=1,#arr do\n\
    \        for j=1,#arr-1 do\n            if arr[j] < arr[j+1] then\n          \
    \      arr[j], arr[j+1] = arr[j+1], arr[j]\n            end\n        end\n   \
    \ end\n    return arr\nend", "    table.sort(arr, function(a, b)\n        return\
    \ a.length < b.length\n    end)\nend", "  local index = {}\n  for i,v in ipairs(arr)\
    \ do\n    index[#v] = v\n  end\n  return index\nend", "  table.sort(arr, function(a,\
    \ b)\n    return #a < #b\n  end)\n  return arr\nend", "    local len = #arr\n\
    \    local index = {}\n    local length = {}\n    for i = 1, len do\n        table.insert(index,\
    \ i)\n        table.insert(length, #arr[i])\n    end\n    table.sort(index, function(i,\
    \ j)\n        return length[i] < length[j]\n    end)\n    local temp = {}\n  \
    \  for i = 1, len do\n        table.insert(temp, arr[index[i]])\n    end\n   \
    \ return temp\nend", "  -- your code here\n  local res = {}\n  for i = 1,#arr\
    \ do\n    res[i] = arr[i]\n  end\n  for i = 1,#res do\n    for j = i+1,#res do\n\
    \      if res[i] > res[j] then\n        res[i],res[j] = res[j],res[i]\n      end\n\
    \    end\n  end\n  local rev = {}\n  for i = 1,#res do\n    rev[i] = res[#res\
    \ - i + 1]\n  end\n  local words = {}\n  for i = 1,#rev do\n    if rev[i] == 1\
    \ then\n      words[i] = \"One\"\n    elseif rev[i] == 2 then\n      words[i]\
    \ = \"Two\"\n    elseif rev[i] == 3 then\n      words[i] = \"Three\"\n    elseif\
    \ rev[i] == 4 then\n      words[i] = \"Four\"\n    elseif rev[i] == 5 then\n \
    \     words[i] = \"Five\"\n    elseif rev[i] == 6 then\n      words[i] = \"Six\"\
    \n    elseif rev[i] == 7 then\n      words[i] = \"Seven\"\n    elseif rev[i] ==\
    \ 8 then\n      words[i] = \"Eight\"\n    elseif rev[i] == 9 then\n      words[i]\
    \ = \"Nine\"\n    end\n  end\n  return words\nend", "    return arr\nend", " \
    \   local lengths = {}\n    for i, v in ipairs(arr) do\n        lengths[i] = #v\n\
    \    end\n    return lengths\nend", "    local my_function = function(a, b)\n\
    \        if #a == #b then\n            return a < b\n        else\n          \
    \  return #a < #b\n        end\n    end\n    table.sort(arr, my_function)\n  \
    \  return arr\nend", "    local nums = {}\n    for i = 1, 9 do\n        table.insert(nums,\
    \ tostring(i))\n    end\n    local function sort_nums(num1, num2)\n        return\
    \ num1 < num2\n    end\n    for i = 1, #arr do\n        if (arr[i] > 9 or arr[i]\
    \ < 1) then\n            arr[i] = 0\n        end\n    end\n    table.sort(arr,\
    \ sort_nums)\n    for i = 1, #arr do\n        if (arr[i] == 0) then\n        \
    \    table.remove(arr, i)\n        end\n    end\n    for i = 1, #arr do\n    \
    \    arr[i] = nums[arr[i]]\n    end\n    return arr\nend", "\tlocal sort_arr =\
    \ {}\n\tfor i = 1, #arr do\n\t\ttable.insert(sort_arr, arr[i])\n\tend\n\ttable.sort(sort_arr,\
    \ function(a, b)\n\t\treturn a:len() < b:len()\n\tend)\n\treturn sort_arr\nend",
  "    table.sort(arr, function(a, b) return #a < #b end)\n    return arr\nend", "\t\
    local function key(str)\n\t\treturn #str\n\tend\n\ttable.sort(arr, function(a,\
    \ b) return key(a) < key(b) end)\n\treturn arr\nend", "  local res = {}\n  local\
    \ n = #arr\n  for i = 1, n do\n    local c = arr[i]\n    if c == 0 then\n    \
    \  break\n    end\n    res[i] = c\n  end\n  return res\nend", "    local r = {}\n\
    \    for i,v in ipairs(arr) do\n        if v == \"One\" then\n            r[1]\
    \ = v\n        elseif v == \"Two\" then\n            r[2] = v\n        elseif\
    \ v == \"Three\" then\n            r[3] = v\n        elseif v == \"Four\" then\n\
    \            r[4] = v\n        elseif v == \"Five\" then\n            r[5] = v\n\
    \        elseif v == \"Six\" then\n            r[6] = v\n        elseif v == \"\
    Seven\" then\n            r[7] = v\n        elseif v == \"Eight\" then\n     \
    \       r[8] = v\n        elseif v == \"Nine\" then\n            r[9] = v\n  \
    \      end\n    end\n    return r\nend", "  -- your code\nend", "  local temp\
    \ = {}\n  for k, v in pairs(arr) do\n    temp[k] = #v\n  end\n  return temp\n\
    end", "    local function cmp(a, b)\n        return a.length < b.length\n    end\n\
    \    table.sort(arr, cmp)\nend", "\tlocal len = {}\n\tlocal sort = {}\n\tfor i\
    \ = 1, #arr do\n\t\tif #arr[i] > 0 then\n\t\t\tlocal l = #arr[i]\n\t\t\tlen[l]\
    \ = len[l] or {}\n\t\t\ttable.insert(len[l], arr[i])\n\t\tend\n\tend\n\tfor i\
    \ = 1, #len do\n\t\ttable.sort(len[i])\n\t\tfor j = 1, #len[i] do\n\t\t\ttable.insert(sort,\
    \ len[i][j])\n\t\tend\n\tend\n\treturn sort\nend", "\t-- your code here\n\tlocal\
    \ x = {}\n\tfor i = 1, #arr do\n\t\tif arr[i] < 10 and arr[i] > 0 then\n\t\t\t\
    table.insert(x, arr[i])\n\t\tend\n\tend\n\ttable.sort(x)\n\ttable.reverse(x)\n\
    \tlocal str = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n\tlocal result = {}\n\tfor j = 1, #x do\n\t\tfor i = 1, #str do\n\t\
    \t\tif x[j] == i then\n\t\t\t\ttable.insert(result, str[i])\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn result\nend", "    local len_arr = {}\n    for i, v in ipairs(arr)\
    \ do\n        len_arr[i] = #v\n    end\n    return len_arr\nend", "  local res\
    \ = {}\n  local cnt = 0\n  for i=1, #arr do\n    if tonumber(arr[i]) ~= nil then\n\
    \      cnt = cnt + 1\n      res[cnt] = {arr[i], i}\n    end\n  end\n  for i=1,\
    \ #res-1 do\n    for j=1, #res-1 do\n      if res[j][1] > res[j+1][1] then\n \
    \       res[j], res[j+1] = res[j+1], res[j]\n      end\n    end\n  end\n  return\
    \ res\nend", "    table.sort(arr, function(a, b)\n        return #a < #b\n   \
    \ end)\n    return arr\nend", "    local new_arr = {}\n    for _,item in ipairs(arr)\
    \ do\n        if item >= 1 and item <= 9 then\n            table.insert(new_arr,\
    \ item)\n        end\n    end\n    table.sort(new_arr)\n    local ret = {}\n \
    \   for i = #new_arr, 1, -1 do\n        table.insert(ret, new_arr[i])\n    end\n\
    \    return ret\nend", "  if #arr == 0 then return arr end\n  local arr_len =\
    \ {}\n  for i, v in ipairs(arr) do\n    if (type(v) == 'string') then arr_len[#arr_len\
    \ + 1] = {i, #v} end\n  end\n  table.sort(arr_len, function(a, b) return a[2]\
    \ < b[2] end)\n  local out = {}\n  for i, v in ipairs(arr_len) do\n    out[i]\
    \ = arr[v[1]]\n  end\n  return out\nend", "    local t = {}\n    for i = 1, 9\
    \ do\n        for j = 1, #arr do\n            if arr[j] == i then table.insert(t,\
    \ arr[j]) end\n        end\n    end\n    return t\nend", "  -- your code here\n\
    \  local alen = #arr\n  local new_arr = {}\n  local sort_num = {}\n  local sort_num_len\
    \ = 0\n  local replace_num = {}\n  local replace_num_len = 0\n  local res = {}\n\
    \  local out = {}\n  local len = 0\n  local x = 0\n  local y = 0\n  local z =\
    \ 0\n  local m = 0\n  if alen == 0 then\n    return {}\n  end\n  for i=1,alen\
    \ do\n    if arr[i] >=1 and arr[i] <= 9 then\n      table.insert(sort_num,arr[i])\n\
    \      sort_num_len = sort_num_len + 1\n    else\n      table.insert(replace_num,arr[i])\n\
    \      replace_num_len = replace_num_len + 1\n    end\n  end\n  if sort_num_len\
    \ == 0 then\n    return {}\n  end\n  table.sort(sort_num)\n  for j=1,sort_num_len\
    \ do\n    table.insert(new_arr,sort_num[sort_num_len-j+1])\n  end\n  for k=1,sort_num_len\
    \ do\n    if new_arr[k] == 1 then\n      table.insert(res,'One')\n    elseif new_arr[k]\
    \ == 2 then\n      table.insert(res,'Two')\n    elseif new_arr[k] == 3 then\n\
    \      table.insert(res,'Three')\n    elseif new_arr[k] == 4 then\n      table.insert(res,'Four')\n\
    \    elseif new_arr[k] == 5 then\n      table.insert(res,'Five')\n    elseif new_arr[k]\
    \ == 6 then\n      table.insert(res,'Six')\n    elseif new_arr[k] == 7 then\n\
    \      table.insert(res,'Seven')\n    elseif new_arr[k] == 8 then\n      table.insert(res,'Eight')\n\
    \    elseif new_arr[k] == 9 then\n      table.insert(res,'Nine')\n    end\n  end\n\
    \  for l=1,alen do", "    if #arr == 0 then return arr end\n    local t = {}\n\
    \    for _,v in ipairs(arr) do\n        local key = tostring(v):len()\n      \
    \  t[key] = t[key] or {}\n        table.insert(t[key], v)\n    end\n    return\
    \ t\nend", "  --your code here\n  return nil\nend", "  for i = 1, #arr do\n  \
    \  for j = i + 1, #arr do\n      if arr[i] == nil or (arr[j] ~= nil and #arr[i]\
    \ > #arr[j]) then\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n\
    \  end\n  return arr\nend", "    if #arr == 0 then\n        return {}\n    end\n\
    \    local t = {}\n    for i,v in ipairs(arr) do\n        if v >= 1 and v <= 9\
    \ then\n            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n\
    \    table.reverse(t)\n    local digit_to_str = {\n        [1] = \"One\",\n  \
    \      [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n   \
    \     [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n    \
    \    [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    local r = {}\n    for\
    \ i,v in ipairs(t) do\n        table.insert(r, digit_to_str[v])\n    end\n   \
    \ return r\nend", "    local dict = {}\n    local result = {}\n    local length\
    \ = 0\n    local str\n    local index\n    -- get length of arr\n    for i, val\
    \ in ipairs(arr) do\n        if type(val) == 'number' then\n            length\
    \ = length + 1\n        end\n    end\n    -- sort arr\n    for i, val in ipairs(arr)\
    \ do\n        if type(val) == 'number' then\n            if val >= 1 and val <=\
    \ 9 then\n                table.insert(result, val)\n            end\n       \
    \ end\n    end\n    -- reverse arr\n    table.sort(result)\n    -- replace each\
    \ integer with string\n    for i, val in ipairs(result) do\n        if val ==\
    \ 1 then\n            result[i] = 'One'\n        elseif val == 2 then\n      \
    \      result[i] = 'Two'\n        elseif val == 3 then\n            result[i]\
    \ = 'Three'\n        elseif val == 4 then\n            result[i] = 'Four'\n  \
    \      elseif val == 5 then\n            result[i] = 'Five'\n        elseif val\
    \ == 6 then\n            result[i] = 'Six'\n        elseif val == 7 then\n   \
    \         result[i] = 'Seven'\n        elseif val == 8 then\n            result[i]\
    \ = 'Eight'\n        elseif val == 9 then\n            result[i] = 'Nine'\n  \
    \      end\n    end\n    return result\nend", "  table.sort(arr, function(a, b)\
    \ return #a < #b end)\n  return arr\nend", "    table.sort(arr, function(a, b)\
    \ return a:len() < b:len() end)\n    return arr\nend", "  table.sort(arr, function(a,\
    \ b) return #a < #b end)\n  return arr\nend", "    local function _sort(a, b)\n\
    \        if #a < #b then\n            return true\n        elseif #a > #b then\n\
    \            return false\n        else\n            return a < b\n        end\n\
    \    end\n    table.sort(arr, _sort)\n    return arr\nend", "  local function\
    \ length(x) return string.len(x) end\n  table.sort(arr, function(a, b) return\
    \ length(a) < length(b) end)\n  return arr\nend", "\tif #arr <= 1 then return\
    \ arr end\n\tlocal l = {}\n\tlocal r = {}\n\tlocal p = math.random(1, #arr)\n\t\
    for i = 1, #arr do\n\t\tif i ~= p then\n\t\t\tif #arr[i] < #arr[p] then\n\t\t\t\
    \ttable.insert(l, arr[i])\n\t\t\telse\n\t\t\t\ttable.insert(r, arr[i])\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn by_length(l), arr[p], by_length(r)\nend", "    table.sort(arr,\
    \ function(a, b)\n        return string.len(a) < string.len(b)\n    end)\n   \
    \ return arr\nend", "  local tab={}\n  for i=1, #arr do\n    tab[i]=arr[i]\n \
    \ end\n  table.sort(tab,function(a,b)\n     return a:len()<b:len()\n  end)\n \
    \ return tab\nend", "    if #arr == 0 then return arr end\n    local t = {}\n\
    \    for i = 1, #arr do\n        if type(arr[i]) == 'number' and arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            table.insert(t, arr[i])\n        end\n    end\n\
    \    table.sort(t)\n    for i = 1, #t do\n        if t[i] == 1 then t[i] = 'One'\n\
    \        elseif t[i] == 2 then t[i] = 'Two'\n        elseif t[i] == 3 then t[i]\
    \ = 'Three'\n        elseif t[i] == 4 then t[i] = 'Four'\n        elseif t[i]\
    \ == 5 then t[i] = 'Five'\n        elseif t[i] == 6 then t[i] = 'Six'\n      \
    \  elseif t[i] == 7 then t[i] = 'Seven'\n        elseif t[i] == 8 then t[i] =\
    \ 'Eight'\n        elseif t[i] == 9 then t[i] = 'Nine'\n        end\n    end\n\
    \    return t\nend", "    local result = {}\n    for _, s in ipairs(arr) do\n\
    \        local str_length = string.len(s)\n        result[str_length] = result[str_length]\
    \ or {}\n        table.insert(result[str_length], s)\n    end\n    return result\n\
    end", "  for i=1,#arr do\n    for j=i+1,#arr do\n      if #arr[i] > #arr[j] then\n\
    \        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n  end\n  return\
    \ arr\nend", "    table.sort(arr, function(a, b) return #a < #b end)\n    return\
    \ arr\nend", "  for i = 1, #arr - 1 do\n    for j = i + 1, #arr do\n      if #arr[i]\
    \ > #arr[j] then\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n\
    \  end\n  return arr\nend", "  local t,l = {}\n  for i=1,#arr do\n    if arr[i]\
    \ < 10 and arr[i] > 0 then \n      l = #arr[i]\n      if t[l] == nil then t[l]\
    \ = {} end\n      table.insert(t[l], arr[i])\n    end\n  end\n  return t\nend",
  "    table.sort(arr, function(a, b) return #a < #b end)\n    return arr\nend", " \
    \ local new_arr = {}\n  for i = 1, 9 do\n    for j = 1, #arr do\n      if arr[j]\
    \ == i then\n        table.insert(new_arr, arr[j])\n      end\n    end\n  end\n\
    \  return new_arr\nend", "  for i = 1, #arr do\n    for j = i + 1, #arr do\n \
    \     if #arr[i] > #arr[j] then\n        arr[i], arr[j] = arr[j], arr[i]\n   \
    \   end\n    end\n  end\n  return arr\nend", "    table.sort(arr, function(a,\
    \ b) return #a < #b end)\n    return arr\nend", "  local min_len = math.huge\n\
    \  local max_len = 0\n  for _, v in ipairs(arr) do\n    if #v < min_len then min_len\
    \ = #v end\n    if #v > max_len then max_len = #v end\n  end\n  local result =\
    \ {}\n  for i = min_len, max_len do\n    local tmp = {}\n    for _, v in ipairs(arr)\
    \ do\n      if #v == i then\n        table.insert(tmp, v)\n      end\n    end\n\
    \    for _, v in ipairs(tmp) do\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend", "    table.sort(arr, function(a, b) return #a < #b end)\n\
    \    return arr\nend", "  return function(a, b) return #a < #b end\nend", "\t\
    for i = 1, #arr do\n\t\tif(arr[i] < 0 or arr[i] > 9) then arr[i] = -1 end\n\t\
    end\n\ttable.sort(arr)\n\tfor i = 1, #arr do\n\t\tif(arr[i] < 0) then table.remove(arr,\
    \ i) end\n\tend\n\tlocal temp = {}\n\tfor i = #arr, 1, -1 do\n\t\ttable.insert(temp,\
    \ arr[i])\n\tend\n\tarr = temp\n\tfor i = 1, #arr do\n\t\tif(arr[i] == 1) then\
    \ arr[i] = \"One\"\n\t\telseif(arr[i] == 2) then arr[i] = \"Two\"\n\t\telseif(arr[i]\
    \ == 3) then arr[i] = \"Three\"\n\t\telseif(arr[i] == 4) then arr[i] = \"Four\"\
    \n\t\telseif(arr[i] == 5) then arr[i] = \"Five\"\n\t\telseif(arr[i] == 6) then\
    \ arr[i] = \"Six\"\n\t\telseif(arr[i] == 7) then arr[i] = \"Seven\"\n\t\telseif(arr[i]\
    \ == 8) then arr[i] = \"Eight\"\n\t\telseif(arr[i] == 9) then arr[i] = \"Nine\"\
    \n\t\tend\n\tend\n\treturn arr\nend", "    table.sort(arr, function(a, b) return\
    \ #a < #b end)\n    return arr\nend", "    return table.sort(arr, function(a,\
    \ b) return #a < #b end)\nend", "  for k, v in pairs(arr) do\n    if type(v) ==\
    \ 'string' then\n      arr[k] = #v\n    end\n  end\n  table.sort(arr)\n  for k,\
    \ v in pairs(arr) do\n    if type(v) == 'number' then\n      arr[k] = #v\n   \
    \ end\n  end\n  return arr\nend", "\tfor i = 1, #arr do\n\t\tfor j = 1, #arr -\
    \ 1 do\n\t\t\tif arr[j] > arr[j + 1] then\n\t\t\t\tarr[j], arr[j + 1] = arr[j\
    \ + 1], arr[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn arr\nend", "\ttable.sort(arr,\
    \ function(a, b)\n\t\treturn #a < #b\n\tend)\nend", "\ttable.sort(arr, function(a,\
    \ b)\n\t\treturn #a < #b\n\tend)\nend", "  local function key(elem)\n    return\
    \ #elem\n  end\n  table.sort(arr, function(a, b) return key(a) < key(b) end)\n\
    \  return arr\nend", "    return #arr[1] < #arr[2]\nend", "    local ret = {}\n\
    \    for _, x in ipairs(arr) do\n        local s = tostring(x)\n        local\
    \ d = tonumber(s:sub(1, 1))\n        if 1 <= d and d <= 9 then\n            table.insert(ret,\
    \ x)\n        end\n    end\n    table.sort(ret)\n    for i, x in ipairs(ret) do\n\
    \        ret[i] = tostring(x)\n    end\n    table.sort(ret, function(a, b) return\
    \ #a > #b end)\n    for i, x in ipairs(ret) do\n        ret[i] = tonumber(x)\n\
    \    end\n    return ret\nend", "   local i, j\n   for i = 1, #arr do\n      local\
    \ v = arr[i]\n      for j = i+1, #arr do\n         if #v > #arr[j] then\n    \
    \        v, arr[j] = arr[j], v\n         end\n      end\n      arr[i] = v\n  \
    \ end\n   return arr\nend", "  local function compare(a, b)\n    return a:len()\
    \ < b:len()\n  end\n  table.sort(arr, compare)\n  return arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
