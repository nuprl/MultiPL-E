name: HumanEval_19_sort_numbers
language: lua
prompt: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to\
  \ largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function\
  \ sort_numbers(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
  \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
  \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five\
  \ seven eight nine')\n    lu.assertEquals(candidate('six five four three two one\
  \ zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   return nil\nend", "  -- split into a list of numberals\n  numbers\
    \ = string.split(numbers, ' ')\n  -- sort the numbers into their ordinal equivalents\n\
    \  table.sort(numbers, function(a, b)\n    return nts(a) < nts(b)\n  end)\n  --\
    \ join the numbers back together\n  return table.concat(numbers, ' ')\nend", " \
    \ -- TODO\nend", "    local nums = {}\n    local num_func = {\n        zero =\
    \ 0,\n        one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n\
    \        five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n\
    \        nine = 9,\n    }\n    for i in string.gmatch(numbers, '%S+') do\n   \
    \     local num = num_func[i]\n        if num then\n            table.insert(nums,\
    \ num)\n        end\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums)\
    \ do\n        for k, _ in pairs(num_func) do\n            if v == num_func[k]\
    \ then\n                nums[i] = k\n            end\n        end\n    end\n \
    \   return table.concat(nums, ' ')\nend", "    numbers = utils.split(numbers)\n\
    \    table.sort(numbers, function(a, b)\n        return numbers_map[a] < numbers_map[b]\n\
    \    end)\n    return table.concat(numbers, ' ')\nend", "   local numeral_table\
    \ = {}\n   for numeral in numbers:gmatch('%w+') do\n      table.insert(numeral_table,\
    \ numeral)\n   end\n   table.sort(numeral_table)\n   return table.concat(numeral_table,\
    \ ' ')\nend", "  local nums = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"}\n  local output = {}\n  local\
    \ numbers_array = lu.split(numbers, \" \")\n  for i, num in ipairs(numbers_array)\
    \ do\n    for ii, num_ in ipairs(nums) do\n      if num == num_ then\n       \
    \ table.insert(output, ii)\n      end\n    end\n  end\n  table.sort(output)\n\
    \  for i, n in ipairs(output) do\n    output[i] = nums[n]\n  end\n  local result\
    \ = \"\"\n  for i, n in ipairs(output) do\n    if i == 1 then\n      result =\
    \ n\n    else\n      result = result .. \" \" .. n\n    end\n  end\n  return result\n\
    end", "\t-- define a custom sort function\n\tlocal function compare(a, b)\n\t\t\
    return numeral_table[a] < numeral_table[b]\n\tend\n\tlocal sorted = {}\n\tfor\
    \ n in numbers:gmatch('%S+') do\n\t\t-- check for a valid numeral\n\t\tif numeral_table[n]\
    \ == nil then\n\t\t\t-- invalid numeral, bail out\n\t\t\treturn 'Invalid numeral.'\n\
    \t\tend\n\t\ttable.insert(sorted, n)\n\tend\n\ttable.sort(sorted, compare)\n\t\
    return table.concat(sorted, ' ')\nend", "  local numbers_array = {}\n  for w in\
    \ string.gmatch(numbers, \"%S+\") do\n    table.insert(numbers_array, w)\n  end\n\
    \  table.sort(numbers_array)\n  return table.concat(numbers_array, \" \")\nend",
  "  local split = numbers:split(' ')\n  local sorted = {}\n  for _, num in ipairs(split)\
    \ do\n    local n = tonumber(map[num])\n    table.insert(sorted, n)\n  end\n \
    \ table.sort(sorted)\n  local result = {}\n  for _, num in ipairs(sorted) do\n\
    \    table.insert(result, num2str[num])\n  end\n  return table.concat(result,\
    \ ' ')\nend", "  local nums = {}\n  for n in string.gmatch(numbers, '%w+') do\n\
    \    n = n:gsub('%a', ' ')\n    table.insert(nums, n)\n  end\n  table.sort(nums)\n\
    \  return table.concat(nums, ' ')\nend", "    -- TODO: Write implementation\n\
    \    -- TODO: Write implementation\n    local t = table.pack(string.split(numbers,\
    \ \" \"))\n    table.sort(t, function(a, b) return tonumber(a) < tonumber(b) end)\n\
    \    return table.concat(t, \" \")\nend", "  return (numbers:gsub('([zeroone])',\
    \ {\n    zero = '0',\n    one = '1',\n    two = '2',\n    three = '3',\n    four\
    \ = '4',\n    five = '5',\n    six = '6',\n    seven = '7',\n    eight = '8',\n\
    \    nine = '9',\n  }):gsub('%d+', function(number)\n    return ('%03d'):format(number)\n\
    \  end):gsub('0(%d)', 'zero%1'):gsub('1(%d)', 'one%1'):gsub('2(%d)', 'two%1'):gsub('3(%d)',\
    \ 'three%1'):gsub('4(%d)', 'four%1'):gsub('5(%d)', 'five%1'):gsub('6(%d)', 'six%1'):gsub('7(%d)',\
    \ 'seven%1'):gsub('8(%d)', 'eight%1'):gsub('9(%d)', 'nine%1'))\nend", "    local\
    \ numbers_table = {}\n    for number in string.gmatch(numbers, \"%S+\") do\n \
    \       local numeral = gsub(number, \"five\", \"5\")\n        numeral = gsub(numeral,\
    \ \"four\", \"4\")\n        numeral = gsub(numeral, \"one\", \"1\")\n        numeral\
    \ = gsub(numeral, \"six\", \"6\")\n        numeral = gsub(numeral, \"seven\",\
    \ \"7\")\n        numeral = gsub(numeral, \"three\", \"3\")\n        numeral =\
    \ gsub(numeral, \"two\", \"2\")\n        numeral = gsub(numeral, \"zero\", \"\
    0\")\n        numeral = gsub(numeral, \"eight\", \"8\")\n        numeral = gsub(numeral,\
    \ \"nine\", \"9\")\n        table.insert(numbers_table, numeral)\n    end\n  \
    \  table.sort(numbers_table)\n    local result = {}\n    for i = 1, #numbers_table\
    \ do\n        local numeral = numbers_table[i]\n        numeral = gsub(numeral,\
    \ \"5\", \"five\")\n        numeral = gsub(numeral, \"4\", \"four\")\n       \
    \ numeral = gsub(numeral, \"1\", \"one\")\n        numeral = gsub(numeral, \"\
    6\", \"six\")\n        numeral = gsub(numeral, \"7\", \"seven\")\n        numeral\
    \ = gsub(numeral, \"3\", \"three\")\n        numeral = gsub(numeral, \"2\", \"\
    two\")\n        numeral = gsub(numeral, \"0\", \"zero\")\n        numeral = gsub(numeral,\
    \ \"8\", \"eight\")\n        numeral = gsub(numeral, \"9\", \"nine\")\n      \
    \  table.insert(result, numeral)\n    end\n    return table.concat(result, \"\
    \ \")\nend", "    local sorted_numbers = {}\n    for number in numbers:gmatch('[^%s]+')\
    \ do\n        number = tonumber(number)\n        if number ~= nil then\n     \
    \       table.insert(sorted_numbers, number)\n        end\n    end\n    table.sort(sorted_numbers)\n\
    \    local output = {}\n    for _, number in ipairs(sorted_numbers) do\n     \
    \   table.insert(output, tostring(number))\n    end\n    return table.concat(output,\
    \ ' ')\nend", "\tlocal input = split(numbers)\n\tlocal nums = {}\n\tfor i, v in\
    \ ipairs(input) do\n\t\tnums[i] = translate(v)\n\tend\n\ttable.sort(nums)\n\t\
    return join(nums)\nend", "\treturn nil\nend", "  local words = {'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n  local numbers\
    \ = stringx.split(numbers)\n  local sorted = {}\n  for i = 1, #numbers do\n  \
    \  local index = tablex.find(words, numbers[i])\n    table.insert(sorted, index)\n\
    \  end\n  table.sort(sorted)\n  local output = {}\n  for i = 1, #sorted do\n \
    \   table.insert(output, words[sorted[i]])\n  end\n  return table.concat(output,\
    \ ' ')\nend", "  local num_list = stringx.split(numbers)\n  for i = 1, #num_list\
    \ do\n    num_list[i] = tonumber(number_dict[num_list[i]])\n  end\n  table.sort(num_list)\n\
    \  for i = 1, #num_list do\n    num_list[i] = number_dict[num_list[i]]\n  end\n\
    \  return table.concat(num_list, ' ')\nend", "  local number_table = split(numbers)\n\
    \  table.sort(number_table, function(a, b) return a < b end)\n  return table.concat(number_table,\
    \ ' ')\nend", "    -- Sort in lexical order\n    numbers = numbers:split(' ')\n\
    \    table.sort(numbers)\n    numbers = table.concat(numbers, ' ')\n    return\
    \ numbers\nend", "  \n  -- split the number string into a table of strings\n \
    \ local number_table = stringx.split(numbers)\n  \n  -- table to hold the sorted\
    \ number strings\n  local sorted_numbers = {}\n  \n  -- table holding the numeric\
    \ value of each number\n  local number_value = {zero = 0, one = 1, two = 2, three\
    \ = 3, four = 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9}\n  \n  --\
    \ table to convert the numeric values back to strings\n  local number_to_string\
    \ = {[0] = 'zero', [1] = 'one', [2] = 'two', [3] = 'three', [4] = 'four', [5]\
    \ = 'five', [6] = 'six', [7] = 'seven', [8] = 'eight', [9] = 'nine'}\n  \n  --\
    \ table to hold the numeric values of the input\n  local number_values = {}\n\
    \  \n  -- iterate over the table of number strings\n  for i = 1, #number_table\
    \ do\n    \n    -- get the numeric value of the current number\n    local value\
    \ = number_value[number_table[i]]\n    \n    -- add the value to the table of\
    \ numeric values\n    table.insert(number_values, value)\n    \n  end\n  \n  --\
    \ sort the numeric values\n  table.sort(number_values)\n  \n  -- iterate over\
    \ the numeric values\n  for i = 1, #number_values do\n    \n    -- convert the\
    \ value to a string\n    local number_string = number_to_string[number_values[i]]\n\
    \    \n    -- add the string to the sorted number table\n    table.insert(sorted_numbers,\
    \ number_string)\n    \n  end\n  \n  -- join the sorted numbers back into a string\n\
    \  local sorted_string = table.concat(sorted_numbers, ' ')\n  \n  -- return the\
    \ sorted string\n  return sorted_string\n  \nend", "    local english_numbers\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numeral_list = {}\n\
    \    for numeral in numbers:gmatch('%a+') do\n        table.insert(numeral_list,\
    \ english_numbers[numeral])\n    end\n    table.sort(numeral_list)\n    local\
    \ result = {}\n    for _, numeral in ipairs(numeral_list) do\n        for english_numeral,\
    \ numeral_number in pairs(english_numbers) do\n            if numeral == numeral_number\
    \ then\n                table.insert(result, english_numeral)\n            end\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "    local\
    \ words = {}\n    for num in numbers:gmatch('%S+') do\n        table.insert(words,\
    \ num)\n    end\n    table.sort(words, function(a, b)\n        local m = tonumber(a)\n\
    \        local n = tonumber(b)\n        if m and n then\n            return m\
    \ < n\n        else\n            return a < b\n        end\n    end)\n    return\
    \ table.concat(words, ' ')\nend", "    local num_list = string.split(numbers,\
    \ ' ')\n    table.sort(num_list, function(a, b)\n        return Numberals[a] <\
    \ Numberals[b]\n    end)\n    return table.concat(num_list, ' ')\nend", "  local\
    \ compare = function(a, b)\n    return numbers_to_ints[a] < numbers_to_ints[b]\n\
    \  end\n  return table.concat(table.sort(numbers:split(' '), compare), ' ')\n\
    end", "    local numbers_sorted = {}\n    for num in numbers:gmatch('%a+') do\n\
    \        table.insert(numbers_sorted, num)\n    end\n    table.sort(numbers_sorted)\n\
    \    return table.concat(numbers_sorted, ' ')\nend", "    local number_list =\
    \ {}\n    for word in numbers:gmatch('%S+') do\n        local number = NUMBER_WORDS[word]\n\
    \        if number then\n            table.insert(number_list, number)\n     \
    \   end\n    end\n    table.sort(number_list)\n    return table.concat(number_list,\
    \ ' ')\nend", "    local num2word = {\n        [0] = 'zero',\n        [1] = 'one',\n\
    \        [2] = 'two',\n        [3] = 'three',\n        [4] = 'four',\n       \
    \ [5] = 'five',\n        [6] = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n\
    \        [9] = 'nine',\n    }\n    local word2num = {}\n    for i = 0, 9 do\n\
    \        word2num[num2word[i]] = i\n    end\n    local words = strsplit(' ', numbers)\n\
    \    table.sort(words, function(a, b)\n        return word2num[a] < word2num[b]\n\
    \    end)\n    return table.concat(words, ' ')\nend", "  -- Split space-delimited\
    \ string into a table\n  numbers = numbers:split(' ')\n  -- Convert numberals\
    \ to numbers\n  for i = 1, #numbers do\n    numbers[i] = NUMBERALS[numbers[i]]\n\
    \  end\n  -- Sort the table in place\n  table.sort(numbers)\n  -- Convert numbers\
    \ back to numberals\n  for i = 1, #numbers do\n    numbers[i] = NUMBERALS[numbers[i]]\n\
    \  end\n  -- Join the elements in the table with spaces and return\n  return table.concat(numbers,\
    \ ' ')\nend", "    local numeral_value = { zero = 0, one = 1, two = 2, three =\
    \ 3, four = 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9}\n    local numbers_list\
    \ = {}\n    local sorted_numbers = {}\n    for numeral in numbers:gmatch('%w+')\
    \ do\n        table.insert(numbers_list, numeral_value[numeral])\n    end\n  \
    \  table.sort(numbers_list)\n    for _, value in ipairs(numbers_list) do\n   \
    \     for numeral, numeral_value in pairs(numeral_value) do\n            if value\
    \ == numeral_value then\n                table.insert(sorted_numbers, numeral)\n\
    \            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ ' ')\nend", "  -- split string into array of numbers\n  local sorted = numbers:split('\
    \ ')\n  -- sort array of numbers\n  table.sort(sorted)\n  -- return re-joined\
    \ array of numbers\n  return table.concat(sorted, ' ')\nend", "  return table.concat(util.sort(util.split(numbers)),\
    \ ' ')\nend", "    local nums = {}\n    local n\n    for n in string.gmatch(numbers,\
    \ '%S+') do\n        table.insert(nums, text2num(n))\n    end\n    table.sort(nums)\n\
    \    for i = 1, #nums do\n        nums[i] = num2text(nums[i])\n    end\n    return\
    \ table.concat(nums, ' ')\nend", "  local nums = {}\n  for num in (numbers ..\
    \ ' '):gmatch('(%d+) ') do\n    nums[#nums + 1] = num\n  end\n  table.sort(nums)\n\
    \  return table.concat(nums, ' ')\nend", "    local words = numbers:split(' ')\n\
    \    table.sort(words, function(a, b)\n        return parse_number(a) < parse_number(b)\n\
    \    end)\n    return table.concat(words, ' ')\nend", "    -- #1. Split the string\
    \ into a table of numbers.\n    -- #2. Sort the table.\n    -- #3. Join the table\
    \ back into a string.\n    return table.concat(table.sort(numbers:split(' ')),\
    \ ' ')\nend", "  return table.concat(sort(string.split(numbers, \" \")), \" \"\
    )\nend", "    local sorted = {}\n    for i = 1, #numbers do\n        if numbers[i]\
    \ == 'zero' then\n            sorted[#sorted + 1] = 0\n        elseif numbers[i]\
    \ == 'one' then\n            sorted[#sorted + 1] = 1\n        elseif numbers[i]\
    \ == 'two' then\n            sorted[#sorted + 1] = 2\n        elseif numbers[i]\
    \ == 'three' then\n            sorted[#sorted + 1] = 3\n        elseif numbers[i]\
    \ == 'four' then\n            sorted[#sorted + 1] = 4\n        elseif numbers[i]\
    \ == 'five' then\n            sorted[#sorted + 1] = 5\n        elseif numbers[i]\
    \ == 'six' then\n            sorted[#sorted + 1] = 6\n        elseif numbers[i]\
    \ == 'seven' then\n            sorted[#sorted + 1] = 7\n        elseif numbers[i]\
    \ == 'eight' then\n            sorted[#sorted + 1] = 8\n        elseif numbers[i]\
    \ == 'nine' then\n            sorted[#sorted + 1] = 9\n        end\n    end\n\
    \    sorted = merge_sort(sorted)\n    for i = 1, #sorted do\n        if sorted[i]\
    \ == 0 then\n            sorted[i] = 'zero'\n        elseif sorted[i] == 1 then\n\
    \            sorted[i] = 'one'\n        elseif sorted[i] == 2 then\n         \
    \   sorted[i] = 'two'\n        elseif sorted[i] == 3 then\n            sorted[i]\
    \ = 'three'\n        elseif sorted[i] == 4 then\n            sorted[i] = 'four'\n\
    \        elseif sorted[i] == 5 then\n            sorted[i] = 'five'\n        elseif\
    \ sorted[i] == 6 then\n            sorted[i] = 'six'\n        elseif sorted[i]\
    \ == 7 then\n            sorted[i] = 'seven'\n        elseif sorted[i] == 8 then\n\
    \            sorted[i] = 'eight'\n        elseif sorted[i] == 9 then\n       \
    \     sorted[i] = 'nine'\n        end\n    end\n    return", "    local m = {}\n\
    \    for s in numbers:gmatch'%S+' do\n        local n = assert(number_lookup[s])\n\
    \        if m[n] then\n            return\n        end\n        m[n] = true\n\
    \    end\n    local ret = {}\n    for i = 0, 9 do\n        if m[i] then\n    \
    \        ret[#ret + 1] = number_to_string[i]\n        end\n    end\n    return\
    \ table.concat(ret, ' ')\nend", "    local number = numbers:gsub('zero', '0'):gsub('one',\
    \ '1'):gsub('two', '2'):gsub('three', '3'):gsub('four', '4'):gsub('five', '5'):gsub('six',\
    \ '6'):gsub('seven', '7'):gsub('eight', '8'):gsub('nine', '9')\n    number = number:gsub('0',\
    \ 'zero'):gsub('1', 'one'):gsub('2', 'two'):gsub('3', 'three'):gsub('4', 'four'):gsub('5',\
    \ 'five'):gsub('6', 'six'):gsub('7', 'seven'):gsub('8', 'eight'):gsub('9', 'nine')\n\
    \    return number\nend", "  local function number_to_int(number)\n    local map\
    \ = {\n      one=1, two=2, three=3, four=4, five=5, six=6, seven=7, eight=8, nine=9,\
    \ zero=0\n    }\n    return map[number]\n  end\n  local function compare(a, b)\n\
    \    return number_to_int(a) < number_to_int(b)\n  end\n  local numbers_t = {}\n\
    \  for word in numbers:gmatch('%S+') do\n    table.insert(numbers_t, word)\n \
    \ end\n  table.sort(numbers_t, compare)\n  return table.concat(numbers_t, ' ')\n\
    end", "  local l = {}\n  local all = {\n    zero = 0,\n    one = 1,\n    two =\
    \ 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven =\
    \ 7,\n    eight = 8,\n    nine = 9\n  }\n  for num in numbers:gmatch('%S+') do\n\
    \    table.insert(l, all[num])\n  end\n  table.sort(l)\n  local s = ''\n  for\
    \ _, num in ipairs(l) do\n    for k, v in pairs(all) do\n      if v == num then\n\
    \        s = s .. ' ' .. k\n      end\n    end\n  end\n  return s:sub(2)\nend",
  "  return table.concat(utils.map(utils.split(numbers, ' '), tonumber), ' ')\nend",
  "    local num2int = {zero=0, one=1, two=2, three=3, four=4, five=5, six=6, seven=7,\
    \ eight=8, nine=9}\n    local ints = {}\n    for num in numbers:gmatch(\"%w+\"\
    ) do\n        if num2int[num] then\n            table.insert(ints, num2int[num])\n\
    \        end\n    end\n    table.sort(ints)\n    local ret = {}\n    for _,v in\
    \ ipairs(ints) do\n        table.insert(ret, v)\n    end\n    return table.concat(ret,\
    \ \" \")\nend", "    local numbers_table = split(numbers, ' ')\n    local number_value\
    \ = {\n        ['zero'] = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n   \
    \     ['three'] = 3,\n        ['four'] = 4,\n        ['five'] = 5,\n        ['six']\
    \ = 6,\n        ['seven'] = 7,\n        ['eight'] = 8,\n        ['nine'] = 9\n\
    \    }\n    table.sort(numbers_table, function(a, b)\n        return number_value[a]\
    \ < number_value[b]\n    end)\n    return table.concat(numbers_table, ' ')\nend",
  "    -- Convert a single digit to its number\n    local function num(str)\n    \
    \    if str == 'zero' then return 0\n        elseif str == 'one' then return 1\n\
    \        elseif str == 'two' then return 2\n        elseif str == 'three' then\
    \ return 3\n        elseif str == 'four' then return 4\n        elseif str ==\
    \ 'five' then return 5\n        elseif str == 'six' then return 6\n        elseif\
    \ str == 'seven' then return 7\n        elseif str == 'eight' then return 8\n\
    \        elseif str == 'nine' then return 9\n        else error(\"invalid number\
    \ string: \" .. str)\n        end\n    end", "    local number_table = {}\n  \
    \  for number in string.gmatch(numbers, \"[%w]+\") do\n        table.insert(number_table,\
    \ number)\n    end\n    table.sort(number_table)\n    return table.concat(number_table,\
    \ \" \")\nend", "    local dict = {\n        zero = 0,\n        one = 1,\n   \
    \     two = 2,\n        three = 3,\n        four = 4,\n        five = 5,\n   \
    \     six = 6,\n        seven = 7,\n        eight = 8,\n        nine = 9\n   \
    \ }\n    local nums = {}\n    for i, num in numbers:gmatch'(%S+)' do\n       \
    \ table.insert(nums, dict[num])\n    end\n    table.sort(nums)\n    local output\
    \ = {}\n    for _, num in ipairs(nums) do\n        for key, value in pairs(dict)\
    \ do\n            if value == num then\n                table.insert(output, key)\n\
    \            end\n        end\n    end\n    return table.concat(output, ' ')\n\
    end", "  local digits = {'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine'}\n  local keys = {}\n  for i, v in ipairs(numbers:split('\
    \ ')) do\n    table.insert(keys, digit_to_numeral[v])\n  end\n  table.sort(keys)\n\
    \  local ret = ''\n  for i, key in ipairs(keys) do\n    ret = ret .. numeral_to_digit[key]\
    \ .. ' '\n  end\n  return ret:sub(1, -2)\nend", "  local num_table = {}\n  for\
    \ numeral in numbers:gmatch('%w+') do\n    table.insert(num_table, tonumber(numeral_to_number(numeral)))\n\
    \  end\n  table.sort(num_table)\n  local result = {}\n  for i,v in ipairs(num_table)\
    \ do\n    table.insert(result, number_to_numeral(v))\n  end\n  return table.concat(result,\
    \ ' ')\nend", "  local function compare(lhs, rhs)\n    local map = {zero = 0,\
    \ one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven = 7, eight =\
    \ 8, nine = 9}\n    return map[lhs] < map[rhs]\n  end\n  local word_list = stringx.split(numbers)\n\
    \  table.sort(word_list, compare)\n  return table.concat(word_list, ' ')\nend",
  "  local dict = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n \
    \   four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n \
    \   nine = 9\n  }\n  local list = {}\n  for num in numbers:gmatch('%S+') do\n\
    \    table.insert(list, dict[num])\n  end\n  table.sort(list)\n  local out = {}\n\
    \  for i, v in ipairs(list) do\n    for num, val in pairs(dict) do\n      if val\
    \ == v then\n        table.insert(out, num)\n      end\n    end\n  end\n  return\
    \ table.concat(out, ' ')\nend", "   local num_list = split(numbers)\n   local\
    \ sort_numbers = {}\n   local numeral_map = {\n      zero = 0,\n      one = 1,\n\
    \      two = 2,\n      three = 3,\n      four = 4,\n      five = 5,\n      six\
    \ = 6,\n      seven = 7,\n      eight = 8,\n      nine = 9\n   }\n   for i,num\
    \ in ipairs(num_list) do\n      if not numeral_map[num] then\n         error('Number\
    \ \"' .. num .. '\" is not a valid numeral')\n      end\n      table.insert(sort_numbers,\
    \ numeral_map[num])\n   end\n   table.sort(sort_numbers)\n   local sorted_numbers\
    \ = {}\n   for i,num in ipairs(sort_numbers) do\n      local numeral = nil\n \
    \     for k,v in pairs(numeral_map) do\n         if v == num then\n          \
    \  numeral = k\n            break\n         end\n      end\n      table.insert(sorted_numbers,\
    \ numeral)\n   end\n   return table.concat(sorted_numbers, ' ')\nend", "  if numbers\
    \ == nil then\n    return\n  end\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    local n = tonumber(num)\n    if n ~= nil then\n      table.insert(nums,\
    \ n)\n    end\n  end\n  table.sort(nums)\n  local result = ''\n  for i, num in\
    \ ipairs(nums) do\n    if i > 1 then\n      result = result .. ' '\n    end\n\
    \    result = result .. num\n  end\n  return result\nend", "\tlocal numeral_map\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal split_numbers = numbers:split(\" \")\n\tlocal number_list = {}\n\t\
    for i,v in ipairs(split_numbers) do\n\t\ttable.insert(number_list, numeral_map[v])\n\
    \tend\n\ttable.sort(number_list)\n\tlocal result = {}\n\tfor i,v in ipairs(number_list)\
    \ do\n\t\tfor numeral,number in pairs(numeral_map) do\n\t\t\tif number == v then\n\
    \t\t\t\ttable.insert(result, numeral)\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(result,\
    \ \" \")\nend", "    return table.concat(\n        boop.map(\n            numbers,\n\
    \            function(number)\n                return number:gsub('(%d+)', function(number)\n\
    \                    return string.format('%08d', number)\n                end)\n\
    \            end\n        ),\n        ' '\n    )\nend", "    -- Convert input\
    \ to a table of numbers\n    local nums = {}\n    for num in string.gmatch(numbers,\
    \ \"%S+\") do\n        table.insert(nums, tonumber(numeral_to_number(num)))\n\
    \    end", "  numbers = numbers:lower()\n  local sorted = {}\n  for word in numbers:gmatch('%S+')\
    \ do\n    if word == 'zero' then\n      sorted[#sorted + 1] = 0\n    elseif word\
    \ == 'one' then\n      sorted[#sorted + 1] = 1\n    elseif word == 'two' then\n\
    \      sorted[#sorted + 1] = 2\n    elseif word == 'three' then\n      sorted[#sorted\
    \ + 1] = 3\n    elseif word == 'four' then\n      sorted[#sorted + 1] = 4\n  \
    \  elseif word == 'five' then\n      sorted[#sorted + 1] = 5\n    elseif word\
    \ == 'six' then\n      sorted[#sorted + 1] = 6\n    elseif word == 'seven' then\n\
    \      sorted[#sorted + 1] = 7\n    elseif word == 'eight' then\n      sorted[#sorted\
    \ + 1] = 8\n    elseif word == 'nine' then\n      sorted[#sorted + 1] = 9\n  \
    \  end\n  end\n  table.sort(sorted)\n  local result = {}\n  for i = 1, #sorted\
    \ do\n    local value = sorted[i]\n    if value == 0 then\n      result[#result\
    \ + 1] = 'zero'\n    elseif value == 1 then\n      result[#result + 1] = 'one'\n\
    \    elseif value == 2 then\n      result[#result + 1] = 'two'\n    elseif value\
    \ == 3 then\n      result[#result + 1] = 'three'\n    elseif value == 4 then\n\
    \      result[#result + 1] = 'four'\n    elseif value == 5 then\n      result[#result\
    \ + 1] = 'five'\n    elseif value == 6 then\n      result[#result + 1] = 'six'\n\
    \    elseif value == 7 then\n      result[#result + 1] = 'seven'\n    elseif value\
    \ == 8 then\n      result[#result + 1] = 'eight'\n    elseif value == 9 then\n\
    \      result[#result + 1] = 'nine'\n    end\n  end\n  return table.concat(",
  "    local split = stringx.split(numbers)\n    table.sort(split, function(a, b)\n\
    \        return tonumber(a) < tonumber(b)\n    end)\n    return table.concat(split,\
    \ ' ')\nend", "    local parts = {}\n    local sorted = {}\n    local sorted_numbers\
    \ = ''\n    local current_value = 0\n    local last_value = 0\n    local offset\
    \ = 0\n    local sep = ''", "  -- TODO: Implement me!\n  local num_split = stringx.split(numbers)\n\
    \  local num_split_mod = {}\n  for _,v in pairs(num_split) do\n    table.insert(num_split_mod,\
    \ num_to_numeral[v])\n  end\n  table.sort(num_split_mod)\n  local res = ''\n \
    \ for _,v in pairs(num_split_mod) do\n    res = res .. ' ' .. numeral_to_num[v]\n\
    \  end\n  return res\nend", "  local num_strings = numbers:split(\" \")\n  local\
    \ sorted_numbers = {}\n  for _, num in ipairs(num_strings) do\n    sorted_numbers[#sorted_numbers\
    \ + 1] = numberals[num]\n  end\n  table.sort(sorted_numbers)\n  for i, num in\
    \ ipairs(sorted_numbers) do\n    sorted_numbers[i] = wordnals[num]\n  end\n  return\
    \ table.concat(sorted_numbers, \" \")\nend", "  return table.concat(\n    misc.map(\n\
    \      tonumber,\n      misc.sort(\n        misc.map(\n          NUM_TO_WORD,\n\
    \          misc.split(numbers, '%s')\n        )\n      )\n    ),\n    ' '\n  )\n\
    end", "  local function sort_function(a, b)\n    return numbers_to_ints[a] < numbers_to_ints[b]\n\
    \  end\n  local number_list = stringx.split(numbers)\n  table.sort(number_list,\
    \ sort_function)\n  return table.concat(number_list, ' ')\nend", "  local sorted_numbers\
    \ = {}\n  local number_to_numeral = {\n    one = 1,\n    two = 2,\n    three =\
    \ 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n    eight =\
    \ 8,\n    nine = 9,\n    zero = 0\n  }\n  for numeral in numbers:gmatch('[%w]+')\
    \ do\n    table.insert(sorted_numbers, number_to_numeral[numeral])\n  end\n  table.sort(sorted_numbers)\n\
    \  local result = ''\n  for i, number in ipairs(sorted_numbers) do\n    if i ~=\
    \ 1 then\n      result = result .. ' '\n    end\n    for numeral, num in pairs(number_to_numeral)\
    \ do\n      if num == number then\n        result = result .. numeral\n      end\n\
    \    end\n  end\n  return result\nend", "  numbers = ' ' .. numbers .. ' '\n \
    \ numbers = gsub(numbers, '%s+', ' ')\n  local numbers_table = {}\n  for k, v\
    \ in gmatch(numbers, ' (%w+) ') do\n    numbers_table[#numbers_table + 1] = {\
    \ v, numeral_to_digit(v) }\n  end\n  table.sort(numbers_table, function(a, b)\
    \ return a[2] < b[2] end)\n  local numbers_out = {}\n  for _, v in ipairs(numbers_table)\
    \ do\n    numbers_out[#numbers_out + 1] = v[1]\n  end\n  return table.concat(numbers_out,\
    \ ' ')\nend", "\tlocal unsorted = {}\n\tlocal sorted = {}\n\t\n\t-- Ensure string\
    \ is clean of anything but numerals\n\tnumbers = numbers:gsub('%a', '')\n\t\n\t\
    -- Convert numberals to integers and store them in a table\n\tfor numeral in numbers:gmatch('%d')\
    \ do\n\t\ttable.insert(unsorted, tonumber(numeral))\n\tend\n\t\n\t-- Sort integers\
    \ from smallest to largest\n\ttable.sort(unsorted)\n\t\n\t-- Convert integers\
    \ to numberals and store them in a table\n\tfor i, v in ipairs(unsorted) do\n\t\
    \ttable.insert(sorted, tostring(v))\n\tend\n\t\n\t-- Convert table to string\n\
    \treturn table.concat(sorted, ' ')\nend", "    local n = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        n[#n+1] = num\n    end\n    table.sort(n, function(a, b)\n     \
    \   return tonumber(a) < tonumber(b)\n    end)\n    return table.concat(n, ' ')\n\
    end", "  local words = {}\n  local function str2num(num)\n    local lookup = {zero=0,\
    \ one=1, two=2, three=3, four=4, five=5, six=6, seven=7, eight=8, nine=9}\n  \
    \  return lookup[num]\n  end\n  for num in numbers:gmatch('%w+') do\n    table.insert(words,\
    \ {num, str2num(num)})\n  end\n  local sorted = {}\n  for i=1, #words do\n   \
    \ local low = words[1]\n    for k, v in pairs(words) do\n      if v[2] < low[2]\
    \ then\n        low = v\n      end\n    end\n    table.insert(sorted, low[1])\n\
    \    words[low[1]] = nil\n  end\n  return table.concat(sorted, ' ')\nend", " \
    \  local numlist = {}\n   for i in string.gmatch(numbers, \"%S+\") do\n      numlist[#numlist+1]\
    \ = i\n   end\n   table.sort(numlist)\n   return table.concat(numlist, \" \")\n\
    end", "  -- body\n  local nlist = {}\n  for num in numbers:gmatch(\"[%w%p]+\"\
    ) do\n    nlist[#nlist+1] = { num = num, n = tonumber(num:gsub(\"[^%d]\", \"\"\
    )) }\n  end\n  table.sort(nlist, function(a, b) return a.n < b.n end)\n  return\
    \ table.concat(nlist, \" \")\nend", "  local converted = {}\n  for num in numbers:gmatch('%a+')\
    \ do\n    converted[#converted + 1] = numbers_to_numerals[num]\n  end\n  table.sort(converted)\n\
    \  local result = {}\n  for _, num in ipairs(converted) do\n    result[#result\
    \ + 1] = numerals_to_numbers[num]\n  end\n  return table.concat(result, ' ')\n\
    end", "  local num_list = split(numbers)\n  local num_dict = {\n    zero = 0,\n\
    \    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n  \
    \  six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local list =\
    \ {}\n  for _, num in ipairs(num_list) do\n    list[#list + 1] = num_dict[num]\n\
    \  end\n  table.sort(list)\n  local res = {}\n  for _, num in ipairs(list) do\n\
    \    res[#res + 1] = words[num]\n  end\n  return concat(res, ' ')\nend", "   \
    \ -- your code here\n    local nums = {}\n    for num in numbers:gmatch(\"%S+\"\
    ) do\n        table.insert(nums, tonumber(num))\n    end\n    table.sort(nums)\n\
    \    return table.concat(nums, \" \")\nend", "    local nlist = {}\n    for i\
    \ in numbers:gmatch(\"%S+\") do\n        local key = i:lower()\n        nlist[key]\
    \ = (nlist[key] or 0) + 1\n    end\n    local sorted = {}\n    for k, v in pairs(nlist)\
    \ do\n        sorted[#sorted+1] = k\n    end\n    table.sort(sorted)\n    return\
    \ table.concat(sorted, \" \")\nend", "  assert(type(numbers) == 'string', 'input\
    \ must be a string')\n  local string_of_words = numbers:lower():gsub('%a+', '%1\
    \ '):gsub('[^%w ]', '')\n  local words = {}\n  for word in string_of_words:gmatch('%w+')\
    \ do\n    if word:match('^[%w]+$') then\n      local index = string.find(number_map,\
    \ word)\n      if index ~= nil then\n        table.insert(words, number_map:sub(index,\
    \ index))\n      end\n    end\n  end\n  table.sort(words)\n  return table.concat(words,\
    \ ' ')\nend", "  local t = {}\n  for n in numbers:gmatch('%a+') do\n    table.insert(t,\
    \ n)\n  end\n  table.sort(t)\n  return table.concat(t, ' ')\nend", "  local numeric_val\
    \ = {}\n  numeric_val['zero'] = 0\n  numeric_val['one'] = 1\n  numeric_val['two']\
    \ = 2\n  numeric_val['three'] = 3\n  numeric_val['four'] = 4\n  numeric_val['five']\
    \ = 5\n  numeric_val['six'] = 6\n  numeric_val['seven'] = 7\n  numeric_val['eight']\
    \ = 8\n  numeric_val['nine'] = 9\n  local num_list = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(num_list, numeric_val[num])\n  end\n  table.sort(num_list)\n\
    \  local sorted_numbers = {}\n  for i = 1, #num_list do\n    for k, v in pairs(numeric_val)\
    \ do\n      if num_list[i] == v then\n        table.insert(sorted_numbers, k)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, ' ')\nend",
  "  local n = {}\n  for number in numbers:gmatch('[%w ]+') do\n    table.insert(n,\
    \ number)\n  end\n  table.sort(n)\n  return table.concat(n, ' ')\nend", "  local\
    \ num_to_str = {[0] = 'zero', [1] = 'one', [2] = 'two', [3] = 'three', [4] = 'four',\
    \ [5] = 'five', [6] = 'six', [7] = 'seven', [8] = 'eight', [9] = 'nine'}\n  local\
    \ str_to_num = {['zero'] = 0, ['one'] = 1, ['two'] = 2, ['three'] = 3, ['four']\
    \ = 4, ['five'] = 5, ['six'] = 6, ['seven'] = 7, ['eight'] = 8, ['nine'] = 9}\n\
    \  local numbers_table = {}\n  local numbers_table_sorted = {}\n  local numbers_string\
    \ = ''\n  local numbers_split = {}\n  numbers_split = stringx.split(numbers)\n\
    \  for i = 1, #numbers_split do\n    numbers_table[i] = str_to_num[numbers_split[i]]\n\
    \  end\n  table.sort(numbers_table)\n  for i = 1, #numbers_table do\n    numbers_table_sorted[i]\
    \ = num_to_str[numbers_table[i]]\n  end\n  numbers_string = table.concat(numbers_table_sorted,\
    \ ' ')\n  return numbers_string\nend", "    local out = {}\n    for num in numbers:gmatch('%w+')\
    \ do\n        out[#out+1] = tonumber(num2words.no[num])\n    end\n    table.sort(out)\n\
    \    for i=1,#out do\n        out[i] = num2words.no[out[i]]\n    end\n    return\
    \ table.concat(out, ' ')\nend", "\tlocal words = stringx.split(numbers)\n\tlocal\
    \ numbers = {}\n\tfor _, word in ipairs(words) do\n\t\ttable.insert(numbers, number_string_to_number[word])\n\
    \tend\n\ttable.sort(numbers)\n\treturn table.concat(numbers, ' ')\nend", "   \
    \ local numeral_to_value = {\n        zero = 0,\n        one = 1,\n        two\
    \ = 2,\n        three = 3,\n        four = 4,\n        five = 5,\n        six\
    \ = 6,\n        seven = 7,\n        eight = 8,\n        nine = 9,\n    }\n   \
    \ local numbers_table = {}\n    for number in numbers:gmatch('%S+') do\n     \
    \   table.insert(numbers_table, number)\n    end\n    table.sort(numbers_table,\
    \ function(a, b)\n        return numeral_to_value[a] < numeral_to_value[b]\n \
    \   end)\n    return table.concat(numbers_table, ' ')\nend", "    return table.concat(numbers:split():sort(),\
    \ ' ')\nend", "  local digits = {\n    zero = 0,\n    one = 1,\n    two = 2,\n\
    \    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n\
    \    eight = 8,\n    nine = 9\n  }\n  local list = {}\n  for num in numbers:gmatch('%w+')\
    \ do\n    if digits[num] then\n      table.insert(list, digits[num])\n    end\n\
    \  end\n  table.sort(list)\n  return table.concat(list, ' ')\nend", "  local sorted\
    \ = {}\n  local words = utils.string.split(numbers, \" \")\n  for _,word in ipairs(words)\
    \ do\n    local num = tonumber(word)\n    if num ~= nil then\n      table.insert(sorted,\
    \ num)\n    end\n  end\n  table.sort(sorted)\n  local words = {}\n  for _,num\
    \ in ipairs(sorted) do\n    table.insert(words, tostring(num))\n  end\n  return\
    \ table.concat(words, \" \")\nend", "    numbers = numbers:lower()\n    local\
    \ nums = {}\n    for num in numbers:gmatch('[a-zA-Z]+') do\n        local n =\
    \ numbers_words[num]\n        if not n then\n            error(('Invalid number:\
    \ %s'):format(num))\n        end\n        table.insert(nums, n)\n    end\n   \
    \ table.sort(nums)\n    local sorted = {}\n    for _, num in ipairs(nums) do\n\
    \        table.insert(sorted, num)\n    end\n    return table.concat(sorted, '\
    \ ')\nend", "  local nums = {}\n  for num in string.gmatch(numbers, '%S+') do\n\
    \    nums[#nums + 1] = num\n  end\n  local f = function(a, b)\n    local g = {\
    \ zero = 0, one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven =\
    \ 7, eight = 8, nine = 9 }\n    return g[a] < g[b]\n  end\n  table.sort(nums,\
    \ f)\n  return table.concat(nums, ' ')\nend", "  local numtable = {}\n  local\
    \ splitnumbers = numbers:split(' ')\n  for i, number in ipairs(splitnumbers) do\n\
    \    if number == 'zero' then\n      table.insert(numtable, 0)\n    elseif number\
    \ == 'one' then\n      table.insert(numtable, 1)\n    elseif number == 'two' then\n\
    \      table.insert(numtable, 2)\n    elseif number == 'three' then\n      table.insert(numtable,\
    \ 3)\n    elseif number == 'four' then\n      table.insert(numtable, 4)\n    elseif\
    \ number == 'five' then\n      table.insert(numtable, 5)\n    elseif number ==\
    \ 'six' then\n      table.insert(numtable, 6)\n    elseif number == 'seven' then\n\
    \      table.insert(numtable, 7)\n    elseif number == 'eight' then\n      table.insert(numtable,\
    \ 8)\n    elseif number == 'nine' then\n      table.insert(numtable, 9)\n    end\n\
    \  end\n  table.sort(numtable)\n  local sorted = ''\n  for i, sortednumber in\
    \ ipairs(numtable) do\n    if sortednumber == 0 then\n      sorted = sorted ..\
    \ 'zero '\n    elseif sortednumber == 1 then\n      sorted = sorted .. 'one '\n\
    \    elseif sortednumber == 2 then\n      sorted = sorted .. 'two '\n    elseif\
    \ sortednumber == 3 then\n      sorted = sorted .. 'three '\n    elseif sortednumber\
    \ == 4 then\n      sorted = sorted .. 'four '\n    elseif sortednumber == 5 then\n\
    \      sorted = sorted .. 'five '\n    elseif sortednumber == 6 then\n      sorted\
    \ = sorted .. 'six '\n    elseif sortednumber == 7 then\n      sorted = sorted\
    \ .. 'seven '\n    elseif sortednumber == 8 then\n      sorted = sorted .. 'eight\
    \ '\n    elseif sortednumber == 9 then\n      sorted = sorted .. 'nine '\n   \
    \ end\n  end\n  return sorted:trim()\nend", "    --[[\n    Strategy:\n    1. convert\
    \ all the numbers to the appropriate values\n    2. sort the values\n    3. convert\
    \ the values back to their word form\n    --]]\n    local values = {}\n    for\
    \ num in numbers:gmatch(\"%S+\") do\n        table.insert(values, numberals[num])\n\
    \    end\n    table.sort(values)\n    local words = {}\n    for _, v in ipairs(values)\
    \ do\n        table.insert(words, values[v])\n    end\n    return table.concat(words,\
    \ \" \")\nend", "   numbers = words(numbers)\n   for i = 1, #numbers do\n    \
    \  numbers[i] = tonumber(numbers[i])\n   end\n   table.sort(numbers)\n   for i\
    \ = 1, #numbers do\n      numbers[i] = tostring(numbers[i])\n   end\n   return\
    \ concat(numbers, ' ')\nend", "    local list = {}\n    local result = {}\n  \
    \  for num in numbers:gmatch('%w+') do\n        list[#list + 1] = {\n        \
    \    word = num,\n            number = tonumber(num_dict[num])\n        }\n  \
    \  end\n    table.sort(list, function(a, b) return a.number < b.number end)\n\
    \    for i = 1, #list do\n        result[i] = list[i].word\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    local tokens = numbers:split(' ')\n  \
    \  local nums = {}\n    for i, tok in ipairs(tokens) do\n        nums[i] = tonumber(token_to_numeral[tok])\n\
    \    end\n    table.sort(nums)\n    for i, num in ipairs(nums) do\n        tokens[i]\
    \ = numeral_to_token[num]\n    end\n    return table.concat(tokens, ' ')\nend",
  "    local s = \"\"\n    for i, j in pairs(numbers:split(' ')) do\n        s = s\
    \ .. ' ' .. j\n    end\n    return s\nend", "  return 'one three five'\nend",
  "   -- assume numbers is a space-delimited string of digits from 'zero' to 'nine'\n\
    \   -- return a string of the same digits, sorted from smallest to largest\n \
    \  local t = {}\n   for i in numbers:gmatch('%w+') do\n      t[#t+1] = i\n   end\n\
    \   table.sort(t)\n   return table.concat(t, ' ')\nend", "\tlocal number_list\
    \ = {}\n\tfor number in numbers:gmatch('%w+') do\n\t\ttable.insert(number_list,\
    \ number)\n\tend\n\tlocal number_map = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo\
    \ = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive = 5,\n\t\tsix = 6,\n\t\tseven\
    \ = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\ttable.sort(number_list, function(a,\
    \ b)\n\t\treturn number_map[a] < number_map[b]\n\tend)\n\treturn table.concat(number_list,\
    \ ' ')\nend", "   local function number_of(numeral)\n      if numeral == 'zero'\
    \ then return 0\n      elseif numeral == 'one' then return 1\n      elseif numeral\
    \ == 'two' then return 2\n      elseif numeral == 'three' then return 3\n    \
    \  elseif numeral == 'four' then return 4\n      elseif numeral == 'five' then\
    \ return 5\n      elseif numeral == 'six' then return 6\n      elseif numeral\
    \ == 'seven' then return 7\n      elseif numeral == 'eight' then return 8\n  \
    \    elseif numeral == 'nine' then return 9\n      else error(\"Invalid numeral:\
    \ \" .. numeral)\n      end\n   end", "  assert(type(numbers) == 'string', \"\
    Input must be a string\")\n  local numbers_to_sort = stringx.split(numbers)\n\
    \  table.sort(numbers_to_sort, function(a, b)\n    return number_map[a] < number_map[b]\n\
    \  end)\n  return table.concat(numbers_to_sort, ' ')\nend", "  local alpha_numbers\
    \ = {\n    ['zero'] = 0,\n    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] =\
    \ 3,\n    ['four'] = 4,\n    ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] =\
    \ 7,\n    ['eight'] = 8,\n    ['nine'] = 9\n  }\n  local split_numbers = numbers:split('\
    \ ')\n  local ordered_numbers = {}\n  local sorted_numbers = {}\n  local ordered_string\
    \ = ''", "    local nums = {}\n    for num in numbers:gmatch('%S+') do\n     \
    \   local num_val = choose(num, {\n            zero = 0,\n            one = 1,\n\
    \            two = 2,\n            three = 3,\n            four = 4,\n       \
    \     five = 5,\n            six = 6,\n            seven = 7,\n            eight\
    \ = 8,\n            nine = 9,\n        })\n        table.insert(nums, num_val)\n\
    \    end\n    table.sort(nums)\n    local ans = {}\n    for _, num in ipairs(nums)\
    \ do\n        table.insert(ans, choose(num, {\n            [0] = 'zero',\n   \
    \         [1] = 'one',\n            [2] = 'two',\n            [3] = 'three',\n\
    \            [4] = 'four',\n            [5] = 'five',\n            [6] = 'six',\n\
    \            [7] = 'seven',\n            [8] = 'eight',\n            [9] = 'nine',\n\
    \        }))\n    end\n    return table.concat(ans, ' ')\nend", "    -- print(\"\
    sort_numbers\")\n    local sorted = {}\n    for _, number in ipairs(numbers:split(\"\
    \ \")) do\n        -- print(\"\", number)\n        table.insert(sorted, string_to_number(number))\n\
    \    end\n    table.sort(sorted)\n    return table.concat(sorted, \" \")\nend",
  "    local list = {}\n    for num in numbers:gmatch('%S+') do\n        list[#list\
    \ + 1] = num\n    end\n    table.sort(list, function(a, b)\n        return number_word_to_number[a]\
    \ < number_word_to_number[b]\n    end)\n    return table.concat(list, ' ')\nend",
  "  local num_to_val = {\n    ['zero'] = 0,\n    ['one'] = 1,\n    ['two'] = 2,\n\
    \    ['three'] = 3,\n    ['four'] = 4,\n    ['five'] = 5,\n    ['six'] = 6,\n\
    \    ['seven'] = 7,\n    ['eight'] = 8,\n    ['nine'] = 9,\n  }\n  local nums\
    \ = {}\n  for _, num in ipairs(numbers:split()) do\n    table.insert(nums, num_to_val[num])\n\
    \  end\n  table.sort(nums)\n  local num_to_str = {\n    [0] = 'zero',\n    [1]\
    \ = 'one',\n    [2] = 'two',\n    [3] = 'three',\n    [4] = 'four',\n    [5] =\
    \ 'five',\n    [6] = 'six',\n    [7] = 'seven',\n    [8] = 'eight',\n    [9] =\
    \ 'nine',\n  }\n  local strs = {}\n  for _, num in ipairs(nums) do\n    table.insert(strs,\
    \ num_to_str[num])\n  end\n  return table.concat(strs, ' ')\nend", "    -- if\
    \ no input, return nil\n    if not numbers then return nil end\n    -- split up\
    \ each number into an array element\n    local numbers = split(numbers, ' ')\n\
    \    -- sort the array numerically\n    table.sort(numbers, function(a, b) return\
    \ a < b end)\n    -- re-join the array into a string, separating each element\
    \ with a space\n    return concat(numbers, ' ')\nend", "    -- split the input\
    \ string into a table using space as the delimiter\n    local num_table = stringx.split(numbers)\n\
    \    -- use table.sort to sort the table in ascending order\n    table.sort(num_table)\n\
    \    -- use table.concat to concatenate the string using a space character\n \
    \   return table.concat(num_table, ' ')\nend", "\treturn table.concat(string_split(numbers),\
    \ ' ')\nend", "    local words = {}\n    for word in numbers:gmatch('%S+') do\
    \ table.insert(words, word) end\n    table.sort(words, function(a, b) return tonumber(a)\
    \ < tonumber(b) end)\n    return table.concat(words, ' ')\nend", "    local num_map\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local split_input = numbers:split('\
    \ ')\n    local converted_input = {}\n    for i, num in ipairs(split_input) do\n\
    \        converted_input[i] = num_map[num]\n    end\n    table.sort(converted_input)\n\
    \    local output = {}\n    for i, num in ipairs(converted_input) do\n       \
    \ for k, v in pairs(num_map) do\n            if v == num then\n              \
    \  output[i] = k\n            end\n        end\n    end\n    return table.concat(output,\
    \ ' ')\nend", "  numbers = ' ' .. numbers\n  for num in string.gmatch(numbers,\
    \ ' ([zero|one|two|three|four|five|six|seven|eight|nine]+)') do\n    numbers =\
    \ string.gsub(numbers, num, 1)\n  end\n  numbers = string.gsub(numbers, '1', 'one')\n\
    \  numbers = string.gsub(numbers, '2', 'two')\n  numbers = string.gsub(numbers,\
    \ '3', 'three')\n  numbers = string.gsub(numbers, '4', 'four')\n  numbers = string.gsub(numbers,\
    \ '5', 'five')\n  numbers = string.gsub(numbers, '6', 'six')\n  numbers = string.gsub(numbers,\
    \ '7', 'seven')\n  numbers = string.gsub(numbers, '8', 'eight')\n  numbers = string.gsub(numbers,\
    \ '9', 'nine')\n  return numbers\nend", "    local num_table = {}\n    numbers\
    \ = stringx.split(numbers)\n    for i = 1, #numbers do\n        num_table[i] =\
    \ _M.numbers_to_digits[numbers[i]]\n    end\n    table.sort(num_table)\n    for\
    \ i = 1, #num_table do\n        num_table[i] = _M.numbers_to_word[num_table[i]]\n\
    \    end\n    return table.concat(num_table, ' ')\nend", "    -- TODO: Implement.\n\
    \    return \"Not implemented\"\nend", "    local numbers_table = {}\n    numbers:gsub(\"\
    %S+\", function(w) table.insert(numbers_table, w) end)\n    table.sort(numbers_table)\n\
    \    return table.concat(numbers_table, \" \")\nend", "    numbers = numbers:lower()\n\
    \    if #numbers == 0 then\n        return numbers\n    end\n    local z = numbers:split(\"\
    \ \")\n    table.sort(z, function(a, b)\n        return numbers_to_ints[a] < numbers_to_ints[b]\n\
    \    end)\n    return table.concat(z, \" \")\nend", "    local numbers_array =\
    \ {}\n    for number in numbers:gmatch('%S+') do\n        table.insert(numbers_array,\
    \ { word = number, number = numeral_to_number(number) })\n    end\n    table.sort(numbers_array,\
    \ function(a, b) return a.number < b.number end)\n    local result = ''\n    for\
    \ i, number in ipairs(numbers_array) do\n        if i > 1 then\n            result\
    \ = result .. ' '\n        end\n        result = result .. number.word\n    end\n\
    \    return result\nend", "    return table.concat(list.sort(numbers:words()),\
    \ ' ')\nend", "    local numeral_numbers = {\n        zero = 0,\n        one =\
    \ 1,\n        two = 2,\n        three = 3,\n        four = 4,\n        five =\
    \ 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n        nine =\
    \ 9\n    }\n    local numbers_list = {}\n    for token in string.gmatch(numbers,\
    \ '%S+') do\n        table.insert(numbers_list, numeral_numbers[token])\n    end\n\
    \    table.sort(numbers_list)\n    local output = {}\n    for i, number in ipairs(numbers_list)\
    \ do\n        local numeral = 'zero'\n        for numeral_number, number_number\
    \ in pairs(numeral_numbers) do\n            if number_number == number then\n\
    \                numeral = numeral_number\n                break\n           \
    \ end\n        end\n        table.insert(output, numeral)\n    end\n    return\
    \ table.concat(output, ' ')\nend", "  local convert = {\n    zero = 0,\n    one\
    \ = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six =\
    \ 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local result = {}\n\
    \  for num in numbers:gmatch('%S+') do\n    result[#result + 1] = convert[num]\n\
    \  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i] = tostring(result[i])\n\
    \  end\n  return table.concat(result, ' ')\nend", "\tlocal nums_table = {}\n\t\
    for num in numbers:gmatch(\"%S+\") do\n\t\tlocal num_string = nil\n\t\tfor index\
    \ = 1, 10 do\n\t\t\tif num == string.lower(num_table[index]) then\n\t\t\t\tnum_string\
    \ = num_table[index]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif num_string then\n\
    \t\t\tnums_table[#nums_table + 1] = num_string\n\t\tend\n\tend\n\ttable.sort(nums_table)\n\
    \treturn table.concat(nums_table, \" \")\nend", "    -- Returns a table of the\
    \ numerical form of each string in order of numeric value\n    -- >>> sort_numbers('three\
    \ one five')\n    -- {'one', 'three', 'five'}\n    local number_table = {}\n \
    \   for numeral in string.gmatch(numbers, '%a+') do\n        local number = numeral_to_number(numeral)\n\
    \        table.insert(number_table, numeral)\n    end\n    table.sort(number_table,\
    \ function(a, b) return numeral_to_number(a) < numeral_to_number(b) end)\n   \
    \ return table.concat(number_table, ' ')\nend", "    local number_map = {\n  \
    \      ['zero'] = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n        ['three']\
    \ = 3,\n        ['four'] = 4,\n        ['five'] = 5,\n        ['six'] = 6,\n \
    \       ['seven'] = 7,\n        ['eight'] = 8,\n        ['nine'] = 9,\n    }\n\
    \    local nums = numbers:split(' ')\n    table.sort(nums, function(a, b)\n  \
    \      return number_map[a] < number_map[b]\n    end)\n    return table.concat(nums,\
    \ ' ')\nend", "    local numeral_sort = {\n        zero = 0,\n        one = 1,\n\
    \        two = 2,\n        three = 3,\n        four = 4,\n        five = 5,\n\
    \        six = 6,\n        seven = 7,\n        eight = 8,\n        nine = 9\n\
    \    }\n    numbers = ' ' .. numbers .. ' '\n    local sorted = {}\n    for word\
    \ in numbers:gmatch('(%S+)') do\n        table.insert(sorted, word)\n    end\n\
    \    table.sort(sorted, function(a, b)\n        return numeral_sort[a] < numeral_sort[b]\n\
    \    end)\n    local result = ''\n    for i = 1, #sorted do\n        result =\
    \ result .. sorted[i] .. ' '\n    end\n    return result:sub(1, #result - 1)\n\
    end", "\t-- use a table to put the numbers in, sort them, and convert back to\
    \ a string\n\tlocal numbers = numbers:split(' ')\n\ttable.sort(numbers)\n\treturn\
    \ table.concat(numbers, ' ')\nend", "    local n = {}\n    for w in numbers:gmatch('%S+')\
    \ do\n        n[#n+1] = w\n    end\n    table.sort(n, function(a, b)\n       \
    \ local p = {\n            ['zero']=0, ['one']=1, ['two']=2, ['three']=3, ['four']=4,\n\
    \            ['five']=5, ['six']=6, ['seven']=7, ['eight']=8, ['nine']=9\n   \
    \     }\n        return p[a] < p[b]\n    end)\n    return table.concat(n, ' ')\n\
    end", "  local tab = {}\n  for number in numbers:gmatch('%S+') do\n    table.insert(tab,\
    \ number)\n  end\n  table.sort(tab)\n  local new_tab = {}\n  for _, number in\
    \ ipairs(tab) do\n    table.insert(new_tab, numbers_to_digits[number])\n  end\n\
    \  return table.concat(new_tab, ' ')\nend", "    local words = split(numbers)\n\
    \    local word_to_number = {\n        zero = 0,\n        one = 1,\n        two\
    \ = 2,\n        three = 3,\n        four = 4,\n        five = 5,\n        six\
    \ = 6,\n        seven = 7,\n        eight = 8,\n        nine = 9,\n    }\n   \
    \ local numbers = {}\n    for _, word in ipairs(words) do\n        assert(word_to_number[word]\
    \ ~= nil, 'invalid number')\n        table.insert(numbers, word_to_number[word])\n\
    \    end\n    table.sort(numbers)\n    local result = {}\n    for _, number in\
    \ ipairs(numbers) do\n        for word, number_ in pairs(word_to_number) do\n\
    \            if number == number_ then\n                table.insert(result, word)\n\
    \                break\n            end\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend", "  local sorted = numbers:split(' ')\n  for i = 1, #sorted do\n\
    \    sorted[i] = tonumber(sorted[i])\n  end\n  table.sort(sorted)\n  for i = 1,\
    \ #sorted do\n    sorted[i] = tostring(sorted[i])\n  end\n  return table.concat(sorted,\
    \ ' ')\nend", "    local list = split(numbers)\n    table.sort(list, function(a,\
    \ b) return a < b end)\n    return concat(list, ' ')\nend", "  if numbers:match(\"\
    [zero one two three four five six seven eight nine]+\") == nil then\n    return\
    \ nil\n  end\n  local numbers_table = {}\n  for word in numbers:gmatch(\"%S+\"\
    ) do\n    table.insert(numbers_table, number_to_numeral[word])\n  end\n  table.sort(numbers_table)\n\
    \  return table.concat(numbers_table, \" \")\nend", "  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for _, numeral in ipairs(numbers:split(' ')) do\n    nums[#nums\
    \ + 1] = numeral_map[numeral]\n  end\n  table.sort(nums)\n  for i, num in ipairs(nums)\
    \ do\n    for numeral, number in pairs(numeral_map) do\n      if number == num\
    \ then\n        nums[i] = numeral\n      end\n    end\n  end\n  return table.concat(nums,\
    \ ' ')\nend", "    -- convert string to table using space character ' ' as separator\n\
    \    numbers = numbers:split(' ')\n    -- convert words to numbers, while preserving\
    \ order of numbers.\n    for i, number in ipairs(numbers) do\n        -- 'zero'\
    \ = 0, 'one' = 1, 'two' = 2, 'three' = 3, ... 'nine' = 9\n        numbers[i] =\
    \ (number:gsub('nine', '8'):gsub('eight', '7'):gsub('seven', '6'):gsub('six',\
    \ '5'):gsub('five', '4'):gsub('four', '3'):gsub('three', '2'):gsub('two', '1'):gsub('one',\
    \ '0'):gsub('zero', '-1')) + 1\n    end\n    -- sort numbers\n    table.sort(numbers)\n\
    \    -- convert numbers to words\n    for i, number in ipairs(numbers) do\n  \
    \      numbers[i] = ('zero one two three four five six seven eight nine'):split('\
    \ ')[number]\n    end\n    -- return word numbers as a space-delimited string\n\
    \    return table.concat(numbers, ' ')\nend", "  local numeral_to_number = {\n\
    \    ['zero'] = 0,\n    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n \
    \   ['four'] = 4,\n    ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n \
    \   ['eight'] = 8,\n    ['nine'] = 9,\n  }\n  local list = {}\n  for number in\
    \ numbers:gmatch('%w+') do\n    list[#list + 1] = numeral_to_number[number]\n\
    \  end\n  table.sort(list)\n  local result = {}\n  for i = 1, #list do\n    result[i]\
    \ = string.format('%d', list[i])\n  end\n  return table.concat(result, ' ')\n\
    end", "    local function get_numeral(str)\n        local numeral = numeral_to_num[str]\n\
    \        if numeral == nil then\n            error('invalid input')\n        end\n\
    \        return numeral\n    end", "    local numeral_table = string.split(numbers,\
    \ ' ')\n    local numbers_table = {}\n    for i,v in ipairs(numeral_table) do\n\
    \        numbers_table[i] = num2numeral[v]\n    end\n    local res = ''\n    table.sort(numbers_table)\n\
    \    for i,v in ipairs(numbers_table) do\n        res = res .. ' ' .. numeral2num[v]\n\
    \    end\n    return string.trim(res)\nend", "    local sort_table = {}\n    numbers\
    \ = stringx.split(numbers)\n    for i, v in ipairs(numbers) do\n        sort_table[#sort_table\
    \ + 1] = {index = i, value = stringx.strip(v)}\n    end\n    table.sort(sort_table,\
    \ function(a, b)\n        if a.value == b.value then\n            return a.index\
    \ < b.index\n        else\n            return a.value < b.value\n        end\n\
    \    end)\n    local out = ''\n    for i, v in ipairs(sort_table) do\n       \
    \ out = out .. v.value .. ' '\n    end\n    return stringx.strip(out)\nend", " \
    \   local num_arr = numbers:split(' ')\n    table.sort(num_arr, function(a, b)\n\
    \        return NUMS[a] < NUMS[b]\n    end)\n    return table.concat(num_arr,\
    \ ' ')\nend", "\tnumbers = numbers:gsub(\"%a+\", function(w)\n\t\treturn string.format(\"\
    %02d\", numb", "    local _numbers = {}\n    for _, number in numbers:gmatch('%w+')\
    \ do\n        _numbers[#_numbers + 1] = number\n    end\n    table.sort(_numbers,\
    \ function(a, b)\n        return n2i[a] < n2i[b]\n    end)\n    return table.concat(_numbers,\
    \ ' ')\nend", "    local arr = {}\n    local sorted = {}\n    local sorted_string\
    \ = ''\n    local numbers_to_num = {\n        ['zero'] = 0,\n        ['one'] =\
    \ 1,\n        ['two'] = 2,\n        ['three'] = 3,\n        ['four'] = 4,\n  \
    \      ['five'] = 5,\n        ['six'] = 6,\n        ['seven'] = 7,\n        ['eight']\
    \ = 8,\n        ['nine'] = 9\n    }\n    for w in numbers:gmatch('%S+') do\n \
    \       local n = numbers_to_num[w]\n        if n then\n            table.insert(arr,\
    \ n)\n        end\n    end\n    table.sort(arr)\n    for _, v in ipairs(arr) do\n\
    \        table.insert(sorted, v)\n    end\n    for i, v in ipairs(sorted) do\n\
    \        if i > 1 then\n            sorted_string = sorted_string .. ' '\n   \
    \     end\n        local num = sorted[i]\n        for k, n in pairs(numbers_to_num)\
    \ do\n            if n == num then\n                sorted_string = sorted_string\
    \ .. k\n            end\n        end\n    end\n    return sorted_string\nend",
  "    local numeral_to_num = { zero = 0, one = 1, two = 2, three = 3, four = 4, five\
    \ = 5, six = 6, seven = 7, eight = 8, nine = 9 }\n    local numbers_sorted = {}\n\
    \    for word in numbers:gmatch('[^%s]+') do\n        table.insert(numbers_sorted,\
    \ numeral_to_num[word])\n    end\n    table.sort(numbers_sorted)\n    local numbers_sorted_str\
    \ = ''\n    for i = 1, #numbers_sorted do\n        numbers_sorted_str = numbers_sorted_str\
    \ .. ' ' .. tostring(numbers_sorted[i])\n    end\n    return numbers_sorted_str:gsub('^%s+',\
    \ '')\nend", "\tlocal nums = {\n\t\t'zero',\n\t\t'one',\n\t\t'two',\n\t\t'three',\n\
    \t\t'four',\n\t\t'five',\n\t\t'six',\n\t\t'seven',\n\t\t'eight',\n\t\t'nine'\n\
    \t}\n\tlocal number = {}\n\tlocal num = string.gmatch(numbers, \"%S+\")\n\tfor\
    \ i in num do\n\t\ttable.insert(number, nums[i])\n\tend\n\ttable.sort(number)\n\
    \treturn table.concat(number, ' ')\nend", "  -- string.split(s, pattern[, plain])\n\
    \  -- Split a string using a pattern.\n  -- The optional boolean plain is passed\
    \ to string.find as its plain argument. \n  -- The default value is false. \n\
    \  -- >>> string.split(\"hello world\", \" \")\n  -- table: 0x017450e0\n  -- >>>\
    \ table.concat(string.split(\"hello world\", \" \"))\n  -- hello world\n  -- >>>\
    \ table.concat(string.split(\"hello world\", \" \", true))\n  -- hello world\n\
    \  local number_sequence = string.split(numbers, ' ')\n  local sorted_numbers\
    \ = {}\n  local number_dict = {one = 1, two = 2, three = 3, four = 4, five = 5,\
    \ six = 6, seven = 7, eight = 8, nine = 9, zero = 0}\n  for _, number in ipairs(number_sequence)\
    \ do\n    sorted_numbers[#sorted_numbers + 1] = number_dict[number]\n  end\n \
    \ table.sort(sorted_numbers)\n  for i, number in ipairs(sorted_numbers) do\n \
    \   for name, value in pairs(number_dict) do\n      if value == number then\n\
    \        sorted_numbers[i] = name\n      end\n    end\n  end\n  return table.concat(sorted_numbers,\
    \ ' ')\nend", "    local f = {\n        zero = 0,\n        one = 1,\n        two\
    \ = 2,\n        three = 3,\n        four = 4,\n        five = 5,\n        six\
    \ = 6,\n        seven = 7,\n        eight = 8,\n        nine = 9,\n    }\n   \
    \ local a = {}\n    for n in numbers:gmatch(\"%S+\") do\n        table.insert(a,\
    \ f[n])\n    end\n    table.sort(a)\n    local s = \"\"\n    for _,n in ipairs(a)\
    \ do\n        for k,v in pairs(f) do\n            if v == n then\n           \
    \     s = s .. k .. \" \"\n            end\n        end\n    end\n    return s:sub(1,\
    \ -2)\nend", "    -- Convert choice string to actual numbers\n    local nums =\
    \ {}\n    for numeral in numbers:gmatch('%S+') do\n        table.insert(nums,\
    \ cnum[numeral])\n    end", "    local words = {}\n    local lookup = {\n    \
    \    ['zero'] = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n        ['three']\
    \ = 3,\n        ['four'] = 4,\n        ['five'] = 5,\n        ['six'] = 6,\n \
    \       ['seven'] = 7,\n        ['eight'] = 8,\n        ['nine'] = 9,\n    }\n\
    \    local keys = {}\n    for k in pairs(lookup) do\n        table.insert(keys,\
    \ k)\n    end\n    local table = {}\n    local input = numbers\n    while input\
    \ ~= '' do\n        input = input:gsub('(.-) ', function(s)\n            table.insert(words,\
    \ s)\n            return ''\n        end)\n    end\n    input = numbers\n    while\
    \ input ~= '' do\n        input = input:gsub('(.-) ', function(s)\n          \
    \  table.insert(table, lookup[s])\n            return ''\n        end)\n    end\n\
    \    table.sort(table)\n    local output = {}\n    for _, v in ipairs(table) do\n\
    \        table.insert(output, words[1])\n        table.remove(words, 1)\n    end\n\
    \    return table.concat(output, ' ')\nend", "  numbers = split(numbers)\n  table.sort(numbers,\
    \ function(a, b)\n    return number_to_int(a) < number_to_int(b)\n  end)\n  return\
    \ table.concat(numbers, ' ')\nend", "  local words = {}\n  for word in numbers:gmatch('%w+')\
    \ do\n    table.insert(words, word)\n  end\n  table.sort(words, function(a, b)\n\
    \    return numbers_converter[a] < numbers_converter[b]\n  end)\n  return table.concat(words,\
    \ ' ')\nend", "  return\nend", "  numbers = numbers:gsub('%s', '')\n  numbers\
    \ = numbers:gsub('zero', '0')\n  numbers = numbers:gsub('one', '1')\n  numbers\
    \ = numbers:gsub('two', '2')\n  numbers = numbers:gsub('three', '3')\n  numbers\
    \ = numbers:gsub('four', '4')\n  numbers = numbers:gsub('five', '5')\n  numbers\
    \ = numbers:gsub('six', '6')\n  numbers = numbers:gsub('seven', '7')\n  numbers\
    \ = numbers:gsub('eight', '8')\n  numbers = numbers:gsub('nine', '9')\n  numbers\
    \ = numbers:gsub('0123456789', function(i) return tostring(tonumber(i)) end)\n\
    \  local sorted = {}\n  for n in numbers:gmatch('%d') do\n    table.insert(sorted,\
    \ n)\n  end\n  table.sort(sorted)\n  for i, n in ipairs(sorted) do\n    sorted[i]\
    \ = tostring(tonumber(n))\n  end\n  numbers = table.concat(sorted, ' ')\n  numbers\
    \ = numbers:gsub('0', 'zero')\n  numbers = numbers:gsub('1', 'one')\n  numbers\
    \ = numbers:gsub('2', 'two')\n  numbers = numbers:gsub('3', 'three')\n  numbers\
    \ = numbers:gsub('4', 'four')\n  numbers = numbers:gsub('5', 'five')\n  numbers\
    \ = numbers:gsub('6', 'six')\n  numbers = numbers:gsub('7', 'seven')\n  numbers\
    \ = numbers:gsub('8', 'eight')\n  numbers = numbers:gsub('9', 'nine')\n  return\
    \ numbers\nend", "\tlocal words = string.split(numbers, ' ')\n\ttable.sort(words,\
    \ function(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend)\n\treturn table.concat(words,\
    \ ' ')\nend", "\tlocal regex = '(' .. NUMERALS .. ')'\n\tlocal ordered = {}\n\t\
    numbers:gsub(regex, function(number)\n\t\ttable.insert(ordered, number)\n\tend)\n\
    \ttable.sort(ordered, function(a, b)\n\t\treturn NUMBERS[a] < NUMBERS[b]\n\tend)\n\
    \treturn table.concat(ordered, ' ')\nend", "  -- TODO: Create a table of numbers,\
    \ sort the table and return a string\n  -- with the numbers separated by spaces.\n\
    \  -- i.e. return \"one two three\"\n  local list = { }\n  local sorted = { }\n\
    \  local string = \"\"\n  for num in numbers:gmatch(\"%w+\") do\n    if num ~=\
    \ \"and\" then\n      table.insert(list, num)\n    end\n  end\n  table.sort(list)\n\
    \  for i = 1, #list do\n    string = string .. list[i] .. \" \"\n  end\n  return\
    \ string\nend", "    local numbers_tab = {}\n    local numbers_tab_str = {}\n\
    \    local numbers_split = {}\n    local numbers_sort = {}\n    local i = 1\n\
    \    local j = 1\n    local k = 1\n    local number_case = {'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n    local number_num\
    \ = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    local numbers_split = split(numbers, '\
    \ ')\n    -- if the word is a number, put the corresponding numeral into a table\n\
    \    for i, word in ipairs(numbers_split) do\n        if string.match(word, '^%d+$')\
    \ then\n            numbers_tab[i] = word\n        else\n            for k, num\
    \ in ipairs(number_case) do\n                if word == num then\n           \
    \         numbers_tab[i] = number_num[k]\n                end\n            end\n\
    \        end\n    end\n    -- sort the numeral table\n    table.sort(numbers_tab)\n\
    \    -- convert the numeral table to a string table\n    for i, num in ipairs(numbers_tab)\
    \ do\n        numbers_tab_str[i] = tostring(num)\n    end\n    -- join the string\
    \ table into a string\n    numbers_sort = table.concat(numbers_tab_str, ' ')\n\
    \    return numbers_sort\nend", "\tlocal t = {}\n\tfor number in string.gmatch(numbers,\
    \ \"%S+\") do\n\t\ttable.insert(t, tonumber(number) or number)\n\tend\n\ttable.sort(t)\n\
    \tlocal result = \"\"\n\tfor i = 1, #t do\n\t\tresult = result .. \" \" .. t[i]\n\
    \tend\n\treturn result:sub(2)\nend", "  return table.concat(table.sort(split(numbers,\
    \ ' ')), ' ')\nend", "  local stripped = strip_punctuation(numbers)\n  local number_list\
    \ = split(stripped, ' ')\n  table.sort(number_list)\n  return table.concat(number_list,\
    \ ' ')\nend", "    -- get a list of numbers we want to sort\n    local sorted_numbers\
    \ = {}\n    for num in numbers:gmatch('[%w]+') do\n        sorted_numbers[#sorted_numbers\
    \ + 1] = num\n    end", "  return table.concat(table.sort(strings.split(numbers),\
    \ _.lt), ' ')\nend", "  return nil\nend", "\tlocal f = function(s)\n\t\treturn\
    \ text.split(s, ' ')\n\tend\n\tlocal numbers_table = f(numbers)\n\t\n\tlocal sort_table\
    \ = {'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n\
    \tlocal sort_number = function(a, b)\n\t\treturn (a == b) or (sort_table[a] <\
    \ sort_table[b])\n\tend\n\t\n\ttable.sort(numbers_table, sort_number)\n\treturn\
    \ table.concat(numbers_table, ' ')\nend", "    local to_numbers = {\n        ['zero']\
    \ = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n        ['three'] = 3,\n \
    \       ['four'] = 4,\n        ['five'] = 5,\n        ['six'] = 6,\n        ['seven']\
    \ = 7,\n        ['eight'] = 8,\n        ['nine'] = 9,\n    }\n    local from_numbers\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine',\n\
    \    }\n    local ns = {}\n    for n in numbers:gmatch('%w+') do\n        local\
    \ i = to_numbers[n]\n        if i then\n            table.insert(ns, i)\n    \
    \    end\n    end\n    table.sort(ns)\n    return table.concat(ns, ' ')\nend",
  "  return table.concat(numberals.sort(split(numbers)), ' ')\nend", "    return table.concat(numbers:split():sort(function(a,\
    \ b)\n        return tonumber(dictionary[a]) < tonumber(dictionary[b])\n    end),\
    \ ' ')\nend", "  if numbers == nil then\n    return nil\n  end\n  numbers = numbers:lower()\n\
    \  local number_strings = split(numbers, ' ')\n  local numbers = {}\n  for i =\
    \ 1, #number_strings do\n    numbers[i] = number_map[number_strings[i]]\n  end\n\
    \  local n = #numbers\n  while n > 1 do\n    local newn = 0\n    for i = 2, n\
    \ do\n      if numbers[i - 1] > numbers[i] then\n        numbers[i - 1], numbers[i]\
    \ = numbers[i], numbers[i - 1]\n        newn = i\n      end\n    end\n    n =\
    \ newn\n  end\n  local number_strings = {}\n  for i = 1, #numbers do\n    number_strings[i]\
    \ = tostring(numbers[i])\n  end\n  return table.concat(number_strings, ' ')\n\
    end", "    local order = {'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine'}\n    numbers = string.lower(numbers)\n    numbers\
    \ = numbers:gsub('%.', '')\n    numbers = numbers:gsub(' and ', ' ')\n    numbers\
    \ = split(numbers, ' ')\n    table.sort(numbers, function(a, b)\n        return\
    \ order[a] < order[b]\n    end)\n    numbers = table.concat(numbers, ' ')\n  \
    \  return numbers\nend", "    local sorted = {}\n    for number in numbers:gmatch('%w+')\
    \ do\n        local num = tostring(NUMBERAL_MAP[number])\n        table.insert(sorted,\
    \ num)\n    end\n    table.sort(sorted)\n    return table.concat(sorted, ' ')\n\
    end", "\treturn table.concat(table.sort(numbers:split(\" \")), \" \")\nend", " \
    \   local numbers_table = split(numbers, \" \")\n    local function sort_func(a,\
    \ b)\n        local number_mapping = {\n            zero = 0,\n            one\
    \ = 1,\n            two = 2,\n            three = 3,\n            four = 4,\n\
    \            five = 5,\n            six = 6,\n            seven = 7,\n       \
    \     eight = 8,\n            nine = 9\n        }\n        return number_mapping[a]\
    \ < number_mapping[b]\n    end\n    table.sort(numbers_table, sort_func)\n   \
    \ return concat(numbers_table, \" \")\nend", "\tnumbers = numbers:gsub('%s+',\
    \ ' ')", "  -- is there an easier way to do this?\n  local words = {}\n  for word\
    \ in string.gmatch(numbers, '%a+') do\n    table.insert(words, word)\n  end\n\
    \  -- sort the words table\n  table.sort(words)\n  -- reconstruct the numbers\
    \ string\n  local sorted_numbers = \"\"\n  for _, word in ipairs(words) do\n \
    \   sorted_numbers = sorted_numbers .. word .. \" \"\n  end\n  -- remove the trailing\
    \ space and return the string\n  return string.sub(sorted_numbers, 1, -2)\nend",
  "    local nums = {}\n    for num in string.gmatch(numbers, \"[^%s]+\") do\n   \
    \     table.insert(nums, num)\n    end\n    table.sort(nums)\n    return table.concat(nums,\
    \ \" \")\nend", "  numbers = numbers:gsub(\" \", \",\")\n  local list = {}\n \
    \ for num in numbers:gmatch(\"%d+\") do\n    list[#list+1] = tonumber(num)\n \
    \ end\n  table.sort(list)\n  local str = \"\"\n  for _, n in ipairs(list) do\n\
    \    str = str .. tostring(n) .. \" \"\n  end\n  return str:gsub(\" *$\", \"\"\
    )\nend", "    local split = {}\n    for number in numbers:gmatch('%S+') do\n \
    \       split[#split + 1] = number\n    end\n    table.sort(split)\n    return\
    \ table.concat(split, ' ')\nend", "  local order = {zero = 0, one = 1, two = 2,\
    \ three = 3, four = 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9}\n  local\
    \ out = {}\n  for i in string.gmatch(numbers, \"%S+\") do\n    table.insert(out,\
    \ order[i])\n  end\n  table.sort(out)\n  local out = {}\n  for i = 1,#out do\n\
    \    table.insert(out, order[i])\n  end\n  return table.concat(out, \" \")\nend",
  "    local num = {}\n    local sorted = ''\n    numbers = stringx.split(numbers)\n\
    \    for i = 1, #numbers do\n        num[i] = numbers[i]\n    end\n    table.sort(num)\n\
    \    for i = 1, #num do\n        sorted = sorted .. num[i] .. ' '\n    end\n \
    \   return sorted\nend", "    local order = {'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine'}\n    local to_sort = {}\n    for num\
    \ in numbers:gmatch('%a+') do\n        table.insert(to_sort, num)\n    end\n \
    \   table.sort(to_sort, function(num1, num2)\n        return order[num1] < order[num2]\n\
    \    end)\n    return table.concat(to_sort, ' ')\nend", "\tif not numbers then\
    \ return nil end\n\tlocal num = {}\n\tfor w in numbers:gmatch(\"%w+\") do\n\t\t\
    table.insert(num, w)\n\tend\n\ttable.sort(num)\n\treturn table.concat(num, \"\
    \ \")\nend", "  numbers = stringx.split(numbers)\n  local map = {['zero'] = 0,\
    \ ['one'] = 1, ['two'] = 2, ['three'] = 3, ['four'] = 4, ['five'] = 5, ['six']\
    \ = 6, ['seven'] = 7, ['eight'] = 8, ['nine'] = 9}\n  local convert = {}\n  for\
    \ i = 1, #numbers do\n    local num = map[numbers[i]]\n    if num == nil then\n\
    \      print('Error: invalid input')\n      return nil\n    end\n    convert[i]\
    \ = num\n  end\n  table.sort(convert)\n  local result = {}\n  for i = 1, #convert\
    \ do\n    local num = convert[i]\n    for k, v in pairs(map) do\n      if v ==\
    \ num then\n        result[i] = k\n      end\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend", "    numbers = numbers:gsub('\\t', ' ')\n    local tokens = {}\n\
    \    for word in numbers:gmatch('%w+') do\n        table.insert(tokens, word)\n\
    \    end\n    table.sort(tokens, function(a, b)\n        local number_a = numbers_map[a]\n\
    \        local number_b = numbers_map[b]\n        if not number_a then return\
    \ false end\n        if not number_b then return true end\n        return number_a\
    \ < number_b\n    end)\n    return table.concat(tokens, ' ')\nend", "  \n  if\
    \ not numbers then\n    return nil\n  end\n  \n  local number_table = {}\n  local\
    \ num_map = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n   \
    \ four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n   \
    \ nine = 9\n  }\n  \n  for number in numbers:gmatch(\"%w+\") do\n    table.insert(number_table,\
    \ num_map[number])\n  end\n  \n  table.sort(number_table)\n  \n  local sorted_numbers\
    \ = \"\"\n  for _, number in ipairs(number_table) do\n    for k, v in pairs(num_map)\
    \ do\n      if v == number then\n        sorted_numbers = sorted_numbers .. k\
    \ .. \" \"\n      end\n    end\n  end\n  \n  sorted_numbers = sorted_numbers:sub(1,\
    \ sorted_numbers:len() - 1)\n  \n  return sorted_numbers\nend", "   local num_table\
    \ = {}\n   local ordered_num_table = {}\n   local output = ''\n   -- store each\
    \ number and it's order number in a table\n   for number in numbers:gmatch('%S+')\
    \ do\n      table.insert(num_table, {order = number_order[number], number = number})\n\
    \   end\n   -- sort by the order number\n   table.sort(num_table, function(a,\
    \ b) return a.order < b.order end)\n   -- create ordered output\n   for _,value\
    \ in ipairs(num_table) do\n      table.insert(ordered_num_table, value.number)\n\
    \   end\n   output = table.concat(ordered_num_table, ' ')\n   return output\n\
    end", "   local words_to_numbers = {zero = 0, one = 1, two = 2, three = 3, four\
    \ = 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9}\n   local numbers_to_words\
    \ = {[0] = 'zero', [1] = 'one', [2] = 'two', [3] = 'three', [4] = 'four', [5]\
    \ = 'five', [6] = 'six', [7] = 'seven', [8] = 'eight', [9] = 'nine'}\n   numbers\
    \ = stringx.split(numbers)\n   local numbers_int = {}\n   for i = 1, #numbers\
    \ do\n      numbers_int[i] = words_to_numbers[numbers[i]]\n   end\n   local _,\
    \ idx = torch.sort(torch.Tensor(numbers_int))\n   local sorted_numbers = {}\n\
    \   for i = 1, #numbers do\n      sorted_numbers[i] = numbers_to_words[numbers_int[idx[i]]]\n\
    \   end\n   return table.concat(sorted_numbers, ' ')\nend", "\tnumbers = numbers:gsub('five',\
    \ '5')\n\tnumbers = numbers:gsub('eight', '8')\n\tnumbers = numbers:gsub('four',\
    \ '4')\n\tnumbers = numbers:gsub('nine', '9')\n\tnumbers = numbers:gsub('one',\
    \ '1')\n\tnumbers = numbers:gsub('seven', '7')\n\tnumbers = numbers:gsub('six',\
    \ '6')\n\tnumbers = numbers:gsub('three', '3')\n\tnumbers = numbers:gsub('two',\
    \ '2')\n\tnumbers = numbers:gsub('zero', '0')\n\t\n\tlocal sorted_numbers = {}\n\
    \t\n\tfor number in numbers:gmatch('%d+') do\n\t\ttable.insert(sorted_numbers,\
    \ number)\n\tend\n\t\n\ttable.sort(sorted_numbers)\n\t\n\tnumbers = table.concat(sorted_numbers,\
    \ ' ')\n\t\n\tnumbers = numbers:gsub('5', 'five')\n\tnumbers = numbers:gsub('8',\
    \ 'eight')\n\tnumbers = numbers:gsub('4', 'four')\n\tnumbers = numbers:gsub('9',\
    \ 'nine')\n\tnumbers = numbers:gsub('1', 'one')\n\tnumbers = numbers:gsub('7',\
    \ 'seven')\n\tnumbers = numbers:gsub('6', 'six')\n\tnumbers = numbers:gsub('3',\
    \ 'three')\n\tnumbers = numbers:gsub('2', 'two')\n\tnumbers = numbers:gsub('0',\
    \ 'zero')\n\t\n\treturn numbers\nend", "    local number_map = {\n        zero\
    \ = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n        four =\
    \ 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n        eight =\
    \ 8,\n        nine = 9\n    }\n    numbers = {number_map[string.match(number,\
    \ '%a+')] | number <- (string.split(numbers, ' '))}\n    table.sort(numbers)\n\
    \    return table.concat(numbers, ' ')\nend", "    numbers = numbers:gsub('[^%d%s]','')\
    \ -- remove anything that's not a number or a space\n    if numbers == '' then\
    \ return numbers end -- if no numbers in the string\n    local number_table =\
    \ {}\n    for number in numbers:gmatch('%d+') do -- loop over each number in the\
    \ string\n        table.insert(number_table, tonumber(number)) -- add the numbers\
    \ to a table\n    end\n    table.sort(number_table) -- sort the table\n    local\
    \ sorted_string = ''\n    for _,number in ipairs(number_table) do -- loop over\
    \ each number in the table\n        sorted_string = sorted_string .. number ..\
    \ ' ' -- add number to the output string\n    end\n    return sorted_string:sub(1,-2)\
    \ -- return the string without the final space\nend", "  return table.concat(tablex.sort(stringx.split(numbers)),\
    \ ' ')\nend", "    local sorted = {}\n    for number in string.gmatch(numbers,\
    \ '%w+') do\n        local number_num = tonumber(number)\n        if number_num\
    \ then\n            table.insert(sorted, number_num)\n        else\n         \
    \   number_num = {\n                zero = 0,\n                one = 1,\n    \
    \            two = 2,\n                three = 3,\n                four = 4,\n\
    \                five = 5,\n                six = 6,\n                seven =\
    \ 7,\n                eight = 8,\n                nine = 9\n            }[number]\n\
    \            table.insert(sorted, number_num)\n        end\n    end\n    table.sort(sorted)\n\
    \    local joined = {}\n    for _, number in ipairs(sorted) do\n        local\
    \ number_str = {\n            [0] = 'zero',\n            [1] = 'one',\n      \
    \      [2] = 'two',\n            [3] = 'three',\n            [4] = 'four',\n \
    \           [5] = 'five',\n            [6] = 'six',\n            [7] = 'seven',\n\
    \            [8] = 'eight',\n            [9] = 'nine'\n        }[number]\n   \
    \     table.insert(joined, number_str)\n    end\n    return table.concat(joined,\
    \ ' ')\nend", "  local words = {}\n  for word in numbers:gmatch('%w+') do\n  \
    \  table.insert(words, word)\n  end\n  table.sort(words, function(a, b)\n    return\
    \ to_number(a) < to_number(b)\n  end)\n  return table.concat(words, ' ')\nend",
  "\tlocal nums = numbers:split(\" \")\n\tlocal string_mapping = {one = 1, two = 2,\
    \ three = 3, four = 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9, zero\
    \ = 0}\n\tlocal numbers = {}\n\tfor i, number in ipairs(nums) do\n\t\ttable.insert(numbers,\
    \ string_mapping[number])\n\tend\n\ttable.sort(numbers)\n\tlocal output = \"\"\
    \n\tfor i, number in ipairs(numbers) do\n\t\tfor string, num in pairs(string_mapping)\
    \ do\n\t\t\tif num == number then\n\t\t\t\toutput = output .. string .. \" \"\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn output:sub(1, -2)\nend", "\t-- Body of function\n\
    \treturn numbers\nend", "\tlocal function num(n)\n\t\treturn tonumber({\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"}[n])\n\tend\n\ttable.sort(numbers, function(a, b) return num(a) < num(b)\
    \ end)\n\treturn table.concat(numbers, \" \")\nend", "\treturn table.concat(table.sort(string.split('\
    \ ', numbers)), ' ')\nend", "    local keys = numbers:split(\" \")\n    local\
    \ values = {}\n    for i, v in ipairs(keys) do\n        values[i] = numberals[v]\n\
    \    end\n    table.sort(values)\n    for i, v in ipairs(values) do\n        keys[i]\
    \ = numberals[v]\n    end\n    return table.concat(keys, \" \")\nend", "  local\
    \ words = gmatch(numbers, '%S+')\n  local sorted = {}\n  for word in words do\n\
    \    sorted[#sorted + 1] = word\n  end\n  table.sort(sorted, function(a, b)\n\
    \    local a_num = numeral_to_number(a)\n    local b_num = numeral_to_number(b)\n\
    \    return a_num < b_num\n  end)\n  return table.concat(sorted, ' ')\nend", "\t\
    numbers = numbers:gsub(\"^%s*(.-)%s*$\", \"%1\")\n\tlocal sorted_numbers = {}\n\
    \tfor number in numbers:gmatch(\"[^%s]+\") do\n\t\tlocal number_value = numbers_to_int[number]\n\
    \t\tif number_value then\n\t\t\ttable.insert(sorted_numbers, number_value)\n\t\
    \tend\n\tend\n\ttable.sort(sorted_numbers)\n\tlocal output = {}\n\tfor i, v in\
    \ ipairs(sorted_numbers) do\n\t\ttable.insert(output, int_to_numbers[v])\n\tend\n\
    \treturn table.concat(output, \" \")\nend", "  return string.join(\" \", sort(split(numbers,\
    \ ' ')))\nend", "\tlocal parsed = {}\n\tfor numeral in numbers:gmatch('[^%s]+')\
    \ do\n\t\ttable.insert(parsed, numberals[numeral])\n\tend\n\ttable.sort(parsed)\n\
    \tlocal sorted = {}\n\tfor _, numeral in ipairs(parsed) do\n\t\ttable.insert(sorted,\
    \ numeral)\n\tend\n\treturn table.concat(sorted, ' ')\nend", "  -- TODO: sort\
    \ numbers\n  local number_map = {\n    zero = 0,\n    one = 1,\n    two = 2,\n\
    \    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n\
    \    eight = 8,\n    nine = 9\n  }\n  local function number_compare(a, b)\n  \
    \  return number_map[a] < number_map[b]\n  end\n  local result = stringx.split(numbers)\n\
    \  table.sort(result, number_compare)\n  return table.concat(result, ' ')\nend",
  "  local parsed_numbers = {}\n  for number in numbers:gmatch('%S+') do\n    local\
    \ digit = DIGITS[number]\n    if digit then\n      table.insert(parsed_numbers,\
    \ digit)\n    end\n  end\n  table.sort(parsed_numbers)\n  local result = {}\n\
    \  for _, number in ipairs(parsed_numbers) do\n    table.insert(result, number)\n\
    \  end\n  return table.concat(result, ' ')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
