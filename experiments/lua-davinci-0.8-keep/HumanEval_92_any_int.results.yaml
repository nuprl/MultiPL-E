name: HumanEval_92_any_int
language: lua
results:
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x + y == z or x + z == y or y\
    \ + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl25tys_.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprl25tys_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x==math.floor(x)\
    \ and y==math.floor(y) and z==math.floor(z) then\n    if x==y+z or y==x+z or z==x+y\
    \ then\n      return true\n    else\n      return false\n    end\n  else\n   \
    \ return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsztvluc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvsztvluc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ math.type(x) == \"integer\" and math.type(y) == \"integer\" and math.type(z)\
    \ == \"integer\" and (x + y == z or x + z == y or y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z then\n        return true\n    elseif y == x + z then\n        return\
    \ true\n    elseif z == x + y then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk16xqjl2.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk16xqjl2.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == (y + z) or y == (x + z) or z == (x + y) then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18i34zwx.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp18i34zwx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= z and x ~= y and z ~= y then\n    if x + y == z or x + z == y or y + z ==\
    \ x then\n      return true\n    else\n      return false\n    end\n  else\n \
    \   return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzg8form.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzzg8form.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  return (x == y + z) or (y == x + z) or (z == x + y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl9brolo.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkl9brolo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_lkv_ec.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf_lkv_ec.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ ((x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)) and ((x + y == z) or (x + z\
    \ == y) or (y + z == x))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s2sncur.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8s2sncur.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y + z or y == x + z or z == x + y then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1khr4vg.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm1khr4vg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\treturn\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" and\
    \ (z==x+y or y==x+z or x==y+z)\nend\nreturn any_int\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpafo9ge3s.lua:13: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ a = x + y\n    local b = x + z\n    local c = y + z\n    if a == z or b == y\
    \ or c == x then\n        return true\n    else\n        return false\n    end\n\
    end\nassert(any_int(5, 2, 7) == true)\nassert(any_int(3, 2, 2) == false)\nassert(any_int(3,\
    \ -2, 1) == true)\nassert(any_int(3.6, -2.2, 2) == false)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f4jmxpr.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5f4jmxpr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxiwcq3kf.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxiwcq3kf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        if x == y + z or y ==\
    \ x + z or z == x + y then\n            return true\n        else\n          \
    \  return false\n        end\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot2kvmtm.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpot2kvmtm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qy3loba.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4qy3loba.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x+y == z or x+z == y or y+z == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj5aeetr.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphj5aeetr.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tlocal\
    \ x, y, z = math.floor(x), math.floor(y), math.floor(z)\n\treturn x == y + z or\
    \ y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1626ftdx.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1626ftdx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x + y == z or x + z == y or y + z == x then\n        return true\n    elseif\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz1opvwq.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptz1opvwq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x + y == z or x + z == y or y + z == x then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qbmt3zw.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1qbmt3zw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ result = false\n  if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    if x == y + z or y == x + z or z == x + y then\n   \
    \   if x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        result = true\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdybazfc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwdybazfc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y + z or y == x + z or z == x + y then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uopnnxc.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9uopnnxc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54bg40tm.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp54bg40tm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ x_type = type(x)\n    local y_type = type(y)\n    local z_type = type(z)\n \
    \   if x_type == \"number\" and y_type == \"number\" and z_type == \"number\"\
    \ then\n        if math.floor(x) == x and math.floor(y) == y and math.floor(z)\
    \ == z then\n            if x == y + z or y == x + z or z == x + y then\n    \
    \            return true\n            end\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90a8jgo0.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp90a8jgo0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf157gcb.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppf157gcb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x\
    \ % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n\t\tif x == y + z or y == x + z\
    \ or z == x + y then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrgdysv4.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqrgdysv4.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ return false if any of the values is not an integer\n    if type(x) ~= \"number\"\
    \ or type(y) ~= \"number\" or type(z) ~= \"number\" then\n        return false\n\
    \    end\n    -- return true if any of the integers is the sum of the other two\
    \ integers\n    if x == y + z or y == x + z or z == x + y then\n        return\
    \ true\n    end\n    -- return false otherwise\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7c0wew97.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7c0wew97.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ numbers = {x, y, z}\n  table.sort(numbers)\n  local a, b, c = unpack(numbers)\n\
    \  return a + b == c and c % 1 == 0 and a % 1 == 0 and b % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcr3bacfg.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcr3bacfg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpcr3bacfg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x == y + z) or (y == x + z) or (z == x + y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx37vvsev.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx37vvsev.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\treturn\
    \ (x+y==z or x+z==y or y+z==x) and x%1==0 and y%1==0 and z%1==0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuperg9w9.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuperg9w9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) ~= \"number\" or type(y) ~= \"number\" or type(z) ~= \"number\" then\n\
    \        return false\n    end\n    if x - math.floor(x) == 0 and y - math.floor(y)\
    \ == 0 and z - math.floor(z) == 0 then\n        if x == y + z or y == x + z or\
    \ z == x + y then\n            return true\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzhimui5.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgzhimui5.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7u097itc.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7u097itc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x + y == z or x + z == y or y\
    \ + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5bs0y2k.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx5bs0y2k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ result\n  if (x + y == z) or (x + z == y) or (y + z == x) then\n    result =\
    \ true\n  else\n    result = false\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3ezdoe4.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn3ezdoe4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdlxfzyh.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprdlxfzyh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s325kl6.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7s325kl6.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\treturn\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gvbwbc1.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0gvbwbc1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \        if x - math.floor(x) == 0 and y - math.floor(y) == 0 and z - math.floor(z)\
    \ == 0 then\n            if x == y + z or y == x + z or z == x + y then\n    \
    \            return true\n            else\n                return false\n   \
    \         end\n        else\n            return false\n        end\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp25gj4k0.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp25gj4k0.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkn9vg3n.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqkn9vg3n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0) and (y % 1 == 0) and\
    \ (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehjee_hb.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpehjee_hb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x ~= y + z and y ~= x + z and z ~= x + y then\n        return false\n    else\n\
    \        return true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddmy2mqw.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpddmy2mqw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqomkgoq.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzqomkgoq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ res = false\n  if x == y + z or y == x + z or z == x + y then\n    res = true\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegqvgbq5.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpegqvgbq5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw6bjs6j.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdw6bjs6j.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0) and (y % 1 == 0) and\
    \ (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbgsg9r8.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnbgsg9r8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x==y+z\
    \ or y==x+z or z==x+y then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nreturn any_int\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj24bhme2.lua:17: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnbyyj1p.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfnbyyj1p.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ (math.floor(x) == x and math.floor(y) == y and math.floor(z) == z) then\n  \
    \      if (x == y + z or y == x + z or z == x + y) then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj8254sq.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoj8254sq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x + y == z or x + z == y or y\
    \ + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitedx4vv.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpitedx4vv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ write the body of the function here\n    sum = x + y + z\n    if x == sum then\n\
    \        return true\n    elseif y == sum then\n        return true\n    elseif\
    \ z == sum then\n        return true\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfzkekxu.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvfzkekxu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif type(x)\
    \ ~= \"number\" or type(y) ~= \"number\" or type(z) ~= \"number\" then\n\t\treturn\
    \ false\n\tend\n\tif x == y + z or y == x + z or z == x + y then\n\t\treturn true\n\
    \tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjawwdd9p.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjawwdd9p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \        if x == y + z or y == x + z or z == x + y then\n            return true\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeebkj9mt.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeebkj9mt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ if x == y + z or y == x + z or z == x + y then\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a5ashrr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3a5ashrr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgykr9ll.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzgykr9ll.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fm9g685.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5fm9g685.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hckiz3_.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6hckiz3_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y + z or y == x + z or z == x + y then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb28hk56x.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb28hk56x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if (x\
    \ + y == z) or (x + z == y) or (y + z == x) then\n    return true\n  else\n  \
    \  return false\n  end\nend\nreturn any_int\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4lj33_re.lua:17: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_891z92.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw_891z92.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x\
    \ + y == z or x + z == y or y + z == x then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r407l2w.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6r407l2w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x == y + z or y == x + z or z == x + y and math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sxdrn8w.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5sxdrn8w.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if math.floor(x)\
    \ == x and math.floor(y) == y and math.floor(z) == z then\n    if x + y == z or\
    \ x + z == y or y + z == x then\n      return true\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pi0088w.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1pi0088w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\treturn\
    \ (x == y + z or y == x + z or z == x + y) and x % 1 == 0 and y % 1 == 0 and z\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwde6uubf.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwde6uubf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z then\n        return true\n    elseif y == x + z then\n        return\
    \ true\n    elseif z == x + y then\n        return true\n    else\n        return\
    \ false\n    end\nend\nassert(any_int(5, 2, 7) == true)\nassert(any_int(3, 2,\
    \ 2) == false)\nassert(any_int(3, -2, 1) == true)\nassert(any_int(3.6, -2.2, 2)\
    \ == false)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6d4az2bv.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6d4az2bv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x+y == z or x+z == y or y+z == x) and (x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6txhfp0.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd6txhfp0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ math.floor(x) == x and math.floor(y) == y and math.floor(z) == z and\n     \
    \       (x + y == z or x + z == y or y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ytrgo8l.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ytrgo8l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y + z or y == x + z or z == x + y then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp965rxuy6.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp965rxuy6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \        if x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n            if x +\
    \ y == z or x + z == y or y + z == x then\n                return true\n     \
    \       else\n                return false\n            end\n        else\n  \
    \          return false\n        end\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnk8l883.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvnk8l883.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cqnrwqi.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_cqnrwqi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxpk46r2.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxxpk46r2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ numbers = {x, y, z}\n    local success = false\n    for i, number in ipairs(numbers)\
    \ do\n        for j, number2 in ipairs(numbers) do\n            if (number ~=\
    \ number2) then\n                for k, number3 in ipairs(numbers) do\n      \
    \              if (number2 ~= number3) and (number ~= number3) then\n        \
    \                if (number == number2 + number3) then\n                     \
    \       success = true\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    return success\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fr1_lmi.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5fr1_lmi.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x\
    \ == y + z or y == x + z or z == x + y then\n\t\tif math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu704t6c.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxu704t6c.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv3una9w.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmv3una9w.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ type(x) ~= \"number\" or type(y) ~= \"number\" or type(z) ~= \"number\" then\n\
    \        return false\n    end\n    if math.floor(x) ~= x or math.floor(y) ~=\
    \ y or math.floor(z) ~= z then\n        return false\n    end\n    if x == y +\
    \ z or y == x + z or z == x + y then\n        return true\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmyxijh_.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbmyxijh_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- body\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4bmvosl.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpk4bmvosl.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ + y == z or x + z == y or y + z == x then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zxwu454.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1zxwu454.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z or y == x + z or z == x + y and not (x % 1 ~= 0 or y % 1 ~= 0 or\
    \ z % 1 ~= 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomf9x92k.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpomf9x92k.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xaj_2ju.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4xaj_2ju.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- code\
    \ goes here\n  --local is_equal, sum = z == x + y or z == y + x, x + y + z\n \
    \ --return is_equal and sum % 1 == 0\n  return x % 1 == 0 and y % 1 == 0 and z\
    \ % 1 == 0 and (z == x + y or z == y + x)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgdnvcs0.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwgdnvcs0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ sum = x + y + z\n    if x == sum or y == sum or z == sum then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76up9u8i.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp76up9u8i.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and\n  (x + y == z or x + z == y or\
    \ y + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfcdveqi.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdfcdveqi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z or x + z == y or y + z == x) and\n        (math.floor(x) == x and\
    \ math.floor(y) == y and math.floor(z) == z) then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsshwsztx.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsshwsztx.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfs_0l5i8.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfs_0l5i8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\t\t\
    local xi = (x == math.floor(x))\n\t\tlocal yi = (y == math.floor(y))\n\t\tlocal\
    \ zi = (z == math.floor(z))\n\t\tlocal sum = (x + y == z)\n\t\tlocal sum2 = (x\
    \ + z == y)\n\t\tlocal sum3 = (y + z == x)\n\t\treturn xi and yi and zi and (sum\
    \ or sum2 or sum3)\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95txfmsa.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp95txfmsa.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y + z or y == x + z or z == x + y then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpard3mtjr.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpard3mtjr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm2k0y2v.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvm2k0y2v.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr89o4u50.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr89o4u50.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y + z or y == x + z or z == x + y then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlnetb60.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvlnetb60.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ bool = false\n  if ((x == y + z) or (y == x + z) or (z == x + y)) and (x ==\
    \ math.floor(x)) and (y == math.floor(y)) and (z == math.floor(z)) then\n    bool\
    \ = true\n  end\n  return bool\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60e58zwq.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp60e58zwq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z then\n        return true\n    elseif y == x + z then\n        return\
    \ true\n    elseif z == x + y then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgi60s7z.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkgi60s7z.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- write\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkzhzo7m.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpfkzhzo7m.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\treturn\
    \ x+y==z or x+z==y or y+z==x and x==x%1 and y==y%1 and z==z%1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphdfqogd.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpphdfqogd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        return (x + y == z) or\
    \ (x + z == y) or (y + z == x)\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_pau4gc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_pau4gc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ x_is_sum, y_is_sum, z_is_sum = false, false, false\n    if math.floor(x) ==\
    \ x then\n        x_is_sum = x == y + z or x == y - z or x == z - y\n    end\n\
    \    if math.floor(y) == y then\n        y_is_sum = y == x + z or y == x - z or\
    \ y == z - x\n    end\n    if math.floor(z) == z then\n        z_is_sum = z ==\
    \ x + y or z == x - y or z == y - x\n    end\n    return x_is_sum or y_is_sum\
    \ or z_is_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup492efc.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpup492efc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ if x == y + z or y == x + z or z == x + y then\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tzef63b.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4tzef63b.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpt8kyfn.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdpt8kyfn.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcj5icy6.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfcj5icy6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nz86xra.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_nz86xra.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif (x\
    \ + y == z) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) then\n\t\treturn\
    \ true\n\telseif (x + z == y) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 ==\
    \ 0) then\n\t\treturn true\n\telseif (y + z == x) and (x % 1 == 0) and (y % 1\
    \ == 0) and (z % 1 == 0) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwr4n2rd.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiwr4n2rd.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ (x == y + z) or (y == x + z) or (z == x + y) then\n        return true\n   \
    \ else\n        return false\n    end\nend\nprint(any_int(1,2,3))\nprint(any_int(1,2,2))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf4eaf17.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgf4eaf17.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkm_mlwzv.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkm_mlwzv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq1djjuz.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppq1djjuz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- code\
    \ goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4cga9e2.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_4cga9e2.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x\
    \ == y + z or y == x + z or z == x + y then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ryqipvw.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9ryqipvw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gekupfq.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp2gekupfq.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ first_check = x + y == z\n  local second_check = x + z == y\n  local third_check\
    \ = y + z == x\n  local fourth_check = x % 1 == 0 and y % 1 == 0 and z % 1 ==\
    \ 0\n  return first_check or second_check or third_check and fourth_check\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpay4mobi9.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpay4mobi9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ result = false\n    if x == y + z or y == x + z or z == x + y then\n       \
    \ result = true\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwpgpema.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbwpgpema.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x+y\
    \ == z or x+z == y or y+z == x then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvck83i9.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqvck83i9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwl7p_owz.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwl7p_owz.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2anqiwml.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp2anqiwml.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x - y == z or y - x == z or x - z == y or z - x == y or y - z == x or z - y\
    \ == x then\n        return true\n    elseif x + y == z or y + x == z or x + z\
    \ == y or z + x == y or y + z == x or z + y == x then\n        return true\n \
    \   else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk9b6gbm.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmk9b6gbm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpor5zp2ur.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpor5zp2ur.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mbf82zu.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1mbf82zu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ write your code here\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq715433.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppq715433.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x + y == z or x + z == y or y + z == x and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgi4mm6g.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwgi4mm6g.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkck2b918.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkck2b918.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6hsg3nl.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt6hsg3nl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqovdsshu.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqovdsshu.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 ==\
    \ 0 and z % 1 == 0)\n    -- \u4E09\u4E2A\u6570\u5B57\u6A211\u4E4B\u540E\u5FC5\u987B\
    \u662F0\uFF0C\u624D\u662F\u6574\u6570\n    return (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0) and (x == y + z or y == x + z or z == x + y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3m1g_fmq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3m1g_fmq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- get\
    \ the sum of x and y\n  local x_plus_y = x + y\n  -- if x is the sum of x and\
    \ y and x is an integer and y is an integer\n  if x == x_plus_y and math.floor(x)\
    \ == x and math.floor(y) == y then\n    -- return true\n    return true\n  --\
    \ get the sum of x and z\n  local x_plus_z = x + z\n  -- if x is the sum of x\
    \ and z and x is an integer and z is an integer\n  elseif x == x_plus_z and math.floor(x)\
    \ == x and math.floor(z) == z then\n    -- return true\n    return true\n  --\
    \ get the sum of y and z\n  local y_plus_z = y + z\n  -- if y is the sum of y\
    \ and z and y is an integer and z is an integer\n  elseif y == y_plus_z and math.floor(y)\
    \ == y and math.floor(z) == z then\n    -- return true\n    return true\n  --\
    \ otherwise return false\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppzuy9p37.lua:17: 'end' expected (to close 'if' at line 13)\
    \ near 'local'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x % 1 == 0 and y % 1 == 0 and z % 1 == 0) and (x + y == z or x + z == y or\
    \ y + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu78edsb.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxu78edsb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and (x - math.floor(x) == 0 and y -\
    \ math.floor(y) == 0 and z - math.floor(z) == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4dpd53a.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd4dpd53a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hs90c0_.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3hs90c0_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  if x + y == z or x + z == y or y + z == x then\n    return\
    \ true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zv_bzu0.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6zv_bzu0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x - y == z) or (x - z == y) or (y - x == z) or (y - z == x) or (z - x == y)\
    \ or (z - y == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx8bkb9w.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkx8bkb9w.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (\n        (x == y + z) or\n        (y == x + z) or\n        (z == x + y)\n\
    \    ) and (\n        (math.floor(x) == x) and\n        (math.floor(y) == y) and\n\
    \        (math.floor(z) == z)\n    )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9l_jybc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq9l_jybc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ function is_int(num)\n    return num % 1 == 0\n  end\n  return is_int(x) and\
    \ is_int(y) and is_int(z) and (x + y == z or x + z == y or y + z == x)\nend\n\
    return any_int\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9uansctj.lua:16: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yq0aw8r.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8yq0aw8r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mujac7i.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0mujac7i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw1s6bsi.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxw1s6bsi.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48e9ht1e.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp48e9ht1e.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ t = {x, y, z}\n  local sum = 0\n  for i = 1, 3 do\n    if math.type(t[i]) ==\
    \ \"integer\" then\n      sum = sum + 1\n    end\n  end\n  return sum >= 2 and\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_v4ohqg.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq_v4ohqg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  if x == sum / 2 or y == sum / 2 or z == sum / 2 then\n  \
    \  return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7a3t43i9.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7a3t43i9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqkrmosv.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfqkrmosv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gh2h7tb.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5gh2h7tb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ numbers = {x, y, z}\n  local first = 0\n  local second = 0\n  local third =\
    \ 0\n  for i = 1, #numbers do\n    if (numbers[i] == math.floor(numbers[i])) then\n\
    \      if (first == 0) then\n        first = numbers[i]\n      elseif (second\
    \ == 0) then\n        second = numbers[i]\n      elseif (third == 0) then\n  \
    \      third = numbers[i]\n      end\n    end\n  end\n  return (first + second\
    \ == third) or (first + third == second) or (second + third == first)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ts4s6mq.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3ts4s6mq.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif not\
    \ (type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\")\
    \ then\n\t\treturn false\n\tend\n\tif x % 1 == 0 and y % 1 == 0 and z % 1 == 0\
    \ then\n\t\tif x + y == z or x + z == y or y + z == x then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9o8nuq7o.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9o8nuq7o.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmz723_7p.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpmz723_7p.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa3yj_bv.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwa3yj_bv.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ function is_integer(num)\n    return math.floor(num) == num\n  end\n  return\
    \ is_integer(x) and is_integer(y) and is_integer(z) and (x == y + z or y == x\
    \ + z or z == x + y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mo1ps3e.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7mo1ps3e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x%1==0\
    \ and y%1==0 and z%1==0 then\n\t\tif x+y==z or x+z==y or y+z==x then\n\t\t\treturn\
    \ true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66jf6orj.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp66jf6orj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg5dmv8a.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdg5dmv8a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        if x == y + z or y ==\
    \ x + z or z == x + y then\n            return true\n        else\n          \
    \  return false\n        end\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczxfodqf.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpczxfodqf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\treturn\
    \ x%1==0 and y%1==0 and z%1==0 and (x==y+z or y==x+z or z==x+y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7auvstz1.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7auvstz1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ a = x + y\n  local b = x + z\n  local c = y + z\n  if a == z and x % 1 == 0\
    \ and y % 1 == 0 and z % 1 == 0 then\n    return true\n  elseif b == y and x %\
    \ 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n    return true\n  elseif c == x\
    \ and x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n    return true\n  elseif\
    \ a == z and x % 1 ~= 0 and y % 1 ~= 0 and z % 1 ~= 0 then\n    return false\n\
    \  elseif b == y and x % 1 ~= 0 and y % 1 ~= 0 and z % 1 ~= 0 then\n    return\
    \ false\n  elseif c == x and x % 1 ~= 0 and y % 1 ~= 0 and z % 1 ~= 0 then\n \
    \   return false\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeypen104.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeypen104.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  -- code\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8yfb5e5.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpl8yfb5e5.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2ute6rk.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr2ute6rk.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ d = {x, y, z}\n    local b = false\n    table.sort(d)\n    if d[1] + d[2] ==\
    \ d[3] then\n        if x == math.floor(x) and y == math.floor(y) and z == math.floor(z)\
    \ then\n            b = true\n        end\n    end\n    return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnpl69o3.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqnpl69o3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c1r2cah.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6c1r2cah.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        if x == y + z or y ==\
    \ x + z or z == x + y then\n            return true\n        else\n          \
    \  return false\n        end\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35mspv39.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp35mspv39.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ if x == y + z or y == x + z or z == x + y then\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykox_5rk.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpykox_5rk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo1wb9hm.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoo1wb9hm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and\n        (x + y == z or x + z ==\
    \ y or y + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0nobf1y.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd0nobf1y.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4x193tdq.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4x193tdq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x\
    \ + y == z or x + z == y or y + z == x then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfd9pdva.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprfd9pdva.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\treturn\
    \ (x + y == z or x + z == y or y + z == x) and\n\t\tx % 1 == 0 and y % 1 == 0\
    \ and z % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhlz0guf.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwhlz0guf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    local\
    \ sorted = {x, y, z}\n    table.sort(sorted)\n    if sorted[1] + sorted[2] ==\
    \ sorted[3] then\n        return true\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyn724nty.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyn724nty.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0xq87pt.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps0xq87pt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    --\
    \ body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7naecc5.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpi7naecc5.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ (x == (y + z)) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) then\n   \
    \     return true\n    elseif (y == (x + z)) and (x % 1 == 0) and (y % 1 == 0)\
    \ and (z % 1 == 0) then\n        return true\n    elseif (z == (x + y)) and (x\
    \ % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e7m1zcc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2e7m1zcc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tkot9az.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6tkot9az.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nprint(any_int(5, 2, 7))\nprint(any_int(3,\
    \ 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\ntrue\nfalse\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpfl1b9a5d.lua:26: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl1b9a5d.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) and (x + y == z or x + z == y\
    \ or y + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d8iysj2.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0d8iysj2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (((x + y) == z) or ((x + z) == y) or ((y + z) == x)) and math.floor(x) == x\
    \ and math.floor(y) == y and math.floor(z) == z\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0kv5it_.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn0kv5it_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptdgs7z8.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpptdgs7z8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemdlqyz3.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpemdlqyz3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tif x==y+z\
    \ or y==x+z or z==x+y then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\n\
    print(any_int(3.6, -2.2, 2))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "true\nfalse\ntrue\nfalse\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmphdicytxy.lua:26: expected: false, actual: true\nstack traceback:\n\t/tmp/tmphdicytxy.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z or y == x + z or z == x + y and math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2t4tew6.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa2t4tew6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrh7tu88.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptrh7tu88.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3176hg7.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv3176hg7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n\tlocal\
    \ z = z or 1\n\treturn (x == y + z or y == x + z or z == x + y) and (x%1 == 0\
    \ and y%1 == 0 and z%1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26wsu_iz.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp26wsu_iz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0) and (y % 1 == 0) and\
    \ (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjcd3rbc.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqjcd3rbc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
