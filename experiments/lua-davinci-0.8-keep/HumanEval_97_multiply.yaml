name: HumanEval_97_multiply
language: lua
prompt: "-- Complete the function that takes two integers and returns \n-- the product\
  \ of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n--\
  \ multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
  -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
  local function multiply(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
  \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
  \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
  \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
  \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
  \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  a = math.abs(a)\n  b = math.abs(b)\n  return (a % 10) * (b % 10)\n\
    end", "    return (a % 10) * (b % 10)\nend", "\treturn (math.floor(a/10) * math.floor(b/10))\
    \ + ((a%10) * (b%10))\nend", "    return (a % 10) * (b % 10)\nend", "    -- write\
    \ your code here\nend", "    a = a % 10\n    b = b % 10\n    return a * b\nend",
  "    -- Your code here\nend", "  local units = {\n    [0] = 0, [1] = 1, [2] = 2,\
    \ [3] = 3, [4] = 4,\n    [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9,\n  }\n \
    \ local a_units = math.abs(a) % 10\n  local b_units = math.abs(b) % 10\n  return\
    \ units[a_units] * units[b_units]\nend", "  local num = (a % 10) * (b % 10)\n\
    \  return num\nend", "    return (a % 10) * (b % 10)\nend", "  local result =\
    \ tostring(a):reverse():sub(1,1) * tostring(b):reverse():sub(1,1)\n  return result\n\
    end", "    return (a%10) * (b%10)\nend", "    local function f(x)\n        local\
    \ d = 0\n        while x > 0 do\n            d = d + x % 10\n            x = x\
    \ / 10\n        end\n        return d\n    end\n    return f(a) * f(b)\nend",
  "    local remainder = 0\n    while a > 0 do\n        remainder = remainder + b\n\
    \        a = a - 1\n    end\n    local r = string.sub(tostring(remainder), -1)\n\
    \    return tonumber(r)\nend", "    local x = math.abs(a) % 10\n    local y =\
    \ math.abs(b) % 10\n    return x * y\nend", "  -- body\n  local a = tostring(a)\n\
    \  local b = tostring(b)\n  return tonumber(a:sub(-1, -1)) * tonumber(b:sub(-1,\
    \ -1))\nend", "\t-- body\n\tlocal multiply = a % 10 * b % 10\n\treturn multiply\n\
    end", "    return ((a % 10) * (b % 10))\nend", "  return math.abs(a) % 10 * math.abs(b)\
    \ % 10\nend", "    local product = (a % 10) * (b % 10)\n    return product\nend",
  "    local result = 1\n    if a < 0 then\n        a = a * -1\n    end\n    if b\
    \ < 0 then\n        b = b * -1\n    end\n    while a > 0 do\n        result =\
    \ result * (a % 10)\n        a = math.floor(a / 10)\n    end\n    while b > 0\
    \ do\n        result = result * (b % 10)\n        b = math.floor(b / 10)\n   \
    \ end\n    return result\nend", "    local function dm(i)\n        return math.abs(i)\
    \ % 10\n    end\n    return dm(a) * dm(b)\nend", "  return (a % 10) * (b % 10)\n\
    end", "    local z = a * b\n    z = z % 10\n    return z\nend", "  -- your code\
    \ here\n  local digit_a = a % 10\n  local digit_b = b % 10\n  return digit_a *\
    \ digit_b\nend", "    local math = require(\"math\")\n    local unitA = math.abs(a)\
    \ % 10\n    local unitB = math.abs(b) % 10\n    local result = unitA * unitB\n\
    \    return result\nend", "\tif a < 0 or b < 0 then\n\t\treturn \"Please enter\
    \ positive numbers only!\"\n\tend\n\ta, b = tostring(a), tostring(b)\n\treturn\
    \ tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend", "  return ((a%10) * (b%10))\n\
    end", "    return (a % 10) * (b % 10)\nend", "\tlocal a = tostring(a)\n\tlocal\
    \ b = tostring(b)\n\treturn tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend", " \
    \   local x = a % 10\n    local y = b % 10\n    return x * y\nend", "  local ta\
    \ = string.sub(tostring(a), -1)\n  local tb = string.sub(tostring(b), -1)\n  local\
    \ t = ta * tb\n  return t\nend", "  local a = a%10\n  local b = b%10\n  return\
    \ a*b\nend", "  local c, d = math.abs(a) % 10, math.abs(b) % 10\n  return c *\
    \ d\nend", "    return a % 10 * b % 10\nend", "    return (a%10)*(b%10)\nend",
  "\t-- body\n\ta = math.abs(a)\n\tb = math.abs(b)\n\treturn (a%10)*(b%10)\nend",
  "    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend", "    a = a % 10\n \
    \   b = b % 10\n    return a * b\nend", "    local result = (a%10) * (b%10)\n\
    \    print(result)\n    return result\nend", "  return (a % 10) * (b % 10)\nend",
  "  return (a%10)*(b%10)\nend", "  local abs_a = math.abs(a)\n  local abs_b = math.abs(b)\n\
    \  local digit_a = abs_a % 10\n  local digit_b = abs_b % 10\n  return digit_a\
    \ * digit_b\nend", "    return (a % 10) * (b % 10)\nend", "  return tonumber(string.sub(tostring(a),\
    \ -1)) * tonumber(string.sub(tostring(b), -1))\nend", "  local last_digit = function(n)\
    \ return n % 10 end\n  return last_digit(a) * last_digit(b)\nend", "  local units_mul\
    \ = (a % 10) * (b % 10)\n  return units_mul\nend", "  return (a % 10) * (b % 10)\n\
    end", "    a = tostring(a)\n    b = tostring(b)\n    a = a:match('%d')\n    b\
    \ = b:match('%d')\n    local c = a * b\n    return c\nend", "  return (a % 10)\
    \ * (b % 10)\nend", "  return (a % 10) * (b % 10)\nend", "    local x = a % 10;\n\
    \    local y = b % 10;\n    return x * y;\nend", "  local nums = { a % 10, b %\
    \ 10 }\n  return nums[1] * nums[2]\nend", "\tlocal va = string.reverse(tostring(a))\n\
    \tlocal vb = string.reverse(tostring(b))\n\treturn tonumber(string.sub(va, 1,\
    \ 1)) * tonumber(string.sub(vb, 1, 1))\nend", "\tlocal mult = a * b\n\tlocal unitDigit\
    \ = mult % 10\n\treturn unitDigit\nend", "\treturn (a%10) * (b%10)\nend", "  return\
    \ (a % 10) * (b % 10)\nend", "    return (a%10)*(b%10)\nend", "  return a % 10\
    \ * b % 10\nend", "  local function get_unit_digit(x)\n    return x % 10\n  end\n\
    \  return get_unit_digit(a) * get_unit_digit(b)\nend", "  local multiplier = 1\n\
    \  if a < 0 then\n    multiplier = -1\n    a = -a\n  end\n  return multiplier\
    \ * (a % 10) * (b % 10)\nend", "    return math.abs(a) % 10 * math.abs(b) % 10\n\
    end", "    local a1 = a % 10\n    local b1 = b % 10\n    return a1 * b1\nend\n\
    print(multiply(19, 28))", "\t-- body\n\tlocal n = tostring(a)\n\tlocal m = tostring(b)\n\
    \tlocal l = n:len()\n\tlocal k = m:len()\n\tlocal x = l - n:find(\"%.\")\n\tlocal\
    \ y = k - m:find(\"%.\")\n\tlocal r = (n%1) * (m%1)\n\tlocal t = r - math.floor(r)\n\
    \tif t == 0 then \n\t\treturn n:sub(x+1,l) * m:sub(y+1,k)\n\telse\n\t\treturn\
    \ n:sub(x+1,l) * m:sub(y+1,k) * t\n\tend\nend", "  local unit = {\n    ['0'] =\
    \ 0,\n    ['1'] = 1,\n    ['2'] = 2,\n    ['3'] = 3,\n    ['4'] = 4,\n    ['5']\
    \ = 5,\n    ['6'] = 6,\n    ['7'] = 7,\n    ['8'] = 8,\n    ['9'] = 9,\n  }\n\
    \  local x = tonumber(tostring(a):sub(-1))\n  local y = tonumber(tostring(b):sub(-1))\n\
    \  return unit[tostring(x * y)]\nend", "    local n = tostring(a)\n    local m\
    \ = tostring(b)\n    local val1 = string.sub(n, #n, #n)\n    local val2 = string.sub(m,\
    \ #m, #m)\n    return tonumber(val1) * tonumber(val2)\nend", "  local x = math.abs(a\
    \ % 10)\n  local y = math.abs(b % 10)\n  return x * y\nend", "  local stringA\
    \ = tostring(a)\n  local stringB = tostring(b)\n  local unitDigitA = tonumber(stringA:sub(-1,\
    \ -1))\n  local unitDigitB = tonumber(stringB:sub(-1, -1))\n  return unitDigitA\
    \ * unitDigitB\nend", "\tlocal a_unit = a % 10\n\tlocal b_unit = b % 10\n\tlocal\
    \ result = a_unit * b_unit\n\treturn result\nend", "    local function get_unit_digit(num)\n\
    \        local num = math.abs(num) % 10\n        return num\n    end\n    return\
    \ get_unit_digit(a) * get_unit_digit(b)\nend", "  return a % 10 * b % 10\nend",
  "  return (a % 10) * (b % 10)\nend", "  -- Your code here\n  local x = math.abs(a)\
    \ % 10\n  local y = math.abs(b) % 10\n  return x * y\nend", "\t-- body\n\treturn\
    \ (a%10)*(b%10)\nend", "    return (a % 10) * (b % 10)\nend", "    return math.floor(math.abs(a)\
    \ % 10 * math.abs(b) % 10)\nend", "    return (a % 10) * (b % 10)\nend", "   \
    \ return tonumber(a:sub(-1, -1)) * tonumber(b:sub(-1, -1))\nend", "    local function\
    \ get_one_digit(n)\n        local d\n        while n >= 10 do\n            d =\
    \ n % 10\n            n = (n - d) / 10\n        end\n        return n\n    end\n\
    \    return get_one_digit(a) * get_one_digit(b)\nend", "\treturn ((a % 10) * (b\
    \ % 10))\nend", "    return (a%10) * (b%10)\nend", "  local last = string.sub(tostring(a),\
    \ -1)\n  local next = string.sub(tostring(b), -1)\n  return last * next\nend",
  "    return math.abs(a % 10 * b % 10)\nend", "    local a_units = a % 10\n    local\
    \ b_units = b % 10\n    return a_units * b_units\nend", "    local a, b = tostring(a),\
    \ tostring(b)\n    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend", " \
    \   -- your code here\nend", "  return tonumber(tostring(a):sub(-1,-1)) * tonumber(tostring(b):sub(-1,-1))\n\
    end", "    -- initialize the result\n    local result = 0\n    \n    -- Get the\
    \ absolute value of a and b\n    local a_unit_digit = a % 10\n    local b_unit_digit\
    \ = b % 10\n    \n    -- If any of the numbers is negative, multiply result with\
    \ -1\n    if a < 0 or b < 0 then\n        result = -1\n    end\n    \n    -- Calculate\
    \ the absolute value of the unit digits product\n    result = result * (a_unit_digit\
    \ * b_unit_digit)\n    \n    return result\nend", "  local result = 0\n  a = math.abs(a)\n\
    \  b = math.abs(b)\n  if a < 10 and b < 10 then\n    result = a * b\n  else\n\
    \    local aRest = a % 10\n    local bRest = b % 10\n    if aRest > 0 and bRest\
    \ > 0 then\n      result = aRest * bRest\n    end\n  end\n  return result\nend",
  "    return (a % 10) * (b % 10)\nend", "  local s = a * b\n  return (s % 10) * (math.floor(s\
    \ / 10) % 10)\nend", "    local a_unit_digit = a % 10\n    local b_unit_digit\
    \ = b % 10\n    return a_unit_digit * b_unit_digit\nend", "\tlocal function get_unit_digit(num)\n\
    \t\treturn math.abs(num) % 10\n\tend\n\treturn get_unit_digit(a) * get_unit_digit(b)\n\
    end", "    local a = math.floor(math.abs(a) % 10)\n    local b = math.floor(math.abs(b)\
    \ % 10)\n    return a * b\nend", "\treturn (a%10)*(b%10)\nend", "\tlocal unit_digit\
    \ = {\n\t\t[0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6,\n\t\t\
    [7] = 7, [8] = 8, [9] = 9,\n\t}\n\ta = math.abs(a)\n\tb = math.abs(b)\n\tlocal\
    \ au = unit_digit[a % 10]\n\tlocal bu = unit_digit[b % 10]\n\treturn au * bu\n\
    end", "    local unitDigitOfA = a % 10\n    local unitDigitOfB = b % 10\n    return\
    \ unitDigitOfA * unitDigitOfB\nend", "    local lastDigit = function(number)\n\
    \        return number % 10\n    end\n    return lastDigit(a) * lastDigit(b)\n\
    end", "  return (a % 10) * (b % 10)\nend\nprint(multiply(19, 28))\nprint(multiply(148,\
    \ 412))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))", "  local x = a\
    \ % 10\n  local y = b % 10\n  return x * y\nend", "    a, b = tostring(a), tostring(b)\n\
    \    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend", "\ta, b = tostring(a),\
    \ tostring(b)\n\treturn tonumber(a:sub(-1, -1)) * tonumber(b:sub(-1, -1))\nend",
  "    local function get_unit_digit(a)\n        local unit_digit = 0\n        while\
    \ a > 0 do\n            unit_digit = a % 10\n            a = math.floor(a / 10)\n\
    \        end\n        return unit_digit\n    end\n    return get_unit_digit(a)\
    \ * get_unit_digit(b)\nend", "  return (a % 10) * (b % 10)\nend", "\treturn tonumber(tostring(a):sub(-1,-1))\
    \ * tonumber(tostring(b):sub(-1,-1))\nend", "  return tonumber(tostring(a):match('%d')\
    \ * tostring(b):match('%d'))\nend", "    return ((a % 10) * (b % 10))\nend", " \
    \   return ((a%10) * (b%10))\nend", "    local r = math.abs(a) % 10 * math.abs(b)\
    \ % 10\n    return r\nend", "    return string.format(\"%d\", a):match\"%d$\"\
    \ * string.format(\"%d\", b):match\"%d$\"\nend", "  return (a % 10) * (b % 10)\n\
    end", "  return a%10 * b%10\nend", "  local x = string.sub(a, -1)\n  local y =\
    \ string.sub(b, -1)\n  if x == \"-\" then x = string.sub(a, -2, -2) end\n  if\
    \ y == \"-\" then y = string.sub(b, -2, -2) end\n  local z = tonumber(x) * tonumber(y)\n\
    \  return z\nend", "  local ua = math.abs(a)%10\n  local ub = math.abs(b)%10\n\
    \  return ua*ub\nend", "    local aUnits = a % 10\n    local bUnits = b % 10\n\
    \    return aUnits * bUnits\nend", "  return tonumber(tostring(a):match('.$'))\
    \ * tonumber(tostring(b):match('.$'))\nend", "    local units = {}\n    units[0]\
    \ = 1\n    units[1] = 1\n    units[2] = 2\n    units[3] = 3\n    units[4] = 4\n\
    \    units[5] = 5\n    units[6] = 6\n    units[7] = 7\n    units[8] = 8\n    units[9]\
    \ = 9\n    units[10] = 0\n    return units[math.abs(a) % 10] * units[math.abs(b)\
    \ % 10]\nend", "  return tonumber(tostring(a % 10) .. tostring(b % 10))\nend",
  "\tlocal function getUnitDigit(n)\n\t\tlocal n = n%10\n\t\treturn n>0 and n or 0\n\
    \tend\n\treturn getUnitDigit(a)*getUnitDigit(b)\nend", "  local dig1 = a % 10\n\
    \  local dig2 = b % 10\n  local result = dig1 * dig2\n  return result\nend", " \
    \   return (a % 10) * (b % 10)\nend", "\treturn (a % 10) * (b % 10)\nend", " \
    \ return a % 10 * b % 10\nend", "    local u = a % 10 * b % 10\n    return u\n\
    end", "    return (a % 10) * (b % 10)\nend", "\ta = a % 10;\n\tb = b % 10;\n\t\
    return a * b;\nend", "  local function unit(n)\n    return n % 10\n  end\n  return\
    \ unit(a) * unit(b)\nend", "  return (a%10) * (b%10)\nend\nreturn multiply", " \
    \   a, b = a % 10, b % 10\n    return a * b\nend", "  local function unit(a)\n\
    \    return a % 10\n  end\n  return unit(a) * unit(b)\nend", "    local sum =\
    \ a % 10\n    local num = b % 10\n    return sum * num\nend", "    local x = a\
    \ % 10;\n    local y = b % 10;\n    return x * y;\nend", "  return ((a % 10) *\
    \ (b % 10))\nend", "    return (a%10) * (b%10)\nend", "    return math.abs(a)\
    \ % 10 * math.abs(b) % 10\nend", "    local c = a % 10\n    local d = b % 10\n\
    \    return c * d\nend", "  local s = tostring(a * b)\n  local u = tonumber(s:sub(-1))\n\
    \  return u\nend", "  return(a % 10 * b % 10)\nend", "  local x = a % 10\n  local\
    \ y = b % 10\n  return x * y\nend", "  return tonumber(tostring(a):sub(-1)) *\
    \ tonumber(tostring(b):sub(-1))\nend", "    return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "  local aa = string.match(tostring(a),\
    \ '%d')\n  local bb = string.match(tostring(b), '%d')\n  return aa * bb\nend",
  "    local c = a % 10\n    local d = b % 10\n    return c * d\nend", "    return\
    \ (a%10)*(b%10)\nend", "    return (a % 10) * (b % 10)\nend", "    local a, b\
    \ = tostring(a), tostring(b)\n    local x, y = a:sub(-1), b:sub(-1)\n    return\
    \ tonumber(x)*tonumber(y)\nend", "  return (a % 10) * (b % 10)\nend", "  local\
    \ result = 0\n  local a_last = math.abs(a % 10)\n  local b_last = math.abs(b %\
    \ 10)\n  result = a_last * b_last\n  return result\nend", "  return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "\treturn ((a % 10) * (b % 10))\nend",
  "  return(tostring(a):sub(-1)*tostring(b):sub(-1))\nend", "    return (a%10) * (b%10)\n\
    end", "  return string.sub(tostring(a), -1) * string.sub(tostring(b), -1)\nend",
  "  return math.abs(a % 10 * b % 10)\nend", "\treturn (a%10) * (b%10)\nend", "  \
    \  local x, y\n    if a < 0 then a = -a end\n    if b < 0 then b = -b end\n  \
    \  if a > b then\n        x = a\n        y = b\n    else\n        x = b\n    \
    \    y = a\n    end\n    return (x % 10) * (y % 10)\nend", "    local div = 10\n\
    \    local aUnit = math.floor(a % div)\n    local bUnit = math.floor(b % div)\n\
    \    return aUnit * bUnit\nend\nreturn multiply", "  -- your code here\n  local\
    \ ans = (a % 10) * (b % 10)\n  return ans\nend", "\treturn (a % 10) * (b % 10)\n\
    end", "  return tonumber(string.sub(tostring(a), -1)) * tonumber(string.sub(tostring(b),\
    \ -1))\nend", "  return (a % 10) * (b % 10)\nend", "  return (a % 10) * (b % 10)\n\
    end", "\tlocal unit_a = a % 10\n\tlocal unit_b = b % 10\n\treturn unit_a * unit_b\n\
    end", "  -- code here\nend", "  return (a % 10) * (b % 10)\nend", "\ta = tostring(a)\n\
    \tb = tostring(b)\n\ta = a:match(\"%d\")\n\tb = b:match(\"%d\")\n\tlocal res =\
    \ a * b\n\treturn res\nend", "    a = math.abs(a)\n    b = math.abs(b)\n    return\
    \ (a%10) * (b%10)\nend", "    return a % 10 * b % 10\nend", "\ta = math.abs(a)\n\
    \tb = math.abs(b)\n\t\n\treturn math.fmod(a, 10) * math.fmod(b, 10)\nend", " \
    \ return (a % 10) * (b % 10)\nend", "\t-- body\n\treturn tonumber(string.sub(tostring(a),\
    \ -1, -1)) * tonumber(string.sub(tostring(b), -1, -1))\nend", "  return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "  return ((a%10) * (b%10))\nend", " \
    \ return (a % 10) * (b % 10)\nend", "  local x, y = math.abs(a), math.abs(b)\n\
    \  return (x * y) % 10\nend", "    local function unit(n)\n        return math.abs(n\
    \ % 10)\n    end\n    return unit(a) * unit(b)\nend", "    return (a % 10) * (b\
    \ % 10)\nend", "  return ((a % 10) * (b % 10))\nend", "    return (a%10) * (b%10)\n\
    end", "    -- First, find the unit digits of each number.\n    local unitA = a\
    \ % 10\n    local unitB = b % 10\n    -- Then, multiply the unit digits together.\n\
    \    return unitA * unitB\nend", "\t-- code here\nend", "    local function unit(number)\n\
    \        return math.abs(number) % 10\n    end\n    return unit(a) * unit(b)\n\
    end", "\tlocal a = tostring(a)\n\tlocal b = tostring(b)\n\treturn tonumber(a:sub(-1))\
    \ * tonumber(b:sub(-1))\nend", "    return tonumber(tostring(a):sub(-1,-1)) *\
    \ tonumber(tostring(b):sub(-1,-1))\nend", "    local a = a % 10\n    local b =\
    \ b % 10\n    return a * b\nend", "  local product = 0\n  local x, y = math.abs(a)\
    \ % 10, math.abs(b) % 10\n  product = x * y\n  return product\nend", "    -- body\n\
    \    return (a%10)*(b%10)\nend", "    return (a % 10) * (b % 10)\nend", "  return\
    \ tonumber(string.sub(tostring(a), -1)) * \n         tonumber(string.sub(tostring(b),\
    \ -1))\nend", "    return tonumber(tostring(a):sub(-1, -1)) * tonumber(tostring(b):sub(-1,\
    \ -1))\nend", "    local answer = 0\n    local a_units = a % 10\n    local b_units\
    \ = b % 10\n    answer = a_units * b_units\n    return answer\nend", "  return\
    \ ((a % 10) * (b % 10))\nend", "  return ((a * b) % 10);\nend", "  local m = a\n\
    \  local n = b\n  if a < 0 then\n    m = -a\n  end\n  if b < 0 then\n    n = -b\n\
    \  end\n  return ((m % 10) * (n % 10))\nend", "  return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "    local a, b = math.abs(a), math.abs(b)\n\
    \    local a, b = string.sub(tostring(a),-1), string.sub(tostring(b),-1)\n   \
    \ return tonumber(a) * tonumber(b)\nend", "    return ((a - a % 10) / 10 % 10)\
    \ * ((b - b % 10) / 10 % 10)\nend", "    -- your code here\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
