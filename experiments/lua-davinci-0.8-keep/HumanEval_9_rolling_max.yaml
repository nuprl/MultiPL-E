name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["\tlocal max = numbers[1]\n\tlocal rolling_max = {max}\n\tfor i = 2,\
    \ #numbers do\n\t\tif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\
    \t\trolling_max[i] = max\n\tend\n\treturn rolling_max\nend", "    local maxes\
    \ = {}\n    local current_max = numbers[1]\n    for _, num in ipairs(numbers)\
    \ do\n        if num > current_max then\n            current_max = num\n     \
    \   end\n        table.insert(maxes, current_max)\n    end\n    return maxes\n\
    end", "    local result = {}\n    local size = #numbers\n    local result_size\
    \ = size\n    local max_num = numbers[1]\n    for i = 1, size do\n        if numbers[i]\
    \ > max_num then\n            max_num = numbers[i]\n        end\n        if i\
    \ == size then\n            break\n        end\n        result[i] = max_num\n\
    \    end\n    return result\nend", "    local result = {}\n    local current_max\
    \ = -math.huge\n    for i = 1, #numbers do\n        current_max = math.max(current_max,\
    \ numbers[i])\n        result[i] = current_max\n    end\n    return result\nend",
  "    local maxs = { numbers[1] }\n    for i = 2, #numbers do\n        local val\
    \ = numbers[i]\n        maxs[i] = math.max(maxs[i - 1], val)\n    end\n    return\
    \ maxs\nend", "    local maxes = {}\n    local max = numbers[1]\n    for i, n\
    \ in ipairs(numbers) do\n        if n > max then\n            max = n\n      \
    \  end\n        maxes[i] = max\n    end\n    return maxes\nend", "\tlocal rolling_max\
    \ = {}\n\tlocal max = numbers[1]\n\trolling_max[1] = max\n\tfor i = 2, #numbers\
    \ do\n\t\tmax = math.max(max, numbers[i])\n\t\trolling_max[i] = max\n\tend\n\t\
    return rolling_max\nend", "    local max_number = 0\n    local rmax = {}\n   \
    \ for i = 1, #numbers do\n        if numbers[i] > max_number then\n          \
    \  max_number = numbers[i]\n        end\n        rmax[i] = max_number\n    end\n\
    \    return rmax\nend", "    local result = {}\n    local last_max = nil\n   \
    \ for _, n in ipairs(numbers) do\n        last_max = math.max(last_max or n, n)\n\
    \        table.insert(result, last_max)\n    end\n    return result\nend", " \
    \   local n = #numbers\n    local rmax = {}\n    rmax[1] = numbers[1]\n    for\
    \ i = 2, n do\n        rmax[i] = math.max(rmax[i - 1], numbers[i])\n    end\n\
    \    return rmax\nend", "\tlocal max = {}\n\tfor _, n in ipairs(numbers) do\n\t\
    \tif not max[#max] or n > max[#max] then\n\t\t\tmax[#max + 1] = n\n\t\telse\n\t\
    \t\tmax[#max + 1] = max[#max]\n\t\tend\n\tend\n\treturn max\nend", "  -- Validate\
    \ arguments\n  assert(numbers, \"numbers is nil\")\n  assert(type(numbers) ==\
    \ \"table\", \"numbers is not a table\")", "  local maxs = {}\n  local max = numbers[1]\n\
    \  for _, v in ipairs(numbers) do\n    if v > max then\n      max = v\n    end\n\
    \    table.insert(maxs, max)\n  end\n  return maxs\nend", "    local rolling_max\
    \ = {}\n    local max = numbers[1]", "\tlocal length = #numbers\n\tlocal max_numbers\
    \ = {numbers[1]}\n\tfor i = 2, length do\n\t\tmax_numbers[i] = math.max(max_numbers[i\
    \ - 1], numbers[i])\n\tend\n\treturn max_numbers\nend", "    local max_seen =\
    \ 0\n    local result = {}\n    for _, v in ipairs(numbers) do\n        max_seen\
    \ = math.max(max_seen, v)\n        table.insert(result, max_seen)\n    end\n \
    \   return result\nend", "  local result = {}\n  local current_max = numbers[1]\n\
    \  table.insert(result, current_max)\n  for i = 2, #numbers do\n    if numbers[i]\
    \ > current_max then\n      current_max = numbers[i]\n    end\n    table.insert(result,\
    \ current_max)\n  end\n  return result\nend", "    local max_so_far = numbers[1]\n\
    \    local result = { max_so_far }\n    for i = 2, #numbers do\n        local\
    \ number = numbers[i]\n        if number > max_so_far then\n            max_so_far\
    \ = number\n        end\n        result[i] = max_so_far\n    end\n    return result\n\
    end", "    local result = {}\n    local current_max = 0\n    for _, n in ipairs(numbers)\
    \ do\n        current_max = math.max(current_max, n)\n        table.insert(result,\
    \ current_max)\n    end\n    return result\nend", "  local maxs = {}\n  local\
    \ max = -math.huge\n  for k, v in ipairs(numbers) do\n    max = math.max(max,\
    \ v)\n    maxs[k] = max\n  end\n  return maxs\nend", "  local max = numbers[1]\n\
    \  local result = {max}\n  for i = 2, #numbers do\n    if numbers[i] > max then\n\
    \      max = numbers[i]\n    end\n    result[i] = max\n  end\n  return result\n\
    end", "    local max_found = -math.huge\n    local max_until_now = {}\n    for\
    \ i = 1, #numbers do\n        max_found = math.max(max_found, numbers[i])\n  \
    \      max_until_now[i] = max_found\n    end\n    return max_until_now\nend",
  "    local max = nil\n    local result = {}\n    for _, i in ipairs(numbers) do\n\
    \        if not max or i > max then\n            max = i\n        end\n      \
    \  table.insert(result, max)\n    end\n    return result\nend", "    -- Build\
    \ the max of the previous number.\n    local result = {}\n    local max_so_far\
    \ = numbers[1]\n    result[1] = max_so_far\n    for i = 2, #numbers do\n     \
    \   local current = numbers[i]\n        max_so_far = math.max(max_so_far, current)\n\
    \        result[i] = max_so_far\n    end\n    return result\nend", "    local\
    \ result = {}\n    for i = 1, #numbers do\n        local max = 0\n        for\
    \ j = 1, i do\n            max = math.max(max, numbers[j])\n        end\n    \
    \    result[i] = max\n    end\n    return result\nend", "  local t = {}\n  local\
    \ max = numbers[1]\n  for i = 1, #numbers do\n    if numbers[i] > max then\n \
    \     max = numbers[i]\n    end\n    t[i] = max\n  end\n  return t\nend", "  local\
    \ maxes = {}\n  local local_max = -math.huge\n  for i, number in ipairs(numbers)\
    \ do\n    local_max = math.max(local_max, number)\n    maxes[i] = local_max\n\
    \  end\n  return maxes\nend", "  local result = {}\n  local max = nil\n  for _,\
    \ n in ipairs(numbers) do\n    if max == nil or n > max then\n      max = n\n\
    \    end\n    table.insert(result, max)\n  end\n  return result\nend", "    local\
    \ result = {}\n    local curr_max = 0\n    for _, n in ipairs(numbers) do\n  \
    \      curr_max = math.max(curr_max, n)\n        table.insert(result, curr_max)\n\
    \    end\n    return result\nend", "    local result = {}\n    local current_max\
    \ = -math.huge\n    for i, number in ipairs(numbers) do\n        current_max =\
    \ math.max(current_max, number)\n        result[i] = current_max\n    end\n  \
    \  return result\nend", "  local maximum = math.mininteger\n  local maxes = {}\n\
    \  for _, number in ipairs(numbers) do\n    maximum = math.max(maximum, number)\n\
    \    table.insert(maxes, maximum)\n  end\n  return maxes\nend", "    local maxes\
    \ = {}\n    local current_max = nil\n    for i, n in ipairs(numbers) do\n    \
    \    if n > current_max then\n            current_max = n\n        end\n     \
    \   maxes[i] = current_max\n    end\n    return maxes\nend", "    local res =\
    \ {}\n    local max = 0\n    for i = 1, #numbers do\n        max = math.max(max,\
    \ numbers[i])\n        res[i] = max\n    end\n    return res\nend", "  local res\
    \ = {}\n  local max = numbers[1]\n  res[1] = max\n  for i = 2, #numbers do\n \
    \   if numbers[i] > max then\n      max = numbers[i]\n    end\n    res[i] = max\n\
    \  end\n  return res\nend", "    local max = 0\n    local max_numbers = {}\n \
    \   for _, number in ipairs(numbers) do\n        max = math.max(max, number)\n\
    \        table.insert(max_numbers, max)\n    end\n    return max_numbers\nend",
  "    local max_elems = {}\n    local curr_max = -math.huge\n    for i, num in ipairs(numbers)\
    \ do\n        curr_max = math.max(curr_max, num)\n        max_elems[i] = curr_max\n\
    \    end\n    return max_elems\nend", "\tif #numbers == 0 then\n\t\treturn {}\n\
    \tend\n\tlocal maximum = numbers[1]\n\tlocal result = {maximum}\n\tfor _, n in\
    \ ipairs(numbers) do\n\t\tmaximum = math.max(maximum, n)\n\t\ttable.insert(result,\
    \ maximum)\n\tend\n\treturn result\nend", "\tlocal ret = {}\n\tlocal max = numbers[1]\n\
    \tret[1] = max\n\tfor i = 2, #numbers do\n\t\tmax = math.max(max, numbers[i])\n\
    \t\tret[i] = max\n\tend\n\treturn ret\nend", "    local res = {}\n    local current_max\
    \ = 0\n    for i, number in ipairs(numbers) do\n        if number > current_max\
    \ then\n            current_max = number\n        end\n        res[i] = current_max\n\
    \    end\n    return res\nend", "    local max_until_current = {}\n    local max_value\
    \ = 0\n    for index, number in ipairs(numbers) do\n        max_value = math.max(max_value,\
    \ number)\n        max_until_current[index] = max_value\n    end\n    return max_until_current\n\
    end", "\tassert(type(numbers) == \"table\")\n\tlocal result = {}\n\tlocal current_max\
    \ = numbers[1]\n\tfor i = 1, #numbers do\n\t\tcurrent_max = math.max(current_max,\
    \ numbers[i])\n\t\tresult[i] = current_max\n\tend\n\treturn result\nend", "  local\
    \ rmax = {numbers[1]}\n  for i = 2, #numbers do\n    rmax[i] = math.max(rmax[i\
    \ - 1], numbers[i])\n  end\n  return rmax\nend", "    local maximum = numbers[1]\n\
    \    local result = {maximum}\n    for i=2, #numbers do\n        if numbers[i]\
    \ > maximum then\n            maximum = numbers[i]\n        end\n        result[i]\
    \ = maximum\n    end\n    return result\nend", "    local max, rolling_max = 0,\
    \ {}\n    for i = 1, #numbers do\n        max = math.max(max, numbers[i])\n  \
    \      rolling_max[i] = max\n    end\n    return rolling_max\nend", "    local\
    \ max = 0\n    local result = {}\n    for _, number in ipairs(numbers) do\n  \
    \      max = math.max(max, number)\n        table.insert(result, max)\n    end\n\
    \    return result\nend", "    local result = {}\n    local current_max = nil\n\
    \    for _, n in ipairs(numbers) do\n        if current_max == nil or n > current_max\
    \ then\n            current_max = n\n        end\n        table.insert(result,\
    \ current_max)\n    end\n    return result\nend", "    local rolling_max = 0\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if number\
    \ > rolling_max then\n            rolling_max = number\n        end\n        table.insert(result,\
    \ rolling_max)\n    end\n    return result\nend", "  if #numbers == 0 then\n \
    \   return numbers\n  end", "    local current_max, result = 0, {}\n    for i,\
    \ v in ipairs(numbers) do\n        if i == 1 then\n            current_max = v\n\
    \        else\n            current_max = math.max(current_max, v)\n        end\n\
    \        result[i] = current_max\n    end\n    return result\nend", "\tlocal l\
    \ = #numbers\n\tlocal maximum = {}\n\tfor i = 1, l do\n\t\tlocal m = numbers[i]\n\
    \t\tfor j = i + 1, l do\n\t\t\tif numbers[j] > m then\n\t\t\t\tm = numbers[j]\n\
    \t\t\tend\n\t\tend\n\t\tmaximum[i] = m\n\tend\n\treturn maximum\nend", "  local\
    \ result = {}\n  local current_max = -math.huge\n  for i, number in ipairs(numbers)\
    \ do\n    current_max = math.max(current_max, number)\n    result[i] = current_max\n\
    \  end\n  return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    for _, v in ipairs(numbers) do\n        if v > max then\n            max\
    \ = v\n        end\n        table.insert(result, max)\n    end\n    return result\n\
    end", "    local m = 0\n    local max = {}\n    for _, n in ipairs(numbers) do\n\
    \        if n > m then\n            m = n\n        end\n        table.insert(max,\
    \ m)\n    end\n    return max\nend", "\tlocal size = #numbers\n\tlocal max = 0\n\
    \tlocal result = {}\n\tfor index = 1, size do\n\t\tlocal element = numbers[index]\n\
    \t\tmax = math.max(max, element)\n\t\tresult[index] = max\n\tend\n\treturn result\n\
    end", "  assert(type(numbers) == \"table\")\n  local result = {}\n  local max\
    \ = 0\n  for i = 1, #numbers do\n    max = math.max(max, numbers[i])\n    result[i]\
    \ = max\n  end\n  return result\nend", "\tlocal max = -math.huge\n\tlocal result\
    \ = {}\n\tfor _, v in ipairs(numbers) do\n\t\tmax = math.max(max, v)\n\t\tresult[#result\
    \ + 1] = max\n\tend\n\treturn result\nend", "  local result = {}\n  local max_value\
    \ = numbers[1]\n  for _, n in ipairs(numbers) do\n    result[#result + 1] = max_value\n\
    \    if n > max_value then\n      max_value = n\n    end\n  end\n  return result\n\
    end", "    local max = nil\n    local result = {}\n    for i = 1, #numbers do\n\
    \        max = math.max(max or numbers[i], numbers[i])\n        result[i] = max\n\
    \    end\n    return result\nend", "    local maxs = {}\n    for i = 1, #numbers\
    \ do\n        maxs[i] = math.max(unpack(numbers, 1, i))\n    end\n    return maxs\n\
    end", "\tlocal max_so_far = -math.huge\n\tlocal length = #numbers\n\tlocal results\
    \ = {}\n\tfor i = 1, length do\n\t\tif numbers[i] > max_so_far then\n\t\t\tmax_so_far\
    \ = numbers[i]\n\t\tend\n\t\tresults[i] = max_so_far\n\tend\n\treturn results\n\
    end", "  local maximums = {numbers[1]}\n  for i = 2, #numbers do\n    maximums[i]\
    \ = math.max(maximums[i - 1], numbers[i])\n  end\n  return maximums\nend", " \
    \   local result = {}\n    local current_max = numbers[1]\n    for i, number in\
    \ ipairs(numbers) do\n        if number > current_max then\n            current_max\
    \ = number\n        end\n        result[i] = current_max\n    end\n    return\
    \ result\nend", "    local max = numbers[1]\n    local result = {max}\n    for\
    \ _, num in ipairs(numbers) do\n        if num > max then\n            max = num\n\
    \        end\n        table.insert(result, max)\n    end\n    return result\n\
    end", "    local max = numbers[1]\n    local function f()\n        return max\n\
    \    end\n    local function f_next(current)\n        if max < current then\n\
    \            max = current\n        end\n        return max\n    end\n    return\
    \ l.imap(f, numbers), l.imap(f_next, numbers)\nend", "    local res = {}\n   \
    \ local m = numbers[1]\n    for i, v in ipairs(numbers) do\n        m = math.max(m,\
    \ v)\n        res[i] = m\n    end\n    return res\nend", "  local max_so_far =\
    \ numbers[1]\n  local result = {max_so_far}\n  for i = 2, #numbers do\n    local\
    \ next_number = numbers[i]\n    if next_number > max_so_far then\n      max_so_far\
    \ = next_number\n    end\n    result[i] = max_so_far\n  end\n  return result\n\
    end", "    -- This is just looking for the leftmost maximum number in the list.\n\
    \    local max_value = numbers[1]\n    local max_index = 1\n    local rolling_max_list\
    \ = {}\n    -- Skipping the first number since it's the leftmost maximum.\n  \
    \  for i = 2, #numbers do\n        -- If the current number is a new maximum,\
    \ then set it as the maximum\n        -- and update the rolling maximum list.\n\
    \        if numbers[i] > max_value then\n            max_value = numbers[i]\n\
    \            max_index = i\n            -- Update the rolling maximum list.\n\
    \            for j = max_index, i do\n                rolling_max_list[j] = max_value\n\
    \            end\n        -- Else, if it's not a new maximum, then just update\
    \ the rolling maximum\n        -- list by appending the current maximum value\
    \ to the end of the list.\n        else\n            rolling_max_list[i] = max_value\n\
    \        end\n    end\n    return rolling_max_list\nend", "    local res = {}\n\
    \    local crt_max = numbers[1]\n    res[1] = crt_max\n    for i = 2, #numbers\
    \ do\n        local crt = numbers[i]\n        if crt > crt_max then\n        \
    \    crt_max = crt\n        end\n        res[i] = crt_max\n    end\n    return\
    \ res\nend", "  local max = 0\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    max = math.max(max, number)\n    table.insert(result, max)\n  end\n\
    \  return result\nend", "    local m = {}\n    local max = 0\n    for i, v in\
    \ ipairs(numbers) do\n        if v > max then\n            max = v\n        end\n\
    \        m[i] = max\n    end\n    return m\nend", "    local result = {}\n   \
    \ local current_max = nil\n    for _, value in ipairs(numbers) do\n        current_max\
    \ = math.max(current_max or value, value)\n        table.insert(result, current_max)\n\
    \    end\n    return result\nend", "    local rolling_max = {}\n    local i =\
    \ 1\n    for _, number in ipairs(numbers) do\n        local max = rolling_max[i-1]\
    \ or 0\n        rolling_max[i] = max\n        if number > max then\n         \
    \   rolling_max[i] = number\n        end\n        i = i + 1\n    end\n    return\
    \ rolling_max\nend", "    local max = 0\n    local result = {}\n    for _, number\
    \ in ipairs(numbers) do\n        max = math.max(max, number)\n        table.insert(result,\
    \ max)\n    end\n    return result\nend", "    local current_max = numbers[1]\n\
    \    local result = {current_max}\n    for _, n in ipairs(numbers) do\n      \
    \  if n > current_max then\n            current_max = n\n        end\n       \
    \ table.insert(result, current_max)\n    end\n    return result\nend", "  local\
    \ max = numbers[1]\n  local result = {max}\n  for i = 2, #numbers do\n    if numbers[i]\
    \ > max then\n      max = numbers[i]\n    end\n    result[i] = max\n  end\n  return\
    \ result\nend", "  local m = {}\n  local max = numbers[1]", "    local result\
    \ = {}\n    local max = 0\n    for i, num in ipairs(numbers) do\n        if num\
    \ > max then\n            max = num\n        end\n        result[i] = max\n  \
    \  end\n    return result\nend", "    local result = {}\n    local max_so_far\
    \ = -math.huge\n    for _, v in ipairs(numbers) do\n        max_so_far = math.max(max_so_far,\
    \ v)\n        table.insert(result, max_so_far)\n    end\n    return result\nend",
  "    local output = {}\n    local last_max = -math.huge\n    for i, v in ipairs(numbers)\
    \ do\n        last_max = math.max(last_max, v)\n        output[i] = last_max\n\
    \    end\n    return output\nend", "\tlocal result = {}\n\tlocal max = 0\n\tfor\
    \ _, number in ipairs(numbers) do\n\t\tif number > max then\n\t\t\tmax = number\n\
    \t\tend\n\t\tresult[#result + 1] = max\n\tend\n\treturn result\nend", "  local\
    \ result = {}\n  local current_max = 0\n  for i = 1, #numbers do\n    local number\
    \ = numbers[i]\n    current_max = math.max(current_max, number)\n    result[i]\
    \ = current_max\n  end\n  return result\nend", "  local rolling_max_list = {}\n\
    \  local max_element = -math.huge\n  for i, v in ipairs(numbers) do\n    if v\
    \ > max_element then\n      max_element = v\n    end\n    rolling_max_list[i]\
    \ = max_element\n  end\n  return rolling_max_list\nend", "  local max = numbers[1]\n\
    \  local result = { max }\n  for i = 2, #numbers do\n    max = math.max(max, numbers[i])\n\
    \    result[i] = max\n  end\n  return result\nend", "    local max, maxes = numbers[1],\
    \ {}\n    for i = 1, #numbers do\n        max = math.max(max, numbers[i])\n  \
    \      maxes[i] = max\n    end\n    return maxes\nend", "  local max = numbers[1]\n\
    \  local rolling_max = {max}\n  for i = 2, #numbers do\n    local number = numbers[i]\n\
    \    if number > max then\n      max = number\n    end\n    rolling_max[i] = max\n\
    \  end\n  return rolling_max\nend", "    local max_numbers = {}\n    local max_value\
    \ = -math.huge\n    for i = 1, #numbers do\n        max_value = math.max(max_value,\
    \ numbers[i])\n        max_numbers[i] = max_value\n    end\n    return max_numbers\n\
    end", "    local result = {}\n    local max = numbers[1]\n    table.insert(result,\
    \ max)\n    for i = 2, #numbers do\n        local current = numbers[i]\n     \
    \   max = math.max(max, current)\n        table.insert(result, max)\n    end\n\
    \    return result\nend", "    local rolling_maxes = {}\n    local current_max\
    \ = numbers[1]\n    table.insert(rolling_maxes, current_max)\n    for _, number\
    \ in ipairs(numbers) do\n        if number > current_max then\n            current_max\
    \ = number\n        end\n        table.insert(rolling_maxes, current_max)\n  \
    \  end\n    return rolling_maxes\nend", "    local result = {}\n    local max_value\
    \ = 0\n    for i = 1, #numbers do\n        if numbers[i] > max_value then\n  \
    \          max_value = numbers[i]\n        end\n        result[i] = max_value\n\
    \    end\n    return result\nend", "    local result = {}\n    local maximum =\
    \ numbers[1]\n    result[1] = maximum\n    for i = 2, #numbers do\n        if\
    \ numbers[i] > maximum then\n            maximum = numbers[i]\n        end\n \
    \       result[i] = maximum\n    end\n    return result\nend", "  local max_until_now\
    \ = numbers[1]\n  local result = { max_until_now }\n  for i = 2, #numbers do\n\
    \    if numbers[i] > max_until_now then\n      max_until_now = numbers[i]\n  \
    \  end\n    result[i] = max_until_now\n  end\n  return result\nend", "  local\
    \ result = {}\n  local max = numbers[1]\n  for _, value in ipairs(numbers) do\n\
    \    max = math.max(max, value)\n    table.insert(result, max)\n  end\n  return\
    \ result\nend", "  local seen_max, result = numbers[1], {}\n  for _, number in\
    \ ipairs(numbers) do\n    seen_max = math.max(seen_max, number)\n    table.insert(result,\
    \ seen_max)\n  end\n  return result\nend", "    local result = {}\n    local current_max\
    \ = 0\n    for _, number in ipairs(numbers) do\n        current_max = math.max(current_max,\
    \ number)\n        table.insert(result, current_max)\n    end\n    return result\n\
    end", "  local maximum = 0\n  local result = {}\n  for _, v in ipairs(numbers)\
    \ do\n    if v > maximum then\n      maximum = v\n    end\n    table.insert(result,\
    \ maximum)\n  end\n  return result\nend", "    local roll = {}\n    local max\
    \ = 0\n    for i = 1, #numbers do\n        max = math.max(max, numbers[i])\n \
    \       roll[i] = max\n    end\n    return roll\nend", "\tlocal current_max =\
    \ numbers[1]\n\tlocal result = {numbers[1]}\n\tfor i = 2, #numbers do\n\t\tcurrent_max\
    \ = math.max(current_max, numbers[i])\n\t\tresult[i] = current_max\n\tend\n\t\
    return result\nend", "    local result = {}\n    local current_max = numbers[1]\n\
    \    result[1] = current_max\n    for i = 2, #numbers do\n        if numbers[i]\
    \ > current_max then\n            current_max = numbers[i]\n        end\n    \
    \    result[i] = current_max\n    end\n    return result\nend", "    local result\
    \ = {}\n    local max = numbers[1]\n    table.insert(result, max)\n    for i =\
    \ 2, #numbers do\n        local cur = numbers[i]\n        if cur > max then\n\
    \            max = cur\n        end\n        table.insert(result, max)\n    end\n\
    \    return result\nend", "    local result = {}\n    local current_max = 0\n\
    \    for i, v in ipairs(numbers) do\n        if v > current_max then\n       \
    \     current_max = v\n        end\n        result[i] = current_max\n    end\n\
    \    return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    table.insert(result, max)\n    for i = 2, #numbers do\n        if numbers[i]\
    \ > max then\n            max = numbers[i]\n        end\n        table.insert(result,\
    \ max)\n    end\n    return result\nend", "    local max = 0\n    local result\
    \ = {}\n    for _, value in ipairs(numbers) do\n        max = math.max(max, value)\n\
    \        table.insert(result, max)\n    end\n    return result\nend", "    local\
    \ length = #numbers\n    local max_list = {}\n    local max_val = numbers[1]\n\
    \    table.insert(max_list, max_val)\n    for i = 2, length do\n        local\
    \ val = numbers[i]\n        if val > max_val then\n            max_val = val\n\
    \        end\n        table.insert(max_list, max_val)\n    end\n    return max_list\n\
    end", "  local result = {}\n  local max = numbers[1]\n  result[1] = max\n  for\
    \ i = 2, #numbers do\n    if numbers[i] > max then\n      max = numbers[i]\n \
    \   end\n    result[i] = max\n  end\n  return result\nend", "  local max = numbers[1]\n\
    \  local rolling_maxes = {max}\n  for index = 2, #numbers do\n    local number\
    \ = numbers[index]\n    if number > max then\n      max = number\n    end\n  \
    \  rolling_maxes[index] = max\n  end\n  return rolling_maxes\nend", "  local result\
    \ = {}\n  local max = nil\n  for _, number in ipairs(numbers) do\n    if max ==\
    \ nil or number > max then\n      max = number\n    end\n    table.insert(result,\
    \ max)\n  end\n  return result\nend", "  local rolling_max_list = {}\n  local\
    \ current_max = numbers[1]\n  table.insert(rolling_max_list, current_max)\n  for\
    \ i = 2, #numbers do\n    local number = numbers[i]\n    if number > current_max\
    \ then\n      current_max = number\n    end\n    table.insert(rolling_max_list,\
    \ current_max)\n  end\n  return rolling_max_list\nend", "    if #numbers == 0\
    \ then\n        return {}\n    end", "    local rolling_max = {}\n    local max\
    \ = nil\n    for i, v in ipairs(numbers) do\n        if not max or v > max then\n\
    \            max = v\n        end\n        rolling_max[i] = max\n    end\n   \
    \ return rolling_max\nend", "  local result = {}\n  local max_el = -math.huge\n\
    \  for i = 1, #numbers do\n    max_el = math.max(max_el, numbers[i])\n    result[i]\
    \ = max_el\n  end\n  return result\nend", "    local sequence = {}\n    local\
    \ current_max = 0\n    for i, v in ipairs(numbers) do\n        if v > current_max\
    \ then\n            current_max = v\n        end\n        sequence[i] = current_max\n\
    \    end\n    return sequence\nend", "    local max_so_far = numbers[1]\n    local\
    \ result = {max_so_far}\n    for i = 2, #numbers do\n        local new_max = math.max(max_so_far,\
    \ numbers[i])\n        result[i] = new_max\n        max_so_far = new_max\n   \
    \ end\n    return result\nend", "  local rmax = {}\n  local max = 0\n  for _,\
    \ n in ipairs(numbers) do\n    max = math.max(max, n)\n    table.insert(rmax,\
    \ max)\n  end\n  return rmax\nend", "  local max = numbers[1]\n  local result\
    \ = {max}\n  for i = 2, #numbers do\n    if numbers[i] > max then\n      max =\
    \ numbers[i]\n    end\n    result[i] = max\n  end\n  return result\nend", "\t\
    local rolling_max_result = {}\n\tlocal current_max = numbers[1]\n\trolling_max_result[1]\
    \ = current_max\n\tfor idx = 2, #numbers do\n\t\tif numbers[idx] > current_max\
    \ then\n\t\t\tcurrent_max = numbers[idx]\n\t\tend\n\t\trolling_max_result[idx]\
    \ = current_max\n\tend\n\treturn rolling_max_result\nend", "    local result =\
    \ {}\n    local current_max = numbers[1]\n    result[1] = current_max\n    for\
    \ i = 2, #numbers do\n        if numbers[i] > current_max then\n            current_max\
    \ = numbers[i]\n        end\n        result[i] = current_max\n    end\n    return\
    \ result\nend", "  local maximum = 0\n  local ret = {}\n  for i, n in ipairs(numbers)\
    \ do\n    maximum = math.max(maximum, n)\n    ret[i] = maximum\n  end\n  return\
    \ ret\nend", "    local maximums = {}\n    local max = numbers[1]\n    for i,\
    \ value in ipairs(numbers) do\n        max = math.max(max, value)\n        maximums[i]\
    \ = max\n    end\n    return maximums\nend", "    local output = {}\n    local\
    \ max = numbers[1]\n    output[1] = max\n    for i = 2, #numbers do\n        local\
    \ n = numbers[i]\n        if n > max then\n            max = n\n        end\n\
    \        output[i] = max\n    end\n    return output\nend", "    local max_seen\
    \ = numbers[1]\n    local max_list = { max_seen }\n    for i = 2, #numbers do\n\
    \        local n = numbers[i]\n        if n > max_seen then\n            max_seen\
    \ = n\n        end\n        max_list[i] = max_seen\n    end\n    return max_list\n\
    end", "    local max = numbers[1]\n    local res = {max}\n    for i = 2, #numbers\
    \ do\n        max = math.max(max, numbers[i])\n        res[i] = max\n    end\n\
    \    return res\nend", "    -- TODO: add implementation\n    return {}\nend",
  "    local result = {}\n    local max_so_far = 0\n    for i, number in ipairs(numbers)\
    \ do\n        max_so_far = math.max(max_so_far, number)\n        result[i] = max_so_far\n\
    \    end\n    return result\nend", "    local result = {}\n    local current_max\
    \ = 0\n    for _, number in ipairs(numbers) do\n        current_max = math.max(current_max,\
    \ number)\n        table.insert(result, current_max)\n    end\n    return result\n\
    end", "    local max_so_far = numbers[1]\n    local result = {numbers[1]}\n  \
    \  for i = 2, #numbers do\n        max_so_far = math.max(max_so_far, numbers[i])\n\
    \        result[i] = max_so_far\n    end\n    return result\nend", "    local\
    \ result = {}\n    local max = 0\n    for i = 1, #numbers do\n        max = math.max(max,\
    \ numbers[i])\n        result[i] = max\n    end\n    return result\nend", "  \
    \  local result = {}\n    local max = numbers[1]\n    table.insert(result, max)\n\
    \    for i = 2, #numbers do\n        local number = numbers[i]\n        if number\
    \ > max then\n            max = number\n        end\n        table.insert(result,\
    \ max)\n    end\n    return result\nend", "  local result = {}\n  local max =\
    \ numbers[1]\n  result[1] = max\n  for _, n in ipairs(numbers) do\n    max = math.max(max,\
    \ n)\n    table.insert(result, max)\n  end\n  return result\nend", "    local\
    \ rolling_max = {}\n    local last_max = 0\n    for _, v in ipairs(numbers) do\n\
    \        last_max = math.max(last_max, v)\n        table.insert(rolling_max, last_max)\n\
    \    end\n    return rolling_max\nend", "  local maximums = {}\n  local last_maximum\
    \ = numbers[1]\n  maximums[1] = last_maximum\n  for i = 2, #numbers do\n    local\
    \ next_maximum = numbers[i]\n    if next_maximum > last_maximum then\n      last_maximum\
    \ = next_maximum\n    end\n    maximums[i] = last_maximum\n  end\n  return maximums\n\
    end", "    -- TODO\nend", "    local max = 0\n    local rolling_max = {}\n   \
    \ for i, number in ipairs(numbers) do\n        max = math.max(max, number)\n \
    \       rolling_max[i] = max\n    end\n    return rolling_max\nend", "    local\
    \ max_values = {}\n    local max_value = -math.huge\n    for i = 1, #numbers do\n\
    \        local value = numbers[i]\n        if value > max_value then\n       \
    \     max_value = value\n        end\n        max_values[i] = max_value\n    end\n\
    \    return max_values\nend", "    local max = numbers[1]\n    local rolling_max_list\
    \ = {max}\n    for i = 2, #numbers do\n        max = math.max(max, numbers[i])\n\
    \        rolling_max_list[i] = max\n    end\n    return rolling_max_list\nend",
  "    local result = {}\n    local maximum = nil\n    for _, number in ipairs(numbers)\
    \ do\n        maximum = math.max(maximum or number, number)\n        table.insert(result,\
    \ maximum)\n    end\n    return result\nend", "  local num = numbers[1]\n  local\
    \ res = { num }\n  for i = 2, #numbers do\n    num = math.max(num, numbers[i])\n\
    \    res[i] = num\n  end\n  return res\nend", "  local max = 0\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if n > max then\n      max = n\n\
    \    end\n    table.insert(result, max)\n  end\n  return result\nend", "    local\
    \ result = {}\n    local max = nil\n    for _, number in ipairs(numbers) do\n\
    \        max = math.max(max or 0, number)\n        table.insert(result, max)\n\
    \    end\n    return result\nend", "\tlocal list = {}\n\tlocal roll = {}\n\tlocal\
    \ max = 0\n\tfor i = 1, #numbers do\n\t\tlist[i] = numbers[i]\n\t\tif list[i]\
    \ > max then\n\t\t\tmax = list[i]\n\t\tend\n\t\troll[i] = max\n\tend\n\treturn\
    \ roll\nend", "  assert(type(numbers) == \"table\", \"argument is not a table\"\
    )\n  local size = #numbers\n  local prev_max = 0\n  local result = {}\n  for i\
    \ = 1, size do\n    prev_max = math.max(prev_max, numbers[i])\n    result[i] =\
    \ prev_max\n  end\n  return result\nend", "    local result = {}\n    local max_value\
    \ = numbers[1]\n    table.insert(result, max_value)\n    for i = 2, #numbers do\n\
    \        if numbers[i] > max_value then\n            max_value = numbers[i]\n\
    \        end\n        table.insert(result, max_value)\n    end\n    return result\n\
    end", "    local maxes = {}\n    local max = numbers[1]\n    for i, number in\
    \ ipairs(numbers) do\n        if number > max then\n            max = number\n\
    \        end\n        maxes[i] = max\n    end\n    return maxes\nend", "    local\
    \ result = {}\n    local current_max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        if number > current_max then\n            current_max = number\n\
    \        end\n        table.insert(result, current_max)\n    end\n    return result\n\
    end", "    local max_so_far = -math.huge\n    local result = {}\n    for _, n\
    \ in ipairs(numbers) do\n        max_so_far = math.max(max_so_far, n)\n      \
    \  table.insert(result, max_so_far)\n    end\n    return result\nend", "    local\
    \ maxes = {}\n    local current_max = numbers[1]\n    for _, number in ipairs(numbers)\
    \ do\n        current_max = math.max(current_max, number)\n        table.insert(maxes,\
    \ current_max)\n    end\n    return maxes\nend", "    local result = {}\n    local\
    \ max_seen = -math.huge\n    for i = 1, #numbers do\n        max_seen = math.max(max_seen,\
    \ numbers[i])\n        result[i] = max_seen\n    end\n    return result\nend",
  "  local rolling_maxes = {}\n  local current_max = 0\n  for i, n in ipairs(numbers)\
    \ do\n    current_max = math.max(current_max, n)\n    rolling_maxes[i] = current_max\n\
    \  end\n  return rolling_maxes\nend", "  local result = {}\n  local current_max\
    \ = 0\n  for _, number in ipairs(numbers) do\n    if current_max < number then\n\
    \      current_max = number\n    end\n    table.insert(result, current_max)\n\
    \  end\n  return result\nend", "  -- we are building a new sequence of numbers\
    \ by taking the maximum\n  -- of current element or the previous maximum and the\
    \ current element\n  local max = 0\n  return map(function(n) max = math.max(max,\
    \ n); return max end, numbers)\nend", "    local maxes = {}\n    local current_max\
    \ = numbers[1]\n    for _, number in ipairs(numbers) do\n        current_max =\
    \ math.max(current_max, number)\n        table.insert(maxes, current_max)\n  \
    \  end\n    return maxes\nend", "    local result = {}\n    local max_until_now\
    \ = -math.huge\n    for _, number in ipairs(numbers) do\n        max_until_now\
    \ = math.max(max_until_now, number)\n        table.insert(result, max_until_now)\n\
    \    end\n    return result\nend", "    local result = {}\n    local current_max\
    \ = -math.huge\n    for i, n in ipairs(numbers) do\n        current_max = math.max(current_max,\
    \ n)\n        result[i] = current_max\n    end\n    return result\nend", "   \
    \ if #numbers == 0 then\n        return {}\n    end", "  local result = {}\n \
    \ local max = 0\n  for _, number in ipairs(numbers) do\n    max = math.max(max,\
    \ number)\n    table.insert(result, max)\n  end\n  return result\nend", "    local\
    \ max_so_far = math.mininteger\n    local result = {}\n    for i = 1, #numbers\
    \ do\n        max_so_far = math.max(max_so_far, numbers[i])\n        result[i]\
    \ = max_so_far\n    end\n    return result\nend", "    local max = numbers[1]\n\
    \    local res = {max}\n    for i=2, #numbers do\n        max = math.max(max,\
    \ numbers[i])\n        res[i] = max\n    end\n    return res\nend", "    local\
    \ maxes = {}\n    local max   = nil\n    for i, number in ipairs(numbers) do\n\
    \        if not max or number > max then\n            max = number\n        end\n\
    \        maxes[i] = max\n    end\n    return maxes\nend", "  local max, res =\
    \ -math.huge, {}\n  for _, n in ipairs(numbers) do\n    max = math.max(max, n)\n\
    \    table.insert(res, max)\n  end\n  return res\nend", "\tlocal rolling_max =\
    \ {}\n\tlocal current_max = -math.huge\n\tfor _, n in ipairs(numbers) do\n\t\t\
    current_max = math.max(current_max, n)\n\t\ttable.insert(rolling_max, current_max)\n\
    \tend\n\treturn rolling_max\nend", "\tlocal max_so_far = 0\n\tlocal ret = {}\n\
    \tfor i, n in ipairs(numbers) do\n\t\tmax_so_far = math.max(max_so_far, n)\n\t\
    \tret[i] = max_so_far\n\tend\n\treturn ret\nend", "  local result = {}\n  local\
    \ current_max = nil\n  for i = 1, #numbers do\n    local number = numbers[i]\n\
    \    if current_max == nil or number > current_max then\n      current_max = number\n\
    \    end\n    result[i] = current_max\n  end\n  return result\nend", "    local\
    \ maximum = numbers[1]\n    local result = {maximum}\n    for i = 2, #numbers\
    \ do\n        if numbers[i] > maximum then\n            maximum = numbers[i]\n\
    \        end\n        result[i] = maximum\n    end\n    return result\nend", " \
    \   local result = {}\n    local prev_max = nil\n    for _, val in ipairs(numbers)\
    \ do\n        if prev_max == nil or val > prev_max then\n            prev_max\
    \ = val\n        end\n        table.insert(result, prev_max)\n    end\n    return\
    \ result\nend", "    local result = {}\n    local current_max = numbers[1]\n \
    \   for i = 1, #numbers do\n        if numbers[i] > current_max then\n       \
    \     current_max = numbers[i]\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend", "    local result = {}\n    local curr_max\
    \ = -math.huge\n    for i, n in ipairs(numbers) do\n        if n > curr_max then\n\
    \            curr_max = n\n        end\n        result[i] = curr_max\n    end\n\
    \    return result\nend", "    local result = {}\n    local high = numbers[1]",
  "  local res = {}\n  local maximum = nil\n  for _, num in ipairs(numbers) do\n \
    \   if maximum == nil or num > maximum then\n      maximum = num\n    end\n  \
    \  table.insert(res, maximum)\n  end\n  return res\nend", "    local result =\
    \ {}\n    local local_max = numbers[1]\n    for i = 1, #numbers do\n        local_max\
    \ = math.max(local_max, numbers[i])\n        result[i] = local_max\n    end\n\
    \    return result\nend", "    local max_so_far = 0\n    local result = {}\n \
    \   for i = 1, #numbers do\n        if numbers[i] > max_so_far then\n        \
    \    max_so_far = numbers[i]\n        end\n        result[i] = max_so_far\n  \
    \  end\n    return result\nend", "    local max = 0\n    local result = {}\n \
    \   for _, n in ipairs(numbers) do\n        max = math.max(max, n)\n        table.insert(result,\
    \ max)\n    end\n    return result\nend", "  local result = {}\n  local max =\
    \ 0\n  for i = 1, #numbers do\n    max = math.max(max, numbers[i])\n    result[i]\
    \ = max\n  end\n  return result\nend", "    local maxs = {}\n    local max = 0\n\
    \    for _, number in ipairs(numbers) do\n        if number > max then\n     \
    \       max = number\n        end\n        maxs[#maxs + 1] = max\n    end\n  \
    \  return maxs\nend", "    local next = function(n)\n        return iter(numbers):next()\n\
    \    end\n    local rolling_max = nil\n    local result = {}\n    for n in iter(numbers)\
    \ do\n        if rolling_max == nil or n > rolling_max then\n            rolling_max\
    \ = n\n        end\n        result[#result + 1] = rolling_max\n    end\n    return\
    \ result\nend", "  if #numbers < 1 then\n    return {}\n  end", "\tlocal max =\
    \ 0\n\tlocal result = {}\n\tfor _, v in ipairs(numbers) do\n\t\tif v > max then\n\
    \t\t\tmax = v\n\t\tend\n\t\ttable.insert(result, max)\n\tend\n\treturn result\n\
    end", "    local result = {}\n    local max_until_i = -math.huge\n    for i =\
    \ 1, #numbers do\n        local current = numbers[i]\n        max_until_i = math.max(max_until_i,\
    \ current)\n        result[i] = max_until_i\n    end\n    return result\nend",
  "    local rolling_maxs = {}\n    local rolling_max = numbers[1]\n    for i,number\
    \ in ipairs(numbers) do\n        if number > rolling_max then\n            rolling_max\
    \ = number\n        end\n        rolling_maxs[i] = rolling_max\n    end\n    return\
    \ rolling_maxs\nend", "  local maxes = {}\n  local current_max = numbers[1]\n\
    \  for i, v in ipairs(numbers) do\n    if v > current_max then\n      current_max\
    \ = v\n    end\n    maxes[i] = current_max\n  end\n  return maxes\nend", "   \
    \ -- Initialize the rolling max list. We assume the 1st element is the max element\
    \ found.\n    local rolling_max = {numbers[1]}", "\tlocal ret = {}\n\tlocal cur_max\
    \ = numbers[1]\n\tfor i = 1, #numbers do\n\t\tret[i] = cur_max\n\t\tif numbers[i]\
    \ > cur_max then\n\t\t\tcur_max = numbers[i]\n\t\tend\n\tend\n\treturn ret\nend",
  "    local result = {}\n    local last_max = nil\n    for i, num in ipairs(numbers)\
    \ do\n        if last_max == nil or num > last_max then\n            last_max\
    \ = num\n        end\n        result[i] = last_max\n    end\n    return result\n\
    end", "    local result = {}\n    local rolling_max = -math.huge\n    for i, n\
    \ in ipairs(numbers) do\n        if n > rolling_max then\n            rolling_max\
    \ = n\n        end\n        result[i] = rolling_max\n    end\n    return result\n\
    end", "  local out = {}\n  local max = 0\n  for _, n in ipairs(numbers) do\n \
    \   max = math.max(max, n)\n    table.insert(out, max)\n  end\n  return out\n\
    end", "  local current_max = 0\n  local result = {}\n  for i = 1, #numbers do\n\
    \    current_max = math.max(current_max, numbers[i])\n    result[i] = current_max\n\
    \  end\n  return result\nend", "    local maximum = numbers[1]\n    local maximums\
    \ = {maximum}\n    for i=2, #numbers do\n        maximum = math.max(maximum, numbers[i])\n\
    \        maximums[i] = maximum\n    end\n    return maximums\nend", "    local\
    \ maximum = 0\n    local result = {}\n    for i = 1, #numbers do\n        maximum\
    \ = math.max(maximum, numbers[i])\n        result[i] = maximum\n    end\n    return\
    \ result\nend", "    local max = numbers[1]\n    local result = {max}\n    for\
    \ i = 2, #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        result[i] = max\n    end\n    return result\nend", "   \
    \ local rmax = {}\n    local m = numbers[1]\n    rmax[1] = m\n    for i = 2, #numbers\
    \ do\n        if numbers[i] > m then\n            m = numbers[i]\n        end\n\
    \        rmax[i] = m\n    end\n    return rmax\nend", "  local acc = {}\n  local\
    \ current_max = numbers[1]\n  table.insert(acc, current_max)\n  for _, x in ipairs(numbers)\
    \ do\n    if x > current_max then\n      current_max = x\n    end\n    table.insert(acc,\
    \ current_max)\n  end\n  return acc\nend", "  local result = {}\n  local current_max\
    \ = numbers[1]\n  result[1] = current_max\n  for i = 2, #numbers do\n    current_max\
    \ = math.max(current_max, numbers[i])\n    result[i] = current_max\n  end\n  return\
    \ result\nend", "\tlocal maximums = {}\n\tlocal max = numbers[1]\n\tmaximums[1]\
    \ = max\n\tfor i = 2, #numbers do\n\t\tlocal new = numbers[i]\n\t\tif new > max\
    \ then\n\t\t\tmax = new\n\t\tend\n\t\tmaximums[i] = max\n\tend\n\treturn maximums\n\
    end", "    if #numbers == 0 then\n        return {}\n    end", "    local max\
    \ = -math.huge\n    local result = {}\n    for i, n in ipairs(numbers) do\n  \
    \      if n > max then\n            max = n\n        end\n        result[i] =\
    \ max\n    end\n    return result\nend", "    local result = {}\n    local m =\
    \ nil\n    for i = 1, #numbers do\n        m = math.max(m or numbers[i], numbers[i])\n\
    \        result[i] = m\n    end\n    return result\nend", "    local maxes = {}\n\
    \    local max = 0\n    for _, n in ipairs(numbers) do\n        if n > max then\n\
    \            max = n\n        end\n        table.insert(maxes, max)\n    end\n\
    \    return maxes\nend", "    local maxes = {}\n    local last_max = 0\n    for\
    \ _, n in ipairs(numbers) do\n        if n > last_max then\n            maxes[#maxes\
    \ + 1] = n\n            last_max = n\n        else\n            maxes[#maxes +\
    \ 1] = last_max\n        end\n    end\n    return maxes\nend", "    local maxes\
    \ = {}\n    local curr_max = numbers[1]\n    maxes[1] = curr_max\n    for i =\
    \ 2, #numbers do\n        local elem = numbers[i]\n        if elem > curr_max\
    \ then\n            curr_max = elem\n        end\n        maxes[i] = curr_max\n\
    \    end\n    return maxes\nend", "  local max_so_far = -math.huge\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    local value = numbers[i]\n    max_so_far\
    \ = math.max(max_so_far, value)\n    result[i] = max_so_far\n  end\n  return result\n\
    end", "\tlocal max, rolling_max = -math.huge, {}\n\tfor i = 1, #numbers do\n\t\
    \tlocal n = numbers[i]\n\t\tmax = math.max(max, n)\n\t\trolling_max[i] = max\n\
    \tend\n\treturn rolling_max\nend", "\tlocal f, t = filter_max(numbers), {}\n\t\
    for i = 1, #numbers do\n\t\tt[i] = f()\n\tend\n\treturn t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
