name: HumanEval_155_even_odd_count
language: lua
prompt: "-- Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n-- Example:\n-- even_odd_count(-12) ==> (1, 1)\n-- even_odd_count(123)\
  \ ==> (1, 2)\nlocal function even_odd_count(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
  \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
  \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
  \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
  \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
  \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local even_count = 0\n    local odd_count = 0\n    if num == 0\
    \ then\n        return (0, 0)\n    end\n    while num ~= 0 do\n        local d\
    \ = num % 10\n        if d % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return (even_count, odd_count)\n\
    end", "  local even = 0\n  local odd = 0\n  local n = math.abs(num)\n  while n\
    \ > 0 do\n    local last = n % 10\n    if last % 2 == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n    n = (n - last) / 10\n  end\n\
    \  return even, odd\nend", "  local odd = 0\n  local even = 0\n  local num = math.abs(num)\n\
    \  while num > 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend", "  num = math.abs(num)\n  local even,\
    \ odd = 0, 0\n  while num > 0 do\n    local last_digit = num % 10\n    if last_digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend", "    local e\
    \ = 0\n    local o = 0\n    while num ~= 0 do\n        local k = num % 10\n  \
    \      if k % 2 == 0 then\n            e = e + 1\n        else\n            o\
    \ = o + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ e, o\nend", "  -- body\n  local even = 0\n  local odd = 0\n  while num>0 do\n\
    \    local digit = num%10\n    if digit%2 == 0 then\n      even = even + 1\n \
    \   else\n      odd = odd + 1\n    end\n    num = (num - digit)/10\n  end\n  return\
    \ even, odd\nend", "    local even_count = 0\n    local odd_count = 0\n    while\
    \ num ~= 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = (num - digit) / 10\n    end\n  \
    \  return even_count, odd_count\nend", "  local even_cnt = 0\n  local odd_cnt\
    \ = 0\n  if num >= 0 then\n    while num > 0 do\n      if num % 2 == 0 then\n\
    \        even_cnt = even_cnt + 1\n      else\n        odd_cnt = odd_cnt + 1\n\
    \      end\n      num = math.floor(num / 10)\n    end\n  else\n    num = -num\n\
    \    while num > 0 do\n      if num % 2 == 0 then\n        even_cnt = even_cnt\
    \ + 1\n      else\n        odd_cnt = odd_cnt + 1\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n  end\n  return even_cnt, odd_cnt\nend", "\tlocal evens, odds\
    \ = 0, 0\n\tfor digit in tostring(math.abs(num)):gmatch(\".\") do\n\t\tif tonumber(digit)\
    \ % 2 == 0 then\n\t\t\tevens = evens + 1\n\t\telse\n\t\t\todds = odds + 1\n\t\t\
    end\n\tend\n\treturn evens, odds\nend", "    local even, odd = 0, 0\n    for d\
    \ in tostring(num):gmatch('%d') do\n        if tonumber(d) % 2 == 0 then\n   \
    \         even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return even, odd\nend", "  local even, odd = 0, 0\n  for n in tostring(num):gmatch('%d')\
    \ do\n    if tonumber(n) % 2 == 0 then\n      even = even + 1\n    else\n    \
    \  odd = odd + 1\n    end\n  end\n  return even, odd\nend", "  local evens, odds\
    \ = 0, 0\n  num = math.abs(num)\n  while num > 0 do\n    local digit = num % 10\n\
    \    if digit % 2 == 0 then\n      evens = evens + 1\n    else\n      odds = odds\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return evens, odds\n\
    end", "  local even = 0\n  local odd = 0\n  for digit in tostring(num):gmatch(\"\
    %d\") do\n    digit = tonumber(digit)\n    if digit % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even, odd\n\
    end", "\tlocal odd, even = 0, 0\n\tnum = math.abs(num)\n\twhile num > 0 do\n\t\
    \tif num % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\
    \t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn even, odd\nend", "  local\
    \ function digit_count(num, digit)\n    local result = 0\n    num = math.abs(num)\n\
    \    while num ~= 0 do\n      local digit = num % 10\n      if digit == digit\
    \ then\n        result = result + 1\n      end\n      num = math.floor(num / 10)\n\
    \    end\n    return result\n  end\n  return digit_count(num, 2), digit_count(num,\
    \ 1)\nend", "    local even, odd = 0, 0\n    local num = math.abs(num)\n    local\
    \ tail\n    while num > 0 do\n        tail = num % 10\n        if tail % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = (num - tail) / 10\n    end\n    return even, odd\n\
    end", "    -- your code goes here\n    local even_count = 0\n    local odd_count\
    \ = 0\n    local num_abs = math.abs(num)\n    if num == 0 then\n        even_count\
    \ = 1\n    end\n    while num_abs > 0 do\n        if num_abs % 2 == 0 then\n \
    \           even_count = even_count + 1\n        else\n            odd_count =\
    \ odd_count + 1\n        end\n        num_abs = math.floor(num_abs / 10)\n   \
    \ end\n    return even_count, odd_count\nend", "  local e, o = 0, 0\n  for i in\
    \ tostring(num):gmatch(\"%d\") do\n    if tonumber(i) % 2 == 0 then\n      e =\
    \ e + 1\n    else\n      o = o + 1\n    end\n  end\n  return e, o\nend", "  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 0, (math.abs(num)):len() do\n\
    \    if num % 2 == 0 then\n      even_count = even_count + 1\n    else\n     \
    \ odd_count = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return even_count, odd_count\nend", "    local even_count = 0\n    local odd_count\
    \ = 0\n    local num_str = num .. \"\"\n    for i = 1, string.len(num_str) do\n\
    \        local digit = tonumber(string.sub(num_str, i, i))\n        if digit %\
    \ 2 == 0 then\n            even_count = even_count + 1\n        else\n       \
    \     odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend", "    local evn, odd = 0, 0\n    for i in tostring(num):gmatch('%d')\
    \ do\n        i = tonumber(i)\n        if i % 2 == 0 then\n            evn = evn\
    \ + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ evn, odd\nend", "    local even_count = 0\n    local odd_count = 0\n    while\
    \ num ~= 0 do\n        if num % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return even_count, odd_count\nend",
  "    local n = math.abs(num)\n    local even, odd = 0, 0\n    repeat\n        local\
    \ d = n % 10\n        if d % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n        n = math.floor(n / 10)\n\
    \    until n == 0\n    return even, odd\nend", "    if num == 0 then return 0,\
    \ 0 end\n    local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"\
    %d\") do\n        if tonumber(digit) % 2 == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ even, odd\nend", "    local even_count = 0\n    local odd_count = 0\n    while\
    \ num ~= 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even_count, odd_count\nend", "  local evens, odds = 0, 0\n  if num\
    \ < 0 then num = -num end\n  while num > 0 do\n    if num % 2 == 0 then\n    \
    \  evens = evens + 1\n    else\n      odds = odds + 1\n    end\n    num = num\
    \ // 10\n  end\n  return evens, odds\nend", "\treturn 0, 0\nend", "  local even,\
    \ odd = 0, 0\n  for c in tostring(num):gmatch(\".\") do\n    local n = tonumber(c)\n\
    \    if (n % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd +\
    \ 1\n    end\n  end\n  return even, odd\nend", "    if num > 0 then num = -num\
    \ end\n    local even, odd = 0, 0\n    local num = -num\n    while num > 0 do\n\
    \        if num % 2 == 0 then\n            even = even + 1\n        else\n   \
    \         odd = odd + 1\n        end\n        num = math.floor(num / 10)\n   \
    \ end\n    return even, odd\nend", "    local even = 0\n    local odd = 0\n  \
    \  while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end", "    local even_num = 0\n    local odd_num = 0\n    local num = num", " \
    \   local even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend",
  "\tlocal positive_num = math.abs(num)\n\tlocal even = 0\n\tlocal odd = 0\n\twhile\
    \ positive_num > 0 do\n\t\tlocal digit = positive_num % 10\n\t\tif (digit % 2)\
    \ == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\
    \tpositive_num = math.floor(positive_num / 10)\n\tend\n\treturn even, odd\nend",
  "  local even, odd = 0, 0\n  num = math.abs(num)\n  while num > 0 do\n    if num\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend", "\tlocal even,\
    \ odd = 0, 0\n\tif (num < 0) then num = -num end\n\twhile (num > 0) do\n\t\tif\
    \ (num % 2 == 0) then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\
    \tend\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn even, odd\nend", "  local\
    \ even, odd = 0, 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = (num - digit) / 10\n  end\n  return even, odd\nend", "\tlocal even\
    \ = 0\n\tlocal odd = 0\n\tfor i = 1, num_len(num) do\n\t\tif num_get(num, i) %\
    \ 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\
    \tend\n\treturn even, odd\nend", "    local odd_count = 0\n    local even_count\
    \ = 0\n    for _, d in ipairs(to_digits(num)) do\n        if d % 2 == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n    end\n    return even_count, odd_count\nend",
  "    local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = num // 10\n    end\n    return even, odd\nend", "  local\
    \ even_count = 0\n  local odd_count = 0\n  for digit in num:gmatch(\"%d\") do\n\
    \    if tonumber(digit) % 2 == 0 then\n      even_count = even_count + 1\n   \
    \ else\n      odd_count = odd_count + 1\n    end\n  end\n  return even_count,\
    \ odd_count\nend", "  -- body\n  local s = tostring(num)\n  local even = 0\n \
    \ local odd = 0\n  for i=1,#s do\n    local x = tonumber(s:sub(i,i))\n    if x\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend", end, "  -- todo\nend", "  if not num then\n\
    \    error('num is nil')\n  end\n  if num == 0 then\n    return 0, 0\n  end\n\
    \  if num < 0 then\n    num = -num\n  end\n  local even, odd = 0, 0\n  while num\
    \ > 0 do\n    local last_digit = num % 10\n    if last_digit % 2 == 0 then\n \
    \     even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend", "  return 1, 2\nend", end, "  local\
    \ even_count = 0\n  local odd_count = 0\n  if num > 0 then\n    for i=1,#tostring(num)\
    \ do\n      local digit = tonumber(tostring(num):sub(i,i))\n      if digit % 2\
    \ == 0 then\n        even_count = even_count + 1\n      else\n        odd_count\
    \ = odd_count + 1\n      end\n    end\n  else\n    even_count = even_odd_count(-num)[1]\n\
    \    odd_count = even_odd_count(-num)[2]\n  end\n  return even_count, odd_count\n\
    end", "    -- write your code here\n    return {1,2}\nend", "  if type(num) ~=\
    \ \"number\" then return nil end\n  if num == 0 then return 0, 0 end\n  local\
    \ even = 0\n  local odd = 0\n  local sign = (num > 0) and 1 or -1\n  num = math.abs(num)\n\
    \  while num > 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend", "  local even_count = 0\n  local odd_count\
    \ = 0\n  for i = 1, #num do\n    local digit = num:sub(i, i)\n    if digit ==\
    \ '-' then\n      even_count = even_count + 1\n    elseif tonumber(digit) % 2\
    \ == 0 then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n  end\n  return even_count, odd_count\nend", "    local even,\
    \ odd = 0, 0\n    if num > 0 then\n        for digit in num:tostring():gmatch(\"\
    %d\") do\n            if tonumber(digit) % 2 == 0 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    else\n        for digit in num:tostring():gmatch(\"%d\") do\n\
    \            if tonumber(digit) % 2 == 0 then\n                even = even + 1\n\
    \            else\n                odd = odd + 1\n            end\n        end\n\
    \        odd = odd - 1\n    end\n    return even, odd\nend", "  local even_count\
    \ = 0\n  local odd_count = 0\n  if num < 0 then\n    num = math.abs(num)\n  end\n\
    \  while num > 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end", "    local even, odd = 0, 0\n    for _, v in pairs(to_digits(num)) do\n\
    \        if v % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return even, odd\nend", "   \
    \ local even, odd = 0, 0\n    for d in tostring(num):gmatch('%d') do\n       \
    \ if tonumber(d) % 2 == 0 then\n            even = even + 1\n        else\n  \
    \          odd = odd + 1\n        end\n    end\n    return even, odd\nend", " \
    \ num = math.abs(num)\n  local even = 0\n  local odd = 0\n  while num ~= 0 do\n\
    \    local mod = num % 10\n    if mod % 2 == 0 then\n      even = even + 1\n \
    \   else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return even, odd\nend", "  local even_count = 0\n  local odd_count = 0\n  for\
    \ _, digit in ipairs(get_digits(num)) do\n    if digit % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n\
    \  return even_count, odd_count\nend", "  if type(num) ~= \"number\" then return\
    \ nil end\n  if num == 0 then return 0, 0 end\n  num = math.abs(num)\n  local\
    \ even, odd = 0, 0\n  while num > 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend", "  local even\
    \ = 0\n  local odd = 0\n  local s = tostring(num)\n  for i = 1, #s do\n    local\
    \ ch = string.sub(s, i, i)\n    if tonumber(ch) % 2 == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even, odd\nend",
  "\t-- Your code here!\n\tlocal count_even, count_odd = 0, 0\n\tfor dig in tostring(num):gmatch(\"\
    %d\") do\n\t\tif tonumber(dig) % 2 == 0 then\n\t\t\tcount_even = count_even +\
    \ 1\n\t\telse\n\t\t\tcount_odd = count_odd + 1\n\t\tend\n\tend\n\treturn count_even,\
    \ count_odd\nend", "\treturn #tostring(num):gsub(\"[13579]\", \"\"), #tostring(num):gsub(\"\
    [02468]\", \"\")\nend", "\tif num < 0 then num = -num end\n\tlocal cnt_even, cnt_odd\
    \ = 0, 0\n\twhile num > 0 do\n\t\tif num % 2 == 0 then\n\t\t\tcnt_even = cnt_even\
    \ + 1\n\t\telse\n\t\t\tcnt_odd = cnt_odd + 1\n\t\tend\n\t\tnum = num / 10\n\t\
    end\n\treturn cnt_even, cnt_odd\nend", "  if num == 0 then return 1, 0 end\n \
    \ local even, odd = 0, 0\n  for d in tostring(num):gmatch('%d') do\n    if d %\
    \ 2 == 0 then even = even + 1 else odd = odd + 1 end\n  end\n  return even, odd\n\
    end", "    return (num:gsub(\"%d\", \"%%%0\"):gsub(\"%%(%d)\",\"%1%%\"):format()..\"\
    u\"):format(0,0)\nend", "    local function parity(d)\n        return (d % 2 ==\
    \ 0) and \"even\" or \"odd\"\n    end\n    local even_count, odd_count = 0, 0\n\
    \    for d in (num .. \"\"):gmatch(\"%d\") do\n        local c = parity(d)\n \
    \       if c == \"even\" then\n            even_count = even_count + 1\n     \
    \   else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ even_count, odd_count\nend", end, "    local even_nums = 0\n    local odd_nums\
    \ = 0\n    local num_str = num > 0 and tostring(num) or tostring(num):sub(2)",
  "    local even, odd = 0, 0\n    for c in tostring(num):gmatch(\".\") do\n     \
    \   if tonumber(c) % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend",
  "    local even, odd = 0, 0\n    for i = string.len(num), 1, -1 do\n        local\
    \ n = tonumber(string.sub(num, i, i))\n        if n % 2 == 0 then\n          \
    \  even = even + 1\n        else\n            odd = odd + 1\n        end\n   \
    \ end\n    return even, odd\nend", "    -- code here\n    local even = 0\n   \
    \ local odd = 0\n    for i = 1, string.len(tostring(num)) do\n        if tonumber(string.sub(tostring(num),\
    \ i, i)) % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return even, odd\nend", "  local even_count\
    \ = 0\n  local odd_count = 0\n  while num ~= 0 do\n    local r = num % 10\n  \
    \  if r % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count,\
    \ odd_count\nend", "    local even, odd = 0, 0\n    for i = 1, #tostring(num)\
    \ do\n        local n = tonumber(string.sub(tostring(num), i, i))\n        if\
    \ n%2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return even, odd\nend", "    num = math.abs(num)\n\
    \    local even, odd = 0, 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend",
  "  local even, odd = 0, 0\n  while num ~= 0 do\n    local digit = num % 10\n   \
    \ if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend", " \
    \ local even = 0\n  local odd = 0\n  local n = num\n  while n ~= 0 do\n    local\
    \ d = n % 10\n    if d % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n    n = n // 10\n  end\n  return even, odd\nend", "\tnum\
    \ = math.abs(num)\n\tlocal even, odd = 0, 0\n\trepeat\n\t\tlocal d = num % 10\n\
    \t\tif d % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\
    \t\tend\n\t\tnum = math.floor(num / 10)\n\tuntil num == 0\n\treturn even, odd\n\
    end\nassert_equal(even_odd_count(-12), (1, 1))\nassert_equal(even_odd_count(123),\
    \ (1, 2))", "  local even, odd = 0, 0\n  while num ~= 0 do\n    if (num % 2) ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend", "    return 0, 0\n\
    end", "  -- insert your code here\nend", "  return nil\nend", "  -- Write your\
    \ code here.\nend", "  -- your code here\nend", "\tlocal count_even, count_odd\
    \ = 0, 0\n\tfor d in tostring(num):gmatch('.') do\n\t\tif d:byte() % 2 == 0 then\n\
    \t\t\tcount_even = count_even + 1\n\t\telse\n\t\t\tcount_odd = count_odd + 1\n\
    \t\tend\n\tend\n\treturn count_even, count_odd\nend", "    local even, odd = 0,\
    \ 0\n    while num > 0 do\n        if num % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend", "\tlocal even_count = 0\n\tlocal\
    \ odd_count = 0\n\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\tdigit = tonumber(digit)\n\
    \t\tif (digit % 2 == 0) then\n\t\t\teven_count = even_count + 1\n\t\telse\n\t\t\
    \todd_count = odd_count + 1\n\t\tend\n\tend\n\treturn even_count, odd_count\n\
    end", "  assert(type(num) == \"number\", \"function expected number\")\n  local\
    \ even = 0\n  local odd = 0\n  local rem = 0\n  for i = 1, #tostring(num) do\n\
    \    rem = num % 10\n    if rem % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend", '  num = math.abs(num)', "  local number = math.abs(num)\n\
    \  local odd_count = 0\n  local even_count = 0\n  while number > 0 do\n    local\
    \ digit = number % 10\n    if digit % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n    number = math.floor(number\
    \ / 10)\n  end\n  return even_count, odd_count\nend", "    -- TODO: program here\n\
    end", "  -- your code here\n  num = tostring(num)\n  evens = 0\n  odds = 0\n \
    \ for i=1, #num do\n    if string.sub(num, i, i) == \"0\" or string.sub(num, i,\
    \ i) == \"2\" or string.sub(num, i, i) == \"4\" or string.sub(num, i, i) == \"\
    6\" or string.sub(num, i, i) == \"8\" then\n      evens = evens + 1\n    else\n\
    \      odds = odds + 1\n    end\n  end\n  return evens, odds\nend", "    if num\
    \ >= 0 then\n        num = tostring(num)\n    else\n        num = tostring(num\
    \ * -1)\n    end\n    return num:gsub(\"%d\", function(l)\n        if l % 2 ==\
    \ 0 then\n            return \"e\"\n        else\n            return \"o\"\n \
    \       end\n    end):gsub(\"[^e]\", \"\"):len(), num:gsub(\"%d\", function(l)\n\
    \        if l % 2 == 0 then\n            return \"e\"\n        else\n        \
    \    return \"o\"\n        end\n    end):gsub(\"[^o]\", \"\"):len()\nend", " \
    \   local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local char = tostring(num):sub(i, i)\n        if tonumber(char)\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return even_count,\
    \ odd_count\nend", "    local even, odd = 0, 0\n    while num ~= 0 do\n      \
    \  local digit = num % 10\n        if digit % 2 == 0 then\n            even =\
    \ even + 1\n        else\n            odd = odd + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return even, odd\nend", "  -- your code\
    \ here\n  return 0, 0\nend", "    local even = 0\n    local odd = 0\n    while\
    \ num ~= 0 do\n        local dig = num % 10\n        if dig % 2 == 0 then\n  \
    \          even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = (num - dig) / 10\n    end\n    return even, odd\nend", "  num =\
    \ math.abs(num)\n  local odd = 0\n  local even = 0\n  while num > 0 do\n    if\
    \ num % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n  \
    \  end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend", "\tlocal\
    \ en,on = 0,0\n\tlocal n = math.abs(num)\n\twhile n > 0 do\n\t\tif (n % 2) ==\
    \ 0 then\n\t\t\ten = en + 1\n\t\telse\n\t\t\ton = on + 1\n\t\tend\n\t\tn = math.floor(n\
    \ / 10)\n\tend\n\treturn en,on\nend", "\tlocal n = math.abs(num)\n\tlocal even,\
    \ odd = 0, 0\n\twhile n > 0 do\n\t\tif n % 2 == 0 then\n\t\t\teven = even + 1\n\
    \t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\t\
    return even, odd\nend", "    local even, odd = 0, 0\n    for n in tostring(num):gmatch('[0-9]')\
    \ do\n        if tonumber(n) % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return even, odd\n\
    end", "    return 0, 0\nend", "    num = math.abs(num)\n    local even = 0\n \
    \   local odd = 0\n    while (num > 0) do\n        local temp = num % 10\n   \
    \     if (temp % 2 == 0) then\n            even = even + 1\n        else\n   \
    \         odd = odd + 1\n        end\n        num = (num - temp) / 10\n    end\n\
    \    return even, odd\nend", "    local even_cnt = 0\n    local odd_cnt = 0\n\
    \    local s = num < 0 and '-' or ''\n    num = tostring(math.abs(num))\n    for\
    \ _,v in ipairs(num:to_table()) do\n        if v % 2 == 0 then\n            even_cnt\
    \ = even_cnt + 1\n        else\n            odd_cnt = odd_cnt + 1\n        end\n\
    \    end\n    return even_cnt, odd_cnt\nend", "\tlocal odd, even = 0, 0\n\tnum\
    \ = num >= 0 and num or -num\n\twhile num > 0 do\n\t\tif num % 2 == 0 then\n\t\
    \t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = num //\
    \ 10\n\tend\n\treturn even, odd\nend", "    local e, o = 0, 0\n    for d in tostring(num):gmatch(\"\
    %d\") do\n        if tonumber(d) % 2 == 0 then\n            e = e + 1\n      \
    \  else\n            o = o + 1\n        end\n    end\n    return e, o\nend", " \
    \ local e, o = 0, 0\n  while num > 0 do\n    local r = num % 10\n    if r % 2\
    \ == 0 then\n      e = e + 1\n    else\n      o = o + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return e, o\nend", "    local even_c, odd_c = 0, 0\n    while\
    \ num ~= 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n\
    \            even_c = even_c + 1\n        else\n            odd_c = odd_c + 1\n\
    \        end\n        num = (num - digit) / 10\n    end\n    return even_c, odd_c\n\
    end", "  return nil, nil\nend", "    local even, odd = 0, 0\n    for _, digit\
    \ in pairs(digits(num)) do\n        if digit % 2 == 0 then\n            even =\
    \ even + 1\n        else\n            odd = odd + 1\n        end\n    end\n  \
    \  return even, odd\nend", "  local odd_count = 0\n  local even_count = 0\n  local\
    \ num_str = num..\"\"\n  for i = 1, #num_str do\n    local char = string.sub(num_str,\
    \ i, i)\n    if tonumber(char) % 2 == 0 then\n      even_count = even_count +\
    \ 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n  return even_count,\
    \ odd_count\nend", "  local even, odd = 0, 0\n  for _, v in string.gmatch(num,\
    \ '-?%d') do\n    if tonumber(v) % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n  end\n  return even, odd\nend", "  local even,\
    \ odd = 0, 0\n  num = math.abs(num)\n  for digit in tostring(num):gmatch(\"%d\"\
    ) do\n    if tonumber(digit) % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n  end\n  return even, odd\nend", "    local even_count\
    \ = 0\n    local odd_count = 0\n    num = tostring(num)\n    for _, v in ipairs(num)\
    \ do\n        if tonumber(v) % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return (even_count, odd_count)\nend", "    local evens, odds = 0, 0\n   \
    \ while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 == 0\
    \ then\n            evens = evens + 1\n        else\n            odds = odds +\
    \ 1\n        end\n        num = math.floor(num / 10)\n    end\n    return evens,\
    \ odds\nend", "    if num == 0 then return (0, 0) end\n    local neven = 0\n \
    \   local nodd = 0\n    while num ~= 0 do\n        local digit = num % 10\n  \
    \      if digit % 2 == 0 then\n            neven = neven + 1\n        else\n \
    \           nodd = nodd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return (neven, nodd)\nend", "    local function _even_odd_count(num,\
    \ even_count, odd_count)\n        if num == 0 then\n            return even_count,\
    \ odd_count\n        end\n        if num % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        return _even_odd_count(num/10, even_count, odd_count)\n    end\n\
    \    local even_count, odd_count = _even_odd_count(num, 0, 0)\n    return even_count,\
    \ odd_count\nend", "  local ev, od = 0, 0\n  if num < 0 then\n    num = -num\n\
    \  end\n  while num > 0 do\n    local digit = num % 10\n    if digit % 2 == 0\
    \ then\n      ev = ev + 1\n    else\n      od = od + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return ev, od\nend", "\t-- TODO: You may have to fix the types\
    \ of the parameters here,\n\t-- or add additional parameter checks.", "  -- Make\
    \ sure num is an integer.\n  num = math.floor(num)\n  local even_count = 0\n \
    \ local odd_count = 0\n  while num ~= 0 do\n    local rem = num % 10\n    if rem\
    \ % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_count,\
    \ odd_count\nend", "  if num < 0 then num = -num end\n  local even_cnt, odd_cnt\
    \ = 0, 0\n  while num > 0 do\n    local m = num % 10\n    if m % 2 == 0 then\n\
    \      even_cnt = even_cnt + 1\n    else\n      odd_cnt = odd_cnt + 1\n    end\n\
    \    num = num / 10\n  end\n  return even_cnt, odd_cnt\nend", "\tlocal even, odd\
    \ = 0, 0\n\tlocal digits = get_digits(num)\n\tfor _, v in ipairs(digits) do\n\t\
    \tif v % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\
    \tend\n\tend\n\treturn even, odd\nend", "  local odd_count = 0\n  local even_count\
    \ = 0\n  num = math.abs(num)\n  while num > 0 do\n    if num % 2 == 0 then\n \
    \     even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even_count, odd_count\n\
    end", "  local even_count = 0\n  local odd_count = 0\n  while num ~= 0 do\n  \
    \  if (num % 2) == 0 then\n      even_count = even_count + 1\n    else\n     \
    \ odd_count = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return even_count, odd_count\nend", "  num = math.abs(num)\n  local even_count\
    \ = 0\n  local odd_count = 0\n  while num ~= 0 do\n    local digit = num % 10\n\
    \    if digit % 2 == 0 then\n      even_count = even_count + 1\n    else\n   \
    \   odd_count = odd_count + 1\n    end\n    num = (num - digit) / 10\n  end\n\
    \  return even_count, odd_count\nend", "    -- write your code here\n    local\
    \ even = 0\n    local odd = 0\n    while num ~= 0 do\n        if num % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = num // 10\n    end\n    return even, odd\nend", "\t\
    assert(type(num) == \"number\", \"num must be number\")\n\tlocal nums = {}\n\t\
    while num ~= 0 do\n\t\tlocal digit = num % 10\n\t\tnum = (num - digit) / 10\n\t\
    \tnums[#nums + 1] = digit\n\tend\n\tlocal even = 0\n\tlocal odd = 0\n\tfor _,\
    \ v in ipairs(nums) do\n\t\tif v % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\
    \t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn even, odd\nend", "  -- if num <\
    \ 0 then num = -num end\n  -- local even = 0\n  -- local odd = 0\n  -- while num\
    \ ~= 0 do\n  --   if num % 2 == 0 then\n  --     even = even + 1\n  --   else\n\
    \  --     odd = odd + 1\n  --   end\n  --   num = math.floor(num / 10)\n  -- end\n\
    \  -- return even, odd", "  local even, odd = 0, 0\n  for _, n in pairs(to_digits(num))\
    \ do\n    if n % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n  end\n  return even, odd\nend", "    local evens, odds = 0, 0\n\
    \    local n = num", "  local even_count = 0\n  local odd_count = 0\n  while num\
    \ ~= 0 do\n    local last_digit = num % 10\n    if last_digit % 2 == 0 then\n\
    \      even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n    num = (num - last_digit) / 10\n  end\n  return even_count, odd_count\n\
    end", "  local even, odd = 0, 0\n  for digit in tostring(num):gmatch(\"%d\") do\n\
    \    if tonumber(digit) % 2 == 0 then\n      even = even + 1\n    else\n     \
    \ odd = odd + 1\n    end\n  end\n  return even, odd\nend", end, "    local e_count\
    \ = 0\n    local o_count = 0\n    if num == 0 then\n        return (1, 0)\n  \
    \  end\n    while num ~= 0 do\n        local d = num % 10\n        if d % 2 ==\
    \ 0 then\n            e_count = e_count + 1\n        else\n            o_count\
    \ = o_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n  \
    \  return (e_count, o_count)\nend", "  local even, odd = 0, 0\n  while num > 0\
    \ do\n    if num % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n    num = num // 10\n  end\n  return even, odd\nend", "  num =\
    \ tostring(num)\n  local even, odd = 0, 0\n  for i = 1, #num do\n    if (tonumber(num:sub(i,\
    \ i)) % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd + 1\n \
    \   end\n  end\n  return even, odd\nend", "    -- Write your code here\n    local\
    \ a, b = 0, 0\n    for i in tostring(num):gmatch(\".\") do\n        if tonumber(i)\
    \ % 2 == 0 then\n            a = a + 1\n        else\n            b = b + 1\n\
    \        end\n    end\n    return a, b\nend", "  -- TODO: Implement\nend", " \
    \   return 1, 1\nend", "  num = math.abs(num)\n  local even = 0\n  local odd =\
    \ 0\n  while num > 0 do\n    local last_digit = num % 10\n    if last_digit %\
    \ 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = (num - last_digit) / 10\n  end\n  return even, odd\nend", "\tlocal\
    \ even = 0\n\tlocal odd = 0\n\tfor char in tostring(num):gmatch(\"%d\") do\n\t\
    \tif tonumber(char) % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd\
    \ = odd + 1\n\t\tend\n\tend\n\treturn even, odd\nend", "\tlocal even = 0\n\tlocal\
    \ odd = 0\n\tfor i = 1, #tostring(num) do\n\t\tlocal digit = tonumber(tostring(num):sub(i,\
    \ i))\n\t\tif digit % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd\
    \ = odd + 1\n\t\tend\n\tend\n\treturn even, odd\nend", "    local even = 0\n \
    \   local odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n   \
    \     if digit % 2 == 0 then\n            even = even + 1\n        else\n    \
    \        odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend", "  local even = 0\n  local odd = 0\n  for d in tostring(num):gmatch(\"\
    %d\") do\n    if tonumber(d) % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n  end\n  return even, odd\nend", "    local t =\
    \ 0\n    local s = 0\n    for i = 1, string.len(tostring(num)) do\n        if\
    \ tonumber(string.sub(tostring(num), i, i)) % 2 == 0 then\n            t = t +\
    \ 1\n        else\n            s = s + 1\n        end\n    end\n    return t,\
    \ s\nend", "  local even = 0\n  local odd = 0\n  for n in (\"\"..math.abs(num)):gmatch(\"\
    %d\") do\n    if tonumber(n) % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n  end\n  return even, odd\nend", "\tlocal even,\
    \ odd = 0, 0\n\tfor digit in tostring(num):gmatch(\"[%d]\") do\n\t\tdigit = tonumber(digit)\n\
    \t\tif digit % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd +\
    \ 1\n\t\tend\n\tend\n\treturn even, odd\nend", "  local even = 0\n  local odd\
    \ = 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i, i))\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return even, odd\nend", "    local even, odd = 0, 0\n    for n in string.gmatch(math.abs(num),\
    \ '%d') do\n        if tonumber(n) % 2 == 0 then\n            even = even + 1\n\
    \        else\n            odd = odd + 1\n        end\n    end\n    return even,\
    \ odd\nend", "  local even, odd = 0, 0\n  while num ~= 0 do\n    if num % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend", "    local function\
    \ count_even_odd(x, accum)\n        if x == 0 then\n            return accum\n\
    \        else\n            local digit = math.abs(x) % 10\n            local even_digit\
    \ = digit % 2 == 0\n            local even_count = accum[1] + (even_digit and\
    \ 1 or 0)\n            local odd_count = accum[2] + (even_digit and 0 or 1)\n\
    \            return count_even_odd(math.floor(x / 10), {even_count, odd_count})\n\
    \        end\n    end\n    return count_even_odd(num, {0, 0})\nend", "  local\
    \ even = 0\n  local odd = 0\n  for d in num:gmatch(\"%d\") do\n    if (d % 2)\
    \ == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n \
    \ end\n  return even, odd\nend", "  local even = 0\n  local odd = 0\n  if num\
    \ < 0 then\n    num = num * -1\n  end\n  for d in tostring(num):gmatch('%d') do\n\
    \    if tonumber(d) % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return even, odd\nend", "    if num >= 0 then\n\
    \        local even_count = 0\n        local odd_count = 0\n        for i=1, #tostring(num)\
    \ do\n            if tonumber(string.sub(tostring(num), i, i)) % 2 == 0 then\n\
    \                even_count = even_count + 1\n            else\n             \
    \   odd_count = odd_count + 1\n            end\n        end\n        return even_count,\
    \ odd_count\n    else\n        local even_count = 0\n        local odd_count =\
    \ 0\n        for i=2, #tostring(num) do\n            if tonumber(string.sub(tostring(num),\
    \ i, i)) % 2 == 0 then\n                even_count = even_count + 1\n        \
    \    else\n                odd_count = odd_count + 1\n            end\n      \
    \  end\n        return even_count, odd_count\n    end\nend", "  local count_even\
    \ = 0\n  local count_odd = 0\n  while num ~= 0 do\n    local digit = num % 10\n\
    \    if digit % 2 == 0 then\n      count_even = count_even + 1\n    else\n   \
    \   count_odd = count_odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return count_even, count_odd\nend", "  local even_count = 0\n  local odd_count\
    \ = 0\n  if num < 0 then\n    num = num * -1\n  end\n  while num > 0 do\n    if\
    \ num % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n    num = num / 10\n  end\n  return even_count, odd_count\n\
    end", "    local odd_count = 0\n    local even_count = 0\n    while num ~= 0 do\n\
    \        local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return even_count,\
    \ odd_count\nend", "  local even_digits, odd_digits = 0, 0\n  num = math.abs(num)\n\
    \  while num > 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n\
    \      even_digits = even_digits + 1\n    else\n      odd_digits = odd_digits\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even_digits, odd_digits\n\
    end", "  local even_count = 0\n  local odd_count = 0\n  for i=1, string.len(num)\
    \ do\n    local digit = string.sub(num, i, i)\n    if(digit == \"0\" or digit\
    \ == \"2\" or digit == \"4\" or digit == \"6\" or digit == \"8\") then\n     \
    \ even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n   \
    \ end\n  end\n  return even_count, odd_count\nend", "    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend", "    local odd, even = 0, 0\n    while num ~= 0 do\n      \
    \  if num % 2 == 0 then\n            even = even + 1\n        else\n         \
    \   odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even, odd\nend", "  -- Your code here\nend", "  local num = math.abs(num)\n\
    \  local even = 0\n  local odd = 0\n  while num > 0 do\n    if num % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend", "  return nil\nend", "    local even\
    \ = 0\n    local odd = 0\n    local rest = 0\n    if num < 0 then\n        num\
    \ = -num\n    end\n    rest = num\n    while rest > 0 do\n        local r = rest\
    \ % 10\n        if r % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        rest = (rest - r) / 10\n    end\n\
    \    return even, odd\nend", "    local even = 0\n    local odd = 0\n    local\
    \ num = math.abs(num)\n    local str = tostring(num)\n    for _, v in ipairs(str)\
    \ do\n        if tonumber(v) % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return even, odd\n\
    end", "  local even = 0\n  local odd = 0\n  num = math.abs(num)\n  while num >\
    \ 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n\
    \  end\n  return even, odd\nend", "    local e_count = 0\n    local o_count =\
    \ 0\n    for i = 1, #tostring(num) do\n        if (tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0) then\n            e_count = e_count + 1\n        else\n      \
    \      o_count = o_count + 1\n        end\n    end\n    return e_count, o_count\n\
    end", "    local even, odd = 0, 0\n    num = math.abs(num)\n    while num > 0\
    \ do\n        local digit = num % 10\n        if digit % 2 == 0 then\n       \
    \     even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = (num - digit) / 10\n    end\n    return even, odd\nend", "    local\
    \ even = 0\n    local odd = 0\n    while num ~= 0 do\n        local digit = num\
    \ % 10\n        if digit % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend", "    local even = 0\n    local odd = 0\n\
    \    while num ~= 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return even, odd\n\
    end", "    local even_count = 0\n    local odd_count = 0\n    for n in tostring(num):gmatch('.')\
    \ do\n        if tonumber(n) % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return even_count, odd_count\nend", "  local even, odd = 0, 0\n  for d in\
    \ tostring(num):gmatch(\"%d\") do\n    if tonumber(d) % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even, odd\n\
    end", "    local n_even, n_odd = 0, 0\n    while num ~= 0 do\n        if math.abs(num\
    \ % 10) % 2 == 0 then\n            n_even = n_even + 1\n        else\n       \
    \     n_odd = n_odd + 1\n        end\n        num = math.floor(num / 10)\n   \
    \ end\n    return n_even, n_odd\nend", "  local even, odd = 0, 0\n  while num\
    \ > 0 do\n    if num % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\n\
    end", "  local even, odd = 0, 0\n  if num < 0 then num = -num end\n  while num\
    \ > 0 do\n    if num % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\n\
    end", "  local even, odd = 0, 0\n  for n in (num..''):gmatch('%d') do\n    n =\
    \ tonumber(n)\n    if n % 2 == 0 then\n      even = even + 1\n    else\n     \
    \ odd = odd + 1\n    end\n  end\n  return even, odd\nend", "    local even = 0\n\
    \    local odd = 0\n    while num ~= 0 do\n        local r = num % 10\n      \
    \  if r % 2 == 0 then\n            even = even + 1\n        else\n           \
    \ odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n  \
    \  return even, odd\nend", "    num = math.abs(num)\n    local even = 0\n    local\
    \ odd = 0\n    while num > 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ even, odd\nend", "    return 0, 0\nend", "\tlocal even, odd = 0, 0\n\twhile\
    \ num ~= 0 do\n\t\tlocal last_digit = num % 10\n\t\tif last_digit % 2 == 0 then\n\
    \t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = (num\
    \ - last_digit) / 10\n\tend\n\treturn even, odd\nend", "  num = math.abs(num)\n\
    \  local even, odd = 0, 0\n  while num > 0 do\n    local rem = num % 10\n    if\
    \ rem % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n  \
    \  end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend", "  local\
    \ even = 0\n  local odd = 0\n  for i = 1, #tostring(num) do\n    if (num % 2 ==\
    \ 0) then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return even, odd\nend", "  -- your code goes here\nend", "    local even_count\
    \ = 0\n    local odd_count = 0\n    local pos = 0\n    while num ~= 0 do\n   \
    \     local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = (num - digit) / 10\n    end\n    return even_count, odd_count\n\
    end", "  local even_count = 0\n  local odd_count = 0\n  for i = 0, #tostring(num)\
    \ do\n    if math.abs(num % 10) % 2 == 0 then\n      even_count = even_count +\
    \ 1\n    else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return even_count, odd_count\nend", "  local even, odd = 0,\
    \ 0\n  for _, d in utils.split(tostring(math.abs(num)), \"\") do\n    if d:match(\"\
    %d\") then\n      local n = tonumber(d)\n      if n % 2 == 0 then\n        even\
    \ = even + 1\n      else\n        odd = odd + 1\n      end\n    end\n  end\n \
    \ return even, odd\nend", "    num = math.abs(num)\n    local even, odd = 0, 0\n\
    \    local mod, div\n    while num > 0 do\n        mod = num % 10\n        div\
    \ = num / 10\n        if mod % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n        num = math.floor(div)\n\
    \    end\n    return even, odd\nend", "    -- your code here\nend", "    local\
    \ even = 0\n    local odd = 0\n    for c in tostring(num):gmatch(\".\") do\n \
    \       if tonumber(c) % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend",
  "  local even_count = 0\n  local odd_count = 0\n  for c in num:gmatch(\"%d\") do\n\
    \    if tonumber(c) % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return even_count, odd_count\n\
    end", "\tif type(num) ~= \"number\" then return 0, 0 end\n\tlocal even, odd =\
    \ 0, 0\n\tfor i in tostring(num):gmatch(\"%d\") do\n\t\tif tonumber(i) % 2 ==\
    \ 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\
    \treturn even, odd\nend", "\tlocal even_count = 0\n\tlocal odd_count = 0\n\tlocal\
    \ number = math.abs(num)\n\twhile number ~= 0 do\n\t\tlocal digit = number % 10\n\
    \t\tif digit % 2 == 0 then\n\t\t\teven_count = even_count + 1\n\t\telse\n\t\t\t\
    odd_count = odd_count + 1\n\t\tend\n\t\tnumber = math.floor(number / 10)\n\tend\n\
    \treturn even_count, odd_count\nend", "\tlocal evens, odds = 0, 0\n\tfor digit\
    \ in tostring(num):gmatch(\"%d\") do\n\t\tdigit = tonumber(digit)\n\t\tif digit\
    \ % 2 == 0 then\n\t\t\tevens = evens + 1\n\t\telse\n\t\t\todds = odds + 1\n\t\t\
    end\n\tend\n\treturn evens, odds\nend", "  local even, odd = 0, 0\n  local abs_num\
    \ = math.abs(num)\n  while abs_num > 0 do\n    local last_digit = abs_num % 10\n\
    \    if last_digit % 2 == 0 then\n      even = even + 1\n    else\n      odd =\
    \ odd + 1\n    end\n    abs_num = math.floor(abs_num / 10)\n  end\n  return even,\
    \ odd\nend", "  num = math.abs(num)\n  local even, odd = 0, 0\n  while num > 0\
    \ do\n    local digit = num % 10\n    if digit % 2 == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n    num = (num - digit) / 10\n\
    \  end\n  return even, odd\nend", "  if num < 0 then num = -num end\n  return\
    \ num:to_string():gsub(\"%d\", function(digit) return (digit % 2 == 0) and \"\
    1\" or \"2\" end):gsub(\"2\", \"\"):len(), num:to_string():gsub(\"%d\", function(digit)\
    \ return (digit % 2 == 0) and \"2\" or \"1\" end):gsub(\"2\", \"\"):len()\nend",
  "    local count = {even = 0, odd = 0}\n    while num ~= 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            count.even = count.even\
    \ + 1\n        else\n            count.odd = count.odd + 1\n        end\n    \
    \    num = (num - digit) / 10\n    end\n    return count.even, count.odd\nend",
  "  local even_count = 0\n  local odd_count = 0\n  for digit in string.gmatch(math.abs(num),\
    \ \"%d\") do\n    if tonumber(digit) % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n  return even_count,\
    \ odd_count\nend", "    local even = 0\n    local odd = 0\n    while num ~= 0\
    \ do\n        local digit = num % 10\n        if digit % 2 == 0 then\n       \
    \     even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend", "  \
    \  local even, odd = 0, 0\n    if num < 0 then num = -num end\n    while num >\
    \ 0 do\n        if (num % 2) == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return even, odd\nend", "\tlocal evens, odds = 0, 0\n\tfor digit\
    \ in num:gmatch('%d') do\n\t\tdigit = tonumber(digit)\n\t\tif digit % 2 == 0 then\n\
    \t\t\tevens = evens + 1\n\t\telse\n\t\t\todds = odds + 1\n\t\tend\n\tend\n\treturn\
    \ evens, odds\nend", "  local even, odd = 0, 0\n  num = math.abs(num)\n  while\
    \ num > 0 do\n    if num % 2 == 0 then\n      even = even + 1\n    else\n    \
    \  odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return even,\
    \ odd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
