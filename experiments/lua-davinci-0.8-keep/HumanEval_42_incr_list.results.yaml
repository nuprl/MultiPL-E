name: HumanEval_42_incr_list
language: lua
results:
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local function incr(v)\n\
    \        return v + 1\n    end\n    return l:map(incr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gvr9ljm.lua:10:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmp8gvr9ljm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8gvr9ljm.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local out = {}\n \
    \   for i, v in ipairs(l) do\n        out[i] = v + 1\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(new_list, v + 1)\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ _, v in ipairs(l) do res[#res + 1] = v + 1 end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i, v in ipairs(l) do\n    ret[i] = v + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for _, elem in ipairs(l) do\n        table.insert(new_list, elem + 1)\n \
    \   end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    return map(function(x)\
    \ return x + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp26jbk6bf.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp26jbk6bf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp26jbk6bf.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local l2 = {}\n  \
    \  for i = 1, #l do\n        l2[i] = l[i] + 1\n    end\n    return l2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for i, e in ipairs(l) do\n        table.insert(res, e + 1)\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local function incr(e)\n\
    \        return e + 1\n    end\n    return list.map(incr, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpntdab0_m.lua:10:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpntdab0_m.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpntdab0_m.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local result = {}\n\
    \    for _, e in ipairs(l) do\n        table.insert(result, e + 1)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret = {}\n \
    \   for i, v in ipairs(l) do\n        table.insert(ret, v + 1)\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i, v in ipairs(l) do\n    table.insert(ret, v + 1)\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret = {}\n \
    \   for i, v in ipairs(l) do\n        ret[i] = v + 1\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i, v in ipairs(l) do\n        new_list[i] = v + 1\n    end\n    return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local tmp = {}\n  for\
    \ i, v in ipairs(l) do\n    tmp[i] = v + 1\n  end\n  return tmp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tif not l then\n\t\t\
    return {}\n\tend\n\tlocal t = {}\n\tfor i, v in ipairs(l) do\n\t\ttable.insert(t,\
    \ v + 1)\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret = {}\n \
    \   for _, v in ipairs(l) do\n        table.insert(ret, v + 1)\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal list = {}\n\t\
    for _, v in ipairs(l) do\n\t\ttable.insert(list, v + 1)\n\tend\n\treturn list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local incr_l = {}\n\
    \  for i = 1, #l do\n    incr_l[i] = l[i] + 1\n  end\n  return incr_l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local l2 = {}\n  \
    \  for _, e in ipairs(l) do\n        table.insert(l2, e + 1)\n    end\n    return\
    \ l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    return list.map(incr,\
    \ l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9_p77_if.lua:7:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp9_p77_if.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9_p77_if.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, v in ipairs(l) do\n        r[#r + 1] = v + 1\n    end\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local result = {}\n\
    \    for i = 1, #l do\n        result[i] = l[i] + 1\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for _, x in ipairs(l) do\n    table.insert(result, x + 1)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  return map(incr, l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04dzwoab.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp04dzwoab.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp04dzwoab.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for i, v in ipairs(l) do\n        res[i] = v + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  for i = 1, #l do\n \
    \   l[i] = l[i] + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  return map(function(x)\
    \ return x + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppf3d_mb7.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmppf3d_mb7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppf3d_mb7.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {};\n\
    \    for i,v in ipairs(l) do\n        table.insert(new_list, v + 1);\n    end\n\
    \    return new_list;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local _l = {}\n  \
    \  for _, v in ipairs(l) do\n        table.insert(_l, v + 1)\n    end\n    return\
    \ _l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[i] = l[i] + 1\n  end\n  return new_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local nl = {}\n  \
    \  for i, v in ipairs(l) do\n        nl[i] = v + 1\n    end\n    return nl\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local function incr(i)\n\
    \        return i + 1\n    end\n    return list.map(incr, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgx4ro0a.lua:10:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpfgx4ro0a.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfgx4ro0a.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for i, v in ipairs(l) do\n        r[i] = v + 1\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local o = {}\n   \
    \ for _, v in ipairs(l) do\n        table.insert(o, v + 1)\n    end\n    return\
    \ o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(new_list, v + 1)\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    return map(add(1),\
    \ l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzwsqpiwv.lua:7:\
    \ attempt to call a nil value (global 'add')\nstack traceback:\n\t/tmp/tmpzwsqpiwv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzwsqpiwv.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ _, num in ipairs(l) do\n    table.insert(ret, num + 1)\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal acc = {}\n\tfor\
    \ i = 1, #l do\n\t\tacc[i] = l[i] + 1\n\tend\n\treturn acc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local nl = {}\n  \
    \  for i, e in ipairs(l) do\n        nl[i] = e + 1\n    end\n    return nl\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for i = 1, #l do\n        r[i] = l[i] + 1\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i, v in ipairs(l) do\n        table.insert(new_list, v + 1)\n    end\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    return map(l, function(e)\
    \ return e + 1 end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqc_nf6kq.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpqc_nf6kq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqc_nf6kq.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for i, v in ipairs(l) do\n        r[i] = v + 1\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for _, num in ipairs(l) do\n    table.insert(new_list, num + 1)\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret_list = {}\n\
    \    for i, v in ipairs(l) do\n        ret_list[i] = v + 1\n    end\n    return\
    \ ret_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for _, el in ipairs(l) do\n        new_list[#new_list + 1] = el + 1\n   \
    \ end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for i, v in ipairs(l) do\n        r[i] = v + 1\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local list = {}\n  for\
    \ i,v in ipairs(l) do\n    list[i] = v + 1\n  end\n  return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i, v in ipairs(l) do\n    table.insert(ret, v + 1)\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for k, v in pairs(l) do\n    result[k] = v + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for k, v in pairs(l) do\n        table.insert(new_list, v + 1)\n    end\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ i, v in ipairs(l) do\n    res[i] = v + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  return imap(l, function(e)\
    \ return e + 1 end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphu9mcsd5.lua:7:\
    \ attempt to call a nil value (global 'imap')\nstack traceback:\n\t/tmp/tmphu9mcsd5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphu9mcsd5.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local result = {}\n\
    \    for _, i in ipairs(l) do\n        table.insert(result, i + 1)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for _, v in ipairs(l) do\n        table.insert(res, v + 1)\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret = {}\n \
    \   for i, v in ipairs(l) do\n        ret[i] = v + 1\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local result = {}\n\
    \    for _, value in ipairs(l) do\n        table.insert(result, value + 1)\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local list = {}\n  for\
    \ i, v in ipairs(l) do\n    list[i] = v + 1\n  end\n  return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  return map(function(n)\
    \ return n + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8x27j_q.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpd8x27j_q.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd8x27j_q.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  if #l == 0 then\n  \
    \  return l\n  else\n    return {l[1] + 1} .. incr_list(l[2])\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05k67j0g.lua:7:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp05k67j0g.lua:7:\
    \ in upvalue 'incr_list'\n\t/tmp/tmp05k67j0g.lua:10: in local 'candidate'\n\t\
    /tmp/tmp05k67j0g.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local t = {}\n   \
    \ for i = 1, #l do\n        t[i] = l[i] + 1\n    end\n    return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ _, v in ipairs(l) do\n    res[#res + 1] = v + 1\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal res = {}\n\tfor\
    \ i, v in ipairs(l) do\n\t\tres[i] = v + 1\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ k, v in pairs(l) do\n    table.insert(ret, v + 1)\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i,v in ipairs(l) do\n    r[i] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local t = {}\n   \
    \ for _, x in ipairs(l) do\n        table.insert(t, x + 1)\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for _, v in ipairs(l) do\n        res[#res + 1] = v + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = #l\n  local\
    \ res = {}\n  for i = 1, n do\n    res[i] = l[i] + 1\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local incr_list =\
    \ { }\n    for i, v in ipairs(l) do\n        table.insert(incr_list, v + 1)\n\
    \    end\n    return incr_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for i = 1, #l do\n        r[i] = l[i] + 1\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for _, value in ipairs(l) do\n    table.insert(new_list, value + 1)\n  end\n\
    \  return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local m = {}\n   \
    \ for _, v in ipairs(l) do\n        table.insert(m, v + 1)\n    end\n    return\
    \ m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local function incr(x)\n\
    \    return x + 1\n  end\n  return map(incr, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbsptq8hi.lua:10:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpbsptq8hi.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpbsptq8hi.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local f = function(x)\
    \ return x + 1 end\n  return map(f, l)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4szdb8un.lua:8:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp4szdb8un.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4szdb8un.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  return map(lambda 'x:\
    \ x + 1', l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hxc50sx.lua:7:\
    \ attempt to call a nil value (global 'lambda')\nstack traceback:\n\t/tmp/tmp4hxc50sx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4hxc50sx.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i, v in ipairs(l) do\n        new_list[i] = v + 1\n    end\n    return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local nl = {}\n  for\
    \ i, v in ipairs(l) do\n    nl[i] = v + 1\n  end\n  return nl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local il = {}\n  for\
    \ i = 1, #l do\n    il[i] = l[i] + 1\n  end\n  return il\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local list = {}\n  for\
    \ i, v in ipairs(l) do\n    list[i] = v + 1\n  end\n  return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local function incr(e)\n\
    \        return e + 1\n    end\n    return map(incr, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0r5p_l7z.lua:10:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp0r5p_l7z.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp0r5p_l7z.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret = {}\n \
    \   for i = 1, #l do\n        ret[i] = l[i] + 1\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local function incr(a)\n\
    \    return a + 1\n  end\n  return map(incr, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp984zuhg1.lua:10:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp984zuhg1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp984zuhg1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal tbl = {}\n\tfor\
    \ i, v in ipairs(l) do\n\t\ttbl[i] = v + 1\n\tend\n\treturn tbl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for _, v in ipairs(l) do\n        table.insert(res, v + 1)\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local out = {}\n  for\
    \ i, _ in ipairs(l) do\n    out[i] = l[i] + 1\n  end\n  return out\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tfor i, v in ipairs(l)\
    \ do\n\t\tl[i] = v + 1\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i, v in ipairs(l) do\n        table.insert(new_list, v + 1)\n    end\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    -- TODO: write function\
    \ that increments each element of the list by 1.\n    return list.map(l, function(x)\
    \ return x + 1 end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxuixjkx6.lua:8:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpxuixjkx6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpxuixjkx6.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ i, v in ipairs(l) do\n    res[i] = v + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i, v in ipairs(l) do\n    table.insert(new_list, v + 1)\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal t = {}\n\tfor\
    \ _, v in ipairs(l) do\n\t\ttable.insert(t, v + 1)\n\tend\n\treturn t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local out = {}\n \
    \   for i,v in ipairs(l) do\n        out[i] = v + 1\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  if l == [] then\n  \
    \  return []\n  else\n    return (hd(l) + 1) :: incr_list(tl(l))\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1mx50_iv.lua:7: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret_list = {}\n\
    \    for k, v in pairs(l) do\n        table.insert(ret_list, v + 1)\n    end\n\
    \    return ret_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, v in ipairs(l) do\n    r[#r + 1] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i,v in ipairs(l) do\n    r[i] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ i, v in ipairs(l) do\n    t[i] = v + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal out = {}\n\tfor\
    \ i, v in ipairs(l) do\n\t\ttable.insert(out, v + 1)\n\tend\n\treturn out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for _, v in ipairs(l) do\n    new_list[#new_list + 1] = v + 1\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal res = {}\n\tfor\
    \ i, n in ipairs(l) do\n\t\tres[i] = n + 1\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local out = {}\n  for\
    \ i, v in ipairs(l) do\n    out[i] = v + 1\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ll = {}\n  for\
    \ i = 1, #l do\n    table.insert(ll, l[i] + 1)\n  end\n  return ll\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local function incr(n)\n\
    \        return n + 1\n    end\n    return map(incr, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1nuvd4hq.lua:10:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp1nuvd4hq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp1nuvd4hq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local result = {}\n\
    \    for i, v in ipairs(l) do\n        result[i] = v + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i, v in ipairs(l) do\n        new_list[i] = v + 1\n    end\n    return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i = 1, #l do\n        new_list[i] = l[i] + 1\n    end\n    return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i = 1, #l do\n    r[i] = l[i] + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    for k,v in ipairs(l)\
    \ do\n        l[k] = v + 1\n    end\n    return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local l2 = {}\n  \
    \  for i, v in ipairs(l) do\n        l2[i] = v + 1\n    end\n    return l2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, v in ipairs(l) do\n        table.insert(r, v + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal ret = {}\n\tfor\
    \ _, v in ipairs(l) do\n\t\ttable.insert(ret, v + 1)\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal res = {}\n\tfor\
    \ _, v in ipairs(l) do\n\t\tres[#res + 1] = v + 1\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i] = l[i] + 1\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local out = {}\n  for\
    \ i = 1, #l do\n    out[i] = l[i] + 1\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal new_list = {}\n\
    \tfor i, v in ipairs(l) do\n\t\tnew_list[i] = v + 1\n\tend\n\treturn new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local l_incr = {}\n\
    \    for i, x in ipairs(l) do\n        l_incr[i] = x + 1\n    end\n    return\
    \ l_incr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal a = {}\n\tfor\
    \ _, v in ipairs(l) do\n\t\ttable.insert(a, v + 1)\n\tend\n\treturn a\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, v in ipairs(l) do\n        r[#r + 1] = v + 1\n    end\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    return map(incr, l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ift3kch.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp2ift3kch.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2ift3kch.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal ret = {}\n\tfor\
    \ i, v in ipairs(l) do\n\t\tret[i] = v + 1\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  for i, v in ipairs(l)\
    \ do\n    l[i] = v + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal r = {}\n\tfor\
    \ i, n in ipairs(l) do\n\t\tr[i] = n + 1\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local out = {}\n \
    \   for i, v in ipairs(l) do\n        out[i] = v + 1\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i = 1, #l do\n    r[i] = l[i] + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local i = #l\n   \
    \ local carry = 1\n    while carry > 0 and i > 0 do\n        local v = l[i] +\
    \ carry\n        if v > 9 then\n            carry = 1\n            v = 0\n   \
    \     else\n            carry = 0\n        end\n        l[i] = v\n        i =\
    \ i - 1\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyr99bg69.lua:27:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 2}\nstack traceback:\n\t/tmp/tmpyr99bg69.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    for i = 1, #l do\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ i, v in ipairs(l) do\n    res[i] = v + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for i, v in ipairs(l) do\n        res[i] = v + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, v in ipairs(l) do\n        table.insert(r, v + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal ret = {}\n\tfor\
    \ i, v in ipairs(l) do\n\t\tret[i] = v + 1\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret = {}\n \
    \   for _,v in ipairs(l) do\n        table.insert(ret, v + 1)\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal new_list = {}\n\
    \tfor i = 1, #l do\n\t\tnew_list[i] = l[i] + 1\n\tend\n\treturn new_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local ret = {}\n  for\
    \ i, v in ipairs(l) do\n    table.insert(ret, v + 1)\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for _, val in ipairs(l) do\n    table.insert(new_list, val + 1)\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for _, val in ipairs(l) do\n        table.insert(res, val + 1)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret = {}\n \
    \   for i = 1, #l do\n        ret[i] = l[i] + 1\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local out = {}\n  for\
    \ i, v in ipairs(l) do\n    out[i] = v + 1\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for _, v in ipairs(l) do\n        new_list[#new_list + 1] = v + 1\n    end\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i,v in ipairs(l) do\n        table.insert(new_list, v + 1)\n    end\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local l2 = {}\n  for\
    \ i, v in ipairs(l) do\n    l2[i] = v + 1\n  end\n  return l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, el in ipairs(l) do\n        r[#r + 1] = el + 1\n    end\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal new_list = {}\n\
    \tfor i,v in ipairs(l) do\n\t\ttable.insert(new_list, v + 1)\n\tend\n\treturn\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ i, e in ipairs(l) do\n    res[i] = e + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i, v in ipairs(l) do\n        new_list[i] = v + 1\n    end\n    return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i, e in ipairs(l) do\n    r[i] = e + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local result = {}\n\
    \    for i = 1, #l do\n        result[i] = l[i] + 1\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  while\
    \ i <= #l do\n    l[i] = l[i] + 1\n    i = i + 1\n  end\n  return l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for i, e in ipairs(l) do\n        res[i] = e + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    return map(function(e)\
    \ return e + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxfw3egoj.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpxfw3egoj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxfw3egoj.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, v in ipairs(l) do\n    r[#r + 1] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(new_list, v + 1)\n  end\n  return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    return map(function(x)\
    \ return x + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph204g5kf.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmph204g5kf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmph204g5kf.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i, v in ipairs(l) do\n        table.insert(new_list, v + 1)\n    end\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal ret = {}\n\tfor\
    \ i,v in ipairs(l) do\n\t\tret[i] = v + 1\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local f = function(x)\
    \ return x + 1 end\n  return map(f, l)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ko__i7m.lua:8:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp8ko__i7m.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp8ko__i7m.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i] = l[i] + 1\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n\tlocal ret = {}\n\tfor\
    \ i, val in ipairs(l) do\n\t\ttable.insert(ret, val + 1)\n\tend\n\treturn ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local incr_list = {}\n\
    \  for k, v in pairs(l) do\n    incr_list[k] = v + 1\n  end\n  return incr_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local result = {}\n\
    \    for i, v in ipairs(l) do\n        result[i] = v + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local len = #l\n  local\
    \ incr_l = {}\n  for i = 1, len do\n    incr_l[i] = l[i] + 1\n  end\n  return\
    \ incr_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local out = {}\n  for\
    \ i, x in ipairs(l) do\n    out[i] = x + 1\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ i, v in ipairs(l) do\n    res[i] = v + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, v in ipairs(l) do\n        table.insert(r, v + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local l_incr = {}\n\
    \  for i, v in ipairs(l) do\n    l_incr[i] = v + 1\n  end\n  return l_incr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local len = table.getn(l)\n\
    \    local ret = {}\n    for i = 1, len do\n        ret[i] = l[i] + 1\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1p6lf6qb.lua:7:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp1p6lf6qb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1p6lf6qb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local l2 = {}\n  for\
    \ i,v in ipairs(l) do\n    l2[i] = v + 1\n  end\n  return l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, e in ipairs(l) do\n        table.insert(r, e + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local t = {}\n   \
    \ for i, v in ipairs(l) do\n        t[i] = v + 1\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    out[#out + 1] = v + 1\n  end\n  return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for _, i in ipairs(l) do\n        res[#res + 1] = i + 1\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i,v in ipairs(l) do\n        new_list[i] = v + 1\n    end\n    return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local result = {}\n\
    \    for i = 1, #l do\n        table.insert(result, l[i] + 1)\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, e in ipairs(l) do\n    r[#r + 1] = e + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i, n in ipairs(l) do\n    new_list[i] = n + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[i] = l[i] + 1\n  end\n  return new_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for _, x in ipairs(l) do\n        table.insert(res, x + 1)\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local res = {}\n  for\
    \ _, v in ipairs(l) do\n    res[#res + 1] = v + 1\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, v in ipairs(l) do\n        r[#r + 1] = v + 1\n    end\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local r = {}\n   \
    \ for _, e in ipairs(l) do\n        table.insert(r, e + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local ret = {}\n \
    \   for _,x in ipairs(l) do\n        table.insert(ret, x + 1)\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local new_list = {}\n\
    \    for i, val in ipairs(l) do\n        table.insert(new_list, val + 1)\n   \
    \ end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    if not l then return\
    \ {} end\n    local l_incr = {}\n    for i = 1, #l do\n        l_incr[i] = l[i]\
    \ + 1\n    end\n    return l_incr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local l2 = {}\n  for\
    \ i, v in ipairs(l) do\n    l2[i] = v + 1\n  end\n  return l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local out = {}\n \
    \   for i = 1, #l do\n        table.insert(out, l[i] + 1)\n    end\n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _,v in ipairs(l) do\n    r[#r+1] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local function incr(a)\n\
    \    return a + 1\n  end\n  return lmap(incr, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk7s09ze.lua:10:\
    \ attempt to call a nil value (global 'lmap')\nstack traceback:\n\t/tmp/tmpwk7s09ze.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpwk7s09ze.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(result, v + 1)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local newl = {}\n  for\
    \ _,v in ipairs(l) do\n    table.insert(newl, v + 1)\n  end\n  return newl\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i, v in ipairs(l) do\n    r[i] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(result, v + 1)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local out = {}\n \
    \   for i = 1, #l do\n        table.insert(out, l[i] + 1)\n    end\n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local res = {}\n \
    \   for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n    local out = {}\n \
    \   for i,v in ipairs(l) do\n        out[i] = v + 1\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
