name: HumanEval_139_special_factorial
language: lua
prompt: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
  -- 288\n-- The function will receive an integer as input and should return the special\n\
  -- factorial of this integer.\nlocal function special_factorial(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
  \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
  \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
  \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = 1\n  for i = 1, n do\n    result = result * factorial(i)\n\
    \  end\n  return result\nend", "    local ret = 1\n    while n > 0 do\n      \
    \  ret = ret * n\n        n = n - 1\n    end\n    return ret\nend", "  -- Calculate\
    \ the factorial of the number, then calculate the factorial of\n  -- all numbers\
    \ from n to 1\n  -- return the product of these numbers\n  local factorial = 1\n\
    \  for i = n, 1, -1 do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end", "  local res = 1\n  for i = n, 1, -1 do\n    res = res * n!\n  end\n  return\
    \ res\nend", "  local x = 1\n  for i = n, 1, -1 do\n    x = x * factorial(i)\n\
    \  end\n  return x\nend", "  if n == 0 then\n    return 1\n  else\n    return\
    \ n * special_factorial(n - 1)\n  end\nend", "    -- your code here\n    if n\
    \ == 0 then return 1 end\n    return n * special_factorial(n-1)\nend", "\tlocal\
    \ result = 1", "\tif n <= 0 then\n\t\treturn 1\n\tend\n\tlocal prod = 1\n\tfor\
    \ i = 1, n do\n\t\tprod = prod * i\n\tend\n\treturn prod * special_factorial(n\
    \ - 1)\nend", "  if (n > 0) then\n    return n * special_factorial(n - 1)\n  else\n\
    \    return 1\n  end\nend", end, "  if n == 0 then\n    return 1\n  else\n   \
    \ return n * special_factorial(n - 1)\n  end\nend", "  local result = 1\n  for\
    \ i = n, 1, -1 do\n    result = result * i\n  end\n  return result\nend", "  --\
    \ TODO: Implement this function\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "  -- TODO: define your function here\nend", " \
    \ local result = 1\n  for i = 1, n do\n    result = result * factorial(i)\n  end\n\
    \  return result\nend", "  local result = 1\n  for i = n, 1, -1 do\n    result\
    \ = result * (n - i + 1)\n  end\n  return result\nend", "    if n == 0 then\n\
    \        return 1\n    else\n        return n * special_factorial(n - 1)\n   \
    \ end\nend", "  local res = 1\n  for i = n, 1, -1 do\n    res = res * math.factorial(i)\n\
    \  end\n  return res\nend", "  if n < 1 then\n    return -1\n  end\n  local product\
    \ = 1\n  for i = n, 1, -1 do\n    product = product * i\n  end\n  return product\n\
    end", "    if n == 0 then\n        return 1\n    else\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "    if n > 0 then\n        return n * special_factorial(n\
    \ - 1)\n    else\n        return 1\n    end\nend", "  if n == 0 then\n    return\
    \ 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend", "    if n ==\
    \ 0 then\n        return 1\n    else\n        return n * special_factorial(n -\
    \ 1)\n    end\nend", "    return brazilian_factorial(n)\nend", "    local total\
    \ = 1\n    for i = n, 1, -1 do\n        total = total * factorial(i)\n    end\n\
    \    return total\nend", "  --local m = n\n  --while n > 1 do\n  --  n = n - 1\n\
    \  --  m = m * n\n  --end\n  --return m\n  return (n == 1) and 1 or n * special_factorial(n\
    \ - 1)\nend", "    n = n or 0\n    return n == 0 and 1 or n * special_factorial(n\
    \ - 1)\nend", "    local i\n    local result = 1\n    for i = 1, n do\n      \
    \  result = result * i\n    end\n    for i = 1, n - 1 do\n        result = result\
    \ * i\n    end\n    return result\nend", "  return 0\nend", "    local result\
    \ = 1\n    if n == 0 then\n        return 1\n    end\n    for i = 1, n do\n  \
    \      result = result * i\n    end\n    for i = n - 1, 1, -1 do\n        result\
    \ = result * i\n    end\n    return result\nend", "    -- Implement your solution\
    \ here.\n    local result = 1\n    for i = n, 1, -1 do\n        result = result\
    \ * i\n    end\n    return result\nend", end, '    local result = 1', "  assert(type(n)\
    \ == \"number\", \"parameter must be number\")\n  assert(n > 0, \"parameter must\
    \ be positive number\")\n  local result = 1\n  for i = n, 1, -1 do\n    result\
    \ = result * factorial(i)\n  end\n  return result\nend", "  if n == 0 then\n \
    \   return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend", " \
    \   local result = 1\n    for i = 1, n do\n        result = result * i\n    end\n\
    \    return result\nend", "  local result = 1\n  for i = n, 1, -1 do\n    result\
    \ = result * n\n    n = n - 1\n  end\n  return result\nend", "    if n == 0 then\n\
    \        return 1\n    else\n        local value = 1\n        for i = 1, n do\n\
    \            value = value * factorial(i)\n        end\n        return value\n\
    \    end\nend", "  local fact = 1\n  for i = n, 1, -1 do\n    fact = fact * i\n\
    \  end\n  return fact\nend", "  local tot = 1\n  for i = 1, n do\n    tot = tot\
    \ * i\n  end\n  return tot\nend", "  -- Insert your code here\nend", '  local
    result = 1', "    local res = 1\n    if n > 0 then\n        for i = n, 1, -1 do\n\
    \            res = res * i\n        end\n    end\n    return res\nend", "\tlocal\
    \ function factorial(n)\n\t\tlocal result = 1\n\t\tfor i = 1, n do\n\t\t\tresult\
    \ = result * i\n\t\tend\n\t\treturn result\n\tend\n\tlocal result = 1\n\tfor i\
    \ = 1, n do\n\t\tresult = result * factorial(i)\n\tend\n\treturn result\nend",
  "\tlocal x = n\n\tfor i = n - 1, 1, -1 do\n\t\tx = x * i\n\tend\n\treturn x\nend",
  "\tif n <= 0 then\n\t\treturn -1\n\tend\n\tlocal acc = 1\n\tfor i = 1, n do\n\t\t\
    acc = acc * factorial(i)\n\tend\n\treturn acc\nend", "  local result = 1\n  for\
    \ i = n, 1, -1 do\n    result = result * i\n  end\n  return result\nend", "  \
    \  local result = 1\n    for i = n, 1, -1 do\n        result = result * factorial(i)\n\
    \    end\n    return result\nend", "    -- TODO: Your code here\nend", "  -- code\
    \ goes here\n  local count=1\n  for i=1,n do\n    count=count*i\n  end\n  return\
    \ count\nend", "  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend", "    if n <= 0 then\n        return 1\n\
    \    end\n    local result = 1\n    for i = n, 1, -1 do\n        result = result\
    \ * factorial(i)\n    end\n    return result\nend", "  local result = 1\n  for\
    \ i = 1, n do\n    result = result * i\n  end\n  for i = 1, n - 1 do\n    result\
    \ = result * i\n  end\n  return result\nend", "  -- TODO: your code here\nend",
  "  return (n <= 1) and 1 or n * special_factorial(n - 1)\nend", "  local total =\
    \ 1\n  for i = n, 1, -1 do\n    total = total * i\n  end\n  return total\nend",
  "    local result = 1\n    for i = 1, n do\n        result = result * factorial(i)\n\
    \    end\n    return result\nend", "  -- Implement here\nend", "    if n > 0 then\n\
    \        local prod = 1\n        for i = n, 1, -1 do\n            prod = prod\
    \ * factorial(i)\n        end\n        return prod\n    else\n        return false\n\
    \    end\nend", "    return 0\nend", "    local n_factorial = 1\n    for i = 1,\
    \ n do\n        n_factorial = n_factorial * i\n    end\n    return n_factorial\
    \ * special_factorial(n - 1)\nend", "    -- Place your code here\n    factorial\
    \ = 1\n    for i = 1, n do\n        factorial = factorial * i\n    end\n    return\
    \ factorial\nend", "    local x = 1\n    local s = 1\n    while x <= n do\n  \
    \      s = s * x\n        x = x + 1\n    end\n    return s * special_factorial(n\
    \ - 1)\nend", "  local result = 1\n  for i = 1, n do\n    result = result * i\n\
    \  end\n  return result\nend", "    if n == 0 then\n        return 1\n    else\n\
    \        local product = n\n        for i = n - 1, 1, -1 do\n            product\
    \ = product * i\n        end\n        return product\n    end\nend", "  -- YOUR\
    \ CODE HERE\n  local prod = 1\n  for i = 1, n do\n    prod = prod * factorial(i)\n\
    \  end\n  return prod\nend", "    error(\"Not implemented\")\nend", "    local\
    \ result = 1\n    for i = 1, n do\n        result = result * math.factorial(i)\n\
    \    end\n    return result\nend", "    local product = 1\n    for i = 1, n do\n\
    \        product = product * special_factorial(i)\n    end\n    return product\n\
    end", "    local acc = 1\n    for i = n, 1, -1 do\n        acc = acc * factorial(i)\n\
    \    end\n    return acc\nend", '  local result = 1', "  local factorial = 1\n\
    \  for i = n, 1, -1 do\n    factorial = factorial * factorial_number(i)\n  end\n\
    \  return factorial\nend", "    -- 1. Method: recursion\n    -- Input: n (integer,\
    \ n>0)\n    -- Return: special factorial of n\n    --      1 if n = 0\n    --\
    \      n * (n-1)! * (n-2)! * ... * 1! if n > 0\n    if n == 0 then\n        return\
    \ 1\n    else\n        return n * special_factorial(n-1)\n    end\nend", "  local\
    \ function factorial(n)\n    if n == 0 then\n      return 1\n    else\n      return\
    \ n * factorial(n - 1)\n    end\n  end", "  local result = 1\n  for i = 1, n do\n\
    \    result = result * i\n  end\n  return result\nend", '    local factorial =
    1', "    local factorial = 1\n    for i = n, 1, -1 do\n        factorial = factorial\
    \ * i\n    end\n    return factorial\nend", "    local result = 1\n    for i =\
    \ n, 1, -1 do\n        result = result * i\n    end\n    return result\nend",
  "  if n < 0 then\n    return nil\n  end\n  local result = 1\n  for i = n, 1, -1\
    \ do\n    result = result * factorial(i)\n  end\n  return result\nend", "    if\
    \ n < 0 then\n        return\n    end\n    local product = 1\n    for i = n, 1,\
    \ -1 do\n        product = product * factorial(i)\n    end\n    return product\n\
    end", "  -- your code here\n  local r = 1\n  if n > 0 then\n    for i = 1, n do\n\
    \      r = r * i\n    end\n  end\n  return r\nend", "  local result = 1\n  for\
    \ i = n, 1, -1 do\n    result = result * i\n  end\n  return result\nend", "  \
    \  local m = 1\n    for i = 1, n do\n        m = m * i\n    end\n    return m\n\
    end", "  -- TODO: Write your code here\n  return 0\nend", "    -- YOUR CODE HERE\n\
    \    local result = 1\n    local ans = 1\n    for i = 1, n, 1 do\n        result\
    \ = result * i\n        ans = ans * result\n    end\n    return ans\nend", " \
    \ return (n > 0) and n * special_factorial(n - 1) or 1\nend", "  local factorial\
    \ = 1\n  while n > 0 do\n    factorial = factorial * n\n    n = n - 1\n  end\n\
    \  return factorial\nend", "  -- TODO: Implement this function\nend", "\tlocal\
    \ myVar = 1;\n\tfor i = n, 1, -1 do\n\t\tmyVar = myVar * i;\n\tend\n\treturn myVar;\n\
    end", "    local result = 1\n    for i = 1, n do\n        result = result * factorial(i)\n\
    \    end\n    return result\nend", "  return 1\nend", "    if n > 0 then\n   \
    \     return n * special_factorial(n - 1)\n    else\n        return 1\n    end\n\
    end", "    return 0\nend", "  -- body\n  local function factorial(a)\n    if a\
    \ == 0 then\n      return 1\n    else\n      return a * factorial(a - 1)\n   \
    \ end\n  end\n  local c = 1\n  for i = 1, n do\n    c = c * factorial(i)\n  end\n\
    \  return c\nend", "  -- complete this function\nend", "  local f = 1\n  for i\
    \ = n, 1, -1 do\n    f = f * i\n  end\n  return f\nend", "  if n <= 0 then\n \
    \   return nil\n  end\n  local ret = 1\n  for i = 1, n do\n    ret = ret * factorial(i)\n\
    \  end\n  return ret\nend", "  if n == 0 then\n    return 0\n  end\n  return n\
    \ * special_factorial(n - 1)\nend", "  local product = 1\n  for i = n, 1, -1 do\n\
    \    product = product * i\n  end\n  return product\nend", "\tlocal result = 1\n\
    \tfor i = n, 1, -1 do\n\t\tresult = result * i\n\tend\n\treturn result\nend",
  "    -- TODO: Implement the function\nend", "    -- YOUR CODE HERE\nend", "    --\
    \ Your code here\nend", "  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend", "    if n == 0 then\n    \
    \    return 1\n    else\n        return n * special_factorial(n - 1)\n    end\n\
    end", "  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n\
    \  end\n  return factorial\nend", "  local fact = 1\n  for i = n, 1, -1 do\n \
    \   fact = fact * i\n  end\n  return fact\nend", "    -- YOUR CODE GOES HERE\n\
    end", "    if n == 0 then\n        return 1\n    else\n        local brazilian_factorial\
    \ = 1\n        for i = 1, n do\n            brazilian_factorial = brazilian_factorial\
    \ * i\n        end\n        return special_factorial(n - 1) * brazilian_factorial\n\
    \    end\nend", end, "    local value = 1\n    for i = 1, n do\n        value\
    \ = value * (i - 1)\n    end\n    return value\nend", "  if n == 0 then\n    return\
    \ 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend", "  if n <=\
    \ 0 then return 0 end\n  local factorial = 1\n  for i = n, 1, -1 do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend", "    -- Replace the dots with\
    \ your code.\nend", "  return 1\nend", "  local r = 1\n  for i = 1, n do\n   \
    \ r = r * i\n  end\n  for i = n - 1, 1, -1 do\n    r = r * i\n  end\n  return\
    \ r\nend", "  local result = 1\n  for i = 1, n do\n    result = result * i\n \
    \ end\n  return result\nend", "    if n == 0 then\n        return 1\n    else\n\
    \        return n * special_factorial(n - 1)\n    end\nend", "    local total\
    \ = 1\n    local i = 1\n    while i <= n do\n        total = total * i\n     \
    \   i = i + 1\n    end\n    return total\nend", "    -- your code here\n    local\
    \ tot = 1\n    for i = n, 1, -1 do\n        tot = tot * factorial(i)\n    end\n\
    \    return tot\nend", "  -- Your code here\nend", "  local res = 1\n  for i =\
    \ 1, n do\n    res = res * i\n  end\n  return res\nend", "  -- TODO: Implement\
    \ the function.\nend", "  local product = 1\n  for i = n, 1, -1 do\n    product\
    \ = product * factorial(i)\n  end\n  return product\nend", "    local product\
    \ = 1\n    for i = 1, n do\n        product = product * i\n    end\n    return\
    \ product\nend", "    -- Complete this function\nend", "    local total = 1\n\
    \    while n > 0 do\n        total = total * factorial(n)\n        n = n - 1\n\
    \    end\n    return total\nend", "    if n > 0 then\n        return n * special_factorial(n\
    \ - 1)\n    else\n        return 1\n    end\nend", "    if n <= 0 then\n     \
    \   return nil\n    end\n    local factorial = 1\n    for i = n, 1, -1 do\n  \
    \      factorial = factorial * i\n    end\n    return factorial\nend", "\tif (n\
    \ <= 0) then\n\t\treturn 0\n\tend\n\tlocal product = 1\n\tfor i = n, 1, -1 do\n\
    \t\tproduct = product * i\n\tend\n\treturn product\nend", "    local total = 1\n\
    \    for i = n, 1, -1 do\n        total = total * i\n    end\n    return total\n\
    end", "    local result = 1\n    for i = 1, n do\n        result = result * i\n\
    \    end\n    for i = n - 1, 1, -1 do\n        result = result * i\n    end\n\
    \    return result\nend", "  local result = 1\n  for i = 1, n do\n    result =\
    \ result * i\n  end\n  for i = 1, n - 1 do\n    result = result * i\n  end\n \
    \ return result\nend", "    local out = 1\n    if n > 0 then\n        for i =\
    \ 1, n do\n            out = out * (i * factorial(i))\n        end\n    end\n\
    \    return out\nend", "    local result = 1\n    for i = n, 1, -1 do\n      \
    \  result = result * factorial(i)\n    end\n    return result\nend", "    local\
    \ res = 1\n    while n > 0 do\n        res = res * n * (n - 1)\n        n = n\
    \ - 2\n    end\n    return res\nend", "    return nil\nend", "  return 1;\nend",
  "    local result = 1\n    for i = 1, n do\n        result = result * i\n    end\n\
    \    return result\nend", "\tif n <= 0 then return nil end\n\tlocal result = 1\n\
    \tfor i = 1, n do\n\t\tresult = result * math.factorial(i)\n\tend\n\treturn result\n\
    end", '    local result = 1', "  if n > 0 then\n    local total = 1\n    for i\
    \ = n, 1, -1 do\n      total = total * factorial(i)\n    end\n    return total\n\
    \  else\n    return nil\n  end\nend", "  -- TODO: Implement the function.\n  if\
    \ n > 0 then\n    n = n * special_factorial(n-1)\n  else\n    n = 1\n  end\n \
    \ return n\nend", "  -- TODO\nend", "  if n == 0 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend", "    if n == 0 then\n \
    \       return 1\n    else\n        return n * special_factorial(n - 1)\n    end\n\
    end", "    local factorial = n\n    for i = n - 1, 1, -1 do\n        factorial\
    \ = factorial * i\n    end\n    return factorial\nend", "  local result = 1\n\
    \  for i = 1, n do\n    result = result * i\n  end\n  return result\nend", " \
    \ if n < 0 then\n    return nil\n  end\n  local result = 1\n  for i = n, 1, -1\
    \ do\n    result = result * factorial(i)\n  end\n  return result\nend", "    local\
    \ result = 1\n    for i = 1, n do\n        result = result * factorial(i)\n  \
    \  end\n    return result\nend", "    local sf = 1\n    for i = n, 1, -1 do\n\
    \        sf = sf * factorial(i)\n    end\n    return sf\nend", "    if n > 0 then\n\
    \        local factorial = 1\n        local i = n\n        while i > 0 do\n  \
    \          factorial = factorial * i\n            i = i - 1\n        end\n   \
    \     return factorial\n    else\n        return nil\n    end\nend", "  if n ==\
    \ 0 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n  end\n\
    end", "  return n\nend", "\tlocal fac = 1\n\tfor i = 1, n do\n\t\tfac = fac *\
    \ i\n\tend\n\treturn fac\nend", end, '  local total = 1', "    -- TODO: implement\
    \ this function\n    return nil\nend", "  local result = 1\n  for i = 1, n do\n\
    \    result = result * factorial(i)\n  end\n  return result\nend", "    local\
    \ result = 1\n    for i = n, 2, -1 do\n        result = result * i\n    end\n\
    \    return result\nend", '  local result = 1', "    local fact = 1\n    local\
    \ partial = 1\n    if n < 1 then\n        return nil\n    end\n    for i = 1,\
    \ n do\n        fact = fact * i\n        partial = partial * fact\n    end\n \
    \   return partial\nend", "  local output = 1\n  for i = n, 1, -1 do\n    output\
    \ = output * factorial(i)\n  end\n  return output\nend", "    local f = 1\n  \
    \  for i = 1, n do\n        f = f * i\n    end\n    return f\nend", "  if n <\
    \ 1 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  return\
    \ n * special_factorial(n - 1)\nend", "    if n < 0 then return 0 end\n    local\
    \ result = 1\n    for i = n, 1, -1 do\n        result = result * factorial(i)\n\
    \    end\n    return result\nend", "    -- Check if the argument is valid\n  \
    \  if n <= 0 then\n        error(\"Argument must be > 0\")\n    end", "  return\
    \ factorial(n) / factorial(n - 2)\nend", '    local f = 1', "    local result\
    \ = 1\n    local factorial = 1\n    while n > 0 do\n        factorial = factorial\
    \ * n\n        result = result * factorial\n        n = n - 1\n    end\n    return\
    \ result\nend", "    if n < 0 then return nil end\n    if n == 0 then return 1\
    \ end\n    local answer = 1\n    while n >= 1 do\n        answer = answer * n\n\
    \        n = n - 1\n    end\n    return answer\nend", "  -- ...\nend", "  if n\
    \ < 0 then\n    error(\"Undefined function\")\n  end\n  local product = 1\n  for\
    \ i = 1, n do\n    product = product * factorial(i)\n  end\n  return product\n\
    end", "  -- check preconditions\n  if n <= 0 then\n    return nil\n  end", " \
    \   if n <= 0 then\n        return nil\n    end\n    local r = 1\n    for i =\
    \ n, 1, -1 do\n        r = r * i\n    end\n    return r\nend\n_G.special_factorial\
    \ = special_factorial", "  -- Insert your code here\nend", "    return n\nend",
  "\tlocal function factorial(n)\n\t\tif n == 0 then\n\t\t\treturn 1\n\t\telse\n\t\
    \t\treturn n * factorial(n - 1)\n\t\tend\n\tend", "  if n == 0 then\n    return\
    \ 1\n  else\n    local res = 1\n    for i = n, 1, -1 do\n      res = res * i\n\
    \    end\n    return res\n  end\nend", "  local total = 1\n  for i = 1, n do\n\
    \    total = total * i\n  end\n  return total\nend", "    if n <= 0 then\n   \
    \     return 1\n    end\n    return n * special_factorial(n - 1)\nend", "    if\
    \ n <= 0 then\n        return 1\n    end\n    return n * special_factorial(n -\
    \ 1)\nend", "    local factorial = 1\n    if n <= 0 then\n        return 1\n \
    \   end\n    for i = 1, n do\n        factorial = factorial * i\n    end\n   \
    \ for i = 1, n - 1 do\n        factorial = factorial * i\n    end\n    return\
    \ factorial\nend", "\tlocal result = 1\n\tfor i = n, 1, -1 do\n\t\tresult = result\
    \ * i\n\tend\n\treturn result\nend", "    return n, \"not done\"\nend", "    --\
    \ TODO: Implement this function\nend", "    if n == 0 then\n        return 1\n\
    \    else\n        return n * special_factorial(n - 1)\n    end\nend", "  if n\
    \ == 0 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n \
    \ end\nend", "    return n\nend", '  -- Your code here', "    -- Insert your code\
    \ here\nend", "  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "\tlocal function factorial(n)\n\t\tif n < 2 then\n\t\t\t\
    return 1\n\t\telse\n\t\t\treturn n * factorial(n - 1)\n\t\tend\n\tend", "  return\
    \ ((n > 0) and (n * special_factorial(n - 1)) or 1)\nend", "    -- code here\n\
    end", "  return 1\nend", "    if n == 0 then\n        return 1\n    else\n   \
    \     return n * special_factorial(n - 1)\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
