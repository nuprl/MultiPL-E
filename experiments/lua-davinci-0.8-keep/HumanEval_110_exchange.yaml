name: HumanEval_110_exchange
language: lua
prompt: "-- In this problem, you will implement a function that takes two lists of\
  \ numbers,\n-- and determines whether it is possible to perform an exchange of elements\n\
  -- between them to make lst1 a list of only even numbers.\n-- There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n-- If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n-- all the elements of\
  \ lst1 to be even, return \"YES\".\n-- Otherwise, return \"NO\".\n-- For example:\n\
  -- exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n-- exchange([1, 2, 3, 4], [1,\
  \ 5, 3, 4]) => \"NO\"\n-- It is assumed that the input lists will be non-empty.\n\
  local function exchange(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2,\
  \ 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n\
  \    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
  \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
  \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if is_even(lst1[1]) then\n    return \"YES\"\n  end\n  for i = 1,\
    \ #lst2 do\n    if is_even(lst2[i]) then\n      table.remove(lst2, i)\n      table.insert(lst2,\
    \ lst1[1])\n      table.remove(lst1, 1)\n      table.insert(lst1, lst2[i])\n \
    \     return exchange(lst1, lst2)\n    end\n  end\n  return \"NO\"\nend", "  local\
    \ allEven = true\n  for _, v in ipairs(lst1) do\n    if not isEven(v) then\n \
    \     allEven = false\n      break\n    end\n  end\n  if allEven then\n    return\
    \ \"YES\"\n  end\n  if #lst1 == 1 then\n    return \"NO\"\n  end\n  for i, v in\
    \ ipairs(lst1) do\n    if not isEven(v) then\n      for j, u in ipairs(lst2) do\n\
    \        if isEven(u) then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n  \
    \        return exchange(lst1, lst2)\n        end\n      end\n    end\n  end\n\
    \  return \"NO\"\nend", "  if not lst1 or not lst2 then return \"NO\" end\n  local\
    \ lst = List.join(lst1, lst2)\n  if List.every(lst, function(e) return not math.fmod(e,\
    \ 2) end) then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", " \
    \   local function is_even(x)\n        return x % 2 == 0\n    end\n    local pos1\
    \ = 1\n    local pos2 = 1\n    local limit1 = #lst1\n    local limit2 = #lst2\n\
    \    while pos1 <= limit1 and pos2 <= limit2 do\n        local even = is_even(lst1[pos1])\n\
    \        if even then\n            pos1 = pos1 + 1\n        else\n           \
    \ if is_even(lst2[pos2]) then\n                local temp = lst1[pos1]\n     \
    \           lst1[pos1] = lst2[pos2]\n                lst2[pos2] = temp\n     \
    \           pos1 = pos1 + 1\n            end\n            pos2 = pos2 + 1\n  \
    \      end\n    end\n    for _, value in ipairs(lst1) do\n        if not is_even(value)\
    \ then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\n\
    end", "    for k,v in pairs(lst1) do\n        if v % 2 == 1 then\n           \
    \ for k2,v2 in pairs(lst2) do\n                if v2 % 2 == 0 then\n         \
    \           lst1[k] = v2\n                    lst2[k2] = v\n                 \
    \   return exchange(lst1, lst2)\n                end\n            end\n      \
    \      return \"NO\"\n        end\n    end\n    return \"YES\"\nend", "    --\
    \ a little analysis shows that it is possible to perform an exchange of\n    --\
    \ elements between the lst1 and lst2 if at least one element of lst1 is\n    --\
    \ even and at least one element of lst2 is odd.\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            for _, w in ipairs(lst2) do\n  \
    \              if w % 2 == 1 then\n                    return \"YES\"\n      \
    \          end\n            end\n        end\n    end\n    return \"NO\"\nend",
  "    local count = 0\n    for i = 1, #lst1 do\n        if lst1[i] % 2 == 1 then\n\
    \            count = count + 1\n        end\n    end\n    for i = 1, #lst2 do\n\
    \        if lst2[i] % 2 == 1 then\n            count = count - 1\n        end\n\
    \    end\n    if count <= 0 then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "    local odd1 = {}\n    local odd2 = {}\n    for i,\
    \ v in ipairs(lst1) do\n        if v % 2 == 1 then\n            table.insert(odd1,\
    \ i)\n        end\n    end\n    for i, v in ipairs(lst2) do\n        if v % 2\
    \ == 1 then\n            table.insert(odd2, i)\n        end\n    end\n    if #odd1\
    \ > #odd2 then\n        return \"NO\"\n    end\n    return \"YES\"\nend", "  \
    \  -- your code here\nend", "    for _, v in ipairs(lst1) do\n        if v % 2\
    \ == 1 then\n            for _, v in ipairs(lst2) do\n                if v % 2\
    \ == 0 then\n                    return \"YES\"\n                end\n       \
    \     end\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend", "    for i = 1, #lst1 do\n        if lst1[i] % 2 == 1 then\n         \
    \   for j = 1, #lst2 do\n                if lst2[j] % 2 == 0 then\n          \
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"\
    YES\"\n                end\n            end\n            return \"NO\"\n     \
    \   end\n    end\n    return \"YES\"\nend", "  local odd1 = 0\n  local odd2 =\
    \ 0\n  for _, n in ipairs(lst1) do\n    if n % 2 == 1 then\n      odd1 = odd1\
    \ + 1\n    end\n  end\n  for _, n in ipairs(lst2) do\n    if n % 2 == 1 then\n\
    \      odd2 = odd2 + 1\n    end\n  end\n  if odd1 == odd2 then\n    return \"\
    YES\"\n  else\n    return \"NO\"\n  end\nend", "\t-- TODO: Write your code here\n\
    end", "  for i = 1, #lst1 do\n    if (lst1[i] % 2 ~= 0) then\n      for j = 1,\
    \ #lst2 do\n        if (lst2[j] % 2 == 0) then\n          local tmp = lst1[i]\n\
    \          lst1[i] = lst2[j]\n          lst2[j] = tmp\n          return exchange(lst1,\
    \ lst2)\n        end\n      end\n      return \"NO\"\n    end\n  end\n  return\
    \ \"YES\"\nend", "    -- Return \"YES\" if lst1 has an even element, else return\
    \ \"NO\".\n    if lst1.has_even(lst1) then\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend", "  -- Write your code here...\nend", " \
    \   if (#lst1 == 0) then\n        return \"NO\"\n    end\n    if (#lst2 == 0)\
    \ then\n        return \"NO\"\n    end\n    if (lst1[1] % 2 == 0) then\n     \
    \   return \"YES\"\n    end\n    for i, v in ipairs(lst2) do\n        if (v %\
    \ 2 == 0) then\n            table.remove(lst2, i)\n            table.insert(lst1,\
    \ v)\n            return exchange(lst1, lst2)\n        end\n    end\n    return\
    \ \"NO\"\nend", end, "    -- TODO: Write this code\nend", "    -- Write your code\
    \ here.\n    local nums = {}\n    for _, v in ipairs(lst1) do\n        if nums[v]\
    \ then\n            nums[v] = nums[v] + 1\n        else\n            nums[v] =\
    \ 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if nums[v]\
    \ then\n            nums[v] = nums[v] + 1\n        else\n            nums[v] =\
    \ 1\n        end\n    end\n    local evens = 0\n    local odds = 0\n    for k,\
    \ v in pairs(nums) do\n        if k % 2 == 0 then\n            evens = evens +\
    \ v\n        else\n            odds = odds + v\n        end\n    end\n    return\
    \ (evens >= odds) and \"YES\" or \"NO\"\nend", "    -- your code here\nend", " \
    \   local check = false\n    for i = 1, #lst1 do\n        if lst1[i] % 2 == 1\
    \ then\n            for j = 1, #lst2 do\n                if lst2[j] % 2 == 0 then\n\
    \                    check = true\n                    lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n                    break\n                end\n            end\n \
    \       end\n    end\n    if check then\n        return \"YES\"\n    else\n  \
    \      return \"NO\"\n    end\nend", "    for _, lst in ipairs({lst1, lst2}) do\n\
    \        for k, v in ipairs(lst) do\n            if v % 2 == 1 then\n        \
    \        lst[k] = nil\n            end\n        end\n    end\n    local n1, n2\
    \ = #lst1, #lst2\n    if n1 == 0 then\n        return \"YES\"\n    elseif n2 ==\
    \ 0 then\n        return \"NO\"\n    else\n        return \"YES\"\n    end\nend",
  "  if all_even(lst1) then\n    return \"YES\"\n  end\n  local count = 0\n  for _,\
    \ v in ipairs(lst1) do\n    if v % 2 == 1 then\n      count = count + 1\n    end\n\
    \  end\n  local odd_cnt = 0\n  for _, v in ipairs(lst2) do\n    if v % 2 == 1\
    \ then\n      odd_cnt = odd_cnt + 1\n    end\n  end\n  if odd_cnt >= count then\n\
    \    return \"YES\"\n  end\n  return \"NO\"\nend", "  return \"NO\"\nend", end,
  "    -- your code here\nend", "    local have_odd_in_lst1 = false\n    local have_even_in_lst2\
    \ = false\n    for _, i in ipairs(lst1) do\n        if i % 2 == 1 then\n     \
    \       have_odd_in_lst1 = true\n        end\n    end\n    for _, i in ipairs(lst2)\
    \ do\n        if i % 2 == 0 then\n            have_even_in_lst2 = true\n     \
    \   end\n    end\n    if have_odd_in_lst1 and have_even_in_lst2 then\n       \
    \ return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  -- This is\
    \ a stupid problem that doesn't really need a\n  -- solution.  The purpose is\
    \ to show that a problem\n  -- can be solved by a simple \"or\" operation.\n \
    \ -- The author failed to provide any limits on the\n  -- number of elements that\
    \ can be exchanged.\n  -- So, we simply look at all the element of lst1\n  --\
    \ and if any of them are even, we have an \"even\"\n  -- solution, so it is possible\
    \ to exchange elements\n  -- to make all of lst1 even.\n  --\n  -- In other words,\
    \ if ANY element of lst1 is even,\n  -- we can exchange elements to get the desired\
    \ result.\n  -- On the other hand, if NONE of the elements of lst1\n  -- are even,\
    \ we CANNOT exchange elements to get the\n  -- desired result.  There is no in-between.\n\
    \  for _, n in ipairs(lst1) do\n    if n % 2 == 0 then\n      return \"YES\"\n\
    \    end\n  end\n  return \"NO\"\nend", "  -- WRITE YOUR CODE HERE\n  local lst1_even\
    \ = false\n  local lst2_even = false\n  for i = 1, #lst1 do\n    if lst1[i] %\
    \ 2 == 0 then\n      lst1_even = true\n    end\n  end\n  for i = 1, #lst2 do\n\
    \    if lst2[i] % 2 == 0 then\n      lst2_even = true\n    end\n  end\n  if lst1_even\
    \ and lst2_even then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend",
  "  local odd_count = 0\n  for i, v in ipairs(lst1) do\n    if v % 2 == 1 then\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  for i, v in ipairs(lst2) do\n\
    \    if v % 2 == 1 then\n      odd_count = odd_count - 1\n    end\n  end\n  if\
    \ odd_count == 0 then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\n\
    end", "  -- local n = #lst1\n  local n = table.getn(lst1)\n  local n2 = table.getn(lst2)\n\
    \  -- local n2 = #lst2\n  for i = 1, n do\n    if (lst1[i] % 2 == 1) then\n  \
    \    local j = 1\n      while j <= n2 do\n        if (lst2[j] % 2 == 1) then\n\
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n          break\n        end\n\
    \        j = j + 1\n      end\n      if j > n2 then\n        return \"NO\"\n \
    \     end\n    end\n  end\n  return \"YES\"\nend", "    if (lst1[1] % 2 == 0)\
    \ then\n        return \"YES\"\n    end\n    for i, _ in ipairs(lst2) do\n   \
    \     if (lst2[i] % 2 == 0) then\n            return \"YES\"\n        end\n  \
    \  end\n    return \"NO\"\nend", "    -- TODO\nend", "\tlocal is_even = function(x)\
    \ return x % 2 == 0 end\n\tif not List.any(is_even, lst1) then\n\t\treturn \"\
    NO\"\n\tend\n\tlocal n = List.length(lst1)\n\tlocal first_odd, first_even = List.partition(is_even,\
    \ lst1)\n\tlocal second_odd, second_even = List.partition(is_even, lst2)\n\tlocal\
    \ number_of_odd_elements = (List.length(first_odd) + List.length(second_odd))\n\
    \treturn number_of_odd_elements % 2 == 0 and \"YES\" or \"NO\"\nend", "    local\
    \ lst1_parity, lst2_parity = {}, {}\n    for _, n in ipairs(lst1) do\n       \
    \ lst1_parity[n % 2] = true\n    end\n    for _, n in ipairs(lst2) do\n      \
    \  lst2_parity[n % 2] = true\n    end\n    if (lst1_parity[0] and lst2_parity[1])\
    \ or (lst1_parity[1] and lst2_parity[0]) then\n        return \"YES\"\n    end\n\
    \    return \"NO\"\nend", "    for _, v in ipairs(lst1) do\n        if v % 2 ==\
    \ 1 then\n            for _, v2 in ipairs(lst2) do\n                if v2 % 2\
    \ == 0 then\n                    return \"YES\"\n                end\n       \
    \     end\n        end\n    end\n    return \"NO\"\nend", end, "  local ok = true\n\
    \  for _, v in ipairs(lst1) do\n    if v % 2 == 1 then\n      ok = false\n   \
    \   break\n    end\n  end\n  if ok then\n    return \"YES\"\n  end\n  for _, v\
    \ in ipairs(lst2) do\n    if v % 2 == 0 then\n      return \"YES\"\n    end\n\
    \  end\n  return \"NO\"\nend", "    local evens = 0\n    local odds = 0\n    for\
    \ i = 1, #lst1 do\n        if lst1[i] % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    for\
    \ i = 1, #lst2 do\n        if lst2[i] % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    if\
    \ evens > odds then\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend", "  -- Write your code here.\nend", "  -- Your code here\nend",
  "  -- Insert code here\nend", "    -- TODO: finish this code!\n    return \"NO\"\
    \nend", "    return \"YES\"\nend", "  -- TODO: Write your code here\n  return\
    \ nil\nend", "    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n\
    \        sum1 = sum1 + lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2\
    \ = sum2 + lst2[i]\n    end\n    if sum1 % 2 == 0 then\n        return \"YES\"\
    \n    elseif sum2 % 2 == 0 then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "  if #lst1 < 2 then\n    return \"NO\"\n  end\n  for\
    \ i = 1, #lst1 do\n    if lst1[i] % 2 == 1 then\n      for j = 1, #lst2 do\n \
    \       if lst2[j] % 2 == 0 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \          break\n        end\n      end\n    end\n  end\n  for i = 1, #lst1 do\n\
    \    if lst1[i] % 2 == 1 then\n      return \"NO\"\n    end\n  end\n  return \"\
    YES\"\nend", "  return \"YES\"\nend", "    local odds_in_lst1 = {}\n    local\
    \ evens_in_lst2 = {}\n    local all_even = true\n    for i, n in ipairs(lst1)\
    \ do\n        if n % 2 == 1 then\n            odds_in_lst1[#odds_in_lst1 + 1]\
    \ = n\n            all_even = false\n        end\n    end\n    for i, n in ipairs(lst2)\
    \ do\n        if n % 2 == 0 then\n            evens_in_lst2[#evens_in_lst2 + 1]\
    \ = n\n        end\n    end\n    if all_even then\n        return \"YES\"\n  \
    \  end\n    if #odds_in_lst1 > #evens_in_lst2 then\n        return \"NO\"\n  \
    \  end\n    return \"YES\"\nend", "  return \"NO\"\nend", "    local odd_number\
    \ = false\n    for _, v in ipairs(lst1) do\n        if v % 2 == 1 then\n     \
    \       odd_number = true\n            break\n        end\n    end\n    if not\
    \ odd_number then\n        return \"YES\"\n    end\n    odd_number = false\n \
    \   for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            odd_number\
    \ = true\n            break\n        end\n    end\n    if not odd_number then\n\
    \        return \"NO\"\n    end\n    return \"YES\"\nend", "  local odd = {}\n\
    \  local i = 1\n  local even = {}\n  local j = 1\n  local res = true\n  for k,\
    \ v in ipairs(lst1) do\n    if not is_even(v) then\n      odd[i] = v\n      i\
    \ = i + 1\n    end\n  end\n  for k, v in ipairs(lst2) do\n    if is_even(v) then\n\
    \      even[j] = v\n      j = j + 1\n    end\n  end\n  if #odd == #even then\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    local lst1_odd\
    \ = {}\n    local lst2_even = {}\n    for i, v in ipairs(lst1) do\n        if\
    \ v % 2 == 1 then\n            table.insert(lst1_odd, v)\n        end\n    end\n\
    \    for i, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(lst2_even,\
    \ v)\n        end\n    end\n    if #lst1_odd == #lst2_even then\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  -- Write your code\
    \ here\nend", "   if #lst1 == 0 then return \"YES\" end\n   if lst1[1] % 2 ==\
    \ 0 then\n      return exchange(lst1[2], lst2)\n   else\n      for i = 1, #lst2\
    \ do\n         if lst2[i] % 2 == 0 then\n            lst2[i], lst1[1] = lst1[1],\
    \ lst2[i]\n            return exchange(lst1[2], lst2)\n         end\n      end\n\
    \      return \"NO\"\n   end\nend\nprint(exchange({1, 2, 3, 4}, {1, 2, 3, 4}))\n\
    print(exchange({1, 2, 3, 4}, {1, 5, 3, 4}))\nprint(exchange({1, 5, 3, 4}, {1,\
    \ 2, 3, 4}))\nprint(exchange({1, 5, 3, 4}, {1, 5, 3, 4}))", "  -- TODO: Implement\
    \ this function\nend", end, "  -- YOUR CODE HERE\n  for i, _ in ipairs(lst1) do\n\
    \    if lst1[i] % 2 == 1 then\n      for j, _ in ipairs(lst2) do\n        if lst2[j]\
    \ % 2 == 0 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return\
    \ \"YES\"\n        end\n      end\n      return \"NO\"\n    end\n  end\n  return\
    \ \"YES\"\nend", "  -- your code goes here\nend", "  -- Your code here\nend",
  "  local function iter(lst1, lst2, n)\n    if n == #lst1 then\n      return true\n\
    \    elseif lst1[n] % 2 == 0 then\n      return iter(lst1, lst2, n + 1)\n    else\n\
    \      for i = 1, #lst2 do\n        if lst2[i] % 2 == 0 then\n          lst1[n],\
    \ lst2[i] = lst2[i], lst1[n]\n          if iter(lst1, lst2, n + 1) then\n    \
    \        return true\n          end\n          lst1[n], lst2[i] = lst2[i], lst1[n]\n\
    \        end\n      end\n      return false\n    end\n  end\n  return iter(lst1,\
    \ lst2, 1) and \"YES\" or \"NO\"\nend", "    local have_odds = false\n    for\
    \ _, num in ipairs(lst1) do\n        if num % 2 == 1 then\n            have_odds\
    \ = true\n            break\n        end\n    end\n    if not have_odds then\n\
    \        return \"YES\"\n    end\n    for _, num in ipairs(lst2) do\n        if\
    \ num % 2 == 0 then\n            return \"YES\"\n        end\n    end\n    return\
    \ \"NO\"\nend", "    return \"NO\"\nend", "    local evens = 0\n    local odds\
    \ = 0\n    for _, v in ipairs(lst1) do\n        if (v % 2 == 0) then\n       \
    \     evens = evens + 1\n        else\n            odds = odds + 1\n        end\n\
    \    end\n    for _, v in ipairs(lst2) do\n        if (v % 2 == 0) then\n    \
    \        evens = evens - 1\n        else\n            odds = odds - 1\n      \
    \  end\n    end\n    if (evens == 0 and odds == 0) then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "  local evenCount1 = 0\n  local\
    \ evenCount2 = 0\n  for _, num in ipairs(lst1) do\n    if num % 2 == 0 then\n\
    \      evenCount1 = evenCount1 + 1\n    end\n  end\n  for _, num in ipairs(lst2)\
    \ do\n    if num % 2 == 0 then\n      evenCount2 = evenCount2 + 1\n    end\n \
    \ end\n  if evenCount1 == 0 and evenCount2 == 0 then\n    return \"NO\"\n  elseif\
    \ evenCount1 == 0 then\n    if evenCount2 > 0 then\n      return \"YES\"\n   \
    \ else\n      return \"NO\"\n    end\n  elseif evenCount2 == 0 then\n    if evenCount1\
    \ > 0 then\n      return \"YES\"\n    else\n      return \"NO\"\n    end\n  else\n\
    \    return \"YES\"\n  end\nend", "  -- Your code here\nend", "  return (has_odd(lst1)\
    \ and has_even(lst2)) and \"YES\" or \"NO\"\nend", "\tlocal cnt1, cnt2 = 0, 0\n\
    \tfor _, v in ipairs(lst1) do\n\t\tif v % 2 == 1 then\n\t\t\tcnt1 = cnt1 + 1\n\
    \t\tend\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\tif v % 2 == 1 then\n\t\t\t\
    cnt2 = cnt2 + 1\n\t\tend\n\tend\n\tif cnt1 % 2 == 0 then\n\t\treturn \"YES\"\n\
    \telseif cnt2 % 2 == 0 then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\t\
    end\nend", "    local lst1 = lst1 or {}\n    local lst2 = lst2 or {}\n    local\
    \ count = 0\n    for k, v in pairs(lst1) do\n        if v % 2 == 1 then\n    \
    \        count = count + 1\n        end\n    end\n    for k, v in pairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            count = count - 1\n        end\n\
    \    end\n    if count == 0 then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "\treturn true\nend", "    for _, v in ipairs(lst1) do\n\
    \        if v % 2 == 1 then\n            for _, v2 in ipairs(lst2) do\n      \
    \          if v2 % 2 == 0 then\n                    return \"YES\"\n         \
    \       end\n            end\n        end\n    end\n    return \"NO\"\nend", " \
    \   -- Your code here\nend", "    local n1 = 0\n    local n2 = 0\n    for i =\
    \ 1, #lst1 do\n        if (lst1[i] % 2) == 0 then\n            n1 = n1 + 1\n \
    \       end\n    end\n    for i = 1, #lst2 do\n        if (lst2[i] % 2) == 0 then\n\
    \            n2 = n2 + 1\n        end\n    end\n    return n1 <= n2 and \"YES\"\
    \ or \"NO\"\nend", "    -- YOUR CODE HERE\n    local table1 = {}\n    local table2\
    \ = {}\n    for i = 1, #lst1 do\n        table1[i] = lst1[i]\n    end\n    for\
    \ i = 1, #lst2 do\n        table2[i] = lst2[i]\n    end\n    for i = 1, #table1\
    \ do\n        for j = 1, #table2 do\n            if table1[i] % 2 ~= 0 and table2[j]\
    \ % 2 == 0 then\n                table1[i], table2[j] = table2[j], table1[i]\n\
    \            end\n        end\n    end\n    for i = 1, #table1 do\n        if\
    \ table1[i] % 2 ~= 0 then\n            return \"NO\"\n        end\n    end\n \
    \   return \"YES\"\nend", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end", "\tlocal function allEven(lst)\n\t\tfor _, v in ipairs(lst) do\n\t\t\t\
    if v % 2 == 1 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\
    \tend", "    local index = 1\n    while index <= #lst1 do\n        if lst1[index]\
    \ % 2 == 1 then\n            local replace_index = 1\n            while replace_index\
    \ <= #lst2 do\n                if lst2[replace_index] % 2 == 0 then\n        \
    \            lst1[index], lst2[replace_index] = lst2[replace_index], lst1[index]\n\
    \                    break\n                end\n                replace_index\
    \ = replace_index + 1\n            end\n            if replace_index > #lst2 then\n\
    \                return \"NO\"\n            end\n        end\n        index =\
    \ index + 1\n    end\n    return \"YES\"\nend", "    for i = 1, #lst1 do\n   \
    \     if (lst1[i] % 2 ~= 0) then\n            for j = 1, #lst2 do\n          \
    \      if (lst2[j] % 2 == 0) then\n                    local temp = lst1[i]\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = temp\n \
    \                   break\n                end\n            end\n        end\n\
    \    end\n    local onlyEven = true\n    for i = 1, #lst1 do\n        if (lst1[i]\
    \ % 2 ~= 0) then\n            onlyEven = false\n            break\n        end\n\
    \    end\n    if (onlyEven) then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend", "   if (#lst1 % 2) ~= 0 then\n      for i, v in ipairs(lst1)\
    \ do\n         if v % 2 == 0 then\n            table.remove(lst1, i)\n       \
    \     table.insert(lst2, v)\n            if (#lst1 % 2) == 0 then return \"YES\"\
    \ end\n         end\n      end\n      return \"NO\"\n   else\n      return \"\
    YES\"\n   end\nend", "  for i, v in ipairs(lst1) do\n    if v % 2 == 1 then\n\
    \      -- v is odd, try to find an even number in lst2 to switch with it\n   \
    \   for j, w in ipairs(lst2) do\n        if w % 2 == 0 then\n          -- w is\
    \ even, switch it with v\n          lst1[i], lst2[j] = w, v\n          return\
    \ exchange(lst1, lst2)\n        end\n      end\n      -- no even number found\
    \ in lst2, cannot make all elements in lst1 even\n      return \"NO\"\n    end\n\
    \  end\n  -- all elements in lst1 are even\n  return \"YES\"\nend", "    local\
    \ res = \"NO\"\n    local n1 = #lst1\n    local n2 = #lst2\n    local i = 1\n\
    \    local j = 1\n    while i <= n1 do\n        while j <= n2 do\n           \
    \ if lst1[i]%2 == 1 and lst2[j]%2 == 0 then\n                res = \"YES\"\n \
    \               lst1[i], lst2[j] = lst2[j], lst1[i]\n                break\n \
    \           end\n            j = j + 1\n        end\n        if res == \"YES\"\
    \ then\n            break\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend", "  -- YOUR CODE HERE\n  return \"NO\"\nend", "\tlocal sum1, sum2\
    \ = 0, 0\n\tfor i, v in ipairs(lst1) do\n\t\tsum1 = sum1 + v\n\tend\n\tfor i,\
    \ v in ipairs(lst2) do\n\t\tsum2 = sum2 + v\n\tend\n\tif (sum1 % 2 == 0) or (sum2\
    \ % 2 == 0) then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend",
  "\tlocal is_odd = {}\n\tfor k, v in ipairs(lst1) do\n\t\tif v % 2 == 1 then\n\t\t\
    \tis_odd[k] = true\n\t\tend\n\tend\n\tfor k, v in ipairs(lst2) do\n\t\tif v %\
    \ 2 == 1 then\n\t\t\tis_odd[k] = true\n\t\tend\n\tend\n\tfor k, v in ipairs(is_odd)\
    \ do\n\t\tif not v then\n\t\t\treturn \"YES\"\n\t\tend\n\tend\n\treturn \"NO\"\
    \nend", "  --\nend", end, "    local even = true\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 ~= 0 then\n            even = false\n            break\n\
    \        end\n    end\n    if even then\n        return \"YES\"\n    end\n   \
    \ for i, v in ipairs(lst1) do\n        if v % 2 ~= 0 then\n            for j,\
    \ u in ipairs(lst2) do\n                if u % 2 == 0 then\n                 \
    \   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return exchange(lst1,\
    \ lst2)\n                end\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend", "  -- TODO\nend", "    local function isOdd(n)\n        return\
    \ n % 2 ~= 0\n    end", "\t-- Write your code here\nend", "  for i = 1, #lst1\
    \ do\n    if lst1[i] % 2 == 1 then\n      for j = 1, #lst2 do\n        if lst2[j]\
    \ % 2 == 0 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          break\n\
    \        end\n      end\n    end\n  end\n  for i = 1, #lst1 do\n    if lst1[i]\
    \ % 2 == 1 then\n      return \"NO\"\n    end\n  end\n  return \"YES\"\nend",
  "  return \"YES\"\nend", "  \nend", "  local only_evens = true\n  for _, v in ipairs(lst1)\
    \ do\n    if v % 2 ~= 0 then\n      only_evens = false\n      break\n    end\n\
    \  end\n  if only_evens then\n    return \"YES\"\n  end\n  for i = 1, #lst1 do\n\
    \    for j = 1, #lst2 do\n      local num = lst1[i]\n      lst1[i] = lst2[j]\n\
    \      lst2[j] = num\n      only_evens = true\n      for _, v in ipairs(lst1)\
    \ do\n        if v % 2 ~= 0 then\n          only_evens = false\n          break\n\
    \        end\n      end\n      if only_evens then\n        return \"YES\"\n  \
    \    end\n    end\n  end\n  return \"NO\"\nend", "    local n1 = #lst1\n    local\
    \ n2 = #lst2\n    local lookup = {}\n    for i = 1, n1 do\n        if lst1[i]\
    \ % 2 == 1 then\n            lookup[lst1[i]] = i\n        end\n    end\n    for\
    \ i = 1, n2 do\n        if lst2[i] % 2 == 1 and lookup[lst2[i]] then\n       \
    \     lst1[lookup[lst2[i]]] = lst2[i]\n            lst2[i] = lst1[lookup[lst2[i]]]\n\
    \            lookup[lst2[i]] = nil\n        end\n    end\n    for i = 1, n1 do\n\
    \        if lst1[i] % 2 == 1 then\n            return \"NO\"\n        end\n  \
    \  end\n    return \"YES\"\nend", "  -- Write your code here.\nend", "  if #lst1\
    \ ~= #lst2 then\n    return \"NO\"\n  end\n  for k, v in pairs(lst1) do\n    if\
    \ v % 2 ~= 0 then\n      for k2, v2 in pairs(lst2) do\n        if v2 % 2 == 0\
    \ then\n          lst1[k] = v2\n          lst2[k2] = v\n          break\n    \
    \    end\n      end\n    end\n  end\n  for k, v in pairs(lst1) do\n    if v %\
    \ 2 ~= 0 then\n      return \"NO\"\n    end\n  end\n  return \"YES\"\nend", " \
    \ local odd1 = {}\n  local odd2 = {}\n  for _, v in ipairs(lst1) do\n    if v\
    \ % 2 == 1 then\n      table.insert(odd1, v)\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v % 2 == 1 then\n      table.insert(odd2, v)\n    end\n  end\n  if\
    \ #odd1 == #odd2 then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\n\
    end", "  if any(lst1, is_odd) and any(lst2, is_even) then\n    return \"YES\"\n\
    \  else\n    return \"NO\"\n  end\nend", "\tlocal num_evens = 0\n\tfor _, val\
    \ in ipairs(lst1) do\n\t\tif val % 2 == 0 then\n\t\t\tnum_evens = num_evens +\
    \ 1\n\t\tend\n\tend\n\tif num_evens == #lst1 then\n\t\treturn \"YES\"\n\tend\n\
    \tfor _, val in ipairs(lst2) do\n\t\tif val % 2 == 0 then\n\t\t\treturn \"YES\"\
    \n\t\tend\n\tend\n\treturn \"NO\"\nend", "  -- Implement your code here\nend",
  "  local function check(lst)\n    for _, v in ipairs(lst) do\n      if v % 2 ==\
    \ 1 then\n        return false\n      end\n    end\n    return true\n  end\n \
    \ if check(lst1) or check(lst2) then\n    return \"YES\"\n  end\n  for i = 1,\
    \ #lst1 do\n    for j = 1, #lst2 do\n      local elem1 = lst1[i]\n      local\
    \ elem2 = lst2[j]\n      if elem1 % 2 == 1 and elem2 % 2 == 0 then\n        lst1[i]\
    \ = elem2\n        lst2[j] = elem1\n        if check(lst1) then\n          return\
    \ \"YES\"\n        end\n        lst1[i] = elem1\n        lst2[j] = elem2\n   \
    \   end\n    end\n  end\n  return \"NO\"\nend", end, "    if lst1 == nil or lst2\
    \ == nil then\n        return \"NO\"\n    end\n    if lst1[1] % 2 == 0 then\n\
    \        return \"YES\"\n    end\n    for i = 1, #lst2 do\n        if lst2[i]\
    \ % 2 == 0 then\n            lst2[i], lst1[1] = lst1[1], lst2[i]\n           \
    \ return exchange(lst1, lst2)\n        end\n    end\n    return \"NO\"\nend",
  "    local count1 = 0\n    local count2 = 0\n    for _, v in ipairs(lst1) do\n \
    \       if v % 2 == 0 then\n            count1 = count1 + 1\n        end\n   \
    \ end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n         \
    \   count2 = count2 + 1\n        end\n    end\n    if count1 > count2 then\n \
    \       return \"NO\"\n    else\n        return \"YES\"\n    end\nend", "\tlocal\
    \ evens = {}\n\tlocal odds = {}\n\tlocal is_exchangeable = true\n\tfor _, v in\
    \ ipairs(lst1) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(evens, v)\n\t\t\
    else\n\t\t\ttable.insert(odds, v)\n\t\tend\n\tend\n\tfor _, v in ipairs(lst2)\
    \ do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(evens, v)\n\t\telse\n\t\t\ttable.insert(odds,\
    \ v)\n\t\tend\n\tend\n\tif #odds ~= #evens then\n\t\tis_exchangeable = false\n\
    \tend\n\treturn is_exchangeable and \"YES\" or \"NO\"\nend\nprint(exchange({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}))\nprint(exchange({1, 2, 3, 4}, {1, 5, 3, 4}))", "  local\
    \ lst3 = lst1\n  local lst4 = lst2\n  local a = true\n  for i=1,#lst1 do\n   \
    \ if lst1[i] % 2 ~= 0 then\n      for j=1,#lst2 do\n        if lst2[j] % 2 ==\
    \ 0 then\n          lst1[i] = lst2[j]\n          a = false\n          break\n\
    \        end\n      end\n    end\n    if a == true then\n      return \"NO\"\n\
    \    end\n  end\n  return \"YES\"\nend", "  -- Write your code here\nend", " \
    \   local odd_lst1, odd_lst2 = {}, {}\n    for _, v in ipairs(lst1) do\n     \
    \   if v % 2 == 1 then\n            table.insert(odd_lst1, v)\n        end\n \
    \   end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 1 then\n       \
    \     table.insert(odd_lst2, v)\n        end\n    end\n    return #odd_lst1 ==\
    \ #odd_lst2 and \"YES\" or \"NO\"\nend", "    -- YOUR CODE HERE\n    return \"\
    NOT YET IMPLEMENTED\"\nend", end, "   if (#lst1 == 1) then\n      return \"YES\"\
    \n   end\n   local flg = true\n   for i, v in ipairs(lst1) do\n      if (i ==\
    \ 1) then\n         flg = flg and false or true\n      else\n         flg = flg\
    \ and true or false\n      end\n      if ((v % 2) == 1) then\n         if (flg)\
    \ then\n            return \"NO\"\n         end\n         for i, v in ipairs(lst2)\
    \ do\n            if ((v % 2) == 0) then\n               local tmp = lst1[i]\n\
    \               lst1[i] = lst2[i]\n               lst2[i] = tmp\n            \
    \   return exchange(lst1, lst2)\n            end\n         end\n      end\n  \
    \ end\n   return \"YES\"\nend", "    -- Check if lst1 is a list of even numbers\n\
    \    local lst1_even = true\n    for _, v in ipairs(lst1) do\n        if v % 2\
    \ ~= 0 then\n            lst1_even = false\n            break\n        end\n \
    \   end", "    -- TODO: implement this function\nend", "\tlocal found = false\n\
    \tfor i = 1, #lst1 do\n\t\tif lst1[i] % 2 == 1 then\n\t\t\tfor j = 1, #lst2 do\n\
    \t\t\t\tif lst2[j] % 2 == 0 then\n\t\t\t\t\tlocal temp = lst1[i]\n\t\t\t\t\tlst1[i]\
    \ = lst2[j]\n\t\t\t\t\tlst2[j] = temp\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\treturn \"NO\"\n\t\
    \tend\n\tend\n\treturn \"YES\"\nend", "  -- YOUR CODE HERE\n  local is_okay =\
    \ false\n  local even_count = 0\n  for _, i in ipairs(lst1) do\n    if i % 2 ==\
    \ 0 then\n      even_count = even_count + 1\n    end\n  end\n  if even_count ==\
    \ #lst1 then\n    is_okay = true\n  end\n  for _, i in ipairs(lst2) do\n    if\
    \ i % 2 == 0 then\n      even_count = even_count + 1\n    end\n  end\n  if even_count\
    \ == #lst1 + #lst2 then\n    is_okay = true\n  end\n  return is_okay and \"YES\"\
    \ or \"NO\"\nend", "  -- TODO: Implement this.\nend", "  --[[\n    Idea:\n   \
    \ Exchange an element from lst1 with an even element from lst2\n    to make all\
    \ elements of lst1 even.\n    If this is possible, return \"YES\".\n    If not,\
    \ return \"NO\".\n  ]]\n  -- TODO: implement this function.\n  --\n  -- Test data:\n\
    \  -- local lst1 = {1, 2, 3, 4}\n  -- local lst2 = {1, 2, 3, 4}\n  -- local lst3\
    \ = {1, 2, 3, 4}\n  -- local lst4 = {1, 5, 3, 4}\n  -- local lst5 = {2, 5, 3,\
    \ 4}\n  -- local lst6 = {2, 4, 3, 4}\n  -- local lst7 = {1, 2, 3, 4}\n  -- local\
    \ lst8 = {1, 5, 3, 4}\n  -- local lst9 = {2, 5, 3, 4}\n  -- local lst10 = {2,\
    \ 4, 3, 4}\n  -- local lst11 = {1, 2, 3, 4}\n  -- local lst12 = {1, 5, 3, 4}\n\
    \  -- local lst13 = {2, 5, 3, 4}\n  -- local lst14 = {2, 4, 3, 4}\n  --\n  --\
    \ print(exchange(lst1, lst2))\n  -- print(exchange(lst3, lst4))\n  -- print(exchange(lst5,\
    \ lst6))\n  -- print(exchange(lst7, lst8))\n  -- print(exchange(lst9, lst10))\n\
    \  -- print(exchange(lst11, lst12))\n  -- print(exchange(lst13, lst14))\nend",
  "   local odd = {}\n   local even = {}\n   for k, v in pairs(lst1) do\n      if\
    \ v % 2 == 0 then\n         table.insert(even, v)\n      else\n         table.insert(odd,\
    \ v)\n      end\n   end\n   for k, v in pairs(lst2) do\n      if v % 2 == 0 then\n\
    \         table.insert(even, v)\n      else\n         table.insert(odd, v)\n \
    \     end\n   end\n   return #odd % 2 == 0 and \"YES\" or \"NO\"\nend", "    --\
    \ TODO: implement the function\nend", "    local anyOdd1 = false\n    local anyOdd2\
    \ = false\n    for i = 1, #lst1 do\n        if lst1[i] % 2 == 1 then\n       \
    \     anyOdd1 = true\n        end\n    end\n    for i = 1, #lst2 do\n        if\
    \ lst2[i] % 2 == 1 then\n            anyOdd2 = true\n        end\n    end\n  \
    \  if anyOdd1 then\n        if anyOdd2 then\n            return \"NO\"\n     \
    \   else\n            return \"YES\"\n        end\n    else\n        return \"\
    YES\"\n    end\nend", "  for _, num in ipairs(lst1) do\n    if num % 2 == 1 then\n\
    \      local index\n      for i, num2 in ipairs(lst2) do\n        if num2 % 2\
    \ == 1 then\n          index = i\n          break\n        end\n      end\n  \
    \    if index then\n        lst1[index], lst2[index] = lst2[index], lst1[index]\n\
    \      else\n        return \"NO\"\n      end\n    end\n  end\n  return \"YES\"\
    \nend", "    for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n       \
    \     for j, w in ipairs(lst2) do\n                if w % 2 == 0 then\n      \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ \"YES\"\n                end\n            end\n            return \"NO\"\n \
    \       end\n    end\n    return \"YES\"\nend", "    local can_exchange = false\n\
    \    local function exchange_item(item1, item2)\n        -- NOTE: only exchange\
    \ odd-odd or even-even\n        if (item1 % 2 == 0 and item2 % 2 == 0) or (item1\
    \ % 2 == 1 and item2 % 2 == 1) then\n            return true\n        end\n  \
    \      return false\n    end\n    for i, item1 in ipairs(lst1) do\n        for\
    \ j, item2 in ipairs(lst2) do\n            if item1 % 2 == 1 and item2 % 2 ==\
    \ 1 then\n                can_exchange = true\n                break\n       \
    \     end\n        end\n    end\n    if can_exchange then\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend", "  local even_lst1 = true\n\
    \  for _, num in ipairs(lst1) do\n    if num % 2 ~= 0 then\n      even_lst1 =\
    \ false\n      break\n    end\n  end\n  local even_lst2 = true\n  for _, num in\
    \ ipairs(lst2) do\n    if num % 2 ~= 0 then\n      even_lst2 = false\n      break\n\
    \    end\n  end\n  if even_lst1 and even_lst2 then\n    return \"YES\"\n  elseif\
    \ even_lst1 or even_lst2 then\n    return \"YES\"\n  else\n    return \"NO\"\n\
    \  end\nend", "    -- ...\nend", "  -- See if any items in lst1 are odd\n  for\
    \ k,v in pairs(lst1) do\n    if v % 2 == 1 then\n      -- See if lst2 has an even\
    \ number\n      for k2,v2 in pairs(lst2) do\n        if v2 % 2 == 0 then\n   \
    \       return \"YES\"\n        end\n      end\n    end\n  end\n  return \"NO\"\
    \nend", "  -- TODO: Write code here\nend", "  local function isEven(n)\n    return\
    \ n % 2 == 0\n  end", "  for i = 1, #lst1 do\n    if lst1[i] % 2 == 1 then\n \
    \     for j = 1, #lst2 do\n        if lst2[j] % 2 == 0 then\n          lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n          return \"YES\"\n        end\n      end\n\
    \      return \"NO\"\n    end\n  end\n  return \"YES\"\nend", "\t-- Your code\
    \ goes here.\nend", "  --  enter your code here\nend", "  -- TODO: implement this\
    \ function\nend", "    -- your code here\nend", "  if not lst1 or not lst2 then\
    \ return \"NO\" end\n  local evens = {}\n  local odds = {}\n  for i = 1, #lst1\
    \ do\n    if lst1[i] % 2 == 0 then\n      evens[#evens + 1] = lst1[i]\n    else\n\
    \      odds[#odds + 1] = lst1[i]\n    end\n  end\n  for i = 1, #lst2 do\n    if\
    \ lst2[i] % 2 == 0 then\n      evens[#evens + 1] = lst2[i]\n    else\n      odds[#odds\
    \ + 1] = lst2[i]\n    end\n  end\n  return #evens >= #odds and \"YES\" or \"NO\"\
    \nend", "\tlocal s,m = {}, {}\n\tfor i,v in ipairs(lst1) do\n\t\tif v % 2 == 0\
    \ then s[i] = v end\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\tif v % 2 == 1 then\
    \ m[i] = v end\n\tend\n\tif #s == #lst1 then return \"YES\" end\n\tif #m == #lst2\
    \ then return \"NO\" end\n\tif #s == #lst1 - 1 and #m == #lst2 - 1 then return\
    \ \"YES\" end\n\tif #s == #lst1 - 2 and #m == #lst2 - 2 then return \"YES\" end\n\
    \treturn \"NO\"\nend", "    local evens = 0\n    local odds = 0\n    for _, v\
    \ in ipairs(lst1) do\n        if v % 2 == 0 then\n            evens = evens +\
    \ 1\n        else\n            odds = odds + 1\n        end\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            evens = evens\
    \ + 1\n        else\n            odds = odds + 1\n        end\n    end\n    if\
    \ evens % 2 == 0 then\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend", "    local b1, b2 = false, false\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            b1 = true\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            b2 =\
    \ true\n        end\n    end\n    if b1 and b2 then\n        return \"YES\"\n\
    \    else\n        return \"NO\"\n    end\nend", "  for i, a in ipairs(lst1) do\n\
    \    if a % 2 == 1 then\n      for j, b in ipairs(lst2) do\n        if b % 2 ==\
    \ 0 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1,\
    \ lst2)\n        end\n      end\n      return \"NO\"\n    end\n  end\n  return\
    \ \"YES\"\nend", "\tlocal odd1 = 0\n\tlocal odd2 = 0\n\tlocal even1 = 0\n\tlocal\
    \ even2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\tif v % 2 == 0 then\n\t\t\teven1\
    \ = even1 + 1\n\t\telse\n\t\t\todd1 = odd1 + 1\n\t\tend\n\tend\n\tfor i, v in\
    \ ipairs(lst2) do\n\t\tif v % 2 == 0 then\n\t\t\teven2 = even2 + 1\n\t\telse\n\
    \t\t\todd2 = odd2 + 1\n\t\tend\n\tend\n\tif even1 == 0 then\n\t\treturn \"NO\"\
    \n\tend\n\tif odd1 > even2 then\n\t\treturn \"NO\"\n\tend\n\treturn \"YES\"\n\
    end", "  for _, num in ipairs(lst1) do\n    if num % 2 == 1 then\n      return\
    \ \"NO\"\n    end\n  end\n  return \"YES\"\nend", end, "    -- lst1 contains even\
    \ numbers at the end, so all we need to do is:\n    --  a) Check if the first\
    \ number in lst1 is even, if so return \"YES\"\n    --  b) Swap the first number\
    \ in lst1 with an even number from lst2, if available\n    if (lst1[1] % 2 ==\
    \ 0) then\n        return \"YES\"\n    end\n    for i, n in ipairs(lst2) do\n\
    \        if (n % 2 == 0) then\n            lst1[1], lst2[i] = lst2[i], lst1[1]\n\
    \            return exchange(lst1, lst2)\n        end\n    end\n    return \"\
    NO\"\nend", "  local total_odd_lst1 = 0\n  local total_odd_lst2 = 0\n  for i,v\
    \ in ipairs(lst1) do\n    if v % 2 == 1 then\n      total_odd_lst1 = total_odd_lst1\
    \ + 1\n    end\n  end\n  for i,v in ipairs(lst2) do\n    if v % 2 == 1 then\n\
    \      total_odd_lst2 = total_odd_lst2 + 1\n    end\n  end\n  if total_odd_lst1\
    \ % 2 == 0 and total_odd_lst2 % 2 == 0 then\n    return \"YES\"\n  elseif total_odd_lst1\
    \ % 2 == 1 and total_odd_lst2 % 2 == 1 then\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "    local all_even = true\n    for _, v in ipairs(lst1)\
    \ do\n        if (v % 2) ~= 0 then\n            all_even = false\n           \
    \ break\n        end\n    end\n    if all_even then\n        return \"YES\"\n\
    \    end\n    for i, l in ipairs({lst1, lst2}) do\n        for j, v in ipairs(l)\
    \ do\n            if (v % 2) == 0 then\n                l[j] = math.floor(v /\
    \ 2)\n            else\n                l[j] = v * 2\n            end\n      \
    \  end\n    end\n    return exchange(lst1, lst2)\nend\nassert(exchange({1, 2,\
    \ 3, 4}, {1, 2, 3, 4}) == \"YES\")\nassert(exchange({1, 2, 3, 4}, {1, 5, 3, 4})\
    \ == \"NO\")", "    local evens = {}\n    local odds = {}\n    for _, number in\
    \ ipairs(lst1) do\n        if number % 2 == 0 then\n            table.insert(evens,\
    \ number)\n        else\n            table.insert(odds, number)\n        end\n\
    \    end\n    for _, number in ipairs(lst2) do\n        if number % 2 == 0 then\n\
    \            table.insert(evens, number)\n        else\n            table.insert(odds,\
    \ number)\n        end\n    end\n    local s1 = #lst1\n    local s2 = #lst2\n\
    \    local se = #evens\n    local so = #odds\n    if s1 + s2 == se + so then\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  for\
    \ i, v in ipairs(lst1) do\n    if v % 2 == 1 then\n      for j, v2 in ipairs(lst2)\
    \ do\n        if v2 % 2 == 0 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \          return \"YES\"\n        end\n      end\n      return \"NO\"\n    end\n\
    \  end\n  return \"YES\"\nend", "  -- TODO: implement this function.\nend", "\t\
    return is_even(lst1) and \"YES\" or \"NO\"\nend", "    -- Iterate all the elements\
    \ of lst1 and lst2, and check if they can be\n    -- exchanged or not.\n    for\
    \ _, n1 in ipairs(lst1) do\n        for _, n2 in ipairs(lst2) do\n           \
    \ -- If both n1 and n2 are odd number, they can be exchanged.\n            if\
    \ n1 % 2 == 1 and n2 % 2 == 1 then\n                return \"YES\"\n         \
    \   end\n        end\n    end\n    return \"NO\"\nend", "    -- Your code here.\n\
    end", "    local n = #lst1\n    for i = 1, n do\n        local even = true\n \
    \       for j = 1, n do\n            if lst1[j] % 2 == 1 then\n              \
    \  even = false\n                for k = 1, n do\n                    if lst2[k]\
    \ % 2 == 0 then\n                        lst1[j], lst2[k] = lst2[k], lst1[j]\n\
    \                        even = true\n                        break\n        \
    \            end\n                end\n            end\n            if not even\
    \ then\n                break\n            end\n        end\n        if even then\n\
    \            return \"YES\"\n        end\n    end\n    return \"NO\"\nend", " \
    \  local set1 = set.new(lst1)\n   local set2 = set.new(lst2)\n   if set1:issubset(set2)\
    \ then\n      return \"YES\"\n   end\n   for _, n in ipairs(lst1) do\n      if\
    \ math.fmod(n, 2) == 0 then\n         set1:discard(n)\n      end\n   end\n   for\
    \ _, n in ipairs(lst2) do\n      if math.fmod(n, 2) == 0 then\n         set2:discard(n)\n\
    \      end\n   end\n   if set1:isdisjoint(set2) then\n      return \"YES\"\n \
    \  end\n   return \"NO\"\nend", "    for i = 1, #lst1 do\n        if lst1[i] %\
    \ 2 == 1 then\n            for j = 1, #lst2 do\n                if lst2[j] % 2\
    \ == 0 then\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n       \
    \             break\n                end\n            end\n        end\n    end\n\
    \    for i = 1, #lst1 do\n        if lst1[i] % 2 == 1 then\n            return\
    \ \"NO\"\n        end\n    end\n    return \"YES\"\nend", "    if not lst1 or\
    \ not lst2 then\n        return \"NO\"\n    end\n    local result = \"NO\"\n \
    \   for i, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            for j,\
    \ w in ipairs(lst2) do\n                if w % 2 == 0 then\n                 \
    \   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    result = \"YES\"\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return result\nend", "  return \"YES\"\nend", "    local lst1_odd\
    \ = 0\n    local lst2_even = 0\n    for i = 1, #lst1 do\n        if lst1[i] %\
    \ 2 == 1 then\n            lst1_odd = lst1_odd + 1\n        end\n    end\n   \
    \ for i = 1, #lst2 do\n        if lst2[i] % 2 == 0 then\n            lst2_even\
    \ = lst2_even + 1\n        end\n    end\n    if lst1_odd == lst2_even then\n \
    \       return \"YES\"\n    else\n        return \"NO\"\n    end\nend", "  local\
    \ lst1_odds = {}\n  local lst2_evens = {}\n  for _, x in ipairs(lst1) do\n   \
    \ if x % 2 == 1 then table.insert(lst1_odds, x) end\n  end\n  for _, x in ipairs(lst2)\
    \ do\n    if x % 2 == 0 then table.insert(lst2_evens, x) end\n  end\n  if #lst1_odds\
    \ == #lst2_evens then return \"YES\" end\n  return \"NO\"\nend", "    local function\
    \ is_even(number)\n        return number % 2 == 0\n    end", "    if #lst1 ==\
    \ 1 then\n        return lst1[1] % 2 == 0 and \"YES\" or \"NO\"\n    end\n   \
    \ for i = 1, #lst1 do\n        local l = lst1[i]\n        if l % 2 == 0 then\n\
    \            local l2 = table.remove(lst2, i)\n            table.insert(lst1,\
    \ i, l2)\n            return exchange(lst1, lst2)\n        end\n    end\n    for\
    \ i = 1, #lst2 do\n        local l = lst2[i]\n        if l % 2 == 0 then\n   \
    \         local l2 = table.remove(lst1, i)\n            table.insert(lst2, i,\
    \ l2)\n            return exchange(lst1, lst2)\n        end\n    end\n    return\
    \ \"NO\"\nend", "    local counts = {}\n    for _, v in ipairs(lst1) do\n    \
    \    if v % 2 == 1 then\n            counts[v] = (counts[v] or 0) + 1\n      \
    \  end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 1 then\n\
    \            counts[v] = (counts[v] or 0) - 1\n        end\n    end\n    for _,\
    \ v in pairs(counts) do\n        if v > 0 then\n            return \"NO\"\n  \
    \      end\n    end\n    return \"YES\"\nend", "    return \"NO\"\nend", "  local\
    \ function contains_even(list)\n    for _, v in ipairs(list) do\n      if v %\
    \ 2 == 0 then\n        return true\n      end\n    end\n    return false\n  end",
  "    if (#lst1 < 2) then\n        return \"NO\"\n    end\n    local result = false\n\
    \    for i = 1, #lst1 do\n        if (not result) then\n            if ((lst1[i]\
    \ % 2) == 0) then\n                result = true\n            else\n         \
    \       for j = 1, #lst2 do\n                    if ((lst2[j] % 2) == 0) then\n\
    \                        lst1[i], lst2[j] = lst2[j], lst1[i]\n               \
    \         result = true\n                        break\n                    end\n\
    \                end\n            end\n        end\n    end\n    return result\
    \ and \"YES\" or \"NO\"\nend", "   -- First, we test if the lists contain even\
    \ numbers.\n   -- If they do, then the answer must be \"YES\".\n   -- So, if one\
    \ or both of the lists contain an even number,\n   -- we need to test if both\
    \ lists contain an even number.\n   -- If they do, then the answer is \"YES\"\
    .\n   -- If they don't, then the answer is \"NO\".\n   -- We use the function\
    \ even to determine if a list contains an even number.\n   if even(lst1) or even(lst2)\
    \ then\n      -- Use even2 to test if both lists contain an even number.\n   \
    \   -- If even2 is true, then the answer is \"YES\".\n      -- If even2 is false,\
    \ then the answer is \"NO\".\n      if even2(lst1, lst2) then\n         return\
    \ \"YES\"\n      else\n         return \"NO\"\n      end\n   -- If both lists\
    \ don't contain an even number,\n   -- then there is no need to exchange elements\
    \ to make the lists\n   -- contain only even numbers.\n   -- In this case, the\
    \ answer is \"NO\".\n   else\n      return \"NO\"\n   end\nend", "    local even_cnt\
    \ = 0\n    for _, e in ipairs(lst1) do\n        if e % 2 == 0 then\n         \
    \   even_cnt = even_cnt + 1\n        end\n    end\n    local odd_cnt = #lst1 -\
    \ even_cnt\n    local even_cnt_from_lst2 = 0\n    for _, e in ipairs(lst2) do\n\
    \        if e % 2 == 0 then\n            even_cnt_from_lst2 = even_cnt_from_lst2\
    \ + 1\n        end\n    end\n    local odd_cnt_from_lst2 = #lst2 - even_cnt_from_lst2\n\
    \    if even_cnt_from_lst2 >= odd_cnt then\n        return \"YES\"\n    elseif\
    \ odd_cnt_from_lst2 >= even_cnt then\n        return \"YES\"\n    else\n     \
    \   return \"NO\"\n    end\nend", "   local res = \"NO\"\n   -- implement your\
    \ solution here\n   return res\nend", "  for i, v in ipairs(lst1) do\n    if v\
    \ % 2 == 1 then\n      for j, u in ipairs(lst2) do\n        if u % 2 == 0 then\n\
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return \"YES\"\n   \
    \     end\n      end\n      return \"NO\"\n    end\n  end\n  return \"YES\"\n\
    end", "    -- check if we can't make all the numbers even by just exchanging\n\
    \    -- with list 2\n    local even_count = 0\n    for _, n in ipairs(lst1) do\n\
    \        if n % 2 == 0 then\n            even_count = even_count + 1\n       \
    \ end\n    end\n    for _, n in ipairs(lst2) do\n        if n % 2 == 0 then\n\
    \            even_count = even_count + 1\n        end\n    end\n    if even_count\
    \ < #lst1 then\n        return \"NO\"\n    end", "    -- TODO: your code here\n\
    end", "\tif next(lst1) == nil then\n\t\treturn \"NO\"\n\tend\n\tif (lst1[1] %\
    \ 2) == 0 then\n\t\treturn exchange(tail(lst1), lst2)\n\tend\n\tfor _, v in ipairs(lst2)\
    \ do\n\t\tif (v % 2) == 0 then\n\t\t\tlst1[1], lst2[head(lst2)] = lst2[head(lst2)],\
    \ lst1[1]\n\t\t\treturn exchange(tail(lst1), lst2)\n\t\tend\n\tend\n\treturn \"\
    NO\"\nend", "    local function exchange_helper(lst1, lst2, subexchange)\n   \
    \     if subexchange == 0 then\n            return all_even(lst1)\n        end\n\
    \        if not all_even(lst1) then\n            for i, num in ipairs(lst1) do\n\
    \                if not is_even(num) then\n                    for j, num2 in\
    \ ipairs(lst2) do\n                        if is_even(num2) then\n           \
    \                 lst1[i], lst2[j] = lst2[j], lst1[i]\n                      \
    \      if exchange_helper(lst1, lst2, subexchange - 1) then\n                \
    \                return true\n                            end\n              \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                        end\n\
    \                    end\n                end\n            end\n        end\n\
    \        return false\n    end\n    if exchange_helper(lst1, lst2, #lst1) then\n\
    \        return \"YES\"\n    end\n    return \"NO\"\nend", '    local hasOdd =
    false', "  local pos = 1\n  local found = false\n  while pos <= #lst1 do\n   \
    \ if lst1[pos] % 2 == 1 then\n      local even = find(lst2, function(v) return\
    \ v % 2 == 0 end)\n      if even then\n        found = true\n        lst1[pos],\
    \ lst2[even] = lst2[even], lst1[pos]\n      else\n        return \"NO\"\n    \
    \  end\n    end\n    pos = pos + 1\n  end\n  return found and \"YES\" or \"NO\"\
    \nend", "  -- YOUR CODE HERE\n  local sum1 = 0\n  local sum2 = 0\n  for i, v in\
    \ ipairs(lst1) do\n    if math.fmod(v, 2) == 0 then\n      sum1 = sum1 + 1\n \
    \   end\n  end\n  for i, v in ipairs(lst2) do\n    if math.fmod(v, 2) == 0 then\n\
    \      sum2 = sum2 + 1\n    end\n  end\n  if (sum1 + sum2) > (#lst1 + #lst2) then\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "    -- body\nend",
  "    local is_all_even = true\n    for _, v in ipairs(lst1) do\n        if v % 2\
    \ ~= 0 then\n            is_all_even = false\n            break\n        end\n\
    \    end\n    if is_all_even then\n        return \"YES\"\n    end\n    for _,\
    \ v in ipairs(lst2) do\n        if v % 2 == 0 then\n            return \"YES\"\
    \n        end\n    end\n    return \"NO\"\nend", "  local function all_even(lst)\n\
    \    for _, x in ipairs(lst) do\n      if (x % 2) ~= 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end", "    local idx1, idx2 = 0, 0\n \
    \   for i = 1, #lst1 do\n        if lst1[i] % 2 == 0 then\n            idx1 =\
    \ idx1 + 1\n        end\n    end\n    for i = 1, #lst2 do\n        if lst2[i]\
    \ % 2 == 1 then\n            idx2 = idx2 + 1\n        end\n    end\n    return\
    \ idx1 == idx2 and \"YES\" or \"NO\"\nend\nprint(exchange({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}))\nprint(exchange({1, 2, 3, 4}, {1, 5, 3, 4}))\nprint(exchange({1, 2,\
    \ 3, 4}, {1, 5, 3, 5}))\nprint(exchange({1, 2, 3, 4}, {1, 5, 3, 5, 7}))", "  local\
    \ evens = {}\n  local odds = {}\n  for i, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n\
    \    end\n  end\n  if #evens == #lst1 then\n    return \"YES\"\n  end\n  for i,\
    \ v in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(evens, v)\n\
    \    else\n      table.insert(odds, v)\n    end\n  end\n  if #evens == #lst1 then\n\
    \    return \"YES\"\n  end\n  return \"NO\"\nend", "    -- Write your code here.\n\
    \    local even = true\n    for k, v in pairs(lst1) do\n        if v % 2 ~= 0\
    \ then\n            even = false\n            break\n        end\n    end\n  \
    \  if even then\n        return \"YES\"\n    end\n    for k, v in pairs(lst1)\
    \ do\n        if v % 2 ~= 0 then\n            for k2, v2 in pairs(lst2) do\n \
    \               if v2 % 2 == 0 then\n                    lst1[k] = v2\n      \
    \              lst2[k2] = v\n                    return exchange(lst1, lst2)\n\
    \                end\n            end\n        end\n    end\n    return \"NO\"\
    \nend", "   local odd_nums = {}\n   local odd_pos = {}\n   local num_odds = 0\n\
    \   local num_evens = 0\n   for i, v in ipairs(lst1) do\n      if v % 2 == 1 then\n\
    \         num_odds = num_odds + 1\n         odd_nums[num_odds] = v\n         odd_pos[num_odds]\
    \ = i\n      else\n         num_evens = num_evens + 1\n      end\n   end\n   local\
    \ even_nums = {}\n   local even_pos = {}\n   local num_evens = 0\n   local num_odds\
    \ = 0\n   for i, v in ipairs(lst2) do\n      if v % 2 == 0 then\n         num_evens\
    \ = num_evens + 1\n         even_nums[num_evens] = v\n         even_pos[num_evens]\
    \ = i\n      else\n         num_odds = num_odds + 1\n      end\n   end\n   if\
    \ num_odds ~= num_evens then\n      return \"NO\"\n   end\n   for i = 1, num_odds\
    \ do\n      lst1[odd_pos[i]] = even_nums[i]\n      lst2[even_pos[i]] = odd_nums[i]\n\
    \   end\n   return \"YES\"\nend", "  \n  local function iter(evens, odds, evens_count,\
    \ odds_count)\n    if (evens_count == 0 and odds_count == 0) then return true\
    \ end\n    if (evens_count > 0 and evens[evens_count] % 2 == 0) then\n      return\
    \ iter(evens, odds, evens_count - 1, odds_count)\n    end\n    if (odds_count\
    \ > 0 and odds[odds_count] % 2 == 1) then\n      return iter(evens, odds, evens_count,\
    \ odds_count - 1)\n    end\n    if (evens_count > 0 and odds_count > 0) then\n\
    \      return iter(evens, odds, evens_count - 1, odds_count - 1)\n    end\n  \
    \  return false\n  end\n  \n  local evens, odds = {}, {}\n  local evens_count,\
    \ odds_count = 0, 0\n  for _, v in ipairs(lst1) do\n    if (v % 2 == 0) then\n\
    \      evens_count = evens_count + 1\n      evens[evens_count] = v\n    else\n\
    \      odds_count = odds_count + 1\n      odds[odds_count] = v\n    end\n  end\n\
    \  for _, v in ipairs(lst2) do\n    if (v % 2 == 0) then\n      evens_count =\
    \ evens_count + 1\n      evens[evens_count] = v\n    else\n      odds_count =\
    \ odds_count + 1\n      odds[odds_count] = v\n    end\n  end\n  return (iter(evens,\
    \ odds, evens_count, odds_count) and \"YES\" or \"NO\")\nend", "   local even\
    \ = true\n   for i = 1, #lst1 do\n      if lst1[i] % 2 == 1 then\n         even\
    \ = false\n         break\n      end\n   end\n   if even then\n      return \"\
    YES\"\n   end\n   for i = 1, #lst1 do\n      for j = 1, #lst2 do\n         if\
    \ lst1[i] % 2 == 1 and lst2[j] % 2 == 0 then\n            lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n            return exchange(lst1, lst2)\n         end\n      end\n\
    \   end\n   return \"NO\"\nend", "    local odd1 = 0\n    local odd2 = 0\n   \
    \ for i = 1, #lst1 do\n        if lst1[i] % 2 == 1 then\n            odd1 = odd1\
    \ + 1\n        end\n    end\n    for i = 1, #lst2 do\n        if lst2[i] % 2 ==\
    \ 1 then\n            odd2 = odd2 + 1\n        end\n    end\n    if odd1 == odd2\
    \ then\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend",
  "  local numOdd1 = 0\n  local numOdd2 = 0\n  for _, v in ipairs(lst1) do\n    if\
    \ (v % 2) == 1 then\n      numOdd1 = numOdd1 + 1\n    end\n  end\n  for _, v in\
    \ ipairs(lst2) do\n    if (v % 2) == 1 then\n      numOdd2 = numOdd2 + 1\n   \
    \ end\n  end\n  if (numOdd1 % 2) == (numOdd2 % 2) then\n    return \"YES\"\n \
    \ else\n    return \"NO\"\n  end\nend", "  for i = 1, #lst1 do\n    if lst1[i]\
    \ % 2 == 1 then\n      for j = 1, #lst2 do\n        if lst2[j] % 2 == 0 then\n\
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n          break\n        end\n\
    \      end\n    end\n  end\n  for i = 1, #lst1 do\n    if lst1[i] % 2 == 1 then\n\
    \      return \"NO\"\n    end\n  end\n  return \"YES\"\nend", "  local odd = {}\n\
    \  local even = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n  \
    \    table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n\
    \  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      table.insert(even,\
    \ v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  if #odd % 2 == 0\
    \ then\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  local sum1\
    \ = {}\n  local sum2 = {}\n  local even = 0\n  local odd = 0\n  local res = \"\
    \"\n  for _, v in ipairs(lst1) do\n    if v % 2 == 0 then\n      table.insert(sum1,\
    \ v)\n      even = even + 1\n    else\n      table.insert(sum2, v)\n      odd\
    \ = odd + 1\n    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0\
    \ then\n      table.insert(sum1, v)\n      even = even + 1\n    else\n      table.insert(sum2,\
    \ v)\n      odd = odd + 1\n    end\n  end\n  if even > odd then\n    res = \"\
    YES\"\n  else\n    res = \"NO\"\n  end\n  return res\nend", "  local isEven =\
    \ function(x) return x % 2 == 0 end\n  local function check(lst)\n    for i =\
    \ 1, #lst do\n      if not isEven(lst[i]) then return false end\n    end\n   \
    \ return true\n  end\n  if check(lst1) then return \"YES\" end\n  if check(lst2)\
    \ then return \"YES\" end\n  for i = 1, #lst1 do\n    if isEven(lst1[i]) then\n\
    \      for j = 1, #lst2 do\n        if not isEven(lst2[j]) then\n          lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1, lst2)\n        end\n\
    \      end\n    end\n  end\n  return \"NO\"\nend\nassert(exchange({1, 2, 3, 4},\
    \ {1, 2, 3, 4}) == \"YES\")\nassert(exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"\
    NO\")\nassert(exchange({4, 5, 7, 10}, {4, 5, 7, 6}) == \"YES\")\nassert(exchange({5,\
    \ 1, 6, 3}, {3, 7, 2, 4}) == \"YES\")\nassert(exchange({4, 1, 5, 3}, {3, 7, 2,\
    \ 8}) == \"NO\")\nassert(exchange({4, 5, 7, 8}, {4, 5, 7, 8}) == \"YES\")\nassert(exchange({5,\
    \ 6, 7, 8}, {4, 5, 7, 8}) == \"YES\")\nassert(exchange({5, 6, 7, 8}, {4, 5, 7,\
    \ 9}) == \"NO\")\nassert(exchange({5, 2, 1, 4}, {3, 7, 6, 8}) == \"YES\")\nassert(exchange({5,\
    \ 2, 1, 4}, {3, 5, 1, 6}) == \"YES\")\nassert(exchange({5, 2, 1, 4}, {3, 5, 1,\
    \ 6}) == \"YES\")\nassert(exchange({2, 6, 4", "\t-- YOUR CODE HERE\n\tlocal all_even\
    \ = true", "    -- body\nend", "    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 1 then\n            for _, v2 in ipairs(lst2) do\n                if\
    \ v2 % 2 == 0 then\n                    return \"YES\"\n                end\n\
    \            end\n        end\n    end\n    return \"NO\"\nend", "  return \"\
    NO\"\nend", "    if #lst1 == 0 then\n        return \"NO\"\n    end\n    local\
    \ isodd = (lst1[1] % 2 == 1)\n    local j = 1\n    while j <= #lst2 do\n     \
    \   if lst2[j] % 2 == isodd then\n            table.remove(lst2, j)\n        \
    \    table.remove(lst1, 1)\n            return exchange(lst1, lst2)\n        end\n\
    \        j = j + 1\n    end\n    return \"NO\"\nend", "  -- your code here\nend",
  "    local isEven = function(num)\n        return num % 2 == 0\n    end\n    for\
    \ _, v in ipairs(lst1) do\n        if not isEven(v) then\n            return \"\
    NO\"\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if isEven(v)\
    \ then\n            return \"YES\"\n        end\n    end\n    return \"NO\"\n\
    end", "  for k, v in ipairs(lst1) do\n    if v % 2 == 1 then\n      if not contains(lst2,\
    \ v - 1) and not contains(lst2, v + 1) then\n        return \"NO\"\n      end\n\
    \    end\n  end\n  return \"YES\"\nend", "  -- body\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
