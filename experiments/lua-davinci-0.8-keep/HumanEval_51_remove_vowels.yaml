name: HumanEval_51_remove_vowels
language: lua
prompt: "-- remove_vowels is a function that takes string and returns string without\
  \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n-- 'bcdf'\n\
  -- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n-- 'B'\n--\
  \ >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
  nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
  \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
  \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
  \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return remove_characters(text, \"aeiou\")\nend", "    return text:gsub('[AEIOUaeiou]',\
    \ '')\nend", "    return string.gsub(text, \"[aeiouAEIOU]\", \"\")\nend", "  return\
    \ (text:gsub('[aeiou]', ''))\nend", "  local vowels = {\n    ['a'] = true,\n \
    \   ['e'] = true,\n    ['i'] = true,\n    ['o'] = true,\n    ['u'] = true,\n \
    \   ['A'] = true,\n    ['E'] = true,\n    ['I'] = true,\n    ['O'] = true,\n \
    \   ['U'] = true,\n  }\n  local result = ''\n  for i = 1, #text do\n    local\
    \ ch = text:sub(i, i)\n    if not vowels[ch] then\n      result = result .. ch\n\
    \    end\n  end\n  return result\nend", "  local vovels = 'aeiouAEIOU'\n  for\
    \ i = 1, #vovels do\n    text = text:gsub(vovels:sub(i, i), '')\n  end\n  return\
    \ text\nend", "  local s = string.gsub(text, '%a', '')\n  return s\nend", "  if\
    \ type(text) ~= 'string' then return nil end\n  local new_text = ''\n  for _,\
    \ word in ipairs(split(text)) do\n    new_text = new_text .. word:gsub('[aeiouAEIOU]',\
    \ '')\n  end\n  return new_text\nend", "    local vowels = {}\n    for i = 1,\
    \ 5 do\n        vowels[(string.sub(vowels_all, i, i))] = true\n    end\n    local\
    \ newtext = ''\n    for i = 1, #text do\n        if not vowels[(string.sub(text,\
    \ i, i))] then\n            newtext = newtext .. (string.sub(text, i, i))\n  \
    \      end\n    end\n    return newtext\nend", "  return (text:gsub('[aeiouAEIOU]',\
    \ ''))\nend", "  text = text:gsub('[aeiou]', '')\n  return text\nend", "    return\
    \ text:gsub('[aeiouAEIOU]', '')\nend", "  local result = ''\n  for i = 1, #text\
    \ do\n    local ch = string.sub(text, i, i)\n    if not contains(ch, 'aeiouAEIOU')\
    \ then\n      result = result .. ch\n    end\n  end\n  return result\nend", " \
    \ return text:gsub('[aeiou]', '')\nend", "  return string.gsub(text, \"[aeiouAEIOU]\"\
    , \"\")\nend", "\tlocal ret = {}\n\ttext:gsub(\".\", function(c)\n\t\tif not match(c:lower(),\
    \ \"[aeiou]\") then ret[#ret+1] = c end\n\tend)\n\treturn concat(ret)\nend", " \
    \ --\n  -- INSERT YOUR CODE HERE\n  --\n  local vowels = \"aeiouAEIOU\"\n  local\
    \ result = \"\"\n  for i = 1, #text do\n    if not string.find(vowels, text:sub(i,\
    \ i)) then\n      result = result .. text:sub(i, i)\n    end\n  end\n  return\
    \ result\nend", "\ttext = text:gsub('[aeiou]', '')\n\treturn text\nend", "   \
    \ local vowels = \"aeiouAEIOU\"\n    local result = \"\"\n    for c in text:gmatch'.'\
    \ do\n        if vowels:find(c) == nil then\n            result = result .. c\n\
    \        end\n    end\n    return result\nend", "\treturn string.gsub(text, '[aeiouAEIOU]',\
    \ '')\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\
    \  local text_without_vowels = text:gsub('[aeiouAEIOU]', '')\n  return text_without_vowels\n\
    end", "\treturn (string.gsub(text, '[aeiouAEIOU]', ''))\nend", "    return text:gsub('[aAeEiIoOuU]',\
    \ '')\nend", "    local no_vowels = \"\"\n    for c in text:gmatch(\".\") do\n\
    \        if not is_vowel(c) then\n            no_vowels = no_vowels .. c\n   \
    \     end\n    end\n    return no_vowels\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "    local filtered = text:gsub('[aoeiuyAEIOUY]', '')\n    return\
    \ filtered\nend", "    local vowels = \"aeiou\"\n    local index = 1\n    local\
    \ result = \"\"\n    while index <= #text do\n        if not vowels:find(text:sub(index,\
    \ index), 1, true) then\n            result = result .. text:sub(index, index)\n\
    \        end\n        index = index + 1\n    end\n    return result\nend", " \
    \ text = text:gsub('[AEIOUaeiou]', '')\n  return text\nend", "\treturn text:gsub('a',\
    \ ''):gsub('A', ''):gsub('e', ''):gsub('E', ''):gsub('i', ''):gsub('I', ''):gsub('o',\
    \ ''):gsub('O', ''):gsub('u', ''):gsub('U', '')\nend", "\treturn text:gsub('[aeiou]',\
    \ '')\nend", "    local t = {}\n    for i = 1, #text do\n        local c = string.sub(text,\
    \ i, i)\n        if not string.find(c, '[aeiouAEIOU]') then\n            table.insert(t,\
    \ c)\n        end\n    end\n    return table.concat(t)\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\tif not text or text == '' then\n\t\treturn ''\n\tend\n\tlocal\
    \ vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n\tlocal new_string\
    \ = ''\n\tfor i = 1, #text do\n\t\tlocal char = text:sub(i, i)\n\t\tlocal contains\
    \ = false\n\t\tfor k, v in pairs(vowels) do\n\t\t\tif char == v then\n\t\t\t\t\
    contains = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not contains then\n\
    \t\t\tnew_string = new_string .. char\n\t\tend\n\tend\n\treturn new_string\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ res = ''\n    for i = 1, #text do\n        if not utils.table.contains(vowels,\
    \ text:sub(i, i)) then\n            res = res .. text:sub(i, i)\n        end\n\
    \    end\n    return res\nend", "  return text:gsub('[AEIOUaeiou]', '')\nend",
  "    return text:gsub('[aeiou]', '')\nend", "  local text_vowels_removed = {}\n\
    \  for i = 1, #text do\n    local char = text:sub(i, i)\n    if char ~= 'a' and\
    \ char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~= 'u' then\n      table.insert(text_vowels_removed,\
    \ char)\n    end\n  end\n  return table.concat(text_vowels_removed)\nend", "\t\
    assert(type(text) == 'string')\n\treturn string.gsub(text, '[aeiouAEIOU]', '')\n\
    end", "    if not text then\n        return ''\n    end\n    return string.gsub(text,\
    \ \"[AEIOUaeiou]\", \"\")\nend", "    local str = {}\n    local regex = regex(\"\
    [AEIOUaeiou]\")\n    for c in text:gmatch(\".\") do\n        if regex:match(c)\
    \ then\n            table.insert(str, c)\n        end\n    end\n    return table.concat(str)\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\t\
    local no_vowels = text:gsub('[a,e,i,o,u,A,E,I,O,U]', '')\n\treturn no_vowels\n\
    end", "  return string.gsub(text, '[aeiouAEIOU]', '')\nend", "    return string.gsub(text,\
    \ \"[aeiouAEIOU]\", \"\")\nend", "    return text:gsub('[aeiou]', '')\nend", " \
    \   return text:gsub('[aeiou]', '')\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'}\n  local result = ''\n  for i = 1, text:len()\
    \ do\n    if not table.has_value(vowels, text:sub(i, i)) then\n      result =\
    \ result .. text:sub(i, i)\n    end\n  end\n  return result\nend", "  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "  return string.gsub(text, '[aeiou]', '')\nend", "    local function\
    \ is_vowel(char)\n        return char == 'a' or char == 'e' or char == 'i' or\
    \ char == 'o' or char == 'u'\n    end\n    local out = ''\n    for char in text:gmatch(\"\
    .\") do\n        if not is_vowel(char) then\n            out = out .. char\n \
    \       end\n    end\n    return out\nend", "  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "  return text:gsub('[aeiou]', '')\nend", "    return string.gsub(text,\
    \ '[aeiouAEIOU]', '')\nend", "  return string.gsub(text, '[AEIOUaeiou]', '')\n\
    end", "    return text:gsub('[aeiouAEIOU]', '')\nend", "  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\treturn text:gsub('[aeiouAEIOU]', '')\nend", "\tlocal result =\
    \ text:gsub('[aeiou]', '')\n\treturn result\nend", "  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\treturn text:gsub('[aeiouAEIOU]', '')\nend", "  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\treturn text:gsub('[aeiou]', '')\nend", "\t-- Code\nend", "\treturn\
    \ (text:gsub('[aeiou]', ''))\nend", "    return string.gsub(text, \"[aeiouAEIOU]\"\
    , \"\")\nend", "    local res = {}\n    for i = 1, string.len(text) do\n     \
    \   if not (text:sub(i, i) == 'a' or text:sub(i, i) == 'e' or text:sub(i, i) ==\
    \ 'i' or text:sub(i, i) == 'o' or text:sub(i, i) == 'u') then\n            table.insert(res,\
    \ text:sub(i, i))\n        end\n    end\n    return table.concat(res)\nend", " \
    \   return text:gsub('[aeiouAEIOU]', '')\nend", "\treturn text:gsub('[aeyuioAEYUIO]',\
    \ '')\nend", "    return text:gsub('[aeiou]', '')\nend", "\treturn (text:gsub('[aeiou]',\
    \ ''))\nend", "  return text:gsub('a', ''):gsub('e', ''):gsub('i', ''):gsub('o',\
    \ ''):gsub('u', '')\nend", "\tif type(text) == 'string' then\n\t\treturn text:gsub('[aeiou]',\
    \ '')\n\telse\n\t\terror(\"Remove_vowels function must take string argument.\"\
    )\n\tend\nend", "  -- filter all the chars that are vowels and join them together.\n\
    \  return table.concat(tablex.filter(text, not_vowel), '')\nend", "    if #text\
    \ == 0 then\n        return ''\n    elseif is_vowel(text:sub(1, 1)) then\n   \
    \     return remove_vowels(text:sub(2))\n    else\n        return text:sub(1,\
    \ 1) .. remove_vowels(text:sub(2))\n    end\nend", "  return text:gsub('[aeiou]',\
    \ '')\nend", "  return text:gsub('[aeiouAEIOU]', '')\nend", "  local vowels =\
    \ { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n  local result = ''\n\
    \  for c in text:gmatch('.') do\n    if not list.contains(vowels, c) then\n  \
    \    result = result .. c\n    end\n  end\n  return result\nend", "    return\
    \ text:gsub('[aeiouAEIOU]', '')\nend", "  return string.gsub(text, '[aeiouAEIOU]',\
    \ '')\nend", "  return text:gsub('[a\xE1\xE0\xE2\xE4\xE3e\xE9\xE8\xEA\xEBi\xED\
    \xEC\xEE\xEFo\xF3\xF2\xF4\xF6\xF5u\xFA\xF9\xFB\xFC]', '')\nend", "    return string.gsub(text,\
    \ '[aeiouAEIOU]', '')\nend", "    local new_text = ''\n    for i = 1, #text do\n\
    \        if not 'AEIOUaeiou'.find(text:sub(i, i)) then\n            new_text =\
    \ new_text .. text:sub(i, i)\n        end\n    end\n    return new_text\nend",
  "\tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tfor i, v\
    \ in ipairs(vowels) do\n\t\ttext = text:gsub(v, '')\n\tend\n\treturn text\nend",
  "    return string.gsub(text, '[aeiou]', '')\nend", "\treturn string.gsub(text,\
    \ '[aeiouAEIOU]', '')\nend", "    if text == nil then\n        return nil\n  \
    \  end\n    return text:gsub('[aeiouAEIOU]', '')\nend", "  if (string.find(text,\
    \ '[aeiou]') == nil) then\n    return text\n  else\n    return remove_vowels(string.gsub(text,\
    \ '[aeiou]', ''))\n  end\nend", "  return text:gsub('[aeiouAEIOU]', '')\nend",
  "    return text:gsub('[AEIOUaeiou]', '')\nend", "    if type(text) ~= 'string'\
    \ then\n        error('remove_vowels: invalid argument type')\n    end\n    return\
    \ text:gsub('[aeiouAEIOU]', '')\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'}\n    local result = ''\n    for i = 1, text:len()\
    \ do\n        local in_vowels = false\n        for j = 1, #vowels do\n       \
    \     if text:sub(i, i) == vowels[j] then\n                in_vowels = true\n\
    \                break\n            end\n        end\n        if not in_vowels\
    \ then\n            result = result .. text:sub(i, i)\n        end\n    end\n\
    \    return result\nend", "\tif text == '' then\n\t\treturn ''\n\telseif text:find('[aeiou]')\
    \ then\n\t\treturn remove_vowels(text:gsub('[aeiou]', ''))\n\telse\n\t\treturn\
    \ text\n\tend\nend", "    return text:gsub('a', ''):gsub('e', ''):gsub('i', ''):gsub('o',\
    \ ''):gsub('u', '')\nend", "    local vowels = 'aeiouAEIOU'\n    local t = {}\n\
    \    for i = 1, #text do\n        local v = text:sub(i, i)\n        if not vowels:find(v)\
    \ then\n            t[#t + 1] = v\n        end\n    end\n    return table.concat(t)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\
    \    local result = {}\n    for w in text:gmatch('.') do\n        if not table.contains(vowels,\
    \ w) then\n            table.insert(result, w)\n        end\n    end\n    return\
    \ table.concat(result)\nend", "  local t = ''\n  for c in text:gmatch(\".\") do\n\
    \    if not is_vowel(c) then\n      t = t .. c\n    end\n  end\n  return t\nend",
  "    return (text:gsub('[aeiouAEIOU]', ''))\nend", "    return text:gsub('[aeiou]',\
    \ '')\nend", "    return string.gsub(text, \"[aeiouAEIOU]\", \"\")\nend", "  \
    \  return text:gsub('[aeiou]', '')\nend", "  local list = {}\n  for w in string.gmatch(text,\
    \ '.') do\n    table.insert(list, w)\n  end\n  local text_without_vowels = ''\n\
    \  for i, v in ipairs(list) do\n    if v ~= 'a' and v ~= 'e' and v ~= 'i' and\
    \ v ~= 'o' and v ~= 'u' and v ~= 'A' and v ~= 'E' and v ~= 'I' and v ~= 'O' and\
    \ v ~= 'U' then\n      text_without_vowels = text_without_vowels .. v\n    end\n\
    \  end\n  return text_without_vowels\nend", "\tlocal vowels = {'a', 'A', 'e',\
    \ 'E', 'i', 'I', 'o', 'O', 'u', 'U'}\n\tlocal new_text = \"\"\n\tfor i = 1, #text\
    \ do\n\t\tlocal char = text:sub(i, i)\n\t\tlocal found = false\n\t\tfor _, v in\
    \ ipairs(vowels) do\n\t\t\tif char == v then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tnew_text = new_text .. char\n\
    \t\tend\n\tend\n\treturn new_text\nend", "    return (text:gsub('[aeiou]', ''))\n\
    end", "    local result = ''\n    for i = 1, #text do\n        local c = text:sub(i,\
    \ i)\n        if not vowels[c] then\n            result = result .. c\n      \
    \  end\n    end\n    return result\nend", "\tlocal text_without_vowels = ''\n\t\
    local vowels = 'aeiouAEIOU'\n\tlocal chars = {}\n\tfor i = 1, #text do\n\t\tchars[i]\
    \ = text:sub(i, i)\n\t\tlocal is_vowel = false\n\t\tfor v = 1, #vowels do\n\t\t\
    \tif chars[i] == vowels:sub(v, v) then\n\t\t\t\tis_vowel = true\n\t\t\tend\n\t\
    \tend\n\t\tif not is_vowel then\n\t\t\ttext_without_vowels = text_without_vowels\
    \ .. chars[i]\n\t\tend\n\tend\n\treturn text_without_vowels\nend", "    -- TODO\
    \ your code here\nend", "\treturn (string.gsub(text, \"[aAeEiIoOuU]\", \"\"))\n\
    end", "  text = (text:gsub('[aeiou]', ''))\n  return text\nend", "    local text_without_vowels\
    \ = text:gsub('a', ''):gsub('e', ''):gsub('i', ''):gsub('o', ''):gsub('u', ''):gsub('y',\
    \ '')\n    return text_without_vowels\nend", "  return text:gsub('[AEIOUaeiou]',\
    \ '')\nend", "\treturn (text:gsub('[aeiou]', ''))\nend", "    return text:gsub('[aAeEiIoOuU]',\
    \ '')\nend", "    return text:gsub('[aeiouAEIOU]', '')\nend", "    return text:gsub('[aeiou]',\
    \ '')\nend", "\tlocal new_text = text:gsub('[aAeEiIoOuU]', '')\n\treturn new_text\n\
    end", "  local vowels = {\n    [\"a\"] = 1,\n    [\"e\"] = 1,\n    [\"i\"] = 1,\n\
    \    [\"o\"] = 1,\n    [\"u\"] = 1,\n    [\"A\"] = 1,\n    [\"E\"] = 1,\n    [\"\
    I\"] = 1,\n    [\"O\"] = 1,\n    [\"U\"] = 1,\n  }\n  local txt = \"\"\n  for\
    \ c in text:gmatch(\".\") do\n    if not vowels[c] then\n      txt = txt .. c\n\
    \    end\n  end\n  return txt\nend", "  return string.gsub(text, \"[AEIOUaeiou]\"\
    , \"\")\nend", "    return (text:gsub('a', ''):gsub('A', ''):gsub('e', ''):gsub('E',\
    \ ''):gsub('i', ''):gsub('I', ''):gsub('o', ''):gsub('O', ''):gsub('u', ''):gsub('U',\
    \ ''))\nend", "    return (text:gsub('[aeiou]', ''))\nend", "    if text == nil\
    \ then\n        return ''\n    end\n    local vowels = 'aeiouAEIOU'\n    local\
    \ result = ''\n    for letter in text:gmatch('.') do\n        if not vowels:find(letter)\
    \ then\n            result = result .. letter\n        end\n    end\n    return\
    \ result\nend", "  local newtext = ''\n  for c in text:gmatch('.') do\n    if\
    \ not string.find('aeiou', c, 1, true) then\n      newtext = newtext .. c\n  \
    \  end\n  end\n  return newtext\nend", "  return text:gsub('[aAeEiIoOuU]', '')\n\
    end", "    local vowels = 'aeiouAEIOU'\n    text = text:gsub('[aeiouAEIOU]', '')\n\
    \    return text\nend", "    local output = ''\n    for i = 1, #text do\n    \
    \    local ch = text:sub(i, i)\n        if ch ~= 'a' and ch ~= 'e' and ch ~= 'i'\
    \ and ch ~= 'o' and ch ~= 'u' then\n            output = output .. ch\n      \
    \  end\n    end\n    return output\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "    local text_no_vowels = gsub(text, \"[aeiouAEIOU]\", \"\")\n\
    \    return text_no_vowels\nend", "    return text:gsub('[aeiouAEIOU]', '')\n\
    end", "    return text:gsub('[aeiouAEIOU]', '')\nend", "\tif not text then\n\t\
    \treturn ''\n\tend\n\t\n\tlocal out_str = ''\n\tlocal lower_text = text:lower()\n\
    \t\n\tfor i = 1, #lower_text do\n\t\tlocal char = lower_text:sub(i, i)\n\t\tif\
    \ not char:match('[aeiou]') then\n\t\t\tout_str = out_str .. char\n\t\tend\n\t\
    end\n\t\n\treturn out_str\nend", "    local new_text = ''\n    for i = 1, #text\
    \ do\n        local ch = string.sub(text, i, i)\n        if string.find(vowels,\
    \ ch) == nil then\n            new_text = new_text .. ch\n        end\n    end\n\
    \    return new_text\nend", "    return text:gsub('[aeiouAEIOU]', '')\nend", "\t\
    local str = ''\n\tfor i = 1, string.len(text) do\n\t\tlocal c = string.sub(text,\
    \ i, i)\n\t\tif not (c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ or c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U') then\n\t\t\tstr\
    \ = str .. c\n\t\tend\n\tend\n\treturn str\nend", "    if text == nil then\n \
    \       return nil\n    end\n    local pattern = '[aeiouyAEIOUY]'\n    return\
    \ string.gsub(text, pattern, '')\nend", "\tlocal t_without_vowels = {}\n\tfor\
    \ char in string.gmatch(text, \".\") do\n\t\tif not string.find(vowels, char)\
    \ then\n\t\t\ttable.insert(t_without_vowels, char)\n\t\tend\n\tend\n\treturn table.concat(t_without_vowels)\n\
    end", "    local result = text:gsub('[aeiouAEIOU]', '')\n    return result\nend",
  "  text = text:gsub('a', '')\n  text = text:gsub('e', '')\n  text = text:gsub('i',\
    \ '')\n  text = text:gsub('o', '')\n  text = text:gsub('u', '')\n  return text\n\
    end", "  local new_text = ''\n  for char in text:gmatch('.') do\n    if not (char\
    \ == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u') then\n \
    \     new_text = new_text .. char\n    end\n  end\n  return new_text\nend", "\t\
    if not text then\n\t\treturn nil\n\tend\n\tlocal text_with_no_vowels = \"\"\n\t\
    for letter in text:gmatch(\".\") do\n\t\tif letter:find(\"a\") == nil and letter:find(\"\
    A\") == nil and letter:find(\"e\") == nil and letter:find(\"E\") == nil and letter:find(\"\
    i\") == nil and letter:find(\"I\") == nil and letter:find(\"o\") == nil and letter:find(\"\
    O\") == nil and letter:find(\"u\") == nil and letter:find(\"U\") == nil then\n\
    \t\t\ttext_with_no_vowels = text_with_no_vowels .. letter\n\t\tend\n\tend\n\t\
    return text_with_no_vowels\nend", "    local text_without_vowels = text:gsub('[aeiouAEIOU]',\
    \ '')\n    return text_without_vowels\nend", "\treturn string.gsub(text, '[aeiouAEIOU]',\
    \ '')\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\
    \tfor _,v in ipairs(vowels) do\n\t\ttext = text:gsub(v, '')\n\tend\n\treturn text\n\
    end", "\t-- \u0414\u043B\u044F \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438\
    \ \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043B\u0438 \u0441\u0438\u043C\
    \u0432\u043E\u043B \u0433\u043B\u0430\u0441\u043D\u043E\u0439 \u0431\u0443\u043A\
    \u0432\u043E\u0439, \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C\
    \ \u0442\u0430\u0431\u043B\u0438\u0446\u0443.\n\t-- vowels_table[\u0441\u0438\u043C\
    \u0432\u043E\u043B] \u0431\u0443\u0434\u0435\u0442 true, \u0435\u0441\u043B\u0438\
    \ \u0441\u0438\u043C\u0432\u043E\u043B \u0433\u043B\u0430\u0441\u043D\u0430\u044F\
    .\n\tlocal vowels_table = {\n\t\t['a'] = true,\n\t\t['A'] = true,\n\t\t['e'] =\
    \ true,\n\t\t['E'] = true,\n\t\t['i'] = true,\n\t\t['I'] = true,\n\t\t['o'] =\
    \ true,\n\t\t['O'] = true,\n\t\t['u'] = true,\n\t\t['U'] = true,\n\t\t['Y'] =\
    \ true,\n\t\t['y'] = true,\n\t}\n\tlocal result = {}\n\tfor i = 1, #text do\n\t\
    \tif not vowels_table[text:sub(i, i)] then\n\t\t\ttable.insert(result, text:sub(i,\
    \ i))\n\t\tend\n\tend\n\treturn table.concat(result)\nend", "\tlocal vowels =\
    \ {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\treturn string.gsub(text,\
    \ 'a', '')\nend", "\ttext = string.gsub(text, \"[aAeEiIoOuU]\", \"\")\n\treturn\
    \ text\nend", "    return text:gsub('[aeiouAEIOU]', '')\nend", "    return text:gsub('[aeiou]',\
    \ '')\nend", "\treturn (text:gsub('[aeiouAEIOU]', ''))\nend", "    return (text:gsub('[aeiou]',\
    \ ''))\nend", "    return text:gsub('[aeiouAEIOU]', '')\nend", "  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\tlocal result = ''\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U'}\n\tfor i = 1, #text do\n\t\tlocal char = text:sub(i,\
    \ i)\n\t\tlocal is_vowel = false\n\t\tfor _, vowel in ipairs(vowels) do\n\t\t\t\
    if char == vowel then\n\t\t\t\tis_vowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\
    end\n\t\tif not is_vowel then\n\t\t\tresult = result .. char\n\t\tend\n\tend\n\
    \treturn result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'}\n    return text:gsub('['..table.concat(vowels)..']', '')\nend",
  "    local vowels = 'aeiouAEIOU'\n    return string.gsub(text, \"[\" .. vowels ..\
    \ \"]\", \"\")\nend", "    local string_builder = {}\n    for char in text:gmatch('.')\
    \ do\n        if not char:match('[aeiouAEIOU]') then\n            table.insert(string_builder,\
    \ char)\n        end\n    end\n    return table.concat(string_builder)\nend",
  "  return text:gsub('a', ''):gsub('e', ''):gsub('i', ''):gsub('o', ''):gsub('u',\
    \ '')\nend", "  local string_to_be_processed = text\n  local vowels = 'aeiouAEIOU'\n\
    \  local result = ''\n  for i = 1, string.len(string_to_be_processed) do\n   \
    \ local char = string.sub(string_to_be_processed, i, i)\n    local found = string.find(vowels,\
    \ char)\n    if not found then\n      result = result .. char\n    end\n  end\n\
    \  return result\nend", "    local vowels = '[aeiouAEIOU]'\n    local no_vowels\
    \ = text:gsub(vowels, '')\n    return no_vowels\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\tlocal result = ''\n\tfor i = 1, #text do\n\t\tlocal cur = text:sub(i,\
    \ i)\n\t\tif not is_vowel(cur) then\n\t\t\tresult = result .. cur\n\t\tend\n\t\
    end\n\treturn result\nend", "\tlocal result = ''\n\tfor i = 1, #text do\n\t\t\
    local ch = string.sub(text, i, i)\n\t\tif not vowels[ch] then\n\t\t\tresult =\
    \ result .. ch\n\t\tend\n\tend\n\treturn result\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "  return (text:gsub('[aeiouAEIOU]', ''))\nend", "    return string.gsub(text,\
    \ '[aeiouAEIOU]', '')\nend", "  local vowels = 'AEIOUaeiou'\n  local res = text:gsub('['..vowels..']',\
    \ '')\n  return res\nend", "    -- remove vowels from text (aeiou)\n    return\
    \ string.gsub(text, '[aeiou]', '')\nend", "    local result = ''\n    for i =\
    \ 1, #text do\n        local char = text:sub(i, i)\n        if not contains_vowel(char)\
    \ then\n            result = result .. char\n        end\n    end\n    return\
    \ result\nend", "  return text:gsub('[aeiou]', '')\nend", "  -- body\n  local\
    \ t = {}\n  local j = 1\n  local i = 1\n  while i <= #text do\n    local c = text:sub(i,i)\n\
    \    if not vowels[c] then\n      t[j] = c\n      j = j + 1\n    end\n    i =\
    \ i + 1\n  end\n  return table.concat(t)\nend", "    -- replace all vowels with\
    \ empty string\n    return text:gsub('[aeiouAEIOU]', '')\nend", "    return string.gsub(text,\
    \ '[aeiou]', '')\nend", "  return text:gsub('[aeiou]', '')\nend", "    local res\
    \ = ''\n    for i = 1, #text do\n        local ch = text:sub(i, i)\n        if\
    \ not is_vowel(ch) then\n            res = res .. ch\n        end\n    end\n \
    \   return res\nend", "    return string.gsub(text, '[aeiouAEIOU]', '')\nend",
  "    return (text:gsub('[aeiouAEIOU]', ''))\nend", "    -- TODO: Implement me\n\
    \    local new_string = \"\"\n    local vowels = { \"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"A\", \"E\", \"I\", \"O\", \"U\" }\n    for i = 1, #text do\n      \
    \  local character = text:sub(i, i)\n        local is_vowel = false\n        for\
    \ j = 1, #vowels do\n            if character == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if not is_vowel then\n            new_string = new_string .. character\n\
    \        end\n    end\n    return new_string\nend", "  if text == '' then\n  \
    \  return ''\n  elseif text:match('^a+') then\n    return remove_vowels(text:gsub('^a+',\
    \ ''))\n  elseif text:match('^e+') then\n    return remove_vowels(text:gsub('^e+',\
    \ ''))\n  elseif text:match('^i+') then\n    return remove_vowels(text:gsub('^i+',\
    \ ''))\n  elseif text:match('^o+') then\n    return remove_vowels(text:gsub('^o+',\
    \ ''))\n  elseif text:match('^u+') then\n    return remove_vowels(text:gsub('^u+',\
    \ ''))\n  else\n    return text:sub(1, 1) .. remove_vowels(text:sub(2))\n  end\n\
    end", "    return string.gsub(text, 'a', '')\nend", "    return text:gsub('[aeiouAEIOU]',\
    \ '')\nend", "\tif not text then\n\t\treturn ''\n\tend\n\tlocal text_without_vowels\
    \ = text:gsub('[aeiouAEIOU]', '')\n\treturn text_without_vowels\nend", "    if\
    \ text == '' then\n        return ''\n    elseif string.find(text, 'a') == 1 then\n\
    \        return remove_vowels(string.sub(text, 2))\n    elseif string.find(text,\
    \ 'e') == 1 then\n        return remove_vowels(string.sub(text, 2))\n    elseif\
    \ string.find(text, 'i') == 1 then\n        return remove_vowels(string.sub(text,\
    \ 2))\n    elseif string.find(text, 'o') == 1 then\n        return remove_vowels(string.sub(text,\
    \ 2))\n    elseif string.find(text, 'u') == 1 then\n        return remove_vowels(string.sub(text,\
    \ 2))\n    else\n        return string.sub(text, 1, 1) .. remove_vowels(string.sub(text,\
    \ 2))\n    end\nend", "    local result = ''\n    for i = 1, #text do\n      \
    \  local c = text:sub(i, i)\n        if not vowels[c] then\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend", "  return text:gsub('[aAeEiIoOuU]',\
    \ '')\nend", "  return string.gsub(text, '[aeiou]', '')\nend", "    local vowels\
    \ = 'aeiouAEIOU'\n    local pattern = '[aeiouAEIOU]'\n    return text:gsub(pattern,\
    \ '')\nend", "  local result = ''\n  for i = 1, #text do\n    local c = text:sub(i,\
    \ i)\n    if (c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u') then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend", "\tif text\
    \ == '' then\n\t\treturn ''\n\telseif (string.find(text, 'a') == nil) and (string.find(text,\
    \ 'e') == nil) and (string.find(text, 'i') == nil) and (string.find(text, 'o')\
    \ == nil) and (string.find(text, 'u') == nil) then\n\t\treturn text\n\telse\n\t\
    \tlocal t = {}\n\t\tfor w in string.gmatch(text, \".\") do\n\t\t\ttable.insert(t,\
    \ w)\n\t\tend\n\t\tfor i = 1, #t do\n\t\t\tif (t[i] == 'a') or (t[i] == 'e') or\
    \ (t[i] == 'i') or (t[i] == 'o') or (t[i] == 'u') then\n\t\t\t\ttable.remove(t,\
    \ i)\n\t\t\tend\n\t\tend\n\t\tlocal result = table.concat(t)\n\t\treturn result\n\
    \tend\nend", "    return gsub(text, \"[aeiouAEIOU]\", \"\")\nend", "    local\
    \ disallowed_chars = {['a'] = true, ['e'] = true, ['i'] = true, ['o'] = true,\
    \ ['u'] = true}\n    local result = {}\n    for i=1, #text do\n        local char\
    \ = text:sub(i, i)\n        if not disallowed_chars[char:lower()] then\n     \
    \       table.insert(result, char)\n        end\n    end\n    return table.concat(result)\n\
    end", "    return string.gsub(text, '[aeiou]', '')\nend", "  local vowels = {\n\
    \    a = true,\n    e = true,\n    i = true,\n    o = true,\n    u = true,\n \
    \   y = true,\n  }\n  local newtext = ''\n  for char in text:gmatch('.') do\n\
    \    if not vowels[char:lower()] then\n      newtext = newtext .. char\n    end\n\
    \  end\n  return newtext\nend", "\t-- body\n\tlocal res = \"\"\n\tlocal vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n\t\
    for i = 1, #text do\n\t\tlocal letter = text:sub(i, i)\n\t\tlocal rem = false\n\
    \t\tfor j = 1, #vowels do\n\t\t\tif letter == vowels[j] then\n\t\t\t\trem = true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not rem then\n\t\t\tres = res .. letter\n\
    \t\tend\n\tend\n\treturn res\nend", "\tlocal index = 1\n\tlocal found = false\n\
    \twhile(index < #text) do\n\t\tlocal char = string.sub(text, index, index)\n\t\
    \tif (char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u')\
    \ then\n\t\t\ttext = string.sub(text, 1, index - 1) .. string.sub(text, index\
    \ + 1)\n\t\t\tfound = true\n\t\telse\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\
    \treturn text\nend", "    local new_text = {}\n    for i=1, #text do\n       \
    \ if not (text:sub(i,i) == 'a' or text:sub(i,i) == 'e' or text:sub(i,i) == 'i'\
    \ or text:sub(i,i) == 'o' or text:sub(i,i) == 'u') then\n            table.insert(new_text,\
    \ text:sub(i,i))\n        end\n    end\n    return table.concat(new_text)\nend",
  "    local vowels = 'aeiouAEIOU'\n    local new_text = ''\n    for i = 1, string.len(text)\
    \ do\n        if not string.find(vowels, string.sub(text, i, i)) then\n      \
    \      new_text = new_text .. string.sub(text, i, i)\n        end\n    end\n \
    \   return new_text\nend", "  local pattern = '[aeiou]'\n  return string.gsub(text,\
    \ pattern, '')\nend", "  local t = ''\n  for i = 1, #text do\n    if not text:sub(i,\
    \ i):match('[aeiou]') then\n      t = t .. text:sub(i, i)\n    end\n  end\n  return\
    \ t\nend", "  if type(text) ~= 'string' then\n    return nil\n  end\n  local vowels\
    \ = 'aeiouAEIOU'\n  local new_text = ''\n  for i = 1, #text do\n    local char\
    \ = text:sub(i, i)\n    if not vowels:find(char) then\n      new_text = new_text\
    \ .. char\n    end\n  end\n  return new_text\nend", "  local result = {}\n  for\
    \ char in string.gmatch(text, '.') do\n    if not is_vowel(char) then\n      table.insert(result,\
    \ char)\n    end\n  end\n  return table.concat(result)\nend", "    local text\
    \ = text:gsub('[aAeEiIoOuU]', '')\n    return text\nend", "  local n = 0\n  local\
    \ vowels = {}\n  for i in string.gmatch(text, '[aeiouAEIOU]') do\n    n = n +\
    \ 1\n    vowels[n] = i\n  end\n  for i = 1,n do\n    text = string.gsub(text,\
    \ vowels[i], '')\n  end\n  return text\nend", "  return text:gsub('[aeiouAEIOU]',\
    \ '')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
