name: HumanEval_16_count_distinct_characters
language: lua
prompt: "-- Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n-- >>> count_distinct_characters('Jerry')\n\
  -- 4\nlocal function count_distinct_characters(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
  \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
  \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- implement here\n  local distinct = {}\n  for i = 1, #string do\n\
    \    distinct[string:sub(i, i):lower()] = true\n  end\n  return #distinct\nend",
  "    -- Use an empty list as a hash table\n    local dict = {}\n    for i = 1, #string\
    \ do\n        local char = string:sub(i, i)\n        if dict[char] == nil then\n\
    \            dict[char] = true\n        end\n    end\n    local count = 0\n  \
    \  for _ in pairs(dict) do\n        count = count + 1\n    end\n    return count\n\
    end", "    return #_:uniq(_:to_table(string:lower()))\nend", "    local count\
    \ = 0\n    local map = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if map[c] == nil then\n            count = count + 1\n         \
    \   map[c] = true\n        end\n    end\n    return count\nend", "    local set\
    \ = {}\n    for _, c in utf8.codes(string) do\n        set[utf8.char(c)] = true\n\
    \    end\n    return table.length(set)\nend", "  local characters = {}\n  for\
    \ i=1,#string do\n    local char = string:sub(i,i)\n    if not characters[char]\
    \ then\n      characters[char] = true\n    end\n  end\n  return table.getn(characters)\n\
    end", "  if type(string) ~= 'string' then\n    return nil, \"This function only\
    \ works with strings.\"\n  end\n  local string = string:lower()\n  local dict\
    \ = {}\n  for i = 1, string:len() do\n    dict[string:sub(i, i)] = true\n  end\n\
    \  return #dict\nend", "    return #to_array(string:lower())\nend", "  -- Write\
    \ your code here\n  -- [[ TODO ]]\nend", "    local chars = {}\n    for char in\
    \ string:gmatch('.') do\n        chars[char:lower()] = true\n    end\n    return\
    \ #chars\nend", "  local set = {}\n  local count = 0\n  for i = 1, #string do\n\
    \    local char = string:sub(i, i)\n    if set[char] ~= true then\n      set[char]\
    \ = true\n      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal\
    \ hash = {}\n\tlocal count = 0\n\tlocal l = string:lower()\n\tfor i = 1, string.len(l)\
    \ do\n\t\tif not hash[l:sub(i, i)] then\n\t\t\thash[l:sub(i, i)] = true\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local characters =\
    \ {}\n  for char in string:gmatch('.') do\n    if not characters[char:lower()]\
    \ then\n      characters[char:lower()] = true\n    end\n  end\n  return table.count(characters)\n\
    end", "    return len(set(string.lower(string)))\nend", "    if not string then\
    \ return 0 end\n    local count = 0\n    local char = {}\n    for i = 1, #string\
    \ do\n        local c = string:sub(i, i)\n        if not char[c] then\n      \
    \      char[c] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "\tlocal char_count = 0\n\tlocal chars = {}\n\tfor uchar\
    \ in string.gfind(string, \"([%z\\1-\\127\\194-\\244][\\128-\\191]*)\") do\n\t\
    \tif not chars[uchar] then\n\t\t\tchars[uchar] = true\n\t\t\tchar_count = char_count\
    \ + 1\n\t\tend\n\tend\n\treturn char_count\nend", "\treturn #utils.string.to_set(string)\n\
    end", "    local characters = {}\n    local character_count = 0\n    local str\
    \ = string:lower()\n    for i = 1, #str do\n        if (not characters[str:sub(i,\
    \ i)]) then\n            characters[str:sub(i, i)] = true\n            character_count\
    \ = character_count + 1\n        end\n    end\n    return character_count\nend",
  "    local hash = {}\n    local count = 0\n    local string = string:lower()\n \
    \   for i = 1, #string do\n        local char = string:sub(i, i)\n        if not\
    \ hash[char] then\n            hash[char] = true\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    local chars = {}\n   \
    \ for c in string:gmatch(\"%l\") do\n        chars[c:lower()] = true\n    end\n\
    \    return #chars\nend", "  local char_set = {}\n  for char in string:gmatch('.')\
    \ do\n    char_set[char:lower()] = true\n  end\n  return #char_set\nend", "  \
    \  local characters = {}\n    for char in string:gmatch('.') do\n        if not\
    \ characters[char:lower()] then\n            characters[char:lower()] = true\n\
    \        end\n    end\n    return #characters\nend", "  local counts = { }\n \
    \ for character in string:gmatch('.') do\n    local key = char(lower(character))\n\
    \    counts[key] = (counts[key] or 0) + 1\n  end\n  return #counts\nend", "  \
    \  local set = {}\n    for i = 1, #string do\n        set[string.lower(string.sub(string,\
    \ i, i))] = 1\n    end\n    return table.getn(set)\nend", "  local res = 0\n \
    \ local chars = {}\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if not chars[char] then\n      chars[char] = 1\n      res = res +\
    \ 1\n    end\n  end\n  return res\nend", "    -- Implement this function\n   \
    \ -- Please refer to https://www.lua.org/pil/20.2.html for help\n    -- There\
    \ are several ways to do this.\n    -- Here is one example:\n    local characters\
    \ = {}\n    for s in string:gmatch('.') do\n        s = s:lower()\n        if\
    \ characters[s] == nil then\n            characters[s] = true\n        end\n \
    \   end\n    return table.getn(characters)\nend", "    local chars = {}\n    for\
    \ i=1, #string do\n        local c = string:sub(i,i)\n        chars[c:lower()]\
    \ = true\n    end\n    return #chars\nend", "    local count = 0\n    local seen\
    \ = {}\n    for _, char in ipairs(string:upper():split()) do\n        if not seen[char]\
    \ then\n            count = count + 1\n            seen[char] = true\n       \
    \ end\n    end\n    return count\nend", "    return #(unordered_array_to_set(table_of_string_characters(string)))\n\
    end", "    return string.len(string.gsub(string, '.', function(character)\n  \
    \      return character:lower()\n    end))\nend", "    local counts = {}\n   \
    \ for character in string:gmatch(\"%a\") do\n        character = character:lower()\n\
    \        counts[character] = (counts[character] or 0) + 1\n    end\n    return\
    \ #counts\nend", "  local set = {}\n  for _, char in ipairs(string:lower():split(''))\
    \ do\n    set[char] = true\n  end\n  return count_table_entries(set)\nend", " \
    \ local b = {}\n  for i = 1, #string do\n    b[string.lower(string.sub(string,\
    \ i, i))] = true\n  end\n  return table.length(b)\nend", "  if type(string) ~=\
    \ 'string' then return 0 end\n  if string == '' then return 0 end\n  local distinct_characters\
    \ = {}\n  for c in string:gmatch('.') do\n    distinct_characters[c:lower()] =\
    \ true\n  end\n  return table.count(distinct_characters)\nend", "    local count\
    \ = 0\n    local lower_string = string:lower()\n    local chars = {}\n    for\
    \ i = 1, #lower_string do\n        if chars[lower_string:sub(i, i)] == nil then\n\
    \            chars[lower_string:sub(i, i)] = 1\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    if not string then return\
    \ 0 end\n    local char = {}\n    for c in string:gmatch('%a') do\n        char[c:lower()]\
    \ = true\n    end\n    return #char\nend", "    local seen_characters = {}\n \
    \   for _, character in ipairs(string:lower():gmatch('.')) do\n        seen_characters[character]\
    \ = true\n    end\n    return table.getn(seen_characters)\nend", "  local chars\
    \ = {}\n  for c in string:gmatch('.') do\n    chars[c:lower()] = true\n  end\n\
    \  return #chars\nend", "    local set = {}\n    local result = 0\n    for character\
    \ in string:gmatch('%a') do\n        if not set[character:lower()] then\n    \
    \        set[character:lower()] = true\n            result = result + 1\n    \
    \    end\n    end\n    return result\nend", "    return table.getn(uniq_table(to_char_table(string)))\n\
    end", "  local distinct_characters = {}\n  local distinct_character_count = 0\n\
    \  for i = 1, #string do\n    local c = string:sub(i, i)\n    if not distinct_characters[c]\
    \ then\n      distinct_characters[c] = true\n      distinct_character_count =\
    \ distinct_character_count + 1\n    end\n  end\n  return distinct_character_count\n\
    end", "  return #set(string:lower())\nend", "    local char_set = {}\n    local\
    \ count = 0\n    for i = 1, #string do\n        local character = string:sub(i,\
    \ i)\n        if not char_set[character] then\n            char_set[character]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local distinct_characters = 0\n  local used_characters = {}\n  local\
    \ string_length = string.len(string)\n  for i = 1, string_length do\n    local\
    \ character = string.sub(string, i, i)\n    if not used_characters[character]\
    \ then\n      distinct_characters = distinct_characters + 1\n      used_characters[character]\
    \ = true\n    end\n  end\n  return distinct_characters\nend", "  string = string:lower()\n\
    \  local seen = {}\n  local count = 0\n  for char in string:gmatch('.') do\n \
    \   if not seen[char] then\n      seen[char] = true\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "    local seen_chars = {}\n    for i =\
    \ 1, #string do\n        local ch = string:sub(i, i)\n        seen_chars[ch] =\
    \ 1\n    end\n    return count_keys(seen_chars)\nend", "    -- Convert input to\
    \ lower case\n    string = string:lower()\n    local result = 0\n    for i = 1,\
    \ 26 do\n        -- Only increment if corresponding character is found in string\n\
    \        if string:find(string.char(96 + i)) then\n            result = result\
    \ + 1\n        end\n    end\n    return result\nend", "  local characters = {}\n\
    \  local length = 0\n  for i = 1, #string do\n    local character = string:sub(i,\
    \ i)\n    if not characters[character] then\n      characters[character] = true\n\
    \      length = length + 1\n    end\n  end\n  return length\nend", "  -- This\
    \ will be our output.\n  local distinct_characters = 0", "  local char_table =\
    \ {}\n  for char in string:gmatch(\".\") do\n    char_table[char:lower()] = true\n\
    \  end\n  return table.getn(char_table)\nend", "  return #table.keys(map(char_to_lower_case,\
    \ string_to_table(string)))\nend", "  return strlen(strgsub(strlower(string),\
    \ \"%a\", \"\"))\nend", "    local char_count = {}\n    for char in string:gmatch('.')\
    \ do\n        char_count[char:lower()] = true\n    end\n    return len(char_count)\n\
    end", "  local lowercase_string = string:lower()\n  local cache = {}\n  for character\
    \ in lowercase_string:gmatch('.') do\n    cache[character] = true\n  end\n  return\
    \ table.getn(cache)\nend", "    local count = 0\n    local characters = {}\n \
    \   for c in string:gmatch('.') do\n        if not characters[c:lower()] then\n\
    \            count = count + 1\n            characters[c:lower()] = true\n   \
    \     end\n    end\n    return count\nend", "    string = string:lower()\n   \
    \ local result = {}\n    for i = 1, #string do\n        local current_char = string:sub(i,\
    \ i)\n        if result[current_char] == nil then\n            result[current_char]\
    \ = true\n        end\n    end\n    return #result\nend", "  return #table.unique(string:split())\n\
    end", "    return #string:lower():gsub('[^%a]', '')\nend", "\tlocal s = string\n\
    \tlocal i = s:len()\n\tlocal set = {}\n\tfor k = 1, i do\n\t\tlocal c = s:sub(k,\
    \ k)\n\t\tlocal l = c:lower()\n\t\tif not set[l] then\n\t\t\tset[l] = true\n\t\
    \tend\n\tend\n\tlocal count = 0\n\tfor k, v in pairs(set) do\n\t\tcount = count\
    \ + 1\n\tend\n\treturn count\nend", "  local distinct = {}\n  local count = 0\n\
    \  for s in string:gmatch('.') do\n    if not distinct[s:lower()] then\n     \
    \ distinct[s:lower()] = true\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local characters = {}\n  for character in string:gmatch('%S')\
    \ do\n    characters[character:lower()] = true\n  end\n  return #characters\n\
    end", "    local hash = {}\n    for i = 1, string.len(string) do\n        local\
    \ char = string.sub(string, i, i)\n        if not hash[char] then\n          \
    \  hash[char] = true\n        end\n    end\n    return table.getn(hash)\nend",
  "  local lower = string:lower()\n  local t = {}\n  for i = 1, #lower do\n    t[lower:sub(i,\
    \ i)] = true\n  end\n  return #t\nend", "    string = string:lower()\n    local\
    \ distinct_characters = {}\n    for char in string:gmatch('.') do\n        distinct_characters[char]\
    \ = true\n    end\n    return #distinct_characters\nend", "    string = string:lower()\n\
    \    local num = 0\n    local cache = {}\n    for i = 1, #string do\n        if\
    \ not cache[string:sub(i, i)] then\n            cache[string:sub(i, i)] = true\n\
    \            num = num + 1\n        end\n    end\n    return num\nend", "    local\
    \ char_count = {}\n    for c in string:gmatch('.') do\n        char_count[c:lower()]\
    \ = (char_count[c:lower()] or 0) + 1\n    end\n    return #char_count\nend", " \
    \ -- h_counts[char] = count\n  local h_counts = {}\n  local length = #string\n\
    \  local count = 0\n  for i = 1, length do\n    local char = string:sub(i, i)\n\
    \    if h_counts[char] == nil then\n      h_counts[char] = 1\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local seen = {}\n    for ch\
    \ in string:gmatch('.') do\n        seen[ch:lower()] = true\n    end\n    return\
    \ #seen\nend", "    return #(string.gsub(string, '(%l)', ''))\nend", "    local\
    \ dict = {}\n    local count = 0\n    for k,v in string.gmatch(string,\"(.)\"\
    ) do\n        if not dict[v] then\n            dict[v] = 1\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local char_set\
    \ = {}\n    for char in string:gmatch('%w') do\n        char_set[char:lower()]\
    \ = true\n    end\n    return char_set:len()\nend", "  return #(string:lower():gsub('[^%w]',\
    \ ''))\nend", "    if type(string) ~= 'string' then return 0 end\n    local count\
    \ = 0\n    local characters = {}\n    for character in string:gmatch('.') do\n\
    \        if not characters[character:lower()] then\n            count = count\
    \ + 1\n            characters[character:lower()] = true\n        end\n    end\n\
    \    return count\nend", "    local all_chars = {}\n    for char in string:gmatch('.')\
    \ do\n        char = char:lower()\n        if all_chars[char] == nil then\n  \
    \          all_chars[char] = true\n        end\n    end\n    return table.getn(all_chars)\n\
    end", "    -- YOUR CODE HERE\nend", "  -- TODO : implement the function\n  local\
    \ chars = {}\n  for _, char in ipairs(string) do\n    chars[char] = true\n  end\n\
    \  return #chars\nend", "  -- set up the return value\n  local count = 0\n  --\
    \ initialize an empty table\n  local found = {}\n  -- loop over every character\
    \ in the string\n  for i = 1, #string do\n    -- get the current character\n \
    \   local character = string:sub(i, i)\n    -- if the character is not in the\
    \ table yet, increase the count\n    if not found[character] then\n      count\
    \ = count + 1\n      -- if it is, the character is not distinct\n      found[character]\
    \ = true\n    end\n  end\n  -- return the count\n  return count\nend", "    local\
    \ chars = {}\n    for c in string:gmatch('.') do\n        if not chars[c:lower()]\
    \ then\n            chars[c:lower()] = true\n        end\n    end\n    return\
    \ #chars\nend", "  string = tostring(string)\n  local used = {}\n  local count\
    \ = 0\n  for i = 1, string:len() do\n    if not used[string:sub(i, i)] then\n\
    \      used[string:sub(i, i)] = true\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local characters = {}\n    for character in string:gmatch(\"\
    .\") do\n        characters[character:lower()] = true\n    end\n    return #table.keys(characters)\n\
    end", "\tstring = string:lower()\n\tlocal chars = {}\n\tfor i = 1, #string do\n\
    \t\tchars[string:sub(i, i)] = true\n\tend\n\treturn table.count(chars)\nend",
  "  if string == nil then return 0 end\n  local len = string.len(string)\n  local\
    \ s = string.lower(string)\n  if len == 0 then return 0 end\n  local tbl = {}\n\
    \  for i = 1, len do\n    tbl[string.sub(s, i, i)] = 1\n  end\n  return #tbl\n\
    end", "  local chars_set = {}\n  local chars_count = 0\n  for i = 1, #string do\n\
    \    local c = string:sub(i, i)\n    if not chars_set[c] then\n      chars_set[c]\
    \ = true\n      chars_count = chars_count + 1\n    end\n  end\n  return chars_count\n\
    end", "  -- your code\nend", "  local char_set = {}\n  for i=1,#string do\n  \
    \  char_set[string.upper(string:sub(i,i))] = 1\n  end\n  return #char_set\nend",
  "  local characters = string:gsub('[\\n]', ''):gsub('%s+', ''):lower()\n  local\
    \ distinct_chars = {}\n  for index = 1, characters:len() do\n    local char =\
    \ characters:sub(index, index)\n    if not distinct_chars[char] then\n      distinct_chars[char]\
    \ = 1\n    end\n  end\n  return #distinct_chars\nend", "\tlocal distinct_characters\
    \ = {}\n\tfor c in string:gmatch'.' do\n\t\tdistinct_characters[c:lower()] = true\n\
    \tend\n\treturn count_keys(distinct_characters)\nend", "    local count = 0\n\
    \    local seen = {}\n    local l = string:lower()\n    for c in l:gmatch\".\"\
    \ do\n        if not seen[c] then\n            count = count + 1\n           \
    \ seen[c] = true\n        end\n    end\n    return count\nend", "    local results\
    \ = {}\n    local length = string.len(string)\n    for i = 1, length do\n    \
    \    local ascii = string.byte(string, i)\n        if ascii >= 97 and ascii <=\
    \ 122 then\n            ascii = ascii - 32\n        end\n        if not results[ascii]\
    \ then\n            results[ascii] = 1\n        end\n    end\n    return table.getn(results)\n\
    end", "    local map = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        map[c] = true\n    end\n    return table.length(map)\nend", "  \
    \  local char_set = {}\n    for c in string:gmatch('%w') do\n        char_set[c:lower()]\
    \ = true\n    end\n    return #char_set\nend", "    return count_unique(string:lower():gmatch('%a'))\n\
    end", "  local chars = {}\n  local count = 0\n  for i = 1, #string do\n    local\
    \ char = string:sub(i, i)\n    if not chars[char] then\n      chars[char] = true\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    string =\
    \ string:lower()\n    local charset = {}\n    for char in string:gmatch(\".\"\
    ) do\n        charset[char] = true\n    end\n    return table.length(charset)\n\
    end", "  local set = {}\n  for i = 1, #string do\n    set[string:sub(i, i)] =\
    \ true\n  end\n  return count_table_keys(set)\nend", "    if type(string) ~= 'string'\
    \ then\n        error(\"Bad argument #1 to 'count_distinct_characters' (string\
    \ expected, got \" .. type(string) .. \")\")\n    end\n    local characters =\
    \ {}\n    local total = 0\n    for i = 1, string.len(string) do\n        local\
    \ character = string.sub(string, i, i)\n        if not characters[character] then\n\
    \            characters[character] = true\n            total = total + 1\n   \
    \     end\n    end\n    return total\nend", "    return table_length(find_distinct_characters(string))\n\
    end", "    local tbl = {}\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        local index = string.sub(string, i, i)\n        if tbl[index] ==\
    \ nil then\n            tbl[index] = true\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "    return #unique_values(string:lower())\n\
    end", "  if type(string) ~= 'string' then return end\n  local characters = {}\n\
    \  for i=1,#string do\n    local char = string:sub(i,i)\n    characters[char:lower()]\
    \ = 1\n  end\n  return #characters\nend", "  local seen_chars = {}\n  for char\
    \ in string:gmatch('.') do\n    char = char:lower()\n    if not seen_chars[char]\
    \ then\n      seen_chars[char] = true\n    end\n  end\n  return count_key_in_table(seen_chars)\n\
    end", "    string = string:lower()\n    local count = 0\n    local chars = {}\n\
    \    for i = 1, #string do\n        if not chars[string:sub(i, i)] then\n    \
    \        count = count + 1\n            chars[string:sub(i, i)] = true\n     \
    \   end\n    end\n    return count\nend", "  local count = 0\n  local check =\
    \ {}\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if not check[char] then\n      check[char] = true\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "  -- your code here\nend",
  "    local count = 0\n    for char in string:gmatch('.') do\n        count = count\
    \ + 1\n    end\n    return count\nend", "  local counter = {}\n  local distinct_chars\
    \ = 0\n  for char in string:gmatch(\".\") do\n    if counter[char:lower()] ==\
    \ nil then\n      counter[char:lower()] = true\n      distinct_chars = distinct_chars\
    \ + 1\n    end\n  end\n  return distinct_chars\nend", "  local t = {}\n  local\
    \ count = 0\n  for char in string:gmatch('%l') do\n    t[char:lower()] = true\n\
    \  end\n  for _ in pairs(t) do\n    count = count + 1\n  end\n  return count\n\
    end", "    local distinct = {}\n    for i = 1, #string do\n        distinct[string.sub(string,\
    \ i, i)] = true\n    end\n    return table.getn(distinct)\nend", "    local set\
    \ = Set:new()\n    for char in string:gmatch('.') do\n        set:insert(char:lower())\n\
    \    end\n    return set:size()\nend", "  local count = 0\n  local characters\
    \ = {}\n  for char in string:gmatch'.' do\n    if not characters[char:lower()]\
    \ then\n      count = count + 1\n      characters[char:lower()] = true\n    end\n\
    \  end\n  return count\nend", "    -- your code goes here\n    local s = string.lower(string)\n\
    \    local l = #s\n    local t = {}\n    for i = 1, l do\n        if t[s:sub(i,\
    \ i)] == nil then\n            t[s:sub(i, i)] = true\n        end\n    end\n \
    \   return #t\nend", "  local temp = {}\n  for char in string:gmatch'.' do\n \
    \   temp[char:lower()] = true\n  end\n  return #temp\nend", "    return 1\nend",
  "\tlocal t, chars, size = {}, {}, 0\n\tfor v in string:gmatch\".\" do\n\t\tif not\
    \ t[v] then\n\t\t\tsize = size + 1\n\t\t\tt[v] = true\n\t\tend\n\tend\n\treturn\
    \ size\nend", "    local chars = {}\n    for c in string:gmatch(\"%S\") do\n \
    \       chars[c:lower()] = true\n    end\n    return #chars\nend", "  local counter\
    \ = {}\n  for i=1, #string do\n    local character = string:sub(i,i)\n    counter[character]\
    \ = true\n  end\n  return table.getn(counter)\nend", "  local c_table = {}\n \
    \ for c in string:gmatch('.') do\n    c_table[c:lower()] = 1\n  end\n  return\
    \ #c_table\nend", "  local distinct = {}\n  for _, char in ipairs(string:lower():split(''))\
    \ do\n    distinct[char] = true\n  end\n  return #distinct\nend", "    local chars\
    \ = {}\n    for char in string:gmatch(\".\") do\n        if not chars[char:lower()]\
    \ then\n            chars[char:lower()] = true\n        end\n    end\n    return\
    \ #chars\nend", "    local counter = 0\n    local seen = {}\n    for i = 1, #string\
    \ do\n        local c = string:sub(i, i)\n        if not seen[c] then\n      \
    \      counter = counter + 1\n            seen[c] = true\n        end\n    end\n\
    \    return counter\nend", "\treturn 0\nend", "    local counts = {}\n    local\
    \ count = 0\n    for character in string:gmatch('.') do\n        local upper_character\
    \ = character:upper()\n        if counts[upper_character] == nil then\n      \
    \      counts[upper_character] = true\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    local char_map = {}\n    local count\
    \ = 0\n    for character in string:gmatch(\"%w\") do\n        if not char_map[character:lower()]\
    \ then\n            char_map[character:lower()] = true\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  return #string -- TODO\n\
    end", "  -- your code here\nend", "  string = string:lower()\n  local characters\
    \ = {}\n  for i = 1, #string do\n    local character = string:sub(i, i)\n    if\
    \ not characters[character] then\n      characters[character] = 1\n    end\n \
    \ end\n  return #characters\nend", "    return #table.unique(string:lower():to_table())\n\
    end", "\tlocal characters = {}\n\tlocal count = 0\n\tfor char in string:gmatch('.')\
    \ do\n\t\tif not characters[char:lower()] then\n\t\t\tcharacters[char:lower()]\
    \ = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "   \
    \ local chars = {}\n    for i = 1, #string do\n        chars[string:sub(i, i):lower()]\
    \ = true\n    end\n    return #chars\nend", "\tlocal distinct = {}\n\tfor c in\
    \ string:gmatch('.') do\n\t\tdistinct[c:lower()] = true\n\tend\n\treturn #distinct\n\
    end", "    local characters = {}\n    local number_of_distinct_characters = 0\n\
    \    for character in string:gmatch('%l') do\n        if not characters[character]\
    \ then\n            characters[character] = true\n            number_of_distinct_characters\
    \ = number_of_distinct_characters + 1\n        end\n    end\n    return number_of_distinct_characters\n\
    end", "    local characters = {}\n    for i = 1, string.len(string) do\n     \
    \   local current_char = string.sub(string, i, i)\n        characters[current_char]\
    \ = true\n    end\n    return table.getn(characters)\nend", "  local char_map\
    \ = {}\n  local distinct_char_count = 0\n  local character", "    local result\
    \ = {}\n    local count = 0\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if result[char] == nil then\n            result[char] = true\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local lower_string = string:lower()\n    local characters = {}\n    for i\
    \ = 1, #lower_string do\n        local character = lower_string:sub(i, i)\n  \
    \      if not characters[character] then\n            characters[character] =\
    \ true\n        end\n    end\n    return #table_keys(characters)\nend", "  local\
    \ character_set = {}\n  for character in string:gmatch('.') do\n    character_set[character:lower()]\
    \ = true\n  end\n  return len(character_set)\nend", "  local count = 0\n  local\
    \ seen = {}\n  local unique_characters = ''\n  for character in string:gmatch('.')\
    \ do\n    if not seen[character:lower()] then\n      count = count + 1\n     \
    \ seen[character:lower()] = true\n      unique_characters = unique_characters\
    \ .. character\n    end\n  end\n  return count, unique_characters\nend", "   \
    \ local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = 1\n    end\n    return count_key_value_pairs(chars)\nend", "  local chars\
    \ = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    local\
    \ index = string.lower(char)\n    if chars[index] == nil then\n      chars[index]\
    \ = char\n    end\n  end\n  return #chars\nend", "    local lower_characters =\
    \ {}\n    local characters = {}\n    for character in string:gmatch('.') do\n\
    \        character = character:lower()\n        if not lower_characters[character]\
    \ then\n            lower_characters[character] = 1\n            characters[#characters\
    \ + 1] = character\n        end\n    end\n    return #characters\nend", "\tif\
    \ string == nil then return 0 end\n\tlocal characters = {}\n\tfor char in string:gmatch('.')\
    \ do\n\t\tcharacters[char:lower()] = true\n\tend\n\treturn table_count(characters)\n\
    end", "  local distinct_characters = {}\n  local count = 0\n  for i = 1, #string\
    \ do\n    local char = string:sub(i, i)\n    if not distinct_characters[char]\
    \ then\n      distinct_characters[char] = true\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local total = 0\n    local seen = {}\n    for\
    \ c in string:gmatch('.') do\n        if (not seen[c:lower()]) then\n        \
    \    total = total + 1\n            seen[c:lower()] = true\n        end\n    end\n\
    \    return total\nend", "  return #unique_values(split(string:lower()))\nend",
  "\tlocal count = 0\n\tlocal found = {}\n\tfor i = 1, #string do\n\t\tlocal current\
    \ = string:sub(i, i)\n\t\tlocal lower = current:lower()\n\t\tif not found[lower]\
    \ then\n\t\t\tcount = count + 1\n\t\t\tfound[lower] = true\n\t\tend\n\tend\n\t\
    return count\nend", "  return #util.table_keys(util.table_from_list(util.string_to_list(string)))\n\
    end", "    local newString = string:lower()\n    local count = 0\n    for char\
    \ in newString:gmatch(\".\") do\n        count = count + 1\n    end\n    return\
    \ count\nend", "    return #string\nend", "    return #string:lower():gsub('%W',\
    \ '')\nend", "    local check_dict = {}\n    local counter = 0\n    for i=1,#string\
    \ do\n        if check_dict[string:sub(i,i)] == nil then\n            check_dict[string:sub(i,i)]\
    \ = 1\n            counter = counter + 1\n        end\n    end\n    return counter\n\
    end", "    local seen = {}\n    for char in string:gmatch('.') do\n        seen[char:lower()]\
    \ = true\n    end\n    return table_size(seen)\nend", "    local lower_string\
    \ = string:lower()\n    local count = {}\n    for i = 1, lower_string:len() do\n\
    \        count[lower_string:sub(i, i)] = true\n    end\n    return table_size(count)\n\
    end", "\tlocal count = 0\n\tfor i = 1, #string do\n\t\tif not string[i]:match('[A-Za-z]')\
    \ then\n\t\t\terror('Only alphabetic characters are allowed!')\n\t\tend\n\t\t\
    local c = string[i]:lower()\n\t\tlocal flag = true\n\t\tfor j = 1, count do\n\t\
    \t\tif c == string[j]:lower() then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\tend\n\t\tif flag then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "    string = string:lower()\n    local char_set = {}\n    for\
    \ c in string:gmatch(\".\") do\n        char_set[c] = true\n    end\n    return\
    \ table.size(char_set)\nend", "    local count = 0\n    local seen = {}\n    for\
    \ char in string:lower():gmatch('.') do\n        if not seen[char] then\n    \
    \        count = count + 1\n            seen[char] = true\n        end\n    end\n\
    \    return count\nend", "    local characters = {}\n    for c in string:gmatch('.')\
    \ do\n        if not characters[c:lower()] then\n            characters[c:lower()]\
    \ = true\n        end\n    end\n    return #characters\nend", "  local lower_string\
    \ = string:lower()\n  local characters = {}\n  for character in lower_string:gmatch('.')\
    \ do\n    characters[character] = true\n  end\n  return #characters\nend", " \
    \   return #(string:lower()):gsub('[^%a]', '')\nend", "    return count_distinct(string:lower():gmatch('.'))\n\
    end", "    local chars = {}\n    local count = 0\n    for i=1, #string do\n  \
    \      if not chars[string:sub(i,i)] then\n            count = count + 1\n   \
    \         chars[string:sub(i,i)] = true\n        end\n    end\n    return count\n\
    end", "\treturn #string:lower():gsub('[^%a]', '')\nend", "    local chars = {}\n\
    \    for char in each_character(string) do\n        chars[lower(char)] = true\n\
    \    end\n    return length(chars)\nend", "  local characters = {}\n  for c in\
    \ string:gmatch(\".\") do\n    characters[c:lower()] = true\n  end\n  return count_keys(characters)\n\
    end", "\tlocal distinct_characters = {}\n\tlocal number_of_distinct_characters\
    \ = 0\n\tfor c in string:gmatch(\".\") do\n\t\tif not distinct_characters[c:lower()]\
    \ then\n\t\t\tdistinct_characters[c:lower()] = 1\n\t\t\tnumber_of_distinct_characters\
    \ = number_of_distinct_characters + 1\n\t\tend\n\tend\n\treturn number_of_distinct_characters\n\
    end", "    local distinct_chars = 0\n    local chars = string_to_table(string)\n\
    \    for k, v in pairs(chars) do\n        distinct_chars = distinct_chars + 1\n\
    \    end\n    return distinct_chars\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        t[string.lower(string:sub(i, i))] = true\n    end\n    return #t\n\
    end", "    -- https://stackoverflow.com/questions/4876366/lua-string-to-lowercase-function/4876540#4876540\n\
    \    local _lowered = string:lower()\n    local _count = 0\n    local _distinct\
    \ = {}\n    local _character\n    for i = 1, string.len(_lowered) do\n       \
    \ _character = string.sub(_lowered, i, i)\n        if not _distinct[_character]\
    \ then\n            _distinct[_character] = true\n            _count = _count\
    \ + 1\n        end\n    end\n    return _count\nend", "  -- TODO: implement this\
    \ function\n  return 0\nend", "    local chars = {}\n    for char in string:gmatch('.')\
    \ do\n        chars[char:lower()] = true\n    end\n    return #chars\nend", " \
    \ return #(unique(sort(string:lower())))\nend", "    local dict = {}\n    for\
    \ i = 1, string.len(string) do\n        dict[string.lower(string.sub(string, i,\
    \ i))] = true\n    end\n    return table.length(dict)\nend", "    string = string:lower()\n\
    \    local hashed = {}\n    for c in string:gmatch\".\" do\n        hashed[c]\
    \ = true\n    end\n    return table.length(hashed)\nend", "    return #table_unique(split(string))\n\
    end", "    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend", "    local ret = {}\n    for char in\
    \ string:gmatch('.') do\n        ret[char:lower()] = true\n    end\n    return\
    \ #ret\nend", "    local keys = {}\n    local characters = string:lower()\n  \
    \  for c in characters:gmatch(\".\") do\n        keys[c] = true\n    end\n   \
    \ return #keys\nend", "  -- your code here\n  local char_set = {}\n  for c in\
    \ string:gmatch('%a') do\n    char_set[c:lower()] = true\n  end\n  return table.getn(char_set)\n\
    end", "    local unique_characters = {}\n    for character in string:gmatch('%l')\
    \ do\n        unique_characters[character:lower()] = true\n    end\n    return\
    \ table.length(unique_characters)\nend", "    local s = {}\n    for char in string:gmatch('%S')\
    \ do\n        if not s[char:lower()] then\n            s[char:lower()] = true\n\
    \        end\n    end\n    return #s\nend", "  local count = 0\n  local i = 1\n\
    \  local c = ''\n  for i = 1, #string do\n    c = string:sub(i, i)\n    if c:lower()\
    \ ~= c:upper() then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    if string == nil then\n        return 0\n    end\n    local count =\
    \ 0\n    local temp_table = {}\n    for i=1, string.len(string) do\n        local\
    \ char = string.sub(string, i, i)\n        if temp_table[char] == nil then\n \
    \           temp_table[char] = 1\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    local characters =\
    \ {}\n    for letter in string:gmatch('%a') do\n        if characters[letter:lower()]\
    \ == nil then\n            count = count + 1\n            characters[letter:lower()]\
    \ = true\n        end\n    end\n    return count\nend", "  local seen_chars =\
    \ {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    seen_chars[char:lower()]\
    \ = true\n  end\n  return table.length(seen_chars)\nend", "  local count = 0\n\
    \  local characters = {}\n  for char in string:gmatch('.') do\n    if not characters[char:lower()]\
    \ then\n      count = count + 1\n      characters[char:lower()] = true\n    end\n\
    \  end\n  return count\nend", "  if type(string) ~= 'string' then\n    error('First\
    \ argument has to be a string')\n  end\n  -- TODO: implement your solution\n \
    \ local character_count = {}\n  for c in string:gmatch('.') do\n    if not character_count[c:lower()]\
    \ then\n      character_count[c:lower()] = true\n    end\n  end\n  return table.getn(character_count)\n\
    end", "    local result = 0\n    local char_map = {}\n    for c in string:gmatch(\"\
    .\") do\n        if not char_map[c] then\n            char_map[c] = true\n   \
    \         result = result + 1\n        end\n    end\n    return result\nend",
  "\tlocal chars = {}\n\tfor i = 1, #string do\n\t\tchars[string.lower(string.sub(string,\
    \ i, i))] = true\n\tend\n\tlocal count = 0\n\tfor k, v in pairs(chars) do\n\t\t\
    count = count + 1\n\tend\n\treturn count\nend", "    local used = {}\n    local\
    \ count = 0\n    for i=1,#string do\n        if not used[string:sub(i,i)] then\n\
    \            used[string:sub(i,i)] = true\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "  local count = 0\n  local seen =\
    \ {}\n  for c in string:gmatch('.') do\n    c = c:lower()\n    if not seen[c]\
    \ then\n      count = count + 1\n      seen[c] = true\n    end\n  end\n  return\
    \ count\nend", "    local t = {}\n    for i = 1, #string do\n        local char\
    \ = string:sub(i, i)\n        t[char:lower()] = true\n    end\n    return table.size(t)\n\
    end", "    local s = {}\n    for c in string:gmatch\".\" do\n        s[c:lower()]\
    \ = true\n    end\n    return #s\nend", "    local char_counts = {}\n    local\
    \ char_count = 0\n    for char in string:gmatch('.') do\n        if not char_counts[char:lower()]\
    \ then\n            char_counts[char:lower()] = 1\n            char_count = char_count\
    \ + 1\n        end\n    end\n    return char_count\nend", "\treturn #string.gsub(string,\
    \ \"(%w)(%1)*\", \"%1\")\nend", "    local characters = {}\n    for _, character\
    \ in ipairs(string_to_characters(string)) do\n        characters[characters_to_string(character)]\
    \ = true\n    end\n    return next(characters) and table.length(characters) or\
    \ 0\nend", "\tlocal chars = {}\n\tfor c in string:gmatch('.') do\n\t\tchars[c:lower()]\
    \ = true\n\tend\n\treturn #chars\nend", "    local characters = {}\n    for c\
    \ in string:gmatch('.') do\n        c = c:lower()\n        if not characters[c]\
    \ then\n            characters[c] = true\n        end\n    end\n    return table.size(characters)\n\
    end", "  local letters = {}\n  for i = 1, #string do\n    letters[string.lower(string:sub(i,\
    \ i))] = 1\n  end\n  return #letters\nend", "    local count = 0\n    local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    for char in string.gmatch(string, \".\"\
    ) do\n        if string.find(alphabet, char, 1, true) ~= nil then\n          \
    \  count = count + 1\n            alphabet = string.gsub(alphabet, char, \"\"\
    )\n        end\n    end\n    return count\nend", "    local count = 0\n    local\
    \ seen = {}\n    for char in string:lower():gmatch('.') do\n        if not seen[char]\
    \ then\n            count = count + 1\n            seen[char] = true\n       \
    \ end\n    end\n    return count\nend", "    local lc_string = string:lower()\n\
    \    local lc_characters = { }\n    for i = 1, #lc_string do\n        local c\
    \ = lc_string:sub(i, i)\n        if not lc_characters[c] then\n            lc_characters[c]\
    \ = true\n        end\n    end\n    return #lc_characters\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
