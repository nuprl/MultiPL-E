name: HumanEval_30_get_positive
language: lua
prompt: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
  \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
  \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local pos = {}\n  for _, i in ipairs(l) do\n    if i > 0 then\n \
    \     table.insert(pos, i)\n    end\n  end\n  return pos\nend", "   local function\
    \ is_positive(e)\n      return e > 0\n   end\n   return filter(is_positive, l)\n\
    end", "    local res = {}\n    for _, item in ipairs(l) do\n        if item >\
    \ 0 then\n            table.insert(res, item)\n        end\n    end\n    return\
    \ res\nend", "    local res = {}\n    for i, v in ipairs(l) do\n        if v >\
    \ 0 then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "  return filter(function(x) return x > 0 end, l)\nend", "  local res =\
    \ {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res, v)\n\
    \    end\n  end\n  return res\nend", "  local result = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then table.insert(result, v) end\n  end\n  return result\n\
    end", "\tlocal positive = {}\n\tfor _, x in ipairs(l) do\n\t\tif x > 0 then\n\t\
    \t\ttable.insert(positive, x)\n\t\tend\n\tend\n\treturn positive\nend", "    local\
    \ new_l = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n            new_l[#new_l\
    \ + 1] = l[i]\n        end\n    end\n    return new_l\nend", "  -- TODO\nend",
  "    local new_l = {}\n    for k, v in pairs(l) do\n        if v > 0 then\n    \
    \        table.insert(new_l, v)\n        end\n    end\n    return new_l\nend",
  "\tlocal lp = {}\n\tfor i,x in ipairs(l) do\n\t\tif x >= 0 then\n\t\t\tlp[#lp+1]\
    \ = x\n\t\tend\n\tend\n\treturn lp\nend", "  local ret = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then\n      ret[#ret + 1] = l[i]\n    end\n  end\n  return ret\n\
    end", "    local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend",
  "    return map(function(x) return x > 0 and x or nil end, l)\nend", "  local pos\
    \ = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      pos[#pos + 1] = l[i]\n\
    \    end\n  end\n  return pos\nend", "  local ret = {}\n  for i = 1, #l do\n \
    \   if l[i] > 0 then ret[#ret + 1] = l[i] end\n  end\n  return ret\nend", "  \
    \  local t = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n            t[#t\
    \ + 1] = l[i]\n        end\n    end\n    return t\nend", "    local pos = {}\n\
    \    for k, v in pairs(l) do\n        if v > 0 then\n            table.insert(pos,\
    \ v)\n        end\n    end\n    return pos\nend", "  local result = {}\n  for\
    \ _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(result, v)\n   \
    \ end\n  end\n  return result\nend", "    local ret = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(ret, v)\n        end\n \
    \   end\n    return ret\nend", "    local r = {}\n    for i, v in ipairs(l) do\n\
    \        if v > 0 then\n            r[#r + 1] = v\n        end\n    end\n    return\
    \ r\nend", "    local result = {}\n    for _, v in ipairs(l) do\n        if v\
    \ > 0 then table.insert(result, v) end\n    end\n    return result\nend", "  \
    \  return {}\nend", "  local t = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n\
    \      t[#t + 1] = l[i]\n    end\n  end\n  return t\nend", "    local positive_numbers\
    \ = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n            table.insert(positive_numbers,\
    \ l[i])\n        end\n    end\n    return positive_numbers\nend", "\tlocal ret\
    \ = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then table.insert(ret, v) end\n\
    \tend\n\treturn ret\nend", "    local new_list = {}\n    for k, v in pairs(l)\
    \ do\n        if v > 0 then\n            table.insert(new_list, v)\n        end\n\
    \    end\n    return new_list\nend", "  local result = {}\n  for i,v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend", "    local new_list = {}\n    for i, v in ipairs(l) do\n     \
    \   if v > 0 then\n            table.insert(new_list, v)\n        end\n    end\n\
    \    return new_list\nend", "  local list = {}\n  for i = 1, #l do\n    if l[i]\
    \ > 0 then\n      list[#list + 1] = l[i]\n    end\n  end\n  return list\nend",
  "    local new_list = {}\n    for i, item in ipairs(l) do\n        if item > 0 then\n\
    \            table.insert(new_list, item)\n        end\n    end\n    return new_list\n\
    end", "  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n     \
    \ table.insert(res, v)\n    end\n  end\n  return res\nend", "    local res = {}\n\
    \    for _, n in ipairs(l) do\n        if n > 0 then\n            table.insert(res,\
    \ n)\n        end\n    end\n    return res\nend", "    local out = {}\n    for\
    \ i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(out, v)\n\
    \        end\n    end\n    return out\nend", "    local r = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(r, v)\n      \
    \  end\n    end\n    return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(r, v)\n        end\n   \
    \ end\n    return r\nend", "\tlocal res = {}\n\tfor _, item in ipairs(l) do\n\t\
    \tif item > 0 then\n\t\t\ttable.insert(res, item)\n\t\tend\n\tend\n\treturn res\n\
    end", "  local result = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n  \
    \    table.insert(result, v)\n    end\n  end\n  return result\nend", "\tlocal\
    \ ret = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend", "    local pos_nums = {}\n    for i\
    \ = 1, #l do\n        if l[i] > 0 then\n            pos_nums[#pos_nums + 1] =\
    \ l[i]\n        end\n    end\n    return pos_nums\nend", "    local result = {}\n\
    \    for i, n in ipairs(l) do\n        if n > 0 then\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend\nassert(equal(get_positive({-1,\
    \ 2, -4, 5, 6}), {2, 5, 6}))\nassert(equal(get_positive({5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10}), {5, 3, 2, 3, 9, 123, 1}))", "    local function helper(l,\
    \ accum)\n        if #l == 0 then\n            return accum\n        elseif l[1]\
    \ > 0 then\n            return helper(table.slice(l, 2), table.append(accum, l[1]))\n\
    \        else\n            return helper(table.slice(l, 2), accum)\n        end\n\
    \    end\n    return helper(l, {})\nend", "  return fun.map(l, function(x)\n \
    \   if x > 0 then\n      return x\n    end\n  end)\nend", "\tlocal res = {}\n\t\
    for i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tres[#res + 1] = v\n\t\tend\n\
    \tend\n\treturn res\nend", "\treturn filter(is_positive, l)\nend", "    local\
    \ r = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n            r[#r + 1]\
    \ = l[i]\n        end\n    end\n    return r\nend", "\treturn map(function(i)\
    \ return i >= 0 and i or nil end, l)\nend", "    local new_l = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(new_l, v)\n\
    \        end\n    end\n    return new_l\nend", "    return Array:new(select(l,\
    \ function(x) return x > 0 end))\nend", "  local res = {}\n  for k, v in pairs(l)\
    \ do\n    if v > 0 then\n      res[#res + 1] = v\n    end\n  end\n  return res\n\
    end", "    return map(function(x) return x > 0 and x or nil end, l)\nend", " \
    \   return filter(is_positive, l)\nend", "  local positives = {}\n  for _, v in\
    \ ipairs(l) do\n    if v > 0 then\n      table.insert(positives, v)\n    end\n\
    \  end\n  return positives\nend", "   local result = {}\n   for _, value in ipairs(l)\
    \ do\n      if value > 0 then\n         table.insert(result, value)\n      end\n\
    \   end\n   return result\nend", "    local positive = {}\n    for _, n in ipairs(l)\
    \ do\n        if n > 0 then\n            table.insert(positive, n)\n        end\n\
    \    end\n    return positive\nend", "    local r = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            r[#r + 1] = v\n        end\n    end\n\
    \    return r\nend", "\tlocal res = {}\n\tfor i, j in ipairs(l) do\n\t\tif j >\
    \ 0 then\n\t\t\ttable.insert(res, j)\n\t\tend\n\tend\n\treturn res\nend", "  local\
    \ pos_list = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      table.insert(pos_list,\
    \ v)\n    end\n  end\n  return pos_list\nend", "  local res = {}\n  for i, v in\
    \ ipairs(l) do\n    if v > 0 then\n      table.insert(res, v)\n    end\n  end\n\
    \  return res\nend", "    local new_list = {}\n    for _, element in ipairs(l)\
    \ do\n        if element > 0 then\n            table.insert(new_list, element)\n\
    \        end\n    end\n    return new_list\nend", "\tlocal result = {}\n\tfor\
    \ i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tresult[#result + 1] = l[i]\n\t\tend\n\
    \tend\n\treturn result\nend", "    return filter(l, function(item) return item\
    \ > 0 end)\nend", "   return filter(l, function(n) return n > 0 end)\nend", " \
    \   local t = {}\n    for _, n in ipairs(l) do\n        if n > 0 then\n      \
    \      table.insert(t, n)\n        end\n    end\n    return t\nend", "    local\
    \ pos = {}\n    for i, x in ipairs(l) do\n        if x > 0 then\n            pos[#pos\
    \ + 1] = x\n        end\n    end\n    return pos\nend", "    return map(function(x)\
    \ return x>0 and x or nil end, l)\nend", "  if not l then return nil end\n  local\
    \ newl = {}\n  for _, i in ipairs(l) do\n    if i > 0 then\n      table.insert(newl,\
    \ i)\n    end\n  end\n  return newl\nend", "  return filter(l, function(x) return\
    \ x > 0 end)\nend", "\tlocal new_l = {}\n\tfor _, v in ipairs(l) do\n\t\tif v\
    \ > 0 then\n\t\t\ttable.insert(new_l, v)\n\t\tend\n\tend\n\treturn new_l\nend",
  "  local positive = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "    local res = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "    local result = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend", "  local res = {}\n  for i, v\
    \ in ipairs(l) do\n    if v > 0 then table.insert(res, v) end\n  end\n  return\
    \ res\nend", "  return function(acc, v)\n    if v > 0 then\n      table.insert(acc,\
    \ v)\n    end\n    return acc\n  end, l, {}\nend", "  local new_l = {}\n  for\
    \ _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(new_l, v)\n    end\n\
    \  end\n  return new_l\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "   local new_list = {}\n   for i = 1, #l do\n      if l[i]\
    \ > 0 then\n         new_list[#new_list + 1] = l[i]\n      end\n   end\n   return\
    \ new_list\nend", "    local filtered = {}\n    for i, v in ipairs(l) do\n   \
    \     if v > 0 then\n            table.insert(filtered, v)\n        end\n    end\n\
    \    return filtered\nend", "\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\t\
    if v > 0 then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend",
  "    local t = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n        \
    \    table.insert(t, v)\n        end\n    end\n    return t\nend", "  local r\
    \ = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      r[#r + 1] = v\n \
    \   end\n  end\n  return r\nend", "    return filter(l, function(n) return n >\
    \ 0 end)\nend", "  local out = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\
    \ table.insert(out, v) end\n  end\n  return out\nend", "    local positives =\
    \ {}\n    for i, n in ipairs(l) do\n        if n > 0 then\n            table.insert(positives,\
    \ n)\n        end\n    end\n    return positives\nend", "  return select(\n  \
    \  function(k,v) return v > 0 end,\n    table.unpack(l)\n  )\nend", "  -- your\
    \ code here\nend", "    local res = {}\n    for _, v in ipairs(l) do\n       \
    \ if v > 0 then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "  -- Your code goes here.\n  local lpos = {}\n  for i,v in ipairs(l)\
    \ do\n    if v > 0 then\n      lpos[#lpos+1] = v\n    end\n  end\n  return lpos\n\
    end", "    return list_filter(l, function(e) return e > 0 end)\nend", "    local\
    \ t = {}\n    for i, x in ipairs(l) do\n        if x > 0 then\n            table.insert(t,\
    \ x)\n        end\n    end\n    return t\nend", "    local res = {}\n    for i,\
    \ v in ipairs(l) do\n        if v > 0 then table.insert(res, v) end\n    end\n\
    \    return res\nend", "    local nl = {}\n    for k, v in pairs(l) do\n     \
    \   if v > 0 then\n            table.insert(nl, v)\n        end\n    end\n   \
    \ return nl\nend", "\tlocal ret = {}\n\tfor k, v in pairs(l) do\n\t\tif v > 0\
    \ then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(t,\
    \ v)\n        end\n    end\n    return t\nend", "    local res = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "\tlocal res = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\
    \treturn res\nend", "    local res = {}\n    for k, v in pairs(l) do\n       \
    \ if v > 0 then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "    local ret = {}\n    for i, v in ipairs(l) do\n        if v >\
    \ 0 then\n            table.insert(ret, v)\n        end\n    end\n    return ret\n\
    end", "    local function f(a, b)\n        if b > 0 then\n            table.insert(a,\
    \ b)\n        end\n        return a\n    end\n    return reduce(f, {}, l)\nend",
  "    local pl = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n      \
    \      table.insert(pl, v)\n        end\n    end\n    return pl\nend", "    local\
    \ pos = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(pos,\
    \ v)\n        end\n    end\n    return pos\nend", "    local res = {}\n    for\
    \ _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "  return filter(function(x) return\
    \ x > 0 end, l)\nend", "    local pos = {}\n    for _, x in ipairs(l) do\n   \
    \     if x > 0 then\n            table.insert(pos, x)\n        end\n    end\n\
    \    return pos\nend", "  return filter(function(x) return x > 0 end, l)\nend",
  "  if #l == 0 then\n    return nil\n  elseif l[1] > 0 then\n    return cons(l[1],\
    \ get_positive(slice(l, 2)))\n  else\n    return get_positive(slice(l, 2))\n \
    \ end\nend", "    -- TODO\nend", "  local res = {}\n  for i = 1, #l do\n    if\
    \ l[i] > 0 then\n      res[#res + 1] = l[i]\n    end\n  end\n  return res\nend",
  "    local res = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n          \
    \  res[#res + 1] = l[i]\n        end\n    end\n    return res\nend", "    local\
    \ r = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n            r[#r\
    \ + 1] = v\n        end\n    end\n    return r\nend", "  local tbl = {}\n  for\
    \ i, v in ipairs(l) do\n    if v > 0 then table.insert(tbl, v) end\n  end\n  return\
    \ tbl\nend", "    local res = {}\n    for _, v in ipairs(l) do\n        if v >\
    \ 0 then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "  local res = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n      res[#res\
    \ + 1] = v\n    end\n  end\n  return res\nend", "    local new_l = {}\n    for\
    \ _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(new_l,\
    \ v)\n        end\n    end\n    return new_l\nend", "  return l\nend", "    local\
    \ res = {}\n    for k, v in pairs(l) do\n        if v > 0 then table.insert(res,\
    \ v) end\n    end\n    return res\nend", "\tlocal result = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif v > 0 then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\
    \t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend", "\tassert(l ~=\
    \ nil, \"list must be initialized\")\n\t\n\tif #l == 0 then return {} end\n\t\n\
    \tlocal res = {}\n\tfor i, e in ipairs(l) do\n\t\tif e > 0 then\n\t\t\ttable.insert(res,\
    \ e)\n\t\tend\n\tend\n\t\n\treturn res\nend", "    local r = {}\n    for _, v\
    \ in ipairs(l) do\n        if v > 0 then table.insert(r, v) end\n    end\n   \
    \ return r\nend", "  local result = {}\n  for _, v in ipairs(l) do\n    if v >\
    \ 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
  "  local result = {}\n  for _,v in ipairs(l) do\n    if v > 0 then table.insert(result,\
    \ v) end\n  end\n  return result\nend", "   return filter(l, function(v) return\
    \ v > 0 end)\nend", "  local t = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(t, v)\n    end\n  end\n  return t\nend", "    local ret =\
    \ {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend", "\tlocal n_l = {}\n\tfor i =\
    \ 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tn_l[#n_l + 1] = l[i]\n\t\tend\n\tend\n\
    \treturn n_l\nend", "    local result = {}\n    for _,v in ipairs(l) do\n    \
    \    if v > 0 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend", "  return filter(l,function(x) return x > 0 end)\nend",
  "    local p = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n            p[#p\
    \ + 1] = l[i]\n        end\n    end\n    return p\nend", "    return get_all(l,\
    \ function(x) return x > 0 end)\nend", "    local pos = {}\n    for i = 1, #l\
    \ do\n        if l[i] > 0 then\n            pos[#pos + 1] = l[i]\n        end\n\
    \    end\n    return pos\nend", "  return l:filter(\n    function(i)\n      return\
    \ i > 0\n    end\n  )\nend", "    local pos_l = {}\n    for _, i in ipairs(l)\
    \ do\n        if i > 0 then\n            table.insert(pos_l, i)\n        end\n\
    \    end\n    return pos_l\nend", "   local result = {}\n   for _, value in ipairs(l)\
    \ do\n      if value > 0 then\n         table.insert(result, value)\n      end\n\
    \   end\n   return result\nend", "    local new = {}\n    for _, x in ipairs(l)\
    \ do\n        if x > 0 then\n            table.insert(new, x)\n        end\n \
    \   end\n    return new\nend", "  local r = {}\n  for _, v in ipairs(l) do\n \
    \   if v > 0 then\n      r[#r + 1] = v\n    end\n  end\n  return r\nend", "  return\
    \ fold(l, function(a, b) if b > 0 then return a .. ',' .. b else return a end\
    \ end)\nend", "    local res = {}\n    for _, v in ipairs(l) do\n        if v\
    \ > 0 then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ res\nend", "    local res = {}\n    for _, v in ipairs(l) do\n        if v >\
    \ 0 then\n            table.insert(res, v)\n        end\n    end\n    return res\n\
    end", "    local ll = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(ll, v)\n        end\n    end\n    return ll\nend", " \
    \ local result = {}\n  for k,v in pairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local positive = {}\n  for i =\
    \ 1, #l do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n    end\n\
    \  end\n  return positive\nend", "  local r = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      r[#r + 1] = v\n    end\n  end\n  return r\nend", " \
    \   local new_list = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(new_list, v)\n        end\n    end\n    return new_list\n\
    end", "    return list.filter(l, function(x) return x > 0 end)\nend", "    return\
    \ _filter(l, function(v) return v > 0 end)\nend", "    -- TODO: fill in your code\
    \ here\n    local pos_l = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(pos_l, v)\n        end\n    end\n    return pos_l\n\
    end", "  local r = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend", "    local t = {}\n    for i = 1,\
    \ #l do\n        if l[i] > 0 then table.insert(t, l[i]) end\n    end\n    return\
    \ t\nend", "    local r = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\
    \ table.insert(r, v) end\n    end\n    return r\nend", "    return filter(function(x)\
    \ return x > 0 end, l)\nend", "    local list = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(list, v)\n        end\n\
    \    end\n    return list\nend", "    local newList = {}\n    for i, v in ipairs(l)\
    \ do\n        if (v > 0) then\n            table.insert(newList, v)\n        end\n\
    \    end\n    return newList\nend", "  local new_list = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then\n      new_list[#new_list + 1] = l[i]\n    end\n  end\n\
    \  return new_list\nend", "    if type(l) ~= \"table\" then\n        error(\"\
    get_positive: expected a table\", 2)\n    end\n    local new_list = {}\n    for\
    \ i,v in ipairs(l) do\n        if v > 0 then\n            table.insert(new_list,\
    \ v)\n        end\n    end\n    return new_list\nend", "  local res = {}\n  for\
    \ _, e in ipairs(l) do\n    if e > 0 then\n      table.insert(res, e)\n    end\n\
    \  end\n  return res\nend", "  if #l == 0 then\n    return {}\n  elseif l[1] <=\
    \ 0 then\n    return get_positive(l:reverse():tail():reverse())\n  else\n    return\
    \ {l[1]} .. get_positive(l:tail())\n  end\nend", "    local result = {}\n    for\
    \ i = 1, #l do\n        if l[i] > 0 then\n            result[#result + 1] = l[i]\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    return filter(function(x)\
    \ return x > 0 end, l)\nend", "  return sel(gt(__, 0), l)\nend", "\tlocal r =\
    \ {}\n\tfor _,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r, v)\n\
    \t\tend\n\tend\n\treturn r\nend", "\tlocal function positive_check(x)\n\t\treturn\
    \ x > 0\n\tend\n\treturn filter(positive_check, l)\nend", "  local result = {}\n\
    \  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(result, v)\n\
    \    end\n  end\n  return result\nend", "  if (#l == 0) then\n    return {}\n\
    \  elseif (l[1] > 0) then\n    return {l[1]}, get_positive(l, 2)\n  else\n   \
    \ return get_positive(l, 2)\n  end\nend", "    local ret = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(ret, v)\n    \
    \    end\n    end\n    return ret\nend", "    -- TODO: Your code here.\n    local\
    \ list = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n            table.insert(list,\
    \ v)\n        end\n    end\n    return list\nend", "  local new_l = {}\n  for\
    \ i, v in ipairs(l) do\n    if v > 0 then\n      table.insert(new_l, v)\n    end\n\
    \  end\n  return new_l\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(t, v)\n        end\n    end\n\
    \    return t\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ if v > 0 then\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend", "  local result = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend", "    local\
    \ new_list = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n            new_list[#new_list\
    \ + 1] = l[i]\n        end\n    end\n    return new_list\nend", "    if #l ==\
    \ 0 then\n        return {}\n    else\n        if l[1] > 0 then\n            return\
    \ {l[1]}.concat(get_positive(l:slice(2)))\n        else\n            return get_positive(l:slice(2))\n\
    \        end\n    end\nend", "  return list.filter(l, function(x) return x > 0\
    \ end)\nend", "  local res = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n  \
    \    res[#res + 1] = l[i]\n    end\n  end\n  return res\nend", "    local t =\
    \ {}\n    for _,i in ipairs(l) do\n        if i > 0 then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "    local res = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "    -- TODO: implement the function\n\
    end", "\tlocal ret = {}\n\tfor _, i in ipairs(l) do\n\t\tif i > 0 then\n\t\t\t\
    table.insert(ret, i)\n\t\tend\n\tend\n\treturn ret\nend", "  local res = {}\n\
    \  for _, val in ipairs(l) do\n    if val > 0 then\n      table.insert(res, val)\n\
    \    end\n  end\n  return res\nend", "  local positive = {}\n  for _, num in ipairs(l)\
    \ do\n    if num > 0 then\n      table.insert(positive, num)\n    end\n  end\n\
    \  return positive\nend", "\tlocal out = {}\n\tfor i = 1, #l do\n\t\tif l[i] >\
    \ 0 then\n\t\t\tout[#out + 1] = l[i]\n\t\tend\n\tend\n\treturn out\nend", "\t\
    local ret = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then table.insert(ret,\
    \ v) end\n\tend\n\treturn ret\nend", "    local out = {}\n    for _,v in ipairs(l)\
    \ do\n        if v > 0 then table.insert(out, v) end\n    end\n    return out\n\
    end", "  local new_l = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n    \
    \  table.insert(new_l, v)\n    end\n  end\n  return new_l\nend", "    return filter(function(x)\
    \ return x > 0 end, l)\nend", "  local s = {}\n  for _, v in ipairs(l) do\n  \
    \  if v > 0 then\n      table.insert(s, v)\n    end\n  end\n  return s\nend",
  "    local out = {}\n    for k, v in pairs(l) do\n        if v > 0 then\n      \
    \      table.insert(out, v)\n        end\n    end\n    return out\nend", "   \
    \ local t = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n        \
    \    table.insert(t, v)\n        end\n    end\n    return t\nend", "    local\
    \ tmp = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n            table.insert(tmp,\
    \ v)\n        end\n    end\n    return tmp\nend", "    local r = {}\n    for i,\
    \ v in ipairs(l) do\n        if v > 0 then\n            r[#r + 1] = v\n      \
    \  end\n    end\n    return r\nend", "    local new_list = {}\n    for i, num\
    \ in ipairs(l) do\n        if num > 0 then\n            table.insert(new_list,\
    \ num)\n        end\n    end\n    return new_list\nend", "    local result = {}\n\
    \    for _, element in ipairs(l) do\n        if element > 0 then\n           \
    \ table.insert(result, element)\n        end\n    end\n    return result\nend",
  "  return l:map(function(e)\n    if e > 0 then\n      return e\n    end\n  end):filter(function(e)\n\
    \    return not(e == nil)\n  end)\nend", "    local pos = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(pos, v)\n    \
    \    end\n    end\n    return pos\nend", "    local out = {}\n    for _, n in\
    \ ipairs(l) do\n        if n > 0 then\n            table.insert(out, n)\n    \
    \    end\n    end\n    return out\nend", "    local result = {}\n    for i, v\
    \ in ipairs(l) do\n        if v > 0 then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(r, v)\n \
    \       end\n    end\n    return r\nend", "    local ret = {}\n    for _,v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(ret, v)\n    \
    \    end\n    end\n    return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
