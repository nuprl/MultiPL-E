name: HumanEval_64_vowels_count
language: lua
results:
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputli7xij.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmputli7xij.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local i = 0\n  local n = 0\n  for j = 1, #s do\n    i = string.find(\"aeiou\"\
    , string.lower(s:sub(j, j)), i + 1)\n    if i then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpghyzczj_.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'i')\nstack traceback:\n\
    \t/tmp/tmpghyzczj_.lua:14: in local 'candidate'\n\t/tmp/tmpghyzczj_.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for vowel in string.gmatch(s, \"[aeiouy]\") do\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_hkngih.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmph_hkngih.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- FIXME\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2b8mls3.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmps2b8mls3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- We do not consider y at the beginning of a word to be a vowel\n    --\
    \ so we remove the first character if it is 'y'.\n    if s:sub(1, 1) == 'y' then\n\
    \        s = s:sub(2)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx_07z5qv.lua:29: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal n = 0\n\tfor i = 1, #s do\n\t\tif string.find(\"aeiou\", string.lower(s:sub(i,\
    \ i))) then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\tif string.find(\"aeiou\", string.lower(s:sub(-1,\
    \ -1))) and #s > 1 then\n\t\tn = n + 1\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6heeoxh.lua:26:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpk6heeoxh.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local c = 0\n  for i = 1, s:len() do\n    local l = s:sub(i, i)\n    if (l\
    \ == 'a' or l == 'e' or l == 'i' or l == 'o' or l == 'u' or (l == 'y' and i ==\
    \ s:len())) then\n      c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6umucxnr.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp6umucxnr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    --TODO: Implement\n    return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpbmb4iw.lua:18:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpnpbmb4iw.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for v in string.gmatch(s, '[aeiouy]') do\n        count\
    \ = count + 1\n    end\n    return count\nend\nassert(vowels_count(\"abcde\")\
    \ == 2)\nassert(vowels_count(\"ACEDY\") == 3)\nassert(vowels_count(\"\") == 0)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp26cviuhi.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp26cviuhi.lua:18: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   -- #s is a helper function that returns the number of characters in\n   --\
    \ a string.\n   return #s - (s:gsub(\"[aeiouAEIOU]\", \"\"):len())\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa5s1djo.lua:21:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwa5s1djo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local v = s:gsub(\"[^aeiou]\",\"\")\n  return #v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupj7mueb.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpupj7mueb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local num_vowels = 0\n  local vowels = \"aeiouy\"\n  for i = 1, #s do\n   \
    \ local c = s:sub(i, i)\n    if vowels:find(c, 1, true) then\n      num_vowels\
    \ = num_vowels + 1\n    end\n  end\n  return num_vowels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp183crma5.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp183crma5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      local char = s:sub(i, i)\n   \
    \   if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u'\
    \ then\n         count = count + 1\n      elseif i == #s and char == 'y' then\n\
    \         count = count + 1\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg70bv0ih.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpg70bv0ih.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for c in s:gmatch(\".\") do\n    if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' or c == 'y' then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0afh44e.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpy0afh44e.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:lower()\n  local count = 0\n  local vowels = \"aeiouy\"\n  for i = 1,\
    \ s:len() do\n    if vowels:find(s:sub(i, i)) then\n      count = count + 1\n\
    \    end\n  end\n  if s:sub(s:len(), s:len()) == \"y\" then\n    count = count\
    \ - 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtwrr6ia.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjtwrr6ia.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfzc4poq.lua:17:\
    \ expected: 2, actual: \"ae\"\nstack traceback:\n\t/tmp/tmpjfzc4poq.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \t-- Write your code here\n\t-- Hint: use string.match\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvcn_dpa.lua:18:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjvcn_dpa.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    s = string.lower(s)\n    for i = 1, string.len(s) do\n\
    \        if string.sub(s, i, i) == \"a\" or string.sub(s, i, i) == \"e\" or string.sub(s,\
    \ i, i) == \"i\" or string.sub(s, i, i) == \"o\" or string.sub(s, i, i) == \"\
    u\" then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy2v9zz2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwy2v9zz2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    s = s:lower()\n    return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxrgavmo.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkxrgavmo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbo8twlb.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpdbo8twlb.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcg5lxqk.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpqcg5lxqk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- YOUR CODE HERE\n    local s = s:lower()\n    local count = 0\n    local\
    \ vowels = \"aeiouy\"\n    for i = 1, #s do\n        if vowels:find(s:sub(i, i))\
    \ ~= nil then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5eut873.lua:29:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpw5eut873.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local n = 0\n  local vowels = \"aeiouy\"\n  for i = 1, #s do\n    local ch\
    \ = s:sub(i, i)\n    for j = 1, #vowels do\n      if ch == vowels:sub(j, j) then\n\
    \        n = n + 1\n        break\n      end\n    end\n  end\n  if #s >= 2 and\
    \ s:sub(-1) == \"y\" and s:sub(-2, -2) ~= \"a\" then\n    n = n - 1\n  end\n \
    \ return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe32m1o3h.lua:32:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpe32m1o3h.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, '[aeiouyAEIOUY]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzjg5uy4.lua:17:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmpdzjg5uy4.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal n = 0\n\tlocal l = string.len(s)\n\tfor c in string.gmatch(s, \"[AEIOUaeiou]\"\
    ) do\n\t\tn = n + 1\n\tend\n\tif string.sub(s, l, l) == \"y\" then\n\t\tn = n\
    \ + 1\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm37h94n.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmm37h94n.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- YOUR CODE HERE\n  local count = 0\n  for i = 1, string.len(s) do\n    if\
    \ string.sub(s, i, i) == \"a\" or string.sub(s, i, i) == \"e\" or string.sub(s,\
    \ i, i) == \"i\" or string.sub(s, i, i) == \"o\" or string.sub(s, i, i) == \"\
    u\" or string.sub(s, i, i) == \"y\" then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0g3ay6e3.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp0g3ay6e3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = 'aeiouy'\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif string.find(vowels,\
    \ string.lower(s:sub(i, i)), 1, true) then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjdp8f13.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjjdp8f13.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local last_char = string.sub(s, -1)\n    for char in\
    \ string.gmatch(s, \"[aeiouyAEIOUY]\") do\n        count = count + 1\n    end\n\
    \    if last_char == \"y\" or last_char == \"Y\" then\n        count = count +\
    \ 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hlci9ye.lua:27:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp_hlci9ye.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local num = 0\n  for i = 1, string.len(s) do\n    local c = string.sub(s, i,\
    \ i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n   \
    \    (c == 'y' and i == string.len(s)) then\n      num = num + 1\n    end\n  end\n\
    \  return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposrm97r5.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmposrm97r5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg12pbn3.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpcg12pbn3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    s = s:lower()\n    s = s:gsub(\"[^aeiouy]\", \"\")\n    local count = #s\n\
    \    if s:sub(-1) == \"y\" then\n        count = count - 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4objwd4m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4objwd4m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkoh7q9c.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbkoh7q9c.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1utp27c.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpd1utp27c.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local len = #s\n    local count = 0\n    for i = 1, len do\n        if s:sub(i,\
    \ i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o'\
    \ or s:sub(i, i) == 'u' then\n            count = count + 1\n        end\n   \
    \ end\n    if s:sub(len, len) == 'y' then\n        count = count + 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgun9mwn.lua:28:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpkgun9mwn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ then\n            count = count + 1\n        end\n    end\n    if s:sub(#s,\
    \ #s) == 'y' then\n        count = count + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8ew4u8f.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpc8ew4u8f.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local c = 0\n    local vowels = { a = true, e = true, i = true, o = true,\
    \ u = true, y = true }\n    for i = 1, #s do\n        local char = s:sub(i, i)\n\
    \        if vowels[char:lower()] then\n            c = c + 1\n        end\n  \
    \  end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj25l05f.lua:28:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvj25l05f.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local v = 0\n  for i = 1, #s do\n    if (s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u') then\n\
    \      v = v + 1\n    end\n  end\n  return v\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hz0nvi8.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp9hz0nvi8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  local c = s:sub(1, 1)\n  if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' then\n    count = count + 1\n  end\n  if string.len(s)\
    \ == 1 then\n    return count\n  end\n  local c = s:sub(string.len(s), string.len(s))\n\
    \  if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or c == 'y' then\n\
    \    count = count + 1\n  end\n  return count + vowels_count(s:sub(2, string.len(s)\
    \ - 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojqy9g_k.lua:30:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpojqy9g_k.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    for\
    \ i = 1, #s do\n        if s:sub(i, i) == 'y' and i == #s then\n            count\
    \ = count + 1\n        elseif table.indexof(vowels, s:sub(i, i)) then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a2ggfn4.lua:16:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp_a2ggfn4.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp_a2ggfn4.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   -- missing code\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply3jkfch.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmply3jkfch.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7l6itg99.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp7l6itg99.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local count = 0\n   local vowel = { a = true, e = true, i = true, o = true,\
    \ u = true, y = true }\n   local last = string.sub(s, -1)\n   for c in string.gmatch(s,\
    \ \".\") do\n      if vowel[c:lower()] then\n         count = count + 1\n    \
    \  end\n   end\n   if vowel[last:lower()] then\n      count = count + 1\n   end\n\
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsllc4ne.lua:28:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpmsllc4ne.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local result = 0\n  local dict = { [\"a\"] = true, [\"e\"] = true, [\"i\"]\
    \ = true, [\"o\"] = true, [\"u\"] = true, [\"y\"] = true }\n  for i = 1, #s do\n\
    \    if dict[s:sub(i, i)] then\n      result = result + 1\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqlr9dmz.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpoqlr9dmz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  s = s:lower()\n  if s:sub(-1, -1) == 'y' then\n    count\
    \ = count + 1\n  end\n  return count + s:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfpbnyhrn.lua:16:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpfpbnyhrn.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpfpbnyhrn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xsprg7v.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp6xsprg7v.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegiuf10f.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpegiuf10f.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for i=1,string.len(s) do\n    if (s:sub(i,i) == \"a\" or\
    \ s:sub(i,i) == \"e\" or s:sub(i,i) == \"i\" or s:sub(i,i) == \"o\" or s:sub(i,i)\
    \ == \"u\" or (s:sub(i,i) == \"y\" and i == string.len(s))) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv2xbchl.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpwv2xbchl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for c in s:gmatch\".\" do\n    if is_vowel(c) then\n   \
    \   count = count + 1\n    end\n  end\n  if s:match\"y$\" then\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppct31dtm.lua:13:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmppct31dtm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmppct31dtm.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- TODO: check if the input is a string\n  -- TODO: check if the string only\
    \ consists of characters from the\n  -- set of small and capital letters.\n  local\
    \ count = 0\n  -- TODO: use a for loop to iterate over the string s\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0llma07.lua:22:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpu0llma07.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1kajw1b.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpz1kajw1b.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if (s:sub(i, i) == 'a' or\
    \ s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i)\
    \ == 'u' or (s:sub(i, i) == 'y' and i == #s)) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39j0qym1.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp39j0qym1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  -- Start from the second character because the first character\n\
    \  -- should be 'y'\n  for i = 2, #s do\n    local char = s:sub(i, i)\n    if\
    \ char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n\
    \      count = count + 1\n    end\n  end\n  -- Check the first character\n  if\
    \ s:sub(1, 1) == 'y' then\n    count = count + 1\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1gs_zjl.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpz1gs_zjl.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal s = s:lower()\n\treturn s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3n69vg_.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpc3n69vg_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" }\n    local count\
    \ = 0\n    for letter in s:gmatch(\"%l\") do\n        for _, vowel in ipairs(vowels)\
    \ do\n            if letter == vowel then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i9h5g2a.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp0i9h5g2a.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- YOUR CODE HERE\n  local v_count = 0\n  for i=1,#s do\n    if (s:sub(i,i)\
    \ == \"a\" or s:sub(i,i) == \"e\" or s:sub(i,i) == \"i\" or s:sub(i,i) == \"o\"\
    \ or s:sub(i,i) == \"u\") then\n      v_count = v_count + 1\n    elseif (s:sub(i,i)\
    \ == \"y\" and i ~= #s) then\n      v_count = v_count + 1\n    end\n  end\n  return\
    \ v_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptudit6s0.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmptudit6s0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {a = 1, e = 1, i = 1, o = 1, u = 1, y = 1}\n    local v_count\
    \ = 0\n    for w in s:gmatch(\"%a\") do\n        if vowels[w:lower()] then\n \
    \           v_count = v_count + 1\n        end\n    end\n    return v_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgk9qigk0.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgk9qigk0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal s = string.lower(s)\n\treturn string.len(string.gsub(s, \"[aeiouy]\",\
    \ \"\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwsc1hwd.lua:18:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpzwsc1hwd.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls994svj.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpls994svj.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  assert(type(s) == \"string\")\n  local count = 0\n  for c in s:gmatch\".\"\
    \ do\n    if c:find(\"[aeiouy]\") then\n      count = count + 1\n    end\n  end\n\
    \  -- Check for 'y' at the end of the word\n  if s:sub(-1):find(\"[y]\") then\n\
    \    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn48s517b.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpn48s517b.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local t = {}\n  local n = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n\
    \    if t[c] == nil then\n      t[c] = 1\n      if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' or\n         (c == 'y' and i == #s) then\n     \
    \   n = n + 1\n      end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9za_eywr.lua:30:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp9za_eywr.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for c in s:gmatch(\"[aeiouy]\") do\n        count =\
    \ count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabuygnvc.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpabuygnvc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s:lower(), \"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwxp9xi6.lua:17:\
    \ expected: 2, actual: \"ae\"\nstack traceback:\n\t/tmp/tmplwxp9xi6.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local cnt = 0\n    for _,v in ipairs({'a', 'e', 'i', 'o', 'u'}) do\n    \
    \    if string.find(s, v) then\n            cnt = cnt + 1\n        end\n    end\n\
    \    if s:sub(-1) == 'y' then\n        cnt = cnt + 1\n    end\n    return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp624lv40t.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp624lv40t.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local v = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local c = 0\n  for i = 1,\
    \ #s do\n    if s:find(v[i]) or (s:find(\"y\") and i == #s) then\n      c = c\
    \ + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply3epdyf.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmply3epdyf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, '[^aeiouyAEIOUY]', ''):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljbb35ez.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpljbb35ez.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for c in s:gmatch(\"[aeiou]\") do\n    count = count + 1\n\
    \  end\n  if s:sub(-1) == \"y\" then\n    count = count + 1\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgldadl63.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgldadl63.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiouy\"\n    local count = 0\n    for _, letter in ipairs(s)\
    \ do\n        if (vowels:find(letter) ~= nil) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxrnc5l8.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpbxrnc5l8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local counter = 0\n    local vowels = {a = 1, e = 1, i = 1, o = 1, u = 1,\
    \ y = 1}\n    for letter in s:gmatch(\".\") do\n        if vowels[letter:lower()]\
    \ then\n            counter = counter + 1\n        end\n    end\n    return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponnw24v7.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmponnw24v7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return string.gsub(s, \"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzht2hnvp.lua:17:\
    \ expected: 2, actual: \"ae\"\nstack traceback:\n\t/tmp/tmpzht2hnvp.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tif #s == 0 then\n\t\treturn 0\n\tend\n\tif 'aeiouyAEIOUY' : match(s:sub(1,1))\
    \ then\n\t\treturn 1 + vowels_count(s:sub(2))\n\telse\n\t\treturn vowels_count(s:sub(2))\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9my6mgxm.lua:14: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local n = 0\n    for c in s:gmatch(\"[aeiouy]\") do\n        n = n + 1\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgu9bhs2.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbgu9bhs2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i,char in ipairs(s) do\n        if char == 'a' or\
    \ char == 'e' or char == 'i' or char == 'o' or char == 'u' or (char == 'y' and\
    \ i == #s) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ilqddfa.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp8ilqddfa.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ajyjx8j.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp1ajyjx8j.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- Copy the input string to avoid modifying the original\n    local str =\
    \ s:lower()\n    local count = 0\n    for i=1,string.len(str) do\n        if string.find(\"\
    aeiouy\", string.sub(str, i, i)) then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsdezujp.lua:28:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpcsdezujp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  -- The string s could be empty\n  if s == \"\" then\n  \
    \  return 0\n  end\n  -- We go through the string and check each character\n \
    \ for i = 1, string.len(s) do\n    -- If the character is a vowel, we add one\
    \ to the count\n    if string.sub(s, i, i) == \"a\" or string.sub(s, i, i) ==\
    \ \"e\" or string.sub(s, i, i) == \"i\" or string.sub(s, i, i) == \"o\" or string.sub(s,\
    \ i, i) == \"u\" or string.sub(s, i, i) == \"y\" then\n      count = count + 1\n\
    \    end\n  end\n  -- We also have to check if the last character is a y\n  if\
    \ string.sub(s, string.len(s), string.len(s)) == \"y\" then\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4sr6rer.lua:34:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp_4sr6rer.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local counter = 0\n    local prev_char\n    for char in s:gmatch(\"%a\")\
    \ do\n        if is_vowel(char) then\n            counter = counter + 1\n    \
    \    end\n        prev_char = char\n    end\n    if prev_char == 'y' then\n  \
    \      counter = counter + 1\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptuz1nyuv.lua:14:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmptuz1nyuv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmptuz1nyuv.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = \"aeiouy\"\n  local y_count = 0\n  local count = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \"y\" then\n      y_count\
    \ = y_count + 1\n    elseif vowels:find(c) then\n      count = count + 1\n   \
    \ end\n  end\n  if (y_count > 0) and (s:sub(-1) == \"y\") then\n    count = count\
    \ + y_count\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz2bmj5m.lua:32:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpkz2bmj5m.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return string.gsub(s, \"[AEIOUaeiou]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1lrzgo1.lua:17:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmpy1lrzgo1.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local s = string.lower(s)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local count = 0\n    for _, letter in ipairs(vowels) do\n        if string.find(s,\
    \ letter) then\n            count = count + 1\n        end\n    end\n    if string.sub(s,\
    \ #s) == 'y' then\n        count = count + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- TODO: fill in this function body\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n0ubs1m.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp8n0ubs1m.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiouy\"\n    local count = 0\n    for i = 1, #s do\n  \
    \      if s:find(s:sub(i, i), 1, true) == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfdxpxbm.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmfdxpxbm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  assert(type(s) == \"string\")\n  local count = 0\n  local vowels = \"aeiouy\"\
    \n  for v in string.gmatch(s, \".\") do\n    if string.find(vowels, v, 1, true)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw2sl5j6.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpuw2sl5j6.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local cnt = 0\n    for _, v in ipairs(s:gmatch(\"[aeiouy]*\")) do\n     \
    \   if v ~= \"\" then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- TODO: your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90g6u6hq.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp90g6u6hq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i\
    \ = 1, #s do\n        if s:sub(i, i) == 'y' and i == #s then\n            count\
    \ = count + 1\n        elseif table.count(vowels, s:sub(i, i)) > 0 then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa8hzejvj.lua:16:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpa8hzejvj.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpa8hzejvj.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local s = s:lower()\n  local count = 0\n  for i = 1, #s do\n    if s:sub(i,\
    \ i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o'\
    \ or s:sub(i, i) == 'u' then\n      count = count + 1\n    end\n  end\n  if s:sub(-1,\
    \ -1) == 'y' then\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return select(2, s:gsub(\"[aeiouy]\", \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ah54uxy.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3ah54uxy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local t = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1,\
    \ #s do\n        if (string.find(t, s[i]) and s[i] ~= 'y') or (s[i] == 'y' and\
    \ i == #s) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0qup7iq.lua:14:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpf0qup7iq.lua:14: in local 'candidate'\n\t/tmp/tmpf0qup7iq.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local c = 0\n    local v = \"aeiou\"\n    for i = 1, #s do\n        local\
    \ ch = s:sub(i, i)\n        if v:find(ch, 1, true) then\n            c = c + 1\n\
    \        end\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkq3rd0g.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpzkq3rd0g.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    if string.len(s) == 0 then\n        return 0\n    elseif string.len(s) ==\
    \ 1 then\n        if s == \"a\" or s == \"e\" or s == \"i\" or s == \"o\" or s\
    \ == \"u\" then\n            return 1\n        else\n            return 0\n  \
    \      end\n    else\n        if s:sub(1,1) == \"a\" or s:sub(1,1) == \"e\" or\
    \ s:sub(1,1) == \"i\" or s:sub(1,1) == \"o\" or s:sub(1,1) == \"u\" then\n   \
    \         return 1 + vowels_count(s:sub(2))\n        else\n            return\
    \ vowels_count(s:sub(2))\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplte7bury.lua:32:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmplte7bury.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tfor i=1,#s do\n\t\tlocal ch = s:sub(i,i)\n\t\tlocal v = string.find('aeiouy',\
    \ ch, 1, true)\n\t\tif v ~= nil then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend\nassert(vowels_count(\"abcde\") == 2)\nassert(vowels_count(\"\
    ACEDY\") == 3)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyb01erww.lua:22: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpyb01erww.lua:22: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7920kcvx.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp7920kcvx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local n = 0\n    for c in s:gmatch(\"[aeiouy]\") do\n        n = n + 1\n\
    \    end\n    if s:sub(-1) == \"y\" then\n        n = n + 1\n    end\n    return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinf2xckq.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpinf2xckq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx3ehiz2.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpsx3ehiz2.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tif type(s) ~= \"string\" then\n\t\terror \"string expected\"\n\tend\n\tlocal\
    \ total = 0\n\tfor v in string.gmatch(s, \"[aeiouy]\") do\n\t\ttotal = total +\
    \ 1\n\tend\n\treturn total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpledcxd4l.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpledcxd4l.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local lowercase = string.lower(s)\n    for i = 1, string.len(lowercase)\
    \ do\n        local c = string.sub(lowercase, i, i)\n        if c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            count = count +\
    \ 1\n        end\n    end\n    if string.sub(lowercase, string.len(lowercase),\
    \ string.len(lowercase)) == 'y' then\n        count = count + 1\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local str = string.lower(s)\n  local count = 0\n  for i = 1, #str do\n    if\
    \ string.match(str:sub(i, i), '[aeiouy]') then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqkl16f1.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsqkl16f1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = \"aeiou\"\n  local c = 0\n  for i = 1, s:len() do\n    if vowels:find(s:sub(i,\
    \ i), 1, true) then\n      c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhd2m68l.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmplhd2m68l.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local is_last_y = false\n    for i = 1, string.len(s)\
    \ do\n        local c = string.sub(s, i, i)\n        if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n            count = count + 1\n     \
    \   elseif c == 'y' then\n            if i == string.len(s) then\n           \
    \     count = count + 1\n            end\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgihqylya.lua:30:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgihqylya.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazy4yc2h.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpazy4yc2h.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = 0\n  s = s:lower()\n  for i = 1, string.len(s) do\n    local\
    \ c = string.sub(s, i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o'\
    \ or c == 'u' or\n      (c == 'y' and i == string.len(s)) then\n      vowels =\
    \ vowels + 1\n    end\n  end\n  return vowels\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabgzzxx3.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpabgzzxx3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local s = s:lower()\n    for i = 1, #s do\n        if\
    \ (s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i,\
    \ i) == 'o' or s:sub(i, i) == 'u') or\n           (s:sub(i, i) == 'y' and #s ==\
    \ i) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local stringlen = string.len(s)\n    local ys = 0\n\
    \    for i = 1, stringlen do\n        local c = string.sub(s, i, i)\n        if\
    \ c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            count\
    \ = count + 1\n        elseif c == 'y' then\n            if i == stringlen then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe67mn_2k.lua:31:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpe67mn_2k.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- Please replace the required line with the\n    -- appropriate code\n \
    \   local a, e, i, o, u, y = 0, 0, 0, 0, 0, 0\n    local v = 0\n    for k,v in\
    \ pairs(s) do\n        if v == 'a' then\n            a = a + 1\n        elseif\
    \ v == 'e' then\n            e = e + 1\n        elseif v == 'i' then\n       \
    \     i = i + 1\n        elseif v == 'o' then\n            o = o + 1\n       \
    \ elseif v == 'u' then\n            u = u + 1\n        elseif v == 'y' then\n\
    \            y = y + 1\n        end\n    end\n    local v = a + e + i + o + u\
    \ + y\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfeihz3lh.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpfeihz3lh.lua:15: in local 'candidate'\n\t/tmp/tmpfeihz3lh.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhqhgd_m.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpkhqhgd_m.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local s = s:lower()\n    for i = 1, #s do\n        if\
    \ s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i)\
    \ == 'o' or s:sub(i, i) == 'u' then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg4z1079.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpcg4z1079.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local i = 0\n  local c = 0\n  local last = \"\"\n  while true do\n    local\
    \ b, e = s:find(\"%a\", i)\n    if b then\n      if last == \"y\" then\n     \
    \   if \"aeiou\".find(s:sub(b, b)) then\n          c = c + 1\n        end\n  \
    \    elseif \"aeiou\".find(s:sub(b, b)) then\n        c = c + 1\n      end\n \
    \     last = s:sub(b, b)\n      i = e + 1\n    else\n      break\n    end\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5armto50.lua:18: 'then' expected near '.'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n      \
    \  if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n          \
    \ (c == 'y' and i == #s) then\n            n = n + 1\n        end\n    end\n \
    \   return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd2n5bo_.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpjd2n5bo_.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local count = 0\n  for\
    \ i = 1, #s do\n    local letter = s:sub(i, i)\n    if letter == \"y\" and i ==\
    \ #s then\n      count = count + 1\n    elseif hw.contains(vowels, letter) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljbcxuco.lua:17:\
    \ attempt to index a nil value (global 'hw')\nstack traceback:\n\t/tmp/tmpljbcxuco.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpljbcxuco.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q7fawll.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5q7fawll.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6htz1e38.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp6htz1e38.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ last = string.sub(s, string.len(s), string.len(s))\n    if last == 'y' then\n\
    \        table.insert(vowels, 'y')\n    end\n    for v in string.gmatch(s, \"\
    [aeiouy]\") do\n        count = count + 1\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgifr09rz.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgifr09rz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local s = s:lower()\n  local v, i = 0, 0\n  while i < #s do\n    local c =\
    \ s:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n      v = v + 1\n    end\n    i = i + 1\n  end\n  local c = s:sub(#s,\
    \ #s)\n  if c == 'y' then\n    v = v + 1\n  end\n  return v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegtc0srj.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpegtc0srj.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \terror(\"todo\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxh9ptnpb.lua:11:\
    \ todo\nstack traceback:\n\t/tmp/tmpxh9ptnpb.lua:11: in local 'candidate'\n\t\
    /tmp/tmpxh9ptnpb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- TODO: complete this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n4b7xu5.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp_n4b7xu5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = \"aeiouy\"\n  local count = 0\n  for i = 1, #s do\n    local\
    \ ch = s:sub(i, i)\n    for j = 1, #vowels do\n      if ch == vowels:sub(j, j)\
    \ then\n        count = count + 1\n        break\n      end\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w3zyj50.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp0w3zyj50.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = 0\n  for c in s:gmatch('.') do\n    if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' then\n      vowels = vowels + 1\n    elseif\
    \ c == 'y' and (s:find(c, -1) == #s) then\n      vowels = vowels + 1\n    end\n\
    \  end\n  return vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsarw1kme.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsarw1kme.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx32dej_v.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpx32dej_v.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- TODO: fix this\n    return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq7an5mi.lua:18:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpyq7an5mi.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, string.len(s) do\n        if s:sub(i, i)\
    \ == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or\
    \ s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == string.len(s)) then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wulixb0.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5wulixb0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local count = 0\n   for i = 1, #s do\n      local c = s:sub(i, i)\n      if\
    \ c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n         c == 'A'\
    \ or c == 'E' or c == 'I' or c == 'O' or c == 'U' or\n         (c == 'y' and i\
    \ == #s) or (c == 'Y' and i == #s) then\n         count = count + 1\n      end\n\
    \   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \treturn 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab77ajoq.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpab77ajoq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local s = s:lower()\n   local c = 0\n   for i = 1, #s do\n      if string.match(s,\
    \ '^a$') or string.match(s, '^e$') or string.match(s, '^i$') or string.match(s,\
    \ '^o$') or string.match(s, '^u$') then\n         c = c + 1\n      elseif string.match(s,\
    \ '^y$') and i == #s then\n         c = c + 1\n      end\n      s = string.sub(s,\
    \ 2)\n   end\n   return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65aaky50.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp65aaky50.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vcount = 0\n    -- your code here\n    return vcount\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdfw_m0e.lua:19:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpwdfw_m0e.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local function is_vowel(c)\n    if c == 'a' or c == 'e' or c == 'i' or c ==\
    \ 'o' or c == 'u' then\n      return true\n    elseif c == 'y' then\n      if\
    \ s:len() == 1 then\n        return true\n      else\n        if s:sub(2, 2) ==\
    \ 'a' or s:sub(2, 2) == 'e' or s:sub(2, 2) == 'i' or s:sub(2, 2) == 'o' or s:sub(2,\
    \ 2) == 'u' then\n          return false\n        else\n          return true\n\
    \        end\n      end\n    else\n      return false\n    end\n  end\n  local\
    \ vowel_count = 0\n  for c in s:gmatch\".\" do\n    if is_vowel(c) then\n    \
    \  vowel_count = vowel_count + 1\n    end\n  end\n  return vowel_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ffkklxm.lua:41:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp1ffkklxm.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s\
    \ do\n    if s:sub(i, i) == 'y' and i == #s then\n      count = count + 1\n  \
    \  elseif contain(vowels, s:sub(i, i)) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxq7xs765.lua:16:\
    \ attempt to call a nil value (global 'contain')\nstack traceback:\n\t/tmp/tmpxq7xs765.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpxq7xs765.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal c = 0\n\tfor i = 1, s:len() do\n\t\tlocal i = s:lower():sub(i, i)\n\t\t\
    if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' then\n\t\t\tc = c\
    \ + 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfk96_d7.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwfk96_d7.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5fh251t.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpv5fh251t.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local counter = 0\n    for\
    \ _, letter in ipairs(s) do\n        for _, vowel in ipairs(vowels) do\n     \
    \       if letter == vowel then\n                counter = counter + 1\n     \
    \       end\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_rf8h1y.lua:26:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp2_rf8h1y.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tfor i=1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tif vowels[c]\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tif s:sub(-1,-1) == 'y' then\n\
    \t\tcount = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpibjf29k8.lua:14:\
    \ attempt to index a nil value (global 'vowels')\nstack traceback:\n\t/tmp/tmpibjf29k8.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpibjf29k8.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan9kuqv2.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpan9kuqv2.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3k1f1z3f.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3k1f1z3f.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \t-- Do not modify this function\n\tif type(s) ~= \"string\" then\n\t\treturn\
    \ nil\n\tend\n\tlocal n = 0\n\tfor i = 1, #s do\n\t\tif vowels[s:sub(i, i)] then\n\
    \t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpauqwp7el.lua:17:\
    \ attempt to index a nil value (global 'vowels')\nstack traceback:\n\t/tmp/tmpauqwp7el.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpauqwp7el.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lu9kk6e.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp6lu9kk6e.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local l = string.lower(s)\n    return #l - #string.gsub(l, \"[aeiouy]\",\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_fyu6uc.lua:21:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpt_fyu6uc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local str = string.lower(s)\n  local count = 0\n  for i = 1, #str do\n    if\
    \ str:sub(i, i) == 'a' or str:sub(i, i) == 'e' or str:sub(i, i) == 'i' or str:sub(i,\
    \ i) == 'o' or str:sub(i, i) == 'u' then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64s1oogi.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp64s1oogi.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local c = 0\n  for i = 1, #s do\n    local c1 = s:sub(i, i)\n    if c1 == 'a'\
    \ or c1 == 'e' or c1 == 'i' or c1 == 'o' or c1 == 'u' or\n       c1 == 'A' or\
    \ c1 == 'E' or c1 == 'I' or c1 == 'O' or c1 == 'U' then\n      c = c + 1\n   \
    \ end\n  end\n  if s:sub(-1) == 'y' or s:sub(-1) == 'Y' then\n    c = c + 1\n\
    \  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local i, vowels = 0, 0\n    local n = string.len(s)\n    for i = 1, n do\n\
    \        if is_vowel(s:sub(i, i)) then\n            vowels = vowels + 1\n    \
    \    end\n    end\n    if vowels == 0 then\n        return 0\n    elseif is_vowel(s:sub(n,\
    \ n)) then\n        return vowels\n    else\n        return vowels - 1\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprucv_7lc.lua:14:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmprucv_7lc.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmprucv_7lc.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   count = 0\n   for i = 1, #s do\n      if s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or\
    \ (s:sub(i, i) == 'y' and i == #s) then\n         count = count + 1\n      end\n\
    \   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuebv6zfl.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpuebv6zfl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local c = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            c = c + 1\n        end\n\
    \    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hd6nfnc.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp2hd6nfnc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local pattern = \"([aeiouy])\"\n  local n = 0\n  for _ in s:gmatch(pattern)\
    \ do\n    n = n + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj043xm8z.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpj043xm8z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiou\"\n    local count = 0\n    for i = 1, string.len(s)\
    \ do\n        local char = string.sub(s, i, i)\n        if string.find(vowels,\
    \ char) then\n            count = count + 1\n        end\n    end\n    if (string.sub(s,\
    \ -1) == \"y\") then\n        count = count + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsyyxmix.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpcsyyxmix.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local l = s:lower()\n    if l:sub(-1) == 'y' then\n\
    \        count = count + 1\n    end\n    for c in l:gmatch(\"[aeiou]\") do\n \
    \       count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local c = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n            c = c + 1\n        end\n    end\n  \
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p7lydnk.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5p7lydnk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  assert(type(s) == \"string\")\n  return (#s:gsub(\"[aeiouyAEIOUY]\", \"\"))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnv7erps.lua:18:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpwnv7erps.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- TODO: add your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ld7xslt.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp2ld7xslt.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local vc = 0\n  local vowels = \"aeiou\"\n  for i=1,string.len(s) do\n    if\
    \ vowels:find(string.lower(s:sub(i,i))) then\n      vc = vc + 1\n    end\n  end\n\
    \  return vc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2ivnuz8.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpp2ivnuz8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   -- TODO: implement vowels_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmf3c7r87.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpmf3c7r87.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tfor c in s:gmatch(\".\") do\n\t\tif (c == \"a\" or c == \"\
    e\" or c == \"i\" or c == \"o\" or c == \"u\" or c == \"y\") then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxc6ts3a.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmprxc6ts3a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #s:gsub(\"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenvivd99.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpenvivd99.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- INSERT CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphm8ny2y8.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmphm8ny2y8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  local last_was_y = false\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' then\n      count = count + 1\n      last_was_y = false\n    elseif c ==\
    \ 'y' and not last_was_y then\n      count = count + 1\n      last_was_y = true\n\
    \    else\n      last_was_y = false\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_a70xwv.lua:32:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpe_a70xwv.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n    \
    \        count = count + 1\n        elseif c == 'y' and i == #s then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvsstxiv.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsvsstxiv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuvvt9rj.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmppuvvt9rj.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local t = {}\n    for i = 1, #s do\n        if is_vowel(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pewf28y.lua:14:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp0pewf28y.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp0pewf28y.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \tlocal vowels = string.gsub(s, \"[^aeiouy]\", \"\")\n\tif string.sub(vowels,\
    \ #vowels) == \"y\" then\n\t\tvowels = string.sub(vowels, 1, #vowels - 1)\n\t\
    end\n\treturn #vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmel2dt3.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpwmel2dt3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- It's best to avoid global variables.\n    -- Also, string library has\
    \ a function to iterate characters of a string.\n    local vowels = {a = true,\
    \ e = true, i = true, o = true, u = true, y = true}\n    local count = 0\n   \
    \ for letter in s:gmatch(\".\") do\n        if vowels[letter:lower()] then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_jd5qed.lua:29:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk_jd5qed.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local n = 0\n  local v = {a = true, e = true, i = true, o = true, u = true,\
    \ y = true}\n  local l = s:lower()\n  for i = 1, l:len() do\n    if v[l:sub(i,\
    \ i)] then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0twfkggj.lua:28:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0twfkggj.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i, c in ipairs(s) do\n        if c == 'a' or c ==\
    \ 'e' or c == 'i' or c == 'o' or c == 'u' or\n           (c == 'y' and i == #s)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_kaz80x.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpu_kaz80x.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local v = {}\n  for i = 1,#s do\n    if s:sub(i,i) == 'a' or s:sub(i,i) ==\
    \ 'e' or s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i) == 'u' or s:sub(i,i)\
    \ == 'y' then\n      table.insert(v,s:sub(i,i))\n    end\n  end\n  if v[#v] ==\
    \ 'y' then\n    return #v\n  else\n    return #v - 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ukjuf9q.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3ukjuf9q.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for c in s:gmatch('.') do\n    if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n      count = count + 1\n    end\n  end\n\
    \  if s:sub(-1) == 'y' then\n    count = count + 1\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsz35hyp1.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsz35hyp1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local s = s:lower()\n  local c = 0\n  for i=1,#s do\n    if string.find(\"\
    aeiouy\", s:sub(i,i)) then\n      c = c + 1\n    end\n  end\n  return c\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46ip6kht.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp46ip6kht.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- YOUR CODE HERE\n    -- return error(\"todo vowels_count\")\n    local\
    \ y = false\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n\
    \    for i = 1, string.len(s) do\n        if vowels[string.sub(s, i, i)] then\n\
    \            count = count + 1\n        end\n        if string.sub(s, i, i) ==\
    \ 'y' then\n            y = true\n        end\n    end\n    if y and count > 0\
    \ then\n        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpnuy5wo.lua:33:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmptpnuy5wo.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- put your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9fr67ro.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpl9fr67ro.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \   local pattern = \"a\"..\"e\"..\"i\"..\"o\"..\"u\"..\"y\"\n   local count =\
    \ 0\n   for i = 1, #s do\n      if string.find(pattern, string.lower(s:sub(i,i)))\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpev6plsov.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpev6plsov.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn62740_s.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpn62740_s.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  s = s:lower()\n  for i = 1, #s do\n    if s:sub(i, i) ==\
    \ 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i,\
    \ i) == 'u' then\n      count = count + 1\n    end\n  end\n  if s:sub(-1) == 'y'\
    \ then\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local c = 0\n    for _, ch in ipairs{ s:lower():gmatch(\"%a\") } do\n   \
    \     if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u' then\n\
    \            c = c + 1\n        end\n    end\n    if s:sub(-1) == 'y' then\n \
    \       c = c + 1\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr4xeups.lua:26:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpxr4xeups.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local n = 0\n    local t = {\n        ['a'] = true,\n        ['e'] = true,\n\
    \        ['i'] = true,\n        ['o'] = true,\n        ['u'] = true,\n       \
    \ ['y'] = true,\n    }\n    for i = 1, #s do\n        if t[s:sub(i, i)] then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nhzzb9j.lua:32:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp1nhzzb9j.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local ct = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   if is_vowel(c) then\n            ct = ct + 1\n        end\n    end\n    return\
    \ ct\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp019h9dj3.lua:14:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp019h9dj3.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp019h9dj3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- Write your code here\n    local count = 0\n    for i=1, #s do\n      \
    \  if s:sub(i,i) == 'a' or s:sub(i,i) == 'e' or s:sub(i,i) == 'i' or s:sub(i,i)\
    \ == 'o' or s:sub(i,i) == 'u' then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7js9m8c_.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7js9m8c_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:lower()\n  local n = 0\n  for c in s:gmatch(\".\") do\n    if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' or c == 'y' then\n      n =\
    \ n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfubh3m2.lua:27:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnfubh3m2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  --TODO: your code here\n  local vc = 0\n  for char in s:gmatch(\".\") do\n\
    \    if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char\
    \ == \"u\" or char == \"y\" then\n      vc = vc + 1\n    end\n  end\n  return\
    \ vc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3rej_nr.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmph3rej_nr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvua7oai.lua:17:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpmvua7oai.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \treturn #s:lower():gsub(\"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwk_fz_u7.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwk_fz_u7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return #(s:gsub(\"[^aeiouy]\", \"\"))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp552l34yp.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp552l34yp.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- TODO: Write your code here\n  local count = 0\n  for i=1, #s do\n    local\
    \ x = string.sub(s, i, i)\n    if x == 'a' or x == 'e' or x == 'i' or x == 'o'\
    \ or x == 'u' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit87o4wv.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpit87o4wv.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local cnt = 0\n  for i = 1, #s do\n    if s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n\
    \      cnt = cnt + 1\n    end\n  end\n  if s:sub(-1, -1) == 'y' then\n    cnt\
    \ = cnt + 1\n  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5c_kgmtg.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5c_kgmtg.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local\
    \ count = 0\n    local last = string.sub(s, -1)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0okm_nka.lua:27: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdibfo0z.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpxdibfo0z.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- Note: a string is a list of chars.\n    -- You can use len function to\
    \ get the length of a list,\n    -- and you can use square brackets to index a\
    \ specific element from a list.\n    -- Example:\n    -- >>> len {'a', 'b', 'c'}\n\
    \    -- 3\n    -- >>> {'a', 'b', 'c'}[2]\n    -- 'b'\n    -- >>> {'a', 'b', 'c'}[1]\n\
    \    -- 'a'\n    -- >>> {'a', 'b', 'c'}[3]\n    -- 'c'\n    -- >>> {'a', 'b',\
    \ 'c'}[4]\n    -- nil\n    -- >>> {'a', 'b', 'c'}[0]\n    -- nil\n    -- >>> len\
    \ {}\n    -- 0\n    -- >>> {}[1]\n    -- nil\n    -- You can also concatenate\
    \ two lists:\n    -- >>> {'a', 'b', 'c'} .. {'d', 'e', 'f'}\n    -- {'a', 'b',\
    \ 'c', 'd', 'e', 'f'}\n    -- >>> {'a', 'b', 'c'} .. {}\n    -- {'a', 'b', 'c'}\n\
    \    -- >>> {} .. {'a', 'b', 'c'}\n    -- {'a', 'b', 'c'}\n    -- >>> {} .. {}\n\
    \    -- {}\n    -- >>> {} .. nil\n    -- {}\n    -- >>> {'a', 'b', 'c'} .. nil\n\
    \    -- {'a', 'b', 'c'}\n    -- >>> nil .. {'a', 'b', 'c'}\n    -- {'a', 'b',\
    \ 'c'}\n    -- >>> nil .. nil\n    -- {}\n    -- >>> 'Hello ' .. 'world!'\n  \
    \  -- 'Hello world!'\n    -- You can get the last element of a list by indexing\
    \ a length of the list\n    -- minus one.\n    -- >>> {'a', 'b', 'c'}[len {'a',\
    \ 'b', 'c'}]\n    -- 'c'\n    -- Note\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqnriwe81.lua:68: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiouy\"\n    local count = 0\n    for i = 1, string.len(s)\
    \ do\n        local char = string.sub(s, i, i)\n        if string.find(vowels,\
    \ char) ~= nil then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvphorf74.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpvphorf74.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- BEGIN SOLUTION\n    local count = 0\n    for letter in s:gmatch(\".\"\
    ) do\n        if string.find(\"aeiouy\", letter, 1, true) ~= nil then\n      \
    \      count = count + 1\n        end\n    end\n    return count\n    -- END SOLUTION\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdda33zc.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpmdda33zc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local cnt = 0\n    local vowels = {a = true, e = true, i = true, o = true,\
    \ u = true,\n        A = true, E = true, I = true, O = true, U = true}\n    for\
    \ i = 1, #s do\n        if vowels[s:sub(i, i)] then\n            cnt = cnt + 1\n\
    \        end\n    end\n    if s:sub(-1) == 'y' then\n        cnt = cnt + 1\n \
    \   end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x4vpnif.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1x4vpnif.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local n = 0\n  for c in s:gmatch\".\" do\n    if c:lower() == \"a\" or c:lower()\
    \ == \"e\" or c:lower() == \"i\" or c:lower() == \"o\" or c:lower() == \"u\" then\n\
    \      n = n + 1\n    end\n  end\n  if s:sub(-1, -1):lower() == \"y\" then\n \
    \   n = n + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- TODO: write your code here\n  --[[\n  local vowel_count = 0\n  for i = 1,\
    \ #s do\n    local char = s:sub(i, i)\n    if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u' then\n      vowel_count = vowel_count +\
    \ 1\n    end\n  end\n  if s:sub(-1, -1) == 'y' then\n    vowel_count = vowel_count\
    \ + 1\n  end\n  return vowel_count\n  --]]\n  local vowel_count = 0\n  for i =\
    \ 1, #s do\n    local char = s:sub(i, i)\n    if char == 'a' or char == 'e' or\
    \ char == 'i' or char == 'o' or char == 'u' or (char == 'y' and i == #s) then\n\
    \      vowel_count = vowel_count + 1\n    end\n  end\n  return vowel_count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t3mg6ii.lua:39:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp6t3mg6ii.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local i = 0\n    local vowel_count = 0\n    while (i < #s) do\n        if\
    \ s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i)\
    \ == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == #s - 1) then\n\
    \            vowel_count = vowel_count + 1\n        end\n        i = i + 1\n \
    \   end\n    return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39l2r7pd.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp39l2r7pd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqik6k0y.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpgqik6k0y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  return #s:gsub(\"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bgpdbm9.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp6bgpdbm9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  -- Keep track of the count of vowels found so far.\n  local n = 0\n  -- Need\
    \ to loop over all the letters in s, from left to right.\n  for i = 1, string.len(s)\
    \ do\n    -- We will treat all letters as lower case.\n    local c = string.lower(string.sub(s,\
    \ i, i))\n    -- Check if c is a vowel.\n    if c == 'a' or c == 'e' or c == 'i'\
    \ or c == 'o' or c == 'u' then\n      -- If so, increment the vowel count.\n \
    \     n = n + 1\n    end\n  end\n  -- Return the final vowel count.\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9uv4slh.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm9uv4slh.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local s = string.lower(s)\n    for i = 1, string.len(s)\
    \ do\n        if string.sub(s, i, i) == \"a\" or string.sub(s, i, i) == \"e\"\
    \ or string.sub(s, i, i) == \"i\" or string.sub(s, i, i) == \"o\" or string.sub(s,\
    \ i, i) == \"u\" then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4dr92cl.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg4dr92cl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    count = 0\n    vowels = 'aeiouy'\n    for i = 1, #s do\n        if vowels:find(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsff4v0i.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmplsff4v0i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local vowel_at_end = false\n    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    for i = 1, #s do\n        if (vowel_at_end and s[i]\
    \ == 'y') then\n            count = count + 1\n            vowel_at_end = false\n\
    \        elseif (#vowels[s[i]] > 0) then\n            count = count + 1\n    \
    \        vowel_at_end = true\n        else\n            vowel_at_end = false\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ffo5vct.lua:18:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmp_ffo5vct.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp_ffo5vct.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i\
    \ = 1, string.len(s) do\n        local c = string.sub(s, i, i)\n        if c ==\
    \ 'y' and i == string.len(s) then\n            count = count + 1\n        else\n\
    \            for i, v in ipairs(vowels) do\n                if c == v then\n \
    \                   count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f4wcich.lua:32:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp_f4wcich.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    return string.len(string.gsub(s, \"[^aeiouy]\", \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pipwokr.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp0pipwokr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- TODO: Complete this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8l8ho0h.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmps8l8ho0h.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \    -- build a lookup table to test for vowels\n    local is_vowel = {a=true,\
    \ e=true, i=true, o=true, u=true, y=true}\n    local count = 0\n    for i=1,#s\
    \ do\n        local c = s:sub(i,i)\n        if is_vowel[c:lower()] then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbimrjztd.lua:29:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbimrjztd.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  s = s:lower()\n  local c = 0\n  for i = 1, #s do\n    if 'aeiou'[s:sub(i, i)]\
    \ then\n      c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdezdyck4.lua:14: 'then' expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count(\"\
    abcde\")\n-- 2\n-- >>> vowels_count(\"ACEDY\")\n-- 3\nlocal function vowels_count(s)\n\
    \  local count = 0\n  local vowels = {\n    ['a'] = true,\n    ['e'] = true,\n\
    \    ['i'] = true,\n    ['o'] = true,\n    ['u'] = true,\n    ['y'] = true\n \
    \ }\n  local length = string.len(s)\n  for i = 1, length do\n    local char =\
    \ string.sub(s, i, i)\n    if (vowels[char]) then\n      count = count + 1\n \
    \   end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5wrfae6.lua:34:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpr5wrfae6.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
