name: HumanEval_34_unique
language: lua
results:
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  if (#l\
    \ == 0) then return l end\n  table.sort(l)\n  local unique, idx = {}, 1\n  unique[idx]\
    \ = l[1]\n  for i=2,#l do\n    if (l[i] ~= unique[idx]) then\n      idx = idx\
    \ + 1\n      unique[idx] = l[i]\n    end\n  end\n  return unique\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ ret = {}\n\tfor _,v in ipairs(l) do\n\t\tif not table.contains(ret, v) then\n\
    \t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17t128su.lua:7:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp17t128su.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp17t128su.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0cr4ske.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpn0cr4ske.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn0cr4ske.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    return\
    \ keys(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyt25lxcy.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpyt25lxcy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyt25lxcy.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  for k, v in pairs(l) do\n    if not res[v] then\n      res[v] =\
    \ v\n    end\n  end\n  local sort_order = {}\n  for k, v in pairs(res) do\n  \
    \  table.insert(sort_order, v)\n  end\n  table.sort(sort_order)\n  return sort_order\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not isInList(u, v) then\n \
    \           u[#u + 1] = v\n        end\n    end\n    return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgi2krvou.lua:7:\
    \ attempt to call a nil value (global 'isInList')\nstack traceback:\n\t/tmp/tmpgi2krvou.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgi2krvou.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, e in ipairs(l) do\n    r[e] = true\n  end\n  local u = {}\n\
    \  for k, _ in pairs(r) do\n    u[#u + 1] = k\n  end\n  table.sort(u)\n  return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ newl = {}\n    local i = 1\n    for _, v in pairs(l) do\n        if not newl[v]\
    \ then\n            newl[i] = v\n            i = i + 1\n        end\n    end\n\
    \    table.sort(newl)\n    return newl\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy11jdhim.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 3, 5, 5, 9, 123}\nstack traceback:\n\
    \t/tmp/tmpy11jdhim.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for i = 1, #l do\n    if not is_in(l[i], u) then\n      u[#u + 1]\
    \ = l[i]\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf3o45myh.lua:7:\
    \ attempt to call a nil value (global 'is_in')\nstack traceback:\n\t/tmp/tmpf3o45myh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf3o45myh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            l[#l + 1] = v\n        end\n    end\n    table.sort(l)\n\
    \    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4t9b7u2e.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 0, 2, 2, 3, 3, 3, 3, 5, 5, 5, 9,\
    \ 9, 123, 123}\nstack traceback:\n\t/tmp/tmp4t9b7u2e.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\ttable.sort(l)\n\
    \tlocal i = 1\n\twhile i < #l do\n\t\tif l[i] == l[i+1] then\n\t\t\ttable.remove(l,\
    \ i)\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _,v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ t = {}\n    for k,_ in pairs(s) do\n        table.insert(t, k)\n    end\n  \
    \  table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    if\
    \ not l then return end\n    local ret = {}\n    for _, v in ipairs(l) do\n  \
    \      if not find(ret, v) then\n            table.insert(ret, v)\n        end\n\
    \    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx5101n1q.lua:8:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmpx5101n1q.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpx5101n1q.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  if not\
    \ l then return {} end\n  if #l == 0 then return {} end\n  local uniq = {}\n \
    \ for e in all(l) do uniq[e] = true end\n  local uniq_l = {}\n  for k, _ in pairs(uniq)\
    \ do\n    uniq_l[#uniq_l + 1] = k\n  end\n  return sort(uniq_l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1a9t9m3.lua:8:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmpt1a9t9m3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpt1a9t9m3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  for i = 1, #l do\n    if not vim.tbl_contains(res, l[i]) then\n\
    \      res[#res + 1] = l[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkasmkbf.lua:7:\
    \ attempt to index a nil value (global 'vim')\nstack traceback:\n\t/tmp/tmpfkasmkbf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfkasmkbf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _,v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for v in pairs(t) do\n    table.insert(r, v)\n  end\n  table.sort(r)\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ tab = {}\n    for _, v in ipairs(l) do\n        tab[v] = true\n    end\n   \
    \ local i = 0\n    local result = {}\n    for k, _ in pairs(tab) do\n        i\
    \ = i + 1\n        result[i] = k\n    end\n    table.sort(result)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ tab = {}\n    for _, v in ipairs(l) do\n        if not tab[v] then\n       \
    \     tab[v] = true\n            coroutine.yield(v)\n        end\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ yield from outside a coroutine\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ hash = {}\n    local result = {}\n    for _,v in ipairs(l) do\n        if (not\
    \ hash[v]) then\n            result[#result+1] = v\n            hash[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpieaj9iuy.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpieaj9iuy.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(u) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        res[v] = true\n    end\n   \
    \ return utils.map(table.keys(res), tonumber)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq24gtd2g.lua:9:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpq24gtd2g.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpq24gtd2g.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ keys = {}\n  local unique_keys = {}\n  local n = 0\n  for _, item in ipairs(l)\
    \ do\n    if not keys[item] then\n      n = n + 1\n      unique_keys[n] = item\n\
    \      keys[item] = true\n    end\n  end\n  return unique_keys\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3dmm8sv.lua:21:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpv3dmm8sv.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, e in ipairs(l) do\n    if t[e] == nil then\n      t[e] = true\n\
    \      table.insert(l, e)\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoz66csjd.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123, 5, 3,\
    \ 2, 9, 0, 123}\nstack traceback:\n\t/tmp/tmpoz66csjd.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    if not in(v, u) then\n      u[#u + 1]\
    \ = v\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa24b5dxl.lua:7: unexpected symbol near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ result = {}\n\tfor _, v in ipairs(l) do\n\t\tif not table.member(result, v)\
    \ then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47wxpubh.lua:7:\
    \ attempt to call a nil value (field 'member')\nstack traceback:\n\t/tmp/tmp47wxpubh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp47wxpubh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ list = {}\n    local keys = {}\n    for _, v in ipairs(l) do\n        if keys[v]\
    \ == nil then\n            keys[v] = true\n            table.insert(list, v)\n\
    \        end\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqrl5ds8.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpxqrl5ds8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ n = #l\n    if n == 0 then\n        return l\n    end\n    table.sort(l)\n \
    \   local j = 1\n    for i = 2, n do\n        if l[i] ~= l[j] then\n         \
    \   j = j + 1\n            l[j] = l[i]\n        end\n    end\n    return {table.unpack(l,\
    \ 1, j)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ hash = {}\n\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not hash[v]\
    \ then\n\t\t\tres[#res+1] = v\n\t\t\thash[v] = true\n\t\tend\n\tend\n\treturn\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklqc3v2a.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpklqc3v2a.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ keys = {}\n  local uniqueList = {}\n  for i = 1, #l do\n    local key = l[i]\n\
    \    if (keys[key] == nil) then\n      keys[key] = 1\n      uniqueList[#uniqueList\
    \ + 1] = key\n    end\n  end\n  table.sort(uniqueList)\n  return uniqueList\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local ret = {}\n\
    \  for k, _ in pairs(u) do\n    table.insert(ret, k)\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    if\
    \ not l then return {} end\n    local r = {}\n    local f = function(x) r[x] =\
    \ 1 end\n    for _,v in ipairs(l) do f(v) end\n    table.sort(r)\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zhzzkes.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=1, 2=1, 3=1, 5=1, 9=1, 123=1}\nstack\
    \ traceback:\n\t/tmp/tmp4zhzzkes.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ keys = {}\n  local t = {}\n  for v in all(l) do\n    if not keys[v] then\n \
    \     t[#t+1] = v\n      keys[v] = true\n    end\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsl6cerfz.lua:7:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmpsl6cerfz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsl6cerfz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ result = {}\n    for k, _ in pairs(s) do\n        table.insert(result, k)\n\
    \    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tif type(l)\
    \ ~= \"table\" then\n\t\terror(\"bad argument #1 to 'unique' (table expected,\
    \ got \" .. type(l) .. \")\", 2)\n\tend\n\t\n\tlocal r = {}\n\tfor _, e in ipairs(l)\
    \ do\n\t\tif not contains(r, e) then\n\t\t\ttable.insert(r, e)\n\t\tend\n\tend\n\
    \t\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyx_4pln0.lua:11:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpyx_4pln0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpyx_4pln0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(result, v)\n            seen[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w53dykf.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp2w53dykf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    if not u[v] then u[v] = true end\n \
    \ end\n  local r = {}\n  for k, v in pairs(u) do r[#r+1] = k end\n  table.sort(r)\n\
    \  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not res[v] then\n       \
    \     res[v] = true\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgazg5lf9.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpgazg5lf9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l) do\n\t\tif t[v] == nil then\n\t\t\tt[v] = true\n\
    \t\tend\n\tend\n\tlocal r = {}\n\tfor k, _ in pairs(t) do\n\t\ttable.insert(r,\
    \ k)\n\tend\n\ttable.sort(r)\n\treturn r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\treturn\
    \ sort(l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmper75gmml.lua:5:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmper75gmml.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmper75gmml.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for i, v in ipairs(l) do\n        t[v] = v\n    end\n    return\
    \ keys(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55g3ay6x.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmp55g3ay6x.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp55g3ay6x.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for i, v in ipairs(l) do\n    r[#r + 1] = v\n  end\n  table.sort(r)\n\
    \  local i = 1\n  while i < #r do\n    if r[i] == r[i + 1] then\n      table.remove(r,\
    \ i)\n    else\n      i = i + 1\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ set = {}\n    for _, v in ipairs(l) do\n        set[v] = true\n    end\n   \
    \ local r = {}\n    for v in pairs(set) do\n        table.insert(r, v)\n    end\n\
    \    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for v in pairs(s) do\n        table.insert(r, v)\n    end\n    table.sort(r)\n\
    \    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ out = {}\n\tlocal keys = {}\n\tfor _, el in ipairs(l) do\n\t\tif not keys[el]\
    \ then\n\t\t\ttable.insert(out, el)\n\t\t\tkeys[el] = true\n\t\tend\n\tend\n\t\
    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp886_i8q6.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp886_i8q6.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local i, v\n    local r = {}\n    for i, v in ipairs(l) do\n\
    \        if not seen[v] then\n            r[#r + 1] = v\n            seen[v] =\
    \ true\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rpg_e9z.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp_rpg_e9z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    --\
    \ TODO: Un-uglify this mess\n    local r = {}\n    for _, e in ipairs(l) do\n\
    \        if not contains(r, e) then\n            table.insert(r, e)\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7pqg0ny9.lua:8:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp7pqg0ny9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7pqg0ny9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  local index = {}\n  for _, v in ipairs(l) do\n    if not index[v]\
    \ then\n      res[#res + 1] = v\n      index[v] = true\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyp3x0e9q.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpyp3x0e9q.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ keys = {}\n  local list = {}\n  for _, e in ipairs(l) do\n    if (not keys[e])\
    \ then\n      keys[e] = true\n      table.insert(list, e)\n    end\n  end\n  return\
    \ list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p7a6ptx.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5p7a6ptx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = v\n  end\n  local i = 0\n  local\
    \ r = {}\n  for _, v in pairs(t) do\n    i = i + 1\n    r[i] = v\n  end\n  table.sort(r)\n\
    \  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local pos = 1\n    local out = {}\n    for i, v in ipairs(l)\
    \ do\n        if seen[v] == nil then\n            seen[v] = true\n           \
    \ out[pos] = v\n            pos = pos + 1\n        end\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyru4e4z.lua:21:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpnyru4e4z.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  if type(l)\
    \ ~= 'table' then\n    error('Expected table, got ' .. type(l))\n  end\n  local\
    \ t = {}\n  for k, v in pairs(l) do\n    t[k] = v\n  end\n  return sort(t)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzmm4i2el.lua:12:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpzmm4i2el.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzmm4i2el.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ unique_l = {}\n    for _, e in ipairs(l) do\n        if not list.member(unique_l,\
    \ e) then\n            unique_l[#unique_l + 1] = e\n        end\n    end\n   \
    \ return unique_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1aloz33.lua:7:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpv1aloz33.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpv1aloz33.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ exists = {}\n    local t = {}\n    for _,v in ipairs(l) do\n        if not exists[v]\
    \ then\n            table.insert(t, v)\n            exists[v] = true\n       \
    \ end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3cn_3hc.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpj3cn_3hc.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _,v in ipairs(l) do\n        r[v] = true\n    end\n    local\
    \ rl = {}\n    for k,_ in pairs(r) do\n        table.insert(rl, k)\n    end\n\
    \    table.sort(rl)\n    return rl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal res = {}\n\
    \tfor k, _ in pairs(t) do\n\t\ttable.insert(res, k)\n\tend\n\ttable.sort(res)\n\
    \treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local l = {}\n\
    \  for k, _ in pairs(t) do\n    l[#l + 1] = k\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpriptyh44.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 9, 2, 3, 5, 123}\nstack traceback:\n\
    \t/tmp/tmpriptyh44.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ list = {}\n  for i = 1, #l do\n    list[l[i]] = true\n  end\n  local unique_list\
    \ = {}\n  for i in pairs(list) do\n    unique_list[#unique_list + 1] = i\n  end\n\
    \  sort(unique_list)\n  return unique_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07jfs4jh.lua:13:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp07jfs4jh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp07jfs4jh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not table.contains(res, v) then\n\
    \      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl5xm0ci5.lua:7:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpl5xm0ci5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpl5xm0ci5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  table.sort(l)\n\
    \  for i = #l, 1, -1 do\n    if l[i - 1] == l[i] then\n      table.remove(l, i)\n\
    \    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjm0doh8.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpdjm0doh8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ m = {}\n  for _, v in ipairs(l) do\n    m[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(m) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  local values = {}\n  for _, value in ipairs(l) do\n    if not values[value]\
    \ then\n      values[value] = true\n      u[#u + 1] = value\n    end\n  end\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78cgiom5.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp78cgiom5.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, e in ipairs(l) do\n        if not in_list(res, e) then\n\
    \            table.insert(res, e)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wfg22ox.lua:7:\
    \ attempt to call a nil value (global 'in_list')\nstack traceback:\n\t/tmp/tmp4wfg22ox.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4wfg22ox.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tif not\
    \ l then return {} end\n\tlocal ret = {}\n\tfor _, v in ipairs(l) do\n\t\tif not\
    \ has_value(ret, v) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppu6d6wga.lua:8:\
    \ attempt to call a nil value (global 'has_value')\nstack traceback:\n\t/tmp/tmppu6d6wga.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmppu6d6wga.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, x in ipairs(l) do\n    if not u[x] then\n      u[x] = true\n\
    \      table.insert(u, x)\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ulkjjkg.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp1ulkjjkg.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    return\
    \ empty(l) and l or\n        (function (...)\n            local uniq = {}\n  \
    \          for _, val in ipairs(l) do\n                uniq[val] = true\n    \
    \        end\n            return {(function ()\n                local _accum_0\
    \ = {}\n                local _len_0 = 1\n                for k in pairs(uniq)\
    \ do\n                    _accum_0[_len_0] = k\n                    _len_0 = _len_0\
    \ + 1\n                end\n                return _accum_0\n            end)()}\n\
    \        end)(...)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg0vinm5o.lua:20: cannot use '...' outside a vararg function\
    \ near '...'\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ p = {}\n    for _, v in ipairs(l) do\n        p[v] = true\n    end\n    local\
    \ ret = {}\n    for k, _ in pairs(p) do\n        table.insert(ret, k)\n    end\n\
    \    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  return keys(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp20ev7m3q.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmp20ev7m3q.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp20ev7m3q.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ ret = {}\n  for _, v in ipairs(l) do\n    if index(ret, v) == nil then\n   \
    \   table.insert(ret, v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpds8i67ta.lua:7:\
    \ attempt to call a nil value (global 'index')\nstack traceback:\n\t/tmp/tmpds8i67ta.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpds8i67ta.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ seen = {}\n\tlocal out = {}\n\tfor v in all(l) do\n\t\tif not seen[v] then\n\
    \t\t\tout(v)\n\t\t\tseen[v] = true\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmxeothnk.lua:7:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmpmxeothnk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmxeothnk.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, e in ipairs(l) do\n        t[e] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _,v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k,_ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ keys = {}\n\tlocal list = {}\n\tfor _, v in ipairs(l) do\n\t\tif (not keys[v])\
    \ then\n\t\t\tkeys[v] = true\n\t\t\ttable.insert(list, v)\n\t\tend\n\tend\n\t\
    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rnmo1l3.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp3rnmo1l3.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not res[v] then\n\t\t\tres[v] =\
    \ true\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6ejnv1l.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpv6ejnv1l.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        r[v] = v\n    end\n    local n\
    \ = {}\n    for _, v in pairs(r) do\n        table.insert(n, v)\n    end\n   \
    \ table.sort(n)\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    local t = {}\n    for _,v in ipairs(l) do\n        if not t[v] then\n\
    \            t[v] = true\n            r[#r+1] = v\n        end\n    end\n    table.sort(r)\n\
    \    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ set = {}\n  for i = 1, #l do\n    set[l[i]] = true\n  end\n  local list = {}\n\
    \  for k in pairs(set) do\n    list[#list + 1] = k\n  end\n  table.sort(list)\n\
    \  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ ret = {}\n  for i, v in ipairs(l) do\n    if ret[v] == nil then\n      ret[v]\
    \ = v\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbl8xeouy.lua:17:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=0, 2=2, 3=3, 5=5, 9=9, 123=123}\n\
    stack traceback:\n\t/tmp/tmpbl8xeouy.lua:17: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ k = {}\n  local result = {}\n  for _,v in ipairs(l) do\n    if not k[v] then\n\
    \      table.insert(result, v)\n      k[v] = true\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfaifo_i5.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpfaifo_i5.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    --\
    \ Create a new array\n    local res = {}\n    -- Create a table to mark element\
    \ as seen\n    local seen = {}\n    -- Insert all unique element from array\n\
    \    for _, v in ipairs(l) do\n        if not seen[v] then\n            table.insert(res,\
    \ v)\n            seen[v] = true\n        end\n    end\n    -- Sort array before\
    \ returning it\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            seen[v] = true\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xvbmsrh.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp9xvbmsrh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  local i = 1\n  for _, v in pairs(l) do\n    if not r[v] then\n   \
    \   r[i] = v\n      i = i + 1\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfldy6p3i.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpfldy6p3i.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for i, v in ipairs(l) do\n        if not lookup(u, v) then\n   \
    \         table.insert(u, v)\n        end\n    end\n    return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd4qm1tzk.lua:7:\
    \ attempt to call a nil value (global 'lookup')\nstack traceback:\n\t/tmp/tmpd4qm1tzk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd4qm1tzk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tlocal u = {}\n\tfor i, v in ipairs(l) do\n\t\tif not u[v] then\n\t\
    \t\ttable.insert(r, v)\n\t\t\tu[v] = true\n\t\tend\n\tend\n\treturn r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_m87dou.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpq_m87dou.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ seen = {}\n\tfor _, v in ipairs(l) do\n\t\tif not seen[v] then\n\t\t\ttable.insert(seen,\
    \ v)\n\t\tend\n\t\tseen[v] = true\n\tend\n\treturn seen\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_hms1uk.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, true, true, 9, true, 0,\
    \ 123, 9=true, 123=true}\nstack traceback:\n\t/tmp/tmph_hms1uk.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ ret = {}\n    for _, val in ipairs(l) do\n        if not in(val, ret) then\n\
    \            table.insert(ret, val)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp621u7ka9.lua:7: unexpected symbol near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not contains(u, v) then\n \
    \           table.insert(u, v)\n        end\n    end\n    return u\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphd_6t4dv.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmphd_6t4dv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphd_6t4dv.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, e in ipairs(l) do\n    if not is_value_in_list(e, r) then\n\
    \      table.insert(r, e)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfenpj3iw.lua:7:\
    \ attempt to call a nil value (global 'is_value_in_list')\nstack traceback:\n\t\
    /tmp/tmpfenpj3iw.lua:7: in local 'candidate'\n\t/tmp/tmpfenpj3iw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    if\
    \ type(l) ~= \"table\" then\n        error(\"Expected a table argument\", 2)\n\
    \    end\n    local l2 = {}\n    for _, v in ipairs(l) do\n        l2[v] = true\n\
    \    end\n    local i = 0\n    return function()\n        while true do\n    \
    \        i = i + 1\n            if l2[l[i]] then\n                return l[i]\n\
    \            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphaj8n2c9.lua:26:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: function: 0x1de20c0\nstack traceback:\n\
    \t/tmp/tmphaj8n2c9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tfor _,v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\tr[v] = true\n\
    \t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawrhm8mo.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpawrhm8mo.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ set = {}\n    for i, v in ipairs(l) do\n        set[v] = true\n    end\n   \
    \ local rv = {}\n    for k, _ in pairs(set) do\n        table.insert(rv, k)\n\
    \    end\n    table.sort(rv)\n    return rv\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\treturn\
    \ Object.keys(Object.merge({}, l))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2jw9q4x.lua:5:\
    \ attempt to index a nil value (global 'Object')\nstack traceback:\n\t/tmp/tmpi2jw9q4x.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpi2jw9q4x.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    if #u == 0 or u[#u] ~= v then\n    \
    \  u[#u + 1] = v\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g2wwfpo.lua:17:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp7g2wwfpo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    if\
    \ type(l) ~= \"table\" then\n        return {}\n    end\n    local u = {}\n  \
    \  for _, v in ipairs(l) do\n        if not util.contains(u, v) then\n       \
    \     u[#u + 1] = v\n        end\n    end\n    return u\nend\nutil.unique = unique\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp3zfn1no.lua:16: attempt to index a nil value (global 'util')\n\
    stack traceback:\n\t/tmp/tmpp3zfn1no.lua:16: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(result, v)\n            seen[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5n7k_b7.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpg5n7k_b7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not res[v] then\n      res[v] =\
    \ true\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqpd76yt.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpyqpd76yt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, item in ipairs(l) do\n    if not seen[item]\
    \ then\n      seen[item] = true\n      table.insert(result, item)\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gab8qyg.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5gab8qyg.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  assert(type(l)\
    \ == \"table\", \"Expected 'table', got \" .. type(l))\n  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    t[v] = true\n  end\n  local res = {}\n  for k, _ in\
    \ pairs(t) do\n    table.insert(res, k)\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    return\
    \ sort(distinct(l))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpasga94lo.lua:5:\
    \ attempt to call a nil value (global 'distinct')\nstack traceback:\n\t/tmp/tmpasga94lo.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpasga94lo.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i, v in ipairs(l) do\n    if not seen[v]\
    \ then\n      table.insert(out, v)\n      seen[v] = true\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuadgocww.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpuadgocww.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tfor _, x in ipairs(l) do\n\t\tif not is_in(x, r) then\n\t\t\ttable.insert(r,\
    \ x)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbrchblcz.lua:7:\
    \ attempt to call a nil value (global 'is_in')\nstack traceback:\n\t/tmp/tmpbrchblcz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbrchblcz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ h = {}\n\tfor _, v in ipairs(l) do\n\t\th[v] = true\n\tend\n\tlocal l = {}\n\
    \tfor k, _ in pairs(h) do\n\t\ttable.insert(l, k)\n\tend\n\ttable.sort(l)\n\t\
    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  if not\
    \ is_type(l, 'table') then return l end\n  local unique = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(unique, v) then\n      table.insert(unique, v)\n   \
    \ end\n  end\n  return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoy9gqa0b.lua:5:\
    \ attempt to call a nil value (global 'is_type')\nstack traceback:\n\t/tmp/tmpoy9gqa0b.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpoy9gqa0b.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    if\
    \ type(l) ~= \"table\" then\n        return l\n    end\n    local seen = {}\n\
    \    local r = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n\
    \            r[#r + 1] = v\n            seen[v] = true\n        end\n    end\n\
    \    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms0_kly7.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpms0_kly7.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local l2 = {}\n\
    \  for v in pairs(s) do\n    l2[#l2+1] = v\n  end\n  table.sort(l2)\n  return\
    \ l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ ret = {}\n  for _, v in ipairs(l) do\n    if #ret == 0 or ret[#ret] ~= v then\n\
    \      ret[#ret + 1] = v\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jwxft5o.lua:17:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp7jwxft5o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for i, v in ipairs(l) do\n        s[v] = true\n    end\n    return\
    \ keys(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3plwtjcv.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmp3plwtjcv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3plwtjcv.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  if not\
    \ l then return nil end\n  local uniq = {}\n  for _,x in ipairs(l) do\n    uniq[x]\
    \ = true\n  end\n  local r = {}\n  for k,_ in pairs(uniq) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ unique_l = {}\n\tfor _,v in ipairs(l) do\n\t\tunique_l[#unique_l+1] = v\n\t\
    end\n\ttable.sort(unique_l)\n\tlocal i = 2\n\twhile i <= #unique_l do\n\t\tif\
    \ unique_l[i] == unique_l[i-1] then\n\t\t\ttable.remove(unique_l, i)\n\t\telse\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn unique_l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not res[v] then\n       \
    \     res[v] = true\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptss7oscs.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmptss7oscs.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            table.insert(u, v)\n        end\n    end\n    return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07h6jdlf.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp07h6jdlf.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, n in ipairs(l) do\n        if not u[n] then\n           \
    \ u[n] = true\n            table.insert(u, n)\n        end\n    end\n    return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksx2aifx.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpksx2aifx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, x in ipairs(l) do\n        r[x] = true\n    end\n    r =\
    \ keys(r)\n    sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmtv4whu.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmphmtv4whu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmphmtv4whu.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    if not in_table(u, v) then\n      table.insert(u,\
    \ v)\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpulo3wjua.lua:7:\
    \ attempt to call a nil value (global 'in_table')\nstack traceback:\n\t/tmp/tmpulo3wjua.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpulo3wjua.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        if t[v] == nil then\n        \
    \    t[v] = true\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0onp67d4.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp0onp67d4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local unique = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            unique[#unique + 1] = v\n            seen[v] = true\n\
    \        end\n    end\n    return unique\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4qyoq_i.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpz4qyoq_i.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ f = {}\n\tfor k,v in pairs(l) do\n\t\tif not f[v] then\n\t\t\tf[v] = true\n\t\
    \tend\n\tend\n\tlocal r = {}\n\tfor k,v in pairs(f) do\n\t\ttable.insert(r, k)\n\
    \tend\n\ttable.sort(r)\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ m = {}\n  for _, v in ipairs(l) do\n    m[v] = 1\n  end\n  local n = {}\n  for\
    \ k, _ in pairs(m) do\n    table.insert(n, k)\n  end\n  table.sort(n)\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ v, r = {}, {}\n    for _, x in ipairs(l) do\n        if not v[x] then table.insert(r,\
    \ x) end\n        v[x] = true\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vm1qzon.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp8vm1qzon.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local t = {}\n\
    \  for k, _ in pairs(s) do\n    t[#t+1] = k\n  end\n  table.sort(t)\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ seen = {}\n  for _, e in ipairs(l) do\n    seen[e] = true\n  end\n  local res\
    \ = {}\n  for k, _ in pairs(seen) do\n    table.insert(res, k)\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if not seen[v]\
    \ then\n      table.insert(result, v)\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbdnzcad.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmplbdnzcad.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ result = {}\n    local hash = {}\n    for _, v in ipairs(l) do\n        if not\
    \ hash[v] then\n            table.insert(result, v)\n            hash[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o68vm8i.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp6o68vm8i.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for i = 1, #l do\n    local el = l[i]\n    local elIsUnique = true\n\
    \    for _, el2 in ipairs(r) do\n      if el == el2 then\n        elIsUnique =\
    \ false\n        break\n      end\n    end\n    if elIsUnique then\n      table.insert(r,\
    \ el)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndtdrkzo.lua:25:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpndtdrkzo.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ h = {}\n    for _, v in ipairs(l) do\n        h[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(h) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ m = {}\n  for i = 1, #l do\n    m[l[i]] = true\n  end\n  local n = {}\n  for\
    \ k, _ in pairs(m) do\n    n[#n + 1] = k\n  end\n  table.sort(n)\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ h = {}\n    for _, i in ipairs(l) do\n        h[i] = true\n    end\n    return\
    \ keys(h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpux_iiql8.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpux_iiql8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpux_iiql8.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ hash = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if not hash[v]\
    \ then\n      result[#result+1] = v\n      hash[v] = true\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q83y_r4.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp_q83y_r4.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ res = {}\n\tfor _, v in ipairs(l) do\n\t\tif #res == 0 or v ~= res[#res] then\n\
    \t\t\tres[#res + 1] = v\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo002dblg.lua:17:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpo002dblg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ list = {}\n    for _, v in ipairs(l) do\n        if not list[v] then\n     \
    \       list[v] = true\n            table.insert(list, v)\n        end\n    end\n\
    \    table.sort(list)\n    return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare boolean with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ s = {}\n\tfor _, v in ipairs(l) do\n\t\ts[v] = true\n\tend\n\tlocal r = {}\n\
    \tfor k, _ in pairs(s) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\t\
    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ sl = {}\n    for i = 1, #l do\n        sl[i] = l[i]\n    end\n    table.sort(sl)\n\
    \    local prev = sl[1]\n    local last = 1\n    for i = 2, #sl do\n        if\
    \ sl[i] ~= prev then\n            last = last + 1\n            sl[last] = sl[i]\n\
    \            prev = sl[i]\n        end\n    end\n    for i = last + 1, #sl do\n\
    \        sl[i] = nil\n    end\n    return sl\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ result = {}\n    for i, v in ipairs(l) do\n        if not contains(result, v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau_08538.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpau_08538.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpau_08538.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    --\
    \ new list\n    local u = {}\n    -- table for keeping track of already added\
    \ values\n    local t = {}\n    -- sort list\n    table.sort(l)\n    -- loop through\
    \ list\n    for _,v in ipairs(l) do\n        -- if value is not already in t\n\
    \        if not t[v] then\n            -- add value to new list\n            table.insert(u,\
    \ v)\n            -- add value to t\n            t[v] = true\n        end\n  \
    \  end\n    -- return new list\n    return u\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ hash = {}\n    local res = {}\n    for _, v in ipairs(l) do\n        if not\
    \ hash[v] then\n            res[#res+1] = v\n            hash[v] = true\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tu3r1ve.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp_tu3r1ve.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    table.sort(l)\n\
    \    local i = 1\n    while i < #l do\n        if l[i] == l[i+1] then\n      \
    \      table.remove(l, i)\n        else\n            i = i + 1\n        end\n\
    \    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    return{}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucok0tjg.lua:11:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {}\nstack traceback:\n\t/tmp/tmpucok0tjg.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ set = {}\n  for _, v in ipairs(l) do\n    set[v] = true\n  end\n  local list\
    \ = {}\n  for k, _ in pairs(set) do\n    table.insert(list, k)\n  end\n  table.sort(list)\n\
    \  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ ret = {}\n  local found = {}\n  for _, v in ipairs(l) do\n    if not found[v]\
    \ then\n      found[v] = true\n      table.insert(ret, v)\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n3henog.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp7n3henog.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local ll = {}\n\
    \  for k, _ in pairs(u) do\n    table.insert(ll, k)\n  end\n  table.sort(ll)\n\
    \  return ll\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ seen = {}\n  for _, x in ipairs(l) do\n    seen[x] = true\n  end\n  local res\
    \ = {}\n  for k, _ in pairs(seen) do\n    table.insert(res, k)\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            table.insert(u, v)\n        end\n    end\n    return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09h2d3gu.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp09h2d3gu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ hash, res = {}, {}\n  for _, v in ipairs(l) do\n    if not hash[v] then\n  \
    \    hash[v] = true\n      res[#res+1] = v\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohaivvdp.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpohaivvdp.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ ret = {}\n\tfor i = 1, #l do\n\t\tif not table.contains(ret, l[i]) then\n\t\t\
    \ttable.insert(ret, l[i])\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0sfr17t2.lua:7:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp0sfr17t2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0sfr17t2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        u[v] = true\n    end\n    l =\
    \ {}\n    for k, _ in pairs(u) do\n        table.insert(l, k)\n    end\n    table.sort(l)\n\
    \    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ uniq = {}\n  for _, v in ipairs(l) do\n    uniq[v] = true\n  end\n  return keys(uniq)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmv9kuo7.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpjmv9kuo7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjmv9kuo7.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  local s = {}\n\
    \  for k, _ in pairs(r) do\n    table.insert(s, k)\n  end\n  table.sort(s)\n \
    \ return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ uniq = {}\n    for _, e in ipairs(l) do\n        if not uniq[e] then uniq[e]\
    \ = true end\n    end\n    return keys(uniq)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotvgmzif.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpotvgmzif.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpotvgmzif.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ a = {}\n    for _, i in ipairs(l) do\n        a[i] = i\n    end\n    local j\
    \ = 1\n    for _, i in ipairs(l) do\n        if a[i] then\n            a[j] =\
    \ a[i]\n            a[i] = nil\n            j = j + 1\n        end\n    end\n\
    \    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpws18ce_s.lua:23:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 4=3, 5=9, 6=0, 7=123}\nstack traceback:\n\
    \t/tmp/tmpws18ce_s.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    local added = {}\n    for _, x in ipairs(l) do\n        if not added[x]\
    \ then\n            r[#r + 1] = x\n            added[x] = true\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpethf4rwe.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpethf4rwe.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ out = {}\n  for _,v in ipairs(l) do\n    if not utils.contains(out, v) then\n\
    \      table.insert(out, v)\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztu3zlxh.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpztu3zlxh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpztu3zlxh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ m = { }\n  for k, v in ipairs(l) do\n    m[v] = true\n  end\n  local r = { }\n\
    \  for k, v in pairs(m) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ ret = {}\n\tfor _, x in ipairs(l) do\n\t\tif not set[x] then\n\t\t\tret[#ret\
    \ + 1] = x\n\t\t\tset[x] = true\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dr3a82h.lua:7:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmp1dr3a82h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1dr3a82h.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l) do\n\t\tif not t[v] then\n\t\t\tt[v] = true\n\
    \t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppexro0ot.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmppexro0ot.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvsen651.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpkvsen651.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkvsen651.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ u = {}\n\tfor _, v in ipairs(l) do\n\t\tu[v] = true\n\tend\n\treturn sorted(keys(u))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbomv7p2k.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpbomv7p2k.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbomv7p2k.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ d = {}\n    for _,v in ipairs(l) do\n        d[v] = true\n    end\n    local\
    \ u = {}\n    for k,_ in pairs(d) do\n        table.insert(u, k)\n    end\n  \
    \  table.sort(u)\n    return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ n = {}\n  for _,v in ipairs(l) do\n    n[v] = (n[v] or 0) + 1\n  end\n  return\
    \ keys(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppg_3k0_w.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmppg_3k0_w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppg_3k0_w.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ unique = {}\n    for _, v in ipairs(l) do\n        if not tablex.find(unique,\
    \ v) then\n            table.insert(unique, v)\n        end\n    end\n    return\
    \ unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgt2etupk.lua:7:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmpgt2etupk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgt2etupk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    table.sort(l)\n\
    \    local n = 1\n    while n < #l do\n        if l[n] == l[n+1] then\n      \
    \      table.remove(l, n)\n        else\n            n = n + 1\n        end\n\
    \    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ t = {}\n\tfor _,v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\treturn keys(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lmy3i0w.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmp9lmy3i0w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9lmy3i0w.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ hash = {}\n    local res = {}\n    for _, v in ipairs(l) do\n        if not\
    \ hash[v] then\n            res[#res+1] = v\n            hash[v] = true\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebfe960r.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpebfe960r.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            seen[v] = true\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_189ih7r.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp_189ih7r.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ sl = {}\n\tlocal i = 1\n\tfor _, v in pairs(l) do\n\t\tif not contains(sl, v)\
    \ then\n\t\t\tsl[i] = v\n\t\t\ti = i + 1\n\t\tend\n\tend\n\ttable.sort(sl)\n\t\
    return sl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkz8bgxll.lua:8:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpkz8bgxll.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkz8bgxll.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tr[v] = true\n\tend\n\treturn table.keys(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpughel3up.lua:9:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpughel3up.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpughel3up.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  local seen = {}\n  for _, v in ipairs(l) do\n    if not seen[v]\
    \ then\n      res[#res + 1] = v\n      seen[v] = true\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknws3zba.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpknws3zba.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if #r == 0 or v ~= r[#r] then\n    \
    \  r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxllxraj.lua:17:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpkxllxraj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ s = {}\n\tfor i, v in ipairs(l) do\n\t\ts[v] = v\n\tend\n\tlocal r = {}\n\t\
    for i, v in pairs(s) do\n\t\ttable.insert(r, v)\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local uniq = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(uniq, v)\n            seen[v] = true\n\
    \        end\n    end\n    return uniq\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphm3urfba.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmphm3urfba.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpll6rbwi0.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpll6rbwi0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpll6rbwi0.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  return keys(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkg93teim.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpkg93teim.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkg93teim.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ flags = {}\n  local cnt = 0\n  for i = 1, #l do\n    if not flags[l[i]] then\n\
    \      cnt = cnt + 1\n      flags[l[i]] = cnt\n    end\n  end\n  local res = {}\n\
    \  for k, v in pairs(flags) do\n    res[v] = k\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  local done = {}\n  for _, v in ipairs(l) do\n    if not done[v] then\n\
    \      u[#u + 1] = v\n      done[v] = true\n    end\n  end\n  return u\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74qpbj_f.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp74qpbj_f.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  if not\
    \ l then return {} end\n  local u = {}\n  for _, v in ipairs(l) do\n    if not\
    \ util.index_of(u, v) then\n      table.insert(u, v)\n    end\n  end\n  return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumt6sy0t.lua:8:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpumt6sy0t.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpumt6sy0t.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ uniques = {}\n    for i,v in ipairs(l) do\n        if not uniques[v] then\n\
    \            uniques[v] = true\n            l[#l+1] = v\n        end\n    end\n\
    \    table.sort(l)\n    local i = 0\n    while l[i+1] do\n        i = i + 1\n\
    \    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kyahfsf.lua:23:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 0, 2, 2, 3, 3, 3, 3, 5, 5, 5, 9,\
    \ 9, 123, 123}\nstack traceback:\n\t/tmp/tmp1kyahfsf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal u = {}\n\
    \tfor k, _ in pairs(t) do\n\t\tu[#u + 1] = k\n\tend\n\treturn u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkb46pst.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 9, 2, 3, 5, 123}\nstack traceback:\n\
    \t/tmp/tmpnkb46pst.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ aux = {}\n\tfor _, v in ipairs(l) do\n\t\taux[v] = true\n\tend\n\treturn keys(aux)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbdgqfwj.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpfbdgqfwj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfbdgqfwj.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ r, h = {}, {}\n\tfor _, v in ipairs(l) do\n\t\tif not h[v] then\n\t\t\th[v]\
    \ = true\n\t\t\tr[#r + 1] = v\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeohurvmi.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpeohurvmi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ c = {}\n    for _,v in ipairs(l) do c[v] = true end\n    local i = 0\n    return\
    \ function()\n        i = i + 1\n        for k,_ in pairs(c) do\n            if\
    \ i == 1 then return k end\n            i = i - 1\n        end\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr9hana_.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: function: 0x1e78bd0\nstack traceback:\n\
    \t/tmp/tmplr9hana_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    if\
    \ l == nil then return nil end\n    local s = {}\n    for _, v in ipairs(l) do\n\
    \        s[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(s) do\n\
    \        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ u = {}\n\tfor _,v in ipairs(l) do\n\t\tu[v] = true\n\tend\n\tlocal r = {}\n\t\
    for k,_ in pairs(u) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ hash = {}\n    local res = {}\n    for _, v in ipairs(l) do\n        if not\
    \ hash[v] then\n            res[#res+1] = v\n            hash[v] = true\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg52elm3l.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpg52elm3l.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    if not utils.contains(u, v) then\n \
    \     table.insert(u, v)\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0e3oxi2r.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmp0e3oxi2r.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0e3oxi2r.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ ul = {}\n    for i,v in ipairs(l) do\n        if not utils.array.contains(ul,\
    \ v) then\n            table.insert(ul, v)\n        end\n    end\n    return ul\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiroaeilt.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpiroaeilt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiroaeilt.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _,v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k,_ in pairs(s) do\n        table.insert(r, k)\n    end\n  \
    \  table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  return sort(keys(s))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3e2d9xqj.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmp3e2d9xqj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3e2d9xqj.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  local function add (v)\n    if res[v] == nil then\n      res[v]\
    \ = true\n      return true\n    end\n    return false\n  end\n  if not l then\
    \ return {} end\n  local n = #l\n  for i = 1, n do\n    if add(l[i]) then\n  \
    \    for j = i + 1, n do\n        if l[i] == l[j] then\n          table.remove(l,\
    \ j)\n          j = j - 1\n          n = n - 1\n        end\n      end\n    end\n\
    \  end\n  table.sort(l)\n  return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp814yowkt.lua:8:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp814yowkt.lua:8: in local 'add'\n\
    \t/tmp/tmp814yowkt.lua:16: in local 'candidate'\n\t/tmp/tmp814yowkt.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    local v = l[i]\n    if\
    \ not seen[v] then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n \
    \ end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbo16usr.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmplbo16usr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    table.sort(l)\n\
    \    local unique_elements = {}\n    for i, element in ipairs(l) do\n        if\
    \ i == 1 or l[i-1] ~= element then\n            table.insert(unique_elements,\
    \ element)\n        end\n    end\n    return unique_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ res = {}\n\tfor _,e in ipairs(l) do\n\t\tif not contains(res, e) then table.insert(res,\
    \ e) end\n\tend\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdns2w0_9.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpdns2w0_9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdns2w0_9.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ keys = {}\n  local d = {}\n  for _, v in ipairs(l) do\n    if not keys[v] then\n\
    \      keys[v] = true\n      table.insert(d, v)\n    end\n  end\n  return d\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdipmsif.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmptdipmsif.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  local p = {}\n  for _, v in ipairs(l) do\n    if not p[v] then\n \
    \     r[#r + 1] = v\n      p[v] = true\n    end\n  end\n  return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zcv8lvz.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5zcv8lvz.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        res[v] = true\n    end\n   \
    \ return sortKeys(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4xisqsk.lua:9:\
    \ attempt to call a nil value (global 'sortKeys')\nstack traceback:\n\t/tmp/tmpe4xisqsk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe4xisqsk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\treturn table.keys(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl87s_cwz.lua:9:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpl87s_cwz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl87s_cwz.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for i, v in ipairs(l) do\n    t[v] = v\n  end\n  local r = {}\n  for\
    \ _, v in pairs(t) do\n    table.insert(r, v)\n  end\n  table.sort(r)\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  assert_type(l,\
    \ 'table', 1)\n  local uniq = {}\n  for _, v in ipairs(l) do\n    if not uniq[v]\
    \ then uniq[v] = true end\n  end\n  return from_map(uniq)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8_q0w4zk.lua:5:\
    \ attempt to call a nil value (global 'assert_type')\nstack traceback:\n\t/tmp/tmp8_q0w4zk.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp8_q0w4zk.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local result =\
    \ {}\n  for k, _ in pairs(u) do\n    table.insert(result, k)\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
